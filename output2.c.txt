/* Generated by CIL v. 1.7.3 */
/* print_CIL_Input is false */

#pragma clang assume_nonnull begin
#pragma clang assume_nonnull end
#pragma clang assume_nonnull begin
#pragma clang assume_nonnull end
#pragma clang assume_nonnull begin
#pragma clang assume_nonnull end
union _3_fib_$node ;
struct __anonstruct_ldiv_t_748949161 ;
struct __anonstruct_w_S_422959016 ;
union __anonunion___mbstate_t_250061491 ;
struct __darwin_mcontext64_full ;
struct __darwin_mcontext_avx32 ;
struct __darwin_mcontext_avx512_64_full ;
struct __darwin_mcontext_avx64 ;
struct __darwin_sigaltstack ;
struct __darwin_x86_avx512_state64 ;
struct __darwin_x86_cpmu_state64 ;
struct __darwin_x86_debug_state64 ;
struct __darwin_x86_float_state64 ;
struct __darwin_x86_thread_state64 ;
struct __darwin_ymm_reg ;
struct __sFILEX ;
struct __sigaction ;
struct __siginfo ;
struct _opaque_pthread_cond_t ;
struct _opaque_pthread_condattr_t ;
struct _opaque_pthread_mutex_t ;
struct clockinfo ;
struct pthread_override_s ;
struct rlimit ;
struct rusage_info_v1 ;
struct rusage_info_v3 ;
struct sigstack ;
struct sigvec ;
struct timezone ;
struct tm ;
enum _3_fac_$op ;
enum _3_fib_$op ;
enum __anonenum_idtype_t_558242672 ;
struct _2_init_tigress_1_opaque_NodeStruct ;
union _3_fac_$node ;
struct __anonstruct_div_t_773697287 ;
struct __anonstruct_lldiv_t_86583852 ;
struct __anonstruct_w_T_422959015 ;
struct __darwin_fp_control ;
struct __darwin_fp_status ;
struct __darwin_i386_avx512_state ;
struct __darwin_i386_avx_state ;
struct __darwin_i386_exception_state ;
struct __darwin_i386_float_state ;
struct __darwin_i386_thread_state ;
struct __darwin_mcontext32 ;
struct __darwin_mcontext64 ;
struct __darwin_mcontext_avx512_32 ;
struct __darwin_mcontext_avx512_64 ;
struct __darwin_mcontext_avx64_full ;
struct __darwin_mmst_reg ;
struct __darwin_opmask_reg ;
struct __darwin_pthread_handler_rec ;
struct __darwin_ucontext ;
struct __darwin_x86_avx_state64 ;
struct __darwin_x86_debug_state32 ;
struct __darwin_x86_exception_state64 ;
struct __darwin_x86_thread_full_state64 ;
struct __darwin_xmm_reg ;
struct __darwin_zmm_reg ;
struct __sFILE ;
struct __sbuf ;
union __sigaction_u ;
struct __x86_pagein_state ;
struct _opaque_pthread_mutexattr_t ;
struct _opaque_pthread_once_t ;
struct _opaque_pthread_rwlockattr_t ;
struct fd_set ;
struct rusage_info_v2 ;
enum __anonenum_clockid_t_447627989 ;
struct _opaque_pthread_attr_t ;
struct _opaque_pthread_rwlock_t ;
struct _opaque_pthread_t ;
struct itimerval ;
struct proc_rlimit_control_wakeupmon ;
struct rusage ;
struct rusage_info_v0 ;
struct rusage_info_v4 ;
struct sched_param ;
struct sigaction ;
enum __anonenum_788482901 ;
struct sigevent ;
union sigval ;
struct timespec ;
struct timeval ;
struct timeval64 ;
union wait ;
extern long mrand48(void)  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
struct _opaque_pthread_cond_t {
   long __sig ;
   char __opaque[40] ;
};
typedef struct _opaque_pthread_cond_t __darwin_pthread_cond_t;
typedef __darwin_pthread_cond_t pthread_cond_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_broadcast(pthread_cond_t * ) ;
extern int putchar_unlocked(int  ) ;
typedef short int16_t;
typedef int16_t int_fast16_t;
struct _opaque_pthread_mutexattr_t {
   long __sig ;
   char __opaque[8] ;
};
typedef struct _opaque_pthread_mutexattr_t __darwin_pthread_mutexattr_t;
typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_setprioceiling(pthread_mutexattr_t * ,
                                                                                                                                            int  ) ;
struct __darwin_fp_control {
   unsigned short __invalid : 1 ;
   unsigned short __denorm : 1 ;
   unsigned short __zdiv : 1 ;
   unsigned short __ovrfl : 1 ;
   unsigned short __undfl : 1 ;
   unsigned short __precis : 1 ;
   unsigned short  : 2 ;
   unsigned short __pc : 2 ;
   unsigned short __rc : 2 ;
   unsigned short  : 1 ;
   unsigned short  : 3 ;
};
struct __darwin_fp_status {
   unsigned short __invalid : 1 ;
   unsigned short __denorm : 1 ;
   unsigned short __zdiv : 1 ;
   unsigned short __ovrfl : 1 ;
   unsigned short __undfl : 1 ;
   unsigned short __precis : 1 ;
   unsigned short __stkflt : 1 ;
   unsigned short __errsumm : 1 ;
   unsigned short __c0 : 1 ;
   unsigned short __c1 : 1 ;
   unsigned short __c2 : 1 ;
   unsigned short __tos : 3 ;
   unsigned short __c3 : 1 ;
   unsigned short __busy : 1 ;
};
struct __darwin_mmst_reg {
   char __mmst_reg[10] ;
   char __mmst_rsrv[6] ;
};
struct __darwin_opmask_reg {
   char __opmask_reg[8] ;
};
struct __darwin_xmm_reg {
   char __xmm_reg[16] ;
};
struct __darwin_ymm_reg {
   char __ymm_reg[32] ;
};
typedef unsigned short __uint16_t;
typedef unsigned int __uint32_t;
typedef unsigned char __uint8_t;
struct __darwin_i386_avx512_state {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   char __fpu_rsrv4[224] ;
   int __fpu_reserved1 ;
   char __avx_reserved1[64] ;
   struct __darwin_xmm_reg __fpu_ymmh0 ;
   struct __darwin_xmm_reg __fpu_ymmh1 ;
   struct __darwin_xmm_reg __fpu_ymmh2 ;
   struct __darwin_xmm_reg __fpu_ymmh3 ;
   struct __darwin_xmm_reg __fpu_ymmh4 ;
   struct __darwin_xmm_reg __fpu_ymmh5 ;
   struct __darwin_xmm_reg __fpu_ymmh6 ;
   struct __darwin_xmm_reg __fpu_ymmh7 ;
   struct __darwin_opmask_reg __fpu_k0 ;
   struct __darwin_opmask_reg __fpu_k1 ;
   struct __darwin_opmask_reg __fpu_k2 ;
   struct __darwin_opmask_reg __fpu_k3 ;
   struct __darwin_opmask_reg __fpu_k4 ;
   struct __darwin_opmask_reg __fpu_k5 ;
   struct __darwin_opmask_reg __fpu_k6 ;
   struct __darwin_opmask_reg __fpu_k7 ;
   struct __darwin_ymm_reg __fpu_zmmh0 ;
   struct __darwin_ymm_reg __fpu_zmmh1 ;
   struct __darwin_ymm_reg __fpu_zmmh2 ;
   struct __darwin_ymm_reg __fpu_zmmh3 ;
   struct __darwin_ymm_reg __fpu_zmmh4 ;
   struct __darwin_ymm_reg __fpu_zmmh5 ;
   struct __darwin_ymm_reg __fpu_zmmh6 ;
   struct __darwin_ymm_reg __fpu_zmmh7 ;
};
typedef long __darwin_ssize_t;
struct _opaque_pthread_once_t {
   long __sig ;
   char __opaque[8] ;
};
typedef int __int32_t;
typedef __int32_t __darwin_blksize_t;
struct _opaque_pthread_mutex_t {
   long __sig ;
   char __opaque[56] ;
};
typedef struct _opaque_pthread_mutex_t __darwin_pthread_mutex_t;
typedef __darwin_pthread_mutex_t pthread_mutex_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_timedwait_relative_np(pthread_cond_t * ,
                                                                                                                                              pthread_mutex_t * ,
                                                                                                                                              struct timespec  const  * _Nullable   ) ;
typedef struct __sFILE FILE;
extern int putc(int  , FILE * ) ;
struct _opaque_pthread_attr_t {
   long __sig ;
   char __opaque[56] ;
};
typedef struct _opaque_pthread_attr_t __darwin_pthread_attr_t;
typedef __darwin_pthread_attr_t pthread_attr_t;
typedef unsigned int qos_class_t;
extern int __attribute__((__availability__(ios,introduced=8.0), __availability__(macos,introduced=10.10)))  pthread_attr_get_qos_class_np(pthread_attr_t * __restrict  __attr ,
                                                                                                                                          qos_class_t * _Nullable __restrict  __qos_class ,
                                                                                                                                          int * _Nullable __restrict  __relative_priority ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_gettype(pthread_mutexattr_t const   * __restrict   ,
                                                                                                                                     int * __restrict   ) ;
__inline extern int ( __attribute__((__always_inline__)) __darwin_fd_isset)(int _fd ,
                                                                            struct fd_set  const  *_p ) ;
extern FILE *__stdinp ;
extern  __attribute__((__noreturn__)) void __attribute__((__availability__(macos,introduced=10.4),
__availability__(ios,introduced=2.0)))  pthread_exit(void * _Nullable   ) ;
typedef struct _opaque_pthread_condattr_t __darwin_pthread_condattr_t;
extern char *ctermid(char * ) ;
typedef long __darwin_time_t;
typedef __darwin_time_t time_t;
extern time_t mktime(struct tm * )  __asm__("_mktime")  ;
struct _2_init_tigress_1_opaque_NodeStruct {
   struct _2_init_tigress_1_opaque_NodeStruct *next ;
   int data ;
   struct _2_init_tigress_1_opaque_NodeStruct *prev ;
};
struct _2_init_tigress_1_opaque_NodeStruct *_2_init_tigress_1_opaque_ptr_2  =    (struct _2_init_tigress_1_opaque_NodeStruct *)0;
__inline static __uint16_t _OSSwapInt16(__uint16_t _data ) ;
extern void arc4random_addrandom(unsigned char * , int  )  __attribute__((__availability__(watchos,deprecated=3.0,message="use arc4random_stir"),
__availability__(watchos,introduced=1.0), __availability__(tvos,deprecated=10.0,message="use arc4random_stir"),
__availability__(tvos,introduced=2.0), __availability__(ios,deprecated=10.0,message="use arc4random_stir"),
__availability__(ios,introduced=2.0), __availability__(macosx,deprecated=10.12,message="use arc4random_stir"),
__availability__(macosx,introduced=10.0))) ;
extern int fputs(char const   * __restrict   , FILE * __restrict   )  __asm__("_fputs")  ;
typedef __int32_t __darwin_suseconds_t;
struct timeval {
   __darwin_time_t tv_sec ;
   __darwin_suseconds_t tv_usec ;
};
struct rusage {
   struct timeval ru_utime ;
   struct timeval ru_stime ;
   long ru_maxrss ;
   long ru_ixrss ;
   long ru_idrss ;
   long ru_isrss ;
   long ru_minflt ;
   long ru_majflt ;
   long ru_nswap ;
   long ru_inblock ;
   long ru_oublock ;
   long ru_msgsnd ;
   long ru_msgrcv ;
   long ru_nsignals ;
   long ru_nvcsw ;
   long ru_nivcsw ;
};
extern void funlockfile(FILE * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setstackaddr(pthread_attr_t * ,
                                                                                                                                     void * ) ;
extern int setiopolicy_np(int  , int  , int  )  __attribute__((__availability__(macosx,introduced=10.5))) ;
typedef unsigned long long __uint64_t;
struct __darwin_x86_debug_state64 {
   __uint64_t __dr0 ;
   __uint64_t __dr1 ;
   __uint64_t __dr2 ;
   __uint64_t __dr3 ;
   __uint64_t __dr4 ;
   __uint64_t __dr5 ;
   __uint64_t __dr6 ;
   __uint64_t __dr7 ;
};
extern int setitimer(int  , struct itimerval  const  * __restrict   , struct itimerval * __restrict   ) ;
extern int __attribute__((__availability__(ios,introduced=8.0), __availability__(macos,introduced=10.10)))  pthread_attr_set_qos_class_np(pthread_attr_t *__attr ,
                                                                                                                                          qos_class_t __qos_class ,
                                                                                                                                          int __relative_priority ) ;
typedef signed char int8_t;
typedef int8_t int_least8_t;
typedef unsigned long __darwin_size_t;
typedef __darwin_size_t size_t;
extern size_t fread(void * __restrict  __ptr , size_t __size , size_t __nitems , FILE * __restrict  __stream ) ;
typedef unsigned long long u_int64_t;
extern FILE *tmpfile(void) ;
extern  __attribute__((__noreturn__)) void abort(void)  __attribute__((__cold__)) ;
extern int getloadavg(double * , int  ) ;
typedef __uint32_t __darwin_wctype_t;
typedef __int32_t __darwin_pid_t;
typedef __darwin_pid_t pid_t;
extern pid_t wait4(pid_t  , int * , int  , struct rusage * ) ;
extern char __attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tempnam(3), it is highly recommended that you use mkstemp(3) instead."),
__availability__(swift,unavailable,message="Use mkstemp(3) instead.")))  *tempnam(char const   *__dir ,
                                                                                  char const   *__prefix )  __asm__("_tempnam")  ;
struct sched_param {
   int sched_priority ;
   char __opaque[4] ;
};
struct tm {
   int tm_sec ;
   int tm_min ;
   int tm_hour ;
   int tm_mday ;
   int tm_mon ;
   int tm_year ;
   int tm_wday ;
   int tm_yday ;
   int tm_isdst ;
   long tm_gmtoff ;
   char *tm_zone ;
};
typedef __darwin_ssize_t ssize_t;
extern ssize_t getline(char ** __restrict  __linep , size_t * __restrict  __linecapp ,
                       FILE * __restrict  __stream )  __attribute__((__availability__(macosx,introduced=10.7))) ;
typedef u_int64_t user_ulong_t;
extern int getrusage(int  , struct rusage * ) ;
typedef __uint32_t __darwin_sigset_t;
typedef __darwin_sigset_t sigset_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_sigmask(int  ,
                                                                                                                           sigset_t const   * _Nullable   ,
                                                                                                                           sigset_t * _Nullable   )  __asm__("_pthread_sigmask")  ;
extern int fileno(FILE * ) ;
typedef __builtin_va_list __darwin_va_list;
typedef __darwin_va_list va_list;
extern int ( /* format attribute */  vsprintf)(char * __restrict   , char const   * __restrict   ,
                                               va_list  )  __attribute__((__availability__(swift,unavailable,message="Use vsnprintf instead."))) ;
extern int ( /* format attribute */  vprintf)(char const   * __restrict   , va_list  ) ;
extern int cgetent(char ** , char ** , char const   * ) ;
extern void tzset(void) ;
union _3_fac_$node {
   char _char ;
   unsigned int _unsigned_int ;
   unsigned char _unsigned_char ;
   long _long ;
   unsigned long _unsigned_long ;
   void *_void_star ;
   unsigned short _unsigned_short ;
   unsigned long long _unsigned_long_long ;
   signed char _signed_char ;
   long long _long_long ;
   int _int ;
   short _short ;
};
typedef struct _opaque_pthread_t *__darwin_pthread_t;
typedef __darwin_pthread_t pthread_t;
extern pthread_t __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  pthread_self(void) ;
struct __darwin_i386_avx_state {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   char __fpu_rsrv4[224] ;
   int __fpu_reserved1 ;
   char __avx_reserved1[64] ;
   struct __darwin_xmm_reg __fpu_ymmh0 ;
   struct __darwin_xmm_reg __fpu_ymmh1 ;
   struct __darwin_xmm_reg __fpu_ymmh2 ;
   struct __darwin_xmm_reg __fpu_ymmh3 ;
   struct __darwin_xmm_reg __fpu_ymmh4 ;
   struct __darwin_xmm_reg __fpu_ymmh5 ;
   struct __darwin_xmm_reg __fpu_ymmh6 ;
   struct __darwin_xmm_reg __fpu_ymmh7 ;
};
extern char *gets(char * ) ;
void fac(int n ) ;
struct _opaque_pthread_rwlock_t {
   long __sig ;
   char __opaque[192] ;
};
typedef struct _opaque_pthread_rwlock_t __darwin_pthread_rwlock_t;
typedef __darwin_pthread_rwlock_t pthread_rwlock_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_tryrdlock(pthread_rwlock_t * )  __asm__("_pthread_rwlock_tryrdlock")  ;
typedef struct fd_set fd_set;
struct _opaque_pthread_condattr_t {
   long __sig ;
   char __opaque[8] ;
};
typedef __darwin_pthread_condattr_t pthread_condattr_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_condattr_getpshared(pthread_condattr_t const   * __restrict   ,
                                                                                                                                       int * __restrict   ) ;
extern char *ptsname(int  ) ;
extern int rand_r(unsigned int * )  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
typedef int int32_t;
typedef int32_t int_fast32_t;
typedef long long __int64_t;
typedef __int64_t __darwin_off_t;
typedef __darwin_off_t fpos_t;
extern time_t time(time_t * ) ;
extern int daemon(int  , int  )  __asm__("_daemon$1050") __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable), __availability__(macosx,introduced=10.0,deprecated=10.5,message="Use posix_spawn APIs instead."))) ;
extern int __srget(FILE * ) ;
extern void *( __attribute__((__warn_unused_result__)) malloc)(size_t __size )  __attribute__((__alloc_size__(1))) ;
extern long long atoll(char const   * ) ;
typedef long long int64_t;
typedef int64_t register_t;
extern int adjtime(struct timeval  const  * , struct timeval * ) ;
typedef long __darwin_ptrdiff_t;
extern int getw(FILE * ) ;
extern char *realpath(char const   * __restrict   , char * __restrict   )  __asm__("_realpath$DARWIN_EXTSN")  ;
typedef struct __anonstruct_ldiv_t_748949161 ldiv_t;
void fib(int n ) ;
struct __darwin_i386_exception_state {
   __uint16_t __trapno ;
   __uint16_t __cpu ;
   __uint32_t __err ;
   __uint32_t __faultvaddr ;
};
__inline extern int ( __attribute__((__always_inline__)) __darwin_check_fd_set)(int _a ,
                                                                                void const   *_b ) ;
extern int __darwin_check_fd_set_overflow(int  , void const   * , int  )  __attribute__((__weak_import__)) ;
extern int sched_get_priority_max(int  ) ;
typedef struct __anonstruct_lldiv_t_86583852 lldiv_t;
extern char *getenv(char const   * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_join(pthread_t  ,
                                                                                                                        void * _Nullable  * _Nullable   )  __asm__("_pthread_join")  ;
typedef __int64_t __darwin_blkcnt_t;
typedef __uint32_t __darwin_useconds_t;
typedef struct _opaque_pthread_once_t __darwin_pthread_once_t;
typedef unsigned int uint32_t;
typedef uint32_t uint_least32_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_signal(pthread_cond_t * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_getconcurrency(void) ;
typedef signed char __int8_t;
typedef int __darwin_wctrans_t;
extern double difftime(time_t  , time_t  ) ;
extern int ( /* format attribute */  vsnprintf)(char * __restrict  __str , size_t __size ,
                                                char const   * __restrict  __format ,
                                                va_list  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_atfork(void (* _Nullable  )(void) ,
                                                                                                                          void (* _Nullable  )(void) ,
                                                                                                                          void (* _Nullable  )(void) ) ;
typedef enum __anonenum_clockid_t_447627989 clockid_t;
extern double erand48(unsigned short * ) ;
extern int ( /* format attribute */  sprintf)(char * __restrict   , char const   * __restrict   
                                              , ...)  __attribute__((__availability__(swift,unavailable,message="Use snprintf instead."))) ;
typedef unsigned int __darwin_natural_t;
typedef __darwin_natural_t __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
typedef __darwin_mach_port_t mach_port_t;
extern mach_port_t __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  pthread_mach_thread_np(pthread_t  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_lock(pthread_mutex_t * ) ;
struct __darwin_x86_thread_state64 {
   __uint64_t __rax ;
   __uint64_t __rbx ;
   __uint64_t __rcx ;
   __uint64_t __rdx ;
   __uint64_t __rdi ;
   __uint64_t __rsi ;
   __uint64_t __rbp ;
   __uint64_t __rsp ;
   __uint64_t __r8 ;
   __uint64_t __r9 ;
   __uint64_t __r10 ;
   __uint64_t __r11 ;
   __uint64_t __r12 ;
   __uint64_t __r13 ;
   __uint64_t __r14 ;
   __uint64_t __r15 ;
   __uint64_t __rip ;
   __uint64_t __rflags ;
   __uint64_t __cs ;
   __uint64_t __fs ;
   __uint64_t __gs ;
};
struct __darwin_x86_thread_full_state64 {
   struct __darwin_x86_thread_state64 __ss64 ;
   __uint64_t __ds ;
   __uint64_t __es ;
   __uint64_t __ss ;
   __uint64_t __gsbase ;
};
extern int renameatx_np(int  , char const   * , int  , char const   * , unsigned int  )  __attribute__((__availability__(watchos,introduced=3.0),
__availability__(tvos,introduced=10.0), __availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12))) ;
typedef __uint32_t __darwin_id_t;
typedef __darwin_id_t id_t;
extern struct tm *getdate(char const   * ) ;
enum __anonenum_idtype_t_558242672 {
    P_ALL = 0,
    P_PID = 1,
    P_PGID = 2
} ;
typedef enum __anonenum_idtype_t_558242672 idtype_t;
typedef struct __siginfo siginfo_t;
extern int waitid(idtype_t  , id_t  , siginfo_t * , int  )  __asm__("_waitid")  ;
typedef __uint16_t __darwin_mode_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getstacksize(pthread_attr_t const   * __restrict   ,
                                                                                                                                     size_t * __restrict   ) ;
extern  __attribute__((__noreturn__)) void exit(int  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_setschedparam(pthread_t  ,
                                                                                                                                 int  ,
                                                                                                                                 struct sched_param  const  * ) ;
extern int putc_unlocked(int  , FILE * ) ;
extern int __attribute__((__availability__(ios,introduced=8.0), __availability__(macos,introduced=10.10)))  pthread_get_qos_class_np(pthread_t __pthread ,
                                                                                                                                     qos_class_t * _Nullable __restrict  __qos_class ,
                                                                                                                                     int * _Nullable __restrict  __relative_priority ) ;
extern int ( /* format attribute */  vscanf)(char const   * __restrict  __format ,
                                             va_list  ) ;
struct _opaque_pthread_t {
   long __sig ;
   struct __darwin_pthread_handler_rec *__cleanup_stack ;
   char __opaque[8176] ;
};
typedef int __darwin_wchar_t;
typedef __darwin_wchar_t wchar_t;
extern int mbtowc(wchar_t * __restrict   , char const   * __restrict   , size_t  ) ;
extern int abs(int  )  __attribute__((__const__)) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_trylock(pthread_mutex_t * ) ;
extern int __mb_cur_max ;
extern int getiopolicy_np(int  , int  )  __attribute__((__availability__(macosx,introduced=10.5))) ;
extern long labs(long  )  __attribute__((__const__)) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setstacksize(pthread_attr_t * ,
                                                                                                                                     size_t  ) ;
extern int lutimes(char const   * , struct timeval  const  * )  __attribute__((__availability__(macosx,introduced=10.5))) ;
typedef int64_t int_least64_t;
extern int __attribute__((__availability__(tvos,introduced=11.3), __availability__(watchos,introduced=4.3),
__availability__(ios,introduced=11.3), __availability__(macos,introduced=10.13.4)))  pthread_mutexattr_getpolicy_np(pthread_mutexattr_t const   * __restrict   ,
                                                                                                                    int * __restrict   ) ;
extern int cgetmatch(char const   * , char const   * ) ;
typedef u_int64_t syscall_arg_t;
extern int __vsprintf_chk(char * __restrict   , int  , size_t  , char const   * __restrict   ,
                          va_list  ) ;
extern char *cgetcap(char * , char const   * , int  ) ;
extern int __attribute__((__availability__(tvos,unavailable), __availability__(watchos,unavailable),
__availability__(ios,unavailable), __availability__(macos,introduced=10.0), __availability__(swift,unavailable,message="Use posix_spawn APIs or NSTask instead.")))  system(char const   * )  __asm__("_system")  ;
typedef unsigned char uint8_t;
typedef uint8_t uint_least8_t;
typedef long intmax_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setscope(pthread_attr_t * ,
                                                                                                                                 int  ) ;
extern float strtof(char const   * , char ** )  __asm__("_strtof")  ;
extern int utimes(char const   * , struct timeval  const  * ) ;
enum __anonenum_788482901 {
    QOS_CLASS_USER_INTERACTIVE = 33,
    QOS_CLASS_USER_INITIATED = 25,
    QOS_CLASS_DEFAULT = 21,
    QOS_CLASS_UTILITY = 17,
    QOS_CLASS_BACKGROUND = 9,
    QOS_CLASS_UNSPECIFIED = 0
} ;
struct _opaque_pthread_rwlockattr_t {
   long __sig ;
   char __opaque[16] ;
};
typedef struct _opaque_pthread_rwlockattr_t __darwin_pthread_rwlockattr_t;
typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlockattr_setpshared(pthread_rwlockattr_t * ,
                                                                                                                                         int  ) ;
extern char *fcvt(double  , int  , int * __restrict   , int * __restrict   ) ;
extern size_t fwrite(void const   * __restrict  __ptr , size_t __size , size_t __nitems ,
                     FILE * __restrict  __stream )  __asm__("_fwrite")  ;
typedef unsigned long __darwin_clock_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_setprioceiling(pthread_mutex_t * __restrict   ,
                                                                                                                                        int  ,
                                                                                                                                        int * __restrict   ) ;
extern int pclose(FILE * )  __attribute__((__availability__(swift,unavailable,message="Use posix_spawn APIs or NSTask instead."))) ;
struct __darwin_zmm_reg {
   char __zmm_reg[64] ;
};
struct __darwin_x86_avx512_state64 {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   struct __darwin_xmm_reg __fpu_xmm8 ;
   struct __darwin_xmm_reg __fpu_xmm9 ;
   struct __darwin_xmm_reg __fpu_xmm10 ;
   struct __darwin_xmm_reg __fpu_xmm11 ;
   struct __darwin_xmm_reg __fpu_xmm12 ;
   struct __darwin_xmm_reg __fpu_xmm13 ;
   struct __darwin_xmm_reg __fpu_xmm14 ;
   struct __darwin_xmm_reg __fpu_xmm15 ;
   char __fpu_rsrv4[96] ;
   int __fpu_reserved1 ;
   char __avx_reserved1[64] ;
   struct __darwin_xmm_reg __fpu_ymmh0 ;
   struct __darwin_xmm_reg __fpu_ymmh1 ;
   struct __darwin_xmm_reg __fpu_ymmh2 ;
   struct __darwin_xmm_reg __fpu_ymmh3 ;
   struct __darwin_xmm_reg __fpu_ymmh4 ;
   struct __darwin_xmm_reg __fpu_ymmh5 ;
   struct __darwin_xmm_reg __fpu_ymmh6 ;
   struct __darwin_xmm_reg __fpu_ymmh7 ;
   struct __darwin_xmm_reg __fpu_ymmh8 ;
   struct __darwin_xmm_reg __fpu_ymmh9 ;
   struct __darwin_xmm_reg __fpu_ymmh10 ;
   struct __darwin_xmm_reg __fpu_ymmh11 ;
   struct __darwin_xmm_reg __fpu_ymmh12 ;
   struct __darwin_xmm_reg __fpu_ymmh13 ;
   struct __darwin_xmm_reg __fpu_ymmh14 ;
   struct __darwin_xmm_reg __fpu_ymmh15 ;
   struct __darwin_opmask_reg __fpu_k0 ;
   struct __darwin_opmask_reg __fpu_k1 ;
   struct __darwin_opmask_reg __fpu_k2 ;
   struct __darwin_opmask_reg __fpu_k3 ;
   struct __darwin_opmask_reg __fpu_k4 ;
   struct __darwin_opmask_reg __fpu_k5 ;
   struct __darwin_opmask_reg __fpu_k6 ;
   struct __darwin_opmask_reg __fpu_k7 ;
   struct __darwin_ymm_reg __fpu_zmmh0 ;
   struct __darwin_ymm_reg __fpu_zmmh1 ;
   struct __darwin_ymm_reg __fpu_zmmh2 ;
   struct __darwin_ymm_reg __fpu_zmmh3 ;
   struct __darwin_ymm_reg __fpu_zmmh4 ;
   struct __darwin_ymm_reg __fpu_zmmh5 ;
   struct __darwin_ymm_reg __fpu_zmmh6 ;
   struct __darwin_ymm_reg __fpu_zmmh7 ;
   struct __darwin_ymm_reg __fpu_zmmh8 ;
   struct __darwin_ymm_reg __fpu_zmmh9 ;
   struct __darwin_ymm_reg __fpu_zmmh10 ;
   struct __darwin_ymm_reg __fpu_zmmh11 ;
   struct __darwin_ymm_reg __fpu_zmmh12 ;
   struct __darwin_ymm_reg __fpu_zmmh13 ;
   struct __darwin_ymm_reg __fpu_zmmh14 ;
   struct __darwin_ymm_reg __fpu_zmmh15 ;
   struct __darwin_zmm_reg __fpu_zmm16 ;
   struct __darwin_zmm_reg __fpu_zmm17 ;
   struct __darwin_zmm_reg __fpu_zmm18 ;
   struct __darwin_zmm_reg __fpu_zmm19 ;
   struct __darwin_zmm_reg __fpu_zmm20 ;
   struct __darwin_zmm_reg __fpu_zmm21 ;
   struct __darwin_zmm_reg __fpu_zmm22 ;
   struct __darwin_zmm_reg __fpu_zmm23 ;
   struct __darwin_zmm_reg __fpu_zmm24 ;
   struct __darwin_zmm_reg __fpu_zmm25 ;
   struct __darwin_zmm_reg __fpu_zmm26 ;
   struct __darwin_zmm_reg __fpu_zmm27 ;
   struct __darwin_zmm_reg __fpu_zmm28 ;
   struct __darwin_zmm_reg __fpu_zmm29 ;
   struct __darwin_zmm_reg __fpu_zmm30 ;
   struct __darwin_zmm_reg __fpu_zmm31 ;
};
extern uint32_t arc4random_uniform(uint32_t __upper_bound )  __attribute__((__availability__(macosx,introduced=10.7))) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getscope(pthread_attr_t const   * __restrict   ,
                                                                                                                                 int * __restrict   ) ;
extern int cgetustr(char * , char const   * , char ** ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getschedpolicy(pthread_attr_t const   * __restrict   ,
                                                                                                                                       int * __restrict   ) ;
extern char *asctime(struct tm  const  * ) ;
struct __darwin_x86_avx_state64 {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   struct __darwin_xmm_reg __fpu_xmm8 ;
   struct __darwin_xmm_reg __fpu_xmm9 ;
   struct __darwin_xmm_reg __fpu_xmm10 ;
   struct __darwin_xmm_reg __fpu_xmm11 ;
   struct __darwin_xmm_reg __fpu_xmm12 ;
   struct __darwin_xmm_reg __fpu_xmm13 ;
   struct __darwin_xmm_reg __fpu_xmm14 ;
   struct __darwin_xmm_reg __fpu_xmm15 ;
   char __fpu_rsrv4[96] ;
   int __fpu_reserved1 ;
   char __avx_reserved1[64] ;
   struct __darwin_xmm_reg __fpu_ymmh0 ;
   struct __darwin_xmm_reg __fpu_ymmh1 ;
   struct __darwin_xmm_reg __fpu_ymmh2 ;
   struct __darwin_xmm_reg __fpu_ymmh3 ;
   struct __darwin_xmm_reg __fpu_ymmh4 ;
   struct __darwin_xmm_reg __fpu_ymmh5 ;
   struct __darwin_xmm_reg __fpu_ymmh6 ;
   struct __darwin_xmm_reg __fpu_ymmh7 ;
   struct __darwin_xmm_reg __fpu_ymmh8 ;
   struct __darwin_xmm_reg __fpu_ymmh9 ;
   struct __darwin_xmm_reg __fpu_ymmh10 ;
   struct __darwin_xmm_reg __fpu_ymmh11 ;
   struct __darwin_xmm_reg __fpu_ymmh12 ;
   struct __darwin_xmm_reg __fpu_ymmh13 ;
   struct __darwin_xmm_reg __fpu_ymmh14 ;
   struct __darwin_xmm_reg __fpu_ymmh15 ;
};
extern time_t timelocal(struct tm * const   ) ;
extern int __sprintf_chk(char * __restrict   , int  , size_t  , char const   * __restrict   
                         , ...) ;
extern int nanosleep(struct timespec  const  *__rqtp , struct timespec *__rmtp )  __asm__("_nanosleep")  ;
extern char *ctime_r(time_t const   * , char * ) ;
typedef __darwin_pthread_once_t pthread_once_t;
extern void clearerr(FILE * ) ;
typedef unsigned long long uint64_t;
typedef uint64_t uint_least64_t;
extern time_t posix2time(time_t  ) ;
extern void setkey(char const   * )  __asm__("_setkey")  ;
typedef __int32_t __darwin_dev_t;
typedef __darwin_dev_t dev_t;
typedef __darwin_mode_t mode_t;
extern char *devname(dev_t  , mode_t  ) ;
extern long long strtoll(char const   *__str , char **__endptr , int __base ) ;
typedef __darwin_off_t off_t;
struct __anonstruct_ldiv_t_748949161 {
   long quot ;
   long rem ;
};
extern qos_class_t __attribute__((__availability__(macos,introduced=10.10), __availability__(ios,introduced=8.0)))  qos_class_self(void) ;
extern ssize_t getdelim(char ** __restrict  __linep , size_t * __restrict  __linecapp ,
                        int __delimiter , FILE * __restrict  __stream )  __attribute__((__availability__(macosx,introduced=10.7))) ;
char **_global_argv  =    (char **)0;
extern int ftrylockfile(FILE * ) ;
extern int posix_memalign(void **__memptr , size_t __alignment , size_t __size )  __attribute__((__availability__(macosx,introduced=10.6))) ;
struct rusage_info_v1 {
   uint8_t ri_uuid[16] ;
   uint64_t ri_user_time ;
   uint64_t ri_system_time ;
   uint64_t ri_pkg_idle_wkups ;
   uint64_t ri_interrupt_wkups ;
   uint64_t ri_pageins ;
   uint64_t ri_wired_size ;
   uint64_t ri_resident_size ;
   uint64_t ri_phys_footprint ;
   uint64_t ri_proc_start_abstime ;
   uint64_t ri_proc_exit_abstime ;
   uint64_t ri_child_user_time ;
   uint64_t ri_child_system_time ;
   uint64_t ri_child_pkg_idle_wkups ;
   uint64_t ri_child_interrupt_wkups ;
   uint64_t ri_child_pageins ;
   uint64_t ri_child_elapsed_abstime ;
};
typedef __darwin_wchar_t __darwin_rune_t;
typedef __darwin_rune_t rune_t;
extern long random(void)  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
typedef unsigned short u_int16_t;
extern int fgetpos(FILE * __restrict   , fpos_t * ) ;
extern void flockfile(FILE * ) ;
extern int fgetc(FILE * ) ;
extern int putchar(int  ) ;
extern int feof(FILE * ) ;
extern void srandomdev(void) ;
extern int putenv(char * )  __asm__("_putenv")  ;
struct sigvec {
   void (*sv_handler)(int  ) ;
   int sv_mask ;
   int sv_flags ;
};
extern int ( /* format attribute */  scanf)(char const   * __restrict    , ...) ;
typedef unsigned long __darwin_pthread_key_t;
typedef __darwin_pthread_key_t pthread_key_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_key_create(pthread_key_t * ,
                                                                                                                              void (* _Nullable  )(void * ) ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_rdlock(pthread_rwlock_t * )  __asm__("_pthread_rwlock_rdlock")  ;
typedef struct pthread_override_s *pthread_override_t;
extern pthread_override_t __attribute__((__availability__(macos,introduced=10.10),
__availability__(ios,introduced=8.0)))  pthread_override_qos_class_start_np(pthread_t __pthread ,
                                                                            qos_class_t __qos_class ,
                                                                            int __relative_priority ) ;
extern int getsubopt(char ** , char * const  * , char ** ) ;
struct __darwin_x86_exception_state64 {
   __uint16_t __trapno ;
   __uint16_t __cpu ;
   __uint32_t __err ;
   __uint64_t __faultvaddr ;
};
struct __darwin_x86_float_state64 {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   struct __darwin_xmm_reg __fpu_xmm8 ;
   struct __darwin_xmm_reg __fpu_xmm9 ;
   struct __darwin_xmm_reg __fpu_xmm10 ;
   struct __darwin_xmm_reg __fpu_xmm11 ;
   struct __darwin_xmm_reg __fpu_xmm12 ;
   struct __darwin_xmm_reg __fpu_xmm13 ;
   struct __darwin_xmm_reg __fpu_xmm14 ;
   struct __darwin_xmm_reg __fpu_xmm15 ;
   char __fpu_rsrv4[96] ;
   int __fpu_reserved1 ;
};
struct __darwin_mcontext64 {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_state64 __ss ;
   struct __darwin_x86_float_state64 __fs ;
};
extern int fflush(FILE * ) ;
extern int puts(char const   * ) ;
struct timeval64 {
   __int64_t tv_sec ;
   __int64_t tv_usec ;
};
extern pid_t waitpid(pid_t  , int * , int  )  __asm__("_waitpid")  ;
typedef long __darwin_intptr_t;
typedef __darwin_intptr_t intptr_t;
struct __darwin_i386_thread_state {
   unsigned int __eax ;
   unsigned int __ebx ;
   unsigned int __ecx ;
   unsigned int __edx ;
   unsigned int __edi ;
   unsigned int __esi ;
   unsigned int __ebp ;
   unsigned int __esp ;
   unsigned int __ss ;
   unsigned int __eflags ;
   unsigned int __eip ;
   unsigned int __cs ;
   unsigned int __ds ;
   unsigned int __es ;
   unsigned int __fs ;
   unsigned int __gs ;
};
extern FILE *fmemopen(void * __restrict  __buf , size_t __size , char const   * __restrict  __mode )  __attribute__((__availability__(watchos,introduced=4.0),
__availability__(tvos,introduced=11.0), __availability__(ios,introduced=11.0), __availability__(macos,introduced=10.13))) ;
extern void (*signal(int  , void (*)(int  ) ))(int  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getstackaddr(pthread_attr_t const   * __restrict   ,
                                                                                                                                     void * _Nullable  * _Nonnull __restrict   ) ;
void init_tigress(void) ;
typedef unsigned long uintptr_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_getprioceiling(pthread_mutex_t const   * __restrict   ,
                                                                                                                                        int * __restrict   ) ;
enum __anonenum_clockid_t_447627989 {
    _CLOCK_REALTIME = 0,
    _CLOCK_MONOTONIC = 6,
    _CLOCK_MONOTONIC_RAW = 4,
    _CLOCK_MONOTONIC_RAW_APPROX = 5,
    _CLOCK_UPTIME_RAW = 8,
    _CLOCK_UPTIME_RAW_APPROX = 9,
    _CLOCK_PROCESS_CPUTIME_ID = 12,
    _CLOCK_THREAD_CPUTIME_ID = 16
} ;
extern int __attribute__((__availability__(watchos,introduced=3.0), __availability__(tvos,introduced=10.0),
__availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12)))  clock_getres(clockid_t __clock_id ,
                                                                                                 struct timespec *__res ) ;
struct __darwin_mcontext_avx512_64_full {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_full_state64 __ss ;
   struct __darwin_x86_avx512_state64 __fs ;
};
extern char *setstate(char const   * ) ;
extern size_t __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  pthread_get_stacksize_np(pthread_t  ) ;
struct _2_init_tigress_1_opaque_NodeStruct *_2_init_tigress_1_opaque_ptr_1  =    (struct _2_init_tigress_1_opaque_NodeStruct *)0;
typedef __uint64_t __darwin_ino64_t;
typedef __darwin_ino64_t __darwin_ino_t;
extern void rewind(FILE * ) ;
extern int __attribute__((__availability__(watchos,introduced=3.0), __availability__(tvos,introduced=10.0),
__availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12)))  clock_gettime(clockid_t __clock_id ,
                                                                                                  struct timespec *__tp ) ;
__inline static __uint32_t _OSSwapInt32(__uint32_t _data ) ;
typedef char __darwin_uuid_string_t[37];
extern struct tm *localtime(time_t const   * ) ;
struct __darwin_i386_float_state {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   char __fpu_rsrv4[224] ;
   int __fpu_reserved1 ;
};
struct __darwin_mcontext32 {
   struct __darwin_i386_exception_state __es ;
   struct __darwin_i386_thread_state __ss ;
   struct __darwin_i386_float_state __fs ;
};
typedef int __darwin_ct_rune_t;
typedef struct rusage_info_v4 rusage_info_current;
extern long long llabs(long long  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_destroy(pthread_rwlock_t * )  __asm__("_pthread_rwlock_destroy")  ;
typedef __uint32_t __darwin_uid_t;
typedef __darwin_uid_t uid_t;
extern int cgetfirst(char ** , char ** ) ;
extern void __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  pthread_testcancel(void)  __asm__("_pthread_testcancel")  ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_condattr_setpshared(pthread_condattr_t * ,
                                                                                                                                       int  ) ;
extern char *ctermid_r(char * ) ;
extern unsigned long long strtoull(char const   *__str , char **__endptr , int __base ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_init(pthread_rwlock_t * __restrict   ,
                                                                                                                               pthread_rwlockattr_t const   * _Nullable __restrict   )  __asm__("_pthread_rwlock_init")  ;
extern int __attribute__((__availability__(ios,introduced=3.2), __availability__(macos,introduced=10.6)))  pthread_getname_np(pthread_t  ,
                                                                                                                              char * ,
                                                                                                                              size_t  ) ;
extern lldiv_t lldiv(long long  , long long  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_getpshared(pthread_mutexattr_t const   * __restrict   ,
                                                                                                                                        int * __restrict   ) ;
typedef __darwin_suseconds_t suseconds_t;
extern void __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  * _Nullable  pthread_getspecific(pthread_key_t  ) ;
typedef unsigned char __darwin_uuid_t[16];
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
struct sigevent {
   int sigev_notify ;
   int sigev_signo ;
   union sigval sigev_value ;
   void (*sigev_notify_function)(union sigval  ) ;
   pthread_attr_t *sigev_notify_attributes ;
};
struct __darwin_mcontext64_full {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_full_state64 __ss ;
   struct __darwin_x86_float_state64 __fs ;
};
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_unlock(pthread_mutex_t * ) ;
typedef union __anonunion___mbstate_t_250061491 __mbstate_t;
extern void *reallocf(void *__ptr , size_t __size )  __attribute__((__alloc_size__(2))) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_getprioceiling(pthread_mutexattr_t const   * __restrict   ,
                                                                                                                                            int * __restrict   ) ;
extern int cgetset(char const   * ) ;
void megaInit(void) ;
extern int posix_openpt(int  ) ;
__inline static __uint64_t _OSSwapInt64(__uint64_t _data ) ;
typedef u_int64_t user_addr_t;
extern int gettimeofday(struct timeval * __restrict   , void * __restrict   ) ;
extern char *devname_r(dev_t  , mode_t  , char *buf , int len ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_key_delete(pthread_key_t  ) ;
extern int __attribute__((__availability__(ios,introduced=5.0), __availability__(macos,introduced=10.7)))  pthread_mutexattr_setpolicy_np(pthread_mutexattr_t * ,
                                                                                                                                          int  ) ;
extern FILE *funopen(void const   * , int (* _Nullable  )(void * , char * , int  ) ,
                     int (* _Nullable  )(void * , char const   * , int  ) , fpos_t (* _Nullable  )(void * ,
                                                                                                   fpos_t  ,
                                                                                                   int  ) ,
                     int (* _Nullable  )(void * ) ) ;
extern int cgetstr(char * , char const   * , char ** ) ;
extern size_t strftime(char * __restrict   , size_t  , char const   * __restrict   ,
                       struct tm  const  * __restrict   )  __asm__("_strftime")  ;
typedef struct __anonstruct_div_t_773697287 div_t;
struct timezone {
   int tz_minuteswest ;
   int tz_dsttime ;
};
extern char *getbsize(int * , long * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_is_threaded_np(void) ;
extern char const   *fmtcheck(char const   * , char const   * ) ;
extern int ( /* format attribute */  printf)(char const   * __restrict    , ...) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_wrlock(pthread_rwlock_t * )  __asm__("_pthread_rwlock_wrlock")  ;
extern int renameat(int  , char const   * , int  , char const   * )  __attribute__((__availability__(macosx,introduced=10.10))) ;
extern int daylight ;
extern long lrand48(void)  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlockattr_getpshared(pthread_rwlockattr_t const   * __restrict   ,
                                                                                                                                         int * __restrict   ) ;
extern unsigned long strtoul(char const   *__str , char **__endptr , int __base ) ;
typedef __darwin_clock_t clock_t;
typedef int32_t int_least32_t;
extern FILE *popen(char const   * , char const   * )  __asm__("_popen") __attribute__((__availability__(swift,unavailable,message="Use posix_spawn APIs or NSTask instead."))) ;
typedef uint64_t uint_fast64_t;
enum _3_fac_$op {
    _3_fac__Le_int_int2int$left_STA_0$result_STA_0$right_STA_1 = 241,
    _3_fac__returnVoid$ = 169,
    _3_fac__goto$label_LAB_0 = 3,
    _3_fac__constant_int$result_STA_0$value_LIT_0 = 215,
    _3_fac__store_int$left_STA_0$right_STA_1 = 82,
    _3_fac__call$func_LIT_0 = 134,
    _3_fac__string$result_STA_0$value_LIT_0 = 81,
    _3_fac__convert_void_star2void_star$left_STA_0$result_STA_0 = 207,
    _3_fac__Mult_int_int2int$left_STA_0$result_STA_0$right_STA_1 = 97,
    _3_fac__load_int$left_STA_0$result_STA_0 = 9,
    _3_fac__formal$result_STA_0$value_LIT_0 = 238,
    _3_fac__store_void_star$right_STA_0$left_STA_1 = 251,
    _3_fac__PlusA_int_int2int$right_STA_0$result_STA_0$left_STA_1 = 146,
    _3_fac__local$result_STA_0$value_LIT_0 = 196,
    _3_fac__branchIfTrue$expr_STA_0$label_LAB_0 = 136
} ;
unsigned char _3_fac_$array[1][149]  = { {        _3_fac__constant_int$result_STA_0$value_LIT_0,        (unsigned char)1,        (unsigned char)0,        (unsigned char)0, 
            (unsigned char)0,        _3_fac__local$result_STA_0$value_LIT_0,        (unsigned char)4,        (unsigned char)0, 
            (unsigned char)0,        (unsigned char)0,        _3_fac__store_int$left_STA_0$right_STA_1,        _3_fac__constant_int$result_STA_0$value_LIT_0, 
            (unsigned char)2,        (unsigned char)0,        (unsigned char)0,        (unsigned char)0, 
            _3_fac__local$result_STA_0$value_LIT_0,        (unsigned char)8,        (unsigned char)0,        (unsigned char)0, 
            (unsigned char)0,        _3_fac__store_int$left_STA_0$right_STA_1,        _3_fac__goto$label_LAB_0,        (unsigned char)4, 
            (unsigned char)0,        (unsigned char)0,        (unsigned char)0,        _3_fac__formal$result_STA_0$value_LIT_0, 
            (unsigned char)0,        (unsigned char)0,        (unsigned char)0,        (unsigned char)0, 
            _3_fac__load_int$left_STA_0$result_STA_0,        _3_fac__local$result_STA_0$value_LIT_0,        (unsigned char)8,        (unsigned char)0, 
            (unsigned char)0,        (unsigned char)0,        _3_fac__load_int$left_STA_0$result_STA_0,        _3_fac__Le_int_int2int$left_STA_0$result_STA_0$right_STA_1, 
            _3_fac__branchIfTrue$expr_STA_0$label_LAB_0,        (unsigned char)14,        (unsigned char)0,        (unsigned char)0, 
            (unsigned char)0,        _3_fac__goto$label_LAB_0,        (unsigned char)4,        (unsigned char)0, 
            (unsigned char)0,        (unsigned char)0,        _3_fac__goto$label_LAB_0,        (unsigned char)51, 
            (unsigned char)0,        (unsigned char)0,        (unsigned char)0,        _3_fac__local$result_STA_0$value_LIT_0, 
            (unsigned char)8,        (unsigned char)0,        (unsigned char)0,        (unsigned char)0, 
            _3_fac__load_int$left_STA_0$result_STA_0,        _3_fac__local$result_STA_0$value_LIT_0,        (unsigned char)4,        (unsigned char)0, 
            (unsigned char)0,        (unsigned char)0,        _3_fac__load_int$left_STA_0$result_STA_0,        _3_fac__Mult_int_int2int$left_STA_0$result_STA_0$right_STA_1, 
            _3_fac__local$result_STA_0$value_LIT_0,        (unsigned char)4,        (unsigned char)0,        (unsigned char)0, 
            (unsigned char)0,        _3_fac__store_int$left_STA_0$right_STA_1,        _3_fac__local$result_STA_0$value_LIT_0,        (unsigned char)8, 
            (unsigned char)0,        (unsigned char)0,        (unsigned char)0,        _3_fac__load_int$left_STA_0$result_STA_0, 
            _3_fac__constant_int$result_STA_0$value_LIT_0,        (unsigned char)1,        (unsigned char)0,        (unsigned char)0, 
            (unsigned char)0,        _3_fac__PlusA_int_int2int$right_STA_0$result_STA_0$left_STA_1,        _3_fac__local$result_STA_0$value_LIT_0,        (unsigned char)8, 
            (unsigned char)0,        (unsigned char)0,        (unsigned char)0,        _3_fac__store_int$left_STA_0$right_STA_1, 
            _3_fac__goto$label_LAB_0,        (unsigned char)190,        (unsigned char)255,        (unsigned char)255, 
            (unsigned char)255,        _3_fac__goto$label_LAB_0,        (unsigned char)185,        (unsigned char)255, 
            (unsigned char)255,        (unsigned char)255,        _3_fac__local$result_STA_0$value_LIT_0,        (unsigned char)16, 
            (unsigned char)0,        (unsigned char)0,        (unsigned char)0,        _3_fac__string$result_STA_0$value_LIT_0, 
            (unsigned char)0,        (unsigned char)0,        (unsigned char)0,        (unsigned char)0, 
            _3_fac__convert_void_star2void_star$left_STA_0$result_STA_0,        _3_fac__store_void_star$right_STA_0$left_STA_1,        _3_fac__formal$result_STA_0$value_LIT_0,        (unsigned char)0, 
            (unsigned char)0,        (unsigned char)0,        (unsigned char)0,        _3_fac__load_int$left_STA_0$result_STA_0, 
            _3_fac__local$result_STA_0$value_LIT_0,        (unsigned char)24,        (unsigned char)0,        (unsigned char)0, 
            (unsigned char)0,        _3_fac__store_int$left_STA_0$right_STA_1,        _3_fac__local$result_STA_0$value_LIT_0,        (unsigned char)4, 
            (unsigned char)0,        (unsigned char)0,        (unsigned char)0,        _3_fac__load_int$left_STA_0$result_STA_0, 
            _3_fac__local$result_STA_0$value_LIT_0,        (unsigned char)28,        (unsigned char)0,        (unsigned char)0, 
            (unsigned char)0,        _3_fac__store_int$left_STA_0$right_STA_1,        _3_fac__call$func_LIT_0,        (unsigned char)1, 
            (unsigned char)0,        (unsigned char)0,        (unsigned char)0,        _3_fac__goto$label_LAB_0, 
            (unsigned char)4,        (unsigned char)0,        (unsigned char)0,        (unsigned char)0, 
            _3_fac__returnVoid$}};
extern FILE *__stderrp ;
extern int __attribute__((__availability__(ios,introduced=8.0), __availability__(macos,introduced=10.10)))  pthread_set_qos_class_self_np(qos_class_t __qos_class ,
                                                                                                                                          int __relative_priority ) ;
extern char *mktemp(char * ) ;
extern long nrand48(unsigned short * )  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
extern pid_t wait(int * )  __asm__("_wait")  ;
extern void __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  pthread_yield_np(void) ;
extern void sranddev(void) ;
extern char *initstate(unsigned int  , char * , size_t  ) ;
typedef __uint32_t __darwin_socklen_t;
extern uint32_t arc4random(void) ;
extern int radixsort(unsigned char const   **__base , int __nel , unsigned char const   *__table ,
                     unsigned int __endbyte ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlockattr_destroy(pthread_rwlockattr_t * ) ;
extern pid_t wait3(int * , int  , struct rusage * ) ;
extern FILE *__stdoutp ;
typedef int sig_atomic_t;
typedef unsigned char u_int8_t;
extern  __attribute__((__noreturn__)) void _Exit(int  ) ;
__inline extern void ( __attribute__((__always_inline__)) __darwin_fd_clr)(int _fd ,
                                                                           struct fd_set * const  _p ) ;
extern void srand48(long  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4),
__availability__(swift,unavailable,message="Use lazily initialized globals instead")))  pthread_once(pthread_once_t * ,
                                                                                                     void (* _Nonnull  )(void) ) ;
extern int getpriority(int  , id_t  ) ;
extern int renamex_np(char const   * , char const   * , unsigned int  )  __attribute__((__availability__(watchos,introduced=3.0),
__availability__(tvos,introduced=10.0), __availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12))) ;
extern int cgetclose(void) ;
extern off_t ftello(FILE *__stream ) ;
extern int const   sys_nerr ;
typedef unsigned long uintmax_t;
extern time_t time2posix(time_t  ) ;
struct __sbuf {
   unsigned char *_base ;
   int _size ;
};
struct __sFILE {
   unsigned char *_p ;
   int _r ;
   int _w ;
   short _flags ;
   short _file ;
   struct __sbuf _bf ;
   int _lbfsize ;
   void *_cookie ;
   int (* _Nullable  _close)(void * ) ;
   int (* _Nullable  _read)(void * , char * , int  ) ;
   fpos_t (* _Nullable  _seek)(void * , fpos_t  , int  ) ;
   int (* _Nullable  _write)(void * , char const   * , int  ) ;
   struct __sbuf _ub ;
   struct __sFILEX *_extra ;
   int _ur ;
   unsigned char _ubuf[3] ;
   unsigned char _nbuf[1] ;
   struct __sbuf _lb ;
   int _blksize ;
   fpos_t _offset ;
};
extern int atoi(char const   * ) ;
extern int ( /* format attribute */  fscanf)(FILE * __restrict   , char const   * __restrict   
                                             , ...) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_getprotocol(pthread_mutexattr_t const   * __restrict   ,
                                                                                                                                         int * __restrict   ) ;
struct sigstack {
   char *ss_sp ;
   int ss_onstack ;
};
typedef struct __darwin_fp_control __darwin_fp_control_t;
extern int fputc(int  , FILE * ) ;
extern void psort(void *__base , size_t __nel , size_t __width , int (* _Nonnull  __compar)(void const   * ,
                                                                                            void const   * ) )  __attribute__((__availability__(macosx,introduced=10.6))) ;
extern void qsort_r(void *__base , size_t __nel , size_t __width , void * , int (* _Nonnull  __compar)(void * ,
                                                                                                       void const   * ,
                                                                                                       void const   * ) ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_setpshared(pthread_mutexattr_t * ,
                                                                                                                                        int  ) ;
extern int ( /* format attribute */  dprintf)(int  , char const   * __restrict   
                                              , ...)  __attribute__((__availability__(macosx,introduced=10.7))) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setstack(pthread_attr_t * ,
                                                                                                                                 void * ,
                                                                                                                                 size_t  ) ;
typedef unsigned int __darwin_fsfilcnt_t;
extern void lcong48(unsigned short * ) ;
extern char *suboptarg ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setinheritsched(pthread_attr_t * ,
                                                                                                                                        int  ) ;
extern char *asctime_r(struct tm  const  * __restrict   , char * __restrict   ) ;
extern int rename(char const   *__old , char const   *__new ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_init(pthread_mutex_t * __restrict   ,
                                                                                                                              pthread_mutexattr_t const   * _Nullable __restrict   ) ;
unsigned long _1_entropy  =    1205847982700084983UL;
struct timespec {
   __darwin_time_t tv_sec ;
   long tv_nsec ;
};
int _global_argc  =    0;
enum _3_fib_$op {
    _3_fib__store_int$left_STA_0$right_STA_1 = 5,
    _3_fib__goto$label_LAB_0 = 21,
    _3_fib__PlusA_int_int2int$right_STA_0$result_STA_0$left_STA_1 = 76,
    _3_fib__store_void_star$right_STA_0$left_STA_1 = 119,
    _3_fib__branchIfTrue$expr_STA_0$label_LAB_0 = 248,
    _3_fib__convert_void_star2void_star$left_STA_0$result_STA_0 = 135,
    _3_fib__returnVoid$ = 110,
    _3_fib__string$result_STA_0$value_LIT_0 = 136,
    _3_fib__load_int$left_STA_0$result_STA_0 = 34,
    _3_fib__formal$result_STA_0$value_LIT_0 = 139,
    _3_fib__Lt_int_int2int$right_STA_0$result_STA_0$left_STA_1 = 77,
    _3_fib__local$result_STA_0$value_LIT_0 = 111,
    _3_fib__constant_int$result_STA_0$value_LIT_0 = 71,
    _3_fib__call$func_LIT_0 = 168
} ;
unsigned char _3_fib_$array[1][195]  = { {        _3_fib__constant_int$result_STA_0$value_LIT_0,        (unsigned char)0,        (unsigned char)0,        (unsigned char)0, 
            (unsigned char)0,        _3_fib__local$result_STA_0$value_LIT_0,        (unsigned char)4,        (unsigned char)0, 
            (unsigned char)0,        (unsigned char)0,        _3_fib__store_int$left_STA_0$right_STA_1,        _3_fib__constant_int$result_STA_0$value_LIT_0, 
            (unsigned char)1,        (unsigned char)0,        (unsigned char)0,        (unsigned char)0, 
            _3_fib__local$result_STA_0$value_LIT_0,        (unsigned char)8,        (unsigned char)0,        (unsigned char)0, 
            (unsigned char)0,        _3_fib__store_int$left_STA_0$right_STA_1,        _3_fib__constant_int$result_STA_0$value_LIT_0,        (unsigned char)1, 
            (unsigned char)0,        (unsigned char)0,        (unsigned char)0,        _3_fib__local$result_STA_0$value_LIT_0, 
            (unsigned char)12,        (unsigned char)0,        (unsigned char)0,        (unsigned char)0, 
            _3_fib__store_int$left_STA_0$right_STA_1,        _3_fib__constant_int$result_STA_0$value_LIT_0,        (unsigned char)1,        (unsigned char)0, 
            (unsigned char)0,        (unsigned char)0,        _3_fib__local$result_STA_0$value_LIT_0,        (unsigned char)16, 
            (unsigned char)0,        (unsigned char)0,        (unsigned char)0,        _3_fib__store_int$left_STA_0$right_STA_1, 
            _3_fib__goto$label_LAB_0,        (unsigned char)4,        (unsigned char)0,        (unsigned char)0, 
            (unsigned char)0,        _3_fib__local$result_STA_0$value_LIT_0,        (unsigned char)16,        (unsigned char)0, 
            (unsigned char)0,        (unsigned char)0,        _3_fib__load_int$left_STA_0$result_STA_0,        _3_fib__formal$result_STA_0$value_LIT_0, 
            (unsigned char)0,        (unsigned char)0,        (unsigned char)0,        (unsigned char)0, 
            _3_fib__load_int$left_STA_0$result_STA_0,        _3_fib__Lt_int_int2int$right_STA_0$result_STA_0$left_STA_1,        _3_fib__branchIfTrue$expr_STA_0$label_LAB_0,        (unsigned char)14, 
            (unsigned char)0,        (unsigned char)0,        (unsigned char)0,        _3_fib__goto$label_LAB_0, 
            (unsigned char)4,        (unsigned char)0,        (unsigned char)0,        (unsigned char)0, 
            _3_fib__goto$label_LAB_0,        (unsigned char)75,        (unsigned char)0,        (unsigned char)0, 
            (unsigned char)0,        _3_fib__local$result_STA_0$value_LIT_0,        (unsigned char)4,        (unsigned char)0, 
            (unsigned char)0,        (unsigned char)0,        _3_fib__load_int$left_STA_0$result_STA_0,        _3_fib__local$result_STA_0$value_LIT_0, 
            (unsigned char)8,        (unsigned char)0,        (unsigned char)0,        (unsigned char)0, 
            _3_fib__load_int$left_STA_0$result_STA_0,        _3_fib__PlusA_int_int2int$right_STA_0$result_STA_0$left_STA_1,        _3_fib__local$result_STA_0$value_LIT_0,        (unsigned char)12, 
            (unsigned char)0,        (unsigned char)0,        (unsigned char)0,        _3_fib__store_int$left_STA_0$right_STA_1, 
            _3_fib__local$result_STA_0$value_LIT_0,        (unsigned char)8,        (unsigned char)0,        (unsigned char)0, 
            (unsigned char)0,        _3_fib__load_int$left_STA_0$result_STA_0,        _3_fib__local$result_STA_0$value_LIT_0,        (unsigned char)4, 
            (unsigned char)0,        (unsigned char)0,        (unsigned char)0,        _3_fib__store_int$left_STA_0$right_STA_1, 
            _3_fib__local$result_STA_0$value_LIT_0,        (unsigned char)12,        (unsigned char)0,        (unsigned char)0, 
            (unsigned char)0,        _3_fib__load_int$left_STA_0$result_STA_0,        _3_fib__local$result_STA_0$value_LIT_0,        (unsigned char)8, 
            (unsigned char)0,        (unsigned char)0,        (unsigned char)0,        _3_fib__store_int$left_STA_0$right_STA_1, 
            _3_fib__local$result_STA_0$value_LIT_0,        (unsigned char)16,        (unsigned char)0,        (unsigned char)0, 
            (unsigned char)0,        _3_fib__load_int$left_STA_0$result_STA_0,        _3_fib__constant_int$result_STA_0$value_LIT_0,        (unsigned char)1, 
            (unsigned char)0,        (unsigned char)0,        (unsigned char)0,        _3_fib__PlusA_int_int2int$right_STA_0$result_STA_0$left_STA_1, 
            _3_fib__local$result_STA_0$value_LIT_0,        (unsigned char)16,        (unsigned char)0,        (unsigned char)0, 
            (unsigned char)0,        _3_fib__store_int$left_STA_0$right_STA_1,        _3_fib__goto$label_LAB_0,        (unsigned char)166, 
            (unsigned char)255,        (unsigned char)255,        (unsigned char)255,        _3_fib__goto$label_LAB_0, 
            (unsigned char)161,        (unsigned char)255,        (unsigned char)255,        (unsigned char)255, 
            _3_fib__local$result_STA_0$value_LIT_0,        (unsigned char)24,        (unsigned char)0,        (unsigned char)0, 
            (unsigned char)0,        _3_fib__string$result_STA_0$value_LIT_0,        (unsigned char)0,        (unsigned char)0, 
            (unsigned char)0,        (unsigned char)0,        _3_fib__convert_void_star2void_star$left_STA_0$result_STA_0,        _3_fib__store_void_star$right_STA_0$left_STA_1, 
            _3_fib__formal$result_STA_0$value_LIT_0,        (unsigned char)0,        (unsigned char)0,        (unsigned char)0, 
            (unsigned char)0,        _3_fib__load_int$left_STA_0$result_STA_0,        _3_fib__local$result_STA_0$value_LIT_0,        (unsigned char)32, 
            (unsigned char)0,        (unsigned char)0,        (unsigned char)0,        _3_fib__store_int$left_STA_0$right_STA_1, 
            _3_fib__local$result_STA_0$value_LIT_0,        (unsigned char)12,        (unsigned char)0,        (unsigned char)0, 
            (unsigned char)0,        _3_fib__load_int$left_STA_0$result_STA_0,        _3_fib__local$result_STA_0$value_LIT_0,        (unsigned char)36, 
            (unsigned char)0,        (unsigned char)0,        (unsigned char)0,        _3_fib__store_int$left_STA_0$right_STA_1, 
            _3_fib__call$func_LIT_0,        (unsigned char)1,        (unsigned char)0,        (unsigned char)0, 
            (unsigned char)0,        _3_fib__goto$label_LAB_0,        (unsigned char)4,        (unsigned char)0, 
            (unsigned char)0,        (unsigned char)0,        _3_fib__returnVoid$}};
struct __siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   pid_t si_pid ;
   uid_t si_uid ;
   int si_status ;
   void *si_addr ;
   union sigval si_value ;
   long si_band ;
   unsigned long __pad[7] ;
};
typedef uint8_t uint_fast8_t;
typedef int64_t user_off_t;
extern int ( /* format attribute */  __svfscanf)(FILE * , char const   * , va_list  ) ;
extern int mkstemp(char * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_condattr_init(pthread_condattr_t * ) ;
union __sigaction_u {
   void (*__sa_handler)(int  ) ;
   void (*__sa_sigaction)(int  , struct __siginfo * , void * ) ;
};
struct __sigaction {
   union __sigaction_u __sigaction_u ;
   void (*sa_tramp)(void * , int  , int  , siginfo_t * , void * ) ;
   sigset_t sa_mask ;
   int sa_flags ;
};
extern int putw(int  , FILE * ) ;
struct __darwin_mcontext_avx64 {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_state64 __ss ;
   struct __darwin_x86_avx_state64 __fs ;
};
extern long a64l(char const   * ) ;
__inline extern void ( __attribute__((__always_inline__)) __darwin_fd_set)(int _fd ,
                                                                           struct fd_set * const  _p ) ;
extern int cgetnum(char * , char const   * , long * ) ;
struct __darwin_mcontext_avx512_64 {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_state64 __ss ;
   struct __darwin_x86_avx512_state64 __fs ;
};
typedef int8_t int_fast8_t;
struct __darwin_pthread_handler_rec {
   void (*__routine)(void * ) ;
   void *__arg ;
   struct __darwin_pthread_handler_rec *__next ;
};
extern int ( /* format attribute */  fprintf)(FILE * __restrict   , char const   * __restrict   
                                              , ...) ;
typedef unsigned short uint16_t;
typedef uint16_t uint_fast16_t;
extern int sched_yield(void) ;
__inline extern int ( __attribute__((__always_inline__)) __sputc)(int _c , FILE *_p ) ;
extern int setenv(char const   *__name , char const   *__value , int __overwrite )  __asm__("_setenv")  ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_condattr_destroy(pthread_condattr_t * ) ;
extern double strtod(char const   * , char ** )  __asm__("_strtod")  ;
extern void setprogname(char const   * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_setcanceltype(int  ,
                                                                                                                                 int * _Nullable   )  __asm__("_pthread_setcanceltype")  ;
extern int ( /* format attribute */  sscanf)(char const   * __restrict   , char const   * __restrict   
                                             , ...) ;
extern int __attribute__((__availability__(ios,introduced=3.2), __availability__(macos,introduced=10.6)))  pthread_setname_np(char const   * ) ;
extern long long strtoq(char const   *__str , char **__endptr , int __base ) ;
extern int fpurge(FILE * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_unlock(pthread_rwlock_t * )  __asm__("_pthread_rwlock_unlock")  ;
extern int getchar(void) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_setspecific(pthread_key_t  ,
                                                                                                                               void const   * _Nullable   ) ;
extern int unsetenv(char const   * )  __asm__("_unsetenv")  ;
typedef struct _2_init_tigress_1_opaque_NodeStruct *_2_init_tigress_1_opaque_StructureType;
extern int heapsort(void *__base , size_t __nel , size_t __width , int (* _Nonnull  __compar)(void const   * ,
                                                                                              void const   * ) ) ;
extern size_t wcstombs(char * __restrict   , wchar_t const   * __restrict   , size_t  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_setprotocol(pthread_mutexattr_t * ,
                                                                                                                                         int  ) ;
typedef __uint64_t rlim_t;
extern long atol(char const   * ) ;
extern int __swbuf(int  , FILE * ) ;
extern size_t mbstowcs(wchar_t * __restrict   , char const   * __restrict   , size_t  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_detach(pthread_t  ) ;
extern int ptsname_r(int fildes , char *buffer , size_t buflen )  __attribute__((__availability__(watchos,introduced=4.3),
__availability__(tvos,introduced=11.3), __availability__(ios,introduced=11.3), __availability__(macos,introduced=10.13.4))) ;
typedef int __darwin_nl_item;
struct __darwin_mcontext_avx32 {
   struct __darwin_i386_exception_state __es ;
   struct __darwin_i386_thread_state __ss ;
   struct __darwin_i386_avx_state __fs ;
};
extern pthread_t __attribute__((__nullable__, __availability__(macos,introduced=10.5),
__availability__(ios,introduced=2.0)))  pthread_from_mach_thread_np(mach_port_t  ) ;
extern FILE *zopen(char const   * , char const   * , int  ) ;
extern int fseeko(FILE *__stream , off_t __offset , int __whence ) ;
typedef struct __darwin_fp_status __darwin_fp_status_t;
typedef int64_t user_time_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setschedparam(pthread_attr_t * __restrict   ,
                                                                                                                                      struct sched_param  const  * __restrict   ) ;
extern char *l64a(long  ) ;
struct rusage_info_v2 {
   uint8_t ri_uuid[16] ;
   uint64_t ri_user_time ;
   uint64_t ri_system_time ;
   uint64_t ri_pkg_idle_wkups ;
   uint64_t ri_interrupt_wkups ;
   uint64_t ri_pageins ;
   uint64_t ri_wired_size ;
   uint64_t ri_resident_size ;
   uint64_t ri_phys_footprint ;
   uint64_t ri_proc_start_abstime ;
   uint64_t ri_proc_exit_abstime ;
   uint64_t ri_child_user_time ;
   uint64_t ri_child_system_time ;
   uint64_t ri_child_pkg_idle_wkups ;
   uint64_t ri_child_interrupt_wkups ;
   uint64_t ri_child_pageins ;
   uint64_t ri_child_elapsed_abstime ;
   uint64_t ri_diskio_bytesread ;
   uint64_t ri_diskio_byteswritten ;
};
struct fd_set {
   __int32_t fds_bits[1024UL / (sizeof(__int32_t ) * 8UL)] ;
};
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_main_np(void) ;
struct __anonstruct_w_S_422959016 {
   unsigned int w_Stopval : 8 ;
   unsigned int w_Stopsig : 8 ;
   unsigned int w_Filler : 16 ;
};
struct __anonstruct_w_T_422959015 {
   unsigned int w_Termsig : 7 ;
   unsigned int w_Coredump : 1 ;
   unsigned int w_Retcode : 8 ;
   unsigned int w_Filler : 16 ;
};
union wait {
   int w_status ;
   struct __anonstruct_w_T_422959015 w_T ;
   struct __anonstruct_w_S_422959016 w_S ;
};
struct __anonstruct_lldiv_t_86583852 {
   long long quot ;
   long long rem ;
};
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getschedparam(pthread_attr_t const   * __restrict   ,
                                                                                                                                      struct sched_param * __restrict   ) ;
extern int getdate_err ;
extern int ( /* format attribute */  asprintf)(char ** __restrict   , char const   * __restrict   
                                               , ...) ;
extern char *ecvt(double  , int  , int * __restrict   , int * __restrict   ) ;
extern qos_class_t __attribute__((__availability__(macos,introduced=10.10), __availability__(ios,introduced=8.0)))  qos_class_main(void) ;
extern struct tm *localtime_r(time_t const   * __restrict   , struct tm * __restrict   ) ;
extern void *( __attribute__((__warn_unused_result__)) realloc)(void *__ptr , size_t __size )  __attribute__((__alloc_size__(2))) ;
typedef __uint32_t __darwin_gid_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setguardsize(pthread_attr_t * ,
                                                                                                                                     size_t  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_setconcurrency(int  ) ;
extern int grantpt(int  ) ;
unsigned long _1_alwaysZero  =    0;
typedef struct __darwin_ucontext ucontext_t;
extern long jrand48(unsigned short * )  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
extern int futimes(int  , struct timeval  const  * ) ;
extern char const   *getprogname(void) ;
extern char *tzname[] ;
extern int ( /* format attribute */  vfscanf)(FILE * __restrict  __stream , char const   * __restrict  __format ,
                                              va_list  ) ;
struct rusage_info_v0 {
   uint8_t ri_uuid[16] ;
   uint64_t ri_user_time ;
   uint64_t ri_system_time ;
   uint64_t ri_pkg_idle_wkups ;
   uint64_t ri_interrupt_wkups ;
   uint64_t ri_pageins ;
   uint64_t ri_wired_size ;
   uint64_t ri_resident_size ;
   uint64_t ri_phys_footprint ;
   uint64_t ri_proc_start_abstime ;
   uint64_t ri_proc_exit_abstime ;
};
extern int getitimer(int  , struct itimerval * ) ;
extern void srand(unsigned int  )  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getguardsize(pthread_attr_t const   * __restrict   ,
                                                                                                                                     size_t * __restrict   ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_equal(pthread_t __attribute__((__nullable__))   ,
                                                                                                                         pthread_t __attribute__((__nullable__))   ) ;
struct proc_rlimit_control_wakeupmon {
   uint32_t wm_flags ;
   int32_t wm_rate ;
};
extern int atexit(void (* _Nonnull  )(void) ) ;
extern int cgetnext(char ** , char ** ) ;
extern int fclose(FILE * ) ;
extern int __attribute__((__availability__(watchos,introduced=6.0), __availability__(tvos,introduced=13.0),
__availability__(ios,introduced=13.0), __availability__(macosx,introduced=10.15)))  timespec_get(struct timespec *ts ,
                                                                                                 int base ) ;
struct __darwin_sigaltstack {
   void *ss_sp ;
   __darwin_size_t ss_size ;
   int ss_flags ;
};
struct __darwin_ucontext {
   int uc_onstack ;
   __darwin_sigset_t uc_sigmask ;
   struct __darwin_sigaltstack uc_stack ;
   struct __darwin_ucontext *uc_link ;
   __darwin_size_t uc_mcsize ;
   struct __darwin_mcontext64 *uc_mcontext ;
};
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_destroy(pthread_mutex_t * ) ;
union _3_fib_$node {
   char _char ;
   unsigned int _unsigned_int ;
   unsigned char _unsigned_char ;
   long _long ;
   unsigned long _unsigned_long ;
   void *_void_star ;
   unsigned short _unsigned_short ;
   unsigned long long _unsigned_long_long ;
   signed char _signed_char ;
   long long _long_long ;
   int _int ;
   short _short ;
};
extern void __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  *pthread_get_stackaddr_np(pthread_t  ) ;
extern FILE *open_memstream(char **__bufp , size_t *__sizep )  __attribute__((__availability__(watchos,introduced=4.0),
__availability__(tvos,introduced=11.0), __availability__(ios,introduced=11.0), __availability__(macos,introduced=10.13))) ;
extern int __vsnprintf_chk(char * __restrict   , size_t  , int  , size_t  , char const   * __restrict   ,
                           va_list  ) ;
struct _2_init_tigress_1_opaque_NodeStruct *_2_init_tigress_1_opaque_list_1  =    (struct _2_init_tigress_1_opaque_NodeStruct *)0;
typedef __darwin_ct_rune_t ct_rune_t;
extern void qsort(void *__base , size_t __nel , size_t __width , int (* _Nonnull  __compar)(void const   * ,
                                                                                            void const   * ) ) ;
extern int getrlimit(int  , struct rlimit * )  __asm__("_getrlimit")  ;
struct __darwin_x86_debug_state32 {
   unsigned int __dr0 ;
   unsigned int __dr1 ;
   unsigned int __dr2 ;
   unsigned int __dr3 ;
   unsigned int __dr4 ;
   unsigned int __dr5 ;
   unsigned int __dr6 ;
   unsigned int __dr7 ;
};
typedef unsigned int u_int32_t;
extern FILE *fopen(char const   * __restrict  __filename , char const   * __restrict  __mode )  __asm__("_fopen")  ;
struct __darwin_mcontext_avx512_32 {
   struct __darwin_i386_exception_state __es ;
   struct __darwin_i386_thread_state __ss ;
   struct __darwin_i386_avx512_state __fs ;
};
extern long strtol(char const   *__str , char **__endptr , int __base ) ;
extern long timezone  __asm__("_timezone")  ;
struct rusage_info_v4 {
   uint8_t ri_uuid[16] ;
   uint64_t ri_user_time ;
   uint64_t ri_system_time ;
   uint64_t ri_pkg_idle_wkups ;
   uint64_t ri_interrupt_wkups ;
   uint64_t ri_pageins ;
   uint64_t ri_wired_size ;
   uint64_t ri_resident_size ;
   uint64_t ri_phys_footprint ;
   uint64_t ri_proc_start_abstime ;
   uint64_t ri_proc_exit_abstime ;
   uint64_t ri_child_user_time ;
   uint64_t ri_child_system_time ;
   uint64_t ri_child_pkg_idle_wkups ;
   uint64_t ri_child_interrupt_wkups ;
   uint64_t ri_child_pageins ;
   uint64_t ri_child_elapsed_abstime ;
   uint64_t ri_diskio_bytesread ;
   uint64_t ri_diskio_byteswritten ;
   uint64_t ri_cpu_time_qos_default ;
   uint64_t ri_cpu_time_qos_maintenance ;
   uint64_t ri_cpu_time_qos_background ;
   uint64_t ri_cpu_time_qos_utility ;
   uint64_t ri_cpu_time_qos_legacy ;
   uint64_t ri_cpu_time_qos_user_initiated ;
   uint64_t ri_cpu_time_qos_user_interactive ;
   uint64_t ri_billed_system_time ;
   uint64_t ri_serviced_system_time ;
   uint64_t ri_logical_writes ;
   uint64_t ri_lifetime_max_phys_footprint ;
   uint64_t ri_instructions ;
   uint64_t ri_cycles ;
   uint64_t ri_billed_energy ;
   uint64_t ri_serviced_energy ;
   uint64_t ri_interval_max_phys_footprint ;
   uint64_t ri_runnable_time ;
};
typedef struct __darwin_mcontext64 *mcontext_t;
extern int fseek(FILE * , long  , int  ) ;
extern double atof(char const   * ) ;
union __anonunion___mbstate_t_250061491 {
   char __mbstate8[128] ;
   long long _mbstateL ;
};
typedef int16_t int_least16_t;
extern int mergesort(void *__base , size_t __nel , size_t __width , int (* _Nonnull  __compar)(void const   * ,
                                                                                               void const   * ) ) ;
extern struct tm *gmtime(time_t const   * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getdetachstate(pthread_attr_t const   * ,
                                                                                                                                       int * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_setcancelstate(int  ,
                                                                                                                                  int * _Nullable   )  __asm__("_pthread_setcancelstate")  ;
extern char *strptime(char const   * __restrict   , char const   * __restrict   ,
                      struct tm * __restrict   )  __asm__("_strptime")  ;
extern int getchar_unlocked(void) ;
extern long ftell(FILE * ) ;
extern int setlinebuf(FILE * ) ;
typedef int64_t int_fast64_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_settype(pthread_mutexattr_t * ,
                                                                                                                                     int  ) ;
extern int ( /* format attribute */  vasprintf)(char ** __restrict   , char const   * __restrict   ,
                                                va_list  ) ;
extern FILE *freopen(char const   * __restrict   , char const   * __restrict   , FILE * __restrict   )  __asm__("_freopen")  ;
typedef struct __darwin_sigaltstack stack_t;
extern int __attribute__((__availability__(ios,introduced=8.0), __availability__(macos,introduced=10.10)))  pthread_override_qos_class_end_np(pthread_override_t __override ) ;
extern int getc(FILE * ) ;
extern time_t timegm(struct tm * const   ) ;
extern FILE *fdopen(int  , char const   * )  __asm__("_fdopen")  ;
extern unsigned short *seed48(unsigned short * ) ;
typedef unsigned int __darwin_fsblkcnt_t;
extern int ( /* format attribute */  vdprintf)(int  , char const   * __restrict   ,
                                               va_list  )  __attribute__((__availability__(macosx,introduced=10.7))) ;
struct sigaction {
   union __sigaction_u __sigaction_u ;
   sigset_t sa_mask ;
   int sa_flags ;
};
extern int ungetc(int  , FILE * ) ;
extern char *fgets(char * __restrict   , int  , FILE * ) ;
char const   *_3_fib_$strings  =    "fib(%i)=%i\n\000";
typedef int64_t user_long_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_init(pthread_attr_t * ) ;
extern char const   * const  sys_errlist[] ;
struct itimerval {
   struct timeval it_interval ;
   struct timeval it_value ;
};
typedef uint16_t uint_least16_t;
typedef u_int64_t user_size_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_signal_thread_np(pthread_cond_t * ,
                                                                                                                                         pthread_t __attribute__((__nullable__))   ) ;
typedef int __darwin_wint_t;
extern int __snprintf_chk(char * __restrict   , size_t  , int  , size_t  , char const   * __restrict   
                          , ...) ;
extern int __attribute__((__availability__(ios,introduced=3.2), __availability__(macos,introduced=10.6)))  pthread_threadid_np(pthread_t __attribute__((__nullable__))   ,
                                                                                                                               __uint64_t * _Nullable   ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_create_suspended_np(pthread_t __attribute__((__nullable__))  * _Nonnull   ,
                                                                                                                                       pthread_attr_t const   * _Nullable   ,
                                                                                                                                       void * _Nullable  (* _Nonnull  )(void * _Nullable   ) ,
                                                                                                                                       void * _Nullable   ) ;
extern long double strtold(char const   * , char ** ) ;
extern void *bsearch(void const   *__key , void const   *__base , size_t __nel , size_t __width ,
                     int (* _Nonnull  __compar)(void const   * , void const   * ) ) ;
extern div_t div(int  , int  )  __attribute__((__const__)) ;
extern struct tm *gmtime_r(time_t const   * __restrict   , struct tm * __restrict   ) ;
typedef int64_t user_ssize_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_wait(pthread_cond_t * __restrict   ,
                                                                                                                             pthread_mutex_t * __restrict   )  __asm__("_pthread_cond_wait")  ;
extern int getc_unlocked(FILE * ) ;
extern char *fgetln(FILE * , size_t * ) ;
extern int __attribute__((__availability__(watchos,unavailable), __availability__(tvos,unavailable),
__availability__(ios,unavailable), __availability__(macosx,introduced=10.12)))  clock_settime(clockid_t __clock_id ,
                                                                                              struct timespec  const  *__tp ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_init(pthread_cond_t * __restrict   ,
                                                                                                                             pthread_condattr_t const   * _Nullable __restrict   )  __asm__("_pthread_cond_init")  ;
extern int remove(char const   * ) ;
extern char *gcvt(double  , int  , char * ) ;
extern clock_t clock(void)  __asm__("_clock")  ;
extern char *ctime(time_t const   * ) ;
extern int sradixsort(unsigned char const   **__base , int __nel , unsigned char const   *__table ,
                      unsigned int __endbyte ) ;
extern int ( /* format attribute */  snprintf)(char * __restrict  __str , size_t __size ,
                                               char const   * __restrict  __format 
                                               , ...) ;
extern int fsetpos(FILE * , fpos_t const   * ) ;
extern void tzsetwall(void) ;
unsigned int _2_init_tigress__opaque_array[30]  = 
  {      258,      691,      3,      308, 
        425,      5,      278,      537, 
        5,      3,      187,      7, 
        33,      12,      57,      358, 
        670,      43,      448,      159, 
        85,      468,      292,      13, 
        143,      243,      80,      498, 
        369};
extern int mblen(char const   *__s , size_t __n ) ;
char const   *_3_fac_$strings  =    "fac(%i)=%i\n\000";
struct _2_init_tigress_1_opaque_NodeStruct *_2_init_tigress_1_opaque_list_2  =    (struct _2_init_tigress_1_opaque_NodeStruct *)0;
extern int setvbuf(FILE * __restrict   , char * __restrict   , int  , size_t  ) ;
typedef short __int16_t;
typedef void *rusage_info_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_getschedparam(pthread_t  ,
                                                                                                                                 int * _Nullable __restrict   ,
                                                                                                                                 struct sched_param * _Nullable __restrict   ) ;
extern char __attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tmpnam(3), it is highly recommended that you use mkstemp(3) instead."),
__availability__(swift,unavailable,message="Use mkstemp(3) instead.")))  *tmpnam(char * ) ;
struct __x86_pagein_state {
   int __pagein_error ;
};
extern void *( __attribute__((__warn_unused_result__)) aligned_alloc)(size_t __alignment ,
                                                                      size_t __size )  __attribute__((__availability__(watchos,introduced=6.0),
__availability__(tvos,introduced=13.0), __availability__(ios,introduced=13.0), __availability__(macosx,introduced=10.15),
__alloc_size__(2))) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setschedpolicy(pthread_attr_t * ,
                                                                                                                                       int  ) ;
struct __darwin_mcontext_avx64_full {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_full_state64 __ss ;
   struct __darwin_x86_avx_state64 __fs ;
};
typedef uint32_t uint_fast32_t;
typedef void (*sig_t)(int  );
struct clockinfo {
   int hz ;
   int tick ;
   int tickadj ;
   int stathz ;
   int profhz ;
};
extern int rpmatch(char const   * )  __attribute__((__availability__(watchos,introduced=6.0),
__availability__(tvos,introduced=13.0), __availability__(ios,introduced=13.0), __availability__(macos,introduced=10.15))) ;
extern ldiv_t ldiv(long  , long  )  __attribute__((__const__)) ;
extern void arc4random_buf(void *__buf , size_t __nbytes )  __attribute__((__availability__(macosx,introduced=10.7))) ;
extern void psort_r(void *__base , size_t __nel , size_t __width , void * , int (* _Nonnull  __compar)(void * ,
                                                                                                       void const   * ,
                                                                                                       void const   * ) )  __attribute__((__availability__(macosx,introduced=10.6))) ;
extern void *( __attribute__((__warn_unused_result__)) calloc)(size_t __count , size_t __size )  __attribute__((__alloc_size__(1,2))) ;
char **_global_envp  =    (char **)0;
extern void arc4random_stir(void) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_init(pthread_mutexattr_t * ) ;
typedef __mbstate_t __darwin_mbstate_t;
extern int setpriority(int  , id_t  , int  ) ;
extern void *valloc(size_t  )  __attribute__((__alloc_size__(1))) ;
extern int ( /* format attribute */  vfprintf)(FILE * __restrict   , char const   * __restrict   ,
                                               va_list  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getinheritsched(pthread_attr_t const   * __restrict   ,
                                                                                                                                        int * __restrict   ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlockattr_init(pthread_rwlockattr_t * ) ;
extern int select(int  , fd_set * __restrict   , fd_set * __restrict   , fd_set * __restrict   ,
                  struct timeval * __restrict   )  __asm__("_select$1050")  ;
extern int sched_get_priority_min(int  ) ;
struct __darwin_x86_cpmu_state64 {
   __uint64_t __ctrs[16] ;
};
extern int settimeofday(struct timeval  const  * , struct timezone  const  * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_trywrlock(pthread_rwlock_t * )  __asm__("_pthread_rwlock_trywrlock")  ;
extern void free(void * ) ;
extern void *alloca(size_t  ) ;
int main(int argc , char **argv , char **_formal_envp ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setdetachstate(pthread_attr_t * ,
                                                                                                                                       int  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_destroy(pthread_mutexattr_t * )  __asm__("_pthread_mutexattr_destroy")  ;
extern void setbuf(FILE * __restrict   , char * __restrict   ) ;
extern int wctomb(char * , wchar_t  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getstack(pthread_attr_t const   * __restrict   ,
                                                                                                                                 void * _Nullable  * _Nonnull __restrict   ,
                                                                                                                                 size_t * __restrict   ) ;
extern int unlockpt(int  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_kill(pthread_t  ,
                                                                                                                        int  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_destroy(pthread_attr_t * ) ;
extern int ( /* format attribute */  vsscanf)(char const   * __restrict  __str , char const   * __restrict  __format ,
                                              va_list  ) ;
extern int setrlimit(int  , struct rlimit  const  * )  __asm__("_setrlimit")  ;
extern void perror(char const   * )  __attribute__((__cold__)) ;
extern void srandom(unsigned int  ) ;
extern __uint64_t __attribute__((__availability__(macosx,introduced=10.12), __availability__(ios,introduced=10.0),
__availability__(tvos,introduced=10.0), __availability__(watchos,introduced=3.0)))  clock_gettime_nsec_np(clockid_t __clock_id ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_timedwait(pthread_cond_t * __restrict   ,
                                                                                                                                  pthread_mutex_t * __restrict   ,
                                                                                                                                  struct timespec  const  * _Nullable __restrict   )  __asm__("_pthread_cond_timedwait")  ;
extern int rand(void)  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cancel(pthread_t  )  __asm__("_pthread_cancel")  ;
extern double drand48(void) ;
extern unsigned long long strtouq(char const   *__str , char **__endptr , int __base ) ;
struct rlimit {
   rlim_t rlim_cur ;
   rlim_t rlim_max ;
};
extern int ferror(FILE * ) ;
struct rusage_info_v3 {
   uint8_t ri_uuid[16] ;
   uint64_t ri_user_time ;
   uint64_t ri_system_time ;
   uint64_t ri_pkg_idle_wkups ;
   uint64_t ri_interrupt_wkups ;
   uint64_t ri_pageins ;
   uint64_t ri_wired_size ;
   uint64_t ri_resident_size ;
   uint64_t ri_phys_footprint ;
   uint64_t ri_proc_start_abstime ;
   uint64_t ri_proc_exit_abstime ;
   uint64_t ri_child_user_time ;
   uint64_t ri_child_system_time ;
   uint64_t ri_child_pkg_idle_wkups ;
   uint64_t ri_child_interrupt_wkups ;
   uint64_t ri_child_pageins ;
   uint64_t ri_child_elapsed_abstime ;
   uint64_t ri_diskio_bytesread ;
   uint64_t ri_diskio_byteswritten ;
   uint64_t ri_cpu_time_qos_default ;
   uint64_t ri_cpu_time_qos_maintenance ;
   uint64_t ri_cpu_time_qos_background ;
   uint64_t ri_cpu_time_qos_utility ;
   uint64_t ri_cpu_time_qos_legacy ;
   uint64_t ri_cpu_time_qos_user_initiated ;
   uint64_t ri_cpu_time_qos_user_interactive ;
   uint64_t ri_billed_system_time ;
   uint64_t ri_serviced_system_time ;
};
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_create(pthread_t __attribute__((__nullable__))  * _Nonnull __restrict   ,
                                                                                                                          pthread_attr_t const   * _Nullable __restrict   ,
                                                                                                                          void * _Nullable  (* _Nonnull  )(void * _Nullable   ) ,
                                                                                                                          void * _Nullable __restrict   ) ;
extern void setbuffer(FILE * , char * , int  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_destroy(pthread_cond_t * ) ;
struct __anonstruct_div_t_773697287 {
   int quot ;
   int rem ;
};
__inline extern void ( __attribute__((__always_inline__)) __darwin_fd_clr)(int _fd ,
                                                                           struct fd_set * const  _p ) 
{ 
  int tmp ;

  {
  tmp = __darwin_check_fd_set(_fd, (void const   *)_p);
  if (tmp) {
    _p->fds_bits[(unsigned long )_fd / (sizeof(__int32_t ) * 8UL)] &= ~ ((__int32_t )(1UL << (unsigned long )_fd % (sizeof(__int32_t ) * 8UL)));
  }
  return;
}
}
__inline static __uint32_t _OSSwapInt32(__uint32_t _data ) 
{ 
  int tmp ;

  {
  tmp = __builtin_bswap32((int )_data);
  return ((__uint32_t )tmp);
}
}
__inline extern void ( __attribute__((__always_inline__)) __darwin_fd_set)(int _fd ,
                                                                           struct fd_set * const  _p ) 
{ 
  int tmp ;

  {
  tmp = __darwin_check_fd_set(_fd, (void const   *)_p);
  if (tmp) {
    _p->fds_bits[(unsigned long )_fd / (sizeof(__int32_t ) * 8UL)] |= (__int32_t )(1UL << (unsigned long )_fd % (sizeof(__int32_t ) * 8UL));
  }
  return;
}
}
void fib(int n ) 
{ 
  char _3_fib_$locals[40] ;
  union _3_fib_$node _3_fib_$stack[1][32] ;
  union _3_fib_$node *_3_fib_$sp[1] ;
  unsigned char *_3_fib_$pc[1] ;
  unsigned char _3_fib_$currentOp ;
  unsigned char left16 ;
  unsigned char right17 ;
  unsigned char result18 ;
  unsigned char left19 ;
  unsigned char right20 ;
  unsigned char result21 ;
  int left22 ;
  int right23 ;
  int result24 ;
  int selfModify_BEGIN_9 ;
  int selfModify_END_9 ;
  unsigned long *addrPtr27 ;
  unsigned int *opPtr28 ;
  int selfModify_BEGIN_10 ;
  int selfModify_END_10 ;
  unsigned char left31 ;
  unsigned char right32 ;
  unsigned char result33 ;
  unsigned char left34 ;
  unsigned char right35 ;
  unsigned char result36 ;
  unsigned char left37 ;
  unsigned char right38 ;
  unsigned char result39 ;
  unsigned char left40 ;
  unsigned char right41 ;
  unsigned char result42 ;
  unsigned char left43 ;
  unsigned char right44 ;
  unsigned char result45 ;
  unsigned char left46 ;
  unsigned char right47 ;
  unsigned char result48 ;
  unsigned char left49 ;
  unsigned char right50 ;
  unsigned char result51 ;
  unsigned char left52 ;
  unsigned char right53 ;
  unsigned char result54 ;
  unsigned char left55 ;
  unsigned char right56 ;
  unsigned char result57 ;
  int left58 ;
  int right59 ;
  int result60 ;
  int selfModify_BEGIN_11 ;
  int selfModify_END_11 ;
  unsigned long *addrPtr63 ;
  unsigned int *opPtr64 ;
  int selfModify_BEGIN_12 ;
  int selfModify_END_12 ;
  unsigned char left67 ;
  unsigned char right68 ;
  unsigned char result69 ;
  unsigned char left70 ;
  unsigned char right71 ;
  unsigned char result72 ;
  int selfModify_BEGIN_13 ;
  int selfModify_END_13 ;
  unsigned char left75 ;
  unsigned char right76 ;
  unsigned char result77 ;

  {
  if (((((_1_alwaysZero & (((_1_entropy | 3) << 1UL) - (_1_entropy ^ 3))) * (_1_alwaysZero | (((_1_entropy | 3) << 1UL) - (_1_entropy ^ 3))) + (_1_alwaysZero & ~ (((_1_entropy | 3) << 1UL) - (_1_entropy ^ 3))) * (~ _1_alwaysZero & (((_1_entropy | 3) << 1UL) - (_1_entropy ^ 3)))) ^ ~ 0) + ((((_1_alwaysZero & (((_1_entropy | 3) << 1UL) - (_1_entropy ^ 3))) * (_1_alwaysZero | (((_1_entropy | 3) << 1UL) - (_1_entropy ^ 3))) + (_1_alwaysZero & ~ (((_1_entropy | 3) << 1UL) - (_1_entropy ^ 3))) * (~ _1_alwaysZero & (((_1_entropy | 3) << 1UL) - (_1_entropy ^ 3)))) | 0) + (((_1_alwaysZero & (((_1_entropy | 3) << 1UL) - (_1_entropy ^ 3))) * (_1_alwaysZero | (((_1_entropy | 3) << 1UL) - (_1_entropy ^ 3))) + (_1_alwaysZero & ~ (((_1_entropy | 3) << 1UL) - (_1_entropy ^ 3))) * (~ _1_alwaysZero & (((_1_entropy | 3) << 1UL) - (_1_entropy ^ 3)))) | 0))) + 1UL) {
    goto *((void *)(((_1_entropy - 5) - ((_1_entropy | ~ 5) + (_1_entropy | ~ 5))) - 2UL));
  } else {

  }
  addrPtr27 = (unsigned long *)((unsigned long )(&& Lab_2000013) + 45);
  *addrPtr27 = (unsigned long )(& left22);
  addrPtr27 = (unsigned long *)((unsigned long )(&& Lab_2000013) + 77);
  *addrPtr27 = (unsigned long )(& right23);
  addrPtr27 = (unsigned long *)((unsigned long )(&& Lab_2000013) + 147);
  *addrPtr27 = (unsigned long )(& result24);
  opPtr28 = (unsigned int *)((unsigned long )(&& Lab_2000013) + 131);
  addrPtr27 = (unsigned long *)((unsigned long )(&& Lab_2000013) + 216);
  *addrPtr27 = (unsigned long )(&& Lab_2000014);
  selfModify_BEGIN_9 = 1;
  Lab_2000013: /* CIL Label */ 
  __asm__  volatile   (".byte 0x9b,0x90,0x90,0xf8,0xfc,0x9b,0xfd,0xf9,0x9b,0x90;\n"
                       ".byte 0x50;\n"
                       ".byte 0xf5,0x90,0x9b,0xf9,0xf9,0xf8,0xf8,0x9b,0xf9,0xf8;\n"
                       ".byte 0x51;\n"
                       ".byte 0xf5,0x9b,0xf8,0x90,0xf5,0xfd,0xf8,0xf5,0xf8,0xf8;\n"
                       ".byte 0x56;\n"
                       ".byte 0xf5,0x9b,0xf5,0x9b,0xf5,0x90,0x9b,0x90,0xf8,0xf9;\n"
                       ".byte 0x48, 0xb8, 0xc,0x7b,0x21,0x3d,0x54,0x2d,0xc0,0x1;\n"
                       ".byte 0x9b,0xf9,0x90,0xfd,0xfd,0x90,0x90,0xf5,0x90,0x90;\n"
                       ".byte 0x8b, 0x00;\n"
                       ".byte 0x9b,0xf8,0xf9,0x90,0xfd,0xfd,0x90,0xfc,0xf9,0xfc;\n"
                       ".byte 0x48, 0xb9, 0x4f,0x40,0x2f,0xa3,0xd0,0xdc,0x24,0x42;\n"
                       ".byte 0x90,0xf5,0xfd,0xf5,0x90,0xf8,0x90,0x9b,0xf5,0xfd;\n"
                       ".byte 0x8b, 0x09;\n"
                       ".byte 0xfd,0x9b,0xf5,0xf8,0xf9,0xf8,0x90,0xf5,0xfc,0xf9;\n"
                       ".byte 0x31, 0xf6;\n"
                       ".byte 0x9b,0xf8,0x90,0xf9,0xf5,0x90,0xfd,0xfd,0xfd,0x90;\n"
                       ".byte 0x39, 0xc8;\n"
                       ".byte 0xf9,0xfc,0x90,0xf5,0xf9,0x90,0x9b,0xf5,0xf5,0xfd;\n"
                       ".byte  0x40, 0x0f, 0x9c, 0xc6;\n"
                       ".byte 0xfd,0x9b,0xfd,0xfd,0xf9,0x9b,0xf5,0xfd,0xf9,0xfd;\n"
                       ".byte 0x48, 0xb9, 0x7f,0x91,0x1c,0xaf,0xab,0x5f,0x2d,0x6a;\n"
                       ".byte 0xfd,0x90,0xfc,0xfc,0x90,0x9b,0x90,0xf5,0xfd,0x90;\n"
                       ".byte 0x89, 0x31;\n"
                       ".byte 0xfd,0x90,0xfd,0xf5,0xf9,0xf5,0xfc,0x90,0xf9,0xf9;\n"
                       ".byte 0x5e;\n"
                       ".byte 0x90,0xfd,0xf8,0xf5,0xf9,0x90,0xf5,0xfd,0xfd,0x90;\n"
                       ".byte 0x59;\n"
                       ".byte 0xf9,0xfc,0xfd,0xf8,0xf9,0xfd,0xfc,0xf5,0xfc,0xfd;\n"
                       ".byte 0x58;\n"
                       ".byte 0xfc,0xf8,0xfd,0xfc,0x9b,0xf8,0xf9,0xf8,0xfd,0xf9;\n"
                       ".byte 0xff, 0x25, 00, 00, 00, 00, 0xba,0xee,0x19,0x51,0x13,0x4b,0x12,0xdb;\n"
                       ".byte 0xf5,0xf5,0x90,0x90,0x9b,0xf8,0x90,0x9b,0x90,0xf9;\n":);
  Lab_2000014: /* CIL Label */ 
  selfModify_END_9 = 1;
  addrPtr63 = (unsigned long *)((unsigned long )(&& Lab_2000017) + 34);
  *addrPtr63 = (unsigned long )(& left58);
  addrPtr63 = (unsigned long *)((unsigned long )(&& Lab_2000017) + 66);
  *addrPtr63 = (unsigned long )(& right59);
  addrPtr63 = (unsigned long *)((unsigned long )(&& Lab_2000017) + 112);
  *addrPtr63 = (unsigned long )(& result60);
  opPtr64 = (unsigned int *)((unsigned long )(&& Lab_2000017) + 96);
  addrPtr63 = (unsigned long *)((unsigned long )(&& Lab_2000017) + 170);
  *addrPtr63 = (unsigned long )(&& Lab_2000018);
  selfModify_BEGIN_11 = 1;
  Lab_2000017: /* CIL Label */ 
  __asm__  volatile   (".byte 0xfc,0x90,0xf9,0x9b,0xf5,0x9b,0x90,0xfc,0x90,0x9b;\n"
                       ".byte 0x50;\n"
                       ".byte 0xf5,0xf9,0xfd,0xfc,0x90,0x90,0xf9,0xfc,0x9b,0x90;\n"
                       ".byte 0x51;\n"
                       ".byte 0xf9,0xf5,0xfd,0xfc,0xf9,0xfd,0xf5,0xf9,0xfd,0xf5;\n"
                       ".byte 0x48, 0xb8, 0xba,0xfe,0xbf,0xc,0x98,0x82,0xce,0xba;\n"
                       ".byte 0x90,0xfd,0xfd,0x9b,0xf9,0x90,0xfd,0x90,0x90,0xfc;\n"
                       ".byte 0x8b, 0x00;\n"
                       ".byte 0xf5,0xfc,0xfd,0x9b,0xf5,0xfc,0xf9,0x9b,0xfc,0xf8;\n"
                       ".byte 0x48, 0xb9,  0xaa,0xa0,0x4c,0x99,0xf3,0x41,0x8a,0x1f;\n"
                       ".byte 0xfc,0xf9,0xf8,0xfc,0x9b,0xfd,0xf8,0x90,0xf8,0xfc;\n"
                       ".byte 0x8b, 0x09;\n"
                       ".byte 0xfd,0xf9,0xf5,0xfd,0x9b,0xf9,0xfc,0xf8,0xfc,0xfc;\n"
                       ".byte  0x90, 0x01, 0xc8, 0x90;\n"
                       ".byte 0xf5,0xf9,0x9b,0xf8,0x9b,0x90,0xfd,0xfc,0xf8,0xfc;\n"
                       ".byte 0x48, 0xb9, 0xe4,0xe8,0xd7,0xc6,0x78,0x78,0x14,0xcd;\n"
                       ".byte 0xfc,0xf9,0xf5,0x90,0x90,0x90,0x9b,0xf9,0xf9,0x90;\n"
                       ".byte 0x89, 0x01;\n"
                       ".byte 0xfc,0xfc,0xf9,0xf5,0xf9,0xfd,0x9b,0x90,0xf9,0xf9;\n"
                       ".byte 0x59;\n"
                       ".byte 0xfc,0xf9,0xf9,0xf9,0x90,0xf9,0xf5,0xfd,0x9b,0xfc;\n"
                       ".byte 0x58;\n"
                       ".byte 0xf5,0x9b,0x90,0xfc,0xfd,0xf9,0xf5,0xf9,0x9b,0x9b;\n"
                       ".byte 0xff, 0x25, 00, 00, 00, 00, 0xfc,0x21,0x9e,0x25,0x66,0xe9,0xfc,0x6a;\n"
                       ".byte 0xfd,0xfd,0x90,0x90,0xfc,0x9b,0xf9,0xf9,0xf8,0xf9;\n":);
  Lab_2000018: /* CIL Label */ 
  selfModify_END_11 = 1;
  {
  _3_fib_$sp[0] = _3_fib_$stack[0];
  _3_fib_$pc[0] = _3_fib_$array[0];
  }
  while (1) {
    {
    _3_fib_$currentOp = *(_3_fib_$pc[0]);
    }
    if (_3_fib_$currentOp == _3_fib__formal$result_STA_0$value_LIT_0) {
      {
      (_3_fib_$pc[0]) ++;
      }
      switch (*((int *)_3_fib_$pc[0])) {
      case 0: 
      {
      (_3_fib_$sp[0] + 1)->_void_star = (void *)(& n);
      }
      break;
      }
      {
      (_3_fib_$sp[0]) ++;
      _3_fib_$pc[0] += 4;
      }
    } else
    if (_3_fib_$currentOp == _3_fib__branchIfTrue$expr_STA_0$label_LAB_0) {
      {
      (_3_fib_$pc[0]) ++;
      }
      {
      left22 = (_3_fib_$sp[0] + 0)->_int;
      right23 = 0;
      addrPtr27 = (unsigned long *)((unsigned long )(&& Lab_2000015) + 6);
      *addrPtr27 = (unsigned long )(&& Lab_2000013);
      addrPtr27 = (unsigned long *)((unsigned long )(&& Lab_2000013) + 216);
      *addrPtr27 = (unsigned long )(&& Lab_2000016);
      *opPtr28 = 3331657536U;
      selfModify_BEGIN_10 = 1;
      Lab_2000015: /* CIL Label */ 
      __asm__  volatile   (".byte 0xff, 0x25, 00, 00, 00, 00, 0xcb,0xda,0xa6,0x8a,0x8b,0x91,0x25,0x98;\n":);
      Lab_2000016: /* CIL Label */ 
      selfModify_END_10 = 1;
      if (result24) {
        {
        _3_fib_$pc[0] += *((int *)_3_fib_$pc[0]);
        }
      } else {
        {
        _3_fib_$pc[0] += 4;
        }
      }
      }
      {
      (_3_fib_$sp[0]) --;
      }
    } else
    if (_3_fib_$currentOp == _3_fib__goto$label_LAB_0) {
      {
      (_3_fib_$pc[0]) ++;
      _3_fib_$pc[0] += *((int *)_3_fib_$pc[0]);
      }
    } else
    if (_3_fib_$currentOp == _3_fib__returnVoid$) {
      {
      (_3_fib_$pc[0]) ++;
      }
      return;
    } else
    if (_3_fib_$currentOp == _3_fib__convert_void_star2void_star$left_STA_0$result_STA_0) {
      {
      (_3_fib_$pc[0]) ++;
      (_3_fib_$sp[0] + 0)->_void_star = (_3_fib_$sp[0] + 0)->_void_star;
      }
    } else
    if (_3_fib_$currentOp == _3_fib__string$result_STA_0$value_LIT_0) {
      {
      (_3_fib_$pc[0]) ++;
      (_3_fib_$sp[0] + 1)->_void_star = (void *)(_3_fib_$strings + *((int *)_3_fib_$pc[0]));
      (_3_fib_$sp[0]) ++;
      _3_fib_$pc[0] += 4;
      }
    } else
    if (_3_fib_$currentOp == _3_fib__load_int$left_STA_0$result_STA_0) {
      {
      (_3_fib_$pc[0]) ++;
      (_3_fib_$sp[0] + 0)->_int = *((int *)(_3_fib_$sp[0] + 0)->_void_star);
      }
    } else
    if (_3_fib_$currentOp == _3_fib__call$func_LIT_0) {
      {
      (_3_fib_$pc[0]) ++;
      }
      switch (*((int *)_3_fib_$pc[0])) {
      case 1: 
      {
      printf(*((char const   * __restrict  *)(_3_fib_$locals + 24)), *((int *)(_3_fib_$locals + 32)),
             *((int *)(_3_fib_$locals + 36)));
      }
      break;
      }
      {
      _3_fib_$pc[0] += 4;
      }
    } else
    if (_3_fib_$currentOp == _3_fib__local$result_STA_0$value_LIT_0) {
      {
      (_3_fib_$pc[0]) ++;
      (_3_fib_$sp[0] + 1)->_void_star = (void *)(_3_fib_$locals + *((int *)_3_fib_$pc[0]));
      (_3_fib_$sp[0]) ++;
      _3_fib_$pc[0] += 4;
      }
    } else
    if (_3_fib_$currentOp == _3_fib__constant_int$result_STA_0$value_LIT_0) {
      {
      (_3_fib_$pc[0]) ++;
      (_3_fib_$sp[0] + 1)->_int = *((int *)_3_fib_$pc[0]);
      (_3_fib_$sp[0]) ++;
      _3_fib_$pc[0] += 4;
      }
    } else
    if (_3_fib_$currentOp == _3_fib__PlusA_int_int2int$right_STA_0$result_STA_0$left_STA_1) {
      {
      (_3_fib_$pc[0]) ++;
      {
      left58 = (_3_fib_$sp[0] + -1)->_int;
      right59 = (_3_fib_$sp[0] + 0)->_int;
      addrPtr63 = (unsigned long *)((unsigned long )(&& Lab_2000019) + 6);
      *addrPtr63 = (unsigned long )(&& Lab_2000017);
      addrPtr63 = (unsigned long *)((unsigned long )(&& Lab_2000017) + 170);
      *addrPtr63 = (unsigned long )(&& Lab_2000020);
      *opPtr64 = 2429026704U;
      selfModify_BEGIN_12 = 1;
      Lab_2000019: /* CIL Label */ 
      __asm__  volatile   (".byte 0xff, 0x25, 00, 00, 00, 00, 0x2f,0xd1,0xd0,0xa5,0x1,0xca,0x31,0xac;\n":);
      Lab_2000020: /* CIL Label */ 
      selfModify_END_12 = 1;
      (_3_fib_$sp[0] + -1)->_int = result60;
      }
      (_3_fib_$sp[0]) --;
      }
    } else
    if (_3_fib_$currentOp == _3_fib__store_int$left_STA_0$right_STA_1) {
      {
      (_3_fib_$pc[0]) ++;
      *((int *)(_3_fib_$sp[0] + 0)->_void_star) = (_3_fib_$sp[0] + -1)->_int;
      _3_fib_$sp[0] += -2;
      }
    } else
    if (_3_fib_$currentOp == _3_fib__Lt_int_int2int$right_STA_0$result_STA_0$left_STA_1) {
      {
      (_3_fib_$pc[0]) ++;
      {
      left22 = (_3_fib_$sp[0] + -1)->_int;
      right23 = (_3_fib_$sp[0] + 0)->_int;
      addrPtr27 = (unsigned long *)((unsigned long )(&& Lab_2000021) + 6);
      *addrPtr27 = (unsigned long )(&& Lab_2000013);
      addrPtr27 = (unsigned long *)((unsigned long )(&& Lab_2000013) + 216);
      *addrPtr27 = (unsigned long )(&& Lab_2000022);
      *opPtr28 = 3332116288U;
      selfModify_BEGIN_13 = 1;
      Lab_2000021: /* CIL Label */ 
      __asm__  volatile   (".byte 0xff, 0x25, 00, 00, 00, 00, 0xe7,0x3e,0xc5,0x91,0x22,0xd1,0x9b,0xf8;\n":);
      Lab_2000022: /* CIL Label */ 
      selfModify_END_13 = 1;
      (_3_fib_$sp[0] + -1)->_int = result24;
      }
      (_3_fib_$sp[0]) --;
      }
    } else
    if (_3_fib_$currentOp == _3_fib__store_void_star$right_STA_0$left_STA_1) {
      {
      (_3_fib_$pc[0]) ++;
      *((void **)(_3_fib_$sp[0] + -1)->_void_star) = (_3_fib_$sp[0] + 0)->_void_star;
      _3_fib_$sp[0] += -2;
      }
    } else {
      {

      }
    }
  }
}
}
__inline extern int ( __attribute__((__always_inline__)) __darwin_check_fd_set)(int _a ,
                                                                                void const   *_b ) 
{ 
  int tmp ;

  {
  if ((uintptr_t )(& __darwin_check_fd_set_overflow) != 0UL) {
    tmp = __darwin_check_fd_set_overflow(_a, _b, 0);
    return (tmp);
  } else {
    return (1);
  }
}
}
__inline static __uint16_t _OSSwapInt16(__uint16_t _data ) 
{ 


  {
  return ((__uint16_t )(((int )_data << 8) | ((int )_data >> 8)));
}
}
int main(int argc , char **argv , char **_formal_envp ) 
{ 
  int _BARRIER_0 ;

  {
  megaInit();
  _global_argc = argc;
  _global_argv = argv;
  _global_envp = _formal_envp;
  _BARRIER_0 = 1;
  init_tigress();
  fac(10);
  fib(10);
  return (0);
}
}
void fac(int n ) 
{ 
  char _3_fac_$locals[32] ;
  union _3_fac_$node _3_fac_$stack[1][32] ;
  union _3_fac_$node *_3_fac_$sp[1] ;
  unsigned char *_3_fac_$pc[1] ;
  unsigned char _3_fac_$currentOp ;
  unsigned char left14 ;
  unsigned char right15 ;
  unsigned char result16 ;
  int left17 ;
  int right18 ;
  int result19 ;
  int selfModify_BEGIN_3 ;
  int selfModify_END_3 ;
  unsigned long *addrPtr22 ;
  unsigned int *opPtr23 ;
  int selfModify_BEGIN_4 ;
  int selfModify_END_4 ;
  unsigned char left26 ;
  unsigned char right27 ;
  unsigned char result28 ;
  unsigned char left29 ;
  unsigned char right30 ;
  unsigned char result31 ;
  int selfModify_BEGIN_5 ;
  int selfModify_END_5 ;
  unsigned char left34 ;
  unsigned char right35 ;
  unsigned char result36 ;
  unsigned char left37 ;
  unsigned char right38 ;
  unsigned char result39 ;
  int left40 ;
  int right41 ;
  int result42 ;
  int selfModify_BEGIN_6 ;
  int selfModify_END_6 ;
  unsigned long *addrPtr45 ;
  unsigned int *opPtr46 ;
  int selfModify_BEGIN_7 ;
  int selfModify_END_7 ;
  unsigned char left49 ;
  unsigned char right50 ;
  unsigned char result51 ;
  unsigned char left52 ;
  unsigned char right53 ;
  unsigned char result54 ;
  unsigned char left55 ;
  unsigned char right56 ;
  unsigned char result57 ;
  unsigned char left58 ;
  unsigned char right59 ;
  unsigned char result60 ;
  unsigned char left61 ;
  unsigned char right62 ;
  unsigned char result63 ;
  int selfModify_BEGIN_8 ;
  int selfModify_END_8 ;
  unsigned char left66 ;
  unsigned char right67 ;
  unsigned char result68 ;
  unsigned char left69 ;
  unsigned char right70 ;
  unsigned char result71 ;
  unsigned char left72 ;
  unsigned char right73 ;
  unsigned char result74 ;
  unsigned char left75 ;
  unsigned char right76 ;
  unsigned char result77 ;
  unsigned char left78 ;
  unsigned char right79 ;
  unsigned char result80 ;

  {
  if (_2_init_tigress_1_opaque_ptr_1 == _2_init_tigress_1_opaque_ptr_2) {
    goto *((void *)(((_1_entropy ^ ~ 6) + ((_1_entropy | 6) << 1UL)) + 1UL));
  } else {

  }
  addrPtr22 = (unsigned long *)((unsigned long )(&& Lab_2000001) + 45);
  *addrPtr22 = (unsigned long )(& left17);
  addrPtr22 = (unsigned long *)((unsigned long )(&& Lab_2000001) + 77);
  *addrPtr22 = (unsigned long )(& right18);
  addrPtr22 = (unsigned long *)((unsigned long )(&& Lab_2000001) + 147);
  *addrPtr22 = (unsigned long )(& result19);
  opPtr23 = (unsigned int *)((unsigned long )(&& Lab_2000001) + 131);
  addrPtr22 = (unsigned long *)((unsigned long )(&& Lab_2000001) + 216);
  *addrPtr22 = (unsigned long )(&& Lab_2000002);
  selfModify_BEGIN_3 = 1;
  Lab_2000001: /* CIL Label */ 
  __asm__  volatile   (".byte 0x9b,0x9b,0x9b,0xf5,0xfc,0xfc,0xfd,0xf8,0xf8,0xfc;\n"
                       ".byte 0x50;\n"
                       ".byte 0xf5,0xfc,0x90,0xf8,0xf5,0xfc,0xfc,0xfd,0x90,0xf9;\n"
                       ".byte 0x51;\n"
                       ".byte 0xf5,0x90,0x9b,0x90,0xfc,0x90,0xf9,0xf8,0x9b,0xf9;\n"
                       ".byte 0x56;\n"
                       ".byte 0x9b,0xfd,0x9b,0x90,0xfc,0xf5,0xf9,0xf9,0xf9,0x90;\n"
                       ".byte 0x48, 0xb8, 0xc,0x7b,0x21,0x3d,0x54,0x2d,0xc0,0x1;\n"
                       ".byte 0xfc,0x90,0x90,0x90,0x9b,0xf8,0x90,0xf5,0xf9,0xf5;\n"
                       ".byte 0x8b, 0x00;\n"
                       ".byte 0xfc,0x90,0x90,0xfd,0x90,0xf9,0xf5,0xf9,0xf5,0x90;\n"
                       ".byte 0x48, 0xb9, 0x4f,0x40,0x2f,0xa3,0xd0,0xdc,0x24,0x42;\n"
                       ".byte 0xfd,0x90,0xf8,0x90,0xf5,0xf5,0x9b,0xfd,0x9b,0xf8;\n"
                       ".byte 0x8b, 0x09;\n"
                       ".byte 0xf5,0xfd,0xfc,0xfc,0xfc,0xf8,0xf8,0x9b,0xf8,0xf9;\n"
                       ".byte 0x31, 0xf6;\n"
                       ".byte 0x9b,0xf9,0x9b,0xf5,0xf8,0xfc,0xfc,0xf8,0xfd,0xf8;\n"
                       ".byte 0x39, 0xc8;\n"
                       ".byte 0xf9,0x9b,0xfc,0xfd,0x90,0x90,0xfd,0xfc,0xf9,0x90;\n"
                       ".byte  0x40, 0x0f, 0x9c, 0xc6;\n"
                       ".byte 0x90,0xfc,0xfc,0xfc,0xfc,0xfd,0xf9,0xfc,0xfc,0xfc;\n"
                       ".byte 0x48, 0xb9, 0x7f,0x91,0x1c,0xaf,0xab,0x5f,0x2d,0x6a;\n"
                       ".byte 0x90,0xf5,0x90,0xf5,0x90,0x9b,0x90,0xfc,0xfd,0xf8;\n"
                       ".byte 0x89, 0x31;\n"
                       ".byte 0x9b,0xfd,0xf9,0x90,0xfd,0x90,0xf5,0xfd,0x9b,0x90;\n"
                       ".byte 0x5e;\n"
                       ".byte 0xfd,0xfc,0xfd,0x9b,0x9b,0xf5,0xfd,0xf9,0xf8,0xf5;\n"
                       ".byte 0x59;\n"
                       ".byte 0x90,0xfd,0xf8,0xf9,0xf5,0xf8,0xf5,0xfc,0x90,0xf5;\n"
                       ".byte 0x58;\n"
                       ".byte 0xfd,0xfd,0x90,0xf9,0xf9,0xfc,0xf9,0xfd,0xf5,0x9b;\n"
                       ".byte 0xff, 0x25, 00, 00, 00, 00, 0xba,0xee,0x19,0x51,0x13,0x4b,0x12,0xdb;\n"
                       ".byte 0xf5,0x9b,0xf8,0xf9,0xfc,0xf9,0xf8,0xf9,0x90,0x9b;\n":);
  Lab_2000002: /* CIL Label */ 
  selfModify_END_3 = 1;
  addrPtr45 = (unsigned long *)((unsigned long )(&& Lab_2000007) + 34);
  *addrPtr45 = (unsigned long )(& left40);
  addrPtr45 = (unsigned long *)((unsigned long )(&& Lab_2000007) + 66);
  *addrPtr45 = (unsigned long )(& right41);
  addrPtr45 = (unsigned long *)((unsigned long )(&& Lab_2000007) + 112);
  *addrPtr45 = (unsigned long )(& result42);
  opPtr46 = (unsigned int *)((unsigned long )(&& Lab_2000007) + 96);
  addrPtr45 = (unsigned long *)((unsigned long )(&& Lab_2000007) + 170);
  *addrPtr45 = (unsigned long )(&& Lab_2000008);
  selfModify_BEGIN_6 = 1;
  Lab_2000007: /* CIL Label */ 
  __asm__  volatile   (".byte 0x90,0xfc,0x9b,0x9b,0xfc,0xf5,0xfd,0xf5,0xfc,0xfc;\n"
                       ".byte 0x50;\n"
                       ".byte 0xfd,0xfd,0xfc,0xf8,0xfd,0x9b,0xfd,0x9b,0x90,0xfd;\n"
                       ".byte 0x51;\n"
                       ".byte 0xf8,0xfc,0xf8,0x90,0x90,0xf9,0x9b,0xfd,0xfc,0x9b;\n"
                       ".byte 0x48, 0xb8, 0xba,0xfe,0xbf,0xc,0x98,0x82,0xce,0xba;\n"
                       ".byte 0xf5,0xfc,0xfc,0xf8,0x9b,0x9b,0x90,0xfc,0xf8,0xf8;\n"
                       ".byte 0x8b, 0x00;\n"
                       ".byte 0x9b,0xfd,0xf9,0x9b,0x90,0xf9,0xfc,0xf9,0x90,0xf8;\n"
                       ".byte 0x48, 0xb9,  0xaa,0xa0,0x4c,0x99,0xf3,0x41,0x8a,0x1f;\n"
                       ".byte 0x9b,0xf9,0x90,0x90,0xf9,0xf8,0xf8,0x9b,0xf5,0xf5;\n"
                       ".byte 0x8b, 0x09;\n"
                       ".byte 0xf5,0xf8,0xf5,0xf8,0x9b,0xf5,0x90,0xfd,0xf9,0xf5;\n"
                       ".byte  0x90, 0x01, 0xc8, 0x90;\n"
                       ".byte 0xf9,0x90,0xf8,0x9b,0xfc,0x90,0xf9,0x90,0xf5,0xf9;\n"
                       ".byte 0x48, 0xb9, 0xe4,0xe8,0xd7,0xc6,0x78,0x78,0x14,0xcd;\n"
                       ".byte 0xfc,0xf8,0xf8,0xf8,0xf9,0xf5,0xfd,0xf5,0x9b,0x9b;\n"
                       ".byte 0x89, 0x01;\n"
                       ".byte 0xf9,0xfd,0xf8,0xfd,0x90,0xf5,0xfd,0xf9,0x90,0xf8;\n"
                       ".byte 0x59;\n"
                       ".byte 0xfc,0x90,0xfd,0xf8,0x90,0xfc,0x9b,0x9b,0x90,0x9b;\n"
                       ".byte 0x58;\n"
                       ".byte 0xfc,0xfc,0xf8,0xf9,0x90,0xf8,0xfd,0x9b,0xf9,0x9b;\n"
                       ".byte 0xff, 0x25, 00, 00, 00, 00, 0xfc,0x21,0x9e,0x25,0x66,0xe9,0xfc,0x6a;\n"
                       ".byte 0xfd,0xf8,0x9b,0x9b,0xfd,0xf5,0x90,0x9b,0xf9,0x9b;\n":);
  Lab_2000008: /* CIL Label */ 
  selfModify_END_6 = 1;
  {
  _3_fac_$sp[0] = _3_fac_$stack[0];
  _3_fac_$pc[0] = _3_fac_$array[0];
  }
  while (1) {
    {
    _3_fac_$currentOp = *(_3_fac_$pc[0]);
    }
    if (_3_fac_$currentOp == _3_fac__Le_int_int2int$left_STA_0$result_STA_0$right_STA_1) {
      {
      (_3_fac_$pc[0]) ++;
      {
      left17 = (_3_fac_$sp[0] + 0)->_int;
      right18 = (_3_fac_$sp[0] + -1)->_int;
      addrPtr22 = (unsigned long *)((unsigned long )(&& Lab_2000003) + 6);
      *addrPtr22 = (unsigned long )(&& Lab_2000001);
      addrPtr22 = (unsigned long *)((unsigned long )(&& Lab_2000001) + 216);
      *addrPtr22 = (unsigned long )(&& Lab_2000004);
      *opPtr23 = 3332247360U;
      selfModify_BEGIN_4 = 1;
      Lab_2000003: /* CIL Label */ 
      __asm__  volatile   (".byte 0xff, 0x25, 00, 00, 00, 00, 0x88,0x9a,0xd0,0x74,0x3a,0x53,0x7e,0xac;\n":);
      Lab_2000004: /* CIL Label */ 
      selfModify_END_4 = 1;
      (_3_fac_$sp[0] + -1)->_int = result19;
      }
      (_3_fac_$sp[0]) --;
      }
    } else
    if (_3_fac_$currentOp == _3_fac__store_int$left_STA_0$right_STA_1) {
      {
      (_3_fac_$pc[0]) ++;
      *((int *)(_3_fac_$sp[0] + 0)->_void_star) = (_3_fac_$sp[0] + -1)->_int;
      _3_fac_$sp[0] += -2;
      }
    } else
    if (_3_fac_$currentOp == _3_fac__branchIfTrue$expr_STA_0$label_LAB_0) {
      {
      (_3_fac_$pc[0]) ++;
      }
      {
      left17 = (_3_fac_$sp[0] + 0)->_int;
      right18 = 0;
      addrPtr22 = (unsigned long *)((unsigned long )(&& Lab_2000005) + 6);
      *addrPtr22 = (unsigned long )(&& Lab_2000001);
      addrPtr22 = (unsigned long *)((unsigned long )(&& Lab_2000001) + 216);
      *addrPtr22 = (unsigned long )(&& Lab_2000006);
      *opPtr23 = 3331657536U;
      selfModify_BEGIN_5 = 1;
      Lab_2000005: /* CIL Label */ 
      __asm__  volatile   (".byte 0xff, 0x25, 00, 00, 00, 00, 0xf,0x8c,0x57,0xd5,0xd,0x61,0x8b,0xe5;\n":);
      Lab_2000006: /* CIL Label */ 
      selfModify_END_5 = 1;
      if (result19) {
        {
        _3_fac_$pc[0] += *((int *)_3_fac_$pc[0]);
        }
      } else {
        {
        _3_fac_$pc[0] += 4;
        }
      }
      }
      {
      (_3_fac_$sp[0]) --;
      }
    } else
    if (_3_fac_$currentOp == _3_fac__formal$result_STA_0$value_LIT_0) {
      {
      (_3_fac_$pc[0]) ++;
      }
      switch (*((int *)_3_fac_$pc[0])) {
      case 0: 
      {
      (_3_fac_$sp[0] + 1)->_void_star = (void *)(& n);
      }
      break;
      }
      {
      (_3_fac_$sp[0]) ++;
      _3_fac_$pc[0] += 4;
      }
    } else
    if (_3_fac_$currentOp == _3_fac__Mult_int_int2int$left_STA_0$result_STA_0$right_STA_1) {
      {
      (_3_fac_$pc[0]) ++;
      {
      left40 = (_3_fac_$sp[0] + 0)->_int;
      right41 = (_3_fac_$sp[0] + -1)->_int;
      addrPtr45 = (unsigned long *)((unsigned long )(&& Lab_2000009) + 6);
      *addrPtr45 = (unsigned long )(&& Lab_2000007);
      addrPtr45 = (unsigned long *)((unsigned long )(&& Lab_2000007) + 170);
      *addrPtr45 = (unsigned long )(&& Lab_2000010);
      *opPtr46 = 3249475472U;
      selfModify_BEGIN_7 = 1;
      Lab_2000009: /* CIL Label */ 
      __asm__  volatile   (".byte 0xff, 0x25, 00, 00, 00, 00, 0x43,0x70,0x51,0xe2,0xf2,0x5d,0x46,0x3d;\n":);
      Lab_2000010: /* CIL Label */ 
      selfModify_END_7 = 1;
      (_3_fac_$sp[0] + -1)->_int = result42;
      }
      (_3_fac_$sp[0]) --;
      }
    } else
    if (_3_fac_$currentOp == _3_fac__load_int$left_STA_0$result_STA_0) {
      {
      (_3_fac_$pc[0]) ++;
      (_3_fac_$sp[0] + 0)->_int = *((int *)(_3_fac_$sp[0] + 0)->_void_star);
      }
    } else
    if (_3_fac_$currentOp == _3_fac__call$func_LIT_0) {
      {
      (_3_fac_$pc[0]) ++;
      }
      switch (*((int *)_3_fac_$pc[0])) {
      case 1: 
      {
      printf(*((char const   * __restrict  *)(_3_fac_$locals + 16)), *((int *)(_3_fac_$locals + 24)),
             *((int *)(_3_fac_$locals + 28)));
      }
      break;
      }
      {
      _3_fac_$pc[0] += 4;
      }
    } else
    if (_3_fac_$currentOp == _3_fac__returnVoid$) {
      {
      (_3_fac_$pc[0]) ++;
      }
      return;
    } else
    if (_3_fac_$currentOp == _3_fac__goto$label_LAB_0) {
      {
      (_3_fac_$pc[0]) ++;
      _3_fac_$pc[0] += *((int *)_3_fac_$pc[0]);
      }
    } else
    if (_3_fac_$currentOp == _3_fac__PlusA_int_int2int$right_STA_0$result_STA_0$left_STA_1) {
      {
      (_3_fac_$pc[0]) ++;
      {
      left40 = (_3_fac_$sp[0] + -1)->_int;
      right41 = (_3_fac_$sp[0] + 0)->_int;
      addrPtr45 = (unsigned long *)((unsigned long )(&& Lab_2000011) + 6);
      *addrPtr45 = (unsigned long )(&& Lab_2000007);
      addrPtr45 = (unsigned long *)((unsigned long )(&& Lab_2000007) + 170);
      *addrPtr45 = (unsigned long )(&& Lab_2000012);
      *opPtr46 = 2429026704U;
      selfModify_BEGIN_8 = 1;
      Lab_2000011: /* CIL Label */ 
      __asm__  volatile   (".byte 0xff, 0x25, 00, 00, 00, 00, 0xcd,0xbe,0x97,0x7b,0x43,0xd0,0xec,0x3b;\n":);
      Lab_2000012: /* CIL Label */ 
      selfModify_END_8 = 1;
      (_3_fac_$sp[0] + -1)->_int = result42;
      }
      (_3_fac_$sp[0]) --;
      }
    } else
    if (_3_fac_$currentOp == _3_fac__constant_int$result_STA_0$value_LIT_0) {
      {
      (_3_fac_$pc[0]) ++;
      (_3_fac_$sp[0] + 1)->_int = *((int *)_3_fac_$pc[0]);
      (_3_fac_$sp[0]) ++;
      _3_fac_$pc[0] += 4;
      }
    } else
    if (_3_fac_$currentOp == _3_fac__string$result_STA_0$value_LIT_0) {
      {
      (_3_fac_$pc[0]) ++;
      (_3_fac_$sp[0] + 1)->_void_star = (void *)(_3_fac_$strings + *((int *)_3_fac_$pc[0]));
      (_3_fac_$sp[0]) ++;
      _3_fac_$pc[0] += 4;
      }
    } else
    if (_3_fac_$currentOp == _3_fac__local$result_STA_0$value_LIT_0) {
      {
      (_3_fac_$pc[0]) ++;
      (_3_fac_$sp[0] + 1)->_void_star = (void *)(_3_fac_$locals + *((int *)_3_fac_$pc[0]));
      (_3_fac_$sp[0]) ++;
      _3_fac_$pc[0] += 4;
      }
    } else
    if (_3_fac_$currentOp == _3_fac__store_void_star$right_STA_0$left_STA_1) {
      {
      (_3_fac_$pc[0]) ++;
      *((void **)(_3_fac_$sp[0] + -1)->_void_star) = (_3_fac_$sp[0] + 0)->_void_star;
      _3_fac_$sp[0] += -2;
      }
    } else
    if (_3_fac_$currentOp == _3_fac__convert_void_star2void_star$left_STA_0$result_STA_0) {
      {
      (_3_fac_$pc[0]) ++;
      (_3_fac_$sp[0] + 0)->_void_star = (_3_fac_$sp[0] + 0)->_void_star;
      }
    } else {
      {

      }
    }
  }
}
}
__inline static __uint64_t _OSSwapInt64(__uint64_t _data ) 
{ 
  long tmp ;

  {
  tmp = __builtin_bswap64((long )_data);
  return ((__uint64_t )tmp);
}
}
__inline extern int ( __attribute__((__always_inline__)) __sputc)(int _c , FILE *_p ) 
{ 
  unsigned char *tmp ;
  unsigned char tmp___0 ;
  int tmp___1 ;

  {
  (_p->_w) --;
  if (_p->_w >= 0) {
    tmp = _p->_p;
    (_p->_p) ++;
    tmp___0 = (unsigned char )_c;
    *tmp = tmp___0;
    return ((int )tmp___0);
  } else
  if (_p->_w >= _p->_lbfsize) {
    if ((int )((char )_c) != 10) {
      tmp = _p->_p;
      (_p->_p) ++;
      tmp___0 = (unsigned char )_c;
      *tmp = tmp___0;
      return ((int )tmp___0);
    } else {
      tmp___1 = __swbuf(_c, _p);
      return (tmp___1);
    }
  } else {
    tmp___1 = __swbuf(_c, _p);
    return (tmp___1);
  }
}
}
void megaInit(void) 
{ 


  {

}
}
__inline extern int ( __attribute__((__always_inline__)) __darwin_fd_isset)(int _fd ,
                                                                            struct fd_set  const  *_p ) 
{ 
  int tmp ;

  {
  tmp = __darwin_check_fd_set(_fd, (void const   *)_p);
  if (tmp) {
    return (_p->fds_bits[(unsigned long )_fd / (sizeof(__int32_t ) * 8UL)] & (__int32_t )(1UL << (unsigned long )_fd % (sizeof(__int32_t ) * 8UL)));
  }
  return (0);
}
}
void init_tigress(void) 
{ 
  struct _2_init_tigress_1_opaque_NodeStruct *p1 ;
  int i2 ;
  struct _2_init_tigress_1_opaque_NodeStruct *p3 ;
  int _2_init_tigress__BEGIN_1 ;
  int _2_init_tigress__END_1 ;
  int _2_init_tigress__BARRIER_2 ;

  {
  _2_init_tigress__BEGIN_1 = 1;
  p1 = (struct _2_init_tigress_1_opaque_NodeStruct *)malloc(sizeof(struct _2_init_tigress_1_opaque_NodeStruct ));
  p1->next = p1;
  p1->prev = p1;
  _2_init_tigress_1_opaque_list_1 = p1;
  i2 = 0;
  while (i2 < 4) {
    p3 = (struct _2_init_tigress_1_opaque_NodeStruct *)malloc(sizeof(struct _2_init_tigress_1_opaque_NodeStruct ));
    p3->data = i2 * (((_1_entropy + 9) + 1UL) + ((- _1_entropy - 1UL) | (- 9 - 1UL)));
    p3->next = _2_init_tigress_1_opaque_list_1->next;
    p3->prev = _2_init_tigress_1_opaque_list_1;
    (_2_init_tigress_1_opaque_list_1->next)->prev = p3;
    _2_init_tigress_1_opaque_list_1->next = p3;
    i2 ++;
  }
  _2_init_tigress_1_opaque_ptr_1 = _2_init_tigress_1_opaque_list_1->next;
  _2_init_tigress_1_opaque_ptr_2 = _2_init_tigress_1_opaque_ptr_1;
  _2_init_tigress_1_opaque_ptr_2 = _2_init_tigress_1_opaque_ptr_2->next;
  _2_init_tigress__END_1 = 1;
  _2_init_tigress__BARRIER_2 = 1;
  return;
}
}
