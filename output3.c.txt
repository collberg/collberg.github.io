
/*
BEGIN-TIGRESS
{
  "Tigress": {
    "Source": "This file was generated by Tigress, a product of the University of Arizona.",
    "Author": "Christian Collberg",
    "Contact": "collberg@gmail.com",
    "Version": "4.0.9,Operating system=Darwin, Architecture=x86_64, Git hash=0c17c347b6961d2299ca807a3595dc55e24f2a2d, Date=2024-11-20T08:46:22:+0000",
    "Url": "https://tigress.wtf"
  },
  "Usage": {
    "Research": "Tigress is free to use for research purposes.",
    "Commercial": "Any use in a commercial setting requires a license from the University of Arizona."
  }
}
END-TIGRESS
*/


/*
BEGIN-CONFIG
[
  {
    "Environment": {
      "architecture": "x86",
      "wordsize": "64",
      "os": "Darwin",
      "compiler": "Clang",
      "compilerVersion": "(5,1)"
    }
  },
  {
    "Major version number": 4,
    "Minor version number": 2,
    "gcc version string": "4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)",
    "If assembly names have leading underscore": false,
    "Size of 'short'": 2,
    "Size of 'int'": 4,
    "Size of '_Bool'": 1,
    "Size of 'long'": 8,
    "Size of 'long long'": 8,
    "Size of pointers": 8,
    "Size of 'float'": 4,
    "Size of '_Float32x'": 0,
    "Size of '_Float64x'": 0,
    "Size of 'double'": 8,
    "Size of 'long double'": 16,
    "Size of '_Float16'": 0,
    "Size of '_Float128'": 0,
    "Size of 'float _Complex'": 8,
    "Size of 'double _Complex'": 16,
    "Size of 'long double _Complex'": 32,
    "Size of '_Float128 _Complex'": 0,
    "Size of 'void'": 1,
    "Size of function": 8,
    "Type of 'sizeof(T)'": "unsigned long long",
    "Type of 'wchar_t'": "unsigned short",
    "Type of 'char16_t'": "unsigned short",
    "Type of 'char32_t'": "unsigned int",
    "Alignment of 'short'": 2,
    "Alignment of 'int'": 4,
    "Alignment of '_Bool'": 1,
    "Alignment of 'long'": 8,
    "Alignment of 'long long'": 8,
    "Alignment of pointers": 8,
    "Alignment of enum types": 4,
    "Alignment of 'float'": 4,
    "Alignment of '_Float32x'": 0,
    "Alignment of '_Float64x'": 0,
    "Alignment of 'double'": 8,
    "Alignment of 'long double'": 16,
    "Alignment of '_Float16'": 0,
    "Alignment of '_Float128'": 0,
    "Alignment of 'float _Complex'": 4,
    "Alignment of 'double _Complex'": 8,
    "Alignment of 'long double _Complex'": 16,
    "Alignment of '_Float128 _Complex'": 0,
    "Alignment of strings": 1,
    "Alignment of function": 4,
    "Alignment of anything with the 'aligned' attribute": 16,
    "Whether 'char' is unsigned": false,
    "whether the machine is little endian": true,
    "whether __thread is a keyword": true,
    "whether __builtin_va_list is builtin (gccism)": true
  },
  {
    "C language specification": "C99",
    "Generate code for Microsoct MSVC": false,
    "Whether to convert local static variables into global static variables": false,
    "Whether to use the logical operands LAnd and LOr": false,
    "Whether to use GCC's computed gotos": true,
    "Whether to expand ranges of values in case statements": false
  },
  {
    "Bitsize of char": 8,
    "Bitsize of signed char": 8,
    "Bitsize of unsigned char": 8,
    "Bitsize of _Bool": 8,
    "Bitsize of short": 16,
    "Bitsize of unsigned short": 16,
    "Bitsize of int": 32,
    "Bitsize of unsigned int": 32,
    "Bitsize of long": 64,
    "Bitsize of unsigned long": 64,
    "Bitsize of long long": 64,
    "Bitsize of unsigned long long": 64,
    "Bitsize of __int128": 128,
    "Bitsize of unsigned __int128": 128,
    "Bitsize of float": 32,
    "Bitsize of double": 64,
    "Bitsize of long double": 128,
    "Bitsize of float16": 0,
    "Bitsize of float128": 0,
    "Bitsize of float _Complex": 64,
    "Bitsize of double _Complex": 128,
    "Bitsize of long double _Complex": 256,
    "Bitsize of _float128 _Complex": 0
  }
]
END-CONFIG
*/


/*
BEGIN-OPTIONS
[
  {
    "task": 1,
    "kind": "InitEntropy",
    "prefix": "",
    "seed": "",
    "funSpec": [ [ "id(init_tigress)", "" ] ],
    "globalVarSpec": [],
    "localVarSpec": [],
    "exclude": [],
    "funs": [ "init_tigress" ],
    "options": {
      "common": {
        "prefix": "",
        "verbosity": "None",
        "statistics": "None",
        "transformationKind": "Ident",
        "vlaTransformation": "alloca",
        "transformationNumber": "0"
      },
      "updateKinds": [ "vars" ],
      "trace": [],
      "vars": [ "?1" ],
      "threadName": "entropyThread",
      "threadSleep": "100",
      "debug": "false",
      "obfuscate": "false"
    }
  },
  {
    "task": 2,
    "kind": "InitOpaque",
    "prefix": "",
    "seed": "",
    "funSpec": [ [ "id(init_tigress)", "" ] ],
    "globalVarSpec": [],
    "localVarSpec": [],
    "exclude": [],
    "funs": [ "init_tigress" ],
    "options": {
      "common": {
        "prefix": "",
        "verbosity": "None",
        "statistics": "None",
        "transformationKind": "Ident",
        "vlaTransformation": "alloca",
        "transformationNumber": "0"
      },
      "count": "1",
      "kinds": [ "list", "array", "env" ],
      "size": "30",
      "trace": [],
      "allowAddNodes": "false",
      "debug": "false"
    }
  },
  {
    "task": 3,
    "kind": "Virtualize",
    "prefix": "",
    "seed": "",
    "funSpec": [ [ "id(fib)", "" ] ],
    "globalVarSpec": [],
    "localVarSpec": [],
    "exclude": [],
    "funs": [ "fib" ],
    "options": {
      "common": {
        "prefix": "",
        "verbosity": "None",
        "statistics": "None",
        "transformationKind": "Ident",
        "vlaTransformation": "alloca",
        "transformationNumber": "0"
      },
      "kind": "direct",
      "operands": "stack",
      "maxDuplicateOps": "1",
      "maxMergeLength": "1",
      "stackSize": "32",
      "seed": "0",
      "superOperatorRatio": "2.",
      "taggedStore": "false",
      "randomizeOperators": "true",
      "randomizeOperandOrder": "true",
      "numberOfBogusFuns": "0",
      "bogusFunsGenerateOutput": "true",
      "bogusFunKinds": [ "arithSeq", "collatz" ],
      "bogusLoopKinds": [ "arithSeq", "collatz" ],
      "bogusLoopIterations": "0",
      "trace": [],
      "doPrintComment": "false",
      "doOptimizeBody": "false",
      "doOptimizeTreeCode": "false",
      "doReentrant": "false",
      "selfModifyingIndirectBranches": "false",
      "instructionHandlerSplitCount": "0",
      "addOpaqueToVPC": "false",
      "addOpaqueToBogusFuns": "false",
      "shortIdents": "false",
      "dump": [],
      "performance": [ "PointerStack" ],
      "implicitFlow": [],
      "implicitFlowOptions": {
        "common": {
          "prefix": "",
          "verbosity": "None",
          "statistics": "None",
          "transformationKind": "Ident",
          "vlaTransformation": "alloca",
          "transformationNumber": "0"
        },
        "handlerCount": "1",
        "jitCount": "1",
        "jitFunctionBody": "(for (for (for (for (if (bb 2) (bb 2))))))",
        "kinds": [ "counter_int" ],
        "combiner": "*",
        "trainingKind": "gap",
        "time": "false",
        "trace": "false",
        "train": "false",
        "trainingTimesClock": "0",
        "trainingTimesThread": "0",
        "trainingMaxFailureRateClock": "5",
        "trainingMaxFailureRateThread": "1",
        "trainingMinGap": "80",
        "trainingData": "None",
        "trainingConfidenceLevel": "0.95",
        "trainingTargetErrorRate": "0.0001",
        "trainingParameterRange": [
          "(trivial_clock,(1,10000))", "(trivial_thread_1,(1,10000))",
          "(trivial_thread_2,(1,10000))", "(trivial_counter,(1,10000))",
          "(file_cache_time,(1,1024))", "(file_cache_thread_1,(1,1024))",
          "(file_cache_thread_2,(1,1024))",
          "(file_cache_thread_timer,(1,1024))", "(mem_cache_time,(2,64))",
          "(mem_cache_thread_1,(2,64))", "(mem_cache_thread_2,(2,64))",
          "(jit_time,(0,0))", "(jit_thread_1,(0,0))", "(jit_thread_2,(0,0))",
          "(jit_thread_timer,(0,0))", "(branchPrediction_time,(2,10))"
        ]
      },
      "conditionalKinds": [ "branch" ],
      "encodeByteArray": [],
      "obfuscateDecodeByteArray": "false",
      "structs": "None",
      "dynamicBytecode": "false",
      "dynamic": {
        "common": {
          "prefix": "",
          "verbosity": "None",
          "statistics": "None",
          "transformationKind": "Ident",
          "vlaTransformation": "alloca",
          "transformationNumber": "0"
        },
        "encoding": [ "hard" ],
        "block_fraction": "*",
        "codecs": [ "xor_transfer", "xtea" ],
        "keyTypes": [ "data", "code" ],
        "frequency": "1",
        "reEncode": "true",
        "optimize_binary": [
          "OMIT_FRAME_PTR", "OMIT_UNUSED_ASSIGNEMENTS", "JOIN_ADDMUL"
        ],
        "dump_opcodes": "0",
        "dump_tree": "false",
        "annotateTree": "false",
        "randomize_blocks": "false",
        "dump_intermediate": "false",
        "dump_cfg": "false",
        "implicitFlow": "false",
        "obfuscateHandle": "false",
        "obfuscateArguments": "false",
        "trace": "0",
        "traceExec": "false",
        "traceBlock": "false",
        "optimize": "true",
        "implicitFlowOptions": "None",
        "compileCommand": "gcc -std=c99 -o %o %i"
      }
    }
  },
  {
    "task": 4,
    "kind": "JitDynamic",
    "prefix": "",
    "seed": "",
    "funSpec": [ [ "id(fib)", "" ] ],
    "globalVarSpec": [],
    "localVarSpec": [],
    "exclude": [],
    "funs": [ "fib" ],
    "options": {
      "common": {
        "prefix": "",
        "verbosity": "None",
        "statistics": "None",
        "transformationKind": "Ident",
        "vlaTransformation": "alloca",
        "transformationNumber": "0"
      },
      "dynamic": {
        "common": {
          "prefix": "",
          "verbosity": "None",
          "statistics": "None",
          "transformationKind": "Ident",
          "vlaTransformation": "alloca",
          "transformationNumber": "0"
        },
        "encoding": [ "hard" ],
        "block_fraction": "%100",
        "codecs": [ "xtea" ],
        "keyTypes": [ "data", "code" ],
        "frequency": "1",
        "reEncode": "true",
        "optimize_binary": [
          "OMIT_FRAME_PTR", "OMIT_UNUSED_ASSIGNEMENTS", "JOIN_ADDMUL"
        ],
        "dump_opcodes": "0",
        "dump_tree": "false",
        "annotateTree": "false",
        "randomize_blocks": "false",
        "dump_intermediate": "false",
        "dump_cfg": "false",
        "implicitFlow": "false",
        "obfuscateHandle": "false",
        "obfuscateArguments": "false",
        "trace": "0",
        "traceExec": "false",
        "traceBlock": "false",
        "optimize": "true",
        "implicitFlowOptions": "None",
        "compileCommand": "gcc -std=c99 -o %o %i"
      },
      "jit": {
        "common": {
          "prefix": "",
          "verbosity": "None",
          "statistics": "None",
          "transformationKind": "Ident",
          "vlaTransformation": "alloca",
          "transformationNumber": "0"
        },
        "encoding": [ "hard" ],
        "frequency": "1",
        "optimize_binary": [
          "OMIT_FRAME_PTR", "OMIT_UNUSED_ASSIGNEMENTS", "JOIN_ADDMUL",
          "DEAD_CODE"
        ],
        "randomize_blocks": "false",
        "dump_opcodes": "0",
        "dump_tree": "false",
        "annotateTree": "false",
        "dump_intermediate": "false",
        "dump_cfg": "false",
        "obfuscateHandle": "false",
        "obfuscateArguments": "false",
        "trace": "0",
        "traceExec": "false",
        "implicitFlow": "false",
        "implicitFlowOptions": "None"
      }
    }
  },
  {
    "task": 5,
    "kind": "Measure",
    "prefix": "",
    "seed": "",
    "funSpec": [ [ "id(fib)", "" ] ],
    "globalVarSpec": [],
    "localVarSpec": [],
    "exclude": [],
    "funs": [ "fib" ],
    "options": {
      "common": {
        "prefix": "",
        "verbosity": "None",
        "statistics": "None",
        "transformationKind": "Ident",
        "vlaTransformation": "alloca",
        "transformationNumber": "0"
      },
      "kinds": [ "time" ],
      "times": "100"
    }
  }
]
END-OPTIONS
*/


/*
BEGIN-UNIVERSE
{
  "Not added to universe": [
    "__sync_fetch_and_xor_2", "__sync_nand_and_fetch_1",
    "__sync_and_and_fetch", "__sync_val_compare_and_swap_16",
    "__atomic_or_fetch", "__sync_sub_and_fetch_1", "__atomic_fetch_and",
    "__atomic_xor_fetch_16", "__atomic_fetch_nand_16",
    "__sync_add_and_fetch_4", "__sync_and_and_fetch_8",
    "__sync_fetch_and_add_2", "__sync_synchronize", "__sync_or_and_fetch",
    "__atomic_xor_fetch_8", "__atomic_xor_fetch_2", "__sync_fetch_and_and_8",
    "__atomic_store_16", "__atomic_fetch_and_8", "__sync_sub_and_fetch_2",
    "__atomic_and_fetch_2", "__atomic_fetch_add_8",
    "__c11_atomic_thread_fence", "__atomic_fetch_nand", "__atomic_store",
    "__atomic_add_fetch_2", "__sync_fetch_and_or_2", "__sync_sub_and_fetch",
    "__sync_fetch_and_add_1", "__sync_and_and_fetch_1",
    "__atomic_nand_fetch_16", "__sync_val_compare_and_swap_8",
    "__sync_xor_and_fetch_1", "__atomic_fetch_xor_8",
    "__sync_or_and_fetch_2", "__sync_fetch_and_sub_16",
    "__atomic_exchange_1", "__sync_fetch_and_and_2", "__sync_fetch_and_and",
    "__atomic_feraiseexcept", "__atomic_and_fetch_4", "__atomic_or_fetch_4",
    "__sync_xor_and_fetch_2", "__sync_swap_2", "__atomic_fetch_and_2",
    "__sync_val_compare_and_swap_4", "__sync_lock_release", "__sync_swap",
    "__atomic_fetch_nand_8", "__sync_fetch_and_add_4",
    "__atomic_fetch_nand_2", "__atomic_load_n", "__atomic_exchange_n",
    "__atomic_fetch_or_8", "__sync_lock_release_4", "__sync_fetch_and_max",
    "__atomic_fetch_or_4", "__atomic_load_2", "__atomic_fetch_sub_4",
    "__atomic_compare_exchange_1", "__sync_fetch_and_sub_2", "__atomic_load",
    "__atomic_or_fetch_16", "__atomic_add_fetch_16", "__sync_lock_release_1",
    "__atomic_fetch_add_16", "__sync_fetch_and_and_1",
    "__atomic_compare_exchange_2", "__sync_and_and_fetch_16",
    "__atomic_exchange", "__atomic_sub_fetch_2", "__atomic_fetch_xor_16",
    "__sync_xor_and_fetch_4", "__atomic_fetch_or_16", "__atomic_load_4",
    "__sync_fetch_and_sub_1", "__atomic_store_n", "__sync_fetch_and_sub_8",
    "__sync_fetch_and_or_16", "__sync_lock_test_and_set",
    "__atomic_fetch_and_16", "__sync_lock_test_and_set_2",
    "__atomic_nand_fetch", "__atomic_load_8", "__atomic_xor_fetch_4",
    "__atomic_fetch_sub_2", "__sync_fetch_and_xor_4",
    "__sync_fetch_and_or_1", "__atomic_store_8", "__sync_nand_and_fetch_4",
    "__atomic_or_fetch_2", "__atomic_fetch_xor", "__sync_add_and_fetch_8",
    "__atomic_fetch_xor_4", "__sync_bool_compare_and_swap",
    "__sync_fetch_and_xor_16", "__atomic_and_fetch_1",
    "__sync_lock_release_2", "__atomic_xor_fetch_1",
    "__sync_xor_and_fetch_8", "__warn_memset_zero_len",
    "__sync_fetch_and_xor_8", "__sync_fetch_and_sub", "__atomic_fetch_add_2",
    "__sync_swap_1", "__sync_fetch_and_xor_1", "__sync_fetch_and_add_16",
    "__sync_fetch_and_umin", "__atomic_fetch_sub", "__sync_fetch_and_nand_4",
    "__sync_add_and_fetch_2", "__c11_atomic_signal_fence",
    "__atomic_add_fetch_4", "__sync_fetch_and_min", "__sync_swap_8",
    "__sync_fetch_and_or", "__sync_sub_and_fetch_4",
    "__sync_lock_test_and_set_4", "__sync_or_and_fetch_8",
    "__sync_lock_release_16", "__sync_fetch_and_or_4",
    "__atomic_nand_fetch_8", "__atomic_sub_fetch_1", "__atomic_fetch_or",
    "__sync_fetch_and_nand_16", "__atomic_nand_fetch_4",
    "__sync_lock_release_8", "__sync_bool_compare_and_swap_1",
    "__atomic_sub_fetch_4", "__atomic_compare_exchange_n",
    "__sync_add_and_fetch", "__atomic_signal_fence", "__atomic_fetch_nand_1",
    "__atomic_and_fetch_16", "__sync_fetch_and_nand",
    "__atomic_thread_fence", "__sync_swap_4", "__atomic_test_and_set",
    "__sync_fetch_and_sub_4", "__atomic_exchange_16", "__xray_customevent",
    "__atomic_clear", "__atomic_fetch_xor_1", "__atomic_and_fetch",
    "__atomic_compare_exchange_4", "__sync_fetch_and_add_8",
    "__sync_or_and_fetch_16", "__sync_nand_and_fetch", "__atomic_load_16",
    "__atomic_always_lock_free", "__sync_xor_and_fetch",
    "__atomic_exchange_8", "__sync_xor_and_fetch_16", "__atomic_or_fetch_8",
    "__sync_add_and_fetch_1", "__sync_bool_compare_and_swap_2",
    "__atomic_or_fetch_1", "__sync_fetch_and_nand_8", "__atomic_fetch_add",
    "__atomic_nand_fetch_1", "__sync_bool_compare_and_swap_16",
    "__atomic_compare_exchange_16", "__atomic_fetch_or_1",
    "__atomic_fetch_add_1", "__c11_atomic_is_lock_free", "__xray_typedevent",
    "__sync_swap_16", "__atomic_fetch_sub_1", "__atomic_store_2",
    "__sync_sub_and_fetch_16", "__sync_fetch_and_nand_1",
    "__atomic_exchange_4", "__sync_fetch_and_nand_2",
    "__sync_nand_and_fetch_2", "__sync_fetch_and_xor",
    "__atomic_fetch_and_4", "__sync_or_and_fetch_1",
    "__atomic_compare_exchange", "__sync_or_and_fetch_4",
    "__sync_lock_test_and_set_16", "__atomic_load_1",
    "__sync_bool_compare_and_swap_8", "__atomic_fetch_xor_2",
    "__sync_val_compare_and_swap", "__atomic_store_4",
    "__atomic_fetch_and_1", "__atomic_fetch_nand_4",
    "__sync_sub_and_fetch_8", "__atomic_sub_fetch_8",
    "__atomic_fetch_sub_16", "__sync_bool_compare_and_swap_4",
    "__sync_val_compare_and_swap_2", "__sync_and_and_fetch_4",
    "__sync_lock_test_and_set_8", "__atomic_exchange_2",
    "__sync_fetch_and_or_8", "__sync_nand_and_fetch_16",
    "__atomic_fetch_add_4", "__atomic_nand_fetch_2", "__atomic_sub_fetch",
    "__sync_lock_test_and_set_1", "__atomic_compare_exchange_8",
    "__atomic_add_fetch", "__atomic_xor_fetch", "__sync_fetch_and_add",
    "__sync_and_and_fetch_2", "__atomic_add_fetch_1", "__atomic_add_fetch_8",
    "__sync_fetch_and_and_4", "__atomic_fetch_sub_8",
    "__sync_fetch_and_and_16", "__sync_val_compare_and_swap_1",
    "__atomic_store_1", "__atomic_fetch_or_2", "__atomic_sub_fetch_16",
    "__sync_add_and_fetch_16", "__sync_nand_and_fetch_8",
    "__atomic_is_lock_free", "__sync_fetch_and_umax", "__atomic_and_fetch_8",
    "jit_init", "jit_add_op", "jit_add_fop", "jit_debug_info_new",
    "jit_generate_code", "jit_free", "jit_dump_ops", "jit_check_code",
    "jit_trace", "jit_enable_optimization", "jit_disable_optimization",
    "jit_add_prolog", "jit_get_label", "jit_allocai",
    "jit_regs_active_count", "jit_regs_active", "jit_patch_external_calls",
    "jit_patch_local_addrs", "jit_expand_patches_and_labels",
    "jit_prepare_reg_counts", "jit_prepare_arguments",
    "jit_collect_statistics", "jit_optimize_st_ops",
    "jit_optimize_join_addmul", "jit_optimize_join_addimm",
    "jit_optimize_frame_ptr", "jit_optimize_unused_assignments",
    "jit_trace_callback", "jit_init_arg_params", "jit_assign_regs",
    "jit_reg_allocator_create", "jit_reg_allocator_free", "jit_gen_op",
    "jit_reg_in_use", "jit_get_unused_reg", "jit_get_unused_reg_with_index",
    "rmap_free", "jit_allocator_hints_free", "is_spilled",
    "emit_push_callee_saved_regs", "emit_push_caller_saved_regs",
    "emit_pop_callee_saved_regs", "emit_pop_caller_saved_regs",
    "emit_save_all_regs", "emit_restore_all_regs", "rmap_is_associated",
    "rmap_get", "emit_sse_round", "emit_sse_round", "jit_arg_layout_add",
    "unload_reg", "load_reg", "print_op", "jit_get_reg_name",
    "hints_refcount_inc"
  ],
  "Transformations": [
    {
      "TransformationNumber": 200,
      "TransformationKind": "PlatformFixes",
      "TransformationUpdates": {}
    },
    {
      "TransformationNumber": 5,
      "TransformationKind": "Measure",
      "TransformationUpdates": {
        "Modified Function Implementations": [ "fib" ]
      }
    },
    {
      "TransformationNumber": 4,
      "TransformationKind": "JitDynamic",
      "TransformationUpdates": {
        "Modified Function Implementations": [ "fib" ],
        "New Functions": [
          "_cipher$_xtea_encipherBlock", "_cipher$_xtea_encipher",
          "_cipher$_xtea_decipherBlock", "_cipher$_xtea_decipher"
        ],
        "New Global Variables": {
          "_TIG_JD_HQIz_4_fib___t": "INIT",
          "_TIG_JD_HQIz_4_fib_freq": "INIT"
        }
      }
    },
    {
      "TransformationNumber": 3,
      "TransformationKind": "Virtualize",
      "TransformationUpdates": {
        "Modified Function Implementations": [ "fib" ],
        "New Global Variables": { "_TIG_VZ_HQIz_3_fib_$strings": "INIT" },
        "New Types": [ "_TIG_VZ_HQIz_3_fib_$node" ]
      }
    },
    {
      "TransformationNumber": 2,
      "TransformationKind": "InitOpaque",
      "TransformationUpdates": {
        "Modified Function Implementations": [ "init_tigress" ],
        "New Global Variables": {
          "_TIG_iO_HQIz_2_init_tigress_1__opaque_array": "INIT",
          "_TIG_iO_HQIz_2_init_tigress_1_opaque_ptr_2": "INIT",
          "_TIG_iO_HQIz_2_init_tigress_1_opaque_list_2": "INIT",
          "_TIG_iO_HQIz_2_init_tigress_1_opaque_ptr_1": "INIT",
          "_TIG_iO_HQIz_2_init_tigress_1_opaque_list_1": "INIT"
        },
        "New Types": [
          "_TIG_iO_HQIz_2_init_tigress_1_opaqueStructureType",
          "_TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct"
        ]
      }
    },
    {
      "TransformationNumber": 1,
      "TransformationKind": "InitEntropy",
      "TransformationUpdates": {
        "New Global Variables": {
          "_TIG_iE_HQIz_1_alwaysZero": "INIT",
          "_TIG_iE_HQIz_1_entropy": "INIT"
        }
      }
    },
    {
      "TransformationNumber": 0,
      "TransformationKind": "Initialize",
      "TransformationUpdates": {
        "Modified Function Implementations": [ "main" ],
        "New Global Variables": {
          "_TIG_IZ_HQIz_envp": "FUN: '_TIG_IZ_HQIz_envp__INIT'",
          "_TIG_IZ_HQIz_argv": "FUN: '_TIG_IZ_HQIz_argv__INIT'",
          "_TIG_IZ_HQIz_argc": "FUN: '_TIG_IZ_HQIz_argc__INIT'"
        }
      }
    },
    {
      "TransformationNumber": -1,
      "TransformationKind": "Initialize",
      "TransformationUpdates": {
        "New Functions": [
          "main", "fib", "fac", "init_tigress", "jit_messager",
          "jit_message", "jit_regs_active", "jit_regs_active_count",
          "jit_free", "jit_disable_optimization", "jit_enable_optimization",
          "free_labels", "free_ops", "jit_trace", "jit_generate_code",
          "jit_buf_expand", "jit_prepare_spills_on_jmpr_targets",
          "jit_prepare_arguments", "jit_prepare_reg_counts",
          "jit_expand_patches_and_labels", "jit_correct_float_imms",
          "jit_correct_long_imms", "jit_imm_overflow", "jit_get_label",
          "jit_add_prolog", "jit_init", "jit_debug_info_new", "jit_add_fop",
          "jit_add_op", "jit_get_unused_reg",
          "jit_get_unused_reg_with_index", "jit_reg_in_use",
          "jit_reg_allocator_free", "jit_assign_regs", "branch_adjustment",
          "jump_adjustment", "jit_allocator_hints_free",
          "hints_refcount_inc", "jit_collect_statistics",
          "mark_calleesaved_regs", "assign_regs", "associate_register",
          "is_transfer_op", "associate_register_alias", "force_assoc",
          "force_spill", "spill_all_registers", "assign_call", "assign_jmp",
          "spill_ret_retreg", "assign_getarg", "assign_ret_reg",
          "prepare_registers_for_call", "assign_regs_for_args",
          "make_free_reg", "rename_reg", "load_reg", "sync_reg",
          "unload_reg", "insert_reg_op", "jit_check_code",
          "check_code_references", "check_data_references",
          "check_data_alignment", "jit_op_is_data_op",
          "check_register_types", "check_argument_sizes", "valid_fsize",
          "valid_size", "check_uninitialized_registers", "print_regs",
          "check_op_without_effect", "check_missing_patches",
          "check_dead_code", "cleanup", "append_msg", "report_warning",
          "jit_trace_callback", "jit_trace_op", "jit_dump_ops",
          "jit_dump_ops_combined", "print_combined_op", "open_disasm",
          "print_op_bytes", "platform_id", "jit_dump_ops_general",
          "jit_dump_ops_compilable", "print_op_compilable", "print_op",
          "print_comment", "print_load_op", "print_full_op_name",
          "print_args", "print_str", "print_arg", "print_addr",
          "prepare_labels", "jit_op_is_cflow", "print_reg_liveness_callback",
          "print_rmap_callback", "jit_get_reg_name", "jit_get_op_name",
          "compiler_based_debugger", "ob_pad", "ob_append", "ob_printf",
          "ob_assert_space", "ob_free", "ob_new", "jit_dead_code_analysis",
          "mark_livecode", "jit_flw_analysis", "analyze_function",
          "flw_analyze_op", "initialize_code_refs", "flw_analyze_prolog",
          "jit_flw_initialize", "jit_gen_op", "jit_patch_local_addrs",
          "jit_allocai", "emit_memset", "emit_memcpy", "emit_transfer_op",
          "emit_transfer_loop", "emit_transfer_init", "emit_ldx_op",
          "emit_ld_op", "is_spilled", "emit_branch_overflow_op",
          "emit_branch_mask_op", "emit_branch_op", "emit_cond_op",
          "emit_shift_op", "emit_div_op", "emit_mul_op", "emit_rsb_op",
          "emit_subx_op", "emit_sub_op", "emit_alu_op", "emit_get_arg",
          "emit_get_arg_from_stack", "emit_ureg", "emit_lreg",
          "emit_restore_all_regs", "emit_save_all_regs",
          "required_stack_space_for_regs", "is_active_register",
          "emit_pop_caller_saved_regs", "emit_push_caller_saved_regs",
          "emit_pop_callee_saved_regs", "emit_push_callee_saved_regs",
          "list_caller_saved_regs", "list_callee_saved_regs", "emit_pop_reg",
          "emit_push_reg", "jit_reg_allocator_create",
          "jit_patch_external_calls", "emit_fretval_op", "emit_fret_op",
          "emit_trace_op", "emit_msg_op", "emit_prolog_op", "emit_funcall",
          "emit_arguments", "emit_fppush_arg", "emit_push_arg",
          "emit_set_fparg", "emit_set_arg", "jit_optimize_join_addimm",
          "join_addi_addr", "join_addr_addi", "jit_optimize_join_addmul",
          "join_muli_addr", "join_muli_ori", "join_muli_addi",
          "make_addmuli", "is_suitable_mul", "pow2", "shift_index",
          "join_2ops", "get_related_op", "make_nop",
          "jit_optimize_unused_assignments", "jit_optimize_frame_ptr",
          "jit_optimize_st_ops", "rmap_free", "rmap_spill_candidate",
          "candidate_score", "rmap_sync", "rmap_sync_aux", "rmap_equal",
          "rmap_subset", "rmap_clone", "rmap_unassoc", "rmap_assoc",
          "rmap_is_associated", "rmap_is_associated_aux", "rmap_get",
          "rmap_init", "stack_reg_pos", "jit_init_arg_params",
          "stack_fparg_pos", "stack_arg_pos", "get_frame_size",
          "jit_arg_layout_add", "jit_arg_layout_create_input",
          "jit_arg_layout_create", "emit_sse_fstx_op", "emit_sse_fldx_op",
          "emit_sse_fld_op", "emit_sse_fst_op", "emit_sse_floor",
          "emit_sse_round", "emit_sse_branch", "emit_sse_neg_op",
          "emit_sse_div_op", "emit_sse_sub_op", "emit_sse_change_sign",
          "emit_sse_alu_op", "emit_sse_get_sign_mask",
          "sse_alu_sd_reg_safeimm", "sse_alu_pd_reg_safeimm",
          "sse_mov_reg_safeimm", "uses_hw_reg", "_bit_pop",
          "jit_value_align", "jit_op_is_cond_branch", "funcall_fput_arg",
          "funcall_put_arg", "funcall_prepare_optional", "funcall_prepare",
          "jit_current_func_info", "jit_is_label", "jit_op_delete",
          "jit_free_op", "jit_op_last_fun", "jit_op_last", "jit_op_first",
          "jit_op_prepend", "jit_op_append", "jit_op_new",
          "jit_set_to_array", "copy_reg_to_array", "jit_set_size",
          "jit_set_equal", "jit_set_remove", "jit_set_add", "jit_set_get",
          "jit_set_addall", "jit_set_free", "jit_set_clone", "jit_set_new",
          "jit_tree_size", "jit_tree_equal", "jit_tree_subset",
          "jit_tree_free", "jit_print_tree", "jit_tree_walk",
          "jit_tree_clone", "jit_tree_addall", "jit_tree_delete",
          "delete_node", "delete_min", "node_min", "move_red_right",
          "move_red_left", "jit_tree_search", "jit_tree_insert",
          "node_insert", "node_new", "fixup", "color_flip", "rotate_right",
          "rotate_left", "is_red", "jit_exec_mem_seal", "jit_exec_mem_free",
          "jit_exec_addr", "jit_exec_mem_new", "jit_data_bytes",
          "jit_proc_value", "isspecial", "isrune", "isphonogram", "isnumber",
          "isideogram", "ishexnumber", "digittoint", "toupper", "tolower",
          "toascii", "isxdigit", "isupper", "isspace", "ispunct", "isprint",
          "islower", "isgraph", "isdigit", "iscntrl", "isblank", "isalpha",
          "isalnum", "__wcwidth", "__isctype", "__istype", "isascii",
          "__darwin_fd_clr", "__darwin_fd_set", "__darwin_fd_isset",
          "__darwin_check_fd_set", "_OSSwapInt64", "_OSSwapInt32",
          "_OSSwapInt16", "__sputc"
        ],
        "New Global Variables": {
          "jit_debugging_disasm": "FUN: 'jit_debugging_disasm__INIT'",
          "jit_disasm_compilable": "FUN: 'jit_disasm_compilable__INIT'",
          "jit_disasm_general": "FUN: 'jit_disasm_general__INIT'",
          "x05": "FUN: 'x05__INIT'",
          "x0": "FUN: 'x0__INIT'",
          "bufx": "FUN: 'bufx__INIT'",
          "x86_cc_signed_map": "FUN: 'x86_cc_signed_map__INIT'",
          "x86_cc_unsigned_map": "FUN: 'x86_cc_unsigned_map__INIT'"
        },
        "New Externs": [
          "__builtin_catanhf", "__builtin_rotateright8",
          "__builtin_fdimf128", "__builtin_log1pf", "__builtin_isless",
          "__builtin_snprintf", "__builtin_fmaxf", "__builtin_ia32_unpckhps",
          "__builtin_acos", "__builtin_ssubl_overflow",
          "__builtin___sprintf_chk", "__builtin_lgammaf",
          "__builtin_assume_aligned", "__builtin_stpncpy",
          "__builtin_signbitl", "__builtin_lround", "__builtin_rotateleft32",
          "__builtin_rindex", "__builtin_ilogbf128", "__builtin_subc",
          "__builtin_tanhf", "__builtin_copysignf16", "__builtin_mempcpy",
          "__builtin_subcs", "__builtin_strrchr", "__builtin_fprintf",
          "__builtin_ctanhl", "__builtin_sub_overflow",
          "__builtin_acoshf128", "__builtin_cpowf", "__builtin_sqrtl",
          "__builtin_parity", "__builtin_cosl", "__builtin_remainderf",
          "__builtin_char_memchr", "__builtin_acosl", "__builtin_log2l",
          "__builtin_conjl", "__builtin_clz", "__builtin_add_overflow",
          "__builtin_log10", "__builtin___strcat_chk", "__builtin_cprojl",
          "__builtin_copysignf", "__builtin_modff", "__builtin_realloc",
          "__builtin_logf16", "__builtin_expm1f128", "__builtin_nanf128",
          "__builtin_cacoshl", "__builtin_frexp", "__builtin_acosf",
          "__builtin_sinhl", "__builtin___stpcpy_chk",
          "__builtin_is_aligned", "__builtin_dwarf_cfa", "__builtin_casinhl",
          "__builtin_nexttowardl", "__builtin_va_start", "__builtin_scalbln",
          "__builtin_bswap16", "__builtin_wcslen", "__builtin_log10f16",
          "__builtin_init_dwarf_reg_size_table", "__builtin_ctz",
          "__builtin_strpbrk", "__builtin_strcpy", "__builtin_next_arg",
          "__builtin_sinf16", "__builtin_umull_overflow",
          "__builtin_scalbnf128", "__builtin_log10f", "__builtin_fmodf16",
          "__builtin_csinh", "__builtin_floorf",
          "__builtin_matrix_transpose", "__builtin___get_unsafe_stack_top",
          "__builtin_log2f", "__builtin_wmemchr", "__builtin_ia32_subps",
          "__builtin_scalblnf", "__builtin_fmal", "__builtin_parityll",
          "__builtin_va_end", "__builtin_bzero", "__builtin_strncmp",
          "__builtin_fminl", "__builtin_ssubll_overflow",
          "__builtin_sqrtf16", "__builtin_smull_overflow",
          "__builtin___vsprintf_chk", "__builtin_nansf128",
          "__builtin_lgammal", "__builtin_nans", "__builtin_ceilf16",
          "__builtin_exp", "__builtin_acosf128", "__builtin_rintf16",
          "__builtin_wmemcmp", "__builtin_round", "__builtin_hypot",
          "__builtin_subcb", "__builtin___strlcpy_chk", "__builtin_csqrt",
          "__builtin_powif", "__builtin_log10l", "__builtin_log10f128",
          "__builtin_erff128", "__builtin_addcl", "__builtin_return_address",
          "__builtin_fabsf", "__builtin_ctanh", "__builtin_ctan",
          "__builtin_cbrtf128", "__builtin_atanhf", "__builtin_free",
          "__builtin_object_size", "__builtin_va_arg_pack_len",
          "__builtin_tanl", "__builtin_shufflevector", "__builtin_csinhl",
          "__builtin_stpcpy", "__builtin_eh_return_data_regno",
          "__builtin_cexpl", "__builtin_sinl", "__builtin_uaddll_overflow",
          "__builtin_rotateleft16", "__builtin_powf16",
          "__builtin_convertvector", "__builtin_sinhf", "__builtin_hypotl",
          "__builtin_bswap64", "__builtin_objc_memmove_collectable",
          "__builtin_ia32_mulps", "__builtin_tan", "__builtin_llabs",
          "__builtin_inff", "__builtin_umul_overflow", "__builtin_fmax",
          "__builtin_erf", "__builtin_clzl", "__builtin_cosf16",
          "__builtin_tgammal", "__builtin_atan", "__builtin___fprintf_chk",
          "__builtin_wmemcpy", "__builtin_llrintf128", "__builtin_casin",
          "__builtin_logbf128", "__builtin_ctanf", "__builtin_ffsll",
          "__builtin_logf128", "__builtin_index", "__builtin_ccosl",
          "__builtin_abort", "__builtin_powi", "__builtin_canonicalize",
          "__builtin_strchr", "__builtin_logb", "__builtin_expf128",
          "__builtin_cimagf", "__builtin_creall", "__builtin_atanh",
          "__builtin_frexpl", "__builtin_exp2f128", "__builtin_csinf",
          "__builtin_creal", "__builtin_logl", "__builtin_remquo",
          "__builtin_fmaxl", "__builtin_prefetch", "__builtin_nansl",
          "__builtin_erfc", "__builtin_ccoshl", "__builtin_tanh",
          "__builtin_scalblnf128", "__builtin_unreachable",
          "__builtin_calloc", "__builtin_copysignl", "__builtin_llrint",
          "__builtin_ceil", "__builtin_usub_overflow",
          "__builtin_os_log_format", "__builtin_cproj", "__builtin_powil",
          "__builtin_expl", "__builtin_memchr", "__builtin_copysign",
          "__builtin_addcb", "__builtin_logf", "__builtin_operator_delete",
          "__builtin_isunordered", "__builtin_casinf",
          "__builtin_os_log_format_buffer_size", "__builtin_memmove",
          "__builtin_fmaf", "__builtin_debugtrap",
          "__builtin_dynamic_object_size", "__builtin_ffs",
          "__builtin_usubl_overflow", "__builtin_addcs", "__builtin_cargl",
          "__builtin_tgammaf128", "__builtin_launder",
          "__builtin___memcpy_chk", "__builtin_cpowl",
          "__builtin_remainderf128", "__builtin_ssub_overflow",
          "__builtin_tgamma", "__builtin_matrix_column_major_store",
          "__builtin_strspn", "__builtin_conj", "__builtin_cprojf",
          "__builtin_canonicalizef", "__builtin_lrintl", "__builtin_fmaxf16",
          "__builtin_nan", "__builtin_strstr", "__builtin_expm1f",
          "__builtin___get_unsafe_stack_bottom", "__builtin_isnormal",
          "__builtin_atanl", "__builtin_wcsncmp", "__builtin_huge_valf128",
          "__builtin_clzll", "__builtin_cbrt", "__builtin_huge_valf",
          "__builtin_uadd_overflow", "__builtin_copysignf128",
          "__builtin_truncl", "__builtin___stpncpy_chk", "__builtin_roundf",
          "__builtin_cimag", "__builtin___vsnprintf_chk", "__builtin_scalbn",
          "__builtin_lgammaf128", "__builtin_nanf", "__builtin_roundl",
          "__builtin_remainderl", "__builtin_saddl_overflow",
          "__builtin_ceilf128", "__builtin_signbitf", "__builtin_tgmath",
          "__builtin_ceill", "__builtin_smul_overflow", "__builtin_cabsl",
          "__builtin_fmin", "__builtin_floor", "__builtin_scalblnl",
          "__builtin_atan2f", "__builtin_cacosh", "__builtin___strlcat_chk",
          "__builtin_sinh", "__builtin_ilogbf", "__builtin_catanl",
          "__builtin_clzs", "__builtin_remquof", "__builtin_logbf",
          "__builtin_fma", "__builtin_asinhf128", "__builtin_infl",
          "__builtin_fminf128", "__builtin_bitreverse64",
          "__builtin_vsprintf", "__builtin_remquof128",
          "__builtin_atanhf128", "__builtin___get_unsafe_stack_ptr",
          "__builtin_signbit", "__builtin_lroundf", "__builtin_islessequal",
          "__builtin_exp2l", "__builtin_frame_address",
          "__builtin_nexttowardf128", "__builtin_isinf_sign",
          "__builtin_inff128", "__builtin_va_copy", "__builtin_erfcl",
          "__builtin_cacosf", "__builtin_frob_return_address",
          "__builtin_vsnprintf", "__builtin_sadd_overflow",
          "__builtin_tanf128", "__builtin_rotateleft64",
          "__builtin_matrix_column_major_load", "__builtin_popcountll",
          "__builtin_nearbyintf", "__builtin_atanf", "__builtin_rint",
          "__builtin_ia32_addps", "__builtin_rotateright64",
          "__builtin_readcyclecounter", "__builtin_llroundf",
          "__builtin_strcspn", "__builtin_asinf", "__builtin_lrint",
          "__builtin_erff", "__builtin_ia32_maxps", "__builtin_bcmp",
          "__builtin_asinf128", "__builtin_rotateleft8",
          "__builtin_nextafterf128", "__builtin_cosh", "__builtin_tgammaf",
          "__builtin_operator_new", "__builtin_crealf", "__builtin_longjmp",
          "__builtin_nextafterf", "__builtin_mul_overflow",
          "__builtin_coshl", "__builtin_ilogb", "__builtin_cosf",
          "__builtin_strndup", "__builtin_cpow", "__builtin___mempcpy_chk",
          "__builtin_llrintf", "__builtin_hypotf128", "__builtin_complex",
          "__builtin_remainder", "__builtin_preserve_access_index",
          "__builtin_fmaf128", "__builtin_acosh", "__builtin_sin",
          "__builtin_llround", "__builtin_fabs", "__builtin_trunc",
          "__builtin_fmaxf128", "__builtin_ccosf", "__builtin_acoshl",
          "__builtin___clear_cache", "__builtin_strncasecmp",
          "__builtin_fdiml", "__builtin_sinhf128", "__builtin_isnan",
          "__builtin_fdim", "__builtin_isgreaterequal",
          "__builtin_nexttowardf", "__builtin_fminf16", "__builtin_sqrt",
          "__builtin_umulll_overflow", "__builtin_floorf16",
          "__builtin_casinh", "__builtin_llrintl", "__builtin_expm1",
          "__builtin_exp2f", "__builtin_fabsl", "__builtin_setjmp",
          "__builtin_nearbyintl", "__builtin_nearbyintf128",
          "__builtin_lrintf", "__builtin_floorl", "__builtin_carg",
          "__builtin_csin", "__builtin_clogl",
          "__builtin_expect_with_probability", "__builtin_erfl",
          "__builtin_asinhl", "__builtin_memcpy", "__builtin_islessgreater",
          "__builtin_ctanhf", "__builtin_wcscmp", "__builtin_bitreverse16",
          "__builtin_classify_type", "__builtin_cacos", "__builtin_lroundl",
          "__builtin_printf", "__builtin_sqrtf", "__builtin_assume",
          "__builtin_rintf", "__builtin_powf", "__builtin_powl",
          "__builtin_cimagl", "__builtin_addcll",
          "__builtin_canonicalizef16", "__builtin___memccpy_chk",
          "__builtin_truncf128", "__builtin_nextafter", "__builtin_strdup",
          "__builtin_fabsf16", "__builtin_strcmp", "__builtin_atanf128",
          "__builtin_ldexpf", "__builtin_truncf16",
          "__builtin___memmove_chk", "__builtin_modff128",
          "__builtin_isfinite", "__builtin_conjf", "__builtin_roundf128",
          "__builtin_powf128", "__builtin_ctzs", "__builtin_roundf16",
          "__builtin_log1pf128", "__builtin_rotateright16",
          "__builtin_alloca", "__builtin_ldexpf128", "__builtin_cbrtl",
          "__builtin_csinhf", "__builtin_log2", "__builtin_modfl",
          "__builtin_ccos", "__builtin_casinhf", "__builtin_asin",
          "__builtin_erfcf128", "__builtin_clrsbll", "__builtin_ctzl",
          "__builtin_tanhl", "__builtin_saddll_overflow", "__builtin_labs",
          "__builtin_cabsf", "__builtin_rintf128", "__builtin_fdimf",
          "__builtin_alloca_with_align", "__builtin_wmemmove",
          "__builtin_strncpy", "__builtin_eh_return",
          "__builtin___memset_chk", "__builtin_scalbnf",
          "__builtin_fpclassify", "__builtin_huge_val", "__builtin_frexpf",
          "__builtin_wcschr", "__builtin_truncf", "__builtin_canonicalizel",
          "__builtin_fmodl", "__builtin_isinf", "__builtin_strcat",
          "__builtin_ilogbl", "__builtin_bitreverse32", "__builtin_ceilf",
          "__builtin_dump_struct", "__builtin_return", "__builtin_asinl",
          "__builtin_frexpf128", "__builtin_bitreverse8",
          "__builtin_va_arg_pack", "__builtin___strncpy_chk",
          "__builtin_nontemporal_store", "__builtin_lrintf128",
          "__builtin_malloc", "__builtin_atanhl", "__builtin_uaddl_overflow",
          "__builtin___strncat_chk", "__builtin_flt_rounds",
          "__builtin_huge_vall", "__builtin_ffsl", "__builtin___vprintf_chk",
          "__builtin_rintl", "__builtin_erfcf", "__builtin_ia32_unpcklps",
          "__builtin_strncat", "__builtin_ctzll", "__builtin_stdarg_start",
          "__builtin_nontemporal_load", "__builtin_cbrtf", "__builtin_catan",
          "__builtin_nexttoward", "__builtin_tanf",
          "__builtin_rotateright32", "__builtin_exp2", "__builtin_log1p",
          "__builtin_catanf", "__builtin_va_arg", "__builtin_expect",
          "__builtin_subcl", "__builtin___printf_chk", "__builtin_subcll",
          "__builtin___vfprintf_chk", "__builtin_fmod",
          "__builtin_call_with_static_chain", "__builtin_align_up",
          "__builtin_lgamma", "__builtin_ccosh", "__builtin_sqrtf128",
          "__builtin_ldexpl", "__builtin_usubll_overflow",
          "__builtin_sprintf", "__builtin_nearbyint", "__builtin_apply",
          "__builtin_sinf", "__builtin_logbl", "__builtin_log1pl",
          "__builtin_asinh", "__builtin_constant_p",
          "__builtin_memcpy_inline", "__builtin_fminf", "__builtin_llroundl",
          "__builtin_csinl", "__builtin_log", "__builtin_expf",
          "__builtin_exp2f16", "__builtin_types_compatible_p",
          "__builtin_atan2l", "__builtin_apply_args", "__builtin_clrsb",
          "__builtin_catanhl", "__builtin___get_unsafe_stack_start",
          "__builtin_llroundf128", "__builtin_ctanl", "__builtin_abs",
          "__builtin_log2f128", "__builtin_clogf", "__builtin_strlen",
          "__builtin_inf", "__builtin_cosf128", "__builtin_remquol",
          "__builtin_fmaf16", "__builtin_coshf128", "__builtin_cargf",
          "__builtin_acoshf", "__builtin_cacoshf", "__builtin_trap",
          "__builtin_smulll_overflow", "__builtin_parityl",
          "__builtin_cacosl", "__builtin_log2f16", "__builtin_annotation",
          "__builtin_clog", "__builtin_varargs_start", "__builtin_fabsf128",
          "__builtin_cexpf", "__builtin_unwind_init", "__builtin_isgreater",
          "__builtin___snprintf_chk", "__builtin_cabs", "__builtin_expm1l",
          "__builtin_coshf", "__builtin_casinl", "__builtin_nansf",
          "__builtin_strcasecmp", "__builtin_hypotf", "__builtin_nextafterl",
          "__builtin_lroundf128", "__builtin_csqrtf", "__builtin_catanh",
          "__builtin_align_down", "__builtin_scalbnl", "__builtin_csqrtl",
          "__builtin_sinf128", "__builtin_atan2", "__builtin_popcountl",
          "__builtin___strcpy_chk", "__builtin_atan2f128",
          "__builtin_thread_pointer", "__builtin_addc", "__builtin_cos",
          "__builtin_cexp", "__builtin_memset", "__builtin_nanl",
          "__builtin_popcount", "__builtin_tanhf128", "__builtin_expf16",
          "__builtin_dwarf_sp_column", "__builtin_bcopy", "__builtin_memcmp",
          "__builtin_ccoshf", "__builtin_clrsbl", "__builtin_asinhf",
          "__builtin_floorf128", "__builtin_extend_pointer",
          "__builtin_extract_return_addr", "__builtin_bswap32",
          "__builtin_ldexp", "__builtin_unpredictable", "__builtin_fmodf",
          "__builtin_fmodf128", "renameat", "renamex_np", "renameatx_np",
          "__stdinp", "__stdoutp", "__stderrp", "clearerr", "fclose", "feof",
          "ferror", "fflush", "fgetc", "fgetpos", "fgets", "fopen",
          "fprintf", "fputc", "fputs", "fread", "freopen", "fscanf", "fseek",
          "fsetpos", "ftell", "fwrite", "getc", "getchar", "gets", "perror",
          "printf", "putc", "putchar", "puts", "remove", "rename", "rewind",
          "scanf", "setbuf", "setvbuf", "sprintf", "sscanf", "tmpfile",
          "tmpnam", "ungetc", "vfprintf", "vprintf", "vsprintf", "ctermid",
          "fdopen", "fileno", "pclose", "popen", "__srget", "__svfscanf",
          "__swbuf", "flockfile", "ftrylockfile", "funlockfile",
          "getc_unlocked", "getchar_unlocked", "putc_unlocked",
          "putchar_unlocked", "getw", "putw", "tempnam", "fseeko", "ftello",
          "snprintf", "vfscanf", "vscanf", "vsnprintf", "vsscanf", "dprintf",
          "vdprintf", "getdelim", "getline", "fmemopen", "open_memstream",
          "sys_nerr", "sys_errlist", "asprintf", "ctermid_r", "fgetln",
          "fmtcheck", "fpurge", "setbuffer", "setlinebuf", "vasprintf",
          "zopen", "funopen", "__sprintf_chk", "__snprintf_chk",
          "__vsprintf_chk", "__vsnprintf_chk", "signal", "getpriority",
          "getiopolicy_np", "getrlimit", "getrusage", "setpriority",
          "setiopolicy_np", "setrlimit", "wait", "waitpid", "waitid",
          "wait3", "wait4", "alloca", "__mb_cur_max", "malloc", "calloc",
          "free", "realloc", "valloc", "aligned_alloc", "posix_memalign",
          "abort", "abs", "atexit", "atof", "atoi", "atol", "atoll",
          "bsearch", "div", "exit", "getenv", "labs", "ldiv", "llabs",
          "lldiv", "mblen", "mbstowcs", "mbtowc", "qsort", "rand", "srand",
          "strtod", "strtof", "strtol", "strtold", "strtoll", "strtoul",
          "strtoull", "system", "wcstombs", "wctomb", "_Exit", "a64l",
          "drand48", "ecvt", "erand48", "fcvt", "gcvt", "getsubopt",
          "grantpt", "initstate", "jrand48", "l64a", "lcong48", "lrand48",
          "mktemp", "mkstemp", "mrand48", "nrand48", "posix_openpt",
          "ptsname", "ptsname_r", "putenv", "random", "rand_r", "realpath",
          "seed48", "setenv", "setkey", "setstate", "srand48", "srandom",
          "unlockpt", "unsetenv", "arc4random", "arc4random_addrandom",
          "arc4random_buf", "arc4random_stir", "arc4random_uniform",
          "cgetcap", "cgetclose", "cgetent", "cgetfirst", "cgetmatch",
          "cgetnext", "cgetnum", "cgetset", "cgetstr", "cgetustr", "daemon",
          "devname", "devname_r", "getbsize", "getloadavg", "getprogname",
          "setprogname", "heapsort", "mergesort", "psort", "psort_r",
          "qsort_r", "radixsort", "rpmatch", "sradixsort", "sranddev",
          "srandomdev", "reallocf", "strtoq", "strtouq", "suboptarg",
          "tzname", "getdate_err", "timezone", "daylight", "asctime",
          "clock", "ctime", "difftime", "getdate", "gmtime", "localtime",
          "mktime", "strftime", "strptime", "time", "tzset", "asctime_r",
          "ctime_r", "gmtime_r", "localtime_r", "posix2time", "tzsetwall",
          "time2posix", "timelocal", "timegm", "nanosleep", "clock_getres",
          "clock_gettime", "clock_gettime_nsec_np", "clock_settime",
          "timespec_get", "sched_yield", "sched_get_priority_min",
          "sched_get_priority_max", "qos_class_self", "qos_class_main",
          "pthread_attr_set_qos_class_np", "pthread_attr_get_qos_class_np",
          "pthread_set_qos_class_self_np", "pthread_get_qos_class_np",
          "pthread_override_qos_class_start_np",
          "pthread_override_qos_class_end_np", "pthread_atfork",
          "pthread_attr_destroy", "pthread_attr_getdetachstate",
          "pthread_attr_getguardsize", "pthread_attr_getinheritsched",
          "pthread_attr_getschedparam", "pthread_attr_getschedpolicy",
          "pthread_attr_getscope", "pthread_attr_getstack",
          "pthread_attr_getstackaddr", "pthread_attr_getstacksize",
          "pthread_attr_init", "pthread_attr_setdetachstate",
          "pthread_attr_setguardsize", "pthread_attr_setinheritsched",
          "pthread_attr_setschedparam", "pthread_attr_setschedpolicy",
          "pthread_attr_setscope", "pthread_attr_setstack",
          "pthread_attr_setstackaddr", "pthread_attr_setstacksize",
          "pthread_cancel", "pthread_cond_broadcast", "pthread_cond_destroy",
          "pthread_cond_init", "pthread_cond_signal",
          "pthread_cond_timedwait", "pthread_cond_wait",
          "pthread_condattr_destroy", "pthread_condattr_init",
          "pthread_condattr_getpshared", "pthread_condattr_setpshared",
          "pthread_create", "pthread_detach", "pthread_equal",
          "pthread_exit", "pthread_getconcurrency", "pthread_getschedparam",
          "pthread_getspecific", "pthread_join", "pthread_key_create",
          "pthread_key_delete", "pthread_mutex_destroy",
          "pthread_mutex_getprioceiling", "pthread_mutex_init",
          "pthread_mutex_lock", "pthread_mutex_setprioceiling",
          "pthread_mutex_trylock", "pthread_mutex_unlock",
          "pthread_mutexattr_destroy", "pthread_mutexattr_getprioceiling",
          "pthread_mutexattr_getprotocol", "pthread_mutexattr_getpshared",
          "pthread_mutexattr_gettype", "pthread_mutexattr_getpolicy_np",
          "pthread_mutexattr_init", "pthread_mutexattr_setprioceiling",
          "pthread_mutexattr_setprotocol", "pthread_mutexattr_setpshared",
          "pthread_mutexattr_settype", "pthread_mutexattr_setpolicy_np",
          "pthread_once", "pthread_rwlock_destroy", "pthread_rwlock_init",
          "pthread_rwlock_rdlock", "pthread_rwlock_tryrdlock",
          "pthread_rwlock_trywrlock", "pthread_rwlock_wrlock",
          "pthread_rwlock_unlock", "pthread_rwlockattr_destroy",
          "pthread_rwlockattr_getpshared", "pthread_rwlockattr_init",
          "pthread_rwlockattr_setpshared", "pthread_self",
          "pthread_setcancelstate", "pthread_setcanceltype",
          "pthread_setconcurrency", "pthread_setschedparam",
          "pthread_setspecific", "pthread_testcancel",
          "pthread_is_threaded_np", "pthread_threadid_np",
          "pthread_getname_np", "pthread_setname_np", "pthread_main_np",
          "pthread_mach_thread_np", "pthread_get_stacksize_np",
          "pthread_get_stackaddr_np", "pthread_cond_signal_thread_np",
          "pthread_cond_timedwait_relative_np",
          "pthread_create_suspended_np", "pthread_kill",
          "pthread_from_mach_thread_np", "pthread_sigmask",
          "pthread_yield_np", "__darwin_check_fd_set_overflow", "adjtime",
          "futimes", "lutimes", "settimeofday", "getitimer", "gettimeofday",
          "select", "setitimer", "utimes", "__assert_rtn",
          "_DefaultRuneLocale", "_CurrentRuneLocale", "___runetype",
          "___tolower", "___toupper", "__maskrune", "__toupper", "__tolower",
          "memchr", "memcmp", "memcpy", "memmove", "memset", "strcat",
          "strchr", "strcmp", "strcoll", "strcpy", "strcspn", "strerror",
          "strlen", "strncat", "strncmp", "strncpy", "strpbrk", "strrchr",
          "strspn", "strstr", "strtok", "strxfrm", "strtok_r", "strerror_r",
          "strdup", "memccpy", "stpcpy", "stpncpy", "strndup", "strnlen",
          "strsignal", "memset_s", "memmem", "memset_pattern4",
          "memset_pattern8", "memset_pattern16", "strcasestr", "strnstr",
          "strlcat", "strlcpy", "strmode", "strsep", "swab",
          "timingsafe_bcmp", "bcmp", "bcopy", "bzero", "index", "rindex",
          "ffs", "strcasecmp", "strncasecmp", "ffsl", "ffsll", "fls", "flsl",
          "flsll", "mlockall", "munlockall", "mlock", "mmap", "mprotect",
          "msync", "munlock", "munmap", "shm_open", "shm_unlink",
          "posix_madvise", "madvise", "mincore", "minherit",
          "getattrlistbulk", "getattrlistat", "setattrlistat", "faccessat",
          "fchownat", "linkat", "readlinkat", "symlinkat", "unlinkat",
          "_exit", "access", "alarm", "chdir", "chown", "close", "dup",
          "dup2", "execl", "execle", "execlp", "execv", "execve", "execvp",
          "fork", "fpathconf", "getcwd", "getegid", "geteuid", "getgid",
          "getgroups", "getlogin", "getpgrp", "getpid", "getppid", "getuid",
          "isatty", "link", "lseek", "pathconf", "pause", "pipe", "read",
          "rmdir", "setgid", "setpgid", "setsid", "setuid", "sleep",
          "sysconf", "tcgetpgrp", "tcsetpgrp", "ttyname", "ttyname_r",
          "unlink", "write", "confstr", "getopt", "optarg", "optind",
          "opterr", "optopt", "brk", "chroot", "crypt", "encrypt", "fchdir",
          "gethostid", "getpgid", "getsid", "getdtablesize", "getpagesize",
          "getpass", "getwd", "lchown", "lockf", "nice", "pread", "pwrite",
          "sbrk", "setpgrp", "setregid", "setreuid", "sync", "truncate",
          "ualarm", "usleep", "vfork", "fsync", "ftruncate", "getlogin_r",
          "fchown", "gethostname", "readlink", "setegid", "seteuid",
          "symlink", "pselect", "accessx_np", "acct", "add_profil",
          "endusershell", "execvP", "fflagstostr", "getdomainname",
          "getgrouplist", "gethostuuid", "getmode", "getpeereid",
          "getsgroups_np", "getusershell", "getwgroups_np", "initgroups",
          "issetugid", "mkdtemp", "mknod", "mkpath_np", "mkpathat_np",
          "mkstemps", "mkostemp", "mkostemps", "mkstemp_dprotected_np",
          "mkdtempat_np", "mkstempsat_np", "mkostempsat_np", "nfssvc",
          "profil", "pthread_setugid_np", "pthread_getugid_np", "reboot",
          "revoke", "rcmd", "rcmd_af", "rresvport", "rresvport_af",
          "iruserok", "iruserok_sa", "ruserok", "setdomainname", "setgroups",
          "sethostid", "sethostname", "setlogin", "setmode", "setrgid",
          "setruid", "setsgroups_np", "setusershell", "setwgroups_np",
          "strtofflags", "swapon", "ttyslot", "undelete", "unwhiteout",
          "syscall", "fgetattrlist", "fsetattrlist", "getattrlist",
          "setattrlist", "exchangedata", "getdirentriesattr", "searchfs",
          "fsctl", "ffsctl", "fsync_volume_np", "sync_volume_np", "optreset",
          "jit_reg_allocator_get_hwreg_name"
        ],
        "New Types": [
          "output_buf", "jit_disasm", "jit_disasm", "code_refs_cache",
          "transfer_info", "jit_arg_layout", "jit_arg_layout_location",
          "X86_SSE_CmpCode", "__anonenum_X86_SSE_CmpCode_848838535",
          "X86_SSE_Opcode", "__anonenum_X86_SSE_Opcode_853888746",
          "x86_imm_buf", "__anonunion_x86_imm_buf_876386805", "X86_Prefix",
          "__anonenum_X86_Prefix_200431650", "__anonenum_321777801",
          "__anonenum_342172182", "X86_CC", "__anonenum_X86_CC_467256102",
          "X86_FP_Opcode", "__anonenum_X86_FP_Opcode_1068131184",
          "X86_Shift_Opcode", "__anonenum_X86_Shift_Opcode_820104407",
          "X86_ALU_Opcode", "__anonenum_X86_ALU_Opcode_144447433",
          "X86_XMM_Reg_No", "jit_x86_fp_regs", "X86_Reg_No",
          "jit_x86_gp_regs", "amd64_imm_buf",
          "__anonunion_amd64_imm_buf_34291009", "AMD64_REX_Bits",
          "__anonenum_AMD64_REX_Bits_69261688", "AMD64_XMM_Reg_No",
          "jit_amd64_fp_regs", "AMD64_Reg_No", "jit_amd64_gp_regs",
          "jit_debug_info", "jit", "jit_func_info", "jit_inp_arg",
          "__anonunion_location_1021650749", "jit_prepared_args",
          "jit_prepared_args", "jit_out_arg", "__anonunion_value_137411616",
          "jit_allocator_hint", "jit_rmap", "jit_rmap", "jit_reg_allocator",
          "jit_func_info", "jit_hw_reg", "__anonstruct_jit_hw_reg_312769258",
          "copy_target", "jit_set", "jit_set", "jit_tree", "jit_tree",
          "jit_tree_value", "jit_tree_key", "jit_exec_mem", "jit",
          "jit_warning", "jit_inp_type", "jit_opcode",
          "__anonenum_jit_opcode_193533032", "jit_proc_value_alias",
          "jit_reg", "jit_label", "jit_label", "jit_op", "jit_op",
          "jit_debug_info", "jit_rmap", "jit_set", "jit_tree", "jit_float",
          "jit_unsigned_value", "jit_value", "searchstate", "fssearchblock",
          "uuid_t", "accessx_descriptor", "fsfilcnt_t", "fsblkcnt_t",
          "fd_mask", "useconds_t", "swblk_t", "segsz_t", "nlink_t", "key_t",
          "ino64_t", "ino_t", "in_port_t", "in_addr_t", "gid_t", "blksize_t",
          "blkcnt_t", "fixpt_t", "daddr_t", "caddr_t", "qaddr_t", "quad_t",
          "u_quad_t", "uint", "ushort", "u_long", "u_int", "u_short",
          "u_char", "errno_t", "rsize_t", "__gnuc_va_list", "va_list___0",
          "_RuneLocale", "__anonstruct__RuneLocale_110080762",
          "_RuneCharClass", "__anonstruct__RuneCharClass_1021650748",
          "_RuneRange", "__anonstruct__RuneRange_1000210131", "_RuneEntry",
          "__anonstruct__RuneEntry_453100079", "wint_t", "clockinfo",
          "timezone", "itimerval", "suseconds_t", "timeval64", "fd_set",
          "fd_set", "mach_port_t", "pthread_override_t",
          "pthread_override_s", "qos_class_t", "__anonenum_788482901",
          "pthread_t", "pthread_rwlockattr_t", "pthread_rwlock_t",
          "pthread_once_t", "pthread_mutexattr_t", "pthread_mutex_t",
          "pthread_key_t", "pthread_condattr_t", "pthread_cond_t",
          "sched_param", "clockid_t", "__anonenum_clockid_t_447627989", "tm",
          "timespec", "time_t", "clock_t", "mode_t", "dev_t", "lldiv_t",
          "__anonstruct_lldiv_t_86583852", "ldiv_t",
          "__anonstruct_ldiv_t_748949161", "div_t",
          "__anonstruct_div_t_773697287", "wchar_t", "rune_t", "ct_rune_t",
          "wait", "__anonstruct_w_S_529377835", "__anonstruct_w_T_529377834",
          "proc_rlimit_control_wakeupmon", "rlimit", "rusage_info_current",
          "rusage_info_v4", "rusage_info_v3", "rusage_info_v2",
          "rusage_info_v1", "rusage_info_v0", "rusage_info_t", "rusage",
          "rlim_t", "timeval", "uintmax_t", "intmax_t", "uint_fast64_t",
          "uint_fast32_t", "uint_fast16_t", "uint_fast8_t", "int_fast64_t",
          "int_fast32_t", "int_fast16_t", "int_fast8_t", "uint_least64_t",
          "uint_least32_t", "uint_least16_t", "uint_least8_t",
          "int_least64_t", "int_least32_t", "int_least16_t", "int_least8_t",
          "uint64_t", "uint32_t", "uint16_t", "uint8_t", "sigstack",
          "sigvec", "sig_t", "sigaction", "__sigaction", "__sigaction_u",
          "siginfo_t", "__siginfo", "sigevent", "sigval", "uid_t",
          "sigset_t", "ucontext_t", "__darwin_ucontext", "stack_t",
          "__darwin_sigaltstack", "pthread_attr_t", "mcontext_t",
          "__darwin_mcontext_avx512_64_full", "__darwin_mcontext_avx512_64",
          "__darwin_mcontext_avx64_full", "__darwin_mcontext_avx64",
          "__darwin_mcontext64_full", "__darwin_mcontext64",
          "__darwin_mcontext_avx512_32", "__darwin_mcontext_avx32",
          "__darwin_mcontext32", "__darwin_x86_cpmu_state64",
          "__darwin_x86_debug_state64", "__darwin_x86_exception_state64",
          "__darwin_x86_avx512_state64", "__darwin_x86_avx_state64",
          "__darwin_x86_float_state64", "__darwin_x86_thread_full_state64",
          "__darwin_x86_thread_state64", "__x86_pagein_state",
          "__darwin_x86_debug_state32", "__darwin_i386_exception_state",
          "__darwin_i386_avx512_state", "__darwin_i386_avx_state",
          "__darwin_i386_float_state", "__darwin_opmask_reg",
          "__darwin_zmm_reg", "__darwin_ymm_reg", "__darwin_xmm_reg",
          "__darwin_mmst_reg", "__darwin_fp_status_t", "__darwin_fp_status",
          "__darwin_fp_control_t", "__darwin_fp_control",
          "__darwin_i386_thread_state", "sig_atomic_t", "id_t", "pid_t",
          "idtype_t", "__anonenum_idtype_t_558242672", "ssize_t", "off_t",
          "FILE", "__sFILE", "__sFILEX", "__sbuf", "fpos_t", "size_t",
          "va_list", "syscall_arg_t", "user_off_t", "user_time_t",
          "user_ulong_t", "user_long_t", "user_ssize_t", "user_size_t",
          "user_addr_t", "uintptr_t", "intptr_t", "register_t", "u_int64_t",
          "u_int32_t", "u_int16_t", "u_int8_t", "int64_t", "int32_t",
          "int16_t", "int8_t", "__darwin_wctype_t", "__darwin_wctrans_t",
          "__darwin_nl_item", "__darwin_pthread_t",
          "__darwin_pthread_rwlockattr_t", "__darwin_pthread_rwlock_t",
          "__darwin_pthread_once_t", "__darwin_pthread_mutexattr_t",
          "__darwin_pthread_mutex_t", "__darwin_pthread_key_t",
          "__darwin_pthread_condattr_t", "__darwin_pthread_cond_t",
          "__darwin_pthread_attr_t", "_opaque_pthread_t",
          "_opaque_pthread_rwlockattr_t", "_opaque_pthread_rwlock_t",
          "_opaque_pthread_once_t", "_opaque_pthread_mutexattr_t",
          "_opaque_pthread_mutex_t", "_opaque_pthread_condattr_t",
          "_opaque_pthread_cond_t", "_opaque_pthread_attr_t",
          "__darwin_pthread_handler_rec", "__darwin_uuid_string_t",
          "__darwin_uuid_t", "__darwin_useconds_t", "__darwin_uid_t",
          "__darwin_suseconds_t", "__darwin_sigset_t", "__darwin_pid_t",
          "__darwin_off_t", "__darwin_mode_t", "__darwin_mach_port_t",
          "__darwin_mach_port_name_t", "__darwin_ino_t", "__darwin_ino64_t",
          "__darwin_id_t", "__darwin_gid_t", "__darwin_fsfilcnt_t",
          "__darwin_fsblkcnt_t", "__darwin_dev_t", "__darwin_blksize_t",
          "__darwin_blkcnt_t", "__darwin_time_t", "__darwin_ssize_t",
          "__darwin_socklen_t", "__darwin_clock_t", "__darwin_wint_t",
          "__darwin_rune_t", "__darwin_wchar_t", "__darwin_va_list",
          "__darwin_size_t", "__darwin_ptrdiff_t", "__darwin_mbstate_t",
          "__mbstate_t", "__anonunion___mbstate_t_250061491",
          "__darwin_ct_rune_t", "__darwin_natural_t", "__darwin_intptr_t",
          "__uint64_t", "__int64_t", "__uint32_t", "__int32_t", "__uint16_t",
          "__int16_t", "__uint8_t", "__int8_t"
        ],
        "New Texts/Asms/Pragmas": [
          "Pragma", "Pragma", "Pragma", "Pragma", "Pragma", "Pragma"
        ]
      }
    }
  ]
}
END-UNIVERSE
*/

#pragma clang assume_nonnull begin
#pragma clang assume_nonnull end
#pragma clang assume_nonnull begin
#pragma clang assume_nonnull end
#pragma clang assume_nonnull begin
#pragma clang assume_nonnull end

/* BEGIN STRUCT-DECL pthread_override_s LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:211 */
struct pthread_override_s ;
/* END STRUCT-DECL pthread_override_s LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:211 */

/* BEGIN STRUCT-DECL jit_debug_info LOC=./jitter-Darwin-X86-64.c:65 */
struct jit_debug_info ;
/* END STRUCT-DECL jit_debug_info LOC=./jitter-Darwin-X86-64.c:65 */

/* BEGIN STRUCT-DECL jit LOC=./jitter-Darwin-X86-64.c:269 */
struct jit ;
/* END STRUCT-DECL jit LOC=./jitter-Darwin-X86-64.c:269 */

/* BEGIN STRUCT-DECL searchstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:770 */
struct searchstate ;
/* END STRUCT-DECL searchstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:770 */

/* BEGIN STRUCT-DECL __sFILEX LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:98 */
struct __sFILEX ;
/* END STRUCT-DECL __sFILEX LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:98 */

/* BEGIN STRUCT-DECL jit_tree LOC=./jitter-Darwin-X86-64.c:62 */
struct jit_tree ;
/* END STRUCT-DECL jit_tree LOC=./jitter-Darwin-X86-64.c:62 */

/* BEGIN STRUCT-DECL jit_rmap LOC=./jitter-Darwin-X86-64.c:64 */
struct jit_rmap ;
/* END STRUCT-DECL jit_rmap LOC=./jitter-Darwin-X86-64.c:64 */

/* BEGIN STRUCT-DECL jit_func_info LOC=./jitter-Darwin-X86-64.c:667 */
struct jit_func_info ;
/* END STRUCT-DECL jit_func_info LOC=./jitter-Darwin-X86-64.c:667 */

/* BEGIN STRUCT-DECL fssearchblock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:769 */
struct fssearchblock ;
/* END STRUCT-DECL fssearchblock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:769 */

/* BEGIN STRUCT-DECL jit_set LOC=./jitter-Darwin-X86-64.c:63 */
struct jit_set ;
/* END STRUCT-DECL jit_set LOC=./jitter-Darwin-X86-64.c:63 */

/* BEGIN STRUCT-DECL _opaque_pthread_condattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:73 */
struct _opaque_pthread_condattr_t ;
/* END STRUCT-DECL _opaque_pthread_condattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:73 */

/* BEGIN STRUCT-DECL __anonstruct__RuneLocale_110080762 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:77 */
struct __anonstruct__RuneLocale_110080762 ;
/* END STRUCT-DECL __anonstruct__RuneLocale_110080762 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:77 */

/* BEGIN STRUCT-DECL jit_label LOC=./jitter-Darwin-X86-64.c:92 */
struct jit_label ;
/* END STRUCT-DECL jit_label LOC=./jitter-Darwin-X86-64.c:92 */

/* BEGIN ENUM-DECL __anonenum_idtype_t_558242672 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:79 */
enum __anonenum_idtype_t_558242672 ;
/* END ENUM-DECL __anonenum_idtype_t_558242672 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:79 */

/* BEGIN STRUCT-DECL rusage LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:152 */
struct rusage ;
/* END STRUCT-DECL rusage LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:152 */

/* BEGIN STRUCT-DECL __darwin_mmst_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:194 */
struct __darwin_mmst_reg ;
/* END STRUCT-DECL __darwin_mmst_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:194 */

/* BEGIN STRUCT-DECL output_buf LOC=./jitter-Darwin-X86-64.c:4057 */
struct output_buf ;
/* END STRUCT-DECL output_buf LOC=./jitter-Darwin-X86-64.c:4057 */

/* BEGIN STRUCT-DECL __sigaction LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:276 */
struct __sigaction ;
/* END STRUCT-DECL __sigaction LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:276 */

/* BEGIN STRUCT-DECL __anonstruct_jit_hw_reg_312769258 LOC=./jitter-Darwin-X86-64.c:659 */
struct __anonstruct_jit_hw_reg_312769258 ;
/* END STRUCT-DECL __anonstruct_jit_hw_reg_312769258 LOC=./jitter-Darwin-X86-64.c:659 */

/* BEGIN STRUCT-DECL __darwin_mcontext_avx64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:113 */
struct __darwin_mcontext_avx64 ;
/* END STRUCT-DECL __darwin_mcontext_avx64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:113 */

/* BEGIN STRUCT-DECL __darwin_i386_avx512_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:364 */
struct __darwin_i386_avx512_state ;
/* END STRUCT-DECL __darwin_i386_avx512_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:364 */

/* BEGIN STRUCT-DECL rlimit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:365 */
struct rlimit ;
/* END STRUCT-DECL rlimit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:365 */

/* BEGIN STRUCT-DECL __darwin_mcontext32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:39 */
struct __darwin_mcontext32 ;
/* END STRUCT-DECL __darwin_mcontext32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:39 */

/* BEGIN STRUCT-DECL __darwin_x86_avx512_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:833 */
struct __darwin_x86_avx512_state64 ;
/* END STRUCT-DECL __darwin_x86_avx512_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:833 */

/* BEGIN STRUCT-DECL __darwin_i386_exception_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:575 */
struct __darwin_i386_exception_state ;
/* END STRUCT-DECL __darwin_i386_exception_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:575 */

/* BEGIN STRUCT-DECL _opaque_pthread_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:103 */
struct _opaque_pthread_t ;
/* END STRUCT-DECL _opaque_pthread_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:103 */

/* BEGIN ENUM-DECL __anonenum_342172182 LOC=./jitter-Darwin-X86-64.c:1153 */
enum __anonenum_342172182 ;
/* END ENUM-DECL __anonenum_342172182 LOC=./jitter-Darwin-X86-64.c:1153 */

/* BEGIN STRUCT-DECL _opaque_pthread_mutexattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:83 */
struct _opaque_pthread_mutexattr_t ;
/* END STRUCT-DECL _opaque_pthread_mutexattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:83 */

/* BEGIN STRUCT-DECL sigvec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:348 */
struct sigvec ;
/* END STRUCT-DECL sigvec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:348 */

/* BEGIN ENUM-DECL __anonenum_clockid_t_447627989 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:153 */
enum __anonenum_clockid_t_447627989 ;
/* END ENUM-DECL __anonenum_clockid_t_447627989 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:153 */

/* BEGIN STRUCT-DECL __darwin_mcontext_avx512_64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:138 */
struct __darwin_mcontext_avx512_64_full ;
/* END STRUCT-DECL __darwin_mcontext_avx512_64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:138 */

/* BEGIN STRUCT-DECL __darwin_i386_avx_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:318 */
struct __darwin_i386_avx_state ;
/* END STRUCT-DECL __darwin_i386_avx_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:318 */

/* BEGIN STRUCT-DECL rusage_info_v2 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:229 */
struct rusage_info_v2 ;
/* END STRUCT-DECL rusage_info_v2 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:229 */

/* BEGIN STRUCT-DECL __darwin_x86_exception_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1172 */
struct __darwin_x86_exception_state64 ;
/* END STRUCT-DECL __darwin_x86_exception_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1172 */

/* BEGIN UNION-DECL __anonunion_x86_imm_buf_876386805 LOC=./jitter-Darwin-X86-64.c:1236 */
union __anonunion_x86_imm_buf_876386805 ;
/* END UNION-DECL __anonunion_x86_imm_buf_876386805 LOC=./jitter-Darwin-X86-64.c:1236 */

/* BEGIN STRUCT-DECL proc_rlimit_control_wakeupmon LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:400 */
struct proc_rlimit_control_wakeupmon ;
/* END STRUCT-DECL proc_rlimit_control_wakeupmon LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:400 */

/* BEGIN UNION-DECL sigval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:158 */
union sigval ;
/* END UNION-DECL sigval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:158 */

/* BEGIN STRUCT-DECL __anonstruct__RuneRange_1000210131 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:67 */
struct __anonstruct__RuneRange_1000210131 ;
/* END STRUCT-DECL __anonstruct__RuneRange_1000210131 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:67 */

/* BEGIN ENUM-DECL __anonenum_321777801 LOC=./jitter-Darwin-X86-64.c:1162 */
enum __anonenum_321777801 ;
/* END ENUM-DECL __anonenum_321777801 LOC=./jitter-Darwin-X86-64.c:1162 */

/* BEGIN ENUM-DECL __anonenum_AMD64_REX_Bits_69261688 LOC=./jitter-Darwin-X86-64.c:1053 */
enum __anonenum_AMD64_REX_Bits_69261688 ;
/* END ENUM-DECL __anonenum_AMD64_REX_Bits_69261688 LOC=./jitter-Darwin-X86-64.c:1053 */

/* BEGIN ENUM-DECL __anonenum_X86_FP_Opcode_1068131184 LOC=./jitter-Darwin-X86-64.c:1122 */
enum __anonenum_X86_FP_Opcode_1068131184 ;
/* END ENUM-DECL __anonenum_X86_FP_Opcode_1068131184 LOC=./jitter-Darwin-X86-64.c:1122 */

/* BEGIN ENUM-DECL jit_x86_gp_regs LOC=./jitter-Darwin-X86-64.c:1066 */
enum jit_x86_gp_regs ;
/* END ENUM-DECL jit_x86_gp_regs LOC=./jitter-Darwin-X86-64.c:1066 */

/* BEGIN ENUM-DECL __anonenum_X86_CC_467256102 LOC=./jitter-Darwin-X86-64.c:1136 */
enum __anonenum_X86_CC_467256102 ;
/* END ENUM-DECL __anonenum_X86_CC_467256102 LOC=./jitter-Darwin-X86-64.c:1136 */

/* BEGIN UNION-DECL __anonunion_location_1021650749 LOC=./jitter-Darwin-X86-64.c:720 */
union __anonunion_location_1021650749 ;
/* END UNION-DECL __anonunion_location_1021650749 LOC=./jitter-Darwin-X86-64.c:720 */

/* BEGIN STRUCT-DECL jit_prepared_args LOC=./jitter-Darwin-X86-64.c:694 */
struct jit_prepared_args ;
/* END STRUCT-DECL jit_prepared_args LOC=./jitter-Darwin-X86-64.c:694 */

/* BEGIN STRUCT-DECL __darwin_zmm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:245 */
struct __darwin_zmm_reg ;
/* END STRUCT-DECL __darwin_zmm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:245 */

/* BEGIN UNION-DECL jit_proc_value_alias LOC=./jitter-Darwin-X86-64.c:100 */
union jit_proc_value_alias ;
/* END UNION-DECL jit_proc_value_alias LOC=./jitter-Darwin-X86-64.c:100 */

/* BEGIN STRUCT-DECL sigaction LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:286 */
struct sigaction ;
/* END STRUCT-DECL sigaction LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:286 */

/* BEGIN STRUCT-DECL copy_target LOC=./jitter-Darwin-X86-64.c:640 */
struct copy_target ;
/* END STRUCT-DECL copy_target LOC=./jitter-Darwin-X86-64.c:640 */

/* BEGIN UNION-DECL __anonunion_amd64_imm_buf_34291009 LOC=./jitter-Darwin-X86-64.c:1060 */
union __anonunion_amd64_imm_buf_34291009 ;
/* END UNION-DECL __anonunion_amd64_imm_buf_34291009 LOC=./jitter-Darwin-X86-64.c:1060 */

/* BEGIN STRUCT-DECL jit_op LOC=./jitter-Darwin-X86-64.c:67 */
struct jit_op ;
/* END STRUCT-DECL jit_op LOC=./jitter-Darwin-X86-64.c:67 */

/* BEGIN STRUCT-DECL __anonstruct_w_T_529377834 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */
struct __anonstruct_w_T_529377834 ;
/* END STRUCT-DECL __anonstruct_w_T_529377834 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */

/* BEGIN STRUCT-DECL clockinfo LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:172 */
struct clockinfo ;
/* END STRUCT-DECL clockinfo LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:172 */

/* BEGIN STRUCT-DECL __darwin_x86_cpmu_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1220 */
struct __darwin_x86_cpmu_state64 ;
/* END STRUCT-DECL __darwin_x86_cpmu_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1220 */

/* BEGIN STRUCT-DECL sigevent LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:168 */
struct sigevent ;
/* END STRUCT-DECL sigevent LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:168 */

/* BEGIN STRUCT-DECL __darwin_sigaltstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigaltstack.h:42 */
struct __darwin_sigaltstack ;
/* END STRUCT-DECL __darwin_sigaltstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigaltstack.h:42 */

/* BEGIN ENUM-DECL __anonenum_788482901 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/qos.h:130 */
enum __anonenum_788482901 ;
/* END ENUM-DECL __anonenum_788482901 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/qos.h:130 */

/* BEGIN STRUCT-DECL __darwin_mcontext_avx512_32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:56 */
struct __darwin_mcontext_avx512_32 ;
/* END STRUCT-DECL __darwin_mcontext_avx512_32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:56 */

/* BEGIN STRUCT-DECL __darwin_fp_status LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:150 */
struct __darwin_fp_status ;
/* END STRUCT-DECL __darwin_fp_status LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:150 */

/* BEGIN STRUCT-DECL __darwin_x86_thread_full_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:691 */
struct __darwin_x86_thread_full_state64 ;
/* END STRUCT-DECL __darwin_x86_thread_full_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:691 */

/* BEGIN STRUCT-DECL rusage_info_v1 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:209 */
struct rusage_info_v1 ;
/* END STRUCT-DECL rusage_info_v1 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:209 */

/* BEGIN STRUCT-DECL __sFILE LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:126 */
struct __sFILE ;
/* END STRUCT-DECL __sFILE LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:126 */

/* BEGIN ENUM-DECL __anonenum_X86_SSE_CmpCode_848838535 LOC=./jitter-Darwin-X86-64.c:1384 */
enum __anonenum_X86_SSE_CmpCode_848838535 ;
/* END ENUM-DECL __anonenum_X86_SSE_CmpCode_848838535 LOC=./jitter-Darwin-X86-64.c:1384 */

/* BEGIN STRUCT-DECL jit_inp_arg LOC=./jitter-Darwin-X86-64.c:720 */
struct jit_inp_arg ;
/* END STRUCT-DECL jit_inp_arg LOC=./jitter-Darwin-X86-64.c:720 */

/* BEGIN STRUCT-DECL sigstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:367 */
struct sigstack ;
/* END STRUCT-DECL sigstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:367 */

/* BEGIN STRUCT-DECL __darwin_xmm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:213 */
struct __darwin_xmm_reg ;
/* END STRUCT-DECL __darwin_xmm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:213 */

/* BEGIN STRUCT-DECL __anonstruct_lldiv_t_86583852 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:94 */
struct __anonstruct_lldiv_t_86583852 ;
/* END STRUCT-DECL __anonstruct_lldiv_t_86583852 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:94 */

/* BEGIN STRUCT-DECL _opaque_pthread_mutex_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:78 */
struct _opaque_pthread_mutex_t ;
/* END STRUCT-DECL _opaque_pthread_mutex_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:78 */

/* BEGIN STRUCT-DECL jit_arg_layout LOC=./jitter-Darwin-X86-64.c:1717 */
struct jit_arg_layout ;
/* END STRUCT-DECL jit_arg_layout LOC=./jitter-Darwin-X86-64.c:1717 */

/* BEGIN STRUCT-DECL __anonstruct_div_t_773697287 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:83 */
struct __anonstruct_div_t_773697287 ;
/* END STRUCT-DECL __anonstruct_div_t_773697287 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:83 */

/* BEGIN STRUCT-DECL _opaque_pthread_rwlockattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:98 */
struct _opaque_pthread_rwlockattr_t ;
/* END STRUCT-DECL _opaque_pthread_rwlockattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:98 */

/* BEGIN STRUCT-DECL __darwin_x86_avx_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:765 */
struct __darwin_x86_avx_state64 ;
/* END STRUCT-DECL __darwin_x86_avx_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:765 */

/* BEGIN STRUCT-DECL jit_allocator_hint LOC=./jitter-Darwin-X86-64.c:687 */
struct jit_allocator_hint ;
/* END STRUCT-DECL jit_allocator_hint LOC=./jitter-Darwin-X86-64.c:687 */

/* BEGIN UNION-DECL __sigaction_u LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:269 */
union __sigaction_u ;
/* END UNION-DECL __sigaction_u LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:269 */

/* BEGIN STRUCT-DECL code_refs_cache LOC=./jitter-Darwin-X86-64.c:3860 */
struct code_refs_cache ;
/* END STRUCT-DECL code_refs_cache LOC=./jitter-Darwin-X86-64.c:3860 */

/* BEGIN ENUM-DECL jit_amd64_fp_regs LOC=./jitter-Darwin-X86-64.c:1033 */
enum jit_amd64_fp_regs ;
/* END ENUM-DECL jit_amd64_fp_regs LOC=./jitter-Darwin-X86-64.c:1033 */

/* BEGIN STRUCT-DECL __darwin_opmask_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:259 */
struct __darwin_opmask_reg ;
/* END STRUCT-DECL __darwin_opmask_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:259 */

/* BEGIN STRUCT-DECL fd_set LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h:50 */
struct fd_set ;
/* END STRUCT-DECL fd_set LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h:50 */

/* BEGIN STRUCT-DECL timezone LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:129 */
struct timezone ;
/* END STRUCT-DECL timezone LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:129 */

/* BEGIN ENUM-DECL __anonenum_X86_ALU_Opcode_144447433 LOC=./jitter-Darwin-X86-64.c:1093 */
enum __anonenum_X86_ALU_Opcode_144447433 ;
/* END ENUM-DECL __anonenum_X86_ALU_Opcode_144447433 LOC=./jitter-Darwin-X86-64.c:1093 */

/* BEGIN STRUCT-DECL transfer_info LOC=./jitter-Darwin-X86-64.c:3399 */
struct transfer_info ;
/* END STRUCT-DECL transfer_info LOC=./jitter-Darwin-X86-64.c:3399 */

/* BEGIN STRUCT-DECL itimerval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:91 */
struct itimerval ;
/* END STRUCT-DECL itimerval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:91 */

/* BEGIN STRUCT-DECL jit_arg_layout_location LOC=./jitter-Darwin-X86-64.c:1709 */
struct jit_arg_layout_location ;
/* END STRUCT-DECL jit_arg_layout_location LOC=./jitter-Darwin-X86-64.c:1709 */

/* BEGIN STRUCT-DECL _opaque_pthread_attr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:63 */
struct _opaque_pthread_attr_t ;
/* END STRUCT-DECL _opaque_pthread_attr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:63 */

/* BEGIN ENUM-DECL __anonenum_X86_SSE_Opcode_853888746 LOC=./jitter-Darwin-X86-64.c:1240 */
enum __anonenum_X86_SSE_Opcode_853888746 ;
/* END ENUM-DECL __anonenum_X86_SSE_Opcode_853888746 LOC=./jitter-Darwin-X86-64.c:1240 */

/* BEGIN STRUCT-DECL tm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:75 */
struct tm ;
/* END STRUCT-DECL tm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:75 */

/* BEGIN STRUCT-DECL __darwin_x86_debug_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1192 */
struct __darwin_x86_debug_state64 ;
/* END STRUCT-DECL __darwin_x86_debug_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1192 */

/* BEGIN STRUCT-DECL jit_reg_allocator LOC=./jitter-Darwin-X86-64.c:667 */
struct jit_reg_allocator ;
/* END STRUCT-DECL jit_reg_allocator LOC=./jitter-Darwin-X86-64.c:667 */

/* BEGIN STRUCT-DECL __darwin_x86_float_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:714 */
struct __darwin_x86_float_state64 ;
/* END STRUCT-DECL __darwin_x86_float_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:714 */

/* BEGIN STRUCT-DECL jit_disasm LOC=./jitter-Darwin-X86-64.c:4031 */
struct jit_disasm ;
/* END STRUCT-DECL jit_disasm LOC=./jitter-Darwin-X86-64.c:4031 */

/* BEGIN STRUCT-DECL __siginfo LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:177 */
struct __siginfo ;
/* END STRUCT-DECL __siginfo LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:177 */

/* BEGIN STRUCT-DECL jit_out_arg LOC=./jitter-Darwin-X86-64.c:694 */
struct jit_out_arg ;
/* END STRUCT-DECL jit_out_arg LOC=./jitter-Darwin-X86-64.c:694 */

/* BEGIN STRUCT-DECL __darwin_ymm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:229 */
struct __darwin_ymm_reg ;
/* END STRUCT-DECL __darwin_ymm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:229 */

/* BEGIN STRUCT-DECL __anonstruct__RuneCharClass_1021650748 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:72 */
struct __anonstruct__RuneCharClass_1021650748 ;
/* END STRUCT-DECL __anonstruct__RuneCharClass_1021650748 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:72 */

/* BEGIN STRUCT-DECL __x86_pagein_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:622 */
struct __x86_pagein_state ;
/* END STRUCT-DECL __x86_pagein_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:622 */

/* BEGIN STRUCT-DECL timespec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timespec.h:33 */
struct timespec ;
/* END STRUCT-DECL timespec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timespec.h:33 */

/* BEGIN STRUCT-DECL accessx_descriptor LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:132 */
struct accessx_descriptor ;
/* END STRUCT-DECL accessx_descriptor LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:132 */

/* BEGIN ENUM-DECL __anonenum_X86_Prefix_200431650 LOC=./jitter-Darwin-X86-64.c:1187 */
enum __anonenum_X86_Prefix_200431650 ;
/* END ENUM-DECL __anonenum_X86_Prefix_200431650 LOC=./jitter-Darwin-X86-64.c:1187 */

/* BEGIN STRUCT-DECL __darwin_mcontext64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:97 */
struct __darwin_mcontext64 ;
/* END STRUCT-DECL __darwin_mcontext64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:97 */

/* BEGIN ENUM-DECL __anonenum_X86_Shift_Opcode_820104407 LOC=./jitter-Darwin-X86-64.c:1107 */
enum __anonenum_X86_Shift_Opcode_820104407 ;
/* END ENUM-DECL __anonenum_X86_Shift_Opcode_820104407 LOC=./jitter-Darwin-X86-64.c:1107 */

/* BEGIN STRUCT-DECL rusage_info_v3 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:251 */
struct rusage_info_v3 ;
/* END STRUCT-DECL rusage_info_v3 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:251 */

/* BEGIN STRUCT-DECL __darwin_mcontext_avx32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:47 */
struct __darwin_mcontext_avx32 ;
/* END STRUCT-DECL __darwin_mcontext_avx32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:47 */

/* BEGIN STRUCT-DECL __darwin_x86_debug_state32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:595 */
struct __darwin_x86_debug_state32 ;
/* END STRUCT-DECL __darwin_x86_debug_state32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:595 */

/* BEGIN STRUCT-DECL __darwin_ucontext LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ucontext.h:42 */
struct __darwin_ucontext ;
/* END STRUCT-DECL __darwin_ucontext LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ucontext.h:42 */

/* BEGIN ENUM-DECL jit_warning LOC=./jitter-Darwin-X86-64.c:257 */
enum jit_warning ;
/* END ENUM-DECL jit_warning LOC=./jitter-Darwin-X86-64.c:257 */

/* BEGIN STRUCT-DECL __anonstruct_w_S_529377835 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */
struct __anonstruct_w_S_529377835 ;
/* END STRUCT-DECL __anonstruct_w_S_529377835 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */

/* BEGIN STRUCT-DECL __darwin_i386_thread_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:46 */
struct __darwin_i386_thread_state ;
/* END STRUCT-DECL __darwin_i386_thread_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:46 */

/* BEGIN STRUCT-DECL __darwin_pthread_handler_rec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:57 */
struct __darwin_pthread_handler_rec ;
/* END STRUCT-DECL __darwin_pthread_handler_rec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:57 */

/* BEGIN STRUCT-DECL sched_param LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/sched.h:35 */
struct sched_param ;
/* END STRUCT-DECL sched_param LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/sched.h:35 */

/* BEGIN STRUCT-DECL jit_exec_mem LOC=./jitter-Darwin-X86-64.c:294 */
struct jit_exec_mem ;
/* END STRUCT-DECL jit_exec_mem LOC=./jitter-Darwin-X86-64.c:294 */

/* BEGIN UNION-DECL __anonunion_value_137411616 LOC=./jitter-Darwin-X86-64.c:694 */
union __anonunion_value_137411616 ;
/* END UNION-DECL __anonunion_value_137411616 LOC=./jitter-Darwin-X86-64.c:694 */

/* BEGIN STRUCT-DECL __darwin_mcontext64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:105 */
struct __darwin_mcontext64_full ;
/* END STRUCT-DECL __darwin_mcontext64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:105 */

/* BEGIN STRUCT-DECL _opaque_pthread_cond_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:68 */
struct _opaque_pthread_cond_t ;
/* END STRUCT-DECL _opaque_pthread_cond_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:68 */

/* BEGIN STRUCT-DECL __sbuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:92 */
struct __sbuf ;
/* END STRUCT-DECL __sbuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:92 */

/* BEGIN STRUCT-DECL rusage_info_v4 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:282 */
struct rusage_info_v4 ;
/* END STRUCT-DECL rusage_info_v4 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:282 */

/* BEGIN STRUCT-DECL __anonstruct_ldiv_t_748949161 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:88 */
struct __anonstruct_ldiv_t_748949161 ;
/* END STRUCT-DECL __anonstruct_ldiv_t_748949161 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:88 */

/* BEGIN ENUM-DECL __anonenum_jit_opcode_193533032 LOC=./jitter-Darwin-X86-64.c:112 */
enum __anonenum_jit_opcode_193533032 ;
/* END ENUM-DECL __anonenum_jit_opcode_193533032 LOC=./jitter-Darwin-X86-64.c:112 */

/* BEGIN STRUCT-DECL timeval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timeval.h:34 */
struct timeval ;
/* END STRUCT-DECL timeval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timeval.h:34 */

/* BEGIN STRUCT-DECL __darwin_fp_control LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:92 */
struct __darwin_fp_control ;
/* END STRUCT-DECL __darwin_fp_control LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:92 */

/* BEGIN ENUM-DECL jit_x86_fp_regs LOC=./jitter-Darwin-X86-64.c:1078 */
enum jit_x86_fp_regs ;
/* END ENUM-DECL jit_x86_fp_regs LOC=./jitter-Darwin-X86-64.c:1078 */

/* BEGIN UNION-DECL _TIG_VZ_HQIz_3_fib_$node LOC=UNKNOWN */
union _TIG_VZ_HQIz_3_fib_$node ;
/* END UNION-DECL _TIG_VZ_HQIz_3_fib_$node LOC=UNKNOWN */

/* BEGIN ENUM-DECL jit_amd64_gp_regs LOC=./jitter-Darwin-X86-64.c:1012 */
enum jit_amd64_gp_regs ;
/* END ENUM-DECL jit_amd64_gp_regs LOC=./jitter-Darwin-X86-64.c:1012 */

/* BEGIN STRUCT-DECL _opaque_pthread_once_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:88 */
struct _opaque_pthread_once_t ;
/* END STRUCT-DECL _opaque_pthread_once_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:88 */

/* BEGIN STRUCT-DECL __darwin_i386_float_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:281 */
struct __darwin_i386_float_state ;
/* END STRUCT-DECL __darwin_i386_float_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:281 */

/* BEGIN STRUCT-DECL __darwin_mcontext_avx512_64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:130 */
struct __darwin_mcontext_avx512_64 ;
/* END STRUCT-DECL __darwin_mcontext_avx512_64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:130 */

/* BEGIN STRUCT-DECL timeval64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timeval64.h:34 */
struct timeval64 ;
/* END STRUCT-DECL timeval64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timeval64.h:34 */

/* BEGIN STRUCT-DECL __darwin_x86_thread_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:633 */
struct __darwin_x86_thread_state64 ;
/* END STRUCT-DECL __darwin_x86_thread_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:633 */

/* BEGIN STRUCT-DECL _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct LOC=UNKNOWN */
struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct ;
/* END STRUCT-DECL _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct LOC=UNKNOWN */

/* BEGIN ENUM-DECL jit_inp_type LOC=./jitter-Darwin-X86-64.c:250 */
enum jit_inp_type ;
/* END ENUM-DECL jit_inp_type LOC=./jitter-Darwin-X86-64.c:250 */

/* BEGIN STRUCT-DECL _opaque_pthread_rwlock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:93 */
struct _opaque_pthread_rwlock_t ;
/* END STRUCT-DECL _opaque_pthread_rwlock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:93 */

/* BEGIN UNION-DECL __anonunion___mbstate_t_250061491 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:76 */
union __anonunion___mbstate_t_250061491 ;
/* END UNION-DECL __anonunion___mbstate_t_250061491 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:76 */

/* BEGIN STRUCT-DECL __anonstruct__RuneEntry_453100079 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:60 */
struct __anonstruct__RuneEntry_453100079 ;
/* END STRUCT-DECL __anonstruct__RuneEntry_453100079 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:60 */

/* BEGIN UNION-DECL wait LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */
union wait ;
/* END UNION-DECL wait LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */

/* BEGIN STRUCT-DECL rusage_info_v0 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:195 */
struct rusage_info_v0 ;
/* END STRUCT-DECL rusage_info_v0 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:195 */

/* BEGIN STRUCT-DECL __darwin_mcontext_avx64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:121 */
struct __darwin_mcontext_avx64_full ;
/* END STRUCT-DECL __darwin_mcontext_avx64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:121 */

/* BEGIN TYPEDEF _RuneLocale LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:77 */
typedef struct __anonstruct__RuneLocale_110080762 _RuneLocale;
/* END TYPEDEF _RuneLocale LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:77 */

/* BEGIN FUNCTION-DECL __builtin_strchr LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin_strchr(char * , int  ) ;  */
/* END FUNCTION-DECL __builtin_strchr LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_llround LOC=BUILTIN */
/* compiler builtin: 
   long long __builtin_llround(double  ) ;  */
/* END FUNCTION-DECL __builtin_llround LOC=BUILTIN */

/* BEGIN TYPEDEF u_int LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int.h:30 */
typedef unsigned int u_int;
/* END TYPEDEF u_int LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int.h:30 */

/* BEGIN FUNCTION-DECL __builtin_ctz LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_ctz(unsigned int  ) ;  */
/* END FUNCTION-DECL __builtin_ctz LOC=BUILTIN */

/* BEGIN FUNCTION-DECL isdigit LOC=UNKNOWN */
__inline int isdigit(int _c ) ;
/* END FUNCTION-DECL isdigit LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN mrand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:218 */
extern long mrand48(void)  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
/* END FUNCTION-DECL-EXTERN mrand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:218 */

/* BEGIN ENUM jit_x86_gp_regs LOC=./jitter-Darwin-X86-64.c:1066 */
enum jit_x86_gp_regs {
    X86_EAX = 0,
    X86_ECX = 1,
    X86_EDX = 2,
    X86_EBX = 3,
    X86_ESP = 4,
    X86_EBP = 5,
    X86_ESI = 6,
    X86_EDI = 7,
    X86_NREG = 8
} ;
/* END ENUM jit_x86_gp_regs LOC=./jitter-Darwin-X86-64.c:1066 */

/* BEGIN FUNCTION-DECL __builtin_strncasecmp LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_strncasecmp(char const   * , char const   * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_strncasecmp LOC=BUILTIN */

/* BEGIN TYPEDEF __uint64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:47 */
typedef unsigned long long __uint64_t;
/* END TYPEDEF __uint64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:47 */

/* BEGIN TYPEDEF __darwin_ino64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:62 */
typedef __uint64_t __darwin_ino64_t;
/* END TYPEDEF __darwin_ino64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:62 */

/* BEGIN TYPEDEF __darwin_ino_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:64 */
typedef __darwin_ino64_t __darwin_ino_t;
/* END TYPEDEF __darwin_ino_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:64 */

/* BEGIN TYPEDEF ino_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ino_t.h:31 */
typedef __darwin_ino_t ino_t;
/* END TYPEDEF ino_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ino_t.h:31 */

/* BEGIN ENUM __anonenum_342172182 LOC=./jitter-Darwin-X86-64.c:1153 */
enum __anonenum_342172182 {
    X86_FP_C0 = 256,
    X86_FP_C1 = 512,
    X86_FP_C2 = 1024,
    X86_FP_C3 = 16384,
    X86_FP_CC_MASK = 17664
} ;
/* END ENUM __anonenum_342172182 LOC=./jitter-Darwin-X86-64.c:1153 */

/* BEGIN TYPEDEF __darwin_ssize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:119 */
typedef long __darwin_ssize_t;
/* END TYPEDEF __darwin_ssize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:119 */

/* BEGIN FUNCTION-DECL __builtin_acosf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_acosf(float  ) ;  */
/* END FUNCTION-DECL __builtin_acosf LOC=BUILTIN */

/* BEGIN STRUCT _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct LOC=UNKNOWN */
struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct {
   struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct *prev ;
   struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct *next ;
   int data ;
};
/* END STRUCT _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct LOC=UNKNOWN */

/* BEGIN VARIABLE-DEF _TIG_iO_HQIz_2_init_tigress_1_opaque_list_2 LOC=UNKNOWN */
struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct *_TIG_iO_HQIz_2_init_tigress_1_opaque_list_2  =    (struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct *)0;
/* END VARIABLE-DEF _TIG_iO_HQIz_2_init_tigress_1_opaque_list_2 LOC=UNKNOWN */

/* BEGIN TYPEDEF FILE LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:126 */
typedef struct __sFILE FILE;
/* END TYPEDEF FILE LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:126 */

/* BEGIN FUNCTION-DECL-EXTERN putc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:171 */
extern int putc(int  , FILE * ) ;
/* END FUNCTION-DECL-EXTERN putc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:171 */

/* BEGIN STRUCT _opaque_pthread_cond_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:68 */
struct _opaque_pthread_cond_t {
   long __sig ;
   char __opaque[40] ;
};
/* END STRUCT _opaque_pthread_cond_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:68 */

/* BEGIN TYPEDEF __darwin_pthread_cond_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:110 */
typedef struct _opaque_pthread_cond_t __darwin_pthread_cond_t;
/* END TYPEDEF __darwin_pthread_cond_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:110 */

/* BEGIN TYPEDEF pthread_cond_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_cond_t.h:31 */
typedef __darwin_pthread_cond_t pthread_cond_t;
/* END TYPEDEF pthread_cond_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_cond_t.h:31 */

/* BEGIN STRUCT _opaque_pthread_mutex_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:78 */
struct _opaque_pthread_mutex_t {
   long __sig ;
   char __opaque[56] ;
};
/* END STRUCT _opaque_pthread_mutex_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:78 */

/* BEGIN TYPEDEF __darwin_pthread_mutex_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:113 */
typedef struct _opaque_pthread_mutex_t __darwin_pthread_mutex_t;
/* END TYPEDEF __darwin_pthread_mutex_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:113 */

/* BEGIN TYPEDEF pthread_mutex_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_mutex_t.h:31 */
typedef __darwin_pthread_mutex_t pthread_mutex_t;
/* END TYPEDEF pthread_mutex_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_mutex_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_cond_timedwait_relative_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:535 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_timedwait_relative_np(pthread_cond_t * ,
                                                                                                                                              pthread_mutex_t * ,
                                                                                                                                              struct timespec  const  * _Nullable   ) ;
/* END FUNCTION-DECL-EXTERN pthread_cond_timedwait_relative_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:535 */

/* BEGIN TYPEDEF __int32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:44 */
typedef int __int32_t;
/* END TYPEDEF __int32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:44 */

/* BEGIN TYPEDEF __darwin_blksize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:56 */
typedef __int32_t __darwin_blksize_t;
/* END TYPEDEF __darwin_blksize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:56 */

/* BEGIN TYPEDEF blksize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_blksize_t.h:31 */
typedef __darwin_blksize_t blksize_t;
/* END TYPEDEF blksize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_blksize_t.h:31 */

/* BEGIN FUNCTION-DECL __builtin_strcmp LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_strcmp(char const   * , char const   * ) ;  */
/* END FUNCTION-DECL __builtin_strcmp LOC=BUILTIN */

/* BEGIN STRUCT _opaque_pthread_attr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:63 */
struct _opaque_pthread_attr_t {
   long __sig ;
   char __opaque[56] ;
};
/* END STRUCT _opaque_pthread_attr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:63 */

/* BEGIN TYPEDEF __darwin_pthread_attr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:109 */
typedef struct _opaque_pthread_attr_t __darwin_pthread_attr_t;
/* END TYPEDEF __darwin_pthread_attr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:109 */

/* BEGIN TYPEDEF pthread_attr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_attr_t.h:31 */
typedef __darwin_pthread_attr_t pthread_attr_t;
/* END TYPEDEF pthread_attr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_attr_t.h:31 */

/* BEGIN TYPEDEF qos_class_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/qos.h:130 */
typedef unsigned int qos_class_t;
/* END TYPEDEF qos_class_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/qos.h:130 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_get_qos_class_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:114 */
extern int __attribute__((__availability__(ios,introduced=8.0), __availability__(macos,introduced=10.10)))  pthread_attr_get_qos_class_np(pthread_attr_t * __restrict  __attr ,
                                                                                                                                          qos_class_t * _Nullable __restrict  __qos_class ,
                                                                                                                                          int * _Nullable __restrict  __relative_priority ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_get_qos_class_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:114 */

/* BEGIN TYPEDEF __uint32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:45 */
typedef unsigned int __uint32_t;
/* END TYPEDEF __uint32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:45 */

/* BEGIN TYPEDEF in_addr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_in_addr_t.h:31 */
typedef __uint32_t in_addr_t;
/* END TYPEDEF in_addr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_in_addr_t.h:31 */

/* BEGIN TYPEDEF int32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int32_t.h:30 */
typedef int int32_t;
/* END TYPEDEF int32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int32_t.h:30 */

/* BEGIN TYPEDEF daddr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:101 */
typedef int32_t daddr_t;
/* END TYPEDEF daddr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:101 */

/* BEGIN FUNCTION-DECL __darwin_fd_isset LOC=UNKNOWN */
__inline int ( __attribute__((__always_inline__)) __darwin_fd_isset)(int _fd , struct fd_set  const  *_p ) ;
/* END FUNCTION-DECL __darwin_fd_isset LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_fmodf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_fmodf128(_Float128  , _Float128  ) ;  */
/* END FUNCTION-DECL __builtin_fmodf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_arg_layout_create LOC=UNKNOWN */
static struct jit_arg_layout *jit_arg_layout_create(struct jit *jit , int arg_cnt ) ;
/* END FUNCTION-DECL jit_arg_layout_create LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_patch_external_calls LOC=UNKNOWN */
void jit_patch_external_calls(struct jit *jit ) ;
/* END FUNCTION-DECL jit_patch_external_calls LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_exit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:349 */
extern  __attribute__((__noreturn__)) void __attribute__((__availability__(macos,introduced=10.4),
__availability__(ios,introduced=2.0)))  pthread_exit(void * _Nullable   ) ;
/* END FUNCTION-DECL-EXTERN pthread_exit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:349 */

/* BEGIN FUNCTION-DECL __builtin_abort LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_abort(void) ;  */
/* END FUNCTION-DECL __builtin_abort LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_clrsb LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_clrsb(int  ) ;  */
/* END FUNCTION-DECL __builtin_clrsb LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN ctermid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctermid.h:26 */
extern char *ctermid(char * ) ;
/* END FUNCTION-DECL-EXTERN ctermid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctermid.h:26 */

/* BEGIN FUNCTION-DECL __builtin_fmodf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_fmodf(float  ) ;  */
/* END FUNCTION-DECL __builtin_fmodf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_va_arg LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_va_arg(__builtin_va_list  , unsigned long long  , void * ) ;  */
/* END FUNCTION-DECL __builtin_va_arg LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_fmodf16 LOC=BUILTIN */
/* compiler builtin: 
   _Float16 __builtin_fmodf16(_Float16  , _Float16  ) ;  */
/* END FUNCTION-DECL __builtin_fmodf16 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN fputs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:157 */
extern int fputs(char const   * __restrict   , FILE * __restrict   )  __asm__("_fputs")  ;
/* END FUNCTION-DECL-EXTERN fputs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:157 */

/* BEGIN FUNCTION-DECL-EXTERN arc4random_addrandom LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:265 */
extern void arc4random_addrandom(unsigned char * , int  )  __attribute__((__availability__(watchos,deprecated=3.0,message="use arc4random_stir"),
__availability__(watchos,introduced=1.0), __availability__(tvos,deprecated=10.0,message="use arc4random_stir"),
__availability__(tvos,introduced=2.0), __availability__(ios,deprecated=10.0,message="use arc4random_stir"),
__availability__(ios,introduced=2.0), __availability__(macosx,deprecated=10.12,message="use arc4random_stir"),
__availability__(macosx,introduced=10.0))) ;
/* END FUNCTION-DECL-EXTERN arc4random_addrandom LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:265 */

/* BEGIN TYPEDEF __darwin_suseconds_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:74 */
typedef __int32_t __darwin_suseconds_t;
/* END TYPEDEF __darwin_suseconds_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:74 */

/* BEGIN TYPEDEF __darwin_time_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:120 */
typedef long __darwin_time_t;
/* END TYPEDEF __darwin_time_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:120 */

/* BEGIN STRUCT timeval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timeval.h:34 */
struct timeval {
   __darwin_time_t tv_sec ;
   __darwin_suseconds_t tv_usec ;
};
/* END STRUCT timeval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timeval.h:34 */

/* BEGIN STRUCT rusage LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:152 */
struct rusage {
   struct timeval ru_utime ;
   struct timeval ru_stime ;
   long ru_maxrss ;
   long ru_ixrss ;
   long ru_idrss ;
   long ru_isrss ;
   long ru_minflt ;
   long ru_majflt ;
   long ru_nswap ;
   long ru_inblock ;
   long ru_oublock ;
   long ru_msgsnd ;
   long ru_msgrcv ;
   long ru_nsignals ;
   long ru_nvcsw ;
   long ru_nivcsw ;
};
/* END STRUCT rusage LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:152 */

/* BEGIN FUNCTION-DECL-EXTERN funlockfile LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:288 */
extern void funlockfile(FILE * ) ;
/* END FUNCTION-DECL-EXTERN funlockfile LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:288 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_setstackaddr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:284 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setstackaddr(pthread_attr_t * ,
                                                                                                                                     void * ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_setstackaddr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:284 */

/* BEGIN FUNCTION-DECL-EXTERN setiopolicy_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:453 */
extern int setiopolicy_np(int  , int  , int  )  __attribute__((__availability__(macosx,introduced=10.5))) ;
/* END FUNCTION-DECL-EXTERN setiopolicy_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:453 */

/* BEGIN FUNCTION-DECL-EXTERN setitimer LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:201 */
extern int setitimer(int  , struct itimerval  const  * __restrict   , struct itimerval * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN setitimer LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:201 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_set_qos_class_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:83 */
extern int __attribute__((__availability__(ios,introduced=8.0), __availability__(macos,introduced=10.10)))  pthread_attr_set_qos_class_np(pthread_attr_t *__attr ,
                                                                                                                                          qos_class_t __qos_class ,
                                                                                                                                          int __relative_priority ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_set_qos_class_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:83 */

/* BEGIN FUNCTION-DECL-EXTERN brk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:540 */
extern  __attribute__((__deprecated__)) void __attribute__((__availability__(watchos,unavailable),
__availability__(tvos,unavailable)))  *brk(void const   * ) ;
/* END FUNCTION-DECL-EXTERN brk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:540 */

/* BEGIN FUNCTION-DECL ob_new LOC=UNKNOWN */
static struct output_buf *ob_new(void) ;
/* END FUNCTION-DECL ob_new LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_acos LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_acos(double  ) ;  */
/* END FUNCTION-DECL __builtin_acos LOC=BUILTIN */

/* BEGIN VARIABLE-DECL-EXTERN optreset LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:782 */
extern int optreset ;
/* END VARIABLE-DECL-EXTERN optreset LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:782 */

/* BEGIN FUNCTION-DECL __builtin_ctanl LOC=BUILTIN */
/* compiler builtin: 
   _Complex long double __builtin_ctanl(_Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_ctanl LOC=BUILTIN */

/* BEGIN TYPEDEF u_int64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int64_t.h:30 */
typedef unsigned long long u_int64_t;
/* END TYPEDEF u_int64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int64_t.h:30 */

/* BEGIN FUNCTION-DECL-EXTERN tmpfile LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:182 */
extern FILE *tmpfile(void) ;
/* END FUNCTION-DECL-EXTERN tmpfile LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:182 */

/* BEGIN TYPEDEF __darwin_ct_rune_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:70 */
typedef int __darwin_ct_rune_t;
/* END TYPEDEF __darwin_ct_rune_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:70 */

/* BEGIN FUNCTION-DECL-EXTERN ___runetype LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:129 */
extern unsigned long ___runetype(__darwin_ct_rune_t  ) ;
/* END FUNCTION-DECL-EXTERN ___runetype LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:129 */

/* BEGIN FUNCTION-DECL-EXTERN getloadavg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:296 */
extern int getloadavg(double * , int  ) ;
/* END FUNCTION-DECL-EXTERN getloadavg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:296 */

/* BEGIN FUNCTION-DECL-EXTERN getpass LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:559 */
extern char *getpass(char const   * ) ;
/* END FUNCTION-DECL-EXTERN getpass LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:559 */

/* BEGIN FUNCTION-DECL __builtin_ctanhf LOC=BUILTIN */
/* compiler builtin: 
   _Complex float __builtin_ctanhf(_Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_ctanhf LOC=BUILTIN */

/* BEGIN TYPEDEF jit_tree LOC=./jitter-Darwin-X86-64.c:336 */
typedef struct jit_tree jit_tree;
/* END TYPEDEF jit_tree LOC=./jitter-Darwin-X86-64.c:336 */

/* BEGIN TYPEDEF jit_value LOC=./jitter-Darwin-X86-64.c:47 */
typedef long jit_value;
/* END TYPEDEF jit_value LOC=./jitter-Darwin-X86-64.c:47 */

/* BEGIN TYPEDEF jit_tree_key LOC=./jitter-Darwin-X86-64.c:333 */
typedef jit_value jit_tree_key;
/* END TYPEDEF jit_tree_key LOC=./jitter-Darwin-X86-64.c:333 */

/* BEGIN TYPEDEF jit_tree_value LOC=./jitter-Darwin-X86-64.c:334 */
typedef void *jit_tree_value;
/* END TYPEDEF jit_tree_value LOC=./jitter-Darwin-X86-64.c:334 */

/* BEGIN FUNCTION-DECL node_new LOC=UNKNOWN */
__inline static jit_tree *node_new(jit_tree_key key , jit_tree_value value ) ;
/* END FUNCTION-DECL node_new LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_wctype_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types.h:43 */
typedef __uint32_t __darwin_wctype_t;
/* END TYPEDEF __darwin_wctype_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types.h:43 */

/* BEGIN ENUM __anonenum_AMD64_REX_Bits_69261688 LOC=./jitter-Darwin-X86-64.c:1053 */
enum __anonenum_AMD64_REX_Bits_69261688 {
    AMD64_REX_B = 1,
    AMD64_REX_X = 2,
    AMD64_REX_R = 4,
    AMD64_REX_W = 8
} ;
/* END ENUM __anonenum_AMD64_REX_Bits_69261688 LOC=./jitter-Darwin-X86-64.c:1053 */

/* BEGIN FUNCTION-DECL isphonogram LOC=UNKNOWN */
__inline int isphonogram(int _c ) ;
/* END FUNCTION-DECL isphonogram LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_va_arg_pack LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_va_arg_pack(void) ;  */
/* END FUNCTION-DECL __builtin_va_arg_pack LOC=BUILTIN */

/* BEGIN TYPEDEF __uint8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:41 */
typedef unsigned char __uint8_t;
/* END TYPEDEF __uint8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:41 */

/* BEGIN FUNCTION-DECL __builtin_casinh LOC=BUILTIN */
/* compiler builtin: 
   _Complex double __builtin_casinh(_Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_casinh LOC=BUILTIN */

/* BEGIN STRUCT jit_rmap LOC=./jitter-Darwin-X86-64.c:683 */
struct jit_rmap {
   jit_tree *map ;
};
/* END STRUCT jit_rmap LOC=./jitter-Darwin-X86-64.c:683 */

/* BEGIN FUNCTION-DECL jit_arg_layout_create_input LOC=UNKNOWN */
static struct jit_arg_layout *jit_arg_layout_create_input(struct jit *jit , struct jit_func_info *info ,
                                                          int arg_cnt ) ;
/* END FUNCTION-DECL jit_arg_layout_create_input LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_rintl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_rintl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_rintl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_isfinite LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_isfinite(...) ;  */
/* END FUNCTION-DECL __builtin_isfinite LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_isgreater LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_isgreater(...) ;  */
/* END FUNCTION-DECL __builtin_isgreater LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN fileno LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:212 */
extern int fileno(FILE * ) ;
/* END FUNCTION-DECL-EXTERN fileno LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:212 */

/* BEGIN TYPEDEF __darwin_va_list LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:98 */
typedef __builtin_va_list __darwin_va_list;
/* END TYPEDEF __darwin_va_list LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:98 */

/* BEGIN TYPEDEF va_list LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_va_list.h:32 */
typedef __darwin_va_list va_list;
/* END TYPEDEF va_list LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_va_list.h:32 */

/* BEGIN FUNCTION-DECL-EXTERN vsprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:192 */
extern int ( /* format attribute */  vsprintf)(char * __restrict   , char const   * __restrict   ,
                                               va_list  )  __attribute__((__availability__(swift,unavailable,message="Use vsnprintf instead."))) ;
/* END FUNCTION-DECL-EXTERN vsprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:192 */

/* BEGIN TYPEDEF __darwin_gid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:60 */
typedef __uint32_t __darwin_gid_t;
/* END TYPEDEF __darwin_gid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:60 */

/* BEGIN TYPEDEF gid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_gid_t.h:31 */
typedef __darwin_gid_t gid_t;
/* END TYPEDEF gid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_gid_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN getgroups LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:456 */
extern int getgroups(int  , gid_t * ) ;
/* END FUNCTION-DECL-EXTERN getgroups LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:456 */

/* BEGIN FUNCTION-DECL-EXTERN vprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:191 */
extern int ( /* format attribute */  vprintf)(char const   * __restrict   , va_list  ) ;
/* END FUNCTION-DECL-EXTERN vprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:191 */

/* BEGIN FUNCTION-DECL isideogram LOC=UNKNOWN */
__inline int isideogram(int _c ) ;
/* END FUNCTION-DECL isideogram LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN strtok_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:104 */
extern char *strtok_r(char *__str , char const   *__sep , char **__lasts ) ;
/* END FUNCTION-DECL-EXTERN strtok_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:104 */

/* BEGIN FUNCTION-DECL __builtin_expm1l LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_expm1l(long double  ) ;  */
/* END FUNCTION-DECL __builtin_expm1l LOC=BUILTIN */

/* BEGIN TYPEDEF __darwin_pthread_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:118 */
typedef struct _opaque_pthread_t *__darwin_pthread_t;
/* END TYPEDEF __darwin_pthread_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:118 */

/* BEGIN TYPEDEF pthread_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_t.h:31 */
typedef __darwin_pthread_t pthread_t;
/* END TYPEDEF pthread_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_self LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:477 */
extern pthread_t __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  pthread_self(void) ;
/* END FUNCTION-DECL-EXTERN pthread_self LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:477 */

/* BEGIN FUNCTION-DECL __builtin_csqrt LOC=BUILTIN */
/* compiler builtin: 
   _Complex double __builtin_csqrt(_Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_csqrt LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_optimize_join_addmul LOC=UNKNOWN */
int jit_optimize_join_addmul(struct jit *jit ) ;
/* END FUNCTION-DECL jit_optimize_join_addmul LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN strcasecmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:78 */
extern int strcasecmp(char const   * , char const   * ) ;
/* END FUNCTION-DECL-EXTERN strcasecmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:78 */

/* BEGIN STRUCT __darwin_fp_control LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:92 */
struct __darwin_fp_control {
   unsigned short __invalid : 1 ;
   unsigned short __denorm : 1 ;
   unsigned short __zdiv : 1 ;
   unsigned short __ovrfl : 1 ;
   unsigned short __undfl : 1 ;
   unsigned short __precis : 1 ;
   unsigned short  : 2 ;
   unsigned short __pc : 2 ;
   unsigned short __rc : 2 ;
   unsigned short  : 1 ;
   unsigned short  : 3 ;
};
/* END STRUCT __darwin_fp_control LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:92 */

/* BEGIN STRUCT __darwin_fp_status LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:150 */
struct __darwin_fp_status {
   unsigned short __invalid : 1 ;
   unsigned short __denorm : 1 ;
   unsigned short __zdiv : 1 ;
   unsigned short __ovrfl : 1 ;
   unsigned short __undfl : 1 ;
   unsigned short __precis : 1 ;
   unsigned short __stkflt : 1 ;
   unsigned short __errsumm : 1 ;
   unsigned short __c0 : 1 ;
   unsigned short __c1 : 1 ;
   unsigned short __c2 : 1 ;
   unsigned short __tos : 3 ;
   unsigned short __c3 : 1 ;
   unsigned short __busy : 1 ;
};
/* END STRUCT __darwin_fp_status LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:150 */

/* BEGIN STRUCT __darwin_mmst_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:194 */
struct __darwin_mmst_reg {
   char __mmst_reg[10] ;
   char __mmst_rsrv[6] ;
};
/* END STRUCT __darwin_mmst_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:194 */

/* BEGIN STRUCT __darwin_xmm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:213 */
struct __darwin_xmm_reg {
   char __xmm_reg[16] ;
};
/* END STRUCT __darwin_xmm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:213 */

/* BEGIN TYPEDEF __uint16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:43 */
typedef unsigned short __uint16_t;
/* END TYPEDEF __uint16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:43 */

/* BEGIN STRUCT __darwin_i386_avx_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:318 */
struct __darwin_i386_avx_state {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   char __fpu_rsrv4[224] ;
   int __fpu_reserved1 ;
   char __avx_reserved1[64] ;
   struct __darwin_xmm_reg __fpu_ymmh0 ;
   struct __darwin_xmm_reg __fpu_ymmh1 ;
   struct __darwin_xmm_reg __fpu_ymmh2 ;
   struct __darwin_xmm_reg __fpu_ymmh3 ;
   struct __darwin_xmm_reg __fpu_ymmh4 ;
   struct __darwin_xmm_reg __fpu_ymmh5 ;
   struct __darwin_xmm_reg __fpu_ymmh6 ;
   struct __darwin_xmm_reg __fpu_ymmh7 ;
};
/* END STRUCT __darwin_i386_avx_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:318 */

/* BEGIN FUNCTION-DECL __builtin_clzs LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_clzs(short  ) ;  */
/* END FUNCTION-DECL __builtin_clzs LOC=BUILTIN */

/* BEGIN TYPEDEF jit_hw_reg LOC=./jitter-Darwin-X86-64.c:659 */
typedef struct __anonstruct_jit_hw_reg_312769258 jit_hw_reg;
/* END TYPEDEF jit_hw_reg LOC=./jitter-Darwin-X86-64.c:659 */

/* BEGIN TYPEDEF jit_op LOC=./jitter-Darwin-X86-64.c:67 */
typedef struct jit_op jit_op;
/* END TYPEDEF jit_op LOC=./jitter-Darwin-X86-64.c:67 */

/* BEGIN FUNCTION-DECL is_active_register LOC=UNKNOWN */
static int is_active_register(struct jit_reg_allocator *al , jit_hw_reg *reg , jit_op *op ) ;
/* END FUNCTION-DECL is_active_register LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_pid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:72 */
typedef __int32_t __darwin_pid_t;
/* END TYPEDEF __darwin_pid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:72 */

/* BEGIN TYPEDEF pid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_pid_t.h:31 */
typedef __darwin_pid_t pid_t;
/* END TYPEDEF pid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_pid_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN setpgrp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:588 */
extern pid_t setpgrp(void)  __asm__("_setpgrp")  ;
/* END FUNCTION-DECL-EXTERN setpgrp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:588 */

/* BEGIN FUNCTION-DECL-EXTERN mkstempsat_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:689 */
extern int mkstempsat_np(int dfd , char *path , int slen )  __attribute__((__availability__(watchos,introduced=4.0),
__availability__(tvos,introduced=11.0), __availability__(ios,introduced=11.0), __availability__(macosx,introduced=10.13))) ;
/* END FUNCTION-DECL-EXTERN mkstempsat_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:689 */

/* BEGIN FUNCTION-DECL __builtin_ilogbf LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_ilogbf(float  ) ;  */
/* END FUNCTION-DECL __builtin_ilogbf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin___get_unsafe_stack_bottom LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin___get_unsafe_stack_bottom(void) ;  */
/* END FUNCTION-DECL __builtin___get_unsafe_stack_bottom LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_llrintf LOC=BUILTIN */
/* compiler builtin: 
   long long __builtin_llrintf(float  ) ;  */
/* END FUNCTION-DECL __builtin_llrintf LOC=BUILTIN */

/* BEGIN TYPEDEF fd_set LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h:50 */
typedef struct fd_set fd_set;
/* END TYPEDEF fd_set LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h:50 */

/* BEGIN FUNCTION-DECL jump_adjustment LOC=UNKNOWN */
__inline static void jump_adjustment(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL jump_adjustment LOC=UNKNOWN */

/* BEGIN STRUCT _opaque_pthread_condattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:73 */
struct _opaque_pthread_condattr_t {
   long __sig ;
   char __opaque[8] ;
};
/* END STRUCT _opaque_pthread_condattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:73 */

/* BEGIN TYPEDEF __darwin_pthread_condattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:111 */
typedef struct _opaque_pthread_condattr_t __darwin_pthread_condattr_t;
/* END TYPEDEF __darwin_pthread_condattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:111 */

/* BEGIN TYPEDEF pthread_condattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_condattr_t.h:31 */
typedef __darwin_pthread_condattr_t pthread_condattr_t;
/* END TYPEDEF pthread_condattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_condattr_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_condattr_getpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:324 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_condattr_getpshared(pthread_condattr_t const   * __restrict   ,
                                                                                                                                       int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_condattr_getpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:324 */

/* BEGIN FUNCTION-DECL-EXTERN ptsname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:221 */
extern char *ptsname(int  ) ;
/* END FUNCTION-DECL-EXTERN ptsname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:221 */

/* BEGIN FUNCTION-DECL __builtin_asin LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_asin(double  ) ;  */
/* END FUNCTION-DECL __builtin_asin LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_tree_equal LOC=UNKNOWN */
static int jit_tree_equal(jit_tree *r1 , jit_tree *r2 ) ;
/* END FUNCTION-DECL jit_tree_equal LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN rand_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:229 */
extern int rand_r(unsigned int * )  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
/* END FUNCTION-DECL-EXTERN rand_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:229 */

/* BEGIN UNION _TIG_VZ_HQIz_3_fib_$node LOC=UNKNOWN */
union _TIG_VZ_HQIz_3_fib_$node {
   unsigned int _unsigned_int ;
   void *_void_star ;
   signed char _signed_char ;
   unsigned long long _unsigned_long_long ;
   int _int ;
   short _short ;
   long long _long_long ;
   unsigned char _unsigned_char ;
   unsigned short _unsigned_short ;
   float _float ;
   unsigned long _unsigned_long ;
   long _long ;
   long double _long_double ;
   char _char ;
   double _double ;
};
/* END UNION _TIG_VZ_HQIz_3_fib_$node LOC=UNKNOWN */

/* BEGIN TYPEDEF int_fast32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:42 */
typedef int32_t int_fast32_t;
/* END TYPEDEF int_fast32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:42 */

/* BEGIN TYPEDEF __int64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:46 */
typedef long long __int64_t;
/* END TYPEDEF __int64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:46 */

/* BEGIN TYPEDEF __darwin_off_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:71 */
typedef __int64_t __darwin_off_t;
/* END TYPEDEF __darwin_off_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:71 */

/* BEGIN TYPEDEF fpos_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:81 */
typedef __darwin_off_t fpos_t;
/* END TYPEDEF fpos_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:81 */

/* BEGIN FUNCTION-DECL-EXTERN daemon LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:292 */
extern int daemon(int  , int  )  __asm__("_daemon$1050") __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable), __availability__(macosx,introduced=10.0,deprecated=10.5,message="Use posix_spawn APIs instead."))) ;
/* END FUNCTION-DECL-EXTERN daemon LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:292 */

/* BEGIN TYPEDEF time_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_time_t.h:31 */
typedef __darwin_time_t time_t;
/* END TYPEDEF time_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_time_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN time LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:118 */
extern time_t time(time_t * ) ;
/* END FUNCTION-DECL-EXTERN time LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:118 */

/* BEGIN FUNCTION-DECL isrune LOC=UNKNOWN */
__inline int isrune(int _c ) ;
/* END FUNCTION-DECL isrune LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_asinf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_asinf(float  ) ;  */
/* END FUNCTION-DECL __builtin_asinf LOC=BUILTIN */

/* BEGIN TYPEDEF segsz_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:125 */
typedef int32_t segsz_t;
/* END TYPEDEF segsz_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:125 */

/* BEGIN FUNCTION-DECL-EXTERN getopt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:509 */
extern int getopt(int  , char ** , char const   * )  __asm__("_getopt")  ;
/* END FUNCTION-DECL-EXTERN getopt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:509 */

/* BEGIN TYPEDEF fd_mask LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:189 */
typedef __int32_t fd_mask;
/* END TYPEDEF fd_mask LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:189 */

/* BEGIN FUNCTION-DECL tolower LOC=UNKNOWN */
__inline int tolower(int _c ) ;
/* END FUNCTION-DECL tolower LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_fmaf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_fmaf128(_Float128  , _Float128  , _Float128  ) ;  */
/* END FUNCTION-DECL __builtin_fmaf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN __srget LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:249 */
extern int __srget(FILE * ) ;
/* END FUNCTION-DECL-EXTERN __srget LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:249 */

/* BEGIN FUNCTION-DECL-EXTERN getsid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:553 */
extern pid_t getsid(pid_t  ) ;
/* END FUNCTION-DECL-EXTERN getsid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:553 */

/* BEGIN TYPEDEF __darwin_size_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:92 */
typedef unsigned long __darwin_size_t;
/* END TYPEDEF __darwin_size_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:92 */

/* BEGIN TYPEDEF size_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h:31 */
typedef __darwin_size_t size_t;
/* END TYPEDEF size_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN malloc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:40 */
extern void *( __attribute__((__warn_unused_result__)) malloc)(size_t size )  __attribute__((__alloc_size__(1))) ;
/* END FUNCTION-DECL-EXTERN malloc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:40 */

/* BEGIN FUNCTION-DECL-EXTERN fchdir LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:550 */
extern int fchdir(int  ) ;
/* END FUNCTION-DECL-EXTERN fchdir LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:550 */

/* BEGIN FUNCTION-DECL __builtin_coshl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_coshl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_coshl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN _exit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:430 */
extern  __attribute__((__noreturn__)) void _exit(int  ) ;
/* END FUNCTION-DECL-EXTERN _exit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:430 */

/* BEGIN FUNCTION-DECL __builtin_llrintf128 LOC=BUILTIN */
/* compiler builtin: 
   long long __builtin_llrintf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_llrintf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_atan2f128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_atan2f128(_Float128  , _Float128  ) ;  */
/* END FUNCTION-DECL __builtin_atan2f128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL is_suitable_mul LOC=UNKNOWN */
__inline static int is_suitable_mul(jit_op *op ) ;
/* END FUNCTION-DECL is_suitable_mul LOC=UNKNOWN */

/* BEGIN TYPEDEF int64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int64_t.h:30 */
typedef long long int64_t;
/* END TYPEDEF int64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int64_t.h:30 */

/* BEGIN TYPEDEF register_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:87 */
typedef int64_t register_t;
/* END TYPEDEF register_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:87 */

/* BEGIN TYPEDEF amd64_imm_buf LOC=./jitter-Darwin-X86-64.c:1060 */
typedef union __anonunion_amd64_imm_buf_34291009 amd64_imm_buf;
/* END TYPEDEF amd64_imm_buf LOC=./jitter-Darwin-X86-64.c:1060 */

/* BEGIN FUNCTION-DECL-EXTERN tcgetpgrp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:484 */
extern pid_t tcgetpgrp(int  ) ;
/* END FUNCTION-DECL-EXTERN tcgetpgrp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:484 */

/* BEGIN FUNCTION-DECL-EXTERN adjtime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:190 */
extern int adjtime(struct timeval  const  * , struct timeval * ) ;
/* END FUNCTION-DECL-EXTERN adjtime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:190 */

/* BEGIN TYPEDEF __darwin_ptrdiff_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:84 */
typedef long __darwin_ptrdiff_t;
/* END TYPEDEF __darwin_ptrdiff_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:84 */

/* BEGIN FUNCTION-DECL __builtin_strpbrk LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin_strpbrk(char const   * , char const   * ) ;  */
/* END FUNCTION-DECL __builtin_strpbrk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_allocator_hints_free LOC=UNKNOWN */
void jit_allocator_hints_free(jit_tree *hints ) ;
/* END FUNCTION-DECL jit_allocator_hints_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN getw LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:296 */
extern int getw(FILE * ) ;
/* END FUNCTION-DECL-EXTERN getw LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:296 */

/* BEGIN TYPEDEF AMD64_Reg_No LOC=./jitter-Darwin-X86-64.c:1012 */
typedef enum jit_amd64_gp_regs AMD64_Reg_No;
/* END TYPEDEF AMD64_Reg_No LOC=./jitter-Darwin-X86-64.c:1012 */

/* BEGIN FUNCTION-DECL-EXTERN realpath LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:231 */
extern char *realpath(char const   * __restrict   , char * __restrict   )  __asm__("_realpath$DARWIN_EXTSN")  ;
/* END FUNCTION-DECL-EXTERN realpath LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:231 */

/* BEGIN FUNCTION-DECL emit_push_caller_saved_regs LOC=UNKNOWN */
static int emit_push_caller_saved_regs(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_push_caller_saved_regs LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_uid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:75 */
typedef __uint32_t __darwin_uid_t;
/* END TYPEDEF __darwin_uid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:75 */

/* BEGIN TYPEDEF uid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uid_t.h:31 */
typedef __darwin_uid_t uid_t;
/* END TYPEDEF uid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uid_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN chown LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:435 */
extern int chown(char const   * , uid_t  , gid_t  ) ;
/* END FUNCTION-DECL-EXTERN chown LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:435 */

/* BEGIN FUNCTION-DECL jit_optimize_join_addimm LOC=UNKNOWN */
int jit_optimize_join_addimm(struct jit *jit ) ;
/* END FUNCTION-DECL jit_optimize_join_addimm LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL make_nop LOC=UNKNOWN */
__inline static void make_nop(jit_op *op ) ;
/* END FUNCTION-DECL make_nop LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL fib LOC=UNKNOWN */
void fib(int n ) ;
/* END FUNCTION-DECL fib LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_cbrt LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_cbrt(double  ) ;  */
/* END FUNCTION-DECL __builtin_cbrt LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin___get_unsafe_stack_ptr LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin___get_unsafe_stack_ptr(void) ;  */
/* END FUNCTION-DECL __builtin___get_unsafe_stack_ptr LOC=BUILTIN */

/* BEGIN FUNCTION-DECL make_free_reg LOC=UNKNOWN */
static jit_hw_reg *make_free_reg(struct jit_reg_allocator *al , jit_op *op , jit_value for_reg ) ;
/* END FUNCTION-DECL make_free_reg LOC=UNKNOWN */

/* BEGIN STRUCT-DECL jit_set LOC=./jitter-Darwin-X86-64.c:63 */
struct jit_set ;
/* END STRUCT-DECL jit_set LOC=./jitter-Darwin-X86-64.c:63 */

/* BEGIN FUNCTION-DECL __builtin_lroundf LOC=BUILTIN */
/* compiler builtin: 
   long __builtin_lroundf(float  ) ;  */
/* END FUNCTION-DECL __builtin_lroundf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_scalblnl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_scalblnl(long double  , long  ) ;  */
/* END FUNCTION-DECL __builtin_scalblnl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __darwin_check_fd_set LOC=UNKNOWN */
__inline int ( __attribute__((__always_inline__)) __darwin_check_fd_set)(int _a ,
                                                                         void const   *_b ) ;
/* END FUNCTION-DECL __darwin_check_fd_set LOC=UNKNOWN */

/* BEGIN TYPEDEF lldiv_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:94 */
typedef struct __anonstruct_lldiv_t_86583852 lldiv_t;
/* END TYPEDEF lldiv_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:94 */

/* BEGIN FUNCTION-DECL jit_current_func_info LOC=UNKNOWN */
__inline static struct jit_func_info *jit_current_func_info(struct jit *jit ) ;
/* END FUNCTION-DECL jit_current_func_info LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_rotateright32 LOC=BUILTIN */
/* compiler builtin: 
   unsigned int __builtin_rotateright32(unsigned int  , unsigned int  ) ;  */
/* END FUNCTION-DECL __builtin_rotateright32 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_nontemporal_store LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_nontemporal_store(...) ;  */
/* END FUNCTION-DECL __builtin_nontemporal_store LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_strcat LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin_strcat(char * , char const   * ) ;  */
/* END FUNCTION-DECL __builtin_strcat LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_cimagf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_cimagf(_Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_cimagf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_funcall LOC=UNKNOWN */
static void emit_funcall(struct jit *jit , struct jit_op *op , int imm ) ;
/* END FUNCTION-DECL emit_funcall LOC=UNKNOWN */

/* BEGIN STRUCT jit_disasm LOC=./jitter-Darwin-X86-64.c:4031 */
struct jit_disasm {
   char *indent_template ;
   char *reg_template ;
   char *freg_template ;
   char *arg_template ;
   char *farg_template ;
   char *reg_fp_template ;
   char *reg_out_template ;
   char *reg_imm_template ;
   char *reg_fimm_template ;
   char *reg_unknown_template ;
   char *label_template ;
   char *label_forward_template ;
   char *generic_addr_template ;
   char *generic_value_template ;
};
/* END STRUCT jit_disasm LOC=./jitter-Darwin-X86-64.c:4031 */

/* BEGIN VARIABLE-DECL jit_disasm_compilable LOC=UNKNOWN */
struct jit_disasm jit_disasm_compilable ;
/* END VARIABLE-DECL jit_disasm_compilable LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_popcountll LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_popcountll(unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_popcountll LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_isless LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_isless(...) ;  */
/* END FUNCTION-DECL __builtin_isless LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_copysignf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_copysignf128(_Float128  , _Float128  ) ;  */
/* END FUNCTION-DECL __builtin_copysignf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_lroundf128 LOC=BUILTIN */
/* compiler builtin: 
   long __builtin_lroundf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_lroundf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN ffs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:77 */
extern int ffs(int  ) ;
/* END FUNCTION-DECL-EXTERN ffs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:77 */

/* BEGIN FUNCTION-DECL __builtin_unreachable LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_unreachable(void) ;  */
/* END FUNCTION-DECL __builtin_unreachable LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN searchfs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:772 */
extern int searchfs(char const   * , struct fssearchblock * , unsigned long * , unsigned int  ,
                    unsigned int  , struct searchstate * )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN searchfs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:772 */

/* BEGIN TYPEDEF __darwin_useconds_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:76 */
typedef __uint32_t __darwin_useconds_t;
/* END TYPEDEF __darwin_useconds_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:76 */

/* BEGIN TYPEDEF useconds_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_useconds_t.h:31 */
typedef __darwin_useconds_t useconds_t;
/* END TYPEDEF useconds_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_useconds_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN ualarm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:600 */
extern useconds_t ualarm(useconds_t  , useconds_t  ) ;
/* END FUNCTION-DECL-EXTERN ualarm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:600 */

/* BEGIN STRUCT transfer_info LOC=./jitter-Darwin-X86-64.c:3399 */
struct transfer_info {
   int sourcereg ;
   int destreg ;
   int scrapreg ;
   int scrap_in_use ;
   int counterreg ;
   int counter_in_use ;
   int block_size ;
   unsigned char *loop_addr ;
};
/* END STRUCT transfer_info LOC=./jitter-Darwin-X86-64.c:3399 */

/* BEGIN FUNCTION-DECL emit_sse_branch LOC=UNKNOWN */
static void emit_sse_branch(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                            jit_value a3 , int x86_cond ) ;
/* END FUNCTION-DECL emit_sse_branch LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_blkcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:55 */
typedef __int64_t __darwin_blkcnt_t;
/* END TYPEDEF __darwin_blkcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:55 */

/* BEGIN FUNCTION-DECL isspace LOC=UNKNOWN */
__inline int isspace(int _c ) ;
/* END FUNCTION-DECL isspace LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_fminl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_fminl(long double  , long double  ) ;  */
/* END FUNCTION-DECL __builtin_fminl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin___memset_chk LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin___memset_chk(void * , int  , unsigned long long  , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin___memset_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_sse_div_op LOC=UNKNOWN */
static void emit_sse_div_op(struct jit *jit , jit_value a1 , jit_value a2 , jit_value a3 ) ;
/* END FUNCTION-DECL emit_sse_div_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_getconcurrency LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:352 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_getconcurrency(void) ;
/* END FUNCTION-DECL-EXTERN pthread_getconcurrency LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:352 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_cond_signal LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:305 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_signal(pthread_cond_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_cond_signal LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:305 */

/* BEGIN FUNCTION-DECL emit_ldx_op LOC=UNKNOWN */
static void emit_ldx_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                        jit_value a3 ) ;
/* END FUNCTION-DECL emit_ldx_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN getpid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:460 */
extern pid_t getpid(void) ;
/* END FUNCTION-DECL-EXTERN getpid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:460 */

/* BEGIN FUNCTION-DECL join_addi_addr LOC=UNKNOWN */
static int join_addi_addr(jit_op *op , jit_op *nextop ) ;
/* END FUNCTION-DECL join_addi_addr LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_op_is_data_op LOC=UNKNOWN */
static int jit_op_is_data_op(jit_op *op ) ;
/* END FUNCTION-DECL jit_op_is_data_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL initialize_code_refs LOC=UNKNOWN */
__inline static void initialize_code_refs(struct code_refs_cache *code_refs , struct jit_func_info *func_info ) ;
/* END FUNCTION-DECL initialize_code_refs LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_wctrans_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types.h:41 */
typedef int __darwin_wctrans_t;
/* END TYPEDEF __darwin_wctrans_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types.h:41 */

/* BEGIN TYPEDEF __int8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:37 */
typedef signed char __int8_t;
/* END TYPEDEF __int8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:37 */

/* BEGIN FUNCTION-DECL __builtin_coshf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_coshf(float  ) ;  */
/* END FUNCTION-DECL __builtin_coshf LOC=BUILTIN */

/* BEGIN STRUCT-DECL __sFILEX LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:98 */
struct __sFILEX ;
/* END STRUCT-DECL __sFILEX LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:98 */

/* BEGIN FUNCTION-DECL-EXTERN vsnprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:337 */
extern int ( /* format attribute */  vsnprintf)(char * __restrict  __str , size_t __size ,
                                                char const   * __restrict  __format ,
                                                va_list  ) ;
/* END FUNCTION-DECL-EXTERN vsnprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:337 */

/* BEGIN FUNCTION-DECL __builtin_floor LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_floor(double  ) ;  */
/* END FUNCTION-DECL __builtin_floor LOC=BUILTIN */

/* BEGIN TYPEDEF __darwin_natural_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:50 */
typedef unsigned int __darwin_natural_t;
/* END TYPEDEF __darwin_natural_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:50 */

/* BEGIN TYPEDEF __darwin_mach_port_name_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:68 */
typedef __darwin_natural_t __darwin_mach_port_name_t;
/* END TYPEDEF __darwin_mach_port_name_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:68 */

/* BEGIN TYPEDEF __darwin_mach_port_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:69 */
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
/* END TYPEDEF __darwin_mach_port_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:69 */

/* BEGIN TYPEDEF mach_port_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_mach_port_t.h:50 */
typedef __darwin_mach_port_t mach_port_t;
/* END TYPEDEF mach_port_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_mach_port_t.h:50 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mach_thread_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:521 */
extern mach_port_t __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  pthread_mach_thread_np(pthread_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_mach_thread_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:521 */

/* BEGIN FUNCTION-DECL-EXTERN nice LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:571 */
extern int nice(int  )  __asm__("_nice")  ;
/* END FUNCTION-DECL-EXTERN nice LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:571 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutex_lock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:383 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_lock(pthread_mutex_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutex_lock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:383 */

/* BEGIN FUNCTION-DECL __builtin_infl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_infl(void) ;  */
/* END FUNCTION-DECL __builtin_infl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_cbrtf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_cbrtf(float  ) ;  */
/* END FUNCTION-DECL __builtin_cbrtf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN erand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:202 */
extern double erand48(unsigned short * ) ;
/* END FUNCTION-DECL-EXTERN erand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:202 */

/* BEGIN FUNCTION-DECL-EXTERN gethostname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:622 */
extern int gethostname(char * , size_t  ) ;
/* END FUNCTION-DECL-EXTERN gethostname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:622 */

/* BEGIN FUNCTION-DECL __builtin_fprintf LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_fprintf(void * , char const   *  , ...) ;  */
/* END FUNCTION-DECL __builtin_fprintf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN getdate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:112 */
extern struct tm *getdate(char const   * ) ;
/* END FUNCTION-DECL-EXTERN getdate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:112 */

/* BEGIN FUNCTION-DECL emit_transfer_loop LOC=UNKNOWN */
static void emit_transfer_loop(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_transfer_loop LOC=UNKNOWN */

/* BEGIN ENUM __anonenum_idtype_t_558242672 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:79 */
enum __anonenum_idtype_t_558242672 {
    P_ALL = 0,
    P_PID = 1,
    P_PGID = 2
} ;
/* END ENUM __anonenum_idtype_t_558242672 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:79 */

/* BEGIN TYPEDEF __darwin_id_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:61 */
typedef __uint32_t __darwin_id_t;
/* END TYPEDEF __darwin_id_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:61 */

/* BEGIN TYPEDEF id_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_id_t.h:31 */
typedef __darwin_id_t id_t;
/* END TYPEDEF id_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_id_t.h:31 */

/* BEGIN TYPEDEF idtype_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:79 */
typedef enum __anonenum_idtype_t_558242672 idtype_t;
/* END TYPEDEF idtype_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:79 */

/* BEGIN TYPEDEF siginfo_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:177 */
typedef struct __siginfo siginfo_t;
/* END TYPEDEF siginfo_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:177 */

/* BEGIN FUNCTION-DECL-EXTERN waitid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:251 */
extern int waitid(idtype_t  , id_t  , siginfo_t * , int  )  __asm__("_waitid")  ;
/* END FUNCTION-DECL-EXTERN waitid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:251 */

/* BEGIN TYPEDEF __darwin_mode_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:70 */
typedef __uint16_t __darwin_mode_t;
/* END TYPEDEF __darwin_mode_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:70 */

/* BEGIN FUNCTION-DECL-EXTERN mlockall LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:218 */
extern int mlockall(int  ) ;
/* END FUNCTION-DECL-EXTERN mlockall LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:218 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_getstacksize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:256 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getstacksize(pthread_attr_t const   * __restrict   ,
                                                                                                                                     size_t * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_getstacksize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:256 */

/* BEGIN FUNCTION-DECL-EXTERN setreuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:595 */
extern int setreuid(uid_t  , uid_t  )  __asm__("_setreuid")  ;
/* END FUNCTION-DECL-EXTERN setreuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:595 */

/* BEGIN FUNCTION-DECL-EXTERN memmem LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:155 */
extern void *memmem(void const   *__big , size_t __big_len , void const   *__little ,
                    size_t __little_len )  __attribute__((__availability__(macosx,introduced=10.7))) ;
/* END FUNCTION-DECL-EXTERN memmem LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:155 */

/* BEGIN FUNCTION-DECL __builtin_labs LOC=BUILTIN */
/* compiler builtin: 
   long __builtin_labs(long  ) ;  */
/* END FUNCTION-DECL __builtin_labs LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN exit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:145 */
extern  __attribute__((__noreturn__)) void exit(int  ) ;
/* END FUNCTION-DECL-EXTERN exit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:145 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_setschedparam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:491 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_setschedparam(pthread_t  ,
                                                                                                                                 int  ,
                                                                                                                                 struct sched_param  const  * ) ;
/* END FUNCTION-DECL-EXTERN pthread_setschedparam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:491 */

/* BEGIN FUNCTION-DECL __builtin_strncmp LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_strncmp(char const   * , char const   * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_strncmp LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN putc_unlocked LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:291 */
extern int putc_unlocked(int  , FILE * ) ;
/* END FUNCTION-DECL-EXTERN putc_unlocked LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:291 */

/* BEGIN FUNCTION-DECL __builtin_scalbn LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_scalbn(double  , int  ) ;  */
/* END FUNCTION-DECL __builtin_scalbn LOC=BUILTIN */

/* BEGIN TYPEDEF jit_label LOC=./jitter-Darwin-X86-64.c:92 */
typedef struct jit_label jit_label;
/* END TYPEDEF jit_label LOC=./jitter-Darwin-X86-64.c:92 */

/* BEGIN FUNCTION-DECL free_labels LOC=UNKNOWN */
static void free_labels(jit_label *lab ) ;
/* END FUNCTION-DECL free_labels LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_nanf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_nanf128(char const   * ) ;  */
/* END FUNCTION-DECL __builtin_nanf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN vscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:336 */
extern int ( /* format attribute */  vscanf)(char const   * __restrict  __format ,
                                             va_list  ) ;
/* END FUNCTION-DECL-EXTERN vscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:336 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_get_qos_class_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:186 */
extern int __attribute__((__availability__(ios,introduced=8.0), __availability__(macos,introduced=10.10)))  pthread_get_qos_class_np(pthread_t __pthread ,
                                                                                                                                     qos_class_t * _Nullable __restrict  __qos_class ,
                                                                                                                                     int * _Nullable __restrict  __relative_priority ) ;
/* END FUNCTION-DECL-EXTERN pthread_get_qos_class_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:186 */

/* BEGIN STRUCT _opaque_pthread_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:103 */
struct _opaque_pthread_t {
   long __sig ;
   struct __darwin_pthread_handler_rec *__cleanup_stack ;
   char __opaque[8176] ;
};
/* END STRUCT _opaque_pthread_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:103 */

/* BEGIN FUNCTION-DECL mark_livecode LOC=UNKNOWN */
__inline static void mark_livecode(jit_op *op ) ;
/* END FUNCTION-DECL mark_livecode LOC=UNKNOWN */

/* BEGIN VARIABLE-DECL-EXTERN __mb_cur_max LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:118 */
extern int __mb_cur_max ;
/* END VARIABLE-DECL-EXTERN __mb_cur_max LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:118 */

/* BEGIN FUNCTION-DECL-EXTERN getiopolicy_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:447 */
extern int getiopolicy_np(int  , int  )  __attribute__((__availability__(macosx,introduced=10.5))) ;
/* END FUNCTION-DECL-EXTERN getiopolicy_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:447 */

/* BEGIN VARIABLE-DECL bufx LOC=UNKNOWN */
static unsigned char bufx[32] ;
/* END VARIABLE-DECL bufx LOC=UNKNOWN */

/* BEGIN STRUCT __anonstruct_w_T_529377834 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */
struct __anonstruct_w_T_529377834 {
   unsigned int w_Termsig : 7 ;
   unsigned int w_Coredump : 1 ;
   unsigned int w_Retcode : 8 ;
   unsigned int w_Filler : 16 ;
};
/* END STRUCT __anonstruct_w_T_529377834 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */

/* BEGIN FUNCTION-DECL __builtin_clrsbll LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_clrsbll(long long  ) ;  */
/* END FUNCTION-DECL __builtin_clrsbll LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_ldexp LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_ldexp(double  , int  ) ;  */
/* END FUNCTION-DECL __builtin_ldexp LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN getdtablesize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:557 */
extern int getdtablesize(void) ;
/* END FUNCTION-DECL-EXTERN getdtablesize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:557 */

/* BEGIN FUNCTION-DECL-EXTERN __maskrune LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:148 */
extern int __maskrune(__darwin_ct_rune_t  , unsigned long  ) ;
/* END FUNCTION-DECL-EXTERN __maskrune LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:148 */

/* BEGIN FUNCTION-DECL-EXTERN ffsctl LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:774 */
extern int ffsctl(int  , unsigned long  , void * , unsigned int  )  __attribute__((__availability__(macosx,introduced=10.6))) ;
/* END FUNCTION-DECL-EXTERN ffsctl LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:774 */

/* BEGIN FUNCTION-DECL __builtin_scalbln LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_scalbln(double  , long  ) ;  */
/* END FUNCTION-DECL __builtin_scalbln LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin___vsnprintf_chk LOC=BUILTIN */
/* compiler builtin: 
   int __builtin___vsnprintf_chk(char * , unsigned long long  , int  , unsigned long long  ,
                                 char const   * , __builtin_va_list  ) ;  */
/* END FUNCTION-DECL __builtin___vsnprintf_chk LOC=BUILTIN */

/* BEGIN TYPEDEF ssize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ssize_t.h:31 */
typedef __darwin_ssize_t ssize_t;
/* END TYPEDEF ssize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ssize_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN swab LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:168 */
extern void swab(void const   * __restrict   , void * __restrict   , ssize_t  ) ;
/* END FUNCTION-DECL-EXTERN swab LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:168 */

/* BEGIN FUNCTION-DECL jit_exec_mem_new LOC=UNKNOWN */
static struct jit_exec_mem *jit_exec_mem_new(size_t size ) ;
/* END FUNCTION-DECL jit_exec_mem_new LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL rotate_right LOC=UNKNOWN */
__inline static jit_tree *rotate_right(jit_tree *h ) ;
/* END FUNCTION-DECL rotate_right LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_usubl_overflow LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_usubl_overflow(unsigned long const    , unsigned long const    ,
                                  unsigned long * ) ;  */
/* END FUNCTION-DECL __builtin_usubl_overflow LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_cimag LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_cimag(_Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_cimag LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_csinl LOC=BUILTIN */
/* compiler builtin: 
   _Complex long double __builtin_csinl(_Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_csinl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL funcall_put_arg LOC=UNKNOWN */
__inline static void funcall_put_arg(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL funcall_put_arg LOC=UNKNOWN */

/* BEGIN ENUM jit_warning LOC=./jitter-Darwin-X86-64.c:257 */
enum jit_warning {
    JIT_WARN_DEAD_CODE = 1,
    JIT_WARN_OP_WITHOUT_EFFECT = 2,
    JIT_WARN_INVALID_DATA_SIZE = 4,
    JIT_WARN_UNINITIALIZED_REG = 8,
    JIT_WARN_UNALIGNED_CODE = 16,
    JIT_WARN_INVALID_CODE_REFERENCE = 32,
    JIT_WARN_INVALID_DATA_REFERENCE = 64,
    JIT_WARN_MISSING_PATCH = 128,
    JIT_WARN_REGISTER_TYPE_MISMATCH = 256,
    JIT_WARN_ALL = 2147483647
} ;
/* END ENUM jit_warning LOC=./jitter-Darwin-X86-64.c:257 */

/* BEGIN FUNCTION-DECL-EXTERN memmove LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:73 */
extern void *memmove(void *__dst , void const   *__src , size_t __len ) ;
/* END FUNCTION-DECL-EXTERN memmove LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:73 */

/* BEGIN VARIABLE-DEF x86_cc_unsigned_map LOC=UNKNOWN */
static unsigned char x86_cc_unsigned_map[12]  ;
/* END VARIABLE-DEF x86_cc_unsigned_map LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN cgetmatch LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:285 */
extern int cgetmatch(char const   * , char const   * ) ;
/* END FUNCTION-DECL-EXTERN cgetmatch LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:285 */

/* BEGIN STRUCT _opaque_pthread_mutexattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:83 */
struct _opaque_pthread_mutexattr_t {
   long __sig ;
   char __opaque[8] ;
};
/* END STRUCT _opaque_pthread_mutexattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:83 */

/* BEGIN TYPEDEF __darwin_pthread_mutexattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:114 */
typedef struct _opaque_pthread_mutexattr_t __darwin_pthread_mutexattr_t;
/* END TYPEDEF __darwin_pthread_mutexattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:114 */

/* BEGIN TYPEDEF pthread_mutexattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_mutexattr_t.h:31 */
typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;
/* END TYPEDEF pthread_mutexattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_mutexattr_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_getpolicy_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:415 */
extern int __attribute__((__availability__(tvos,introduced=11.3), __availability__(watchos,introduced=4.3),
__availability__(ios,introduced=11.3), __availability__(macos,introduced=10.13.4)))  pthread_mutexattr_getpolicy_np(pthread_mutexattr_t const   * __restrict   ,
                                                                                                                    int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_getpolicy_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:415 */

/* BEGIN FUNCTION-DECL __builtin_erfcl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_erfcl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_erfcl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_asinh LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_asinh(double  ) ;  */
/* END FUNCTION-DECL __builtin_asinh LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_powl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_powl(long double  , long double  ) ;  */
/* END FUNCTION-DECL __builtin_powl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_flt_rounds LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_flt_rounds(void) ;  */
/* END FUNCTION-DECL __builtin_flt_rounds LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_correct_long_imms LOC=UNKNOWN */
static void jit_correct_long_imms(struct jit *jit ) ;
/* END FUNCTION-DECL jit_correct_long_imms LOC=UNKNOWN */

/* BEGIN TYPEDEF jit_set LOC=./jitter-Darwin-X86-64.c:586 */
typedef struct jit_set jit_set;
/* END TYPEDEF jit_set LOC=./jitter-Darwin-X86-64.c:586 */

/* BEGIN FUNCTION-DECL jit_set_remove LOC=UNKNOWN */
__inline static void jit_set_remove(jit_set *s , int value ) ;
/* END FUNCTION-DECL jit_set_remove LOC=UNKNOWN */

/* BEGIN TYPEDEF uint8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint8_t.h:31 */
typedef unsigned char uint8_t;
/* END TYPEDEF uint8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint8_t.h:31 */

/* BEGIN TYPEDEF uint_least8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:33 */
typedef uint8_t uint_least8_t;
/* END TYPEDEF uint_least8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:33 */

/* BEGIN FUNCTION-DECL jit_prepare_reg_counts LOC=UNKNOWN */
void jit_prepare_reg_counts(struct jit *jit ) ;
/* END FUNCTION-DECL jit_prepare_reg_counts LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL toupper LOC=UNKNOWN */
__inline int toupper(int _c ) ;
/* END FUNCTION-DECL toupper LOC=UNKNOWN */

/* BEGIN TYPEDEF intmax_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_intmax_t.h:32 */
typedef long intmax_t;
/* END TYPEDEF intmax_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_intmax_t.h:32 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_setscope LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:278 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setscope(pthread_attr_t * ,
                                                                                                                                 int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_setscope LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:278 */

/* BEGIN ENUM __anonenum_788482901 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/qos.h:130 */
enum __anonenum_788482901 {
    QOS_CLASS_USER_INTERACTIVE = 33,
    QOS_CLASS_USER_INITIATED = 25,
    QOS_CLASS_DEFAULT = 21,
    QOS_CLASS_UTILITY = 17,
    QOS_CLASS_BACKGROUND = 9,
    QOS_CLASS_UNSPECIFIED = 0
} ;
/* END ENUM __anonenum_788482901 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/qos.h:130 */

/* BEGIN FUNCTION-DECL-EXTERN fcvt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:203 */
extern char *fcvt(double  , int  , int * __restrict   , int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN fcvt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:203 */

/* BEGIN FUNCTION-DECL-EXTERN fwrite LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:165 */
extern size_t fwrite(void const   * __restrict  __ptr , size_t __size , size_t __nitems ,
                     FILE * __restrict  __stream )  __asm__("_fwrite")  ;
/* END FUNCTION-DECL-EXTERN fwrite LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:165 */

/* BEGIN TYPEDEF __darwin_sigset_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:73 */
typedef __uint32_t __darwin_sigset_t;
/* END TYPEDEF __darwin_sigset_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:73 */

/* BEGIN TYPEDEF sigset_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigset_t.h:31 */
typedef __darwin_sigset_t sigset_t;
/* END TYPEDEF sigset_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigset_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN pselect LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/select.h:114 */
extern int pselect(int  , fd_set * __restrict   , fd_set * __restrict   , fd_set * __restrict   ,
                   struct timespec  const  * __restrict   , sigset_t const   * __restrict   )  __asm__("_pselect$1050")  ;
/* END FUNCTION-DECL-EXTERN pselect LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/select.h:114 */

/* BEGIN FUNCTION-DECL-EXTERN rcmd LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:705 */
extern  __attribute__((__deprecated__)) int rcmd(char ** , int  , char const   * ,
                                                 char const   * , char const   * ,
                                                 int * ) ;
/* END FUNCTION-DECL-EXTERN rcmd LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:705 */

/* BEGIN TYPEDEF uint32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint32_t.h:31 */
typedef unsigned int uint32_t;
/* END TYPEDEF uint32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint32_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN arc4random_uniform LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:273 */
extern uint32_t arc4random_uniform(uint32_t __upper_bound )  __attribute__((__availability__(macosx,introduced=10.7))) ;
/* END FUNCTION-DECL-EXTERN arc4random_uniform LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:273 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_getscope LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:245 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getscope(pthread_attr_t const   * __restrict   ,
                                                                                                                                 int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_getscope LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:245 */

/* BEGIN FUNCTION-DECL-EXTERN asctime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:108 */
extern char *asctime(struct tm  const  * ) ;
/* END FUNCTION-DECL-EXTERN asctime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:108 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_getschedpolicy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:242 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getschedpolicy(pthread_attr_t const   * __restrict   ,
                                                                                                                                       int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_getschedpolicy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:242 */

/* BEGIN STRUCT __darwin_x86_avx_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:765 */
struct __darwin_x86_avx_state64 {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   struct __darwin_xmm_reg __fpu_xmm8 ;
   struct __darwin_xmm_reg __fpu_xmm9 ;
   struct __darwin_xmm_reg __fpu_xmm10 ;
   struct __darwin_xmm_reg __fpu_xmm11 ;
   struct __darwin_xmm_reg __fpu_xmm12 ;
   struct __darwin_xmm_reg __fpu_xmm13 ;
   struct __darwin_xmm_reg __fpu_xmm14 ;
   struct __darwin_xmm_reg __fpu_xmm15 ;
   char __fpu_rsrv4[96] ;
   int __fpu_reserved1 ;
   char __avx_reserved1[64] ;
   struct __darwin_xmm_reg __fpu_ymmh0 ;
   struct __darwin_xmm_reg __fpu_ymmh1 ;
   struct __darwin_xmm_reg __fpu_ymmh2 ;
   struct __darwin_xmm_reg __fpu_ymmh3 ;
   struct __darwin_xmm_reg __fpu_ymmh4 ;
   struct __darwin_xmm_reg __fpu_ymmh5 ;
   struct __darwin_xmm_reg __fpu_ymmh6 ;
   struct __darwin_xmm_reg __fpu_ymmh7 ;
   struct __darwin_xmm_reg __fpu_ymmh8 ;
   struct __darwin_xmm_reg __fpu_ymmh9 ;
   struct __darwin_xmm_reg __fpu_ymmh10 ;
   struct __darwin_xmm_reg __fpu_ymmh11 ;
   struct __darwin_xmm_reg __fpu_ymmh12 ;
   struct __darwin_xmm_reg __fpu_ymmh13 ;
   struct __darwin_xmm_reg __fpu_ymmh14 ;
   struct __darwin_xmm_reg __fpu_ymmh15 ;
};
/* END STRUCT __darwin_x86_avx_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:765 */

/* BEGIN FUNCTION-DECL-EXTERN usleep LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:601 */
extern int usleep(useconds_t  )  __asm__("_usleep")  ;
/* END FUNCTION-DECL-EXTERN usleep LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:601 */

/* BEGIN FUNCTION-DECL-EXTERN bzero LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:72 */
extern void bzero(void * , size_t  ) ;
/* END FUNCTION-DECL-EXTERN bzero LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:72 */

/* BEGIN FUNCTION-DECL-EXTERN nanosleep LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:142 */
extern int nanosleep(struct timespec  const  *__rqtp , struct timespec *__rmtp )  __asm__("_nanosleep")  ;
/* END FUNCTION-DECL-EXTERN nanosleep LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:142 */

/* BEGIN FUNCTION-DECL isblank LOC=UNKNOWN */
__inline int isblank(int _c ) ;
/* END FUNCTION-DECL isblank LOC=UNKNOWN */

/* BEGIN STRUCT _opaque_pthread_once_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:88 */
struct _opaque_pthread_once_t {
   long __sig ;
   char __opaque[8] ;
};
/* END STRUCT _opaque_pthread_once_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:88 */

/* BEGIN TYPEDEF __darwin_pthread_once_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:115 */
typedef struct _opaque_pthread_once_t __darwin_pthread_once_t;
/* END TYPEDEF __darwin_pthread_once_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:115 */

/* BEGIN TYPEDEF pthread_once_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_once_t.h:31 */
typedef __darwin_pthread_once_t pthread_once_t;
/* END TYPEDEF pthread_once_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_once_t.h:31 */

/* BEGIN FUNCTION-DECL list_caller_saved_regs LOC=UNKNOWN */
static int list_caller_saved_regs(struct jit *jit , jit_op *op , jit_hw_reg *regs ,
                                  int reg_count , int fp , jit_hw_reg *skip_reg ,
                                  jit_hw_reg **used_regs , int *used_count ) ;
/* END FUNCTION-DECL list_caller_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL emit_prolog_op LOC=UNKNOWN */
static void emit_prolog_op(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_prolog_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL prepare_labels LOC=UNKNOWN */
static jit_tree *prepare_labels(struct jit *jit ) ;
/* END FUNCTION-DECL prepare_labels LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN clearerr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:142 */
extern void clearerr(FILE * ) ;
/* END FUNCTION-DECL-EXTERN clearerr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:142 */

/* BEGIN FUNCTION-DECL __builtin_subcb LOC=BUILTIN */
/* compiler builtin: 
   unsigned char __builtin_subcb(unsigned char const    , unsigned char const    ,
                                 unsigned char const    , unsigned char * ) ;  */
/* END FUNCTION-DECL __builtin_subcb LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_cbrtf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_cbrtf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_cbrtf128 LOC=BUILTIN */

/* BEGIN TYPEDEF __darwin_pthread_rwlock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:116 */
typedef struct _opaque_pthread_rwlock_t __darwin_pthread_rwlock_t;
/* END TYPEDEF __darwin_pthread_rwlock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:116 */

/* BEGIN FUNCTION-DECL __builtin_rintf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_rintf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_rintf128 LOC=BUILTIN */

/* BEGIN VARIABLE-DEF _TIG_IZ_HQIz_argv LOC=UNKNOWN */
char **_TIG_IZ_HQIz_argv  ;
/* END VARIABLE-DEF _TIG_IZ_HQIz_argv LOC=UNKNOWN */

/* BEGIN TYPEDEF _TIG_iO_HQIz_2_init_tigress_1_opaqueStructureType LOC=UNKNOWN */
typedef struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct *_TIG_iO_HQIz_2_init_tigress_1_opaqueStructureType;
/* END TYPEDEF _TIG_iO_HQIz_2_init_tigress_1_opaqueStructureType LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN posix2time LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:131 */
extern time_t posix2time(time_t  ) ;
/* END FUNCTION-DECL-EXTERN posix2time LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:131 */

/* BEGIN TYPEDEF __darwin_dev_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:57 */
typedef __int32_t __darwin_dev_t;
/* END TYPEDEF __darwin_dev_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:57 */

/* BEGIN TYPEDEF dev_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_dev_t.h:31 */
typedef __darwin_dev_t dev_t;
/* END TYPEDEF dev_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_dev_t.h:31 */

/* BEGIN TYPEDEF mode_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_mode_t.h:31 */
typedef __darwin_mode_t mode_t;
/* END TYPEDEF mode_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_mode_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN devname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:293 */
extern char *devname(dev_t  , mode_t  ) ;
/* END FUNCTION-DECL-EXTERN devname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:293 */

/* BEGIN FUNCTION-DECL-EXTERN strtoll LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:172 */
extern long long strtoll(char const   *__str , char **__endptr , int __base ) ;
/* END FUNCTION-DECL-EXTERN strtoll LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:172 */

/* BEGIN FUNCTION-DECL isprint LOC=UNKNOWN */
__inline int isprint(int _c ) ;
/* END FUNCTION-DECL isprint LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_roundf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_roundf(float  ) ;  */
/* END FUNCTION-DECL __builtin_roundf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_memcpy LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_memcpy(void * , void const   * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_memcpy LOC=BUILTIN */

/* BEGIN STRUCT __anonstruct_ldiv_t_748949161 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:88 */
struct __anonstruct_ldiv_t_748949161 {
   long quot ;
   long rem ;
};
/* END STRUCT __anonstruct_ldiv_t_748949161 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:88 */

/* BEGIN FUNCTION-DECL-EXTERN qos_class_self LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/qos.h:172 */
extern qos_class_t __attribute__((__availability__(macos,introduced=10.10), __availability__(ios,introduced=8.0)))  qos_class_self(void) ;
/* END FUNCTION-DECL-EXTERN qos_class_self LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/qos.h:172 */

/* BEGIN FUNCTION-DECL __builtin_huge_valf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_huge_valf(void) ;  */
/* END FUNCTION-DECL __builtin_huge_valf LOC=BUILTIN */

/* BEGIN VARIABLE-DECL jit_disasm_general LOC=UNKNOWN */
struct jit_disasm jit_disasm_general ;
/* END VARIABLE-DECL jit_disasm_general LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN posix_memalign LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:52 */
extern int posix_memalign(void **__memptr , size_t __alignment , size_t __size )  __attribute__((__availability__(macosx,introduced=10.6))) ;
/* END FUNCTION-DECL-EXTERN posix_memalign LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:52 */

/* BEGIN FUNCTION-DECL jit_exec_addr LOC=UNKNOWN */
static void *jit_exec_addr(struct jit_exec_mem *mem ) ;
/* END FUNCTION-DECL jit_exec_addr LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL isascii LOC=UNKNOWN */
__inline int isascii(int _c ) ;
/* END FUNCTION-DECL isascii LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_mul_overflow LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_mul_overflow(...) ;  */
/* END FUNCTION-DECL __builtin_mul_overflow LOC=BUILTIN */

/* BEGIN STRUCT _opaque_pthread_rwlockattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:98 */
struct _opaque_pthread_rwlockattr_t {
   long __sig ;
   char __opaque[16] ;
};
/* END STRUCT _opaque_pthread_rwlockattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:98 */

/* BEGIN TYPEDEF __darwin_pthread_rwlockattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:117 */
typedef struct _opaque_pthread_rwlockattr_t __darwin_pthread_rwlockattr_t;
/* END TYPEDEF __darwin_pthread_rwlockattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:117 */

/* BEGIN TYPEDEF pthread_rwlockattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_rwlockattr_t.h:31 */
typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;
/* END TYPEDEF pthread_rwlockattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_rwlockattr_t.h:31 */

/* BEGIN TYPEDEF uint64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint64_t.h:31 */
typedef unsigned long long uint64_t;
/* END TYPEDEF uint64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint64_t.h:31 */

/* BEGIN STRUCT rusage_info_v1 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:209 */
struct rusage_info_v1 {
   uint8_t ri_uuid[16] ;
   uint64_t ri_user_time ;
   uint64_t ri_system_time ;
   uint64_t ri_pkg_idle_wkups ;
   uint64_t ri_interrupt_wkups ;
   uint64_t ri_pageins ;
   uint64_t ri_wired_size ;
   uint64_t ri_resident_size ;
   uint64_t ri_phys_footprint ;
   uint64_t ri_proc_start_abstime ;
   uint64_t ri_proc_exit_abstime ;
   uint64_t ri_child_user_time ;
   uint64_t ri_child_system_time ;
   uint64_t ri_child_pkg_idle_wkups ;
   uint64_t ri_child_interrupt_wkups ;
   uint64_t ri_child_pageins ;
   uint64_t ri_child_elapsed_abstime ;
};
/* END STRUCT rusage_info_v1 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:209 */

/* BEGIN FUNCTION-DECL-EXTERN getpeereid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:661 */
extern int getpeereid(int  , uid_t * , gid_t * ) ;
/* END FUNCTION-DECL-EXTERN getpeereid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:661 */

/* BEGIN FUNCTION-DECL-EXTERN random LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:228 */
extern long random(void)  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
/* END FUNCTION-DECL-EXTERN random LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:228 */

/* BEGIN FUNCTION-DECL __builtin_nextafterf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_nextafterf128(_Float128  , _Float128  ) ;  */
/* END FUNCTION-DECL __builtin_nextafterf128 LOC=BUILTIN */

/* BEGIN TYPEDEF u_int16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int16_t.h:30 */
typedef unsigned short u_int16_t;
/* END TYPEDEF u_int16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int16_t.h:30 */

/* BEGIN FUNCTION-DECL __builtin_cosf16 LOC=BUILTIN */
/* compiler builtin: 
   _Float16 __builtin_cosf16(_Float16  ) ;  */
/* END FUNCTION-DECL __builtin_cosf16 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_memcpy_inline LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_memcpy_inline(void * , void const   * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_memcpy_inline LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN memcmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:71 */
extern int memcmp(void const   *__s1 , void const   *__s2 , size_t __n ) ;
/* END FUNCTION-DECL-EXTERN memcmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:71 */

/* BEGIN FUNCTION-DECL emit_sse_fldx_op LOC=UNKNOWN */
static void emit_sse_fldx_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                             jit_value a3 ) ;
/* END FUNCTION-DECL emit_sse_fldx_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN flockfile LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:286 */
extern void flockfile(FILE * ) ;
/* END FUNCTION-DECL-EXTERN flockfile LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:286 */

/* BEGIN FUNCTION-DECL-EXTERN putenv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:227 */
extern int putenv(char * )  __asm__("_putenv")  ;
/* END FUNCTION-DECL-EXTERN putenv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:227 */

/* BEGIN STRUCT sigvec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:348 */
struct sigvec {
   void (*sv_handler)(int  ) ;
   int sv_mask ;
   int sv_flags ;
};
/* END STRUCT sigvec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:348 */

/* BEGIN FUNCTION-DECL __builtin_lround LOC=BUILTIN */
/* compiler builtin: 
   long __builtin_lround(double  ) ;  */
/* END FUNCTION-DECL __builtin_lround LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_branch_op LOC=UNKNOWN */
static void emit_branch_op(struct jit *jit , struct jit_op *op , int cond , int imm ,
                           int sign ) ;
/* END FUNCTION-DECL emit_branch_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL join_muli_addr LOC=UNKNOWN */
static int join_muli_addr(jit_op *op , jit_op *nextop ) ;
/* END FUNCTION-DECL join_muli_addr LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_pthread_key_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:112 */
typedef unsigned long __darwin_pthread_key_t;
/* END TYPEDEF __darwin_pthread_key_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:112 */

/* BEGIN TYPEDEF pthread_key_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_key_t.h:31 */
typedef __darwin_pthread_key_t pthread_key_t;
/* END TYPEDEF pthread_key_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_key_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_key_create LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:366 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_key_create(pthread_key_t * ,
                                                                                                                              void (* _Nullable  )(void * ) ) ;
/* END FUNCTION-DECL-EXTERN pthread_key_create LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:366 */

/* BEGIN FUNCTION-DECL __builtin_addcl LOC=BUILTIN */
/* compiler builtin: 
   unsigned long __builtin_addcl(unsigned long const    , unsigned long const    ,
                                 unsigned long const    , unsigned long * ) ;  */
/* END FUNCTION-DECL __builtin_addcl LOC=BUILTIN */

/* BEGIN TYPEDEF pthread_override_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:211 */
typedef struct pthread_override_s *pthread_override_t;
/* END TYPEDEF pthread_override_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:211 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_override_qos_class_start_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:265 */
extern pthread_override_t __attribute__((__availability__(macos,introduced=10.10),
__availability__(ios,introduced=8.0)))  pthread_override_qos_class_start_np(pthread_t __pthread ,
                                                                            qos_class_t __qos_class ,
                                                                            int __relative_priority ) ;
/* END FUNCTION-DECL-EXTERN pthread_override_qos_class_start_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:265 */

/* BEGIN FUNCTION-DECL __builtin_cacoshl LOC=BUILTIN */
/* compiler builtin: 
   _Complex long double __builtin_cacoshl(_Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_cacoshl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_sinf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_sinf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_sinf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_set_clone LOC=UNKNOWN */
__inline static jit_set *jit_set_clone(jit_set *s ) ;
/* END FUNCTION-DECL jit_set_clone LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_huge_val LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_huge_val(void) ;  */
/* END FUNCTION-DECL __builtin_huge_val LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN getsubopt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:205 */
extern int getsubopt(char ** , char ** , char ** ) ;
/* END FUNCTION-DECL-EXTERN getsubopt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:205 */

/* BEGIN FUNCTION-DECL __builtin_alloca_with_align LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_alloca_with_align(unsigned long long  , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_alloca_with_align LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_exp2f LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_exp2f(float  ) ;  */
/* END FUNCTION-DECL __builtin_exp2f LOC=BUILTIN */

/* BEGIN FUNCTION-DECL spill_ret_retreg LOC=UNKNOWN */
static void spill_ret_retreg(jit_op *op , jit_hw_reg *ret_reg ) ;
/* END FUNCTION-DECL spill_ret_retreg LOC=UNKNOWN */

/* BEGIN TYPEDEF _RuneEntry LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:60 */
typedef struct __anonstruct__RuneEntry_453100079 _RuneEntry;
/* END TYPEDEF _RuneEntry LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:60 */

/* BEGIN FUNCTION-DECL jit_enable_optimization LOC=UNKNOWN */
void jit_enable_optimization(struct jit *jit , int opt ) ;
/* END FUNCTION-DECL jit_enable_optimization LOC=UNKNOWN */

/* BEGIN STRUCT timeval64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timeval64.h:34 */
struct timeval64 {
   __int64_t tv_sec ;
   __int64_t tv_usec ;
};
/* END STRUCT timeval64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timeval64.h:34 */

/* BEGIN STRUCT jit_arg_layout_location LOC=./jitter-Darwin-X86-64.c:1709 */
struct jit_arg_layout_location {
   int index ;
   char isfp ;
   char passed_in_reg ;
   struct jit_out_arg *oarg ;
};
/* END STRUCT jit_arg_layout_location LOC=./jitter-Darwin-X86-64.c:1709 */

/* BEGIN FUNCTION-DECL-EXTERN waitpid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:249 */
extern pid_t waitpid(pid_t  , int * , int  )  __asm__("_waitpid")  ;
/* END FUNCTION-DECL-EXTERN waitpid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:249 */

/* BEGIN FUNCTION-DECL __builtin_hypotl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_hypotl(long double  , long double  ) ;  */
/* END FUNCTION-DECL __builtin_hypotl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_csin LOC=BUILTIN */
/* compiler builtin: 
   _Complex double __builtin_csin(_Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_csin LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strpbrk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:86 */
extern char *strpbrk(char const   *__s , char const   *__charset ) ;
/* END FUNCTION-DECL-EXTERN strpbrk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:86 */

/* BEGIN FUNCTION-DECL __builtin_extract_return_addr LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_extract_return_addr(void * ) ;  */
/* END FUNCTION-DECL __builtin_extract_return_addr LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_ilogbl LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_ilogbl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_ilogbl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_erff LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_erff(float  ) ;  */
/* END FUNCTION-DECL __builtin_erff LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_smulll_overflow LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_smulll_overflow(long long const    , long long const    , long long * ) ;  */
/* END FUNCTION-DECL __builtin_smulll_overflow LOC=BUILTIN */

/* BEGIN STRUCT __darwin_i386_thread_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:46 */
struct __darwin_i386_thread_state {
   unsigned int __eax ;
   unsigned int __ebx ;
   unsigned int __ecx ;
   unsigned int __edx ;
   unsigned int __edi ;
   unsigned int __esi ;
   unsigned int __ebp ;
   unsigned int __esp ;
   unsigned int __ss ;
   unsigned int __eflags ;
   unsigned int __eip ;
   unsigned int __cs ;
   unsigned int __ds ;
   unsigned int __es ;
   unsigned int __fs ;
   unsigned int __gs ;
};
/* END STRUCT __darwin_i386_thread_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:46 */

/* BEGIN FUNCTION-DECL-EXTERN signal LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:390 */
extern void (*signal(int  , void (*)(int  ) ))(int  ) ;
/* END FUNCTION-DECL-EXTERN signal LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:390 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_getstackaddr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:252 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getstackaddr(pthread_attr_t const   * __restrict   ,
                                                                                                                                     void * _Nullable  * _Nonnull __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_getstackaddr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:252 */

/* BEGIN TYPEDEF uintptr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uintptr_t.h:30 */
typedef unsigned long uintptr_t;
/* END TYPEDEF uintptr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uintptr_t.h:30 */

/* BEGIN FUNCTION-DECL __builtin_fmaxf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_fmaxf128(_Float128  , _Float128  ) ;  */
/* END FUNCTION-DECL __builtin_fmaxf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutex_getprioceiling LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:375 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_getprioceiling(pthread_mutex_t const   * __restrict   ,
                                                                                                                                        int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutex_getprioceiling LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:375 */

/* BEGIN FUNCTION-DECL jit_op_is_cond_branch LOC=UNKNOWN */
static int jit_op_is_cond_branch(jit_op *op ) ;
/* END FUNCTION-DECL jit_op_is_cond_branch LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_fmax LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_fmax(double  , double  ) ;  */
/* END FUNCTION-DECL __builtin_fmax LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN setstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:243 */
extern char *setstate(char const   * ) ;
/* END FUNCTION-DECL-EXTERN setstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:243 */

/* BEGIN FUNCTION-DECL assign_call LOC=UNKNOWN */
static int assign_call(jit_op *op , struct jit_reg_allocator *al ) ;
/* END FUNCTION-DECL assign_call LOC=UNKNOWN */

/* BEGIN STRUCT __anonstruct__RuneRange_1000210131 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:67 */
struct __anonstruct__RuneRange_1000210131 {
   int __nranges ;
   _RuneEntry *__ranges ;
};
/* END STRUCT __anonstruct__RuneRange_1000210131 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:67 */

/* BEGIN TYPEDEF _RuneCharClass LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:72 */
typedef struct __anonstruct__RuneCharClass_1021650748 _RuneCharClass;
/* END TYPEDEF _RuneCharClass LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:72 */

/* BEGIN TYPEDEF _RuneRange LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:67 */
typedef struct __anonstruct__RuneRange_1000210131 _RuneRange;
/* END TYPEDEF _RuneRange LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:67 */

/* BEGIN TYPEDEF __darwin_wchar_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:104 */
typedef int __darwin_wchar_t;
/* END TYPEDEF __darwin_wchar_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:104 */

/* BEGIN TYPEDEF __darwin_rune_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:109 */
typedef __darwin_wchar_t __darwin_rune_t;
/* END TYPEDEF __darwin_rune_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:109 */

/* BEGIN STRUCT __anonstruct__RuneLocale_110080762 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:77 */
struct __anonstruct__RuneLocale_110080762 {
   char __magic[8] ;
   char __encoding[32] ;
   __darwin_rune_t (*__sgetrune)(char const   * , __darwin_size_t  , char const   ** ) ;
   int (*__sputrune)(__darwin_rune_t  , char * , __darwin_size_t  , char ** ) ;
   __darwin_rune_t __invalid_rune ;
   __uint32_t __runetype[1 << 8] ;
   __darwin_rune_t __maplower[1 << 8] ;
   __darwin_rune_t __mapupper[1 << 8] ;
   _RuneRange __runetype_ext ;
   _RuneRange __maplower_ext ;
   _RuneRange __mapupper_ext ;
   void *__variable ;
   int __variable_len ;
   int __ncharclasses ;
   _RuneCharClass *__charclasses ;
};
/* END STRUCT __anonstruct__RuneLocale_110080762 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:77 */

/* BEGIN VARIABLE-DECL-EXTERN _DefaultRuneLocale LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:111 */
extern _RuneLocale _DefaultRuneLocale ;
/* END VARIABLE-DECL-EXTERN _DefaultRuneLocale LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:111 */

/* BEGIN FUNCTION-DECL __builtin_ctzll LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_ctzll(unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_ctzll LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_ccosl LOC=BUILTIN */
/* compiler builtin: 
   _Complex long double __builtin_ccosl(_Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_ccosl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN rewind LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:176 */
extern void rewind(FILE * ) ;
/* END FUNCTION-DECL-EXTERN rewind LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:176 */

/* BEGIN FUNCTION-DECL __builtin_atanf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_atanf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_atanf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_op_new LOC=UNKNOWN */
static struct jit_op *jit_op_new(unsigned short code , unsigned char spec , jit_value arg1 ,
                                 jit_value arg2 , jit_value arg3 , unsigned char arg_size ) ;
/* END FUNCTION-DECL jit_op_new LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN localtime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:114 */
extern struct tm *localtime(time_t const   * ) ;
/* END FUNCTION-DECL-EXTERN localtime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:114 */

/* BEGIN STRUCT __darwin_i386_exception_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:575 */
struct __darwin_i386_exception_state {
   __uint16_t __trapno ;
   __uint16_t __cpu ;
   __uint32_t __err ;
   __uint32_t __faultvaddr ;
};
/* END STRUCT __darwin_i386_exception_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:575 */

/* BEGIN STRUCT __darwin_i386_float_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:281 */
struct __darwin_i386_float_state {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   char __fpu_rsrv4[224] ;
   int __fpu_reserved1 ;
};
/* END STRUCT __darwin_i386_float_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:281 */

/* BEGIN STRUCT __darwin_mcontext32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:39 */
struct __darwin_mcontext32 {
   struct __darwin_i386_exception_state __es ;
   struct __darwin_i386_thread_state __ss ;
   struct __darwin_i386_float_state __fs ;
};
/* END STRUCT __darwin_mcontext32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:39 */

/* BEGIN FUNCTION-DECL digittoint LOC=UNKNOWN */
__inline int digittoint(int _c ) ;
/* END FUNCTION-DECL digittoint LOC=UNKNOWN */

/* BEGIN STRUCT code_refs_cache LOC=./jitter-Darwin-X86-64.c:3860 */
struct code_refs_cache {
   int size ;
   jit_op **ops ;
};
/* END STRUCT code_refs_cache LOC=./jitter-Darwin-X86-64.c:3860 */

/* BEGIN FUNCTION-DECL emit_sse_alu_op LOC=UNKNOWN */
static void emit_sse_alu_op(struct jit *jit , jit_op *op , int sse_op ) ;
/* END FUNCTION-DECL emit_sse_alu_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN cgetfirst LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:284 */
extern int cgetfirst(char ** , char ** ) ;
/* END FUNCTION-DECL-EXTERN cgetfirst LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:284 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_testcancel LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:497 */
extern void __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  pthread_testcancel(void)  __asm__("_pthread_testcancel")  ;
/* END FUNCTION-DECL-EXTERN pthread_testcancel LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:497 */

/* BEGIN FUNCTION-DECL-EXTERN crypt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:544 */
extern char *crypt(char const   * , char const   * ) ;
/* END FUNCTION-DECL-EXTERN crypt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:544 */

/* BEGIN FUNCTION-DECL-EXTERN strxfrm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:91 */
extern size_t strxfrm(char *__s1 , char const   *__s2 , size_t __n ) ;
/* END FUNCTION-DECL-EXTERN strxfrm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:91 */

/* BEGIN TYPEDEF __darwin_intptr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:49 */
typedef long __darwin_intptr_t;
/* END TYPEDEF __darwin_intptr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:49 */

/* BEGIN FUNCTION-DECL-EXTERN strtoull LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:178 */
extern unsigned long long strtoull(char const   *__str , char **__endptr , int __base ) ;
/* END FUNCTION-DECL-EXTERN strtoull LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:178 */

/* BEGIN FUNCTION-DECL-EXTERN ctermid_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:371 */
extern char *ctermid_r(char * ) ;
/* END FUNCTION-DECL-EXTERN ctermid_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:371 */

/* BEGIN STRUCT _opaque_pthread_rwlock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:93 */
struct _opaque_pthread_rwlock_t {
   long __sig ;
   char __opaque[192] ;
};
/* END STRUCT _opaque_pthread_rwlock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:93 */

/* BEGIN TYPEDEF pthread_rwlock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_rwlock_t.h:31 */
typedef __darwin_pthread_rwlock_t pthread_rwlock_t;
/* END TYPEDEF pthread_rwlock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_rwlock_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlock_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:444 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_init(pthread_rwlock_t * __restrict   ,
                                                                                                                               pthread_rwlockattr_t const   * _Nullable __restrict   )  __asm__("_pthread_rwlock_init")  ;
/* END FUNCTION-DECL-EXTERN pthread_rwlock_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:444 */

/* BEGIN FUNCTION-DECL-EXTERN getwd LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:564 */
extern char *getwd(char * ) ;
/* END FUNCTION-DECL-EXTERN getwd LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:564 */

/* BEGIN FUNCTION-DECL-EXTERN execve LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:445 */
extern int execve(char const   *__file , char **__argv , char **__envp )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN execve LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:445 */

/* BEGIN FUNCTION-DECL __builtin_lgammaf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_lgammaf(float  ) ;  */
/* END FUNCTION-DECL __builtin_lgammaf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_cabs LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_cabs(_Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_cabs LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_fdim LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_fdim(double  , double  ) ;  */
/* END FUNCTION-DECL __builtin_fdim LOC=BUILTIN */

/* BEGIN STRUCT jit_allocator_hint LOC=./jitter-Darwin-X86-64.c:687 */
struct jit_allocator_hint {
   int last_pos ;
   int should_be_calleesaved ;
   int should_be_eax ;
   int refs ;
};
/* END STRUCT jit_allocator_hint LOC=./jitter-Darwin-X86-64.c:687 */

/* BEGIN FUNCTION-DECL print_args LOC=UNKNOWN */
static void print_args(struct jit_disasm *disasm , struct output_buf *linebuf , jit_op *op ,
                       jit_tree *labels ) ;
/* END FUNCTION-DECL print_args LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN strcmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:77 */
extern int strcmp(char const   *__s1 , char const   *__s2 ) ;
/* END FUNCTION-DECL-EXTERN strcmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:77 */

/* BEGIN FUNCTION-DECL emit_fret_op LOC=UNKNOWN */
static void emit_fret_op(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_fret_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN index LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:73 */
extern char *index(char const   * , int  ) ;
/* END FUNCTION-DECL-EXTERN index LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:73 */

/* BEGIN TYPEDEF suseconds_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_suseconds_t.h:31 */
typedef __darwin_suseconds_t suseconds_t;
/* END TYPEDEF suseconds_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_suseconds_t.h:31 */

/* BEGIN FUNCTION-DECL __builtin___strlcat_chk LOC=BUILTIN */
/* compiler builtin: 
   unsigned long long __builtin___strlcat_chk(char * , char const   * , unsigned long long  ,
                                              unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin___strlcat_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_getspecific LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:359 */
extern void __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  * _Nullable  pthread_getspecific(pthread_key_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_getspecific LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:359 */

/* BEGIN FUNCTION-DECL __builtin_scalbnf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_scalbnf128(_Float128  , int  ) ;  */
/* END FUNCTION-DECL __builtin_scalbnf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_regs_active LOC=UNKNOWN */
void jit_regs_active(jit_op *op , jit_value *dest ) ;
/* END FUNCTION-DECL jit_regs_active LOC=UNKNOWN */

/* BEGIN STRUCT __anonstruct__RuneEntry_453100079 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:60 */
struct __anonstruct__RuneEntry_453100079 {
   __darwin_rune_t __min ;
   __darwin_rune_t __max ;
   __darwin_rune_t __map ;
   __uint32_t *__types ;
};
/* END STRUCT __anonstruct__RuneEntry_453100079 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:60 */

/* BEGIN FUNCTION-DECL __builtin_launder LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_launder(void * ) ;  */
/* END FUNCTION-DECL __builtin_launder LOC=BUILTIN */

/* BEGIN FUNCTION-DECL associate_register_alias LOC=UNKNOWN */
static void associate_register_alias(struct jit_reg_allocator *al , jit_op *op , int i ) ;
/* END FUNCTION-DECL associate_register_alias LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL iscntrl LOC=UNKNOWN */
__inline int iscntrl(int _c ) ;
/* END FUNCTION-DECL iscntrl LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_uuid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:77 */
typedef unsigned char __darwin_uuid_t[16];
/* END TYPEDEF __darwin_uuid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:77 */

/* BEGIN FUNCTION-DECL-EXTERN strcspn LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:80 */
extern size_t strcspn(char const   *__s , char const   *__charset ) ;
/* END FUNCTION-DECL-EXTERN strcspn LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:80 */

/* BEGIN UNION sigval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:158 */
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
/* END UNION sigval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:158 */

/* BEGIN STRUCT sigevent LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:168 */
struct sigevent {
   int sigev_notify ;
   int sigev_signo ;
   union sigval sigev_value ;
   void (*sigev_notify_function)(union sigval  ) ;
   pthread_attr_t *sigev_notify_attributes ;
};
/* END STRUCT sigevent LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:168 */

/* BEGIN FUNCTION-DECL __builtin_strrchr LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin_strrchr(char const   * , int  ) ;  */
/* END FUNCTION-DECL __builtin_strrchr LOC=BUILTIN */

/* BEGIN STRUCT-DECL fssearchblock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:769 */
struct fssearchblock ;
/* END STRUCT-DECL fssearchblock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:769 */

/* BEGIN STRUCT __darwin_x86_exception_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1172 */
struct __darwin_x86_exception_state64 {
   __uint16_t __trapno ;
   __uint16_t __cpu ;
   __uint32_t __err ;
   __uint64_t __faultvaddr ;
};
/* END STRUCT __darwin_x86_exception_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1172 */

/* BEGIN FUNCTION-DECL __builtin_sadd_overflow LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_sadd_overflow(int const    , int const    , int * ) ;  */
/* END FUNCTION-DECL __builtin_sadd_overflow LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutex_unlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:393 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_unlock(pthread_mutex_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutex_unlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:393 */

/* BEGIN FUNCTION-DECL emit_rsb_op LOC=UNKNOWN */
static void emit_rsb_op(struct jit *jit , struct jit_op *op , int imm ) ;
/* END FUNCTION-DECL emit_rsb_op LOC=UNKNOWN */

/* BEGIN TYPEDEF __mbstate_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:76 */
typedef union __anonunion___mbstate_t_250061491 __mbstate_t;
/* END TYPEDEF __mbstate_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:76 */

/* BEGIN FUNCTION-DECL delete_min LOC=UNKNOWN */
static jit_tree *delete_min(jit_tree *h ) ;
/* END FUNCTION-DECL delete_min LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_llroundf LOC=BUILTIN */
/* compiler builtin: 
   long long __builtin_llroundf(float  ) ;  */
/* END FUNCTION-DECL __builtin_llroundf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN reallocf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:349 */
extern void *reallocf(void *__ptr , size_t __size )  __attribute__((__alloc_size__(2))) ;
/* END FUNCTION-DECL-EXTERN reallocf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:349 */

/* BEGIN FUNCTION-DECL jit_collect_statistics LOC=UNKNOWN */
void jit_collect_statistics(struct jit *jit ) ;
/* END FUNCTION-DECL jit_collect_statistics LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL isalpha LOC=UNKNOWN */
__inline int isalpha(int _c ) ;
/* END FUNCTION-DECL isalpha LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN posix_openpt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:220 */
extern int posix_openpt(int  ) ;
/* END FUNCTION-DECL-EXTERN posix_openpt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:220 */

/* BEGIN FUNCTION-DECL emit_branch_overflow_op LOC=UNKNOWN */
static void emit_branch_overflow_op(struct jit *jit , struct jit_op *op , int alu_op ,
                                    int imm , int negation ) ;
/* END FUNCTION-DECL emit_branch_overflow_op LOC=UNKNOWN */

/* BEGIN TYPEDEF user_addr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:97 */
typedef u_int64_t user_addr_t;
/* END TYPEDEF user_addr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:97 */

/* BEGIN FUNCTION-DECL __builtin_fabsl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_fabsl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_fabsl LOC=BUILTIN */

/* BEGIN VARIABLE-DECL-EXTERN optopt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:512 */
extern int optopt ;
/* END VARIABLE-DECL-EXTERN optopt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:512 */

/* BEGIN FUNCTION-DECL __builtin_lrintl LOC=BUILTIN */
/* compiler builtin: 
   long __builtin_lrintl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_lrintl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_tgammaf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_tgammaf(float  ) ;  */
/* END FUNCTION-DECL __builtin_tgammaf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_csinh LOC=BUILTIN */
/* compiler builtin: 
   _Complex double __builtin_csinh(_Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_csinh LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_setpolicy_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:434 */
extern int __attribute__((__availability__(ios,introduced=5.0), __availability__(macos,introduced=10.7)))  pthread_mutexattr_setpolicy_np(pthread_mutexattr_t * ,
                                                                                                                                          int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_setpolicy_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:434 */

/* BEGIN FUNCTION-DECL __builtin_assume_aligned LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_assume_aligned(void const   * , unsigned long long   , ...) ;  */
/* END FUNCTION-DECL __builtin_assume_aligned LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strncpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:85 */
extern char *strncpy(char *__dst , char const   *__src , size_t __n ) ;
/* END FUNCTION-DECL-EXTERN strncpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:85 */

/* BEGIN FUNCTION-DECL __builtin_ctanhl LOC=BUILTIN */
/* compiler builtin: 
   _Complex long double __builtin_ctanhl(_Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_ctanhl LOC=BUILTIN */

/* BEGIN TYPEDEF div_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:83 */
typedef struct __anonstruct_div_t_773697287 div_t;
/* END TYPEDEF div_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:83 */

/* BEGIN FUNCTION-DECL __builtin_lgamma LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_lgamma(double  ) ;  */
/* END FUNCTION-DECL __builtin_lgamma LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_trace_op LOC=UNKNOWN */
void jit_trace_op(struct jit *jit , jit_op *op , int verbosity ) ;
/* END FUNCTION-DECL jit_trace_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN execvP LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:647 */
extern int execvP(char const   *__file , char const   *__searchpath , char **__argv )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN execvP LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:647 */

/* BEGIN VARIABLE-DEF _TIG_JD_HQIz_4_fib_freq LOC=UNKNOWN */
int _TIG_JD_HQIz_4_fib_freq  =    0;
/* END VARIABLE-DEF _TIG_JD_HQIz_4_fib_freq LOC=UNKNOWN */

/* BEGIN ENUM __anonenum_X86_ALU_Opcode_144447433 LOC=./jitter-Darwin-X86-64.c:1093 */
enum __anonenum_X86_ALU_Opcode_144447433 {
    X86_ADD = 0,
    X86_OR = 1,
    X86_ADC = 2,
    X86_SBB = 3,
    X86_AND = 4,
    X86_SUB = 5,
    X86_XOR = 6,
    X86_CMP = 7,
    X86_NALU = 8
} ;
/* END ENUM __anonenum_X86_ALU_Opcode_144447433 LOC=./jitter-Darwin-X86-64.c:1093 */

/* BEGIN FUNCTION-DECL-EXTERN profil LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:696 */
extern int profil(char * , size_t  , unsigned long  , unsigned int  ) ;
/* END FUNCTION-DECL-EXTERN profil LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:696 */

/* BEGIN FUNCTION-DECL jit_tree_walk LOC=UNKNOWN */
static void jit_tree_walk(jit_tree *h , void (*func)(jit_tree_key key , jit_tree_value value ,
                                                     void *thunk ) , void *thunk ) ;
/* END FUNCTION-DECL jit_tree_walk LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_conj LOC=BUILTIN */
/* compiler builtin: 
   _Complex double __builtin_conj(_Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_conj LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN printf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:170 */
extern int ( /* format attribute */  printf)(char const   * __restrict    , ...) ;
/* END FUNCTION-DECL-EXTERN printf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:170 */

/* BEGIN FUNCTION-DECL check_data_alignment LOC=UNKNOWN */
static int check_data_alignment(jit_op *op , char *msg_buf ) ;
/* END FUNCTION-DECL check_data_alignment LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN fmtcheck LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:373 */
extern char const   *fmtcheck(char const   * , char const   * ) ;
/* END FUNCTION-DECL-EXTERN fmtcheck LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:373 */

/* BEGIN FUNCTION-DECL __builtin_fminf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_fminf(float  , float  ) ;  */
/* END FUNCTION-DECL __builtin_fminf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlock_wrlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:458 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_wrlock(pthread_rwlock_t * )  __asm__("_pthread_rwlock_wrlock")  ;
/* END FUNCTION-DECL-EXTERN pthread_rwlock_wrlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:458 */

/* BEGIN FUNCTION-DECL cleanup LOC=UNKNOWN */
static void cleanup(struct jit *jit ) ;
/* END FUNCTION-DECL cleanup LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_operator_new LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_operator_new(unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_operator_new LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin___vsprintf_chk LOC=BUILTIN */
/* compiler builtin: 
   int __builtin___vsprintf_chk(char * , int  , unsigned long long  , char const   * ,
                                __builtin_va_list  ) ;  */
/* END FUNCTION-DECL __builtin___vsprintf_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL move_red_right LOC=UNKNOWN */
__inline static jit_tree *move_red_right(jit_tree *h ) ;
/* END FUNCTION-DECL move_red_right LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL valid_fsize LOC=UNKNOWN */
static int valid_fsize(int size ) ;
/* END FUNCTION-DECL valid_fsize LOC=UNKNOWN */

/* BEGIN VARIABLE-DECL-EXTERN daylight LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:105 */
extern int daylight ;
/* END VARIABLE-DECL-EXTERN daylight LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:105 */

/* BEGIN FUNCTION-DECL-EXTERN lrand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:215 */
extern long lrand48(void)  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
/* END FUNCTION-DECL-EXTERN lrand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:215 */

/* BEGIN FUNCTION-DECL __builtin_atan2f LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_atan2f(float  , float  ) ;  */
/* END FUNCTION-DECL __builtin_atan2f LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN setmode LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:724 */
extern void *setmode(char const   * )  __asm__("_setmode")  ;
/* END FUNCTION-DECL-EXTERN setmode LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:724 */

/* BEGIN FUNCTION-DECL __builtin_creall LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_creall(_Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_creall LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_clzll LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_clzll(unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_clzll LOC=BUILTIN */

/* BEGIN FUNCTION-DECL sse_alu_pd_reg_safeimm LOC=UNKNOWN */
static void sse_alu_pd_reg_safeimm(struct jit *jit , jit_op *op , int op_id , int reg ,
                                   double *imm ) ;
/* END FUNCTION-DECL sse_alu_pd_reg_safeimm LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_bswap64 LOC=BUILTIN */
/* compiler builtin: 
   long __builtin_bswap64(long  ) ;  */
/* END FUNCTION-DECL __builtin_bswap64 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN setgid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:475 */
extern int setgid(gid_t  ) ;
/* END FUNCTION-DECL-EXTERN setgid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:475 */

/* BEGIN FUNCTION-DECL-EXTERN chroot LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:541 */
extern int chroot(char const   * ) ;
/* END FUNCTION-DECL-EXTERN chroot LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:541 */

/* BEGIN FUNCTION-DECL __builtin_va_end LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_va_end(__builtin_va_list  ) ;  */
/* END FUNCTION-DECL __builtin_va_end LOC=BUILTIN */

/* BEGIN TYPEDEF jit_rmap LOC=./jitter-Darwin-X86-64.c:683 */
typedef struct jit_rmap jit_rmap;
/* END TYPEDEF jit_rmap LOC=./jitter-Darwin-X86-64.c:683 */

/* BEGIN FUNCTION-DECL rmap_unassoc LOC=UNKNOWN */
static void rmap_unassoc(jit_rmap *rmap , jit_value reg ) ;
/* END FUNCTION-DECL rmap_unassoc LOC=UNKNOWN */

/* BEGIN TYPEDEF int_least32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:31 */
typedef int32_t int_least32_t;
/* END TYPEDEF int_least32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:31 */

/* BEGIN FUNCTION-DECL __builtin_truncf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_truncf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_truncf128 LOC=BUILTIN */

/* BEGIN TYPEDEF uint_fast64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:47 */
typedef uint64_t uint_fast64_t;
/* END TYPEDEF uint_fast64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:47 */

/* BEGIN FUNCTION-DECL __builtin_index LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin_index(char const   * , int  ) ;  */
/* END FUNCTION-DECL __builtin_index LOC=BUILTIN */

/* BEGIN VARIABLE-DECL-EXTERN __stderrp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:69 */
extern FILE *__stderrp ;
/* END VARIABLE-DECL-EXTERN __stderrp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:69 */

/* BEGIN VARIABLE-DECL _TIG_IZ_HQIz_envp LOC=UNKNOWN */
char **_TIG_IZ_HQIz_envp ;
/* END VARIABLE-DECL _TIG_IZ_HQIz_envp LOC=UNKNOWN */

/* BEGIN TYPEDEF jit_prepared_args LOC=./jitter-Darwin-X86-64.c:694 */
typedef struct jit_prepared_args jit_prepared_args;
/* END TYPEDEF jit_prepared_args LOC=./jitter-Darwin-X86-64.c:694 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_set_qos_class_self_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:155 */
extern int __attribute__((__availability__(ios,introduced=8.0), __availability__(macos,introduced=10.10)))  pthread_set_qos_class_self_np(qos_class_t __qos_class ,
                                                                                                                                          int __relative_priority ) ;
/* END FUNCTION-DECL-EXTERN pthread_set_qos_class_self_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:155 */

/* BEGIN FUNCTION-DECL rmap_clone LOC=UNKNOWN */
static jit_rmap *rmap_clone(jit_rmap *rmap ) ;
/* END FUNCTION-DECL rmap_clone LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_catanhf LOC=BUILTIN */
/* compiler builtin: 
   _Complex float __builtin_catanhf(_Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_catanhf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_frexpf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_frexpf(float  , int * ) ;  */
/* END FUNCTION-DECL __builtin_frexpf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_rotateright64 LOC=BUILTIN */
/* compiler builtin: 
   unsigned long __builtin_rotateright64(unsigned long  , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_rotateright64 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN wait LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:248 */
extern pid_t wait(int * )  __asm__("_wait")  ;
/* END FUNCTION-DECL-EXTERN wait LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:248 */

/* BEGIN FUNCTION-DECL-EXTERN sranddev LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:347 */
extern void sranddev(void) ;
/* END FUNCTION-DECL-EXTERN sranddev LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:347 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_yield_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:560 */
extern void __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  pthread_yield_np(void) ;
/* END FUNCTION-DECL-EXTERN pthread_yield_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:560 */

/* BEGIN TYPEDEF jit_float LOC=./jitter-Darwin-X86-64.c:54 */
typedef double jit_float;
/* END TYPEDEF jit_float LOC=./jitter-Darwin-X86-64.c:54 */

/* BEGIN FUNCTION-DECL-EXTERN initstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:208 */
extern char *initstate(unsigned int  , char * , size_t  ) ;
/* END FUNCTION-DECL-EXTERN initstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:208 */

/* BEGIN FUNCTION-DECL __builtin_nexttowardf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_nexttowardf128(_Float128  , _Float128  ) ;  */
/* END FUNCTION-DECL __builtin_nexttowardf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_ssub_overflow LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_ssub_overflow(int const    , int const    , int * ) ;  */
/* END FUNCTION-DECL __builtin_ssub_overflow LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN arc4random LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:264 */
extern uint32_t arc4random(void) ;
/* END FUNCTION-DECL-EXTERN arc4random LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:264 */

/* BEGIN FUNCTION-DECL-EXTERN getattrlist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:751 */
extern int getattrlist(char const   * , void * , void * , size_t  , unsigned int  )  __asm__("_getattrlist")  ;
/* END FUNCTION-DECL-EXTERN getattrlist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:751 */

/* BEGIN FUNCTION-DECL-EXTERN radixsort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:341 */
extern int radixsort(unsigned char const   **__base , int __nel , unsigned char const   *__table ,
                     unsigned int __endbyte ) ;
/* END FUNCTION-DECL-EXTERN radixsort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:341 */

/* BEGIN FUNCTION-DECL-EXTERN wait3 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:254 */
extern pid_t wait3(int * , int  , struct rusage * ) ;
/* END FUNCTION-DECL-EXTERN wait3 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:254 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlockattr_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:464 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlockattr_destroy(pthread_rwlockattr_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_rwlockattr_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:464 */

/* BEGIN FUNCTION-DECL __builtin_lrint LOC=BUILTIN */
/* compiler builtin: 
   long __builtin_lrint(double  ) ;  */
/* END FUNCTION-DECL __builtin_lrint LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_expf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_expf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_expf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strspn LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:88 */
extern size_t strspn(char const   *__s , char const   *__charset ) ;
/* END FUNCTION-DECL-EXTERN strspn LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:88 */

/* BEGIN VARIABLE-DECL _TIG_iE_HQIz_1_entropy LOC=UNKNOWN */
unsigned long _TIG_iE_HQIz_1_entropy ;
/* END VARIABLE-DECL _TIG_iE_HQIz_1_entropy LOC=UNKNOWN */

/* BEGIN TYPEDEF u_short LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_short.h:30 */
typedef unsigned short u_short;
/* END TYPEDEF u_short LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_short.h:30 */

/* BEGIN TYPEDEF u_int8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int8_t.h:30 */
typedef unsigned char u_int8_t;
/* END TYPEDEF u_int8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int8_t.h:30 */

/* BEGIN FUNCTION-DECL fixup LOC=UNKNOWN */
__inline static jit_tree *fixup(jit_tree *h ) ;
/* END FUNCTION-DECL fixup LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __darwin_fd_clr LOC=UNKNOWN */
__inline void ( __attribute__((__always_inline__)) __darwin_fd_clr)(int _fd , struct fd_set *_p ) ;
/* END FUNCTION-DECL __darwin_fd_clr LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_dump_ops_general LOC=UNKNOWN */
static void jit_dump_ops_general(struct jit *jit , jit_tree *labels , int verbosity ) ;
/* END FUNCTION-DECL jit_dump_ops_general LOC=UNKNOWN */

/* BEGIN TYPEDEF quad_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:96 */
typedef int64_t quad_t;
/* END TYPEDEF quad_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:96 */

/* BEGIN FUNCTION-DECL-EXTERN getpriority LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:445 */
extern int getpriority(int  , id_t  ) ;
/* END FUNCTION-DECL-EXTERN getpriority LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:445 */

/* BEGIN FUNCTION-DECL force_assoc LOC=UNKNOWN */
static int force_assoc(jit_op *op , struct jit_reg_allocator *al ) ;
/* END FUNCTION-DECL force_assoc LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN strtofflags LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:730 */
extern int strtofflags(char ** , unsigned long * , unsigned long * ) ;
/* END FUNCTION-DECL-EXTERN strtofflags LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:730 */

/* BEGIN FUNCTION-DECL __builtin_ccos LOC=BUILTIN */
/* compiler builtin: 
   _Complex double __builtin_ccos(_Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_ccos LOC=BUILTIN */

/* BEGIN TYPEDEF wchar_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_wchar_t.h:34 */
typedef __darwin_wchar_t wchar_t;
/* END TYPEDEF wchar_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_wchar_t.h:34 */

/* BEGIN FUNCTION-DECL-EXTERN cgetclose LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:282 */
extern int cgetclose(void) ;
/* END FUNCTION-DECL-EXTERN cgetclose LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:282 */

/* BEGIN FUNCTION-DECL-EXTERN renamex_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/stdio.h:46 */
extern int renamex_np(char const   * , char const   * , unsigned int  )  __attribute__((__availability__(watchos,introduced=3.0),
__availability__(tvos,introduced=10.0), __availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12))) ;
/* END FUNCTION-DECL-EXTERN renamex_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/stdio.h:46 */

/* BEGIN FUNCTION-DECL funcall_prepare LOC=UNKNOWN */
__inline static void funcall_prepare(struct jit *jit , jit_op *op , int count ) ;
/* END FUNCTION-DECL funcall_prepare LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_isnan LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_isnan(...) ;  */
/* END FUNCTION-DECL __builtin_isnan LOC=BUILTIN */

/* BEGIN STRUCT-DECL jit_debug_info LOC=./jitter-Darwin-X86-64.c:65 */
struct jit_debug_info ;
/* END STRUCT-DECL jit_debug_info LOC=./jitter-Darwin-X86-64.c:65 */

/* BEGIN FUNCTION-DECL DUMP_short LOC=UNKNOWN */
void DUMP_short(int block , struct jit *jit , struct jit_op *begin_ , struct jit_op *end_ ) ;
/* END FUNCTION-DECL DUMP_short LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_casinf LOC=BUILTIN */
/* compiler builtin: 
   _Complex float __builtin_casinf(_Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_casinf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_logf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_logf(float  ) ;  */
/* END FUNCTION-DECL __builtin_logf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_cexpl LOC=BUILTIN */
/* compiler builtin: 
   _Complex long double __builtin_cexpl(_Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_cexpl LOC=BUILTIN */

/* BEGIN TYPEDEF off_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_off_t.h:31 */
typedef __darwin_off_t off_t;
/* END TYPEDEF off_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_off_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN ftello LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:328 */
extern off_t ftello(FILE *__stream ) ;
/* END FUNCTION-DECL-EXTERN ftello LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:328 */

/* BEGIN FUNCTION-DECL jit_tree_clone LOC=UNKNOWN */
__inline static jit_tree *jit_tree_clone(jit_tree *root ) ;
/* END FUNCTION-DECL jit_tree_clone LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_fmaf16 LOC=BUILTIN */
/* compiler builtin: 
   _Float16 __builtin_fmaf16(_Float16  , _Float16  , _Float16  ) ;  */
/* END FUNCTION-DECL __builtin_fmaf16 LOC=BUILTIN */

/* BEGIN TYPEDEF ushort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:91 */
typedef unsigned short ushort;
/* END TYPEDEF ushort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:91 */

/* BEGIN FUNCTION-DECL-EXTERN setpgid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:476 */
extern int setpgid(pid_t  , pid_t  ) ;
/* END FUNCTION-DECL-EXTERN setpgid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:476 */

/* BEGIN FUNCTION-DECL-EXTERN pipe LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:470 */
extern int pipe(int * ) ;
/* END FUNCTION-DECL-EXTERN pipe LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:470 */

/* BEGIN FUNCTION-DECL __builtin_nan LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_nan(char const   * ) ;  */
/* END FUNCTION-DECL __builtin_nan LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_inf LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_inf(void) ;  */
/* END FUNCTION-DECL __builtin_inf LOC=BUILTIN */

/* BEGIN STRUCT __sbuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:92 */
struct __sbuf {
   unsigned char *_base ;
   int _size ;
};
/* END STRUCT __sbuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:92 */

/* BEGIN STRUCT __sFILE LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:126 */
struct __sFILE {
   unsigned char *_p ;
   int _r ;
   int _w ;
   short _flags ;
   short _file ;
   struct __sbuf _bf ;
   int _lbfsize ;
   void *_cookie ;
   int (* _Nullable  _close)(void * ) ;
   int (* _Nullable  _read)(void * , char * , int  ) ;
   fpos_t (* _Nullable  _seek)(void * , fpos_t  , int  ) ;
   int (* _Nullable  _write)(void * , char const   * , int  ) ;
   struct __sbuf _ub ;
   struct __sFILEX *_extra ;
   int _ur ;
   unsigned char _ubuf[3] ;
   unsigned char _nbuf[1] ;
   struct __sbuf _lb ;
   int _blksize ;
   fpos_t _offset ;
};
/* END STRUCT __sFILE LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:126 */

/* BEGIN FUNCTION-DECL-EXTERN atoi LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:135 */
extern int atoi(char const   * ) ;
/* END FUNCTION-DECL-EXTERN atoi LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:135 */

/* BEGIN FUNCTION-DECL is_transfer_op LOC=UNKNOWN */
static int is_transfer_op(jit_op *op ) ;
/* END FUNCTION-DECL is_transfer_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN execl LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:441 */
extern int execl(char const   *__path , char const   *__arg0  , ...)  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN execl LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:441 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_getprotocol LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:403 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_getprotocol(pthread_mutexattr_t const   * __restrict   ,
                                                                                                                                         int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_getprotocol LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:403 */

/* BEGIN FUNCTION-DECL-EXTERN fscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:161 */
extern int ( /* format attribute */  fscanf)(FILE * __restrict   , char const   * __restrict   
                                             , ...) ;
/* END FUNCTION-DECL-EXTERN fscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:161 */

/* BEGIN FUNCTION-DECL is_spilled LOC=UNKNOWN */
static int is_spilled(jit_value arg_id , jit_op *prepare_op , int *reg ) ;
/* END FUNCTION-DECL is_spilled LOC=UNKNOWN */

/* BEGIN STRUCT sigstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:367 */
struct sigstack {
   char *ss_sp ;
   int ss_onstack ;
};
/* END STRUCT sigstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:367 */

/* BEGIN FUNCTION-DECL __builtin_objc_memmove_collectable LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_objc_memmove_collectable(void * , void const   * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_objc_memmove_collectable LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_modff LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_modff(float  , float * ) ;  */
/* END FUNCTION-DECL __builtin_modff LOC=BUILTIN */

/* BEGIN TYPEDEF __darwin_wint_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:112 */
typedef int __darwin_wint_t;
/* END TYPEDEF __darwin_wint_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:112 */

/* BEGIN TYPEDEF wint_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_wint_t.h:32 */
typedef __darwin_wint_t wint_t;
/* END TYPEDEF wint_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_wint_t.h:32 */

/* BEGIN FUNCTION-DECL __builtin_nearbyintf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_nearbyintf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_nearbyintf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_free LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_free(void * ) ;  */
/* END FUNCTION-DECL __builtin_free LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_eh_return LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_eh_return(unsigned long long  , void * ) ;  */
/* END FUNCTION-DECL __builtin_eh_return LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_convertvector LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_convertvector(...) ;  */
/* END FUNCTION-DECL __builtin_convertvector LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN execle LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:442 */
extern int execle(char const   *__path , char const   *__arg0  , ...)  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN execle LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:442 */

/* BEGIN FUNCTION-DECL rmap_is_associated_aux LOC=UNKNOWN */
__inline static jit_hw_reg *rmap_is_associated_aux(jit_tree *n , int reg_id , int fp ,
                                                   jit_value *virt_reg ) ;
/* END FUNCTION-DECL rmap_is_associated_aux LOC=UNKNOWN */

/* BEGIN VARIABLE-DEF jit_debugging_disasm LOC=UNKNOWN */
static struct jit_disasm jit_debugging_disasm  ;
/* END VARIABLE-DEF jit_debugging_disasm LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_remainderf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_remainderf128(_Float128  , _Float128  ) ;  */
/* END FUNCTION-DECL __builtin_remainderf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN lcong48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:214 */
extern void lcong48(unsigned short * ) ;
/* END FUNCTION-DECL-EXTERN lcong48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:214 */

/* BEGIN FUNCTION-DECL-EXTERN munlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:232 */
extern int munlock(void const   * , size_t  ) ;
/* END FUNCTION-DECL-EXTERN munlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:232 */

/* BEGIN STRUCT timespec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timespec.h:33 */
struct timespec {
   __darwin_time_t tv_sec ;
   long tv_nsec ;
};
/* END STRUCT timespec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timespec.h:33 */

/* BEGIN FUNCTION-DECL-EXTERN acct LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:644 */
extern int acct(char const   * ) ;
/* END FUNCTION-DECL-EXTERN acct LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:644 */

/* BEGIN ENUM jit_amd64_fp_regs LOC=./jitter-Darwin-X86-64.c:1033 */
enum jit_amd64_fp_regs {
    AMD64_XMM0 = 0,
    AMD64_XMM1 = 1,
    AMD64_XMM2 = 2,
    AMD64_XMM3 = 3,
    AMD64_XMM4 = 4,
    AMD64_XMM5 = 5,
    AMD64_XMM6 = 6,
    AMD64_XMM7 = 7,
    AMD64_XMM8 = 8,
    AMD64_XMM9 = 9,
    AMD64_XMM10 = 10,
    AMD64_XMM11 = 11,
    AMD64_XMM12 = 12,
    AMD64_XMM13 = 13,
    AMD64_XMM14 = 14,
    AMD64_XMM15 = 15,
    AMD64_XMM_NREG = 16
} ;
/* END ENUM jit_amd64_fp_regs LOC=./jitter-Darwin-X86-64.c:1033 */

/* BEGIN FUNCTION-DECL __builtin_cosh LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_cosh(double  ) ;  */
/* END FUNCTION-DECL __builtin_cosh LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_tree_subset LOC=UNKNOWN */
static int jit_tree_subset(jit_tree *root , jit_tree *n ) ;
/* END FUNCTION-DECL jit_tree_subset LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_log10f LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_log10f(float  ) ;  */
/* END FUNCTION-DECL __builtin_log10f LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_subcl LOC=BUILTIN */
/* compiler builtin: 
   unsigned long __builtin_subcl(unsigned long const    , unsigned long const    ,
                                 unsigned long const    , unsigned long * ) ;  */
/* END FUNCTION-DECL __builtin_subcl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_sinhl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_sinhl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_sinhl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_condattr_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:321 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_condattr_init(pthread_condattr_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_condattr_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:321 */

/* BEGIN FUNCTION-DECL-EXTERN mkstemp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:217 */
extern int mkstemp(char * ) ;
/* END FUNCTION-DECL-EXTERN mkstemp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:217 */

/* BEGIN FUNCTION-DECL __builtin___vprintf_chk LOC=BUILTIN */
/* compiler builtin: 
   int __builtin___vprintf_chk(int  , char const   * , __builtin_va_list  ) ;  */
/* END FUNCTION-DECL __builtin___vprintf_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_addcb LOC=BUILTIN */
/* compiler builtin: 
   unsigned char __builtin_addcb(unsigned char const    , unsigned char const    ,
                                 unsigned char const    , unsigned char * ) ;  */
/* END FUNCTION-DECL __builtin_addcb LOC=BUILTIN */

/* BEGIN STRUCT __darwin_x86_thread_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:633 */
struct __darwin_x86_thread_state64 {
   __uint64_t __rax ;
   __uint64_t __rbx ;
   __uint64_t __rcx ;
   __uint64_t __rdx ;
   __uint64_t __rdi ;
   __uint64_t __rsi ;
   __uint64_t __rbp ;
   __uint64_t __rsp ;
   __uint64_t __r8 ;
   __uint64_t __r9 ;
   __uint64_t __r10 ;
   __uint64_t __r11 ;
   __uint64_t __r12 ;
   __uint64_t __r13 ;
   __uint64_t __r14 ;
   __uint64_t __r15 ;
   __uint64_t __rip ;
   __uint64_t __rflags ;
   __uint64_t __cs ;
   __uint64_t __fs ;
   __uint64_t __gs ;
};
/* END STRUCT __darwin_x86_thread_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:633 */

/* BEGIN STRUCT __darwin_mcontext_avx64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:113 */
struct __darwin_mcontext_avx64 {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_state64 __ss ;
   struct __darwin_x86_avx_state64 __fs ;
};
/* END STRUCT __darwin_mcontext_avx64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:113 */

/* BEGIN FUNCTION-DECL check_missing_patches LOC=UNKNOWN */
static int check_missing_patches(jit_op *op , char *msg_buf ) ;
/* END FUNCTION-DECL check_missing_patches LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN a64l LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:199 */
extern long a64l(char const   * ) ;
/* END FUNCTION-DECL-EXTERN a64l LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:199 */

/* BEGIN FUNCTION-DECL emit_div_op LOC=UNKNOWN */
static void emit_div_op(struct jit *jit , struct jit_op *op , int imm , int sign ,
                        int modulo ) ;
/* END FUNCTION-DECL emit_div_op LOC=UNKNOWN */

/* BEGIN TYPEDEF X86_XMM_Reg_No LOC=./jitter-Darwin-X86-64.c:1078 */
typedef enum jit_x86_fp_regs X86_XMM_Reg_No;
/* END TYPEDEF X86_XMM_Reg_No LOC=./jitter-Darwin-X86-64.c:1078 */

/* BEGIN FUNCTION-DECL ob_pad LOC=UNKNOWN */
static void ob_pad(struct output_buf *ob , int size ) ;
/* END FUNCTION-DECL ob_pad LOC=UNKNOWN */

/* BEGIN STRUCT jit_exec_mem LOC=./jitter-Darwin-X86-64.c:294 */
struct jit_exec_mem {
   void *data ;
   size_t size ;
};
/* END STRUCT jit_exec_mem LOC=./jitter-Darwin-X86-64.c:294 */

/* BEGIN FUNCTION-DECL-EXTERN cgetnum LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:287 */
extern int cgetnum(char * , char const   * , long * ) ;
/* END FUNCTION-DECL-EXTERN cgetnum LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:287 */

/* BEGIN FUNCTION-DECL print_rmap_callback LOC=UNKNOWN */
static void print_rmap_callback(jit_tree_key key , jit_tree_value value , void *disasm ) ;
/* END FUNCTION-DECL print_rmap_callback LOC=UNKNOWN */

/* BEGIN TYPEDEF int8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int8_t.h:30 */
typedef signed char int8_t;
/* END TYPEDEF int8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int8_t.h:30 */

/* BEGIN TYPEDEF int_fast8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:40 */
typedef int8_t int_fast8_t;
/* END TYPEDEF int_fast8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:40 */

/* BEGIN STRUCT __darwin_pthread_handler_rec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:57 */
struct __darwin_pthread_handler_rec {
   void (*__routine)(void * ) ;
   void *__arg ;
   struct __darwin_pthread_handler_rec *__next ;
};
/* END STRUCT __darwin_pthread_handler_rec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:57 */

/* BEGIN FUNCTION-DECL __builtin_wmemmove LOC=BUILTIN */
/* compiler builtin: 
   unsigned short *__builtin_wmemmove(unsigned short * , unsigned short * const   ,
                                      unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_wmemmove LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_log10f128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_log10f128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_log10f128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL print_addr LOC=UNKNOWN */
__inline static void print_addr(struct jit_disasm *disasm , struct output_buf *buf ,
                                jit_tree *labels , jit_op *op , int arg_pos ) ;
/* END FUNCTION-DECL print_addr LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN mincore LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:243 */
extern int mincore(void const   * , size_t  , char * ) ;
/* END FUNCTION-DECL-EXTERN mincore LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:243 */

/* BEGIN TYPEDEF uint16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint16_t.h:31 */
typedef unsigned short uint16_t;
/* END TYPEDEF uint16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint16_t.h:31 */

/* BEGIN TYPEDEF uint_fast16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:45 */
typedef uint16_t uint_fast16_t;
/* END TYPEDEF uint_fast16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:45 */

/* BEGIN FUNCTION-DECL-EXTERN sched_yield LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/sched.h:38 */
extern int sched_yield(void) ;
/* END FUNCTION-DECL-EXTERN sched_yield LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/sched.h:38 */

/* BEGIN VARIABLE-DECL _TIG_IZ_HQIz_argv LOC=UNKNOWN */
char **_TIG_IZ_HQIz_argv ;
/* END VARIABLE-DECL _TIG_IZ_HQIz_argv LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN setenv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:237 */
extern int setenv(char const   *__name , char const   *__value , int __overwrite )  __asm__("_setenv")  ;
/* END FUNCTION-DECL-EXTERN setenv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:237 */

/* BEGIN FUNCTION-DECL __builtin_wmemchr LOC=BUILTIN */
/* compiler builtin: 
   unsigned short *__builtin_wmemchr(unsigned short * const   , unsigned short  ,
                                     unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_wmemchr LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_condattr_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:318 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_condattr_destroy(pthread_condattr_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_condattr_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:318 */

/* BEGIN FUNCTION-DECL DUMP_byte LOC=UNKNOWN */
void DUMP_byte(int block , struct jit *jit , struct jit_op *begin_ , struct jit_op *end_ ) ;
/* END FUNCTION-DECL DUMP_byte LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN setprogname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:299 */
extern void setprogname(char const   * ) ;
/* END FUNCTION-DECL-EXTERN setprogname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:299 */

/* BEGIN FUNCTION-DECL jit_init LOC=UNKNOWN */
struct jit *jit_init(void) ;
/* END FUNCTION-DECL jit_init LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_rint LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_rint(double  ) ;  */
/* END FUNCTION-DECL __builtin_rint LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_regs_active_count LOC=UNKNOWN */
int jit_regs_active_count(jit_op *op ) ;
/* END FUNCTION-DECL jit_regs_active_count LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL emit_mul_op LOC=UNKNOWN */
static void emit_mul_op(struct jit *jit , struct jit_op *op , int imm , int sign ,
                        int high_bytes ) ;
/* END FUNCTION-DECL emit_mul_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_umul_overflow LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_umul_overflow(unsigned int const    , unsigned int const    , unsigned int * ) ;  */
/* END FUNCTION-DECL __builtin_umul_overflow LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN sscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:181 */
extern int ( /* format attribute */  sscanf)(char const   * __restrict   , char const   * __restrict   
                                             , ...) ;
/* END FUNCTION-DECL-EXTERN sscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:181 */

/* BEGIN VARIABLE-DEF _TIG_iO_HQIz_2_init_tigress_1_opaque_ptr_1 LOC=UNKNOWN */
struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct *_TIG_iO_HQIz_2_init_tigress_1_opaque_ptr_1  =    (struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct *)0;
/* END VARIABLE-DEF _TIG_iO_HQIz_2_init_tigress_1_opaque_ptr_1 LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_prefetch LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_prefetch(void const   *  , ...) ;  */
/* END FUNCTION-DECL __builtin_prefetch LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_patch_local_addrs LOC=UNKNOWN */
void jit_patch_local_addrs(struct jit *jit ) ;
/* END FUNCTION-DECL jit_patch_local_addrs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_truncf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_truncf(float  ) ;  */
/* END FUNCTION-DECL __builtin_truncf LOC=BUILTIN */

/* BEGIN ENUM __anonenum_X86_Prefix_200431650 LOC=./jitter-Darwin-X86-64.c:1187 */
enum __anonenum_X86_Prefix_200431650 {
    X86_LOCK_PREFIX = 240,
    X86_REPNZ_PREFIX = 242,
    X86_REPZ_PREFIX = 243,
    X86_REP_PREFIX = 243,
    X86_CS_PREFIX = 46,
    X86_SS_PREFIX = 54,
    X86_DS_PREFIX = 62,
    X86_ES_PREFIX = 38,
    X86_FS_PREFIX = 100,
    X86_GS_PREFIX = 101,
    X86_UNLIKELY_PREFIX = 46,
    X86_LIKELY_PREFIX = 62,
    X86_OPERAND_PREFIX = 102,
    X86_ADDRESS_PREFIX = 103
} ;
/* END ENUM __anonenum_X86_Prefix_200431650 LOC=./jitter-Darwin-X86-64.c:1187 */

/* BEGIN FUNCTION-DECL-EXTERN fpurge LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:374 */
extern int fpurge(FILE * ) ;
/* END FUNCTION-DECL-EXTERN fpurge LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:374 */

/* BEGIN FUNCTION-DECL-EXTERN strcasestr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:160 */
extern char *strcasestr(char const   *__big , char const   *__little ) ;
/* END FUNCTION-DECL-EXTERN strcasestr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:160 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlock_unlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:461 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_unlock(pthread_rwlock_t * )  __asm__("_pthread_rwlock_unlock")  ;
/* END FUNCTION-DECL-EXTERN pthread_rwlock_unlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:461 */

/* BEGIN FUNCTION-DECL __builtin_mempcpy LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_mempcpy(void * , void const   * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_mempcpy LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN getchar LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:167 */
extern int getchar(void) ;
/* END FUNCTION-DECL-EXTERN getchar LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:167 */

/* BEGIN FUNCTION-DECL __builtin_clrsbl LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_clrsbl(long  ) ;  */
/* END FUNCTION-DECL __builtin_clrsbl LOC=BUILTIN */

/* BEGIN VARIABLE-DEF _TIG_VZ_HQIz_3_fib_$strings LOC=UNKNOWN */
char const   *_TIG_VZ_HQIz_3_fib_$strings  =    "fib(%i)=%i\n\000";
/* END VARIABLE-DEF _TIG_VZ_HQIz_3_fib_$strings LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL move_red_left LOC=UNKNOWN */
__inline static jit_tree *move_red_left(jit_tree *h ) ;
/* END FUNCTION-DECL move_red_left LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_fminf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_fminf128(_Float128  , _Float128  ) ;  */
/* END FUNCTION-DECL __builtin_fminf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN isatty LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:463 */
extern int isatty(int  ) ;
/* END FUNCTION-DECL-EXTERN isatty LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:463 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_setprotocol LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:425 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_setprotocol(pthread_mutexattr_t * ,
                                                                                                                                         int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_setprotocol LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:425 */

/* BEGIN FUNCTION-DECL __builtin_bcmp LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_bcmp(void const   * , void const   * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_bcmp LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN __swbuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:251 */
extern int __swbuf(int  , FILE * ) ;
/* END FUNCTION-DECL-EXTERN __swbuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:251 */

/* BEGIN FUNCTION-DECL-EXTERN atol LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:136 */
extern long atol(char const   * ) ;
/* END FUNCTION-DECL-EXTERN atol LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:136 */

/* BEGIN FUNCTION-DECL jit_imm_overflow LOC=UNKNOWN */
static int jit_imm_overflow(struct jit *jit , jit_op *op , jit_value value ) ;
/* END FUNCTION-DECL jit_imm_overflow LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL emit_branch_mask_op LOC=UNKNOWN */
static void emit_branch_mask_op(struct jit *jit , struct jit_op *op , int cond , int imm ) ;
/* END FUNCTION-DECL emit_branch_mask_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_cpowf LOC=BUILTIN */
/* compiler builtin: 
   _Complex float __builtin_cpowf(_Complex float  , _Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_cpowf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strlcpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:163 */
extern size_t strlcpy(char *__dst , char const   *__source , size_t __size ) ;
/* END FUNCTION-DECL-EXTERN strlcpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:163 */

/* BEGIN FUNCTION-DECL-EXTERN mkstemps LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:674 */
extern int mkstemps(char * , int  ) ;
/* END FUNCTION-DECL-EXTERN mkstemps LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:674 */

/* BEGIN FUNCTION-DECL __builtin_saddll_overflow LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_saddll_overflow(long long const    , long long const    , long long * ) ;  */
/* END FUNCTION-DECL __builtin_saddll_overflow LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_msg_op LOC=UNKNOWN */
static void emit_msg_op(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_msg_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_from_mach_thread_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:553 */
extern pthread_t __attribute__((__nullable__, __availability__(macos,introduced=10.5),
__availability__(ios,introduced=2.0)))  pthread_from_mach_thread_np(mach_port_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_from_mach_thread_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:553 */

/* BEGIN VARIABLE-DEF _TIG_iO_HQIz_2_init_tigress_1__opaque_array LOC=UNKNOWN */
unsigned int _TIG_iO_HQIz_2_init_tigress_1__opaque_array[30]  = 
  {      8,      362,      3,      493, 
        432,      5,      303,      390, 
        5,      383,      5,      7, 
        133,      47,      1,      288, 
        502,      95,      218,      628, 
        22,      428,      656,      41, 
        68,      201,      34,      403, 
        698};
/* END VARIABLE-DEF _TIG_iO_HQIz_2_init_tigress_1__opaque_array LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN ftruncate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:607 */
extern int ftruncate(int  , off_t  ) ;
/* END FUNCTION-DECL-EXTERN ftruncate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:607 */

/* BEGIN FUNCTION-DECL-EXTERN fseeko LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:327 */
extern int fseeko(FILE *__stream , off_t __offset , int __whence ) ;
/* END FUNCTION-DECL-EXTERN fseeko LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:327 */

/* BEGIN FUNCTION-DECL-EXTERN setattrlist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:752 */
extern int setattrlist(char const   * , void * , void * , size_t  , unsigned int  )  __asm__("_setattrlist")  ;
/* END FUNCTION-DECL-EXTERN setattrlist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:752 */

/* BEGIN FUNCTION-DECL-EXTERN strcat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:75 */
extern char *strcat(char *__s1 , char const   *__s2 ) ;
/* END FUNCTION-DECL-EXTERN strcat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:75 */

/* BEGIN FUNCTION-DECL jit_set_get LOC=UNKNOWN */
__inline static int jit_set_get(jit_set *s , int value ) ;
/* END FUNCTION-DECL jit_set_get LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_subcll LOC=BUILTIN */
/* compiler builtin: 
   unsigned __int128 __builtin_subcll(unsigned long long const    , unsigned long long const    ,
                                      unsigned long long const    , unsigned long long * ) ;  */
/* END FUNCTION-DECL __builtin_subcll LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_realloc LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_realloc(void * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_realloc LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN setusershell LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:728 */
extern void setusershell(void) ;
/* END FUNCTION-DECL-EXTERN setusershell LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:728 */

/* BEGIN FUNCTION-DECL assign_regs_for_args LOC=UNKNOWN */
static void assign_regs_for_args(struct jit_reg_allocator *al , jit_op *op ) ;
/* END FUNCTION-DECL assign_regs_for_args LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_remquof LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_remquof(float  , float  , int * ) ;  */
/* END FUNCTION-DECL __builtin_remquof LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_acosh LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_acosh(double  ) ;  */
/* END FUNCTION-DECL __builtin_acosh LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_nextafterf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_nextafterf(float  , float  ) ;  */
/* END FUNCTION-DECL __builtin_nextafterf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_main_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:517 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_main_np(void) ;
/* END FUNCTION-DECL-EXTERN pthread_main_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:517 */

/* BEGIN FUNCTION-DECL __builtin_cbrtl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_cbrtl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_cbrtl LOC=BUILTIN */

/* BEGIN VARIABLE-DECL-EXTERN optind LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:512 */
extern int optind ;
/* END VARIABLE-DECL-EXTERN optind LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:512 */

/* BEGIN FUNCTION-DECL __builtin_nearbyintl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_nearbyintl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_nearbyintl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strlcat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:162 */
extern size_t strlcat(char *__dst , char const   *__source , size_t __size ) ;
/* END FUNCTION-DECL-EXTERN strlcat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:162 */

/* BEGIN FUNCTION-DECL __builtin_roundl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_roundl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_roundl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN shm_open LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:236 */
extern int shm_open(char const   * , int   , ...) ;
/* END FUNCTION-DECL-EXTERN shm_open LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:236 */

/* BEGIN FUNCTION-DECL-EXTERN strncmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:84 */
extern int strncmp(char const   *__s1 , char const   *__s2 , size_t __n ) ;
/* END FUNCTION-DECL-EXTERN strncmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:84 */

/* BEGIN FUNCTION-DECL-EXTERN sync LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:598 */
extern void sync(void) ;
/* END FUNCTION-DECL-EXTERN sync LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:598 */

/* BEGIN FUNCTION-DECL __builtin_casinhf LOC=BUILTIN */
/* compiler builtin: 
   _Complex float __builtin_casinhf(_Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_casinhf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_ia32_addps LOC=BUILTIN */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_addps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* END FUNCTION-DECL __builtin_ia32_addps LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN ecvt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:201 */
extern char *ecvt(double  , int  , int * __restrict   , int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN ecvt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:201 */

/* BEGIN VARIABLE-DECL _TIG_iO_HQIz_2_init_tigress_1_opaque_list_2 LOC=UNKNOWN */
struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct *_TIG_iO_HQIz_2_init_tigress_1_opaque_list_2 ;
/* END VARIABLE-DECL _TIG_iO_HQIz_2_init_tigress_1_opaque_list_2 LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_prepare_arguments LOC=UNKNOWN */
void jit_prepare_arguments(struct jit *jit ) ;
/* END FUNCTION-DECL jit_prepare_arguments LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN realloc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:43 */
extern void *( __attribute__((__warn_unused_result__)) realloc)(void *ptr , size_t size )  __attribute__((__alloc_size__(2))) ;
/* END FUNCTION-DECL-EXTERN realloc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:43 */

/* BEGIN FUNCTION-DECL get_related_op LOC=UNKNOWN */
static jit_op *get_related_op(jit_op *op , int result_reg ) ;
/* END FUNCTION-DECL get_related_op LOC=UNKNOWN */

/* BEGIN VARIABLE-DECL-EXTERN opterr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:512 */
extern int opterr ;
/* END VARIABLE-DECL-EXTERN opterr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:512 */

/* BEGIN FUNCTION-DECL jit_proc_value LOC=UNKNOWN */
__inline static jit_value jit_proc_value(void (*f)(void) ) ;
/* END FUNCTION-DECL jit_proc_value LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN endusershell LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:646 */
extern void endusershell(void) ;
/* END FUNCTION-DECL-EXTERN endusershell LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:646 */

/* BEGIN FUNCTION-DECL associate_register LOC=UNKNOWN */
static void associate_register(struct jit_reg_allocator *al , jit_op *op , int i ) ;
/* END FUNCTION-DECL associate_register LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_setconcurrency LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:488 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_setconcurrency(int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_setconcurrency LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:488 */

/* BEGIN FUNCTION-DECL jit_trace_callback LOC=UNKNOWN */
void jit_trace_callback(struct jit *jit , jit_op *op , int verbosity , int trace ) ;
/* END FUNCTION-DECL jit_trace_callback LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_setguardsize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:265 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setguardsize(pthread_attr_t * ,
                                                                                                                                     size_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_setguardsize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:265 */

/* BEGIN STRUCT __darwin_x86_float_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:714 */
struct __darwin_x86_float_state64 {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   struct __darwin_xmm_reg __fpu_xmm8 ;
   struct __darwin_xmm_reg __fpu_xmm9 ;
   struct __darwin_xmm_reg __fpu_xmm10 ;
   struct __darwin_xmm_reg __fpu_xmm11 ;
   struct __darwin_xmm_reg __fpu_xmm12 ;
   struct __darwin_xmm_reg __fpu_xmm13 ;
   struct __darwin_xmm_reg __fpu_xmm14 ;
   struct __darwin_xmm_reg __fpu_xmm15 ;
   char __fpu_rsrv4[96] ;
   int __fpu_reserved1 ;
};
/* END STRUCT __darwin_x86_float_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:714 */

/* BEGIN FUNCTION-DECL node_min LOC=UNKNOWN */
__inline static jit_tree_key node_min(jit_tree *x ) ;
/* END FUNCTION-DECL node_min LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL print_combined_op LOC=UNKNOWN */
static jit_op *print_combined_op(FILE *f , struct jit *jit , struct jit_op *op , jit_tree *labels ) ;
/* END FUNCTION-DECL print_combined_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pread LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:573 */
extern ssize_t pread(int __fd , void *__buf , size_t __nbyte , off_t __offset )  __asm__("_pread")  ;
/* END FUNCTION-DECL-EXTERN pread LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:573 */

/* BEGIN VARIABLE-DECL _TIG_JD_HQIz_4_fib___t LOC=UNKNOWN */
char const   *_TIG_JD_HQIz_4_fib___t ;
/* END VARIABLE-DECL _TIG_JD_HQIz_4_fib___t LOC=UNKNOWN */

/* BEGIN UNION __anonunion_location_1021650749 LOC=./jitter-Darwin-X86-64.c:720 */
union __anonunion_location_1021650749 {
   int reg ;
   int stack_pos ;
};
/* END UNION __anonunion_location_1021650749 LOC=./jitter-Darwin-X86-64.c:720 */

/* BEGIN FUNCTION-DECL __builtin_strspn LOC=BUILTIN */
/* compiler builtin: 
   unsigned long long __builtin_strspn(char const   * , char const   * ) ;  */
/* END FUNCTION-DECL __builtin_strspn LOC=BUILTIN */

/* BEGIN FUNCTION-DECL rmap_get LOC=UNKNOWN */
static jit_hw_reg *rmap_get(jit_rmap *rmap , jit_value reg ) ;
/* END FUNCTION-DECL rmap_get LOC=UNKNOWN */

/* BEGIN TYPEDEF ucontext_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ucontext.h:56 */
typedef struct __darwin_ucontext ucontext_t;
/* END TYPEDEF ucontext_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ucontext.h:56 */

/* BEGIN FUNCTION-DECL-EXTERN futimes LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:191 */
extern int futimes(int  , struct timeval  const  * ) ;
/* END FUNCTION-DECL-EXTERN futimes LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:191 */

/* BEGIN FUNCTION-DECL-EXTERN getprogname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:298 */
extern char const   *getprogname(void) ;
/* END FUNCTION-DECL-EXTERN getprogname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:298 */

/* BEGIN VARIABLE-DECL-EXTERN tzname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:98 */
extern char *tzname[] ;
/* END VARIABLE-DECL-EXTERN tzname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:98 */

/* BEGIN FUNCTION-DECL assign_regs LOC=UNKNOWN */
static void assign_regs(struct jit *jit , struct jit_op *op ) ;
/* END FUNCTION-DECL assign_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN execvp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:446 */
extern int execvp(char const   *__file , char **__argv )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN execvp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:446 */

/* BEGIN FUNCTION-DECL islower LOC=UNKNOWN */
__inline int islower(int _c ) ;
/* END FUNCTION-DECL islower LOC=UNKNOWN */

/* BEGIN STRUCT rusage_info_v0 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:195 */
struct rusage_info_v0 {
   uint8_t ri_uuid[16] ;
   uint64_t ri_user_time ;
   uint64_t ri_system_time ;
   uint64_t ri_pkg_idle_wkups ;
   uint64_t ri_interrupt_wkups ;
   uint64_t ri_pageins ;
   uint64_t ri_wired_size ;
   uint64_t ri_resident_size ;
   uint64_t ri_phys_footprint ;
   uint64_t ri_proc_start_abstime ;
   uint64_t ri_proc_exit_abstime ;
};
/* END STRUCT rusage_info_v0 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:195 */

/* BEGIN FUNCTION-DECL __builtin_carg LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_carg(_Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_carg LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_sin LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_sin(double  ) ;  */
/* END FUNCTION-DECL __builtin_sin LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_remainderl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_remainderl(long double  , long double  ) ;  */
/* END FUNCTION-DECL __builtin_remainderl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_hypotf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_hypotf128(_Float128  , _Float128  ) ;  */
/* END FUNCTION-DECL __builtin_hypotf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_wcscmp LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_wcscmp(unsigned short * const   , unsigned short * const   ) ;  */
/* END FUNCTION-DECL __builtin_wcscmp LOC=BUILTIN */

/* BEGIN FUNCTION-DECL node_insert LOC=UNKNOWN */
static jit_tree *node_insert(jit_tree *h , jit_tree_key key , jit_tree_value value ,
                             int *found ) ;
/* END FUNCTION-DECL node_insert LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_getguardsize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:232 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getguardsize(pthread_attr_t const   * __restrict   ,
                                                                                                                                     size_t * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_getguardsize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:232 */

/* BEGIN FUNCTION-DECL __builtin_log2f16 LOC=BUILTIN */
/* compiler builtin: 
   _Float16 __builtin_log2f16(_Float16  ) ;  */
/* END FUNCTION-DECL __builtin_log2f16 LOC=BUILTIN */

/* BEGIN STRUCT proc_rlimit_control_wakeupmon LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:400 */
struct proc_rlimit_control_wakeupmon {
   uint32_t wm_flags ;
   int32_t wm_rate ;
};
/* END STRUCT proc_rlimit_control_wakeupmon LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:400 */

/* BEGIN FUNCTION-DECL-EXTERN atexit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:133 */
extern int atexit(void (* _Nonnull  )(void) ) ;
/* END FUNCTION-DECL-EXTERN atexit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:133 */

/* BEGIN TYPEDEF u_quad_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:95 */
typedef u_int64_t u_quad_t;
/* END TYPEDEF u_quad_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:95 */

/* BEGIN FUNCTION-DECL-EXTERN timespec_get LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:199 */
extern int __attribute__((__availability__(watchos,introduced=6.0), __availability__(tvos,introduced=13.0),
__availability__(ios,introduced=13.0), __availability__(macosx,introduced=10.15)))  timespec_get(struct timespec *ts ,
                                                                                                 int base ) ;
/* END FUNCTION-DECL-EXTERN timespec_get LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:199 */

/* BEGIN FUNCTION-DECL-EXTERN strncasecmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:79 */
extern int strncasecmp(char const   * , char const   * , size_t  ) ;
/* END FUNCTION-DECL-EXTERN strncasecmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:79 */

/* BEGIN FUNCTION-DECL __builtin_cpowl LOC=BUILTIN */
/* compiler builtin: 
   _Complex long double __builtin_cpowl(_Complex long double  , _Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_cpowl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_push_callee_saved_regs LOC=UNKNOWN */
static int emit_push_callee_saved_regs(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_push_callee_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL join_muli_addi LOC=UNKNOWN */
static int join_muli_addi(jit_op *op , jit_op *nextop ) ;
/* END FUNCTION-DECL join_muli_addi LOC=UNKNOWN */

/* BEGIN STRUCT __darwin_sigaltstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigaltstack.h:42 */
struct __darwin_sigaltstack {
   void *ss_sp ;
   __darwin_size_t ss_size ;
   int ss_flags ;
};
/* END STRUCT __darwin_sigaltstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigaltstack.h:42 */

/* BEGIN STRUCT __darwin_ucontext LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ucontext.h:42 */
struct __darwin_ucontext {
   int uc_onstack ;
   __darwin_sigset_t uc_sigmask ;
   struct __darwin_sigaltstack uc_stack ;
   struct __darwin_ucontext *uc_link ;
   __darwin_size_t uc_mcsize ;
   struct __darwin_mcontext64 *uc_mcontext ;
};
/* END STRUCT __darwin_ucontext LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ucontext.h:42 */

/* BEGIN FUNCTION-DECL __builtin_acosf128 LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_acosf128(long double  , _Float128  ) ;  */
/* END FUNCTION-DECL __builtin_acosf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_fdimf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_fdimf(float  , float  ) ;  */
/* END FUNCTION-DECL __builtin_fdimf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN iruserok LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:710 */
extern  __attribute__((__deprecated__)) int iruserok(unsigned long  , int  , char const   * ,
                                                     char const   * ) ;
/* END FUNCTION-DECL-EXTERN iruserok LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:710 */

/* BEGIN FUNCTION-DECL emit_set_fparg LOC=UNKNOWN */
__inline static void emit_set_fparg(struct jit *jit , struct jit_out_arg *arg ) ;
/* END FUNCTION-DECL emit_set_fparg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN ttyname_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:489 */
extern int ttyname_r(int  , char * , size_t  )  __asm__("_ttyname_r")  ;
/* END FUNCTION-DECL-EXTERN ttyname_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:489 */

/* BEGIN FUNCTION-DECL jit_flw_analysis LOC=UNKNOWN */
__inline static void jit_flw_analysis(struct jit *jit ) ;
/* END FUNCTION-DECL jit_flw_analysis LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN setwgroups_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:729 */
extern int setwgroups_np(int  , unsigned char * const   ) ;
/* END FUNCTION-DECL-EXTERN setwgroups_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:729 */

/* BEGIN FUNCTION-DECL __builtin_islessgreater LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_islessgreater(...) ;  */
/* END FUNCTION-DECL __builtin_islessgreater LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_nexttowardf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_nexttowardf(float  , long double  ) ;  */
/* END FUNCTION-DECL __builtin_nexttowardf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_clog LOC=BUILTIN */
/* compiler builtin: 
   _Complex double __builtin_clog(_Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_clog LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strnlen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:133 */
extern size_t strnlen(char const   *__s1 , size_t __n )  __attribute__((__availability__(macosx,introduced=10.7))) ;
/* END FUNCTION-DECL-EXTERN strnlen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:133 */

/* BEGIN STRUCT __darwin_x86_debug_state32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:595 */
struct __darwin_x86_debug_state32 {
   unsigned int __dr0 ;
   unsigned int __dr1 ;
   unsigned int __dr2 ;
   unsigned int __dr3 ;
   unsigned int __dr4 ;
   unsigned int __dr5 ;
   unsigned int __dr6 ;
   unsigned int __dr7 ;
};
/* END STRUCT __darwin_x86_debug_state32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:595 */

/* BEGIN TYPEDEF swblk_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:126 */
typedef int32_t swblk_t;
/* END TYPEDEF swblk_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:126 */

/* BEGIN FUNCTION-DECL __builtin_strncat LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin_strncat(char * , char const   * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_strncat LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN bcmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:70 */
extern int bcmp(void const   * , void const   * , size_t  ) ;
/* END FUNCTION-DECL-EXTERN bcmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:70 */

/* BEGIN TYPEDEF u_int32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int32_t.h:30 */
typedef unsigned int u_int32_t;
/* END TYPEDEF u_int32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int32_t.h:30 */

/* BEGIN FUNCTION-DECL emit_sse_fstx_op LOC=UNKNOWN */
static void emit_sse_fstx_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                             jit_value a3 ) ;
/* END FUNCTION-DECL emit_sse_fstx_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_snprintf LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_snprintf(char * , unsigned long long  , char const   *  , ...) ;  */
/* END FUNCTION-DECL __builtin_snprintf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_ia32_maxps LOC=BUILTIN */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_maxps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* END FUNCTION-DECL __builtin_ia32_maxps LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN fopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:153 */
extern FILE *fopen(char const   * __restrict  __filename , char const   * __restrict  __mode )  __asm__("_fopen")  ;
/* END FUNCTION-DECL-EXTERN fopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:153 */

/* BEGIN FUNCTION-DECL-EXTERN truncate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:599 */
extern int truncate(char const   * , off_t  ) ;
/* END FUNCTION-DECL-EXTERN truncate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:599 */

/* BEGIN FUNCTION-DECL-EXTERN setsgroups_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:727 */
extern int setsgroups_np(int  , unsigned char * const   ) ;
/* END FUNCTION-DECL-EXTERN setsgroups_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:727 */

/* BEGIN FUNCTION-DECL check_op_without_effect LOC=UNKNOWN */
static int check_op_without_effect(jit_op *op , char *msg_buf ) ;
/* END FUNCTION-DECL check_op_without_effect LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_fabs LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_fabs(double  ) ;  */
/* END FUNCTION-DECL __builtin_fabs LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN mkdtemp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:667 */
extern char *mkdtemp(char * ) ;
/* END FUNCTION-DECL-EXTERN mkdtemp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:667 */

/* BEGIN FUNCTION-DECL-EXTERN mknod LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:668 */
extern int mknod(char const   * , mode_t  , dev_t  ) ;
/* END FUNCTION-DECL-EXTERN mknod LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:668 */

/* BEGIN VARIABLE-DECL-EXTERN timezone LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:103 */
extern long timezone  __asm__("_timezone")  ;
/* END VARIABLE-DECL-EXTERN timezone LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:103 */

/* BEGIN FUNCTION-DECL emit_trace_op LOC=UNKNOWN */
static void emit_trace_op(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_trace_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin___memmove_chk LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin___memmove_chk(void * , void const   * , unsigned long long  , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin___memmove_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_acoshl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_acoshl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_acoshl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN mlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:221 */
extern int mlock(void const   * , size_t  ) ;
/* END FUNCTION-DECL-EXTERN mlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:221 */

/* BEGIN STRUCT rusage_info_v4 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:282 */
struct rusage_info_v4 {
   uint8_t ri_uuid[16] ;
   uint64_t ri_user_time ;
   uint64_t ri_system_time ;
   uint64_t ri_pkg_idle_wkups ;
   uint64_t ri_interrupt_wkups ;
   uint64_t ri_pageins ;
   uint64_t ri_wired_size ;
   uint64_t ri_resident_size ;
   uint64_t ri_phys_footprint ;
   uint64_t ri_proc_start_abstime ;
   uint64_t ri_proc_exit_abstime ;
   uint64_t ri_child_user_time ;
   uint64_t ri_child_system_time ;
   uint64_t ri_child_pkg_idle_wkups ;
   uint64_t ri_child_interrupt_wkups ;
   uint64_t ri_child_pageins ;
   uint64_t ri_child_elapsed_abstime ;
   uint64_t ri_diskio_bytesread ;
   uint64_t ri_diskio_byteswritten ;
   uint64_t ri_cpu_time_qos_default ;
   uint64_t ri_cpu_time_qos_maintenance ;
   uint64_t ri_cpu_time_qos_background ;
   uint64_t ri_cpu_time_qos_utility ;
   uint64_t ri_cpu_time_qos_legacy ;
   uint64_t ri_cpu_time_qos_user_initiated ;
   uint64_t ri_cpu_time_qos_user_interactive ;
   uint64_t ri_billed_system_time ;
   uint64_t ri_serviced_system_time ;
   uint64_t ri_logical_writes ;
   uint64_t ri_lifetime_max_phys_footprint ;
   uint64_t ri_instructions ;
   uint64_t ri_cycles ;
   uint64_t ri_billed_energy ;
   uint64_t ri_serviced_energy ;
   uint64_t ri_interval_max_phys_footprint ;
   uint64_t ri_runnable_time ;
};
/* END STRUCT rusage_info_v4 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:282 */

/* BEGIN FUNCTION-DECL jit_op_delete LOC=UNKNOWN */
__inline static void jit_op_delete(jit_op *op ) ;
/* END FUNCTION-DECL jit_op_delete LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_erfc LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_erfc(double  ) ;  */
/* END FUNCTION-DECL __builtin_erfc LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_get_arg_from_stack LOC=UNKNOWN */
static void emit_get_arg_from_stack(struct jit *jit , int type , int size , int dreg ,
                                    int stack_reg , int stack_pos ) ;
/* END FUNCTION-DECL emit_get_arg_from_stack LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN fseek LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:162 */
extern int fseek(FILE * , long  , int  ) ;
/* END FUNCTION-DECL-EXTERN fseek LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:162 */

/* BEGIN FUNCTION-DECL print_full_op_name LOC=UNKNOWN */
void print_full_op_name(struct output_buf *linebuf , jit_op *op ) ;
/* END FUNCTION-DECL print_full_op_name LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN atof LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:134 */
extern double atof(char const   * ) ;
/* END FUNCTION-DECL-EXTERN atof LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:134 */

/* BEGIN FUNCTION-DECL-EXTERN setsid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:477 */
extern pid_t setsid(void) ;
/* END FUNCTION-DECL-EXTERN setsid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:477 */

/* BEGIN FUNCTION-DECL __builtin_tanh LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_tanh(double  ) ;  */
/* END FUNCTION-DECL __builtin_tanh LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN mergesort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:316 */
extern int mergesort(void *__base , size_t __nel , size_t __width , int (* _Nonnull  __compar)(void const   * ,
                                                                                               void const   * ) ) ;
/* END FUNCTION-DECL-EXTERN mergesort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:316 */

/* BEGIN FUNCTION-DECL __builtin_ffsl LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_ffsl(unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_ffsl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN gmtime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:113 */
extern struct tm *gmtime(time_t const   * ) ;
/* END FUNCTION-DECL-EXTERN gmtime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:113 */

/* BEGIN FUNCTION-DECL emit_sse_sub_op LOC=UNKNOWN */
static void emit_sse_sub_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                            jit_value a3 ) ;
/* END FUNCTION-DECL emit_sse_sub_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL _cipher$_xtea_decipherBlock LOC=UNKNOWN */
void _cipher$_xtea_decipherBlock(unsigned int num_rounds , unsigned int *v , unsigned int *key ) ;
/* END FUNCTION-DECL _cipher$_xtea_decipherBlock LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_fmodl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_fmodl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_fmodl LOC=BUILTIN */

/* BEGIN TYPEDEF X86_CC LOC=./jitter-Darwin-X86-64.c:1136 */
typedef enum __anonenum_X86_CC_467256102 X86_CC;
/* END TYPEDEF X86_CC LOC=./jitter-Darwin-X86-64.c:1136 */

/* BEGIN FUNCTION-DECL __builtin_ccosf LOC=BUILTIN */
/* compiler builtin: 
   _Complex float __builtin_ccosf(_Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_ccosf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_sinl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_sinl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_sinl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL isalnum LOC=UNKNOWN */
__inline int isalnum(int _c ) ;
/* END FUNCTION-DECL isalnum LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN getmode LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:660 */
extern mode_t getmode(void const   * , mode_t  ) ;
/* END FUNCTION-DECL-EXTERN getmode LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:660 */

/* BEGIN FUNCTION-DECL-EXTERN strptime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:117 */
extern char *strptime(char const   * __restrict   , char const   * __restrict   ,
                      struct tm * __restrict   )  __asm__("_strptime")  ;
/* END FUNCTION-DECL-EXTERN strptime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:117 */

/* BEGIN FUNCTION-DECL __builtin_scalbnf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_scalbnf(float  , int  ) ;  */
/* END FUNCTION-DECL __builtin_scalbnf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN getchar_unlocked LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:290 */
extern int getchar_unlocked(void) ;
/* END FUNCTION-DECL-EXTERN getchar_unlocked LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:290 */

/* BEGIN FUNCTION-DECL-EXTERN setlinebuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:376 */
extern int setlinebuf(FILE * ) ;
/* END FUNCTION-DECL-EXTERN setlinebuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:376 */

/* BEGIN TYPEDEF int_fast64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:43 */
typedef int64_t int_fast64_t;
/* END TYPEDEF int_fast64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:43 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_settype LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:431 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_settype(pthread_mutexattr_t * ,
                                                                                                                                     int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_settype LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:431 */

/* BEGIN FUNCTION-DECL-EXTERN mkdtempat_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:686 */
extern char *mkdtempat_np(int dfd , char *path )  __attribute__((__availability__(watchos,introduced=4.0),
__availability__(tvos,introduced=11.0), __availability__(ios,introduced=11.0), __availability__(macosx,introduced=10.13))) ;
/* END FUNCTION-DECL-EXTERN mkdtempat_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:686 */

/* BEGIN FUNCTION-DECL __builtin_ia32_mulps LOC=BUILTIN */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_mulps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* END FUNCTION-DECL __builtin_ia32_mulps LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN vasprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:377 */
extern int ( /* format attribute */  vasprintf)(char ** __restrict   , char const   * __restrict   ,
                                                va_list  ) ;
/* END FUNCTION-DECL-EXTERN vasprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:377 */

/* BEGIN FUNCTION-DECL __builtin_smull_overflow LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_smull_overflow(long const    , long const    , long * ) ;  */
/* END FUNCTION-DECL __builtin_smull_overflow LOC=BUILTIN */

/* BEGIN TYPEDEF stack_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigaltstack.h:48 */
typedef struct __darwin_sigaltstack stack_t;
/* END TYPEDEF stack_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigaltstack.h:48 */

/* BEGIN UNION __sigaction_u LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:269 */
union __sigaction_u {
   void (*__sa_handler)(int  ) ;
   void (*__sa_sigaction)(int  , struct __siginfo * , void * ) ;
};
/* END UNION __sigaction_u LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:269 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_override_qos_class_end_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:293 */
extern int __attribute__((__availability__(ios,introduced=8.0), __availability__(macos,introduced=10.10)))  pthread_override_qos_class_end_np(pthread_override_t __override ) ;
/* END FUNCTION-DECL-EXTERN pthread_override_qos_class_end_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:293 */

/* BEGIN STRUCT jit_arg_layout LOC=./jitter-Darwin-X86-64.c:1717 */
struct jit_arg_layout {
   struct jit *jit ;
   int arg_index ;
   int gp_index ;
   int fp_index ;
   int stack_index ;
   struct jit_arg_layout_location arguments[] ;
};
/* END STRUCT jit_arg_layout LOC=./jitter-Darwin-X86-64.c:1717 */

/* BEGIN FUNCTION-DECL __builtin_csqrtl LOC=BUILTIN */
/* compiler builtin: 
   _Complex long double __builtin_csqrtl(_Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_csqrtl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_nansl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_nansl(char const   * ) ;  */
/* END FUNCTION-DECL __builtin_nansl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_ceilf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_ceilf(float  ) ;  */
/* END FUNCTION-DECL __builtin_ceilf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_parityl LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_parityl(unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_parityl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN getc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:166 */
extern int getc(FILE * ) ;
/* END FUNCTION-DECL-EXTERN getc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:166 */

/* BEGIN FUNCTION-DECL __builtin_classify_type LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_classify_type(...) ;  */
/* END FUNCTION-DECL __builtin_classify_type LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN timegm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:138 */
extern time_t timegm(struct tm * ) ;
/* END FUNCTION-DECL-EXTERN timegm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:138 */

/* BEGIN FUNCTION-DECL jit_get_op_name LOC=UNKNOWN */
char *jit_get_op_name(struct jit_op *op ) ;
/* END FUNCTION-DECL jit_get_op_name LOC=UNKNOWN */

/* BEGIN TYPEDEF jit_unsigned_value LOC=./jitter-Darwin-X86-64.c:48 */
typedef unsigned long jit_unsigned_value;
/* END TYPEDEF jit_unsigned_value LOC=./jitter-Darwin-X86-64.c:48 */

/* BEGIN FUNCTION-DECL-EXTERN fdopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:210 */
extern FILE *fdopen(int  , char const   * )  __asm__("_fdopen")  ;
/* END FUNCTION-DECL-EXTERN fdopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:210 */

/* BEGIN VARIABLE-DEF _TIG_JD_HQIz_4_fib___t LOC=UNKNOWN */
char const   *_TIG_JD_HQIz_4_fib___t  =    "";
/* END VARIABLE-DEF _TIG_JD_HQIz_4_fib___t LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_strlen LOC=BUILTIN */
/* compiler builtin: 
   unsigned long long __builtin_strlen(char const   * ) ;  */
/* END FUNCTION-DECL __builtin_strlen LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_sse_fst_op LOC=UNKNOWN */
static void emit_sse_fst_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) ;
/* END FUNCTION-DECL emit_sse_fst_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_log1pf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_log1pf(float  ) ;  */
/* END FUNCTION-DECL __builtin_log1pf LOC=BUILTIN */

/* BEGIN STRUCT sigaction LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:286 */
struct sigaction {
   union __sigaction_u __sigaction_u ;
   sigset_t sa_mask ;
   int sa_flags ;
};
/* END STRUCT sigaction LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:286 */

/* BEGIN FUNCTION-DECL-EXTERN lseek LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:465 */
extern off_t lseek(int  , off_t  , int  ) ;
/* END FUNCTION-DECL-EXTERN lseek LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:465 */

/* BEGIN FUNCTION-DECL-EXTERN ungetc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:189 */
extern int ungetc(int  , FILE * ) ;
/* END FUNCTION-DECL-EXTERN ungetc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:189 */

/* BEGIN FUNCTION-DECL __builtin_scalblnf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_scalblnf128(_Float128  , long  ) ;  */
/* END FUNCTION-DECL __builtin_scalblnf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_uaddll_overflow LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_uaddll_overflow(unsigned long long const    , unsigned long long const    ,
                                   unsigned long long * ) ;  */
/* END FUNCTION-DECL __builtin_uaddll_overflow LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:259 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_init(pthread_attr_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:259 */

/* BEGIN FUNCTION-DECL-EXTERN strcpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:79 */
extern char *strcpy(char *__dst , char const   *__src ) ;
/* END FUNCTION-DECL-EXTERN strcpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:79 */

/* BEGIN FUNCTION-DECL __builtin_sqrtf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_sqrtf(float  ) ;  */
/* END FUNCTION-DECL __builtin_sqrtf LOC=BUILTIN */

/* BEGIN VARIABLE-DEF jit_disasm_compilable LOC=UNKNOWN */
struct jit_disasm jit_disasm_compilable  ;
/* END VARIABLE-DEF jit_disasm_compilable LOC=UNKNOWN */

/* BEGIN STRUCT __darwin_opmask_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:259 */
struct __darwin_opmask_reg {
   char __opmask_reg[8] ;
};
/* END STRUCT __darwin_opmask_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:259 */

/* BEGIN FUNCTION-DECL-EXTERN fpathconf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:448 */
extern long fpathconf(int  , int  ) ;
/* END FUNCTION-DECL-EXTERN fpathconf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:448 */

/* BEGIN FUNCTION-DECL emit_fretval_op LOC=UNKNOWN */
static void emit_fretval_op(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_fretval_op LOC=UNKNOWN */

/* BEGIN STRUCT itimerval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:91 */
struct itimerval {
   struct timeval it_interval ;
   struct timeval it_value ;
};
/* END STRUCT itimerval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:91 */

/* BEGIN FUNCTION-DECL __builtin_ctzs LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_ctzs(short  ) ;  */
/* END FUNCTION-DECL __builtin_ctzs LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_ccosh LOC=BUILTIN */
/* compiler builtin: 
   _Complex double __builtin_ccosh(_Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_ccosh LOC=BUILTIN */

/* BEGIN FUNCTION-DECL print_regs LOC=UNKNOWN */
static void print_regs(jit_tree_key reg , jit_tree_value v , void *thunk ) ;
/* END FUNCTION-DECL print_regs LOC=UNKNOWN */

/* BEGIN TYPEDEF uint_least16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:34 */
typedef uint16_t uint_least16_t;
/* END TYPEDEF uint_least16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:34 */

/* BEGIN FUNCTION-DECL force_spill LOC=UNKNOWN */
static int force_spill(jit_op *op ) ;
/* END FUNCTION-DECL force_spill LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN getuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:462 */
extern uid_t getuid(void) ;
/* END FUNCTION-DECL-EXTERN getuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:462 */

/* BEGIN FUNCTION-DECL __builtin_log1pf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_log1pf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_log1pf128 LOC=BUILTIN */

/* BEGIN VARIABLE-DECL _TIG_IZ_HQIz_argc LOC=UNKNOWN */
int _TIG_IZ_HQIz_argc ;
/* END VARIABLE-DECL _TIG_IZ_HQIz_argc LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN __snprintf_chk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_stdio.h:52 */
extern int __snprintf_chk(char * __restrict   , size_t  , int  , size_t  , char const   * __restrict   
                          , ...) ;
/* END FUNCTION-DECL-EXTERN __snprintf_chk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_stdio.h:52 */

/* BEGIN FUNCTION-DECL __builtin_uadd_overflow LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_uadd_overflow(unsigned int const    , unsigned int const    , unsigned int * ) ;  */
/* END FUNCTION-DECL __builtin_uadd_overflow LOC=BUILTIN */

/* BEGIN ENUM jit_inp_type LOC=./jitter-Darwin-X86-64.c:250 */
enum jit_inp_type {
    JIT_SIGNED_NUM = 0,
    JIT_UNSIGNED_NUM = 1,
    JIT_FLOAT_NUM = 2,
    JIT_PTR = 3
} ;
/* END ENUM jit_inp_type LOC=./jitter-Darwin-X86-64.c:250 */

/* BEGIN FUNCTION-DECL-EXTERN fsync LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:605 */
extern int fsync(int  )  __asm__("_fsync")  ;
/* END FUNCTION-DECL-EXTERN fsync LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:605 */

/* BEGIN FUNCTION-DECL __builtin_remainderf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_remainderf(float  , float  ) ;  */
/* END FUNCTION-DECL __builtin_remainderf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_threadid_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:506 */
extern int __attribute__((__availability__(ios,introduced=3.2), __availability__(macos,introduced=10.6)))  pthread_threadid_np(pthread_t __attribute__((__nullable__))   ,
                                                                                                                               __uint64_t * _Nullable   ) ;
/* END FUNCTION-DECL-EXTERN pthread_threadid_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:506 */

/* BEGIN FUNCTION-DECL __builtin_fmod LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_fmod(double  ) ;  */
/* END FUNCTION-DECL __builtin_fmod LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_create_suspended_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:541 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_create_suspended_np(pthread_t __attribute__((__nullable__))  * _Nonnull   ,
                                                                                                                                       pthread_attr_t const   * _Nullable   ,
                                                                                                                                       void * _Nullable  (* _Nonnull  )(void * _Nullable   ) ,
                                                                                                                                       void * _Nullable   ) ;
/* END FUNCTION-DECL-EXTERN pthread_create_suspended_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:541 */

/* BEGIN FUNCTION-DECL __builtin_truncl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_truncl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_truncl LOC=BUILTIN */

/* BEGIN ENUM __anonenum_X86_CC_467256102 LOC=./jitter-Darwin-X86-64.c:1136 */
enum __anonenum_X86_CC_467256102 {
    X86_CC_EQ = 0,
    X86_CC_E = 0,
    X86_CC_Z = 0,
    X86_CC_NE = 1,
    X86_CC_NZ = 1,
    X86_CC_LT = 2,
    X86_CC_B = 2,
    X86_CC_C = 2,
    X86_CC_NAE = 2,
    X86_CC_LE = 3,
    X86_CC_BE = 3,
    X86_CC_NA = 3,
    X86_CC_GT = 4,
    X86_CC_A = 4,
    X86_CC_NBE = 4,
    X86_CC_GE = 5,
    X86_CC_AE = 5,
    X86_CC_NB = 5,
    X86_CC_NC = 5,
    X86_CC_LZ = 6,
    X86_CC_S = 6,
    X86_CC_GEZ = 7,
    X86_CC_NS = 7,
    X86_CC_P = 8,
    X86_CC_PE = 8,
    X86_CC_NP = 9,
    X86_CC_PO = 9,
    X86_CC_O = 10,
    X86_CC_NO = 11,
    X86_NCC = 12
} ;
/* END ENUM __anonenum_X86_CC_467256102 LOC=./jitter-Darwin-X86-64.c:1136 */

/* BEGIN TYPEDEF X86_Reg_No LOC=./jitter-Darwin-X86-64.c:1066 */
typedef enum jit_x86_gp_regs X86_Reg_No;
/* END TYPEDEF X86_Reg_No LOC=./jitter-Darwin-X86-64.c:1066 */

/* BEGIN FUNCTION-DECL __builtin_log1p LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_log1p(double  ) ;  */
/* END FUNCTION-DECL __builtin_log1p LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_isgreaterequal LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_isgreaterequal(...) ;  */
/* END FUNCTION-DECL __builtin_isgreaterequal LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_lgammal LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_lgammal(long double  ) ;  */
/* END FUNCTION-DECL __builtin_lgammal LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_return_address LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_return_address(unsigned int  ) ;  */
/* END FUNCTION-DECL __builtin_return_address LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_set_size LOC=UNKNOWN */
__inline static int jit_set_size(jit_set *s ) ;
/* END FUNCTION-DECL jit_set_size LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN strtok LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:90 */
extern char *strtok(char *__str , char const   *__sep ) ;
/* END FUNCTION-DECL-EXTERN strtok LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:90 */

/* BEGIN FUNCTION-DECL-EXTERN gmtime_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:127 */
extern struct tm *gmtime_r(time_t const   * __restrict   , struct tm * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN gmtime_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:127 */

/* BEGIN TYPEDEF user_ssize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:99 */
typedef int64_t user_ssize_t;
/* END TYPEDEF user_ssize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:99 */

/* BEGIN FUNCTION-DECL-EXTERN getc_unlocked LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:289 */
extern int getc_unlocked(FILE * ) ;
/* END FUNCTION-DECL-EXTERN getc_unlocked LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:289 */

/* BEGIN FUNCTION-DECL __builtin_tanl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_tanl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_tanl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_cond_wait LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:314 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_wait(pthread_cond_t * __restrict   ,
                                                                                                                             pthread_mutex_t * __restrict   )  __asm__("_pthread_cond_wait")  ;
/* END FUNCTION-DECL-EXTERN pthread_cond_wait LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:314 */

/* BEGIN FUNCTION-DECL append_msg LOC=UNKNOWN */
static void append_msg(char *buf , char *format  , ...) ;
/* END FUNCTION-DECL append_msg LOC=UNKNOWN */

/* BEGIN TYPEDEF X86_ALU_Opcode LOC=./jitter-Darwin-X86-64.c:1093 */
typedef enum __anonenum_X86_ALU_Opcode_144447433 X86_ALU_Opcode;
/* END TYPEDEF X86_ALU_Opcode LOC=./jitter-Darwin-X86-64.c:1093 */

/* BEGIN FUNCTION-DECL __builtin_smul_overflow LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_smul_overflow(int const    , int const    , int * ) ;  */
/* END FUNCTION-DECL __builtin_smul_overflow LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN fls LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:87 */
extern int fls(int  )  __attribute__((__availability__(macosx,introduced=10.5))) ;
/* END FUNCTION-DECL-EXTERN fls LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:87 */

/* BEGIN FUNCTION-DECL join_2ops LOC=UNKNOWN */
static int join_2ops(jit_op *op , int opcode1 , int opcode2 , int (*joinfn)(jit_op * ,
                                                                            jit_op * ) ) ;
/* END FUNCTION-DECL join_2ops LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_nearbyint LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_nearbyint(double  ) ;  */
/* END FUNCTION-DECL __builtin_nearbyint LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_bitreverse8 LOC=BUILTIN */
/* compiler builtin: 
   unsigned char __builtin_bitreverse8(unsigned char  ) ;  */
/* END FUNCTION-DECL __builtin_bitreverse8 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_inff128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_inff128(void) ;  */
/* END FUNCTION-DECL __builtin_inff128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_init_arg_params LOC=UNKNOWN */
void jit_init_arg_params(struct jit *jit , struct jit_func_info *info , int p , int *phys_reg ) ;
/* END FUNCTION-DECL jit_init_arg_params LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_floorf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_floorf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_floorf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_exec_mem_seal LOC=UNKNOWN */
static void jit_exec_mem_seal(struct jit_exec_mem *mem ) ;
/* END FUNCTION-DECL jit_exec_mem_seal LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN remove LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:174 */
extern int remove(char const   * ) ;
/* END FUNCTION-DECL-EXTERN remove LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:174 */

/* BEGIN FUNCTION-DECL __builtin_copysign LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_copysign(double  , double  ) ;  */
/* END FUNCTION-DECL __builtin_copysign LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_atanh LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_atanh(double  ) ;  */
/* END FUNCTION-DECL __builtin_atanh LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN gcvt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:204 */
extern char *gcvt(double  , int  , char * ) ;
/* END FUNCTION-DECL-EXTERN gcvt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:204 */

/* BEGIN TYPEDEF __darwin_clock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:117 */
typedef unsigned long __darwin_clock_t;
/* END TYPEDEF __darwin_clock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:117 */

/* BEGIN TYPEDEF clock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_clock_t.h:31 */
typedef __darwin_clock_t clock_t;
/* END TYPEDEF clock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_clock_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN clock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:109 */
extern clock_t clock(void)  __asm__("_clock")  ;
/* END FUNCTION-DECL-EXTERN clock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:109 */

/* BEGIN FUNCTION-DECL __builtin_expl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_expl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_expl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_char_memchr LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin_char_memchr(char const   * , int  , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_char_memchr LOC=BUILTIN */

/* BEGIN VARIABLE-DECL _TIG_iO_HQIz_2_init_tigress_1__opaque_array LOC=UNKNOWN */
unsigned int _TIG_iO_HQIz_2_init_tigress_1__opaque_array[30] ;
/* END VARIABLE-DECL _TIG_iO_HQIz_2_init_tigress_1__opaque_array LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_cpow LOC=BUILTIN */
/* compiler builtin: 
   _Complex double __builtin_cpow(_Complex double  , _Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_cpow LOC=BUILTIN */

/* BEGIN TYPEDEF jit_reg LOC=./jitter-Darwin-X86-64.c:98 */
typedef jit_value jit_reg;
/* END TYPEDEF jit_reg LOC=./jitter-Darwin-X86-64.c:98 */

/* BEGIN FUNCTION-DECL-EXTERN sradixsort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:345 */
extern int sradixsort(unsigned char const   **__base , int __nel , unsigned char const   *__table ,
                      unsigned int __endbyte ) ;
/* END FUNCTION-DECL-EXTERN sradixsort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:345 */

/* BEGIN FUNCTION-DECL emit_get_arg LOC=UNKNOWN */
static void emit_get_arg(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_get_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_constant_p LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_constant_p(int  ) ;  */
/* END FUNCTION-DECL __builtin_constant_p LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_lreg LOC=UNKNOWN */
static void emit_lreg(struct jit *jit , int hreg_id , jit_value vreg ) ;
/* END FUNCTION-DECL emit_lreg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL isxdigit LOC=UNKNOWN */
__inline int isxdigit(int _c ) ;
/* END FUNCTION-DECL isxdigit LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_erfl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_erfl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_erfl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin___stpncpy_chk LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin___stpncpy_chk(char * , char const   * , unsigned long long  , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin___stpncpy_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_nans LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_nans(char const   * ) ;  */
/* END FUNCTION-DECL __builtin_nans LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN munlockall LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:219 */
extern int munlockall(void) ;
/* END FUNCTION-DECL-EXTERN munlockall LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:219 */

/* BEGIN TYPEDEF errno_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_errno_t.h:30 */
typedef int errno_t;
/* END TYPEDEF errno_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_errno_t.h:30 */

/* BEGIN VARIABLE-DEF x0 LOC=UNKNOWN */
static double x0  ;
/* END VARIABLE-DEF x0 LOC=UNKNOWN */

/* BEGIN TYPEDEF jit_opcode LOC=./jitter-Darwin-X86-64.c:112 */
typedef enum __anonenum_jit_opcode_193533032 jit_opcode;
/* END TYPEDEF jit_opcode LOC=./jitter-Darwin-X86-64.c:112 */

/* BEGIN FUNCTION-DECL __builtin_complex LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_complex(...) ;  */
/* END FUNCTION-DECL __builtin_complex LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN tzsetwall LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:135 */
extern void tzsetwall(void) ;
/* END FUNCTION-DECL-EXTERN tzsetwall LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:135 */

/* BEGIN FUNCTION-DECL-EXTERN mblen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:156 */
extern int mblen(char const   *__s , size_t __n ) ;
/* END FUNCTION-DECL-EXTERN mblen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:156 */

/* BEGIN FUNCTION-DECL __builtin_isinf_sign LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_isinf_sign(...) ;  */
/* END FUNCTION-DECL __builtin_isinf_sign LOC=BUILTIN */

/* BEGIN STRUCT jit_inp_arg LOC=./jitter-Darwin-X86-64.c:720 */
struct jit_inp_arg {
   enum jit_inp_type type ;
   int size ;
   char passed_by_reg ;
   union __anonunion_location_1021650749 location ;
   int spill_pos ;
   int gp_pos ;
   int fp_pos ;
   int overflow ;
   int phys_reg ;
};
/* END STRUCT jit_inp_arg LOC=./jitter-Darwin-X86-64.c:720 */

/* BEGIN FUNCTION-DECL-EXTERN jit_reg_allocator_get_hwreg_name LOC=./jitter-Darwin-X86-64.c:804 */
extern char *jit_reg_allocator_get_hwreg_name(struct jit_reg_allocator *al , int reg ) ;
/* END FUNCTION-DECL-EXTERN jit_reg_allocator_get_hwreg_name LOC=./jitter-Darwin-X86-64.c:804 */

/* BEGIN FUNCTION-DECL-EXTERN setvbuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:179 */
extern int setvbuf(FILE * __restrict   , char * __restrict   , int  , size_t  ) ;
/* END FUNCTION-DECL-EXTERN setvbuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:179 */

/* BEGIN FUNCTION-DECL __builtin_clzl LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_clzl(unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_clzl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_dump_ops_combined LOC=UNKNOWN */
static void jit_dump_ops_combined(struct jit *jit , jit_tree *labels ) ;
/* END FUNCTION-DECL jit_dump_ops_combined LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_getschedparam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:355 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_getschedparam(pthread_t  ,
                                                                                                                                 int * _Nullable __restrict   ,
                                                                                                                                 struct sched_param * _Nullable __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_getschedparam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:355 */

/* BEGIN FUNCTION-DECL __builtin_ceill LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_ceill(long double  ) ;  */
/* END FUNCTION-DECL __builtin_ceill LOC=BUILTIN */

/* BEGIN STRUCT __x86_pagein_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:622 */
struct __x86_pagein_state {
   int __pagein_error ;
};
/* END STRUCT __x86_pagein_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:622 */

/* BEGIN FUNCTION-DECL __builtin_floorf16 LOC=BUILTIN */
/* compiler builtin: 
   _Float16 __builtin_floorf16(_Float16  ) ;  */
/* END FUNCTION-DECL __builtin_floorf16 LOC=BUILTIN */

/* BEGIN TYPEDEF blkcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_blkcnt_t.h:31 */
typedef __darwin_blkcnt_t blkcnt_t;
/* END TYPEDEF blkcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_blkcnt_t.h:31 */

/* BEGIN FUNCTION-DECL emit_sse_neg_op LOC=UNKNOWN */
static void emit_sse_neg_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) ;
/* END FUNCTION-DECL emit_sse_neg_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN sleep LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:481 */
extern unsigned int sleep(unsigned int  )  __asm__("_sleep")  ;
/* END FUNCTION-DECL-EXTERN sleep LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:481 */

/* BEGIN FUNCTION-DECL __builtin_remquof128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_remquof128(_Float128  , _Float128  , int * ) ;  */
/* END FUNCTION-DECL __builtin_remquof128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_setschedpolicy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:275 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setschedpolicy(pthread_attr_t * ,
                                                                                                                                       int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_setschedpolicy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:275 */

/* BEGIN UNION __anonunion_amd64_imm_buf_34291009 LOC=./jitter-Darwin-X86-64.c:1060 */
union __anonunion_amd64_imm_buf_34291009 {
   size_t val ;
   unsigned char b[8] ;
};
/* END UNION __anonunion_amd64_imm_buf_34291009 LOC=./jitter-Darwin-X86-64.c:1060 */

/* BEGIN FUNCTION-DECL __builtin_fabsf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_fabsf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_fabsf128 LOC=BUILTIN */

/* BEGIN STRUCT __darwin_x86_thread_full_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:691 */
struct __darwin_x86_thread_full_state64 {
   struct __darwin_x86_thread_state64 __ss64 ;
   __uint64_t __ds ;
   __uint64_t __es ;
   __uint64_t __ss ;
   __uint64_t __gsbase ;
};
/* END STRUCT __darwin_x86_thread_full_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:691 */

/* BEGIN STRUCT __darwin_mcontext_avx64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:121 */
struct __darwin_mcontext_avx64_full {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_full_state64 __ss ;
   struct __darwin_x86_avx_state64 __fs ;
};
/* END STRUCT __darwin_mcontext_avx64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:121 */

/* BEGIN FUNCTION-DECL stack_reg_pos LOC=UNKNOWN */
__inline static int stack_reg_pos(struct jit *jit , int r ) ;
/* END FUNCTION-DECL stack_reg_pos LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL emit_set_arg LOC=UNKNOWN */
__inline static void emit_set_arg(struct jit *jit , struct jit_out_arg *arg ) ;
/* END FUNCTION-DECL emit_set_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL assign_jmp LOC=UNKNOWN */
static int assign_jmp(jit_op *op , struct jit_reg_allocator *al ) ;
/* END FUNCTION-DECL assign_jmp LOC=UNKNOWN */

/* BEGIN TYPEDEF sig_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:331 */
typedef void (*sig_t)(int  );
/* END TYPEDEF sig_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:331 */

/* BEGIN FUNCTION-DECL __builtin_vsprintf LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_vsprintf(char * , char const   * , __builtin_va_list  ) ;  */
/* END FUNCTION-DECL __builtin_vsprintf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin___strcat_chk LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin___strcat_chk(char * , char const   * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin___strcat_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_set_equal LOC=UNKNOWN */
__inline static int jit_set_equal(jit_set *s1 , jit_set *s2 ) ;
/* END FUNCTION-DECL jit_set_equal LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN rpmatch LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:343 */
extern int rpmatch(char const   * )  __attribute__((__availability__(watchos,introduced=6.0),
__availability__(tvos,introduced=13.0), __availability__(ios,introduced=13.0), __availability__(macos,introduced=10.15))) ;
/* END FUNCTION-DECL-EXTERN rpmatch LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:343 */

/* BEGIN FUNCTION-DECL-EXTERN issetugid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:666 */
extern int issetugid(void) ;
/* END FUNCTION-DECL-EXTERN issetugid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:666 */

/* BEGIN FUNCTION-DECL __builtin_dump_struct LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_dump_struct(void const   * , void * ) ;  */
/* END FUNCTION-DECL __builtin_dump_struct LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN exchangedata LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:753 */
extern int exchangedata(char const   * , char const   * , unsigned int  )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN exchangedata LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:753 */

/* BEGIN FUNCTION-DECL-EXTERN sysconf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:483 */
extern long sysconf(int  ) ;
/* END FUNCTION-DECL-EXTERN sysconf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:483 */

/* BEGIN FUNCTION-DECL jit_correct_float_imms LOC=UNKNOWN */
__inline static void jit_correct_float_imms(struct jit *jit ) ;
/* END FUNCTION-DECL jit_correct_float_imms LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL rotate_left LOC=UNKNOWN */
__inline static jit_tree *rotate_left(jit_tree *h ) ;
/* END FUNCTION-DECL rotate_left LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_fma LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_fma(double  , double  , double  ) ;  */
/* END FUNCTION-DECL __builtin_fma LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_canonicalize LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_canonicalize(double  ) ;  */
/* END FUNCTION-DECL __builtin_canonicalize LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN setdomainname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:714 */
extern int setdomainname(char const   * , int  ) ;
/* END FUNCTION-DECL-EXTERN setdomainname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:714 */

/* BEGIN FUNCTION-DECL jit_flw_initialize LOC=UNKNOWN */
__inline static void jit_flw_initialize(struct jit *jit ) ;
/* END FUNCTION-DECL jit_flw_initialize LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_copysignl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_copysignl(long double  , long double  ) ;  */
/* END FUNCTION-DECL __builtin_copysignl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN calloc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:41 */
extern void *( __attribute__((__warn_unused_result__)) calloc)(size_t __count , size_t __size )  __attribute__((__alloc_size__(1,2))) ;
/* END FUNCTION-DECL-EXTERN calloc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:41 */

/* BEGIN FUNCTION-DECL isupper LOC=UNKNOWN */
__inline int isupper(int _c ) ;
/* END FUNCTION-DECL isupper LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL sse_alu_sd_reg_safeimm LOC=UNKNOWN */
static void sse_alu_sd_reg_safeimm(struct jit *jit , jit_op *op , int op_id , int reg ,
                                   double *imm ) ;
/* END FUNCTION-DECL sse_alu_sd_reg_safeimm LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_reg_allocator_create LOC=UNKNOWN */
struct jit_reg_allocator *jit_reg_allocator_create(void) ;
/* END FUNCTION-DECL jit_reg_allocator_create LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN unlink LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:494 */
extern int unlink(char const   * ) ;
/* END FUNCTION-DECL-EXTERN unlink LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:494 */

/* BEGIN FUNCTION-DECL-EXTERN arc4random_stir LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:271 */
extern void arc4random_stir(void) ;
/* END FUNCTION-DECL-EXTERN arc4random_stir LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:271 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:419 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_init(pthread_mutexattr_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:419 */

/* BEGIN VARIABLE-DEF _TIG_iE_HQIz_1_entropy LOC=UNKNOWN */
unsigned long _TIG_iE_HQIz_1_entropy  =    9042506488591766566UL;
/* END VARIABLE-DEF _TIG_iE_HQIz_1_entropy LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN vfprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:190 */
extern int ( /* format attribute */  vfprintf)(FILE * __restrict   , char const   * __restrict   ,
                                               va_list  ) ;
/* END FUNCTION-DECL-EXTERN vfprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:190 */

/* BEGIN FUNCTION-DECL-EXTERN valloc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:45 */
extern void *valloc(size_t  )  __attribute__((__alloc_size__(1))) ;
/* END FUNCTION-DECL-EXTERN valloc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:45 */

/* BEGIN FUNCTION-DECL-EXTERN setpriority LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:451 */
extern int setpriority(int  , id_t  , int  ) ;
/* END FUNCTION-DECL-EXTERN setpriority LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:451 */

/* BEGIN VARIABLE-DECL _TIG_JD_HQIz_4_fib_freq LOC=UNKNOWN */
int _TIG_JD_HQIz_4_fib_freq ;
/* END VARIABLE-DECL _TIG_JD_HQIz_4_fib_freq LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_getinheritsched LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:235 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getinheritsched(pthread_attr_t const   * __restrict   ,
                                                                                                                                        int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_getinheritsched LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:235 */

/* BEGIN ENUM __anonenum_X86_SSE_CmpCode_848838535 LOC=./jitter-Darwin-X86-64.c:1384 */
enum __anonenum_X86_SSE_CmpCode_848838535 {
    X86_SSE_CMP_EQ = 0,
    X86_SSE_CMP_LT = 1,
    X86_SSE_CMP_LE = 2,
    X86_SSE_CMP_UNORD = 3,
    X86_SSE_CMP_NEQ = 4,
    X86_SSE_CMP_NLT = 5,
    X86_SSE_CMP_NLE = 6,
    X86_SSE_CMP_ORD = 7
} ;
/* END ENUM __anonenum_X86_SSE_CmpCode_848838535 LOC=./jitter-Darwin-X86-64.c:1384 */

/* BEGIN FUNCTION-DECL unload_reg LOC=UNKNOWN */
void unload_reg(jit_op *op , jit_hw_reg *hreg , jit_value virt_reg ) ;
/* END FUNCTION-DECL unload_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_get_label LOC=UNKNOWN */
jit_label *jit_get_label(struct jit *jit ) ;
/* END FUNCTION-DECL jit_get_label LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN sched_get_priority_min LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/sched.h:39 */
extern int sched_get_priority_min(int  ) ;
/* END FUNCTION-DECL-EXTERN sched_get_priority_min LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/sched.h:39 */

/* BEGIN STRUCT __darwin_x86_cpmu_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1220 */
struct __darwin_x86_cpmu_state64 {
   __uint64_t __ctrs[16] ;
};
/* END STRUCT __darwin_x86_cpmu_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1220 */

/* BEGIN FUNCTION-DECL __builtin_cos LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_cos(double  ) ;  */
/* END FUNCTION-DECL __builtin_cos LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_log LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_log(double  ) ;  */
/* END FUNCTION-DECL __builtin_log LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN alloca LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/alloca.h:32 */
extern void *alloca(size_t  ) ;
/* END FUNCTION-DECL-EXTERN alloca LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/alloca.h:32 */

/* BEGIN FUNCTION-DECL-EXTERN bcopy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:71 */
extern void bcopy(void const   * , void * , size_t  ) ;
/* END FUNCTION-DECL-EXTERN bcopy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:71 */

/* BEGIN FUNCTION-DECL-EXTERN fgetattrlist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:749 */
extern int fgetattrlist(int  , void * , void * , size_t  , unsigned int  )  __attribute__((__availability__(macosx,introduced=10.6))) ;
/* END FUNCTION-DECL-EXTERN fgetattrlist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:749 */

/* BEGIN FUNCTION-DECL jit_optimize_frame_ptr LOC=UNKNOWN */
void jit_optimize_frame_ptr(struct jit *jit ) ;
/* END FUNCTION-DECL jit_optimize_frame_ptr LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN rmdir LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:474 */
extern int rmdir(char const   * ) ;
/* END FUNCTION-DECL-EXTERN rmdir LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:474 */

/* BEGIN FUNCTION-DECL-EXTERN free LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:42 */
extern void free(void *ptr ) ;
/* END FUNCTION-DECL-EXTERN free LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:42 */

/* BEGIN FUNCTION-DECL __builtin_va_start LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_va_start(__builtin_va_list  ) ;  */
/* END FUNCTION-DECL __builtin_va_start LOC=BUILTIN */

/* BEGIN FUNCTION-DECL main LOC=UNKNOWN */
int main(int argc , char **argv , char **_TIG_IZ_HQIz_formal_envp ) ;
/* END FUNCTION-DECL main LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_sqrt LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_sqrt(double  ) ;  */
/* END FUNCTION-DECL __builtin_sqrt LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:396 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_destroy(pthread_mutexattr_t * )  __asm__("_pthread_mutexattr_destroy")  ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:396 */

/* BEGIN FUNCTION-DECL-EXTERN setbuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:178 */
extern void setbuf(FILE * __restrict   , char * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN setbuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:178 */

/* BEGIN FUNCTION-DECL toascii LOC=UNKNOWN */
__inline int toascii(int _c ) ;
/* END FUNCTION-DECL toascii LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN undelete LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:733 */
extern int undelete(char const   * ) ;
/* END FUNCTION-DECL-EXTERN undelete LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:733 */

/* BEGIN FUNCTION-DECL-EXTERN wctomb LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:195 */
extern int wctomb(char * , wchar_t  ) ;
/* END FUNCTION-DECL-EXTERN wctomb LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:195 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_getstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:248 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getstack(pthread_attr_t const   * __restrict   ,
                                                                                                                                 void * _Nullable  * _Nonnull __restrict   ,
                                                                                                                                 size_t * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_getstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:248 */

/* BEGIN FUNCTION-DECL-EXTERN rresvport_af LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:709 */
extern  __attribute__((__deprecated__)) int rresvport_af(int * , int  ) ;
/* END FUNCTION-DECL-EXTERN rresvport_af LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:709 */

/* BEGIN FUNCTION-DECL __builtin_tgammaf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_tgammaf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_tgammaf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL load_reg LOC=UNKNOWN */
void load_reg(jit_op *op , jit_hw_reg *hreg , jit_value reg ) ;
/* END FUNCTION-DECL load_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN unlockpt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:250 */
extern int unlockpt(int  ) ;
/* END FUNCTION-DECL-EXTERN unlockpt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:250 */

/* BEGIN FUNCTION-DECL jit_op_prepend LOC=UNKNOWN */
__inline static void jit_op_prepend(jit_op *op , jit_op *prepended ) ;
/* END FUNCTION-DECL jit_op_prepend LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_strstr LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin_strstr(char const   * , char const   * ) ;  */
/* END FUNCTION-DECL __builtin_strstr LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_kill LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:550 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_kill(pthread_t  ,
                                                                                                                        int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_kill LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:550 */

/* BEGIN FUNCTION-DECL __builtin_addcll LOC=BUILTIN */
/* compiler builtin: 
   unsigned __int128 __builtin_addcll(unsigned long long const    , unsigned long long const    ,
                                      unsigned long long const    , unsigned long long * ) ;  */
/* END FUNCTION-DECL __builtin_addcll LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_strncpy LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin_strncpy(char * , char const   * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_strncpy LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN vsscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:338 */
extern int ( /* format attribute */  vsscanf)(char const   * __restrict  __str , char const   * __restrict  __format ,
                                              va_list  ) ;
/* END FUNCTION-DECL-EXTERN vsscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:338 */

/* BEGIN FUNCTION-DECL __builtin_cosf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_cosf(float  ) ;  */
/* END FUNCTION-DECL __builtin_cosf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strerror_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:116 */
extern int strerror_r(int __errnum , char *__strerrbuf , size_t __buflen ) ;
/* END FUNCTION-DECL-EXTERN strerror_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:116 */

/* BEGIN FUNCTION-DECL __builtin_atanhf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_atanhf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_atanhf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_huge_vall LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_huge_vall(void) ;  */
/* END FUNCTION-DECL __builtin_huge_vall LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_optimize_unused_assignments LOC=UNKNOWN */
void jit_optimize_unused_assignments(struct jit *jit ) ;
/* END FUNCTION-DECL jit_optimize_unused_assignments LOC=UNKNOWN */

/* BEGIN TYPEDEF qaddr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:97 */
typedef quad_t *qaddr_t;
/* END TYPEDEF qaddr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:97 */

/* BEGIN FUNCTION-DECL-EXTERN getlogin LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:458 */
extern char *getlogin(void) ;
/* END FUNCTION-DECL-EXTERN getlogin LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:458 */

/* BEGIN FUNCTION-DECL ob_append LOC=UNKNOWN */
static void ob_append(struct output_buf *ob , char *str ) ;
/* END FUNCTION-DECL ob_append LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_rotateright8 LOC=BUILTIN */
/* compiler builtin: 
   unsigned char __builtin_rotateright8(unsigned char  , unsigned char  ) ;  */
/* END FUNCTION-DECL __builtin_rotateright8 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN srandom LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:246 */
extern void srandom(unsigned int  ) ;
/* END FUNCTION-DECL-EXTERN srandom LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:246 */

/* BEGIN FUNCTION-DECL print_comment LOC=UNKNOWN */
void print_comment(struct output_buf *linebuf , jit_op *op ) ;
/* END FUNCTION-DECL print_comment LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_cargl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_cargl(_Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_cargl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_csinhl LOC=BUILTIN */
/* compiler builtin: 
   _Complex long double __builtin_csinhl(_Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_csinhl LOC=BUILTIN */

/* BEGIN VARIABLE-DECL x86_cc_signed_map LOC=UNKNOWN */
static unsigned char x86_cc_signed_map[12] ;
/* END VARIABLE-DECL x86_cc_signed_map LOC=UNKNOWN */

/* BEGIN ENUM __anonenum_clockid_t_447627989 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:153 */
enum __anonenum_clockid_t_447627989 {
    _CLOCK_REALTIME = 0,
    _CLOCK_MONOTONIC = 6,
    _CLOCK_MONOTONIC_RAW = 4,
    _CLOCK_MONOTONIC_RAW_APPROX = 5,
    _CLOCK_UPTIME_RAW = 8,
    _CLOCK_UPTIME_RAW_APPROX = 9,
    _CLOCK_PROCESS_CPUTIME_ID = 12,
    _CLOCK_THREAD_CPUTIME_ID = 16
} ;
/* END ENUM __anonenum_clockid_t_447627989 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:153 */

/* BEGIN TYPEDEF clockid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:153 */
typedef enum __anonenum_clockid_t_447627989 clockid_t;
/* END TYPEDEF clockid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:153 */

/* BEGIN FUNCTION-DECL-EXTERN clock_gettime_nsec_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:182 */
extern __uint64_t __attribute__((__availability__(macosx,introduced=10.12), __availability__(ios,introduced=10.0),
__availability__(tvos,introduced=10.0), __availability__(watchos,introduced=3.0)))  clock_gettime_nsec_np(clockid_t __clock_id ) ;
/* END FUNCTION-DECL-EXTERN clock_gettime_nsec_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:182 */

/* BEGIN FUNCTION-DECL-EXTERN read LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:472 */
extern ssize_t read(int  , void * , size_t  )  __asm__("_read")  ;
/* END FUNCTION-DECL-EXTERN read LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:472 */

/* BEGIN FUNCTION-DECL emit_cond_op LOC=UNKNOWN */
static void emit_cond_op(struct jit *jit , struct jit_op *op , int amd64_cond , int imm ,
                         int sign ) ;
/* END FUNCTION-DECL emit_cond_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_log2f128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_log2f128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_log2f128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_fminf16 LOC=BUILTIN */
/* compiler builtin: 
   _Float16 __builtin_fminf16(_Float16  , _Float16  ) ;  */
/* END FUNCTION-DECL __builtin_fminf16 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_readcyclecounter LOC=BUILTIN */
/* compiler builtin: 
   unsigned __int128 __builtin_readcyclecounter(void) ;  */
/* END FUNCTION-DECL __builtin_readcyclecounter LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN drand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:200 */
extern double drand48(void) ;
/* END FUNCTION-DECL-EXTERN drand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:200 */

/* BEGIN FUNCTION-DECL-EXTERN lockf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:569 */
extern int lockf(int  , int  , off_t  )  __asm__("_lockf")  ;
/* END FUNCTION-DECL-EXTERN lockf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:569 */

/* BEGIN FUNCTION-DECL __builtin_alloca LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_alloca(unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_alloca LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_atan2 LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_atan2(double  , double  ) ;  */
/* END FUNCTION-DECL __builtin_atan2 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strtouq LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:354 */
extern unsigned long long strtouq(char const   *__str , char **__endptr , int __base ) ;
/* END FUNCTION-DECL-EXTERN strtouq LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:354 */

/* BEGIN FUNCTION-DECL compiler_based_debugger LOC=UNKNOWN */
static void compiler_based_debugger(struct jit *jit ) ;
/* END FUNCTION-DECL compiler_based_debugger LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pwrite LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:575 */
extern ssize_t pwrite(int __fd , void const   *__buf , size_t __nbyte , off_t __offset )  __asm__("_pwrite")  ;
/* END FUNCTION-DECL-EXTERN pwrite LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:575 */

/* BEGIN VARIABLE-DEF _TIG_IZ_HQIz_envp LOC=UNKNOWN */
char **_TIG_IZ_HQIz_envp  ;
/* END VARIABLE-DEF _TIG_IZ_HQIz_envp LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN memset LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:74 */
extern void *memset(void *__b , int __c , size_t __len ) ;
/* END FUNCTION-DECL-EXTERN memset LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:74 */

/* BEGIN FUNCTION-DECL jit_set_to_array LOC=UNKNOWN */
__inline static void jit_set_to_array(jit_set *s , jit_value *dest ) ;
/* END FUNCTION-DECL jit_set_to_array LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN ferror LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:145 */
extern int ferror(FILE * ) ;
/* END FUNCTION-DECL-EXTERN ferror LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:145 */

/* BEGIN FUNCTION-DECL copy_reg_to_array LOC=UNKNOWN */
static void copy_reg_to_array(jit_tree_key key , jit_tree_value value , void *target ) ;
/* END FUNCTION-DECL copy_reg_to_array LOC=UNKNOWN */

/* BEGIN STRUCT rusage_info_v3 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:251 */
struct rusage_info_v3 {
   uint8_t ri_uuid[16] ;
   uint64_t ri_user_time ;
   uint64_t ri_system_time ;
   uint64_t ri_pkg_idle_wkups ;
   uint64_t ri_interrupt_wkups ;
   uint64_t ri_pageins ;
   uint64_t ri_wired_size ;
   uint64_t ri_resident_size ;
   uint64_t ri_phys_footprint ;
   uint64_t ri_proc_start_abstime ;
   uint64_t ri_proc_exit_abstime ;
   uint64_t ri_child_user_time ;
   uint64_t ri_child_system_time ;
   uint64_t ri_child_pkg_idle_wkups ;
   uint64_t ri_child_interrupt_wkups ;
   uint64_t ri_child_pageins ;
   uint64_t ri_child_elapsed_abstime ;
   uint64_t ri_diskio_bytesread ;
   uint64_t ri_diskio_byteswritten ;
   uint64_t ri_cpu_time_qos_default ;
   uint64_t ri_cpu_time_qos_maintenance ;
   uint64_t ri_cpu_time_qos_background ;
   uint64_t ri_cpu_time_qos_utility ;
   uint64_t ri_cpu_time_qos_legacy ;
   uint64_t ri_cpu_time_qos_user_initiated ;
   uint64_t ri_cpu_time_qos_user_interactive ;
   uint64_t ri_billed_system_time ;
   uint64_t ri_serviced_system_time ;
};
/* END STRUCT rusage_info_v3 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:251 */

/* BEGIN FUNCTION-DECL-EXTERN setbuffer LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:375 */
extern void setbuffer(FILE * , char * , int  ) ;
/* END FUNCTION-DECL-EXTERN setbuffer LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:375 */

/* BEGIN FUNCTION-DECL __builtin_trunc LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_trunc(double  ) ;  */
/* END FUNCTION-DECL __builtin_trunc LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_csinf LOC=BUILTIN */
/* compiler builtin: 
   _Complex float __builtin_csinf(_Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_csinf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_tanhf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_tanhf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_tanhf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN fsctl LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:773 */
extern int fsctl(char const   * , unsigned long  , void * , unsigned int  ) ;
/* END FUNCTION-DECL-EXTERN fsctl LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:773 */

/* BEGIN FUNCTION-DECL __builtin_fmal LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_fmal(long double  , long double  , long double  ) ;  */
/* END FUNCTION-DECL __builtin_fmal LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strstr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:89 */
extern char *strstr(char const   *__big , char const   *__little ) ;
/* END FUNCTION-DECL-EXTERN strstr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:89 */

/* BEGIN FUNCTION-DECL jit_arg_layout_add LOC=UNKNOWN */
static void jit_arg_layout_add(struct jit_arg_layout *layout , int isfp , struct jit_out_arg *arg ) ;
/* END FUNCTION-DECL jit_arg_layout_add LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN rcmd_af LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:706 */
extern  __attribute__((__deprecated__)) int rcmd_af(char ** , int  , char const   * ,
                                                    char const   * , char const   * ,
                                                    int * , int  ) ;
/* END FUNCTION-DECL-EXTERN rcmd_af LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:706 */

/* BEGIN FUNCTION-DECL jit_op_first LOC=UNKNOWN */
__inline static jit_op *jit_op_first(jit_op *op ) ;
/* END FUNCTION-DECL jit_op_first LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN putchar_unlocked LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:292 */
extern int putchar_unlocked(int  ) ;
/* END FUNCTION-DECL-EXTERN putchar_unlocked LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:292 */

/* BEGIN FUNCTION-DECL-EXTERN execv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:444 */
extern int execv(char const   *__path , char **__argv )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN execv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:444 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_cond_broadcast LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:293 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_broadcast(pthread_cond_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_cond_broadcast LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:293 */

/* BEGIN TYPEDEF int16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int16_t.h:30 */
typedef short int16_t;
/* END TYPEDEF int16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int16_t.h:30 */

/* BEGIN TYPEDEF int_fast16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:41 */
typedef int16_t int_fast16_t;
/* END TYPEDEF int_fast16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:41 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_setprioceiling LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:422 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_setprioceiling(pthread_mutexattr_t * ,
                                                                                                                                            int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_setprioceiling LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:422 */

/* BEGIN STRUCT __darwin_ymm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:229 */
struct __darwin_ymm_reg {
   char __ymm_reg[32] ;
};
/* END STRUCT __darwin_ymm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:229 */

/* BEGIN STRUCT __darwin_i386_avx512_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:364 */
struct __darwin_i386_avx512_state {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   char __fpu_rsrv4[224] ;
   int __fpu_reserved1 ;
   char __avx_reserved1[64] ;
   struct __darwin_xmm_reg __fpu_ymmh0 ;
   struct __darwin_xmm_reg __fpu_ymmh1 ;
   struct __darwin_xmm_reg __fpu_ymmh2 ;
   struct __darwin_xmm_reg __fpu_ymmh3 ;
   struct __darwin_xmm_reg __fpu_ymmh4 ;
   struct __darwin_xmm_reg __fpu_ymmh5 ;
   struct __darwin_xmm_reg __fpu_ymmh6 ;
   struct __darwin_xmm_reg __fpu_ymmh7 ;
   struct __darwin_opmask_reg __fpu_k0 ;
   struct __darwin_opmask_reg __fpu_k1 ;
   struct __darwin_opmask_reg __fpu_k2 ;
   struct __darwin_opmask_reg __fpu_k3 ;
   struct __darwin_opmask_reg __fpu_k4 ;
   struct __darwin_opmask_reg __fpu_k5 ;
   struct __darwin_opmask_reg __fpu_k6 ;
   struct __darwin_opmask_reg __fpu_k7 ;
   struct __darwin_ymm_reg __fpu_zmmh0 ;
   struct __darwin_ymm_reg __fpu_zmmh1 ;
   struct __darwin_ymm_reg __fpu_zmmh2 ;
   struct __darwin_ymm_reg __fpu_zmmh3 ;
   struct __darwin_ymm_reg __fpu_zmmh4 ;
   struct __darwin_ymm_reg __fpu_zmmh5 ;
   struct __darwin_ymm_reg __fpu_zmmh6 ;
   struct __darwin_ymm_reg __fpu_zmmh7 ;
};
/* END STRUCT __darwin_i386_avx512_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:364 */

/* BEGIN VARIABLE-DECL _TIG_VZ_HQIz_3_fib_$strings LOC=UNKNOWN */
char const   *_TIG_VZ_HQIz_3_fib_$strings ;
/* END VARIABLE-DECL _TIG_VZ_HQIz_3_fib_$strings LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_llabs LOC=BUILTIN */
/* compiler builtin: 
   long long __builtin_llabs(long long  ) ;  */
/* END FUNCTION-DECL __builtin_llabs LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_gettype LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:411 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_gettype(pthread_mutexattr_t const   * __restrict   ,
                                                                                                                                     int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_gettype LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:411 */

/* BEGIN FUNCTION-DECL __builtin_sinh LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_sinh(double  ) ;  */
/* END FUNCTION-DECL __builtin_sinh LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_wcsncmp LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_wcsncmp(unsigned short * const   , unsigned short * const   , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_wcsncmp LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN flsll LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:89 */
extern int flsll(long long  )  __attribute__((__availability__(macosx,introduced=10.9))) ;
/* END FUNCTION-DECL-EXTERN flsll LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:89 */

/* BEGIN VARIABLE-DECL-EXTERN __stdinp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:67 */
extern FILE *__stdinp ;
/* END VARIABLE-DECL-EXTERN __stdinp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:67 */

/* BEGIN FUNCTION-DECL __builtin_fabsf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_fabsf(float  ) ;  */
/* END FUNCTION-DECL __builtin_fabsf LOC=BUILTIN */

/* BEGIN TYPEDEF __darwin_fsfilcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:59 */
typedef unsigned int __darwin_fsfilcnt_t;
/* END TYPEDEF __darwin_fsfilcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:59 */

/* BEGIN TYPEDEF fsfilcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fsfilcnt_t.h:31 */
typedef __darwin_fsfilcnt_t fsfilcnt_t;
/* END TYPEDEF fsfilcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fsfilcnt_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN stpcpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:130 */
extern char *stpcpy(char *__dst , char const   *__src ) ;
/* END FUNCTION-DECL-EXTERN stpcpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:130 */

/* BEGIN STRUCT copy_target LOC=./jitter-Darwin-X86-64.c:640 */
struct copy_target {
   jit_value *target ;
   int index ;
};
/* END STRUCT copy_target LOC=./jitter-Darwin-X86-64.c:640 */

/* BEGIN FUNCTION-DECL isnumber LOC=UNKNOWN */
__inline int isnumber(int _c ) ;
/* END FUNCTION-DECL isnumber LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL rmap_free LOC=UNKNOWN */
static void rmap_free(jit_rmap *regmap ) ;
/* END FUNCTION-DECL rmap_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN mktime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:115 */
extern time_t mktime(struct tm * )  __asm__("_mktime")  ;
/* END FUNCTION-DECL-EXTERN mktime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:115 */

/* BEGIN FUNCTION-DECL _OSSwapInt16 LOC=UNKNOWN */
__inline static __uint16_t _OSSwapInt16(__uint16_t _data ) ;
/* END FUNCTION-DECL _OSSwapInt16 LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN sethostid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:716 */
extern void sethostid(long  ) ;
/* END FUNCTION-DECL-EXTERN sethostid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:716 */

/* BEGIN FUNCTION-DECL-EXTERN vfork LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:602 */
extern pid_t vfork(void)  __attribute__((__availability__(tvos,unavailable), __availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN vfork LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:602 */

/* BEGIN FUNCTION-DECL-EXTERN getlogin_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:608 */
extern int getlogin_r(char * , size_t  ) ;
/* END FUNCTION-DECL-EXTERN getlogin_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:608 */

/* BEGIN FUNCTION-DECL free_ops LOC=UNKNOWN */
static void free_ops(struct jit_op *op ) ;
/* END FUNCTION-DECL free_ops LOC=UNKNOWN */

/* BEGIN TYPEDEF nlink_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_nlink_t.h:31 */
typedef __uint16_t nlink_t;
/* END TYPEDEF nlink_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_nlink_t.h:31 */

/* BEGIN STRUCT jit_op LOC=./jitter-Darwin-X86-64.c:67 */
struct jit_op {
   unsigned short code ;
   unsigned char spec ;
   unsigned char arg_size ;
   unsigned char assigned ;
   unsigned char fp ;
   unsigned char in_use ;
   double flt_imm ;
   jit_value arg[3] ;
   jit_value r_arg[3] ;
   jit_value patch_addr ;
   struct jit_op *jmp_addr ;
   struct jit_op *next ;
   struct jit_op *prev ;
   struct jit_set *live_in ;
   struct jit_set *live_out ;
   struct jit_rmap *regmap ;
   int normalized_pos ;
   struct jit_tree *allocator_hints ;
   struct jit_debug_info *debug_info ;
   size_t code_offset ;
   size_t code_length ;
   void *addendum ;
};
/* END STRUCT jit_op LOC=./jitter-Darwin-X86-64.c:67 */

/* BEGIN STRUCT __darwin_x86_debug_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1192 */
struct __darwin_x86_debug_state64 {
   __uint64_t __dr0 ;
   __uint64_t __dr1 ;
   __uint64_t __dr2 ;
   __uint64_t __dr3 ;
   __uint64_t __dr4 ;
   __uint64_t __dr5 ;
   __uint64_t __dr6 ;
   __uint64_t __dr7 ;
};
/* END STRUCT __darwin_x86_debug_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1192 */

/* BEGIN STRUCT __anonstruct__RuneCharClass_1021650748 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:72 */
struct __anonstruct__RuneCharClass_1021650748 {
   char __name[14] ;
   __uint32_t __mask ;
};
/* END STRUCT __anonstruct__RuneCharClass_1021650748 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:72 */

/* BEGIN TYPEDEF int_least8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:29 */
typedef int8_t int_least8_t;
/* END TYPEDEF int_least8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:29 */

/* BEGIN FUNCTION-DECL jit_tree_addall LOC=UNKNOWN */
__inline static jit_tree *jit_tree_addall(jit_tree *target , jit_tree *n ) ;
/* END FUNCTION-DECL jit_tree_addall LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN getwgroups_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:664 */
extern int getwgroups_np(int * , unsigned char * ) ;
/* END FUNCTION-DECL-EXTERN getwgroups_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:664 */

/* BEGIN FUNCTION-DECL-EXTERN fread LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:158 */
extern size_t fread(void * __restrict  __ptr , size_t __size , size_t __nitems , FILE * __restrict  __stream ) ;
/* END FUNCTION-DECL-EXTERN fread LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:158 */

/* BEGIN FUNCTION-DECL jit_expand_patches_and_labels LOC=UNKNOWN */
void jit_expand_patches_and_labels(struct jit *jit ) ;
/* END FUNCTION-DECL jit_expand_patches_and_labels LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL emit_pop_reg LOC=UNKNOWN */
static int emit_pop_reg(struct jit *jit , jit_hw_reg *r , int stack_offset ) ;
/* END FUNCTION-DECL emit_pop_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL prepare_registers_for_call LOC=UNKNOWN */
static void prepare_registers_for_call(struct jit_reg_allocator *al , jit_op *op ) ;
/* END FUNCTION-DECL prepare_registers_for_call LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_shufflevector LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_shufflevector(...) ;  */
/* END FUNCTION-DECL __builtin_shufflevector LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_set_new LOC=UNKNOWN */
__inline static jit_set *jit_set_new(void) ;
/* END FUNCTION-DECL jit_set_new LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN abort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:131 */
extern  __attribute__((__noreturn__)) void abort(void)  __attribute__((__cold__)) ;
/* END FUNCTION-DECL-EXTERN abort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:131 */

/* BEGIN FUNCTION-DECL __builtin_roundf16 LOC=BUILTIN */
/* compiler builtin: 
   _Float16 __builtin_roundf16(_Float16  ) ;  */
/* END FUNCTION-DECL __builtin_roundf16 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_setugid_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:699 */
extern  __attribute__((__deprecated__("Use of per-thread security contexts is error-prone and discouraged."))) int pthread_setugid_np(uid_t  ,
                                                                                                                                      gid_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_setugid_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:699 */

/* BEGIN FUNCTION-DECL-EXTERN wait4 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:255 */
extern pid_t wait4(pid_t  , int * , int  , struct rusage * ) ;
/* END FUNCTION-DECL-EXTERN wait4 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:255 */

/* BEGIN FUNCTION-DECL required_stack_space_for_regs LOC=UNKNOWN */
static int required_stack_space_for_regs(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL required_stack_space_for_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN mprotect LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:228 */
extern int mprotect(void * , size_t  , int  )  __asm__("_mprotect")  ;
/* END FUNCTION-DECL-EXTERN mprotect LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:228 */

/* BEGIN FUNCTION-DECL __builtin_dwarf_cfa LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_dwarf_cfa(void) ;  */
/* END FUNCTION-DECL __builtin_dwarf_cfa LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_set_addall LOC=UNKNOWN */
__inline static void jit_set_addall(jit_set *target , jit_set *s ) ;
/* END FUNCTION-DECL jit_set_addall LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_asinf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_asinf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_asinf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN tempnam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:304 */
extern  __attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tempnam(3), it is highly recommended that you use mkstemp(3) instead."))) char __attribute__((__availability__(swift,unavailable,message="Use mkstemp(3) instead.")))  *tempnam(char const   *__dir ,
                                                                                                                                                                                                                                                                                                                                     char const   *__prefix )  __asm__("_tempnam")  ;
/* END FUNCTION-DECL-EXTERN tempnam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:304 */

/* BEGIN FUNCTION-DECL print_op_bytes LOC=UNKNOWN */
__inline static void print_op_bytes(FILE *f , struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL print_op_bytes LOC=UNKNOWN */

/* BEGIN STRUCT tm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:75 */
struct tm {
   int tm_sec ;
   int tm_min ;
   int tm_hour ;
   int tm_mday ;
   int tm_mon ;
   int tm_year ;
   int tm_wday ;
   int tm_yday ;
   int tm_isdst ;
   long tm_gmtoff ;
   char *tm_zone ;
};
/* END STRUCT tm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:75 */

/* BEGIN STRUCT sched_param LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/sched.h:35 */
struct sched_param {
   int sched_priority ;
   char __opaque[4] ;
};
/* END STRUCT sched_param LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/sched.h:35 */

/* BEGIN FUNCTION-DECL-EXTERN getline LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:355 */
extern ssize_t getline(char ** __restrict  __linep , size_t * __restrict  __linecapp ,
                       FILE * __restrict  __stream )  __attribute__((__availability__(macosx,introduced=10.7))) ;
/* END FUNCTION-DECL-EXTERN getline LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:355 */

/* BEGIN FUNCTION-DECL-EXTERN getsgroups_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:662 */
extern int getsgroups_np(int * , unsigned char * ) ;
/* END FUNCTION-DECL-EXTERN getsgroups_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:662 */

/* BEGIN FUNCTION-DECL __builtin_modff128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_modff128(_Float128  , _Float128 * ) ;  */
/* END FUNCTION-DECL __builtin_modff128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_optimize_st_ops LOC=UNKNOWN */
void jit_optimize_st_ops(struct jit *jit ) ;
/* END FUNCTION-DECL jit_optimize_st_ops LOC=UNKNOWN */

/* BEGIN TYPEDEF user_ulong_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:101 */
typedef u_int64_t user_ulong_t;
/* END TYPEDEF user_ulong_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:101 */

/* BEGIN FUNCTION-DECL __builtin_stpcpy LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin_stpcpy(char * , char const   * ) ;  */
/* END FUNCTION-DECL __builtin_stpcpy LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_subx_op LOC=UNKNOWN */
static void emit_subx_op(struct jit *jit , struct jit_op *op , int x86_op , int imm ) ;
/* END FUNCTION-DECL emit_subx_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN getrusage LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:450 */
extern int getrusage(int  , struct rusage * ) ;
/* END FUNCTION-DECL-EXTERN getrusage LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:450 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_sigmask LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:556 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_sigmask(int  ,
                                                                                                                           sigset_t const   * _Nullable   ,
                                                                                                                           sigset_t * _Nullable   )  __asm__("_pthread_sigmask")  ;
/* END FUNCTION-DECL-EXTERN pthread_sigmask LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:556 */

/* BEGIN STRUCT jit_prepared_args LOC=./jitter-Darwin-X86-64.c:694 */
struct jit_prepared_args {
   int count ;
   int ready ;
   int gp_args ;
   int fp_args ;
   int stack_size ;
   jit_op *op ;
   int variadic ;
   struct jit_out_arg *args ;
};
/* END STRUCT jit_prepared_args LOC=./jitter-Darwin-X86-64.c:694 */

/* BEGIN STRUCT jit LOC=./jitter-Darwin-X86-64.c:753 */
struct jit {
   unsigned char *buf ;
   unsigned int buf_capacity ;
   unsigned char *ip ;
   struct jit_op *ops ;
   struct jit_op *last_op ;
   struct jit_reg_allocator *reg_al ;
   struct jit_op *current_func ;
   jit_label *labels ;
   jit_prepared_args prepared_args ;
   int push_count ;
   unsigned int optimizations ;
   struct jit_exec_mem *mmaped_buf ;
};
/* END STRUCT jit LOC=./jitter-Darwin-X86-64.c:753 */

/* BEGIN FUNCTION-DECL make_addmuli LOC=UNKNOWN */
__inline static int make_addmuli(jit_op *op , jit_op *nextop ) ;
/* END FUNCTION-DECL make_addmuli LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_matrix_transpose LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_matrix_transpose(...) ;  */
/* END FUNCTION-DECL __builtin_matrix_transpose LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN cgetent LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:283 */
extern int cgetent(char ** , char ** , char const   * ) ;
/* END FUNCTION-DECL-EXTERN cgetent LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:283 */

/* BEGIN FUNCTION-DECL-EXTERN tzset LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:121 */
extern void tzset(void) ;
/* END FUNCTION-DECL-EXTERN tzset LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:121 */

/* BEGIN FUNCTION-DECL jit_debug_info_new LOC=UNKNOWN */
struct jit_debug_info *jit_debug_info_new(char const   *filename , char const   *function ,
                                          int lineno ) ;
/* END FUNCTION-DECL jit_debug_info_new LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_asinhf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_asinhf(float  ) ;  */
/* END FUNCTION-DECL __builtin_asinhf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL delete_node LOC=UNKNOWN */
static jit_tree *delete_node(jit_tree *h , jit_tree_key key , int *found ) ;
/* END FUNCTION-DECL delete_node LOC=UNKNOWN */

/* BEGIN TYPEDEF key_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_key_t.h:31 */
typedef __int32_t key_t;
/* END TYPEDEF key_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_key_t.h:31 */

/* BEGIN FUNCTION-DECL __builtin_ia32_subps LOC=BUILTIN */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_subps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* END FUNCTION-DECL __builtin_ia32_subps LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_roundf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_roundf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_roundf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_frexpl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_frexpl(long double  , int * ) ;  */
/* END FUNCTION-DECL __builtin_frexpl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN gets LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:168 */
extern char *gets(char * ) ;
/* END FUNCTION-DECL-EXTERN gets LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:168 */

/* BEGIN FUNCTION-DECL fac LOC=UNKNOWN */
void fac(int n ) ;
/* END FUNCTION-DECL fac LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL _bit_pop LOC=UNKNOWN */
__inline static int _bit_pop(unsigned int x ) ;
/* END FUNCTION-DECL _bit_pop LOC=UNKNOWN */

/* BEGIN VARIABLE-DECL _TIG_iO_HQIz_2_init_tigress_1_opaque_ptr_2 LOC=UNKNOWN */
struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct *_TIG_iO_HQIz_2_init_tigress_1_opaque_ptr_2 ;
/* END VARIABLE-DECL _TIG_iO_HQIz_2_init_tigress_1_opaque_ptr_2 LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_fsblkcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:58 */
typedef unsigned int __darwin_fsblkcnt_t;
/* END TYPEDEF __darwin_fsblkcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:58 */

/* BEGIN TYPEDEF fsblkcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fsblkcnt_t.h:31 */
typedef __darwin_fsblkcnt_t fsblkcnt_t;
/* END TYPEDEF fsblkcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fsblkcnt_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlock_tryrdlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:452 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_tryrdlock(pthread_rwlock_t * )  __asm__("_pthread_rwlock_tryrdlock")  ;
/* END FUNCTION-DECL-EXTERN pthread_rwlock_tryrdlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:452 */

/* BEGIN FUNCTION-DECL report_warning LOC=UNKNOWN */
static void report_warning(struct jit *jit , jit_op *op , char *desc ) ;
/* END FUNCTION-DECL report_warning LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __isctype LOC=UNKNOWN */
__inline __darwin_ct_rune_t __isctype(__darwin_ct_rune_t _c , unsigned long _f ) ;
/* END FUNCTION-DECL __isctype LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN mkostempsat_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:692 */
extern int mkostempsat_np(int dfd , char *path , int slen , int oflags )  __attribute__((__availability__(watchos,introduced=4.0),
__availability__(tvos,introduced=11.0), __availability__(ios,introduced=11.0), __availability__(macosx,introduced=10.13))) ;
/* END FUNCTION-DECL-EXTERN mkostempsat_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:692 */

/* BEGIN FUNCTION-DECL __builtin_object_size LOC=BUILTIN */
/* compiler builtin: 
   unsigned long long __builtin_object_size(void * , int  ) ;  */
/* END FUNCTION-DECL __builtin_object_size LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_hypotf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_hypotf(float  , float  ) ;  */
/* END FUNCTION-DECL __builtin_hypotf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_unwind_init LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_unwind_init(void) ;  */
/* END FUNCTION-DECL __builtin_unwind_init LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_huge_valf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_huge_valf128(void) ;  */
/* END FUNCTION-DECL __builtin_huge_valf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin___get_unsafe_stack_start LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin___get_unsafe_stack_start(void) ;  */
/* END FUNCTION-DECL __builtin___get_unsafe_stack_start LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN setegid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:624 */
extern int setegid(gid_t  ) ;
/* END FUNCTION-DECL-EXTERN setegid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:624 */

/* BEGIN ENUM jit_amd64_gp_regs LOC=./jitter-Darwin-X86-64.c:1012 */
enum jit_amd64_gp_regs {
    AMD64_RAX = 0,
    AMD64_RCX = 1,
    AMD64_RDX = 2,
    AMD64_RBX = 3,
    AMD64_RSP = 4,
    AMD64_RBP = 5,
    AMD64_RSI = 6,
    AMD64_RDI = 7,
    AMD64_R8 = 8,
    AMD64_R9 = 9,
    AMD64_R10 = 10,
    AMD64_R11 = 11,
    AMD64_R12 = 12,
    AMD64_R13 = 13,
    AMD64_R14 = 14,
    AMD64_R15 = 15,
    AMD64_RIP = 16,
    AMD64_NREG = 17
} ;
/* END ENUM jit_amd64_gp_regs LOC=./jitter-Darwin-X86-64.c:1012 */

/* BEGIN STRUCT-DECL pthread_override_s LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:211 */
struct pthread_override_s ;
/* END STRUCT-DECL pthread_override_s LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:211 */

/* BEGIN FUNCTION-DECL __builtin_casinl LOC=BUILTIN */
/* compiler builtin: 
   _Complex long double __builtin_casinl(_Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_casinl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_tan LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_tan(double  ) ;  */
/* END FUNCTION-DECL __builtin_tan LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN atoll LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:139 */
extern long long atoll(char const   * ) ;
/* END FUNCTION-DECL-EXTERN atoll LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:139 */

/* BEGIN FUNCTION-DECL-EXTERN unlinkat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:212 */
extern int unlinkat(int  , char const   * , int  )  __attribute__((__availability__(macosx,introduced=10.10))) ;
/* END FUNCTION-DECL-EXTERN unlinkat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:212 */

/* BEGIN FUNCTION-DECL jit_get_unused_reg_with_index LOC=UNKNOWN */
jit_hw_reg *jit_get_unused_reg_with_index(struct jit_reg_allocator *al , jit_op *op ,
                                          int fp , int index___0 ) ;
/* END FUNCTION-DECL jit_get_unused_reg_with_index LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN getattrlistbulk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:187 */
extern int getattrlistbulk(int  , void * , void * , size_t  , uint64_t  )  __attribute__((__availability__(macosx,introduced=10.10))) ;
/* END FUNCTION-DECL-EXTERN getattrlistbulk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:187 */

/* BEGIN TYPEDEF ldiv_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:88 */
typedef struct __anonstruct_ldiv_t_748949161 ldiv_t;
/* END TYPEDEF ldiv_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:88 */

/* BEGIN FUNCTION-DECL __builtin_fdimf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_fdimf128(_Float128  , _Float128  ) ;  */
/* END FUNCTION-DECL __builtin_fdimf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin___stpcpy_chk LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin___stpcpy_chk(char * , char const   * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin___stpcpy_chk LOC=BUILTIN */

/* BEGIN TYPEDEF rsize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_rsize_t.h:31 */
typedef __darwin_size_t rsize_t;
/* END TYPEDEF rsize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_rsize_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN memset_s LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:145 */
extern errno_t memset_s(void *__s , rsize_t __smax , int __c , rsize_t __n )  __attribute__((__availability__(macosx,introduced=10.9))) ;
/* END FUNCTION-DECL-EXTERN memset_s LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:145 */

/* BEGIN FUNCTION-DECL jit_op_last LOC=UNKNOWN */
__inline static jit_op *jit_op_last(jit_op *op ) ;
/* END FUNCTION-DECL jit_op_last LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_os_log_format_buffer_size LOC=BUILTIN */
/* compiler builtin: 
   unsigned long long __builtin_os_log_format_buffer_size(char const   *  , ...) ;  */
/* END FUNCTION-DECL __builtin_os_log_format_buffer_size LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_usub_overflow LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_usub_overflow(unsigned int const    , unsigned int const    , unsigned int * ) ;  */
/* END FUNCTION-DECL __builtin_usub_overflow LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_next_arg LOC=BUILTIN */
/* compiler builtin: 
   __builtin_va_list __builtin_next_arg(void) ;  */
/* END FUNCTION-DECL __builtin_next_arg LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_annotation LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_annotation(...) ;  */
/* END FUNCTION-DECL __builtin_annotation LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_erf LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_erf(double  ) ;  */
/* END FUNCTION-DECL __builtin_erf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_cabsl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_cabsl(_Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_cabsl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_canonicalizef LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_canonicalizef(float  ) ;  */
/* END FUNCTION-DECL __builtin_canonicalizef LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN sched_get_priority_max LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/sched.h:40 */
extern int sched_get_priority_max(int  ) ;
/* END FUNCTION-DECL-EXTERN sched_get_priority_max LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/sched.h:40 */

/* BEGIN FUNCTION-DECL-EXTERN __darwin_check_fd_set_overflow LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h:54 */
extern int __darwin_check_fd_set_overflow(int  , void const   * , int  )  __attribute__((__weak_import__)) ;
/* END FUNCTION-DECL-EXTERN __darwin_check_fd_set_overflow LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h:54 */

/* BEGIN FUNCTION-DECL emit_push_reg LOC=UNKNOWN */
static int emit_push_reg(struct jit *jit , jit_hw_reg *r , int stack_offset ) ;
/* END FUNCTION-DECL emit_push_reg LOC=UNKNOWN */

/* BEGIN ENUM __anonenum_jit_opcode_193533032 LOC=./jitter-Darwin-X86-64.c:112 */
enum __anonenum_jit_opcode_193533032 {
    JIT_NOP = 0,
    JIT_CODESTART = 8,
    JIT_UREG = 16,
    JIT_LREG = 24,
    JIT_SYNCREG = 32,
    JIT_RENAMEREG = 40,
    JIT_FULL_SPILL = 48,
    JIT_PROLOG = 128,
    JIT_LABEL = 136,
    JIT_PATCH = 144,
    JIT_DECL_ARG = 152,
    JIT_ALLOCA = 160,
    JIT_MOV = 256,
    JIT_LD = 264,
    JIT_LDX = 272,
    JIT_ST = 280,
    JIT_STX = 288,
    JIT_MEMCPY = 296,
    JIT_MEMSET = 304,
    JIT_JMP = 384,
    JIT_PREPARE = 392,
    JIT_PUTARG = 400,
    JIT_FPUTARG = 408,
    JIT_CALL = 416,
    JIT_RET = 424,
    JIT_GETARG = 432,
    JIT_RETVAL = 440,
    JIT_PREPARE_OPT = 448,
    JIT_FRETVAL = 1088,
    JIT_ADD = 512,
    JIT_ADDC = 520,
    JIT_ADDX = 528,
    JIT_SUB = 536,
    JIT_SUBC = 544,
    JIT_SUBX = 552,
    JIT_RSB = 560,
    JIT_NEG = 568,
    JIT_MUL = 576,
    JIT_HMUL = 584,
    JIT_DIV = 592,
    JIT_MOD = 600,
    JIT_OR = 640,
    JIT_XOR = 648,
    JIT_AND = 656,
    JIT_LSH = 664,
    JIT_RSH = 672,
    JIT_NOT = 680,
    JIT_LT = 768,
    JIT_LE = 776,
    JIT_GT = 784,
    JIT_GE = 792,
    JIT_EQ = 800,
    JIT_NE = 808,
    JIT_BLT = 896,
    JIT_BLE = 904,
    JIT_BGT = 912,
    JIT_BGE = 920,
    JIT_BEQ = 928,
    JIT_BNE = 936,
    JIT_BMS = 944,
    JIT_BMC = 952,
    JIT_BOADD = 960,
    JIT_BOSUB = 968,
    JIT_BNOADD = 976,
    JIT_BNOSUB = 984,
    JIT_FMOV = 1024,
    JIT_FADD = 1032,
    JIT_FSUB = 1040,
    JIT_FRSB = 1048,
    JIT_FMUL = 1056,
    JIT_FDIV = 1064,
    JIT_FNEG = 1072,
    JIT_EXT = 1096,
    JIT_ROUND = 1104,
    JIT_TRUNC = 1112,
    JIT_FLOOR = 1120,
    JIT_CEIL = 1128,
    JIT_FBLT = 1152,
    JIT_FBLE = 1160,
    JIT_FBGT = 1168,
    JIT_FBGE = 1176,
    JIT_FBEQ = 1184,
    JIT_FBNE = 1192,
    JIT_FLD = 1280,
    JIT_FLDX = 1288,
    JIT_FST = 1296,
    JIT_FSTX = 1304,
    JIT_FRET = 1320,
    JIT_DATA_BYTE = 1408,
    JIT_DATA_BYTES = 1416,
    JIT_DATA_REF_CODE = 1424,
    JIT_DATA_REF_DATA = 1432,
    JIT_CODE_ALIGN = 1440,
    JIT_REF_CODE = 1448,
    JIT_REF_DATA = 1456,
    JIT_TRANSFER = 1536,
    JIT_TRANSFER_CPY = 1544,
    JIT_TRANSFER_XOR = 1552,
    JIT_TRANSFER_AND = 1560,
    JIT_TRANSFER_OR = 1568,
    JIT_TRANSFER_ADD = 1576,
    JIT_TRANSFER_ADDS = 1584,
    JIT_TRANSFER_SUB = 1592,
    JIT_TRANSFER_SUBS = 1600,
    JIT_MSG = 1920,
    JIT_COMMENT = 1928,
    JIT_X86_STI = 2048,
    JIT_X86_STXI = 2056,
    JIT_X86_ADDMUL = 2064,
    JIT_X86_ADDIMM = 2072,
    JIT_FORCE_SPILL = 4096,
    JIT_FORCE_ASSOC = 4104,
    JIT_TRACE = 4112,
    JIT_MARK = 4120,
    JIT_TOUCH = 4128
} ;
/* END ENUM __anonenum_jit_opcode_193533032 LOC=./jitter-Darwin-X86-64.c:112 */

/* BEGIN FUNCTION-DECL __builtin_bswap32 LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_bswap32(int  ) ;  */
/* END FUNCTION-DECL __builtin_bswap32 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_pop_caller_saved_regs LOC=UNKNOWN */
static int emit_pop_caller_saved_regs(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_pop_caller_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_fmaxf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_fmaxf(float  , float  ) ;  */
/* END FUNCTION-DECL __builtin_fmaxf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_logf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_logf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_logf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN getenv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:147 */
extern char *getenv(char const   * ) ;
/* END FUNCTION-DECL-EXTERN getenv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:147 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_join LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:362 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_join(pthread_t  ,
                                                                                                                        void * _Nullable  * _Nullable   )  __asm__("_pthread_join")  ;
/* END FUNCTION-DECL-EXTERN pthread_join LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:362 */

/* BEGIN FUNCTION-DECL jit_free LOC=UNKNOWN */
void jit_free(struct jit *jit ) ;
/* END FUNCTION-DECL jit_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN strlen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:82 */
extern size_t strlen(char const   *__s ) ;
/* END FUNCTION-DECL-EXTERN strlen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:82 */

/* BEGIN FUNCTION-DECL __builtin_debugtrap LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_debugtrap(void) ;  */
/* END FUNCTION-DECL __builtin_debugtrap LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_nearbyintf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_nearbyintf(float  ) ;  */
/* END FUNCTION-DECL __builtin_nearbyintf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL check_data_references LOC=UNKNOWN */
static int check_data_references(jit_op *op , char *msg_buf ) ;
/* END FUNCTION-DECL check_data_references LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_stdarg_start LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_stdarg_start(__builtin_va_list  ) ;  */
/* END FUNCTION-DECL __builtin_stdarg_start LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN ___tolower LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:130 */
extern __darwin_ct_rune_t ___tolower(__darwin_ct_rune_t  ) ;
/* END FUNCTION-DECL-EXTERN ___tolower LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:130 */

/* BEGIN FUNCTION-DECL __builtin_log10f16 LOC=BUILTIN */
/* compiler builtin: 
   _Float16 __builtin_log10f16(_Float16  ) ;  */
/* END FUNCTION-DECL __builtin_log10f16 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL stack_arg_pos LOC=UNKNOWN */
__inline static int stack_arg_pos(struct jit *jit , struct jit_func_info *info , int arg ) ;
/* END FUNCTION-DECL stack_arg_pos LOC=UNKNOWN */

/* BEGIN TYPEDEF uint_least32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:35 */
typedef uint32_t uint_least32_t;
/* END TYPEDEF uint_least32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:35 */

/* BEGIN FUNCTION-DECL __builtin___get_unsafe_stack_top LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin___get_unsafe_stack_top(void) ;  */
/* END FUNCTION-DECL __builtin___get_unsafe_stack_top LOC=BUILTIN */

/* BEGIN FUNCTION-DECL open_disasm LOC=UNKNOWN */
static FILE *open_disasm(void) ;
/* END FUNCTION-DECL open_disasm LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_acoshf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_acoshf(float  ) ;  */
/* END FUNCTION-DECL __builtin_acoshf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_catanh LOC=BUILTIN */
/* compiler builtin: 
   _Complex double __builtin_catanh(_Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_catanh LOC=BUILTIN */

/* BEGIN VARIABLE-DEF x86_cc_signed_map LOC=UNKNOWN */
static unsigned char x86_cc_signed_map[12]  ;
/* END VARIABLE-DEF x86_cc_signed_map LOC=UNKNOWN */

/* BEGIN UNION jit_proc_value_alias LOC=./jitter-Darwin-X86-64.c:100 */
union jit_proc_value_alias {
   void (*ptr)(void) ;
   jit_value num ;
};
/* END UNION jit_proc_value_alias LOC=./jitter-Darwin-X86-64.c:100 */

/* BEGIN FUNCTION-DECL __builtin_llroundl LOC=BUILTIN */
/* compiler builtin: 
   long long __builtin_llroundl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_llroundl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_bitreverse64 LOC=BUILTIN */
/* compiler builtin: 
   unsigned long __builtin_bitreverse64(unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_bitreverse64 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_eh_return_data_regno LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_eh_return_data_regno(int  ) ;  */
/* END FUNCTION-DECL __builtin_eh_return_data_regno LOC=BUILTIN */

/* BEGIN VARIABLE-DECL-EXTERN _CurrentRuneLocale LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:112 */
extern _RuneLocale *_CurrentRuneLocale ;
/* END VARIABLE-DECL-EXTERN _CurrentRuneLocale LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:112 */

/* BEGIN FUNCTION-DECL-EXTERN mmap LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:225 */
extern void *mmap(void * , size_t  , int  , int  , int  , off_t  )  __asm__("_mmap")  ;
/* END FUNCTION-DECL-EXTERN mmap LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:225 */

/* BEGIN FUNCTION-DECL rmap_assoc LOC=UNKNOWN */
static void rmap_assoc(jit_rmap *rmap , jit_value reg , jit_hw_reg *hreg ) ;
/* END FUNCTION-DECL rmap_assoc LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_sinf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_sinf(float  ) ;  */
/* END FUNCTION-DECL __builtin_sinf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_matrix_column_major_load LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_matrix_column_major_load(...) ;  */
/* END FUNCTION-DECL __builtin_matrix_column_major_load LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_nanf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_nanf(char const   * ) ;  */
/* END FUNCTION-DECL __builtin_nanf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_init_dwarf_reg_size_table LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_init_dwarf_reg_size_table(void * ) ;  */
/* END FUNCTION-DECL __builtin_init_dwarf_reg_size_table LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN difftime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:111 */
extern double difftime(time_t  , time_t  ) ;
/* END FUNCTION-DECL-EXTERN difftime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:111 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_atfork LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:222 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_atfork(void (* _Nullable  )(void) ,
                                                                                                                          void (* _Nullable  )(void) ,
                                                                                                                          void (* _Nullable  )(void) ) ;
/* END FUNCTION-DECL-EXTERN pthread_atfork LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:222 */

/* BEGIN VARIABLE-DEF _TIG_iO_HQIz_2_init_tigress_1_opaque_list_1 LOC=UNKNOWN */
struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct *_TIG_iO_HQIz_2_init_tigress_1_opaque_list_1  =    (struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct *)0;
/* END VARIABLE-DEF _TIG_iO_HQIz_2_init_tigress_1_opaque_list_1 LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN sprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:180 */
extern int ( /* format attribute */  sprintf)(char * __restrict   , char const   * __restrict   
                                              , ...)  __attribute__((__availability__(swift,unavailable,message="Use snprintf instead."))) ;
/* END FUNCTION-DECL-EXTERN sprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:180 */

/* BEGIN FUNCTION-DECL __builtin_modfl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_modfl(long double  , long double * ) ;  */
/* END FUNCTION-DECL __builtin_modfl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_frexpf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_frexpf128(_Float128  , int * ) ;  */
/* END FUNCTION-DECL __builtin_frexpf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN renameatx_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/stdio.h:47 */
extern int renameatx_np(int  , char const   * , int  , char const   * , unsigned int  )  __attribute__((__availability__(watchos,introduced=3.0),
__availability__(tvos,introduced=10.0), __availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12))) ;
/* END FUNCTION-DECL-EXTERN renameatx_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/stdio.h:47 */

/* BEGIN FUNCTION-DECL __builtin_exp2f16 LOC=BUILTIN */
/* compiler builtin: 
   _Float16 __builtin_exp2f16(_Float16  ) ;  */
/* END FUNCTION-DECL __builtin_exp2f16 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN nfssvc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:695 */
extern int nfssvc(int  , void * ) ;
/* END FUNCTION-DECL-EXTERN nfssvc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:695 */

/* BEGIN FUNCTION-DECL __builtin_expf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_expf(float  ) ;  */
/* END FUNCTION-DECL __builtin_expf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_ffs LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_ffs(unsigned int  ) ;  */
/* END FUNCTION-DECL __builtin_ffs LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_alu_op LOC=UNKNOWN */
static void emit_alu_op(struct jit *jit , struct jit_op *op , int x86_op , int imm ) ;
/* END FUNCTION-DECL emit_alu_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN mbtowc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:158 */
extern int mbtowc(wchar_t * __restrict   , char const   * __restrict   , size_t  ) ;
/* END FUNCTION-DECL-EXTERN mbtowc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:158 */

/* BEGIN FUNCTION-DECL-EXTERN getcwd LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:449 */
extern char *getcwd(char * , size_t  ) ;
/* END FUNCTION-DECL-EXTERN getcwd LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:449 */

/* BEGIN FUNCTION-DECL-EXTERN abs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:132 */
extern int abs(int  )  __attribute__((__const__)) ;
/* END FUNCTION-DECL-EXTERN abs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:132 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutex_trylock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:390 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_trylock(pthread_mutex_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutex_trylock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:390 */

/* BEGIN VARIABLE-DEF _TIG_iE_HQIz_1_alwaysZero LOC=UNKNOWN */
unsigned long _TIG_iE_HQIz_1_alwaysZero  =    0UL;
/* END VARIABLE-DEF _TIG_iE_HQIz_1_alwaysZero LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN encrypt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:546 */
extern void encrypt(char * , int  )  __asm__("_encrypt")  ;
/* END FUNCTION-DECL-EXTERN encrypt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:546 */

/* BEGIN FUNCTION-DECL-EXTERN labs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:148 */
extern long labs(long  )  __attribute__((__const__)) ;
/* END FUNCTION-DECL-EXTERN labs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:148 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_setstacksize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:287 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setstacksize(pthread_attr_t * ,
                                                                                                                                     size_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_setstacksize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:287 */

/* BEGIN FUNCTION-DECL __builtin_copysignf16 LOC=BUILTIN */
/* compiler builtin: 
   _Float16 __builtin_copysignf16(_Float16  , _Float16  ) ;  */
/* END FUNCTION-DECL __builtin_copysignf16 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_tree_insert LOC=UNKNOWN */
static jit_tree *jit_tree_insert(jit_tree *root , jit_tree_key key , jit_tree_value value ,
                                 int *found ) ;
/* END FUNCTION-DECL jit_tree_insert LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_tgamma LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_tgamma(double  ) ;  */
/* END FUNCTION-DECL __builtin_tgamma LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN lutimes LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:192 */
extern int lutimes(char const   * , struct timeval  const  * )  __attribute__((__availability__(macosx,introduced=10.5))) ;
/* END FUNCTION-DECL-EXTERN lutimes LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:192 */

/* BEGIN UNION __anonunion_x86_imm_buf_876386805 LOC=./jitter-Darwin-X86-64.c:1236 */
union __anonunion_x86_imm_buf_876386805 {
   int val ;
   unsigned char b[4] ;
};
/* END UNION __anonunion_x86_imm_buf_876386805 LOC=./jitter-Darwin-X86-64.c:1236 */

/* BEGIN TYPEDEF int_least64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:32 */
typedef int64_t int_least64_t;
/* END TYPEDEF int_least64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:32 */

/* BEGIN FUNCTION-DECL check_dead_code LOC=UNKNOWN */
static int check_dead_code(jit_op *op , char *msg_buf ) ;
/* END FUNCTION-DECL check_dead_code LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN rindex LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:74 */
extern char *rindex(char const   * , int  ) ;
/* END FUNCTION-DECL-EXTERN rindex LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:74 */

/* BEGIN FUNCTION-DECL-EXTERN memset_pattern4 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:156 */
extern void memset_pattern4(void *__b , void const   *__pattern4 , size_t __len )  __attribute__((__availability__(macosx,introduced=10.5))) ;
/* END FUNCTION-DECL-EXTERN memset_pattern4 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:156 */

/* BEGIN TYPEDEF syscall_arg_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:111 */
typedef u_int64_t syscall_arg_t;
/* END TYPEDEF syscall_arg_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:111 */

/* BEGIN FUNCTION-DECL-EXTERN __vsprintf_chk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_stdio.h:61 */
extern int __vsprintf_chk(char * __restrict   , int  , size_t  , char const   * __restrict   ,
                          va_list  ) ;
/* END FUNCTION-DECL-EXTERN __vsprintf_chk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_stdio.h:61 */

/* BEGIN FUNCTION-DECL-EXTERN cgetcap LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:281 */
extern char *cgetcap(char * , char const   * , int  ) ;
/* END FUNCTION-DECL-EXTERN cgetcap LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:281 */

/* BEGIN FUNCTION-DECL jit_add_prolog LOC=UNKNOWN */
jit_op *jit_add_prolog(struct jit *jit , void *func , struct jit_debug_info *debug_info ) ;
/* END FUNCTION-DECL jit_add_prolog LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN system LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:190 */
extern int __attribute__((__availability__(tvos,unavailable), __availability__(watchos,unavailable),
__availability__(ios,unavailable), __availability__(macos,introduced=10.0), __availability__(swift,unavailable,message="Use posix_spawn APIs or NSTask instead.")))  system(char const   * )  __asm__("_system")  ;
/* END FUNCTION-DECL-EXTERN system LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:190 */

/* BEGIN FUNCTION-DECL __builtin_strdup LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin_strdup(char const   * ) ;  */
/* END FUNCTION-DECL __builtin_strdup LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_rotateleft32 LOC=BUILTIN */
/* compiler builtin: 
   unsigned int __builtin_rotateleft32(unsigned int  , unsigned int  ) ;  */
/* END FUNCTION-DECL __builtin_rotateleft32 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_sinhf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_sinhf(float  ) ;  */
/* END FUNCTION-DECL __builtin_sinhf LOC=BUILTIN */

/* BEGIN TYPEDEF X86_Prefix LOC=./jitter-Darwin-X86-64.c:1187 */
typedef enum __anonenum_X86_Prefix_200431650 X86_Prefix;
/* END TYPEDEF X86_Prefix LOC=./jitter-Darwin-X86-64.c:1187 */

/* BEGIN FUNCTION-DECL-EXTERN mkostemp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:676 */
extern int mkostemp(char *path , int oflags )  __attribute__((__availability__(watchos,introduced=3.0),
__availability__(tvos,introduced=10.0), __availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12))) ;
/* END FUNCTION-DECL-EXTERN mkostemp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:676 */

/* BEGIN FUNCTION-DECL-EXTERN reboot LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:702 */
extern int reboot(int  ) ;
/* END FUNCTION-DECL-EXTERN reboot LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:702 */

/* BEGIN FUNCTION-DECL-EXTERN strtof LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:166 */
extern float strtof(char const   * , char ** )  __asm__("_strtof")  ;
/* END FUNCTION-DECL-EXTERN strtof LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:166 */

/* BEGIN FUNCTION-DECL-EXTERN mkpath_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:669 */
extern int mkpath_np(char const   *path , mode_t omode )  __attribute__((__availability__(macosx,introduced=10.8))) ;
/* END FUNCTION-DECL-EXTERN mkpath_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:669 */

/* BEGIN FUNCTION-DECL insert_reg_op LOC=UNKNOWN */
static void insert_reg_op(int opcode , jit_op *op , jit_value r1 , jit_value r2 ) ;
/* END FUNCTION-DECL insert_reg_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN utimes LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:203 */
extern int utimes(char const   * , struct timeval  const  * ) ;
/* END FUNCTION-DECL-EXTERN utimes LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:203 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlockattr_setpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:474 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlockattr_setpshared(pthread_rwlockattr_t * ,
                                                                                                                                         int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_rwlockattr_setpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:474 */

/* BEGIN FUNCTION-DECL-EXTERN fchown LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:621 */
extern int fchown(int  , uid_t  , gid_t  ) ;
/* END FUNCTION-DECL-EXTERN fchown LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:621 */

/* BEGIN FUNCTION-DECL ob_printf LOC=UNKNOWN */
static void ob_printf(struct output_buf *ob , char const   *fmt  , ...) ;
/* END FUNCTION-DECL ob_printf LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_floorf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_floorf(float  ) ;  */
/* END FUNCTION-DECL __builtin_floorf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN faccessat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:207 */
extern int faccessat(int  , char const   * , int  , int  )  __attribute__((__availability__(macosx,introduced=10.10))) ;
/* END FUNCTION-DECL-EXTERN faccessat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:207 */

/* BEGIN FUNCTION-DECL __builtin___clear_cache LOC=BUILTIN */
/* compiler builtin: 
   void __builtin___clear_cache(void * ) ;  */
/* END FUNCTION-DECL __builtin___clear_cache LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutex_setprioceiling LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:386 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_setprioceiling(pthread_mutex_t * __restrict   ,
                                                                                                                                        int  ,
                                                                                                                                        int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutex_setprioceiling LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:386 */

/* BEGIN FUNCTION-DECL-EXTERN pclose LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:228 */
extern int pclose(FILE * )  __attribute__((__availability__(swift,unavailable,message="Use posix_spawn APIs or NSTask instead."))) ;
/* END FUNCTION-DECL-EXTERN pclose LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:228 */

/* BEGIN FUNCTION-DECL __builtin_wmemcmp LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_wmemcmp(unsigned short * const   , unsigned short * const   , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_wmemcmp LOC=BUILTIN */

/* BEGIN STRUCT __darwin_zmm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:245 */
struct __darwin_zmm_reg {
   char __zmm_reg[64] ;
};
/* END STRUCT __darwin_zmm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:245 */

/* BEGIN STRUCT __darwin_x86_avx512_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:833 */
struct __darwin_x86_avx512_state64 {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   struct __darwin_xmm_reg __fpu_xmm8 ;
   struct __darwin_xmm_reg __fpu_xmm9 ;
   struct __darwin_xmm_reg __fpu_xmm10 ;
   struct __darwin_xmm_reg __fpu_xmm11 ;
   struct __darwin_xmm_reg __fpu_xmm12 ;
   struct __darwin_xmm_reg __fpu_xmm13 ;
   struct __darwin_xmm_reg __fpu_xmm14 ;
   struct __darwin_xmm_reg __fpu_xmm15 ;
   char __fpu_rsrv4[96] ;
   int __fpu_reserved1 ;
   char __avx_reserved1[64] ;
   struct __darwin_xmm_reg __fpu_ymmh0 ;
   struct __darwin_xmm_reg __fpu_ymmh1 ;
   struct __darwin_xmm_reg __fpu_ymmh2 ;
   struct __darwin_xmm_reg __fpu_ymmh3 ;
   struct __darwin_xmm_reg __fpu_ymmh4 ;
   struct __darwin_xmm_reg __fpu_ymmh5 ;
   struct __darwin_xmm_reg __fpu_ymmh6 ;
   struct __darwin_xmm_reg __fpu_ymmh7 ;
   struct __darwin_xmm_reg __fpu_ymmh8 ;
   struct __darwin_xmm_reg __fpu_ymmh9 ;
   struct __darwin_xmm_reg __fpu_ymmh10 ;
   struct __darwin_xmm_reg __fpu_ymmh11 ;
   struct __darwin_xmm_reg __fpu_ymmh12 ;
   struct __darwin_xmm_reg __fpu_ymmh13 ;
   struct __darwin_xmm_reg __fpu_ymmh14 ;
   struct __darwin_xmm_reg __fpu_ymmh15 ;
   struct __darwin_opmask_reg __fpu_k0 ;
   struct __darwin_opmask_reg __fpu_k1 ;
   struct __darwin_opmask_reg __fpu_k2 ;
   struct __darwin_opmask_reg __fpu_k3 ;
   struct __darwin_opmask_reg __fpu_k4 ;
   struct __darwin_opmask_reg __fpu_k5 ;
   struct __darwin_opmask_reg __fpu_k6 ;
   struct __darwin_opmask_reg __fpu_k7 ;
   struct __darwin_ymm_reg __fpu_zmmh0 ;
   struct __darwin_ymm_reg __fpu_zmmh1 ;
   struct __darwin_ymm_reg __fpu_zmmh2 ;
   struct __darwin_ymm_reg __fpu_zmmh3 ;
   struct __darwin_ymm_reg __fpu_zmmh4 ;
   struct __darwin_ymm_reg __fpu_zmmh5 ;
   struct __darwin_ymm_reg __fpu_zmmh6 ;
   struct __darwin_ymm_reg __fpu_zmmh7 ;
   struct __darwin_ymm_reg __fpu_zmmh8 ;
   struct __darwin_ymm_reg __fpu_zmmh9 ;
   struct __darwin_ymm_reg __fpu_zmmh10 ;
   struct __darwin_ymm_reg __fpu_zmmh11 ;
   struct __darwin_ymm_reg __fpu_zmmh12 ;
   struct __darwin_ymm_reg __fpu_zmmh13 ;
   struct __darwin_ymm_reg __fpu_zmmh14 ;
   struct __darwin_ymm_reg __fpu_zmmh15 ;
   struct __darwin_zmm_reg __fpu_zmm16 ;
   struct __darwin_zmm_reg __fpu_zmm17 ;
   struct __darwin_zmm_reg __fpu_zmm18 ;
   struct __darwin_zmm_reg __fpu_zmm19 ;
   struct __darwin_zmm_reg __fpu_zmm20 ;
   struct __darwin_zmm_reg __fpu_zmm21 ;
   struct __darwin_zmm_reg __fpu_zmm22 ;
   struct __darwin_zmm_reg __fpu_zmm23 ;
   struct __darwin_zmm_reg __fpu_zmm24 ;
   struct __darwin_zmm_reg __fpu_zmm25 ;
   struct __darwin_zmm_reg __fpu_zmm26 ;
   struct __darwin_zmm_reg __fpu_zmm27 ;
   struct __darwin_zmm_reg __fpu_zmm28 ;
   struct __darwin_zmm_reg __fpu_zmm29 ;
   struct __darwin_zmm_reg __fpu_zmm30 ;
   struct __darwin_zmm_reg __fpu_zmm31 ;
};
/* END STRUCT __darwin_x86_avx512_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:833 */

/* BEGIN FUNCTION-DECL-EXTERN alarm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:433 */
extern unsigned int alarm(unsigned int  ) ;
/* END FUNCTION-DECL-EXTERN alarm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:433 */

/* BEGIN FUNCTION-DECL __builtin_ia32_unpckhps LOC=BUILTIN */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_unpckhps(float __attribute__((____vector_size____(16)))   ,
                                                                           float __attribute__((____vector_size____(16)))   ) ;  */
/* END FUNCTION-DECL __builtin_ia32_unpckhps LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strmode LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:164 */
extern void strmode(int __mode , char *__bp ) ;
/* END FUNCTION-DECL-EXTERN strmode LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:164 */

/* BEGIN FUNCTION-DECL __builtin_ccoshl LOC=BUILTIN */
/* compiler builtin: 
   _Complex long double __builtin_ccoshl(_Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_ccoshl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN cgetustr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:290 */
extern int cgetustr(char * , char const   * , char ** ) ;
/* END FUNCTION-DECL-EXTERN cgetustr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:290 */

/* BEGIN FUNCTION-DECL-EXTERN __sprintf_chk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_stdio.h:42 */
extern int __sprintf_chk(char * __restrict   , int  , size_t  , char const   * __restrict   
                         , ...) ;
/* END FUNCTION-DECL-EXTERN __sprintf_chk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_stdio.h:42 */

/* BEGIN FUNCTION-DECL-EXTERN timelocal LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:137 */
extern time_t timelocal(struct tm * ) ;
/* END FUNCTION-DECL-EXTERN timelocal LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:137 */

/* BEGIN FUNCTION-DECL-EXTERN ctime_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:126 */
extern char *ctime_r(time_t const   * , char * ) ;
/* END FUNCTION-DECL-EXTERN ctime_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:126 */

/* BEGIN FUNCTION-DECL __builtin_cacosf LOC=BUILTIN */
/* compiler builtin: 
   _Complex float __builtin_cacosf(_Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_cacosf LOC=BUILTIN */

/* BEGIN TYPEDEF fixpt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:105 */
typedef u_int32_t fixpt_t;
/* END TYPEDEF fixpt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:105 */

/* BEGIN FUNCTION-DECL __builtin_ffsll LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_ffsll(unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_ffsll LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN shm_unlink LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:237 */
extern int shm_unlink(char const   * ) ;
/* END FUNCTION-DECL-EXTERN shm_unlink LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:237 */

/* BEGIN TYPEDEF uint_least64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:36 */
typedef uint64_t uint_least64_t;
/* END TYPEDEF uint_least64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:36 */

/* BEGIN FUNCTION-DECL _cipher$_xtea_encipherBlock LOC=UNKNOWN */
void _cipher$_xtea_encipherBlock(unsigned int num_rounds , unsigned int *v , unsigned int *key ) ;
/* END FUNCTION-DECL _cipher$_xtea_encipherBlock LOC=UNKNOWN */

/* BEGIN TYPEDEF u_char LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_char.h:30 */
typedef unsigned char u_char;
/* END TYPEDEF u_char LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_char.h:30 */

/* BEGIN FUNCTION-DECL __builtin_cacosl LOC=BUILTIN */
/* compiler builtin: 
   _Complex long double __builtin_cacosl(_Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_cacosl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN setkey LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:239 */
extern void setkey(char const   * )  __asm__("_setkey")  ;
/* END FUNCTION-DECL-EXTERN setkey LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:239 */

/* BEGIN FUNCTION-DECL __builtin_conjl LOC=BUILTIN */
/* compiler builtin: 
   _Complex long double __builtin_conjl(_Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_conjl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_sqrtl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_sqrtl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_sqrtl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_powil LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_powil(long double  , int  ) ;  */
/* END FUNCTION-DECL __builtin_powil LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN access LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:431 */
extern int access(char const   * , int  ) ;
/* END FUNCTION-DECL-EXTERN access LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:431 */

/* BEGIN FUNCTION-DECL-EXTERN gethostid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:551 */
extern long gethostid(void) ;
/* END FUNCTION-DECL-EXTERN gethostid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:551 */

/* BEGIN FUNCTION-DECL-EXTERN getdelim LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:354 */
extern ssize_t getdelim(char ** __restrict  __linep , size_t * __restrict  __linecapp ,
                        int __delimiter , FILE * __restrict  __stream )  __attribute__((__availability__(macosx,introduced=10.7))) ;
/* END FUNCTION-DECL-EXTERN getdelim LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:354 */

/* BEGIN FUNCTION-DECL jit_trace LOC=UNKNOWN */
void jit_trace(struct jit *jit , int verbosity ) ;
/* END FUNCTION-DECL jit_trace LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN ftrylockfile LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:287 */
extern int ftrylockfile(FILE * ) ;
/* END FUNCTION-DECL-EXTERN ftrylockfile LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:287 */

/* BEGIN FUNCTION-DECL __builtin_lgammaf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_lgammaf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_lgammaf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_rotateright16 LOC=BUILTIN */
/* compiler builtin: 
   short __builtin_rotateright16(short  , short  ) ;  */
/* END FUNCTION-DECL __builtin_rotateright16 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_abs LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_abs(int  ) ;  */
/* END FUNCTION-DECL __builtin_abs LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_ssubl_overflow LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_ssubl_overflow(long const    , long const    , long * ) ;  */
/* END FUNCTION-DECL __builtin_ssubl_overflow LOC=BUILTIN */

/* BEGIN TYPEDEF rune_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_rune_t.h:31 */
typedef __darwin_rune_t rune_t;
/* END TYPEDEF rune_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_rune_t.h:31 */

/* BEGIN FUNCTION-DECL __builtin_nansf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_nansf(char const   * ) ;  */
/* END FUNCTION-DECL __builtin_nansf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_atanhf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_atanhf(float  ) ;  */
/* END FUNCTION-DECL __builtin_atanhf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN __assert_rtn LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/assert.h:76 */
extern  __attribute__((__noreturn__)) void __assert_rtn(char const   * , char const   * ,
                                                        int  , char const   * )  __attribute__((__disable_tail_calls__,
__cold__)) ;
/* END FUNCTION-DECL-EXTERN __assert_rtn LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/assert.h:76 */

/* BEGIN FUNCTION-DECL-EXTERN getgrouplist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:650 */
extern int getgrouplist(char const   * , int  , int * , int * ) ;
/* END FUNCTION-DECL-EXTERN getgrouplist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:650 */

/* BEGIN FUNCTION-DECL-EXTERN fgetpos LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:148 */
extern int fgetpos(FILE * __restrict   , fpos_t * ) ;
/* END FUNCTION-DECL-EXTERN fgetpos LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:148 */

/* BEGIN FUNCTION-DECL __builtin_erfcf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_erfcf(float  ) ;  */
/* END FUNCTION-DECL __builtin_erfcf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN fgetc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:147 */
extern int fgetc(FILE * ) ;
/* END FUNCTION-DECL-EXTERN fgetc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:147 */

/* BEGIN FUNCTION-DECL emit_shift_op LOC=UNKNOWN */
static void emit_shift_op(struct jit *jit , struct jit_op *op , int shift_op , int imm ) ;
/* END FUNCTION-DECL emit_shift_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_ctzl LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_ctzl(unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_ctzl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN putchar LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:172 */
extern int putchar(int  ) ;
/* END FUNCTION-DECL-EXTERN putchar LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:172 */

/* BEGIN FUNCTION-DECL-EXTERN feof LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:144 */
extern int feof(FILE * ) ;
/* END FUNCTION-DECL-EXTERN feof LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:144 */

/* BEGIN FUNCTION-DECL-EXTERN srandomdev LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:348 */
extern void srandomdev(void) ;
/* END FUNCTION-DECL-EXTERN srandomdev LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:348 */

/* BEGIN FUNCTION-DECL jit_dead_code_analysis LOC=UNKNOWN */
static void jit_dead_code_analysis(struct jit *jit , int remove_dead_code ) ;
/* END FUNCTION-DECL jit_dead_code_analysis LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin___sprintf_chk LOC=BUILTIN */
/* compiler builtin: 
   int __builtin___sprintf_chk(char * , int  , unsigned long long  , char const   * 
                               , ...) ;  */
/* END FUNCTION-DECL __builtin___sprintf_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_catanf LOC=BUILTIN */
/* compiler builtin: 
   _Complex float __builtin_catanf(_Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_catanf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_exp2l LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_exp2l(long double  ) ;  */
/* END FUNCTION-DECL __builtin_exp2l LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_asinhl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_asinhl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_asinhl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN scanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:177 */
extern int ( /* format attribute */  scanf)(char const   * __restrict    , ...) ;
/* END FUNCTION-DECL-EXTERN scanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:177 */

/* BEGIN FUNCTION-DECL-EXTERN fsync_volume_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:779 */
extern int fsync_volume_np(int  , int  )  __attribute__((__availability__(macosx,introduced=10.8))) ;
/* END FUNCTION-DECL-EXTERN fsync_volume_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:779 */

/* BEGIN FUNCTION-DECL rmap_sync LOC=UNKNOWN */
static void rmap_sync(jit_op *op , jit_rmap *current , jit_rmap *target , int mode ) ;
/* END FUNCTION-DECL rmap_sync LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlock_rdlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:449 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_rdlock(pthread_rwlock_t * )  __asm__("_pthread_rwlock_rdlock")  ;
/* END FUNCTION-DECL-EXTERN pthread_rwlock_rdlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:449 */

/* BEGIN FUNCTION-DECL __builtin_ldexpf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_ldexpf(float  , int  ) ;  */
/* END FUNCTION-DECL __builtin_ldexpf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_canonicalizel LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_canonicalizel(long double  ) ;  */
/* END FUNCTION-DECL __builtin_canonicalizel LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_fmin LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_fmin(double  , double  ) ;  */
/* END FUNCTION-DECL __builtin_fmin LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_powf16 LOC=BUILTIN */
/* compiler builtin: 
   _Float16 __builtin_powf16(_Float16  , _Float16  ) ;  */
/* END FUNCTION-DECL __builtin_powf16 LOC=BUILTIN */

/* BEGIN STRUCT __darwin_mcontext64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:97 */
struct __darwin_mcontext64 {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_state64 __ss ;
   struct __darwin_x86_float_state64 __fs ;
};
/* END STRUCT __darwin_mcontext64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:97 */

/* BEGIN FUNCTION-DECL-EXTERN puts LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:173 */
extern int puts(char const   * ) ;
/* END FUNCTION-DECL-EXTERN puts LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:173 */

/* BEGIN FUNCTION-DECL-EXTERN fflush LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:146 */
extern int fflush(FILE * ) ;
/* END FUNCTION-DECL-EXTERN fflush LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:146 */

/* BEGIN STRUCT-DECL jit_func_info LOC=./jitter-Darwin-X86-64.c:667 */
struct jit_func_info ;
/* END STRUCT-DECL jit_func_info LOC=./jitter-Darwin-X86-64.c:667 */

/* BEGIN FUNCTION-DECL-EXTERN memcpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:72 */
extern void *memcpy(void *__dst , void const   *__src , size_t __n ) ;
/* END FUNCTION-DECL-EXTERN memcpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:72 */

/* BEGIN FUNCTION-DECL __builtin_addc LOC=BUILTIN */
/* compiler builtin: 
   unsigned int __builtin_addc(unsigned int const    , unsigned int const    , unsigned int const    ,
                               unsigned int * ) ;  */
/* END FUNCTION-DECL __builtin_addc LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_catanhl LOC=BUILTIN */
/* compiler builtin: 
   _Complex long double __builtin_catanhl(_Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_catanhl LOC=BUILTIN */

/* BEGIN TYPEDEF intptr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_intptr_t.h:32 */
typedef __darwin_intptr_t intptr_t;
/* END TYPEDEF intptr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_intptr_t.h:32 */

/* BEGIN FUNCTION-DECL-EXTERN chdir LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:434 */
extern int chdir(char const   * ) ;
/* END FUNCTION-DECL-EXTERN chdir LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:434 */

/* BEGIN FUNCTION-DECL __builtin_usubll_overflow LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_usubll_overflow(unsigned long long const    , unsigned long long const    ,
                                   unsigned long long * ) ;  */
/* END FUNCTION-DECL __builtin_usubll_overflow LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_asinl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_asinl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_asinl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN fmemopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:356 */
extern FILE *fmemopen(void * __restrict  __buf , size_t __size , char const   * __restrict  __mode )  __attribute__((__availability__(watchos,introduced=4.0),
__availability__(tvos,introduced=11.0), __availability__(ios,introduced=11.0), __availability__(macos,introduced=10.13))) ;
/* END FUNCTION-DECL-EXTERN fmemopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:356 */

/* BEGIN FUNCTION-DECL-EXTERN geteuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:451 */
extern uid_t geteuid(void) ;
/* END FUNCTION-DECL-EXTERN geteuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:451 */

/* BEGIN FUNCTION-DECL rmap_init LOC=UNKNOWN */
__inline static jit_rmap *rmap_init(void) ;
/* END FUNCTION-DECL rmap_init LOC=UNKNOWN */

/* BEGIN VARIABLE-DECL _TIG_iO_HQIz_2_init_tigress_1_opaque_list_1 LOC=UNKNOWN */
struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct *_TIG_iO_HQIz_2_init_tigress_1_opaque_list_1 ;
/* END VARIABLE-DECL _TIG_iO_HQIz_2_init_tigress_1_opaque_list_1 LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN syscall LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:742 */
extern int __attribute__((__availability__(macosx,deprecated=10.12,message="syscall(2) is unsupported; please switch to a supported interface. For SYS_kdebug_trace use kdebug_signpost()."),
__availability__(ios,deprecated=10.0,message="syscall(2) is unsupported; please switch to a supported interface. For SYS_kdebug_trace use kdebug_signpost()."),
__availability__(tvos,unavailable), __availability__(watchos,unavailable)))  syscall(int  
                                                                                     , ...) ;
/* END FUNCTION-DECL-EXTERN syscall LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:742 */

/* BEGIN FUNCTION-DECL init_tigress LOC=UNKNOWN */
void init_tigress(void) ;
/* END FUNCTION-DECL init_tigress LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_wmemcpy LOC=BUILTIN */
/* compiler builtin: 
   unsigned short *__builtin_wmemcpy(unsigned short * , unsigned short * const   ,
                                     unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_wmemcpy LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN clock_getres LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:175 */
extern int __attribute__((__availability__(watchos,introduced=3.0), __availability__(tvos,introduced=10.0),
__availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12)))  clock_getres(clockid_t __clock_id ,
                                                                                                 struct timespec *__res ) ;
/* END FUNCTION-DECL-EXTERN clock_getres LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:175 */

/* BEGIN FUNCTION-DECL emit_sse_round LOC=UNKNOWN */
static void emit_sse_round(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) ;
/* END FUNCTION-DECL emit_sse_round LOC=UNKNOWN */

/* BEGIN STRUCT __darwin_mcontext_avx512_64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:138 */
struct __darwin_mcontext_avx512_64_full {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_full_state64 __ss ;
   struct __darwin_x86_avx512_state64 __fs ;
};
/* END STRUCT __darwin_mcontext_avx512_64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:138 */

/* BEGIN VARIABLE-DECL x0 LOC=UNKNOWN */
static double x0 ;
/* END VARIABLE-DECL x0 LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_powf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_powf128(_Float128  , _Float128  ) ;  */
/* END FUNCTION-DECL __builtin_powf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN minherit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:244 */
extern int minherit(void * , size_t  , int  ) ;
/* END FUNCTION-DECL-EXTERN minherit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:244 */

/* BEGIN FUNCTION-DECL emit_sse_get_sign_mask LOC=UNKNOWN */
static unsigned char *emit_sse_get_sign_mask(void) ;
/* END FUNCTION-DECL emit_sse_get_sign_mask LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_get_stacksize_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:524 */
extern size_t __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  pthread_get_stacksize_np(pthread_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_get_stacksize_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:524 */

/* BEGIN FUNCTION-DECL __builtin_parityll LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_parityll(unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_parityll LOC=BUILTIN */

/* BEGIN FUNCTION-DECL _cipher$_xtea_encipher LOC=UNKNOWN */
void _cipher$_xtea_encipher(unsigned int block_no , unsigned int num_rounds , unsigned int *v ,
                            unsigned int *key , unsigned int size ) ;
/* END FUNCTION-DECL _cipher$_xtea_encipher LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN clock_gettime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:178 */
extern int __attribute__((__availability__(watchos,introduced=3.0), __availability__(tvos,introduced=10.0),
__availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12)))  clock_gettime(clockid_t __clock_id ,
                                                                                                  struct timespec *__tp ) ;
/* END FUNCTION-DECL-EXTERN clock_gettime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:178 */

/* BEGIN FUNCTION-DECL _OSSwapInt32 LOC=UNKNOWN */
__inline static __uint32_t _OSSwapInt32(__uint32_t _data ) ;
/* END FUNCTION-DECL _OSSwapInt32 LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_uuid_string_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:78 */
typedef char __darwin_uuid_string_t[37];
/* END TYPEDEF __darwin_uuid_string_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:78 */

/* BEGIN FUNCTION-DECL __builtin_expm1 LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_expm1(double  ) ;  */
/* END FUNCTION-DECL __builtin_expm1 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_memmove LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_memmove(void * , void const   * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_memmove LOC=BUILTIN */

/* BEGIN TYPEDEF rusage_info_current LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:321 */
typedef struct rusage_info_v4 rusage_info_current;
/* END TYPEDEF rusage_info_current LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:321 */

/* BEGIN FUNCTION-DECL __builtin_subcs LOC=BUILTIN */
/* compiler builtin: 
   short __builtin_subcs(unsigned short const    , unsigned short const    , unsigned short const    ,
                         unsigned short * ) ;  */
/* END FUNCTION-DECL __builtin_subcs LOC=BUILTIN */

/* BEGIN FUNCTION-DECL funcall_fput_arg LOC=UNKNOWN */
__inline static void funcall_fput_arg(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL funcall_fput_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_exec_mem_free LOC=UNKNOWN */
static void jit_exec_mem_free(struct jit_exec_mem *mem ) ;
/* END FUNCTION-DECL jit_exec_mem_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_data_bytes LOC=UNKNOWN */
jit_op *jit_data_bytes(struct jit *jit , jit_value count , unsigned char *data ) ;
/* END FUNCTION-DECL jit_data_bytes LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlock_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:441 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_destroy(pthread_rwlock_t * )  __asm__("_pthread_rwlock_destroy")  ;
/* END FUNCTION-DECL-EXTERN pthread_rwlock_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:441 */

/* BEGIN FUNCTION-DECL-EXTERN llabs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:152 */
extern long long llabs(long long  ) ;
/* END FUNCTION-DECL-EXTERN llabs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:152 */

/* BEGIN FUNCTION-DECL __builtin_is_aligned LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_is_aligned(void const   * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_is_aligned LOC=BUILTIN */

/* BEGIN STRUCT-DECL searchstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:770 */
struct searchstate ;
/* END STRUCT-DECL searchstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:770 */

/* BEGIN VARIABLE-DEF x05 LOC=UNKNOWN */
static double x05  ;
/* END VARIABLE-DEF x05 LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_tanf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_tanf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_tanf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN munmap LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:234 */
extern int munmap(void * , size_t  )  __asm__("_munmap")  ;
/* END FUNCTION-DECL-EXTERN munmap LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:234 */

/* BEGIN FUNCTION-DECL __builtin_nextafter LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_nextafter(double  , double  ) ;  */
/* END FUNCTION-DECL __builtin_nextafter LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_condattr_setpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:328 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_condattr_setpshared(pthread_condattr_t * ,
                                                                                                                                       int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_condattr_setpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:328 */

/* BEGIN FUNCTION-DECL __builtin_memchr LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_memchr(void const   * , int  , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_memchr LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_memset LOC=UNKNOWN */
static void emit_memset(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                        jit_value a3 , int block_size ) ;
/* END FUNCTION-DECL emit_memset LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_floorl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_floorl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_floorl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strncat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:83 */
extern char *strncat(char *__s1 , char const   *__s2 , size_t __n ) ;
/* END FUNCTION-DECL-EXTERN strncat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:83 */

/* BEGIN VARIABLE-DEF bufx LOC=UNKNOWN */
static unsigned char bufx[32]  ;
/* END VARIABLE-DEF bufx LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_check_code LOC=UNKNOWN */
void jit_check_code(struct jit *jit , int warnings ) ;
/* END FUNCTION-DECL jit_check_code LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_getname_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:510 */
extern int __attribute__((__availability__(ios,introduced=3.2), __availability__(macos,introduced=10.6)))  pthread_getname_np(pthread_t  ,
                                                                                                                              char * ,
                                                                                                                              size_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_getname_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:510 */

/* BEGIN FUNCTION-DECL platform_id LOC=UNKNOWN */
static char *platform_id(void) ;
/* END FUNCTION-DECL platform_id LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_getpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:407 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_getpshared(pthread_mutexattr_t const   * __restrict   ,
                                                                                                                                        int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_getpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:407 */

/* BEGIN FUNCTION-DECL __builtin_popcount LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_popcount(unsigned int  ) ;  */
/* END FUNCTION-DECL __builtin_popcount LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN lldiv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:153 */
extern lldiv_t lldiv(long long  , long long  ) ;
/* END FUNCTION-DECL-EXTERN lldiv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:153 */

/* BEGIN FUNCTION-DECL __builtin_varargs_start LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_varargs_start(__builtin_va_list  ) ;  */
/* END FUNCTION-DECL __builtin_varargs_start LOC=BUILTIN */

/* BEGIN FUNCTION-DECL valid_size LOC=UNKNOWN */
static int valid_size(int size ) ;
/* END FUNCTION-DECL valid_size LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_catanl LOC=BUILTIN */
/* compiler builtin: 
   _Complex long double __builtin_catanl(_Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_catanl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_powf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_powf(float  , float  ) ;  */
/* END FUNCTION-DECL __builtin_powf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL branch_adjustment LOC=UNKNOWN */
__inline static void branch_adjustment(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL branch_adjustment LOC=UNKNOWN */

/* BEGIN STRUCT jit_debug_info LOC=./jitter-Darwin-X86-64.c:770 */
struct jit_debug_info {
   char const   *filename ;
   char const   *function ;
   int lineno ;
   int warnings ;
};
/* END STRUCT jit_debug_info LOC=./jitter-Darwin-X86-64.c:770 */

/* BEGIN STRUCT __darwin_mcontext64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:105 */
struct __darwin_mcontext64_full {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_full_state64 __ss ;
   struct __darwin_x86_float_state64 __fs ;
};
/* END STRUCT __darwin_mcontext64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:105 */

/* BEGIN FUNCTION-DECL __builtin_nexttoward LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_nexttoward(double  , long double  ) ;  */
/* END FUNCTION-DECL __builtin_nexttoward LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_tanhl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_tanhl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_tanhl LOC=BUILTIN */

/* BEGIN UNION __anonunion_value_137411616 LOC=./jitter-Darwin-X86-64.c:694 */
union __anonunion_value_137411616 {
   jit_value generic ;
   double fp ;
   jit_label *label ;
};
/* END UNION __anonunion_value_137411616 LOC=./jitter-Darwin-X86-64.c:694 */

/* BEGIN FUNCTION-DECL __builtin_fmaf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_fmaf(float  , float  , float  ) ;  */
/* END FUNCTION-DECL __builtin_fmaf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_memset LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_memset(void * , int  , int  ) ;  */
/* END FUNCTION-DECL __builtin_memset LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_casinhl LOC=BUILTIN */
/* compiler builtin: 
   _Complex long double __builtin_casinhl(_Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_casinhl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_conjf LOC=BUILTIN */
/* compiler builtin: 
   _Complex float __builtin_conjf(_Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_conjf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_setjmp LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_setjmp(void ** ) ;  */
/* END FUNCTION-DECL __builtin_setjmp LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_add_fop LOC=UNKNOWN */
struct jit_op *jit_add_fop(struct jit *jit , unsigned short code , unsigned char spec ,
                           jit_value arg1 , jit_value arg2 , jit_value arg3 , double flt_imm ,
                           unsigned char arg_size , struct jit_debug_info *debug_info ) ;
/* END FUNCTION-DECL jit_add_fop LOC=UNKNOWN */

/* BEGIN TYPEDEF X86_SSE_CmpCode LOC=./jitter-Darwin-X86-64.c:1384 */
typedef enum __anonenum_X86_SSE_CmpCode_848838535 X86_SSE_CmpCode;
/* END TYPEDEF X86_SSE_CmpCode LOC=./jitter-Darwin-X86-64.c:1384 */

/* BEGIN FUNCTION-DECL-EXTERN cgetset LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:288 */
extern int cgetset(char const   * ) ;
/* END FUNCTION-DECL-EXTERN cgetset LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:288 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_getprioceiling LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:399 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_getprioceiling(pthread_mutexattr_t const   * __restrict   ,
                                                                                                                                            int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_getprioceiling LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:399 */

/* BEGIN FUNCTION-DECL-EXTERN __toupper LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:188 */
extern __darwin_ct_rune_t __toupper(__darwin_ct_rune_t  ) ;
/* END FUNCTION-DECL-EXTERN __toupper LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:188 */

/* BEGIN FUNCTION-DECL __builtin___memccpy_chk LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin___memccpy_chk(void * , void const   * , int  , unsigned long long  ,
                                 unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin___memccpy_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL ispunct LOC=UNKNOWN */
__inline int ispunct(int _c ) ;
/* END FUNCTION-DECL ispunct LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN symlinkat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:211 */
extern int symlinkat(char const   * , int  , char const   * )  __attribute__((__availability__(macosx,introduced=10.10))) ;
/* END FUNCTION-DECL-EXTERN symlinkat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:211 */

/* BEGIN FUNCTION-DECL _OSSwapInt64 LOC=UNKNOWN */
__inline static __uint64_t _OSSwapInt64(__uint64_t _data ) ;
/* END FUNCTION-DECL _OSSwapInt64 LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN gettimeofday LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:197 */
extern int gettimeofday(struct timeval * __restrict   , void * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN gettimeofday LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:197 */

/* BEGIN FUNCTION-DECL __builtin_atan LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_atan(double  ) ;  */
/* END FUNCTION-DECL __builtin_atan LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN devname_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:294 */
extern char *devname_r(dev_t  , mode_t  , char *buf , int len ) ;
/* END FUNCTION-DECL-EXTERN devname_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:294 */

/* BEGIN FUNCTION-DECL-EXTERN getgid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:452 */
extern gid_t getgid(void) ;
/* END FUNCTION-DECL-EXTERN getgid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:452 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_key_delete LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:369 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_key_delete(pthread_key_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_key_delete LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:369 */

/* BEGIN STRUCT jit_reg_allocator LOC=./jitter-Darwin-X86-64.c:667 */
struct jit_reg_allocator {
   int gp_reg_cnt ;
   int fp_reg_cnt ;
   int fp_reg ;
   int gp_arg_reg_cnt ;
   int fp_arg_reg_cnt ;
   jit_hw_reg *ret_reg ;
   jit_hw_reg *fpret_reg ;
   jit_hw_reg *gp_regs ;
   jit_hw_reg *fp_regs ;
   jit_hw_reg **gp_arg_regs ;
   jit_hw_reg **fp_arg_regs ;
   struct jit_func_info *current_func_info ;
};
/* END STRUCT jit_reg_allocator LOC=./jitter-Darwin-X86-64.c:667 */

/* BEGIN FUNCTION-DECL-EXTERN funopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:384 */
extern FILE *funopen(void const   * , int (* _Nullable  )(void * , char * , int  ) ,
                     int (* _Nullable  )(void * , char const   * , int  ) , fpos_t (* _Nullable  )(void * ,
                                                                                                   fpos_t  ,
                                                                                                   int  ) ,
                     int (* _Nullable  )(void * ) ) ;
/* END FUNCTION-DECL-EXTERN funopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:384 */

/* BEGIN FUNCTION-DECL rmap_is_associated LOC=UNKNOWN */
static jit_hw_reg *rmap_is_associated(jit_rmap *rmap , int reg_id , int fp , jit_value *virt_reg ) ;
/* END FUNCTION-DECL rmap_is_associated LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_hypot LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_hypot(double  , double  ) ;  */
/* END FUNCTION-DECL __builtin_hypot LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN cgetstr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:289 */
extern int cgetstr(char * , char const   * , char ** ) ;
/* END FUNCTION-DECL-EXTERN cgetstr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:289 */

/* BEGIN ENUM __anonenum_321777801 LOC=./jitter-Darwin-X86-64.c:1162 */
enum __anonenum_321777801 {
    X86_FPCW_INVOPEX_MASK = 1,
    X86_FPCW_DENOPEX_MASK = 2,
    X86_FPCW_ZERODIV_MASK = 4,
    X86_FPCW_OVFEX_MASK = 8,
    X86_FPCW_UNDFEX_MASK = 16,
    X86_FPCW_PRECEX_MASK = 32,
    X86_FPCW_PRECC_MASK = 768,
    X86_FPCW_ROUNDC_MASK = 3072,
    X86_FPCW_PREC_SINGLE = 0,
    X86_FPCW_PREC_DOUBLE = 512,
    X86_FPCW_PREC_EXTENDED = 768,
    X86_FPCW_ROUND_NEAREST = 0,
    X86_FPCW_ROUND_DOWN = 1024,
    X86_FPCW_ROUND_UP = 2048,
    X86_FPCW_ROUND_TOZERO = 3072
} ;
/* END ENUM __anonenum_321777801 LOC=./jitter-Darwin-X86-64.c:1162 */

/* BEGIN TYPEDEF caddr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_caddr_t.h:30 */
typedef char *caddr_t;
/* END TYPEDEF caddr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_caddr_t.h:30 */

/* BEGIN FUNCTION-DECL __builtin_powif LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_powif(float  , int  ) ;  */
/* END FUNCTION-DECL __builtin_powif LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strftime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:116 */
extern size_t strftime(char * __restrict   , size_t  , char const   * __restrict   ,
                       struct tm  const  * __restrict   )  __asm__("_strftime")  ;
/* END FUNCTION-DECL-EXTERN strftime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:116 */

/* BEGIN FUNCTION-DECL __wcwidth LOC=UNKNOWN */
__inline int __wcwidth(__darwin_ct_rune_t _c ) ;
/* END FUNCTION-DECL __wcwidth LOC=UNKNOWN */

/* BEGIN STRUCT timezone LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:129 */
struct timezone {
   int tz_minuteswest ;
   int tz_dsttime ;
};
/* END STRUCT timezone LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:129 */

/* BEGIN FUNCTION-DECL __builtin_scalblnf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_scalblnf(float  , long  ) ;  */
/* END FUNCTION-DECL __builtin_scalblnf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN setruid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:726 */
extern int setruid(uid_t  ) ;
/* END FUNCTION-DECL-EXTERN setruid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:726 */

/* BEGIN FUNCTION-DECL-EXTERN getpgid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:552 */
extern pid_t getpgid(pid_t  ) ;
/* END FUNCTION-DECL-EXTERN getpgid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:552 */

/* BEGIN FUNCTION-DECL-EXTERN getbsize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:295 */
extern char *getbsize(int * , long * ) ;
/* END FUNCTION-DECL-EXTERN getbsize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:295 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_is_threaded_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:503 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_is_threaded_np(void) ;
/* END FUNCTION-DECL-EXTERN pthread_is_threaded_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:503 */

/* BEGIN FUNCTION-DECL emit_sse_floor LOC=UNKNOWN */
static void emit_sse_floor(struct jit *jit , jit_value a1 , jit_value a2 , int floor ) ;
/* END FUNCTION-DECL emit_sse_floor LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_longjmp LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_longjmp(void ** , int  ) ;  */
/* END FUNCTION-DECL __builtin_longjmp LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN getppid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:461 */
extern pid_t getppid(void) ;
/* END FUNCTION-DECL-EXTERN getppid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:461 */

/* BEGIN FUNCTION-DECL-EXTERN renameat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/stdio.h:39 */
extern int renameat(int  , char const   * , int  , char const   * )  __attribute__((__availability__(macosx,introduced=10.10))) ;
/* END FUNCTION-DECL-EXTERN renameat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/stdio.h:39 */

/* BEGIN FUNCTION-DECL print_load_op LOC=UNKNOWN */
static int print_load_op(struct jit_disasm *disasm , struct output_buf *linebuf ,
                         jit_op *op ) ;
/* END FUNCTION-DECL print_load_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_frexp LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_frexp(double  , int * ) ;  */
/* END FUNCTION-DECL __builtin_frexp LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_bitreverse16 LOC=BUILTIN */
/* compiler builtin: 
   short __builtin_bitreverse16(short  ) ;  */
/* END FUNCTION-DECL __builtin_bitreverse16 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_subc LOC=BUILTIN */
/* compiler builtin: 
   unsigned int __builtin_subc(unsigned int const    , unsigned int const    , unsigned int const    ,
                               unsigned int * ) ;  */
/* END FUNCTION-DECL __builtin_subc LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_sqrtf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_sqrtf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_sqrtf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_exp2 LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_exp2(double  ) ;  */
/* END FUNCTION-DECL __builtin_exp2 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_rindex LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin_rindex(char const   * , int  ) ;  */
/* END FUNCTION-DECL __builtin_rindex LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_ldexpf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_ldexpf128(_Float128  , int  ) ;  */
/* END FUNCTION-DECL __builtin_ldexpf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_erff128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_erff128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_erff128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlockattr_getpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:467 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlockattr_getpshared(pthread_rwlockattr_t const   * __restrict   ,
                                                                                                                                         int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_rwlockattr_getpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:467 */

/* BEGIN FUNCTION-DECL rmap_sync_aux LOC=UNKNOWN */
static void rmap_sync_aux(jit_tree *current , jit_tree *target , jit_op *op , int mode ) ;
/* END FUNCTION-DECL rmap_sync_aux LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN mkstemp_dprotected_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:683 */
extern int mkstemp_dprotected_np(char *path , int dpclass , int dpflags )  __attribute__((__availability__(watchos,introduced=3.0),
__availability__(tvos,introduced=10.0), __availability__(ios,introduced=10.0), __availability__(macosx,unavailable))) ;
/* END FUNCTION-DECL-EXTERN mkstemp_dprotected_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:683 */

/* BEGIN FUNCTION-DECL __builtin_cprojl LOC=BUILTIN */
/* compiler builtin: 
   _Complex long double __builtin_cprojl(_Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_cprojl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strtoul LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:175 */
extern unsigned long strtoul(char const   *__str , char **__endptr , int __base ) ;
/* END FUNCTION-DECL-EXTERN strtoul LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:175 */

/* BEGIN FUNCTION-DECL-EXTERN strcoll LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:78 */
extern int strcoll(char const   *__s1 , char const   *__s2 ) ;
/* END FUNCTION-DECL-EXTERN strcoll LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:78 */

/* BEGIN FUNCTION-DECL-EXTERN popen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:232 */
extern FILE *popen(char const   * , char const   * )  __asm__("_popen") __attribute__((__availability__(swift,unavailable,message="Use posix_spawn APIs or NSTask instead."))) ;
/* END FUNCTION-DECL-EXTERN popen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:232 */

/* BEGIN FUNCTION-DECL __builtin_exp LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_exp(double  ) ;  */
/* END FUNCTION-DECL __builtin_exp LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN mktemp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:216 */
extern char *mktemp(char * ) ;
/* END FUNCTION-DECL-EXTERN mktemp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:216 */

/* BEGIN FUNCTION-DECL-EXTERN nrand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:219 */
extern long nrand48(unsigned short * )  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
/* END FUNCTION-DECL-EXTERN nrand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:219 */

/* BEGIN FUNCTION-DECL print_str LOC=UNKNOWN */
__inline static void print_str(struct output_buf *buf , char *str ) ;
/* END FUNCTION-DECL print_str LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_cimagl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_cimagl(_Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_cimagl LOC=BUILTIN */

/* BEGIN VARIABLE-DECL x86_cc_unsigned_map LOC=UNKNOWN */
static unsigned char x86_cc_unsigned_map[12] ;
/* END VARIABLE-DECL x86_cc_unsigned_map LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL print_reg_liveness_callback LOC=UNKNOWN */
static void print_reg_liveness_callback(jit_tree_key key , jit_tree_value value ,
                                        void *disasm ) ;
/* END FUNCTION-DECL print_reg_liveness_callback LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_umull_overflow LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_umull_overflow(unsigned long const    , unsigned long const    ,
                                  unsigned long * ) ;  */
/* END FUNCTION-DECL __builtin_umull_overflow LOC=BUILTIN */

/* BEGIN FUNCTION-DECL uses_hw_reg LOC=UNKNOWN */
static int uses_hw_reg(struct jit_op *op , jit_value reg , int fp ) ;
/* END FUNCTION-DECL uses_hw_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_tree_free LOC=UNKNOWN */
static void jit_tree_free(jit_tree *h ) ;
/* END FUNCTION-DECL jit_tree_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL rmap_equal LOC=UNKNOWN */
static int rmap_equal(jit_op *op , jit_rmap *current , jit_rmap *target ) ;
/* END FUNCTION-DECL rmap_equal LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_socklen_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:118 */
typedef __uint32_t __darwin_socklen_t;
/* END TYPEDEF __darwin_socklen_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:118 */

/* BEGIN FUNCTION-DECL emit_ureg LOC=UNKNOWN */
static void emit_ureg(struct jit *jit , jit_value vreg , int hreg_id ) ;
/* END FUNCTION-DECL emit_ureg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL stack_fparg_pos LOC=UNKNOWN */
__inline static int stack_fparg_pos(struct jit *jit , struct jit_func_info *info ,
                                    int arg ) ;
/* END FUNCTION-DECL stack_fparg_pos LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_is_label LOC=UNKNOWN */
__inline static int jit_is_label(struct jit *jit , void *ptr ) ;
/* END FUNCTION-DECL jit_is_label LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL emit_restore_all_regs LOC=UNKNOWN */
static void emit_restore_all_regs(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_restore_all_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_signbitl LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_signbitl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_signbitl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_malloc LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_malloc(unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_malloc LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_asinhf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_asinhf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_asinhf128 LOC=BUILTIN */

/* BEGIN VARIABLE-DECL-EXTERN __stdoutp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:68 */
extern FILE *__stdoutp ;
/* END VARIABLE-DECL-EXTERN __stdoutp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:68 */

/* BEGIN TYPEDEF sig_atomic_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/signal.h:39 */
typedef int sig_atomic_t;
/* END TYPEDEF sig_atomic_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/signal.h:39 */

/* BEGIN FUNCTION-DECL __builtin___fprintf_chk LOC=BUILTIN */
/* compiler builtin: 
   int __builtin___fprintf_chk(void * , int  , char const   *  , ...) ;  */
/* END FUNCTION-DECL __builtin___fprintf_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_bswap16 LOC=BUILTIN */
/* compiler builtin: 
   short __builtin_bswap16(short  ) ;  */
/* END FUNCTION-DECL __builtin_bswap16 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_generate_code LOC=UNKNOWN */
void jit_generate_code(struct jit *jit ) ;
/* END FUNCTION-DECL jit_generate_code LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL ishexnumber LOC=UNKNOWN */
__inline int ishexnumber(int _c ) ;
/* END FUNCTION-DECL ishexnumber LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN memset_pattern8 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:157 */
extern void memset_pattern8(void *__b , void const   *__pattern8 , size_t __len )  __attribute__((__availability__(macosx,introduced=10.5))) ;
/* END FUNCTION-DECL-EXTERN memset_pattern8 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:157 */

/* BEGIN FUNCTION-DECL __builtin_isnormal LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_isnormal(...) ;  */
/* END FUNCTION-DECL __builtin_isnormal LOC=BUILTIN */

/* BEGIN VARIABLE-DECL _TIG_iE_HQIz_1_alwaysZero LOC=UNKNOWN */
unsigned long _TIG_iE_HQIz_1_alwaysZero ;
/* END VARIABLE-DECL _TIG_iE_HQIz_1_alwaysZero LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN write LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:496 */
extern ssize_t write(int __fd , void const   *__buf , size_t __nbyte )  __asm__("_write")  ;
/* END FUNCTION-DECL-EXTERN write LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:496 */

/* BEGIN FUNCTION-DECL-EXTERN _Exit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:198 */
extern  __attribute__((__noreturn__)) void _Exit(int  ) ;
/* END FUNCTION-DECL-EXTERN _Exit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:198 */

/* BEGIN TYPEDEF uuid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uuid_t.h:31 */
typedef __darwin_uuid_t uuid_t;
/* END TYPEDEF uuid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uuid_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN sethostname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:717 */
extern int sethostname(char const   * , int  ) ;
/* END FUNCTION-DECL-EXTERN sethostname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:717 */

/* BEGIN FUNCTION-DECL __builtin_cacos LOC=BUILTIN */
/* compiler builtin: 
   _Complex double __builtin_cacos(_Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_cacos LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strsignal LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:134 */
extern char *strsignal(int __sig ) ;
/* END FUNCTION-DECL-EXTERN strsignal LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:134 */

/* BEGIN FUNCTION-DECL __builtin_sub_overflow LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_sub_overflow(...) ;  */
/* END FUNCTION-DECL __builtin_sub_overflow LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_once LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:438 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4),
__availability__(swift,unavailable,message="Use lazily initialized globals instead")))  pthread_once(pthread_once_t * ,
                                                                                                     void (* _Nonnull  )(void) ) ;
/* END FUNCTION-DECL-EXTERN pthread_once LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:438 */

/* BEGIN FUNCTION-DECL-EXTERN srand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:244 */
extern void srand48(long  ) ;
/* END FUNCTION-DECL-EXTERN srand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:244 */

/* BEGIN FUNCTION-DECL __builtin_llroundf128 LOC=BUILTIN */
/* compiler builtin: 
   long long __builtin_llroundf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_llroundf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL print_arg LOC=UNKNOWN */
__inline static void print_arg(struct jit_disasm *disasm , struct output_buf *buf ,
                               struct jit_op *op , int arg ) ;
/* END FUNCTION-DECL print_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_powi LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_powi(double  , int  ) ;  */
/* END FUNCTION-DECL __builtin_powi LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_log2l LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_log2l(long double  ) ;  */
/* END FUNCTION-DECL __builtin_log2l LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN initgroups LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:665 */
extern int initgroups(char const   * , int  ) ;
/* END FUNCTION-DECL-EXTERN initgroups LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:665 */

/* BEGIN FUNCTION-DECL __builtin_expect LOC=BUILTIN */
/* compiler builtin: 
   long __builtin_expect(long  , long  ) ;  */
/* END FUNCTION-DECL __builtin_expect LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_ilogb LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_ilogb(double  ) ;  */
/* END FUNCTION-DECL __builtin_ilogb LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN ttyname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:486 */
extern char *ttyname(int  ) ;
/* END FUNCTION-DECL-EXTERN ttyname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:486 */

/* BEGIN VARIABLE-DECL _TIG_iO_HQIz_2_init_tigress_1_opaque_ptr_1 LOC=UNKNOWN */
struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct *_TIG_iO_HQIz_2_init_tigress_1_opaque_ptr_1 ;
/* END VARIABLE-DECL _TIG_iO_HQIz_2_init_tigress_1_opaque_ptr_1 LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN rresvport LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:708 */
extern  __attribute__((__deprecated__)) int rresvport(int * ) ;
/* END FUNCTION-DECL-EXTERN rresvport LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:708 */

/* BEGIN VARIABLE-DECL-EXTERN sys_nerr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:367 */
extern int const   sys_nerr ;
/* END VARIABLE-DECL-EXTERN sys_nerr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:367 */

/* BEGIN TYPEDEF uintmax_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uintmax_t.h:32 */
typedef unsigned long uintmax_t;
/* END TYPEDEF uintmax_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uintmax_t.h:32 */

/* BEGIN TYPEDEF AMD64_REX_Bits LOC=./jitter-Darwin-X86-64.c:1053 */
typedef enum __anonenum_AMD64_REX_Bits_69261688 AMD64_REX_Bits;
/* END TYPEDEF AMD64_REX_Bits LOC=./jitter-Darwin-X86-64.c:1053 */

/* BEGIN FUNCTION-DECL-EXTERN time2posix LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:136 */
extern time_t time2posix(time_t  ) ;
/* END FUNCTION-DECL-EXTERN time2posix LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:136 */

/* BEGIN FUNCTION-DECL __builtin_coshf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_coshf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_coshf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_va_arg_pack_len LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_va_arg_pack_len(void) ;  */
/* END FUNCTION-DECL __builtin_va_arg_pack_len LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_dwarf_sp_column LOC=BUILTIN */
/* compiler builtin: 
   unsigned int __builtin_dwarf_sp_column(void) ;  */
/* END FUNCTION-DECL __builtin_dwarf_sp_column LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN linkat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:209 */
extern int linkat(int  , char const   * , int  , char const   * , int  )  __attribute__((__availability__(macosx,introduced=10.10))) ;
/* END FUNCTION-DECL-EXTERN linkat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:209 */

/* BEGIN FUNCTION-DECL __builtin_uaddl_overflow LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_uaddl_overflow(unsigned long const    , unsigned long const    ,
                                  unsigned long * ) ;  */
/* END FUNCTION-DECL __builtin_uaddl_overflow LOC=BUILTIN */

/* BEGIN TYPEDEF ino64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ino64_t.h:31 */
typedef __darwin_ino64_t ino64_t;
/* END TYPEDEF ino64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ino64_t.h:31 */

/* BEGIN FUNCTION-DECL __builtin_ilogbf128 LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_ilogbf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_ilogbf128 LOC=BUILTIN */

/* BEGIN TYPEDEF __darwin_fp_control_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:117 */
typedef struct __darwin_fp_control __darwin_fp_control_t;
/* END TYPEDEF __darwin_fp_control_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:117 */

/* BEGIN FUNCTION-DECL-EXTERN fputc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:156 */
extern int fputc(int  , FILE * ) ;
/* END FUNCTION-DECL-EXTERN fputc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:156 */

/* BEGIN FUNCTION-DECL __builtin_ccoshf LOC=BUILTIN */
/* compiler builtin: 
   _Complex float __builtin_ccoshf(_Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_ccoshf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_message LOC=UNKNOWN */
void jit_message(struct jit *j , char *s ) ;
/* END FUNCTION-DECL jit_message LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_assume LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_assume(_Bool  ) ;  */
/* END FUNCTION-DECL __builtin_assume LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_cargf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_cargf(_Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_cargf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin___printf_chk LOC=BUILTIN */
/* compiler builtin: 
   int __builtin___printf_chk(int  , char const   *  , ...) ;  */
/* END FUNCTION-DECL __builtin___printf_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_cosf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_cosf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_cosf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN psort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:323 */
extern void psort(void *__base , size_t __nel , size_t __width , int (* _Nonnull  __compar)(void const   * ,
                                                                                            void const   * ) )  __attribute__((__availability__(macosx,introduced=10.6))) ;
/* END FUNCTION-DECL-EXTERN psort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:323 */

/* BEGIN FUNCTION-DECL jit_set_add LOC=UNKNOWN */
__inline static void jit_set_add(jit_set *s , int value ) ;
/* END FUNCTION-DECL jit_set_add LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN symlink LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:626 */
extern int symlink(char const   * , char const   * ) ;
/* END FUNCTION-DECL-EXTERN symlink LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:626 */

/* BEGIN FUNCTION-DECL-EXTERN setattrlistat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:189 */
extern int setattrlistat(int  , char const   * , void * , void * , size_t  , uint32_t  )  __attribute__((__availability__(watchos,introduced=4.0),
__availability__(tvos,introduced=11.0), __availability__(ios,introduced=11.0), __availability__(macosx,introduced=10.13))) ;
/* END FUNCTION-DECL-EXTERN setattrlistat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:189 */

/* BEGIN FUNCTION-DECL __builtin_logbl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_logbl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_logbl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_acosl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_acosl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_acosl LOC=BUILTIN */

/* BEGIN STRUCT accessx_descriptor LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:132 */
struct accessx_descriptor {
   unsigned int ad_name_offset ;
   int ad_flags ;
   int ad_pad[2] ;
};
/* END STRUCT accessx_descriptor LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:132 */

/* BEGIN ENUM __anonenum_X86_SSE_Opcode_853888746 LOC=./jitter-Darwin-X86-64.c:1240 */
enum __anonenum_X86_SSE_Opcode_853888746 {
    X86_SSE_SQRT = 81,
    X86_SSE_RSQRT = 82,
    X86_SSE_RCP = 83,
    X86_SSE_ADD = 88,
    X86_SSE_DIV = 94,
    X86_SSE_MUL = 89,
    X86_SSE_SUB = 92,
    X86_SSE_MIN = 93,
    X86_SSE_MAX = 95,
    X86_SSE_COMP = 194,
    X86_SSE_AND = 84,
    X86_SSE_ANDN = 85,
    X86_SSE_OR = 86,
    X86_SSE_XOR = 87,
    X86_SSE_UNPCKL = 20,
    X86_SSE_UNPCKH = 21,
    X86_SSE_ADDSUB = 208,
    X86_SSE_HADD = 124,
    X86_SSE_HSUB = 125,
    X86_SSE_MOVSHDUP = 22,
    X86_SSE_MOVSLDUP = 18,
    X86_SSE_MOVDDUP = 18,
    X86_SSE_SHUF = 198,
    X86_SSE_COMI = 47,
    X86_SSE_PAND = 219,
    X86_SSE_POR = 235,
    X86_SSE_PXOR = 239,
    X86_SSE_PADDB = 252,
    X86_SSE_PADDW = 253,
    X86_SSE_PADDD = 254,
    X86_SSE_PADDQ = 212,
    X86_SSE_PSUBB = 248,
    X86_SSE_PSUBW = 249,
    X86_SSE_PSUBD = 250,
    X86_SSE_PSUBQ = 251,
    X86_SSE_PMAXSB = 60,
    X86_SSE_PMAXSW = 238,
    X86_SSE_PMAXSD = 61,
    X86_SSE_PMAXUB = 222,
    X86_SSE_PMAXUW = 62,
    X86_SSE_PMAXUD = 63,
    X86_SSE_PMINSB = 56,
    X86_SSE_PMINSW = 234,
    X86_SSE_PMINSD = 57,
    X86_SSE_PMINUB = 218,
    X86_SSE_PMINUW = 58,
    X86_SSE_PMINUD = 59,
    X86_SSE_PAVGB = 224,
    X86_SSE_PAVGW = 227,
    X86_SSE_PCMPEQB = 116,
    X86_SSE_PCMPEQW = 117,
    X86_SSE_PCMPEQD = 118,
    X86_SSE_PCMPEQQ = 41,
    X86_SSE_PCMPGTB = 100,
    X86_SSE_PCMPGTW = 101,
    X86_SSE_PCMPGTD = 102,
    X86_SSE_PCMPGTQ = 55,
    X86_SSE_PSADBW = 246,
    X86_SSE_PSHUFD = 112,
    X86_SSE_PUNPCKLBW = 96,
    X86_SSE_PUNPCKLWD = 97,
    X86_SSE_PUNPCKLDQ = 98,
    X86_SSE_PUNPCKLQDQ = 108,
    X86_SSE_PUNPCKHBW = 104,
    X86_SSE_PUNPCKHWD = 105,
    X86_SSE_PUNPCKHDQ = 106,
    X86_SSE_PUNPCKHQDQ = 109,
    X86_SSE_PACKSSWB = 99,
    X86_SSE_PACKSSDW = 107,
    X86_SSE_PACKUSWB = 103,
    X86_SSE_PACKUSDW = 43,
    X86_SSE_PADDUSB = 220,
    X86_SSE_PADDUSW = 221,
    X86_SSE_PSUBUSB = 216,
    X86_SSE_PSUBUSW = 217,
    X86_SSE_PADDSB = 236,
    X86_SSE_PADDSW = 237,
    X86_SSE_PSUBSB = 232,
    X86_SSE_PSUBSW = 233,
    X86_SSE_PMULLW = 213,
    X86_SSE_PMULLD = 64,
    X86_SSE_PMULHUW = 228,
    X86_SSE_PMULHW = 229,
    X86_SSE_PMULUDQ = 244,
    X86_SSE_PMOVMSKB = 215,
    X86_SSE_PSHIFTW = 113,
    X86_SSE_PSHIFTD = 114,
    X86_SSE_PSHIFTQ = 115,
    X86_SSE_SHR = 2,
    X86_SSE_SAR = 4,
    X86_SSE_SHL = 6,
    X86_SSE_PSRLW_REG = 209,
    X86_SSE_PSRAW_REG = 225,
    X86_SSE_PSLLW_REG = 241,
    X86_SSE_PSRLD_REG = 210,
    X86_SSE_PSRAD_REG = 226,
    X86_SSE_PSLLD_REG = 242,
    X86_SSE_PSRLQ_REG = 211,
    X86_SSE_PSLLQ_REG = 243,
    X86_SSE_PREFETCH = 24,
    X86_SSE_MOVNTPS = 43,
    X86_SSE_MOVHPD_REG_MEMBASE = 22,
    X86_SSE_MOVHPD_MEMBASE_REG = 23,
    X86_SSE_MOVSD_REG_MEMBASE = 16,
    X86_SSE_MOVSD_MEMBASE_REG = 17,
    X86_SSE_PINSRB = 32,
    X86_SSE_PINSRW = 196,
    X86_SSE_PINSRD = 34,
    X86_SSE_PEXTRB = 20,
    X86_SSE_PEXTRW = 197,
    X86_SSE_PEXTRD = 22
} ;
/* END ENUM __anonenum_X86_SSE_Opcode_853888746 LOC=./jitter-Darwin-X86-64.c:1240 */

/* BEGIN FUNCTION-DECL-EXTERN getpagesize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:558 */
extern int getpagesize(void)  __attribute__((__const__)) ;
/* END FUNCTION-DECL-EXTERN getpagesize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:558 */

/* BEGIN FUNCTION-DECL __builtin_sinhf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_sinhf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_sinhf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN qsort_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:339 */
extern void qsort_r(void *__base , size_t __nel , size_t __width , void * , int (* _Nonnull  __compar)(void * ,
                                                                                                       void const   * ,
                                                                                                       void const   * ) ) ;
/* END FUNCTION-DECL-EXTERN qsort_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:339 */

/* BEGIN FUNCTION-DECL __builtin_types_compatible_p LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_types_compatible_p(unsigned long long  , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_types_compatible_p LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_op_is_cflow LOC=UNKNOWN */
__inline static int jit_op_is_cflow(jit_op *op ) ;
/* END FUNCTION-DECL jit_op_is_cflow LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_setpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:428 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_setpshared(pthread_mutexattr_t * ,
                                                                                                                                        int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_setpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:428 */

/* BEGIN FUNCTION-DECL-EXTERN add_profil LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:645 */
extern int add_profil(char * , size_t  , unsigned long  , unsigned int  )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN add_profil LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:645 */

/* BEGIN FUNCTION-DECL-EXTERN dprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:352 */
extern int ( /* format attribute */  dprintf)(int  , char const   * __restrict   
                                              , ...)  __attribute__((__availability__(macosx,introduced=10.7))) ;
/* END FUNCTION-DECL-EXTERN dprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:352 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_setstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:281 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setstack(pthread_attr_t * ,
                                                                                                                                 void * ,
                                                                                                                                 size_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_setstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:281 */

/* BEGIN FUNCTION-DECL __builtin_va_copy LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_va_copy(__builtin_va_list  , __builtin_va_list  ) ;  */
/* END FUNCTION-DECL __builtin_va_copy LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_bitreverse32 LOC=BUILTIN */
/* compiler builtin: 
   unsigned int __builtin_bitreverse32(unsigned int  ) ;  */
/* END FUNCTION-DECL __builtin_bitreverse32 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_memcpy LOC=UNKNOWN */
static void emit_memcpy(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                        jit_value a3 ) ;
/* END FUNCTION-DECL emit_memcpy LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_buf_expand LOC=UNKNOWN */
__inline static void jit_buf_expand(struct jit *jit ) ;
/* END FUNCTION-DECL jit_buf_expand LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_print_tree LOC=UNKNOWN */
__inline static void jit_print_tree(jit_tree *h , int level ) ;
/* END FUNCTION-DECL jit_print_tree LOC=UNKNOWN */

/* BEGIN VARIABLE-DECL-EXTERN suboptarg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:356 */
extern char *suboptarg ;
/* END VARIABLE-DECL-EXTERN suboptarg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:356 */

/* BEGIN FUNCTION-DECL __builtin___strlcpy_chk LOC=BUILTIN */
/* compiler builtin: 
   unsigned long long __builtin___strlcpy_chk(char * , char const   * , unsigned long long  ,
                                              unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin___strlcpy_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN asctime_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:125 */
extern char *asctime_r(struct tm  const  * __restrict   , char * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN asctime_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:125 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_setinheritsched LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:268 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setinheritsched(pthread_attr_t * ,
                                                                                                                                        int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_setinheritsched LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:268 */

/* BEGIN FUNCTION-DECL __builtin_logbf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_logbf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_logbf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN rename LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:175 */
extern int rename(char const   *__old , char const   *__new ) ;
/* END FUNCTION-DECL-EXTERN rename LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:175 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutex_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:379 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_init(pthread_mutex_t * __restrict   ,
                                                                                                                              pthread_mutexattr_t const   * _Nullable __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutex_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:379 */

/* BEGIN FUNCTION-DECL jit_gen_op LOC=UNKNOWN */
void jit_gen_op(struct jit *jit , struct jit_op *op ) ;
/* END FUNCTION-DECL jit_gen_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL assign_ret_reg LOC=UNKNOWN */
static int assign_ret_reg(jit_op *op , jit_hw_reg *ret_reg ) ;
/* END FUNCTION-DECL assign_ret_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN setregid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:593 */
extern int setregid(gid_t  , gid_t  )  __asm__("_setregid")  ;
/* END FUNCTION-DECL-EXTERN setregid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:593 */

/* BEGIN STRUCT __siginfo LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:177 */
struct __siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   pid_t si_pid ;
   uid_t si_uid ;
   int si_status ;
   void *si_addr ;
   union sigval si_value ;
   long si_band ;
   unsigned long __pad[7] ;
};
/* END STRUCT __siginfo LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:177 */

/* BEGIN FUNCTION-DECL __builtin_trap LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_trap(void) ;  */
/* END FUNCTION-DECL __builtin_trap LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin___strcpy_chk LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin___strcpy_chk(char * , char const   * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin___strcpy_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL rename_reg LOC=UNKNOWN */
static void rename_reg(jit_op *op , int r1 , int r2 ) ;
/* END FUNCTION-DECL rename_reg LOC=UNKNOWN */

/* BEGIN TYPEDEF uint_fast8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:44 */
typedef uint8_t uint_fast8_t;
/* END TYPEDEF uint_fast8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:44 */

/* BEGIN TYPEDEF user_off_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:103 */
typedef int64_t user_off_t;
/* END TYPEDEF user_off_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:103 */

/* BEGIN FUNCTION-DECL-EXTERN __svfscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:250 */
extern int ( /* format attribute */  __svfscanf)(FILE * , char const   * , va_list  ) ;
/* END FUNCTION-DECL-EXTERN __svfscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:250 */

/* BEGIN FUNCTION-DECL __builtin_sqrtf16 LOC=BUILTIN */
/* compiler builtin: 
   _Float16 __builtin_sqrtf16(_Float16  ) ;  */
/* END FUNCTION-DECL __builtin_sqrtf16 LOC=BUILTIN */

/* BEGIN STRUCT jit_tree LOC=./jitter-Darwin-X86-64.c:336 */
struct jit_tree {
   struct jit_tree *left ;
   struct jit_tree *right ;
   int color ;
   jit_tree_key key ;
   jit_tree_value value ;
};
/* END STRUCT jit_tree LOC=./jitter-Darwin-X86-64.c:336 */

/* BEGIN STRUCT __sigaction LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:276 */
struct __sigaction {
   union __sigaction_u __sigaction_u ;
   void (*sa_tramp)(void * , int  , int  , siginfo_t * , void * ) ;
   sigset_t sa_mask ;
   int sa_flags ;
};
/* END STRUCT __sigaction LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:276 */

/* BEGIN FUNCTION-DECL __builtin_log2f LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_log2f(float  ) ;  */
/* END FUNCTION-DECL __builtin_log2f LOC=BUILTIN */

/* BEGIN FUNCTION-DECL isgraph LOC=UNKNOWN */
__inline int isgraph(int _c ) ;
/* END FUNCTION-DECL isgraph LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN putw LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:297 */
extern int putw(int  , FILE * ) ;
/* END FUNCTION-DECL-EXTERN putw LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:297 */

/* BEGIN FUNCTION-DECL __builtin_remquol LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_remquol(long double  , long double  , int * ) ;  */
/* END FUNCTION-DECL __builtin_remquol LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_cprojf LOC=BUILTIN */
/* compiler builtin: 
   _Complex float __builtin_cprojf(_Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_cprojf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __darwin_fd_set LOC=UNKNOWN */
__inline void ( __attribute__((__always_inline__)) __darwin_fd_set)(int _fd , struct fd_set *_p ) ;
/* END FUNCTION-DECL __darwin_fd_set LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_dump_ops_compilable LOC=UNKNOWN */
static void jit_dump_ops_compilable(struct jit *jit , jit_tree *labels ) ;
/* END FUNCTION-DECL jit_dump_ops_compilable LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL pow2 LOC=UNKNOWN */
__inline static int pow2(int arg ) ;
/* END FUNCTION-DECL pow2 LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL is_red LOC=UNKNOWN */
__inline static int is_red(jit_tree *n ) ;
/* END FUNCTION-DECL is_red LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN mkostemps LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:679 */
extern int mkostemps(char *path , int slen , int oflags )  __attribute__((__availability__(watchos,introduced=3.0),
__availability__(tvos,introduced=10.0), __availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12))) ;
/* END FUNCTION-DECL-EXTERN mkostemps LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:679 */

/* BEGIN STRUCT __darwin_mcontext_avx512_64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:130 */
struct __darwin_mcontext_avx512_64 {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_state64 __ss ;
   struct __darwin_x86_avx512_state64 __fs ;
};
/* END STRUCT __darwin_mcontext_avx512_64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:130 */

/* BEGIN FUNCTION-DECL __builtin_matrix_column_major_store LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_matrix_column_major_store(...) ;  */
/* END FUNCTION-DECL __builtin_matrix_column_major_store LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN fprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:155 */
extern int ( /* format attribute */  fprintf)(FILE * __restrict   , char const   * __restrict   
                                              , ...) ;
/* END FUNCTION-DECL-EXTERN fprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:155 */

/* BEGIN FUNCTION-DECL jit_tree_size LOC=UNKNOWN */
static int jit_tree_size(jit_tree *h ) ;
/* END FUNCTION-DECL jit_tree_size LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin___snprintf_chk LOC=BUILTIN */
/* compiler builtin: 
   int __builtin___snprintf_chk(char * , unsigned long long  , int  , unsigned long long  ,
                                char const   *  , ...) ;  */
/* END FUNCTION-DECL __builtin___snprintf_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_popcountl LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_popcountl(unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_popcountl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_logbf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_logbf(float  ) ;  */
/* END FUNCTION-DECL __builtin_logbf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pathconf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:466 */
extern long pathconf(char const   * , int  ) ;
/* END FUNCTION-DECL-EXTERN pathconf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:466 */

/* BEGIN FUNCTION-DECL __sputc LOC=UNKNOWN */
__inline int ( __attribute__((__always_inline__)) __sputc)(int _c , FILE *_p ) ;
/* END FUNCTION-DECL __sputc LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_parity LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_parity(unsigned int  ) ;  */
/* END FUNCTION-DECL __builtin_parity LOC=BUILTIN */

/* BEGIN FUNCTION-DECL check_code_references LOC=UNKNOWN */
static int check_code_references(jit_op *op , char *msg_buf ) ;
/* END FUNCTION-DECL check_code_references LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN close LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:437 */
extern int close(int  )  __asm__("_close")  ;
/* END FUNCTION-DECL-EXTERN close LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:437 */

/* BEGIN FUNCTION-DECL-EXTERN strtod LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:165 */
extern double strtod(char const   * , char ** )  __asm__("_strtod")  ;
/* END FUNCTION-DECL-EXTERN strtod LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:165 */

/* BEGIN FUNCTION-DECL __builtin_cosl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_cosl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_cosl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_log2 LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_log2(double  ) ;  */
/* END FUNCTION-DECL __builtin_log2 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_save_all_regs LOC=UNKNOWN */
static void emit_save_all_regs(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_save_all_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_rintf16 LOC=BUILTIN */
/* compiler builtin: 
   _Float16 __builtin_rintf16(_Float16  ) ;  */
/* END FUNCTION-DECL __builtin_rintf16 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_expect_with_probability LOC=BUILTIN */
/* compiler builtin: 
   long __builtin_expect_with_probability(long  , long  , double  ) ;  */
/* END FUNCTION-DECL __builtin_expect_with_probability LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_setcanceltype LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:484 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_setcanceltype(int  ,
                                                                                                                                 int * _Nullable   )  __asm__("_pthread_setcanceltype")  ;
/* END FUNCTION-DECL-EXTERN pthread_setcanceltype LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:484 */

/* BEGIN FUNCTION-DECL __builtin_logb LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_logb(double  ) ;  */
/* END FUNCTION-DECL __builtin_logb LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN unwhiteout LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:734 */
extern int unwhiteout(char const   * ) ;
/* END FUNCTION-DECL-EXTERN unwhiteout LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:734 */

/* BEGIN FUNCTION-DECL-EXTERN timingsafe_bcmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:172 */
extern int __attribute__((__availability__(watchos,introduced=3.1), __availability__(tvos,introduced=10.0.1),
__availability__(ios,introduced=10.1), __availability__(macosx,introduced=10.12.1)))  timingsafe_bcmp(void const   *__b1 ,
                                                                                                      void const   *__b2 ,
                                                                                                      size_t __len ) ;
/* END FUNCTION-DECL-EXTERN timingsafe_bcmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:172 */

/* BEGIN FUNCTION-DECL isspecial LOC=UNKNOWN */
__inline int isspecial(int _c ) ;
/* END FUNCTION-DECL isspecial LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN tcsetpgrp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:485 */
extern int tcsetpgrp(int  , pid_t  ) ;
/* END FUNCTION-DECL-EXTERN tcsetpgrp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:485 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_setname_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:513 */
extern int __attribute__((__availability__(ios,introduced=3.2), __availability__(macos,introduced=10.6)))  pthread_setname_np(char const   * ) ;
/* END FUNCTION-DECL-EXTERN pthread_setname_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:513 */

/* BEGIN FUNCTION-DECL-EXTERN strtoq LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:352 */
extern long long strtoq(char const   *__str , char **__endptr , int __base ) ;
/* END FUNCTION-DECL-EXTERN strtoq LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:352 */

/* BEGIN FUNCTION-DECL jit_add_op LOC=UNKNOWN */
struct jit_op *jit_add_op(struct jit *jit , unsigned short code , unsigned char spec ,
                          jit_value arg1 , jit_value arg2 , jit_value arg3 , unsigned char arg_size ,
                          struct jit_debug_info *debug_info ) ;
/* END FUNCTION-DECL jit_add_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_inff LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_inff(void) ;  */
/* END FUNCTION-DECL __builtin_inff LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_setspecific LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:494 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_setspecific(pthread_key_t  ,
                                                                                                                               void const   * _Nullable   ) ;
/* END FUNCTION-DECL-EXTERN pthread_setspecific LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:494 */

/* BEGIN FUNCTION-DECL-EXTERN dup2 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:440 */
extern int dup2(int  , int  ) ;
/* END FUNCTION-DECL-EXTERN dup2 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:440 */

/* BEGIN FUNCTION-DECL-EXTERN unsetenv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:252 */
extern int unsetenv(char const   * )  __asm__("_unsetenv")  ;
/* END FUNCTION-DECL-EXTERN unsetenv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:252 */

/* BEGIN FUNCTION-DECL emit_fppush_arg LOC=UNKNOWN */
__inline static void emit_fppush_arg(struct jit *jit , struct jit_out_arg *arg ) ;
/* END FUNCTION-DECL emit_fppush_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN setgroups LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:715 */
extern int setgroups(int  , gid_t const   * ) ;
/* END FUNCTION-DECL-EXTERN setgroups LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:715 */

/* BEGIN FUNCTION-DECL-EXTERN link LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:464 */
extern int link(char const   * , char const   * ) ;
/* END FUNCTION-DECL-EXTERN link LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:464 */

/* BEGIN FUNCTION-DECL-EXTERN revoke LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:703 */
extern int revoke(char const   * ) ;
/* END FUNCTION-DECL-EXTERN revoke LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:703 */

/* BEGIN FUNCTION-DECL-EXTERN lchown LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:567 */
extern int lchown(char const   * , uid_t  , gid_t  )  __asm__("_lchown")  ;
/* END FUNCTION-DECL-EXTERN lchown LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:567 */

/* BEGIN FUNCTION-DECL-EXTERN heapsort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:309 */
extern int heapsort(void *__base , size_t __nel , size_t __width , int (* _Nonnull  __compar)(void const   * ,
                                                                                              void const   * ) ) ;
/* END FUNCTION-DECL-EXTERN heapsort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:309 */

/* BEGIN FUNCTION-DECL __builtin_remquo LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_remquo(double  , double  , int * ) ;  */
/* END FUNCTION-DECL __builtin_remquo LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_stpncpy LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin_stpncpy(char * , char const   * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_stpncpy LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_addcs LOC=BUILTIN */
/* compiler builtin: 
   short __builtin_addcs(unsigned short const    , unsigned short const    , unsigned short const    ,
                         unsigned short * ) ;  */
/* END FUNCTION-DECL __builtin_addcs LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN wcstombs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:194 */
extern size_t wcstombs(char * __restrict   , wchar_t const   * __restrict   , size_t  ) ;
/* END FUNCTION-DECL-EXTERN wcstombs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:194 */

/* BEGIN TYPEDEF rlim_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:89 */
typedef __uint64_t rlim_t;
/* END TYPEDEF rlim_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:89 */

/* BEGIN FUNCTION-DECL flw_analyze_op LOC=UNKNOWN */
__inline static int flw_analyze_op(struct jit *jit , jit_op *op , struct jit_func_info *func_info ,
                                   int changed , struct code_refs_cache *code_refs ) ;
/* END FUNCTION-DECL flw_analyze_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN memset_pattern16 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:158 */
extern void memset_pattern16(void *__b , void const   *__pattern16 , size_t __len )  __attribute__((__availability__(macosx,introduced=10.5))) ;
/* END FUNCTION-DECL-EXTERN memset_pattern16 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:158 */

/* BEGIN FUNCTION-DECL __builtin_copysignf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_copysignf(float  , float  ) ;  */
/* END FUNCTION-DECL __builtin_copysignf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN mbstowcs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:157 */
extern size_t mbstowcs(wchar_t * __restrict   , char const   * __restrict   , size_t  ) ;
/* END FUNCTION-DECL-EXTERN mbstowcs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:157 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_detach LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:343 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_detach(pthread_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_detach LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:343 */

/* BEGIN FUNCTION-DECL print_op LOC=UNKNOWN */
int print_op(FILE *f , struct jit_disasm *disasm , struct jit_op *op , jit_tree *labels ,
             int verbosity ) ;
/* END FUNCTION-DECL print_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN ptsname_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:224 */
extern int ptsname_r(int fildes , char *buffer , size_t buflen )  __attribute__((__availability__(watchos,introduced=4.3),
__availability__(tvos,introduced=11.3), __availability__(ios,introduced=11.3), __availability__(macos,introduced=10.13.4))) ;
/* END FUNCTION-DECL-EXTERN ptsname_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:224 */

/* BEGIN FUNCTION-DECL jit_op_last_fun LOC=UNKNOWN */
__inline static jit_op *jit_op_last_fun(jit_op *op ) ;
/* END FUNCTION-DECL jit_op_last_fun LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_nl_item LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types.h:40 */
typedef int __darwin_nl_item;
/* END TYPEDEF __darwin_nl_item LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types.h:40 */

/* BEGIN FUNCTION-DECL __builtin_lrintf LOC=BUILTIN */
/* compiler builtin: 
   long __builtin_lrintf(float  ) ;  */
/* END FUNCTION-DECL __builtin_lrintf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_expf16 LOC=BUILTIN */
/* compiler builtin: 
   _Float16 __builtin_expf16(_Float16  ) ;  */
/* END FUNCTION-DECL __builtin_expf16 LOC=BUILTIN */

/* BEGIN STRUCT __darwin_mcontext_avx32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:47 */
struct __darwin_mcontext_avx32 {
   struct __darwin_i386_exception_state __es ;
   struct __darwin_i386_thread_state __ss ;
   struct __darwin_i386_avx_state __fs ;
};
/* END STRUCT __darwin_mcontext_avx32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:47 */

/* BEGIN TYPEDEF in_port_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_in_port_t.h:31 */
typedef __uint16_t in_port_t;
/* END TYPEDEF in_port_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_in_port_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN zopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:378 */
extern FILE *zopen(char const   * , char const   * , int  ) ;
/* END FUNCTION-DECL-EXTERN zopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:378 */

/* BEGIN FUNCTION-DECL __builtin_csinhf LOC=BUILTIN */
/* compiler builtin: 
   _Complex float __builtin_csinhf(_Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_csinhf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin___strncpy_chk LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin___strncpy_chk(char * , char const   * , unsigned long long  , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin___strncpy_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_value_align LOC=UNKNOWN */
__inline static jit_value jit_value_align(jit_value value , jit_value alignment ) ;
/* END FUNCTION-DECL jit_value_align LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_fp_status_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:167 */
typedef struct __darwin_fp_status __darwin_fp_status_t;
/* END TYPEDEF __darwin_fp_status_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:167 */

/* BEGIN FUNCTION-DECL-EXTERN strsep LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:165 */
extern char *strsep(char **__stringp , char const   *__delim ) ;
/* END FUNCTION-DECL-EXTERN strsep LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:165 */

/* BEGIN TYPEDEF user_time_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:102 */
typedef int64_t user_time_t;
/* END TYPEDEF user_time_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:102 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_setschedparam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:271 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setschedparam(pthread_attr_t * __restrict   ,
                                                                                                                                      struct sched_param  const  * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_setschedparam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:271 */

/* BEGIN FUNCTION-DECL-EXTERN readlinkat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:210 */
extern ssize_t readlinkat(int  , char const   * , char * , size_t  )  __attribute__((__availability__(macosx,introduced=10.10))) ;
/* END FUNCTION-DECL-EXTERN readlinkat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:210 */

/* BEGIN TYPEDEF X86_SSE_Opcode LOC=./jitter-Darwin-X86-64.c:1240 */
typedef enum __anonenum_X86_SSE_Opcode_853888746 X86_SSE_Opcode;
/* END TYPEDEF X86_SSE_Opcode LOC=./jitter-Darwin-X86-64.c:1240 */

/* BEGIN STRUCT jit_out_arg LOC=./jitter-Darwin-X86-64.c:694 */
struct jit_out_arg {
   union __anonunion_value_137411616 value ;
   int argpos ;
   char isreg ;
   char isref ;
   char isfp ;
   char size ;
   char isoptional ;
};
/* END STRUCT jit_out_arg LOC=./jitter-Darwin-X86-64.c:694 */

/* BEGIN FUNCTION-DECL-EXTERN l64a LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:213 */
extern char *l64a(long  ) ;
/* END FUNCTION-DECL-EXTERN l64a LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:213 */

/* BEGIN FUNCTION-DECL-EXTERN fork LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:447 */
extern pid_t fork(void)  __attribute__((__availability__(tvos,unavailable), __availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN fork LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:447 */

/* BEGIN STRUCT rusage_info_v2 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:229 */
struct rusage_info_v2 {
   uint8_t ri_uuid[16] ;
   uint64_t ri_user_time ;
   uint64_t ri_system_time ;
   uint64_t ri_pkg_idle_wkups ;
   uint64_t ri_interrupt_wkups ;
   uint64_t ri_pageins ;
   uint64_t ri_wired_size ;
   uint64_t ri_resident_size ;
   uint64_t ri_phys_footprint ;
   uint64_t ri_proc_start_abstime ;
   uint64_t ri_proc_exit_abstime ;
   uint64_t ri_child_user_time ;
   uint64_t ri_child_system_time ;
   uint64_t ri_child_pkg_idle_wkups ;
   uint64_t ri_child_interrupt_wkups ;
   uint64_t ri_child_pageins ;
   uint64_t ri_child_elapsed_abstime ;
   uint64_t ri_diskio_bytesread ;
   uint64_t ri_diskio_byteswritten ;
};
/* END STRUCT rusage_info_v2 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:229 */

/* BEGIN STRUCT fd_set LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h:50 */
struct fd_set {
   __int32_t fds_bits[1024ULL / (sizeof(__int32_t ) * 8ULL)] ;
};
/* END STRUCT fd_set LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h:50 */

/* BEGIN FUNCTION-DECL __builtin_operator_delete LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_operator_delete(void * ) ;  */
/* END FUNCTION-DECL __builtin_operator_delete LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_nontemporal_load LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_nontemporal_load(...) ;  */
/* END FUNCTION-DECL __builtin_nontemporal_load LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN setuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:478 */
extern int setuid(uid_t  ) ;
/* END FUNCTION-DECL-EXTERN setuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:478 */

/* BEGIN FUNCTION-DECL __builtin_isinf LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_isinf(...) ;  */
/* END FUNCTION-DECL __builtin_isinf LOC=BUILTIN */

/* BEGIN STRUCT __anonstruct_w_S_529377835 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */
struct __anonstruct_w_S_529377835 {
   unsigned int w_Stopval : 8 ;
   unsigned int w_Stopsig : 8 ;
   unsigned int w_Filler : 16 ;
};
/* END STRUCT __anonstruct_w_S_529377835 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */

/* BEGIN UNION wait LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */
union wait {
   int w_status ;
   struct __anonstruct_w_T_529377834 w_T ;
   struct __anonstruct_w_S_529377835 w_S ;
};
/* END UNION wait LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */

/* BEGIN TYPEDEF uint LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:92 */
typedef unsigned int uint;
/* END TYPEDEF uint LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:92 */

/* BEGIN FUNCTION-DECL-EXTERN ttyslot LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:732 */
extern int ttyslot(void) ;
/* END FUNCTION-DECL-EXTERN ttyslot LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:732 */

/* BEGIN FUNCTION-DECL emit_sse_change_sign LOC=UNKNOWN */
static void emit_sse_change_sign(struct jit *jit , jit_op *op , int reg ) ;
/* END FUNCTION-DECL emit_sse_change_sign LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_clogf LOC=BUILTIN */
/* compiler builtin: 
   _Complex float __builtin_clogf(_Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_clogf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_round LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_round(double  ) ;  */
/* END FUNCTION-DECL __builtin_round LOC=BUILTIN */

/* BEGIN STRUCT __anonstruct_lldiv_t_86583852 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:94 */
struct __anonstruct_lldiv_t_86583852 {
   long long quot ;
   long long rem ;
};
/* END STRUCT __anonstruct_lldiv_t_86583852 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:94 */

/* BEGIN FUNCTION-DECL emit_transfer_init LOC=UNKNOWN */
static void emit_transfer_init(struct jit *jit , jit_op *op , jit_value destreg ,
                               jit_value srcreg , jit_value cnt , int block_size ) ;
/* END FUNCTION-DECL emit_transfer_init LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_tgammal LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_tgammal(long double  ) ;  */
/* END FUNCTION-DECL __builtin_tgammal LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_clogl LOC=BUILTIN */
/* compiler builtin: 
   _Complex long double __builtin_clogl(_Complex long double  ) ;  */
/* END FUNCTION-DECL __builtin_clogl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_prepare_spills_on_jmpr_targets LOC=UNKNOWN */
__inline static void jit_prepare_spills_on_jmpr_targets(struct jit *jit ) ;
/* END FUNCTION-DECL jit_prepare_spills_on_jmpr_targets LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_getschedparam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:238 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getschedparam(pthread_attr_t const   * __restrict   ,
                                                                                                                                      struct sched_param * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_getschedparam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:238 */

/* BEGIN VARIABLE-DECL-EXTERN getdate_err LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:101 */
extern int getdate_err ;
/* END VARIABLE-DECL-EXTERN getdate_err LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:101 */

/* BEGIN FUNCTION-DECL-EXTERN asprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:370 */
extern int ( /* format attribute */  asprintf)(char ** __restrict   , char const   * __restrict   
                                               , ...) ;
/* END FUNCTION-DECL-EXTERN asprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:370 */

/* BEGIN FUNCTION-DECL flw_analyze_prolog LOC=UNKNOWN */
__inline static void flw_analyze_prolog(struct jit *jit , jit_op *op , struct jit_func_info *func_info ) ;
/* END FUNCTION-DECL flw_analyze_prolog LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN getegid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:450 */
extern gid_t getegid(void) ;
/* END FUNCTION-DECL-EXTERN getegid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:450 */

/* BEGIN FUNCTION-DECL-EXTERN qos_class_main LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/qos.h:194 */
extern qos_class_t __attribute__((__availability__(macos,introduced=10.10), __availability__(ios,introduced=8.0)))  qos_class_main(void) ;
/* END FUNCTION-DECL-EXTERN qos_class_main LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/qos.h:194 */

/* BEGIN FUNCTION-DECL __builtin_crealf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_crealf(_Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_crealf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_frob_return_address LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_frob_return_address(void * ) ;  */
/* END FUNCTION-DECL __builtin_frob_return_address LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_csqrtf LOC=BUILTIN */
/* compiler builtin: 
   _Complex float __builtin_csqrtf(_Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_csqrtf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN localtime_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:128 */
extern struct tm *localtime_r(time_t const   * __restrict   , struct tm * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN localtime_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:128 */

/* BEGIN FUNCTION-DECL __builtin_isunordered LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_isunordered(...) ;  */
/* END FUNCTION-DECL __builtin_isunordered LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_reg_allocator_free LOC=UNKNOWN */
void jit_reg_allocator_free(struct jit_reg_allocator *a ) ;
/* END FUNCTION-DECL jit_reg_allocator_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin___strncat_chk LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin___strncat_chk(char * , char const   * , unsigned long long  , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin___strncat_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_op_append LOC=UNKNOWN */
__inline static void jit_op_append(jit_op *op , jit_op *appended ) ;
/* END FUNCTION-DECL jit_op_append LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pause LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:468 */
extern int pause(void)  __asm__("_pause")  ;
/* END FUNCTION-DECL-EXTERN pause LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:468 */

/* BEGIN FUNCTION-DECL-EXTERN grantpt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:206 */
extern int grantpt(int  ) ;
/* END FUNCTION-DECL-EXTERN grantpt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:206 */

/* BEGIN FUNCTION-DECL-EXTERN confstr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:507 */
extern size_t confstr(int  , char * , size_t  )  __asm__("_confstr")  ;
/* END FUNCTION-DECL-EXTERN confstr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:507 */

/* BEGIN FUNCTION-DECL emit_transfer_op LOC=UNKNOWN */
static void emit_transfer_op(struct jit *jit , jit_op *op , int alu_op ) ;
/* END FUNCTION-DECL emit_transfer_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_vsnprintf LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_vsnprintf(char * , unsigned long long  , char const   * , __builtin_va_list  ) ;  */
/* END FUNCTION-DECL __builtin_vsnprintf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_nexttowardl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_nexttowardl(long double  , long double  ) ;  */
/* END FUNCTION-DECL __builtin_nexttowardl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL spill_all_registers LOC=UNKNOWN */
static int spill_all_registers(jit_op *op , struct jit_reg_allocator *al ) ;
/* END FUNCTION-DECL spill_all_registers LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL check_register_types LOC=UNKNOWN */
static int check_register_types(struct jit *jit , jit_op *op , char *msg_buf ) ;
/* END FUNCTION-DECL check_register_types LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_get_unused_reg LOC=UNKNOWN */
jit_hw_reg *jit_get_unused_reg(struct jit_reg_allocator *al , jit_op *op , int fp ) ;
/* END FUNCTION-DECL jit_get_unused_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN setlogin LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:723 */
extern int setlogin(char const   * ) ;
/* END FUNCTION-DECL-EXTERN setlogin LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:723 */

/* BEGIN FUNCTION-DECL __builtin_expm1f LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_expm1f(float  ) ;  */
/* END FUNCTION-DECL __builtin_expm1f LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_messager LOC=UNKNOWN */
void jit_messager(struct jit *j , char *s , int i ) ;
/* END FUNCTION-DECL jit_messager LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN jrand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:212 */
extern long jrand48(unsigned short * )  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
/* END FUNCTION-DECL-EXTERN jrand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:212 */

/* BEGIN FUNCTION-DECL __builtin_cproj LOC=BUILTIN */
/* compiler builtin: 
   _Complex double __builtin_cproj(_Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_cproj LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_nanl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_nanl(char const   * ) ;  */
/* END FUNCTION-DECL __builtin_nanl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_umulll_overflow LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_umulll_overflow(unsigned long long const    , unsigned long long const    ,
                                   unsigned long long * ) ;  */
/* END FUNCTION-DECL __builtin_umulll_overflow LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_ctanh LOC=BUILTIN */
/* compiler builtin: 
   _Complex double __builtin_ctanh(_Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_ctanh LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN vfscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:335 */
extern int ( /* format attribute */  vfscanf)(FILE * __restrict  __stream , char const   * __restrict  __format ,
                                              va_list  ) ;
/* END FUNCTION-DECL-EXTERN vfscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:335 */

/* BEGIN FUNCTION-DECL-EXTERN getitimer LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:196 */
extern int getitimer(int  , struct itimerval * ) ;
/* END FUNCTION-DECL-EXTERN getitimer LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:196 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_equal LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:346 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_equal(pthread_t __attribute__((__nullable__))   ,
                                                                                                                         pthread_t __attribute__((__nullable__))   ) ;
/* END FUNCTION-DECL-EXTERN pthread_equal LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:346 */

/* BEGIN FUNCTION-DECL-EXTERN srand LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:164 */
extern void srand(unsigned int  )  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
/* END FUNCTION-DECL-EXTERN srand LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:164 */

/* BEGIN FUNCTION-DECL __builtin_catan LOC=BUILTIN */
/* compiler builtin: 
   _Complex double __builtin_catan(_Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_catan LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_erfcf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_erfcf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_erfcf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL mark_calleesaved_regs LOC=UNKNOWN */
static void mark_calleesaved_regs(jit_tree *hint , jit_op *op ) ;
/* END FUNCTION-DECL mark_calleesaved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN cgetnext LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:286 */
extern int cgetnext(char ** , char ** ) ;
/* END FUNCTION-DECL-EXTERN cgetnext LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:286 */

/* BEGIN FUNCTION-DECL __builtin_casin LOC=BUILTIN */
/* compiler builtin: 
   _Complex double __builtin_casin(_Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_casin LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_llrint LOC=BUILTIN */
/* compiler builtin: 
   long long __builtin_llrint(double  ) ;  */
/* END FUNCTION-DECL __builtin_llrint LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_sinf16 LOC=BUILTIN */
/* compiler builtin: 
   _Float16 __builtin_sinf16(_Float16  ) ;  */
/* END FUNCTION-DECL __builtin_sinf16 LOC=BUILTIN */

/* BEGIN TYPEDEF jit_disasm LOC=./jitter-Darwin-X86-64.c:4031 */
typedef struct jit_disasm jit_disasm;
/* END TYPEDEF jit_disasm LOC=./jitter-Darwin-X86-64.c:4031 */

/* BEGIN FUNCTION-DECL __builtin_log1pl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_log1pl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_log1pl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN fclose LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:143 */
extern int fclose(FILE * ) ;
/* END FUNCTION-DECL-EXTERN fclose LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:143 */

/* BEGIN FUNCTION-DECL __builtin_align_down LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_align_down(void const   * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_align_down LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_strndup LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin_strndup(char const   * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_strndup LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strchr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:76 */
extern char *strchr(char const   *__s , int __c ) ;
/* END FUNCTION-DECL-EXTERN strchr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:76 */

/* BEGIN FUNCTION-DECL-EXTERN msync LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:230 */
extern int msync(void * , size_t  , int  )  __asm__("_msync")  ;
/* END FUNCTION-DECL-EXTERN msync LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:230 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutex_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:372 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_destroy(pthread_mutex_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutex_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:372 */

/* BEGIN FUNCTION-DECL-EXTERN setrgid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:725 */
extern int setrgid(gid_t  ) ;
/* END FUNCTION-DECL-EXTERN setrgid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:725 */

/* BEGIN STRUCT jit_label LOC=./jitter-Darwin-X86-64.c:92 */
struct jit_label {
   size_t pos ;
   jit_op *op ;
   struct jit_label *next ;
};
/* END STRUCT jit_label LOC=./jitter-Darwin-X86-64.c:92 */

/* BEGIN FUNCTION-DECL __builtin_strcasecmp LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_strcasecmp(char const   * , char const   * ) ;  */
/* END FUNCTION-DECL __builtin_strcasecmp LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_saddl_overflow LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_saddl_overflow(long const    , long const    , long * ) ;  */
/* END FUNCTION-DECL __builtin_saddl_overflow LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_get_stackaddr_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:527 */
extern void __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  *pthread_get_stackaddr_np(pthread_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_get_stackaddr_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:527 */

/* BEGIN FUNCTION-DECL-EXTERN swapon LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:731 */
extern int swapon(char const   * ) ;
/* END FUNCTION-DECL-EXTERN swapon LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:731 */

/* BEGIN FUNCTION-DECL-EXTERN __vsnprintf_chk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_stdio.h:70 */
extern int __vsnprintf_chk(char * __restrict   , size_t  , int  , size_t  , char const   * __restrict   ,
                           va_list  ) ;
/* END FUNCTION-DECL-EXTERN __vsnprintf_chk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_stdio.h:70 */

/* BEGIN FUNCTION-DECL-EXTERN open_memstream LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:357 */
extern FILE *open_memstream(char **__bufp , size_t *__sizep )  __attribute__((__availability__(watchos,introduced=4.0),
__availability__(tvos,introduced=11.0), __availability__(ios,introduced=11.0), __availability__(macos,introduced=10.13))) ;
/* END FUNCTION-DECL-EXTERN open_memstream LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:357 */

/* BEGIN TYPEDEF ct_rune_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ct_rune_t.h:32 */
typedef __darwin_ct_rune_t ct_rune_t;
/* END TYPEDEF ct_rune_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ct_rune_t.h:32 */

/* BEGIN FUNCTION-DECL DUMP_int LOC=UNKNOWN */
void DUMP_int(int block , struct jit *jit , struct jit_op *begin_ , struct jit_op *end_ ) ;
/* END FUNCTION-DECL DUMP_int LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_cexpf LOC=BUILTIN */
/* compiler builtin: 
   _Complex float __builtin_cexpf(_Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_cexpf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN getrlimit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:449 */
extern int getrlimit(int  , struct rlimit * )  __asm__("_getrlimit")  ;
/* END FUNCTION-DECL-EXTERN getrlimit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:449 */

/* BEGIN FUNCTION-DECL-EXTERN qsort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:160 */
extern void qsort(void *__base , size_t __nel , size_t __width , int (* _Nonnull  __compar)(void const   * ,
                                                                                            void const   * ) ) ;
/* END FUNCTION-DECL-EXTERN qsort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:160 */

/* BEGIN FUNCTION-DECL __builtin___mempcpy_chk LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin___mempcpy_chk(void * , void const   * , unsigned long long  , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin___mempcpy_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN dup LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:439 */
extern int dup(int  ) ;
/* END FUNCTION-DECL-EXTERN dup LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:439 */

/* BEGIN FUNCTION-DECL __builtin___memcpy_chk LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin___memcpy_chk(void * , void const   * , unsigned long long  , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin___memcpy_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL sse_mov_reg_safeimm LOC=UNKNOWN */
static void sse_mov_reg_safeimm(struct jit *jit , jit_op *op , jit_value reg , double *imm ) ;
/* END FUNCTION-DECL sse_mov_reg_safeimm LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_cacoshf LOC=BUILTIN */
/* compiler builtin: 
   _Complex float __builtin_cacoshf(_Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_cacoshf LOC=BUILTIN */

/* BEGIN STRUCT __darwin_mcontext_avx512_32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:56 */
struct __darwin_mcontext_avx512_32 {
   struct __darwin_i386_exception_state __es ;
   struct __darwin_i386_thread_state __ss ;
   struct __darwin_i386_avx512_state __fs ;
};
/* END STRUCT __darwin_mcontext_avx512_32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:56 */

/* BEGIN FUNCTION-DECL-EXTERN getpgrp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:459 */
extern pid_t getpgrp(void) ;
/* END FUNCTION-DECL-EXTERN getpgrp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:459 */

/* BEGIN FUNCTION-DECL-EXTERN strtol LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:167 */
extern long strtol(char const   *__str , char **__endptr , int __base ) ;
/* END FUNCTION-DECL-EXTERN strtol LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:167 */

/* BEGIN FUNCTION-DECL __builtin_fmaxf16 LOC=BUILTIN */
/* compiler builtin: 
   _Float16 __builtin_fmaxf16(_Float16  , _Float16  ) ;  */
/* END FUNCTION-DECL __builtin_fmaxf16 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_tanf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_tanf(float  ) ;  */
/* END FUNCTION-DECL __builtin_tanf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_acoshf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_acoshf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_acoshf128 LOC=BUILTIN */

/* BEGIN TYPEDEF mcontext_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:204 */
typedef struct __darwin_mcontext64 *mcontext_t;
/* END TYPEDEF mcontext_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:204 */

/* BEGIN FUNCTION-DECL __builtin_rotateleft8 LOC=BUILTIN */
/* compiler builtin: 
   unsigned char __builtin_rotateleft8(unsigned char  , unsigned char  ) ;  */
/* END FUNCTION-DECL __builtin_rotateleft8 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_unpredictable LOC=BUILTIN */
/* compiler builtin: 
   long __builtin_unpredictable(long  ) ;  */
/* END FUNCTION-DECL __builtin_unpredictable LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_islessequal LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_islessequal(...) ;  */
/* END FUNCTION-DECL __builtin_islessequal LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strerror LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:81 */
extern char *strerror(int __errnum )  __asm__("_strerror")  ;
/* END FUNCTION-DECL-EXTERN strerror LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:81 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_getugid_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:700 */
extern int pthread_getugid_np(uid_t * , gid_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_getugid_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:700 */

/* BEGIN FUNCTION-DECL __builtin_creal LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_creal(_Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_creal LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_llrintl LOC=BUILTIN */
/* compiler builtin: 
   long long __builtin_llrintl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_llrintl LOC=BUILTIN */

/* BEGIN TYPEDEF int_least16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:30 */
typedef int16_t int_least16_t;
/* END TYPEDEF int_least16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:30 */

/* BEGIN UNION __anonunion___mbstate_t_250061491 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:76 */
union __anonunion___mbstate_t_250061491 {
   char __mbstate8[128] ;
   long long _mbstateL ;
};
/* END UNION __anonunion___mbstate_t_250061491 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:76 */

/* BEGIN FUNCTION-DECL-EXTERN readlink LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:623 */
extern ssize_t readlink(char const   * __restrict   , char * __restrict   , size_t  ) ;
/* END FUNCTION-DECL-EXTERN readlink LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:623 */

/* BEGIN FUNCTION-DECL assign_getarg LOC=UNKNOWN */
static int assign_getarg(jit_op *op , struct jit_reg_allocator *al ) ;
/* END FUNCTION-DECL assign_getarg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_rotateleft64 LOC=BUILTIN */
/* compiler builtin: 
   unsigned long __builtin_rotateleft64(unsigned long  , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_rotateleft64 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN ffsll LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:86 */
extern int ffsll(long long  )  __attribute__((__availability__(macosx,introduced=10.9))) ;
/* END FUNCTION-DECL-EXTERN ffsll LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:86 */

/* BEGIN FUNCTION-DECL __builtin_atanf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_atanf(float  ) ;  */
/* END FUNCTION-DECL __builtin_atanf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN sync_volume_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:780 */
extern int sync_volume_np(char const   * , int  )  __attribute__((__availability__(macosx,introduced=10.8))) ;
/* END FUNCTION-DECL-EXTERN sync_volume_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:780 */

/* BEGIN FUNCTION-DECL-EXTERN ruserok LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:712 */
extern  __attribute__((__deprecated__)) int ruserok(char const   * , int  , char const   * ,
                                                    char const   * ) ;
/* END FUNCTION-DECL-EXTERN ruserok LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:712 */

/* BEGIN TYPEDEF X86_Shift_Opcode LOC=./jitter-Darwin-X86-64.c:1107 */
typedef enum __anonenum_X86_Shift_Opcode_820104407 X86_Shift_Opcode;
/* END TYPEDEF X86_Shift_Opcode LOC=./jitter-Darwin-X86-64.c:1107 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_getdetachstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:229 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getdetachstate(pthread_attr_t const   * ,
                                                                                                                                       int * ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_getdetachstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:229 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_setcancelstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:480 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_setcancelstate(int  ,
                                                                                                                                  int * _Nullable   )  __asm__("_pthread_setcancelstate")  ;
/* END FUNCTION-DECL-EXTERN pthread_setcancelstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:480 */

/* BEGIN FUNCTION-DECL __builtin_align_up LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_align_up(void const   * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_align_up LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_pop_callee_saved_regs LOC=UNKNOWN */
static int emit_pop_callee_saved_regs(struct jit *jit ) ;
/* END FUNCTION-DECL emit_pop_callee_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN ftell LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:164 */
extern long ftell(FILE * ) ;
/* END FUNCTION-DECL-EXTERN ftell LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:164 */

/* BEGIN FUNCTION-DECL __builtin_calloc LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_calloc(unsigned long long  , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_calloc LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strrchr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:87 */
extern char *strrchr(char const   *__s , int __c ) ;
/* END FUNCTION-DECL-EXTERN strrchr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:87 */

/* BEGIN FUNCTION-DECL __builtin_scalbnl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_scalbnl(long double  , int  ) ;  */
/* END FUNCTION-DECL __builtin_scalbnl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_lroundl LOC=BUILTIN */
/* compiler builtin: 
   long __builtin_lroundl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_lroundl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN freopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:159 */
extern FILE *freopen(char const   * __restrict   , char const   * __restrict   , FILE * __restrict   )  __asm__("_freopen")  ;
/* END FUNCTION-DECL-EXTERN freopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:159 */

/* BEGIN FUNCTION-DECL-EXTERN ffsl LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:85 */
extern int ffsl(long  )  __attribute__((__availability__(macosx,introduced=10.5))) ;
/* END FUNCTION-DECL-EXTERN ffsl LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:85 */

/* BEGIN FUNCTION-DECL __builtin_ceilf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_ceilf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_ceilf128 LOC=BUILTIN */

/* BEGIN STRUCT jit_func_info LOC=./jitter-Darwin-X86-64.c:720 */
struct jit_func_info {
   int general_arg_cnt ;
   int float_arg_cnt ;
   long allocai_mem ;
   int arg_capacity ;
   struct jit_inp_arg *args ;
   int gp_reg_count ;
   int fp_reg_count ;
   int has_prolog ;
   struct jit_op *first_op ;
};
/* END STRUCT jit_func_info LOC=./jitter-Darwin-X86-64.c:720 */

/* BEGIN FUNCTION-DECL __builtin_cexp LOC=BUILTIN */
/* compiler builtin: 
   _Complex double __builtin_cexp(_Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_cexp LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_expm1f128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_expm1f128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_expm1f128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL join_addr_addi LOC=UNKNOWN */
static int join_addr_addi(jit_op *op , jit_op *nextop ) ;
/* END FUNCTION-DECL join_addr_addi LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN gethostuuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/gethostuuid.h:39 */
extern int gethostuuid(unsigned char * , struct timespec  const  * )  __attribute__((__availability__(macosx,introduced=10.5))) ;
/* END FUNCTION-DECL-EXTERN gethostuuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/gethostuuid.h:39 */

/* BEGIN FUNCTION-DECL print_op_compilable LOC=UNKNOWN */
int print_op_compilable(struct jit_disasm *disasm , struct jit_op *op , jit_tree *labels ) ;
/* END FUNCTION-DECL print_op_compilable LOC=UNKNOWN */

/* BEGIN STRUCT __anonstruct_jit_hw_reg_312769258 LOC=./jitter-Darwin-X86-64.c:659 */
struct __anonstruct_jit_hw_reg_312769258 {
   int id ;
   char *name ;
   char callee_saved ;
   char fp ;
   short priority ;
};
/* END STRUCT __anonstruct_jit_hw_reg_312769258 LOC=./jitter-Darwin-X86-64.c:659 */

/* BEGIN FUNCTION-DECL __builtin_ceil LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_ceil(double  ) ;  */
/* END FUNCTION-DECL __builtin_ceil LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_allocai LOC=UNKNOWN */
int jit_allocai(struct jit *jit , int size ) ;
/* END FUNCTION-DECL jit_allocai LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN seed48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:236 */
extern unsigned short *seed48(unsigned short * ) ;
/* END FUNCTION-DECL-EXTERN seed48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:236 */

/* BEGIN FUNCTION-DECL-EXTERN vdprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:353 */
extern int ( /* format attribute */  vdprintf)(int  , char const   * __restrict   ,
                                               va_list  )  __attribute__((__availability__(macosx,introduced=10.7))) ;
/* END FUNCTION-DECL-EXTERN vdprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:353 */

/* BEGIN ENUM __anonenum_X86_FP_Opcode_1068131184 LOC=./jitter-Darwin-X86-64.c:1122 */
enum __anonenum_X86_FP_Opcode_1068131184 {
    X86_FADD = 0,
    X86_FMUL = 1,
    X86_FCOM = 2,
    X86_FCOMP = 3,
    X86_FSUB = 4,
    X86_FSUBR = 5,
    X86_FDIV = 6,
    X86_FDIVR = 7,
    X86_NFP = 8
} ;
/* END ENUM __anonenum_X86_FP_Opcode_1068131184 LOC=./jitter-Darwin-X86-64.c:1122 */

/* BEGIN FUNCTION-DECL-EXTERN fgets LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:149 */
extern char *fgets(char * __restrict   , int  , FILE * ) ;
/* END FUNCTION-DECL-EXTERN fgets LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:149 */

/* BEGIN TYPEDEF user_long_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:100 */
typedef int64_t user_long_t;
/* END TYPEDEF user_long_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:100 */

/* BEGIN FUNCTION-DECL ob_assert_space LOC=UNKNOWN */
static void ob_assert_space(struct output_buf *ob , int len ) ;
/* END FUNCTION-DECL ob_assert_space LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_frame_address LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_frame_address(unsigned int  ) ;  */
/* END FUNCTION-DECL __builtin_frame_address LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_call_with_static_chain LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_call_with_static_chain(...) ;  */
/* END FUNCTION-DECL __builtin_call_with_static_chain LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_nextafterl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_nextafterl(long double  , long double  ) ;  */
/* END FUNCTION-DECL __builtin_nextafterl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strdup LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:117 */
extern char *strdup(char const   *__s1 ) ;
/* END FUNCTION-DECL-EXTERN strdup LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:117 */

/* BEGIN FUNCTION-DECL join_muli_ori LOC=UNKNOWN */
static int join_muli_ori(jit_op *op , jit_op *nextop ) ;
/* END FUNCTION-DECL join_muli_ori LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_atanl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_atanl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_atanl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN seteuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:625 */
extern int seteuid(uid_t  ) ;
/* END FUNCTION-DECL-EXTERN seteuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:625 */

/* BEGIN VARIABLE-DECL-EXTERN sys_errlist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:368 */
extern char const   *sys_errlist[] ;
/* END VARIABLE-DECL-EXTERN sys_errlist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:368 */

/* BEGIN FUNCTION-DECL __builtin_ldexpl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_ldexpl(long double  , int  ) ;  */
/* END FUNCTION-DECL __builtin_ldexpl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_fdiml LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_fdiml(long double  , long double  ) ;  */
/* END FUNCTION-DECL __builtin_fdiml LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_set_free LOC=UNKNOWN */
__inline static void jit_set_free(jit_set *s ) ;
/* END FUNCTION-DECL jit_set_free LOC=UNKNOWN */

/* BEGIN TYPEDEF user_size_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:98 */
typedef u_int64_t user_size_t;
/* END TYPEDEF user_size_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:98 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_cond_signal_thread_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:531 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_signal_thread_np(pthread_cond_t * ,
                                                                                                                                         pthread_t __attribute__((__nullable__))   ) ;
/* END FUNCTION-DECL-EXTERN pthread_cond_signal_thread_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:531 */

/* BEGIN FUNCTION-DECL get_frame_size LOC=UNKNOWN */
static int get_frame_size(struct jit *jit , struct jit_func_info *info ) ;
/* END FUNCTION-DECL get_frame_size LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_lrintf128 LOC=BUILTIN */
/* compiler builtin: 
   long __builtin_lrintf128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_lrintf128 LOC=BUILTIN */

/* BEGIN STRUCT output_buf LOC=./jitter-Darwin-X86-64.c:4057 */
struct output_buf {
   char *buf ;
   size_t size ;
   size_t capacity ;
};
/* END STRUCT output_buf LOC=./jitter-Darwin-X86-64.c:4057 */

/* BEGIN FUNCTION-DECL __builtin_truncf16 LOC=BUILTIN */
/* compiler builtin: 
   _Float16 __builtin_truncf16(_Float16  ) ;  */
/* END FUNCTION-DECL __builtin_truncf16 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strtold LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:169 */
extern long double strtold(char const   * , char ** ) ;
/* END FUNCTION-DECL-EXTERN strtold LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:169 */

/* BEGIN FUNCTION-DECL jit_assign_regs LOC=UNKNOWN */
void jit_assign_regs(struct jit *jit ) ;
/* END FUNCTION-DECL jit_assign_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_rotateleft16 LOC=BUILTIN */
/* compiler builtin: 
   short __builtin_rotateleft16(short  , short  ) ;  */
/* END FUNCTION-DECL __builtin_rotateleft16 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN div LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:144 */
extern div_t div(int  , int  )  __attribute__((__const__)) ;
/* END FUNCTION-DECL-EXTERN div LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:144 */

/* BEGIN FUNCTION-DECL-EXTERN bsearch LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:141 */
extern void *bsearch(void const   *__key , void const   *__base , size_t __nel , size_t __width ,
                     int (* _Nonnull  __compar)(void const   * , void const   * ) ) ;
/* END FUNCTION-DECL-EXTERN bsearch LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:141 */

/* BEGIN TYPEDEF X86_FP_Opcode LOC=./jitter-Darwin-X86-64.c:1122 */
typedef enum __anonenum_X86_FP_Opcode_1068131184 X86_FP_Opcode;
/* END TYPEDEF X86_FP_Opcode LOC=./jitter-Darwin-X86-64.c:1122 */

/* BEGIN FUNCTION-DECL __builtin_cabsf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_cabsf(_Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_cabsf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_apply_args LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_apply_args(void) ;  */
/* END FUNCTION-DECL __builtin_apply_args LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_nansf128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_nansf128(char const   * ) ;  */
/* END FUNCTION-DECL __builtin_nansf128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN getattrlistat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:188 */
extern int getattrlistat(int  , char const   * , void * , void * , size_t  , unsigned long  )  __attribute__((__availability__(macosx,introduced=10.10))) ;
/* END FUNCTION-DECL-EXTERN getattrlistat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:188 */

/* BEGIN FUNCTION-DECL-EXTERN fgetln LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:372 */
extern char *fgetln(FILE * , size_t * ) ;
/* END FUNCTION-DECL-EXTERN fgetln LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:372 */

/* BEGIN VARIABLE-DEF _TIG_IZ_HQIz_argc LOC=UNKNOWN */
int _TIG_IZ_HQIz_argc  ;
/* END VARIABLE-DEF _TIG_IZ_HQIz_argc LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN clock_settime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:187 */
extern int __attribute__((__availability__(watchos,unavailable), __availability__(tvos,unavailable),
__availability__(ios,unavailable), __availability__(macosx,introduced=10.12)))  clock_settime(clockid_t __clock_id ,
                                                                                              struct timespec  const  *__tp ) ;
/* END FUNCTION-DECL-EXTERN clock_settime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:187 */

/* BEGIN FUNCTION-DECL funcall_prepare_optional LOC=UNKNOWN */
__inline static void funcall_prepare_optional(struct jit *jit ) ;
/* END FUNCTION-DECL funcall_prepare_optional LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL emit_sub_op LOC=UNKNOWN */
static void emit_sub_op(struct jit *jit , struct jit_op *op , int imm ) ;
/* END FUNCTION-DECL emit_sub_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_cond_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:299 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_init(pthread_cond_t * __restrict   ,
                                                                                                                             pthread_condattr_t const   * _Nullable __restrict   )  __asm__("_pthread_cond_init")  ;
/* END FUNCTION-DECL-EXTERN pthread_cond_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:299 */

/* BEGIN FUNCTION-DECL __builtin_canonicalizef16 LOC=BUILTIN */
/* compiler builtin: 
   _Float16 __builtin_canonicalizef16(_Float16  ) ;  */
/* END FUNCTION-DECL __builtin_canonicalizef16 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN getusershell LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:663 */
extern char *getusershell(void) ;
/* END FUNCTION-DECL-EXTERN getusershell LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:663 */

/* BEGIN FUNCTION-DECL-EXTERN sbrk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:584 */
extern  __attribute__((__deprecated__)) void __attribute__((__availability__(watchos,unavailable),
__availability__(tvos,unavailable)))  *sbrk(int  ) ;
/* END FUNCTION-DECL-EXTERN sbrk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:584 */

/* BEGIN VARIABLE-DECL-EXTERN optarg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:511 */
extern char *optarg ;
/* END VARIABLE-DECL-EXTERN optarg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:511 */

/* BEGIN FUNCTION-DECL-EXTERN strnstr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:161 */
extern char *strnstr(char const   *__big , char const   *__little , size_t __len ) ;
/* END FUNCTION-DECL-EXTERN strnstr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:161 */

/* BEGIN FUNCTION-DECL __builtin_cacosh LOC=BUILTIN */
/* compiler builtin: 
   _Complex double __builtin_cacosh(_Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_cacosh LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN ctime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:110 */
extern char *ctime(time_t const   * ) ;
/* END FUNCTION-DECL-EXTERN ctime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:110 */

/* BEGIN FUNCTION-DECL __builtin_preserve_access_index LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_preserve_access_index(...) ;  */
/* END FUNCTION-DECL __builtin_preserve_access_index LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_log10l LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_log10l(long double  ) ;  */
/* END FUNCTION-DECL __builtin_log10l LOC=BUILTIN */

/* BEGIN FUNCTION-DECL check_argument_sizes LOC=UNKNOWN */
static int check_argument_sizes(jit_op *op , char *msg_buf ) ;
/* END FUNCTION-DECL check_argument_sizes LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_strcpy LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin_strcpy(char * , char const   * ) ;  */
/* END FUNCTION-DECL __builtin_strcpy LOC=BUILTIN */

/* BEGIN ENUM jit_x86_fp_regs LOC=./jitter-Darwin-X86-64.c:1078 */
enum jit_x86_fp_regs {
    X86_XMM0 = 0,
    X86_XMM1 = 1,
    X86_XMM2 = 2,
    X86_XMM3 = 3,
    X86_XMM4 = 4,
    X86_XMM5 = 5,
    X86_XMM6 = 6,
    X86_XMM7 = 7,
    X86_XMM_NREG = 8
} ;
/* END ENUM jit_x86_fp_regs LOC=./jitter-Darwin-X86-64.c:1078 */

/* BEGIN FUNCTION-DECL-EXTERN fsetattrlist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:750 */
extern int fsetattrlist(int  , void * , void * , size_t  , unsigned int  )  __attribute__((__availability__(macosx,introduced=10.6))) ;
/* END FUNCTION-DECL-EXTERN fsetattrlist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:750 */

/* BEGIN FUNCTION-DECL-EXTERN snprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:334 */
extern int ( /* format attribute */  snprintf)(char * __restrict  __str , size_t __size ,
                                               char const   * __restrict  __format 
                                               , ...) ;
/* END FUNCTION-DECL-EXTERN snprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:334 */

/* BEGIN FUNCTION-DECL emit_ld_op LOC=UNKNOWN */
static void emit_ld_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) ;
/* END FUNCTION-DECL emit_ld_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_strcspn LOC=BUILTIN */
/* compiler builtin: 
   unsigned long long __builtin_strcspn(char const   * , char const   * ) ;  */
/* END FUNCTION-DECL __builtin_strcspn LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_clz LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_clz(unsigned int  ) ;  */
/* END FUNCTION-DECL __builtin_clz LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_ceilf16 LOC=BUILTIN */
/* compiler builtin: 
   _Float16 __builtin_ceilf16(_Float16  ) ;  */
/* END FUNCTION-DECL __builtin_ceilf16 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_bzero LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_bzero(void * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_bzero LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN fsetpos LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:163 */
extern int fsetpos(FILE * , fpos_t const   * ) ;
/* END FUNCTION-DECL-EXTERN fsetpos LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:163 */

/* BEGIN FUNCTION-DECL sync_reg LOC=UNKNOWN */
static void sync_reg(jit_op *op , jit_hw_reg *hreg , jit_value virt_reg ) ;
/* END FUNCTION-DECL sync_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_ssubll_overflow LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_ssubll_overflow(long long const    , long long const    , long long * ) ;  */
/* END FUNCTION-DECL __builtin_ssubll_overflow LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN stpncpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:131 */
extern char *stpncpy(char *__dst , char const   *__src , size_t __n )  __attribute__((__availability__(macosx,introduced=10.7))) ;
/* END FUNCTION-DECL-EXTERN stpncpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:131 */

/* BEGIN FUNCTION-DECL hints_refcount_inc LOC=UNKNOWN */
static void hints_refcount_inc(jit_tree *hints ) ;
/* END FUNCTION-DECL hints_refcount_inc LOC=UNKNOWN */

/* BEGIN STRUCT-DECL jit_rmap LOC=./jitter-Darwin-X86-64.c:64 */
struct jit_rmap ;
/* END STRUCT-DECL jit_rmap LOC=./jitter-Darwin-X86-64.c:64 */

/* BEGIN TYPEDEF __int16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:42 */
typedef short __int16_t;
/* END TYPEDEF __int16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:42 */

/* BEGIN FUNCTION-DECL __builtin_memcmp LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_memcmp(void const   * , void const   * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_memcmp LOC=BUILTIN */

/* BEGIN TYPEDEF rusage_info_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:193 */
typedef void *rusage_info_t;
/* END TYPEDEF rusage_info_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:193 */

/* BEGIN FUNCTION-DECL-EXTERN tmpnam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:188 */
extern  __attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tmpnam(3), it is highly recommended that you use mkstemp(3) instead."))) char __attribute__((__availability__(swift,unavailable,message="Use mkstemp(3) instead.")))  *tmpnam(char * ) ;
/* END FUNCTION-DECL-EXTERN tmpnam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:188 */

/* BEGIN FUNCTION-DECL-EXTERN getdomainname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:649 */
extern int getdomainname(char * , int  ) ;
/* END FUNCTION-DECL-EXTERN getdomainname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:649 */

/* BEGIN FUNCTION-DECL __builtin_tgmath LOC=BUILTIN */
/* compiler builtin: 
   void __attribute__((__overloaded__))  __builtin_tgmath(...) ;  */
/* END FUNCTION-DECL __builtin_tgmath LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN accessx_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:643 */
extern int accessx_np(struct accessx_descriptor  const  * , size_t  , int * , uid_t  ) ;
/* END FUNCTION-DECL-EXTERN accessx_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:643 */

/* BEGIN FUNCTION-DECL-EXTERN aligned_alloc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:50 */
extern void *( __attribute__((__warn_unused_result__)) aligned_alloc)(size_t __alignment ,
                                                                      size_t __size )  __attribute__((__availability__(watchos,introduced=6.0),
__availability__(tvos,introduced=13.0), __availability__(ios,introduced=13.0), __availability__(macosx,introduced=10.15),
__alloc_size__(2))) ;
/* END FUNCTION-DECL-EXTERN aligned_alloc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:50 */

/* BEGIN FUNCTION-DECL __builtin_sprintf LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_sprintf(char * , char const   *  , ...) ;  */
/* END FUNCTION-DECL __builtin_sprintf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_return LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_return(void const   * ) ;  */
/* END FUNCTION-DECL __builtin_return LOC=BUILTIN */

/* BEGIN TYPEDEF uint_fast32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:46 */
typedef uint32_t uint_fast32_t;
/* END TYPEDEF uint_fast32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:46 */

/* BEGIN FUNCTION-DECL ob_free LOC=UNKNOWN */
static void ob_free(struct output_buf *ob ) ;
/* END FUNCTION-DECL ob_free LOC=UNKNOWN */

/* BEGIN STRUCT clockinfo LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:172 */
struct clockinfo {
   int hz ;
   int tick ;
   int tickadj ;
   int stathz ;
   int profhz ;
};
/* END STRUCT clockinfo LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:172 */

/* BEGIN FUNCTION-DECL-EXTERN ldiv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:149 */
extern ldiv_t ldiv(long  , long  )  __attribute__((__const__)) ;
/* END FUNCTION-DECL-EXTERN ldiv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:149 */

/* BEGIN FUNCTION-DECL emit_arguments LOC=UNKNOWN */
__inline static int emit_arguments(struct jit *jit ) ;
/* END FUNCTION-DECL emit_arguments LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN arc4random_buf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:270 */
extern void arc4random_buf(void *__buf , size_t __nbytes )  __attribute__((__availability__(macosx,introduced=10.7))) ;
/* END FUNCTION-DECL-EXTERN arc4random_buf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:270 */

/* BEGIN TYPEDEF u_long LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:88 */
typedef unsigned long u_long;
/* END TYPEDEF u_long LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:88 */

/* BEGIN FUNCTION-DECL __builtin_signbit LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_signbit(...) ;  */
/* END FUNCTION-DECL __builtin_signbit LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN psort_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:331 */
extern void psort_r(void *__base , size_t __nel , size_t __width , void * , int (* _Nonnull  __compar)(void * ,
                                                                                                       void const   * ,
                                                                                                       void const   * ) )  __attribute__((__availability__(macosx,introduced=10.6))) ;
/* END FUNCTION-DECL-EXTERN psort_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:331 */

/* BEGIN FUNCTION-DECL __builtin_wcschr LOC=BUILTIN */
/* compiler builtin: 
   unsigned short *__builtin_wcschr(unsigned short * const   , unsigned short  ) ;  */
/* END FUNCTION-DECL __builtin_wcschr LOC=BUILTIN */

/* BEGIN VARIABLE-DECL jit_debugging_disasm LOC=UNKNOWN */
static struct jit_disasm jit_debugging_disasm ;
/* END VARIABLE-DECL jit_debugging_disasm LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_logf16 LOC=BUILTIN */
/* compiler builtin: 
   _Float16 __builtin_logf16(_Float16  ) ;  */
/* END FUNCTION-DECL __builtin_logf16 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_ctanf LOC=BUILTIN */
/* compiler builtin: 
   _Complex float __builtin_ctanf(_Complex float  ) ;  */
/* END FUNCTION-DECL __builtin_ctanf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_dynamic_object_size LOC=BUILTIN */
/* compiler builtin: 
   unsigned long long __builtin_dynamic_object_size(void const   * , int  ) ;  */
/* END FUNCTION-DECL __builtin_dynamic_object_size LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_extend_pointer LOC=BUILTIN */
/* compiler builtin: 
   unsigned __int128 __builtin_extend_pointer(void * ) ;  */
/* END FUNCTION-DECL __builtin_extend_pointer LOC=BUILTIN */

/* BEGIN FUNCTION-DECL shift_index LOC=UNKNOWN */
static int shift_index(int arg ) ;
/* END FUNCTION-DECL shift_index LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_mbstate_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:81 */
typedef __mbstate_t __darwin_mbstate_t;
/* END TYPEDEF __darwin_mbstate_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:81 */

/* BEGIN FUNCTION-DECL __builtin_thread_pointer LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_thread_pointer(void) ;  */
/* END FUNCTION-DECL __builtin_thread_pointer LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_reg_in_use LOC=UNKNOWN */
int jit_reg_in_use(jit_op *op , int reg , int fp ) ;
/* END FUNCTION-DECL jit_reg_in_use LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_printf LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_printf(char const   *  , ...) ;  */
/* END FUNCTION-DECL __builtin_printf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_bcopy LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_bcopy(void const   * , void * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_bcopy LOC=BUILTIN */

/* BEGIN ENUM __anonenum_X86_Shift_Opcode_820104407 LOC=./jitter-Darwin-X86-64.c:1107 */
enum __anonenum_X86_Shift_Opcode_820104407 {
    X86_SHLD = 0,
    X86_SHLR = 1,
    X86_ROL = 0,
    X86_ROR = 1,
    X86_RCL = 2,
    X86_RCR = 3,
    X86_SHL = 4,
    X86_SHR = 5,
    X86_SAR = 7,
    X86_NSHIFT = 8
} ;
/* END ENUM __anonenum_X86_Shift_Opcode_820104407 LOC=./jitter-Darwin-X86-64.c:1107 */

/* BEGIN FUNCTION-DECL emit_push_arg LOC=UNKNOWN */
__inline static void emit_push_arg(struct jit *jit , struct jit_out_arg *arg ) ;
/* END FUNCTION-DECL emit_push_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN iruserok_sa LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:711 */
extern  __attribute__((__deprecated__)) int iruserok_sa(void const   * , int  , int  ,
                                                        char const   * , char const   * ) ;
/* END FUNCTION-DECL-EXTERN iruserok_sa LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:711 */

/* BEGIN TYPEDEF va_list___0 LOC=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/12.0.0/include/stdarg.h:14 */
typedef __builtin_va_list va_list___0;
/* END TYPEDEF va_list___0 LOC=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/12.0.0/include/stdarg.h:14 */

/* BEGIN FUNCTION-DECL-EXTERN select LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_select.h:39 */
extern int select(int  , fd_set * __restrict   , fd_set * __restrict   , fd_set * __restrict   ,
                  struct timeval * __restrict   )  __asm__("_select$1050")  ;
/* END FUNCTION-DECL-EXTERN select LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_select.h:39 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlockattr_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:471 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlockattr_init(pthread_rwlockattr_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_rwlockattr_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:471 */

/* BEGIN FUNCTION-DECL __builtin_logl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_logl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_logl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN settimeofday LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:193 */
extern int settimeofday(struct timeval  const  * , struct timezone  const  * ) ;
/* END FUNCTION-DECL-EXTERN settimeofday LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:193 */

/* BEGIN FUNCTION-DECL list_callee_saved_regs LOC=UNKNOWN */
static int list_callee_saved_regs(struct jit *jit , jit_op *func_start , jit_hw_reg **active_regs ,
                                  int *count ) ;
/* END FUNCTION-DECL list_callee_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __istype LOC=UNKNOWN */
__inline int __istype(__darwin_ct_rune_t _c , unsigned long _f ) ;
/* END FUNCTION-DECL __istype LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL rmap_spill_candidate LOC=UNKNOWN */
static jit_hw_reg *rmap_spill_candidate(struct jit_reg_allocator *al , jit_op *op ,
                                        jit_value virtreg , int *spill , jit_value *reg_to_spill ,
                                        int callee_saved ) ;
/* END FUNCTION-DECL rmap_spill_candidate LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlock_trywrlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:455 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_trywrlock(pthread_rwlock_t * )  __asm__("_pthread_rwlock_trywrlock")  ;
/* END FUNCTION-DECL-EXTERN pthread_rwlock_trywrlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:455 */

/* BEGIN STRUCT-DECL jit_tree LOC=./jitter-Darwin-X86-64.c:62 */
struct jit_tree ;
/* END STRUCT-DECL jit_tree LOC=./jitter-Darwin-X86-64.c:62 */

/* BEGIN TYPEDEF x86_imm_buf LOC=./jitter-Darwin-X86-64.c:1236 */
typedef union __anonunion_x86_imm_buf_876386805 x86_imm_buf;
/* END TYPEDEF x86_imm_buf LOC=./jitter-Darwin-X86-64.c:1236 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_setdetachstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:262 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setdetachstate(pthread_attr_t * ,
                                                                                                                                       int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_setdetachstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:262 */

/* BEGIN FUNCTION-DECL jit_free_op LOC=UNKNOWN */
__inline static void jit_free_op(struct jit_op *op ) ;
/* END FUNCTION-DECL jit_free_op LOC=UNKNOWN */

/* BEGIN VARIABLE-DEF jit_disasm_general LOC=UNKNOWN */
struct jit_disasm jit_disasm_general  ;
/* END VARIABLE-DEF jit_disasm_general LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL analyze_function LOC=UNKNOWN */
__inline static void analyze_function(struct jit *jit , jit_op *first_op , jit_op *last_op ) ;
/* END FUNCTION-DECL analyze_function LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN madvise LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:242 */
extern int madvise(void * , size_t  , int  ) ;
/* END FUNCTION-DECL-EXTERN madvise LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:242 */

/* BEGIN FUNCTION-DECL-EXTERN fchownat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:208 */
extern int fchownat(int  , char const   * , uid_t  , gid_t  , int  )  __attribute__((__availability__(macosx,introduced=10.10))) ;
/* END FUNCTION-DECL-EXTERN fchownat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:208 */

/* BEGIN FUNCTION-DECL jit_tree_search LOC=UNKNOWN */
static jit_tree *jit_tree_search(jit_tree *h , jit_tree_key key ) ;
/* END FUNCTION-DECL jit_tree_search LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_fabsf16 LOC=BUILTIN */
/* compiler builtin: 
   _Float16 __builtin_fabsf16(_Float16  ) ;  */
/* END FUNCTION-DECL __builtin_fabsf16 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_tanhf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_tanhf(float  ) ;  */
/* END FUNCTION-DECL __builtin_tanhf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN ___toupper LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:131 */
extern __darwin_ct_rune_t ___toupper(__darwin_ct_rune_t  ) ;
/* END FUNCTION-DECL-EXTERN ___toupper LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:131 */

/* BEGIN FUNCTION-DECL __builtin_ctan LOC=BUILTIN */
/* compiler builtin: 
   _Complex double __builtin_ctan(_Complex double  ) ;  */
/* END FUNCTION-DECL __builtin_ctan LOC=BUILTIN */

/* BEGIN FUNCTION-DECL rmap_subset LOC=UNKNOWN */
static int rmap_subset(jit_op *op , jit_tree *current , jit_tree *target ) ;
/* END FUNCTION-DECL rmap_subset LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN memccpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:118 */
extern void *memccpy(void *__dst , void const   *__src , int __c , size_t __n ) ;
/* END FUNCTION-DECL-EXTERN memccpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:118 */

/* BEGIN FUNCTION-DECL __builtin_add_overflow LOC=BUILTIN */
/* compiler builtin: 
   _Bool __builtin_add_overflow(...) ;  */
/* END FUNCTION-DECL __builtin_add_overflow LOC=BUILTIN */

/* BEGIN FUNCTION-DECL candidate_score LOC=UNKNOWN */
static int candidate_score(jit_op *op , jit_value virtreg , jit_hw_reg *hreg , int *spill ,
                           jit_value *associated_virtreg ) ;
/* END FUNCTION-DECL candidate_score LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:226 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_destroy(pthread_attr_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:226 */

/* BEGIN FUNCTION-DECL-EXTERN getdirentriesattr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:754 */
extern int getdirentriesattr(int  , void * , void * , size_t  , unsigned int * , unsigned int * ,
                             unsigned int * , unsigned int  )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN getdirentriesattr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:754 */

/* BEGIN FUNCTION-DECL-EXTERN setrlimit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:455 */
extern int setrlimit(int  , struct rlimit  const  * )  __asm__("_setrlimit")  ;
/* END FUNCTION-DECL-EXTERN setrlimit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:455 */

/* BEGIN FUNCTION-DECL-EXTERN memchr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:70 */
extern void *memchr(void const   *__s , int __c , size_t __n ) ;
/* END FUNCTION-DECL-EXTERN memchr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:70 */

/* BEGIN FUNCTION-DECL-EXTERN mkpathat_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:670 */
extern int mkpathat_np(int dfd , char const   *path , mode_t omode )  __attribute__((__availability__(watchos,introduced=3.0),
__availability__(tvos,introduced=10.0), __availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12))) ;
/* END FUNCTION-DECL-EXTERN mkpathat_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:670 */

/* BEGIN FUNCTION-DECL __builtin_signbitf LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_signbitf(float  ) ;  */
/* END FUNCTION-DECL __builtin_signbitf LOC=BUILTIN */

/* BEGIN TYPEDEF __gnuc_va_list LOC=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/12.0.0/include/stdarg.h:32 */
typedef __builtin_va_list __gnuc_va_list;
/* END TYPEDEF __gnuc_va_list LOC=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/12.0.0/include/stdarg.h:32 */

/* BEGIN FUNCTION-DECL color_flip LOC=UNKNOWN */
__inline static void color_flip(jit_tree *h ) ;
/* END FUNCTION-DECL color_flip LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN perror LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:169 */
extern void perror(char const   * )  __attribute__((__cold__)) ;
/* END FUNCTION-DECL-EXTERN perror LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:169 */

/* BEGIN FUNCTION-DECL jit_get_reg_name LOC=UNKNOWN */
void jit_get_reg_name(struct jit_disasm *disasm , char *r , int reg ) ;
/* END FUNCTION-DECL jit_get_reg_name LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin___vfprintf_chk LOC=BUILTIN */
/* compiler builtin: 
   int __builtin___vfprintf_chk(void * , int  , char const   * , __builtin_va_list  ) ;  */
/* END FUNCTION-DECL __builtin___vfprintf_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_atan2l LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_atan2l(long double  , long double  ) ;  */
/* END FUNCTION-DECL __builtin_atan2l LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_apply LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_apply(void (*)() , void * , unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_apply LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN execlp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:443 */
extern int execlp(char const   *__file , char const   *__arg0  , ...)  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN execlp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:443 */

/* BEGIN FUNCTION-DECL __builtin_fmaxl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_fmaxl(long double  , long double  ) ;  */
/* END FUNCTION-DECL __builtin_fmaxl LOC=BUILTIN */

/* BEGIN STRUCT-DECL jit LOC=./jitter-Darwin-X86-64.c:269 */
struct jit ;
/* END STRUCT-DECL jit LOC=./jitter-Darwin-X86-64.c:269 */

/* BEGIN FUNCTION-DECL-EXTERN flsl LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:88 */
extern int flsl(long  )  __attribute__((__availability__(macosx,introduced=10.5))) ;
/* END FUNCTION-DECL-EXTERN flsl LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:88 */

/* BEGIN FUNCTION-DECL __builtin_os_log_format LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_os_log_format(void * , char const   *  , ...) ;  */
/* END FUNCTION-DECL __builtin_os_log_format LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_sse_fld_op LOC=UNKNOWN */
static void emit_sse_fld_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) ;
/* END FUNCTION-DECL emit_sse_fld_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN fflagstostr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:648 */
extern char *fflagstostr(unsigned long  ) ;
/* END FUNCTION-DECL-EXTERN fflagstostr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:648 */

/* BEGIN FUNCTION-DECL __builtin_rintf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_rintf(float  ) ;  */
/* END FUNCTION-DECL __builtin_rintf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strndup LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:132 */
extern char *strndup(char const   *__s1 , size_t __n )  __attribute__((__availability__(macosx,introduced=10.7))) ;
/* END FUNCTION-DECL-EXTERN strndup LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:132 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_cond_timedwait LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:308 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_timedwait(pthread_cond_t * __restrict   ,
                                                                                                                                  pthread_mutex_t * __restrict   ,
                                                                                                                                  struct timespec  const  * _Nullable __restrict   )  __asm__("_pthread_cond_timedwait")  ;
/* END FUNCTION-DECL-EXTERN pthread_cond_timedwait LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:308 */

/* BEGIN FUNCTION-DECL-EXTERN rand LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:162 */
extern int rand(void)  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
/* END FUNCTION-DECL-EXTERN rand LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:162 */

/* BEGIN VARIABLE-DECL x05 LOC=UNKNOWN */
static double x05 ;
/* END VARIABLE-DECL x05 LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_cancel LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:290 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cancel(pthread_t  )  __asm__("_pthread_cancel")  ;
/* END FUNCTION-DECL-EXTERN pthread_cancel LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:290 */

/* BEGIN FUNCTION-DECL __builtin_remainder LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_remainder(double  , double  ) ;  */
/* END FUNCTION-DECL __builtin_remainder LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN posix_madvise LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:239 */
extern int posix_madvise(void * , size_t  , int  ) ;
/* END FUNCTION-DECL-EXTERN posix_madvise LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:239 */

/* BEGIN VARIABLE-DEF _TIG_iO_HQIz_2_init_tigress_1_opaque_ptr_2 LOC=UNKNOWN */
struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct *_TIG_iO_HQIz_2_init_tigress_1_opaque_ptr_2  =    (struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct *)0;
/* END VARIABLE-DEF _TIG_iO_HQIz_2_init_tigress_1_opaque_ptr_2 LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_atanhl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_atanhl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_atanhl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_exp2f128 LOC=BUILTIN */
/* compiler builtin: 
   _Float128 __builtin_exp2f128(_Float128  ) ;  */
/* END FUNCTION-DECL __builtin_exp2f128 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN __tolower LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:189 */
extern __darwin_ct_rune_t __tolower(__darwin_ct_rune_t  ) ;
/* END FUNCTION-DECL-EXTERN __tolower LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:189 */

/* BEGIN FUNCTION-DECL __builtin_ia32_unpcklps LOC=BUILTIN */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_unpcklps(float __attribute__((____vector_size____(16)))   ,
                                                                           float __attribute__((____vector_size____(16)))   ) ;  */
/* END FUNCTION-DECL __builtin_ia32_unpcklps LOC=BUILTIN */

/* BEGIN FUNCTION-DECL check_uninitialized_registers LOC=UNKNOWN */
static int check_uninitialized_registers(jit_op *op , char *msg_buf ) ;
/* END FUNCTION-DECL check_uninitialized_registers LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_fpclassify LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_fpclassify(int  , int  , int  , int  , int   , ...) ;  */
/* END FUNCTION-DECL __builtin_fpclassify LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_dump_ops LOC=UNKNOWN */
void jit_dump_ops(struct jit *jit , int verbosity ) ;
/* END FUNCTION-DECL jit_dump_ops LOC=UNKNOWN */

/* BEGIN STRUCT rlimit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:365 */
struct rlimit {
   rlim_t rlim_cur ;
   rlim_t rlim_max ;
};
/* END STRUCT rlimit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:365 */

/* BEGIN TYPEDEF AMD64_XMM_Reg_No LOC=./jitter-Darwin-X86-64.c:1033 */
typedef enum jit_amd64_fp_regs AMD64_XMM_Reg_No;
/* END TYPEDEF AMD64_XMM_Reg_No LOC=./jitter-Darwin-X86-64.c:1033 */

/* BEGIN STRUCT jit_set LOC=./jitter-Darwin-X86-64.c:586 */
struct jit_set {
   jit_tree *root ;
};
/* END STRUCT jit_set LOC=./jitter-Darwin-X86-64.c:586 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_create LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:332 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_create(pthread_t __attribute__((__nullable__))  * _Nonnull __restrict   ,
                                                                                                                          pthread_attr_t const   * _Nullable __restrict   ,
                                                                                                                          void * _Nullable  (* _Nonnull  )(void * _Nullable   ) ,
                                                                                                                          void * _Nullable __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_create LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:332 */

/* BEGIN FUNCTION-DECL __builtin_log10 LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_log10(double  ) ;  */
/* END FUNCTION-DECL __builtin_log10 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_disable_optimization LOC=UNKNOWN */
void jit_disable_optimization(struct jit *jit , int opt ) ;
/* END FUNCTION-DECL jit_disable_optimization LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_wcslen LOC=BUILTIN */
/* compiler builtin: 
   unsigned long long __builtin_wcslen(unsigned short * const   ) ;  */
/* END FUNCTION-DECL __builtin_wcslen LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_tree_delete LOC=UNKNOWN */
__inline static jit_tree *jit_tree_delete(jit_tree *root , jit_tree_key key , int *found ) ;
/* END FUNCTION-DECL jit_tree_delete LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_cond_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:296 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_destroy(pthread_cond_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_cond_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:296 */

/* BEGIN FUNCTION-DECL _cipher$_xtea_decipher LOC=UNKNOWN */
void _cipher$_xtea_decipher(unsigned int block_no , unsigned int num_rounds , unsigned int *v ,
                            unsigned int *key , unsigned int size ) ;
/* END FUNCTION-DECL _cipher$_xtea_decipher LOC=UNKNOWN */

/* BEGIN STRUCT __anonstruct_div_t_773697287 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:83 */
struct __anonstruct_div_t_773697287 {
   int quot ;
   int rem ;
};
/* END STRUCT __anonstruct_div_t_773697287 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:83 */

/* BEGIN FUNCTION-DEF funcall_put_arg LOC=UNKNOWN */
__inline static void funcall_put_arg(struct jit *jit , jit_op *op ) 
{ 
  int pos ;
  struct jit_out_arg *arg ;
  int tmp ;

  {
#line 935
  pos = jit->prepared_args.ready;
#line 936
  arg = jit->prepared_args.args + pos;
#line 937
  arg->isreg = (char )(! ((int )op->code & 0x02));
#line 938
  arg->isfp = (char)0;
#line 939
  arg->isoptional = (char )jit->prepared_args.variadic;
#line 940
  arg->isref = (char )((int )op->spec == ((0x02 << 2) | 0x02));
#line 941
  arg->value.generic = op->arg[0];
#line 942
  if (arg->isoptional) {
#line 942
    arg->size = (char )((int )sizeof(void *));
  } else {
#line 942
    arg->size = (char )op->arg_size;
  }
#line 944
  tmp = jit->prepared_args.gp_args;
#line 944
  (jit->prepared_args.gp_args) ++;
#line 944
  arg->argpos = tmp;
#line 945
  if (jit->prepared_args.gp_args > (jit->reg_al)->gp_arg_reg_cnt) {
#line 946
    jit->prepared_args.stack_size += (int )sizeof(void *);
  }
#line 954
  (jit->prepared_args.ready) ++;
#line 960
  return;
}
}
/* END FUNCTION-DEF funcall_put_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_optimize_st_ops LOC=UNKNOWN */
void jit_optimize_st_ops(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 2076
  tmp = jit_op_first(jit->ops);
#line 2076
  op = tmp;
#line 2076
  while ((unsigned long )op != (unsigned long )((void *)0)) {
#line 2077
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 280U) {
#line 2077
      if (op->prev) {
#line 2077
        if ((int )(op->prev)->code == 258) {
#line 2077
          if (op->arg[1] == (op->prev)->arg[0]) {
#line 2077
            if ((op->prev)->arg[1] >= (-0x7FFFFFFF-1)) {
#line 2077
              if ((op->prev)->arg[1] <= 2147483647L) {
#line 2077
                tmp___0 = jit_set_get(op->live_out, (int )op->arg[1]);
#line 2077
                if (! tmp___0) {
#line 2084
                  if (! ((int )op->code & 0x02)) {
#line 2085
                    op->code = (unsigned short)2049;
#line 2086
                    op->spec = (unsigned char )((0x02 << 2) | 0x01);
                  } else {
#line 2088
                    op->code = (unsigned short)2050;
#line 2089
                    op->spec = (unsigned char )((0x02 << 2) | 0x02);
                  }
#line 2091
                  op->arg[1] = (op->prev)->arg[1];
#line 2092
                  (op->prev)->code = (unsigned short)0;
#line 2093
                  (op->prev)->spec = (unsigned char)0;
                }
              }
            }
          }
        }
      }
    }
#line 2096
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 288U) {
#line 2096
      if (op->prev) {
#line 2096
        if ((int )(op->prev)->code == 258) {
#line 2096
          if (op->arg[2] == (op->prev)->arg[0]) {
#line 2096
            if ((op->prev)->arg[1] >= (-0x7FFFFFFF-1)) {
#line 2096
              if ((op->prev)->arg[1] <= 2147483647L) {
#line 2096
                tmp___1 = jit_set_get(op->live_out, (int )op->arg[2]);
#line 2096
                if (! tmp___1) {
#line 2103
                  if (! ((int )op->code & 0x02)) {
#line 2104
                    op->code = (unsigned short)2057;
#line 2105
                    op->spec = (unsigned char )(((0x02 << 4) | (0x01 << 2)) | 0x01);
                  } else {
#line 2107
                    op->code = (unsigned short)2058;
#line 2108
                    op->spec = (unsigned char )(((0x02 << 4) | (0x01 << 2)) | 0x02);
                  }
#line 2110
                  op->arg[2] = (op->prev)->arg[1];
#line 2111
                  (op->prev)->code = (unsigned short)0;
#line 2112
                  (op->prev)->spec = (unsigned char)0;
                }
              }
            }
          }
        }
      }
    }
#line 2076
    op = op->next;
  }
#line 2116
  return;
}
}
/* END FUNCTION-DEF jit_optimize_st_ops LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_arguments LOC=UNKNOWN */
__inline static int emit_arguments(struct jit *jit ) 
{ 
  int stack_correction ;
  struct jit_out_arg *args ;
  int gp_pushed ;
  int tmp ;
  int fp_pushed ;
  int tmp___0 ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  struct jit_func_info *tmp___33 ;
  int x ;
  struct jit_out_arg *arg ;
  int fp_reg_arg_cnt ;
  int tmp___34 ;
  int _amd64_width_temp ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___35 ;
  int tmp___36 ;
  int tmp___37 ;
  unsigned char *tmp___38 ;
  int tmp___39 ;
  unsigned char *tmp___40 ;
  amd64_imm_buf imb___3 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  int tmp___53 ;
  unsigned char _amd64_rex_bits___6 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;

  {
#line 2467
  stack_correction = 0;
#line 2468
  args = jit->prepared_args.args;
#line 2470
  if (jit->prepared_args.gp_args - (jit->reg_al)->gp_arg_reg_cnt > 0) {
#line 2470
    tmp = jit->prepared_args.gp_args - (jit->reg_al)->gp_arg_reg_cnt;
  } else {
#line 2470
    tmp = 0;
  }
#line 2470
  gp_pushed = tmp;
#line 2471
  if (jit->prepared_args.fp_args - (jit->reg_al)->fp_arg_reg_cnt > 0) {
#line 2471
    tmp___0 = jit->prepared_args.fp_args - (jit->reg_al)->fp_arg_reg_cnt;
  } else {
#line 2471
    tmp___0 = 0;
  }
#line 2471
  fp_pushed = tmp___0;
#line 2473
  tmp___33 = jit_current_func_info(jit);
#line 2473
  if (tmp___33->has_prolog) {
#line 2474
    if (((jit->push_count + gp_pushed) + fp_pushed) % 2) {
#line 2475
      while (1) {
#line 2475
        while (1) {
#line 2475
          _amd64_rex_bits = (unsigned char)8;
#line 2475
          if ((int )_amd64_rex_bits != 0) {
#line 2475
            tmp___1 = jit->ip;
#line 2475
            (jit->ip) ++;
#line 2475
            *tmp___1 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          }
#line 2475
          break;
        }
#line 2475
        tmp___2 = jit->ip;
#line 2475
        (jit->ip) ++;
#line 2475
        *tmp___2 = (unsigned char)131;
#line 2475
        while (1) {
#line 2475
          while (1) {
#line 2475
            tmp___3 = jit->ip;
#line 2475
            (jit->ip) ++;
#line 2475
            *tmp___3 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
#line 2475
            break;
          }
#line 2475
          break;
        }
#line 2475
        while (1) {
#line 2475
          *(jit->ip) = (unsigned char)8;
#line 2475
          (jit->ip) ++;
#line 2475
          break;
        }
#line 2475
        break;
      }
#line 2476
      stack_correction = 8;
    }
  } else
#line 2479
  if (((jit->push_count + gp_pushed) + fp_pushed) % 2 == 0) {
#line 2480
    while (1) {
#line 2480
      while (1) {
#line 2480
        _amd64_rex_bits___2 = (unsigned char)8;
#line 2480
        if ((int )_amd64_rex_bits___2 != 0) {
#line 2480
          tmp___17 = jit->ip;
#line 2480
          (jit->ip) ++;
#line 2480
          *tmp___17 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
        }
#line 2480
        break;
      }
#line 2480
      tmp___18 = jit->ip;
#line 2480
      (jit->ip) ++;
#line 2480
      *tmp___18 = (unsigned char)131;
#line 2480
      while (1) {
#line 2480
        while (1) {
#line 2480
          tmp___19 = jit->ip;
#line 2480
          (jit->ip) ++;
#line 2480
          *tmp___19 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
#line 2480
          break;
        }
#line 2480
        break;
      }
#line 2480
      while (1) {
#line 2480
        *(jit->ip) = (unsigned char)8;
#line 2480
        (jit->ip) ++;
#line 2480
        break;
      }
#line 2480
      break;
    }
#line 2481
    stack_correction = 8;
  }
#line 2485
  x = jit->prepared_args.count - 1;
#line 2485
  while (x >= 0) {
#line 2486
    arg = args + x;
#line 2487
    if (! arg->isfp) {
#line 2488
      if (arg->argpos < (jit->reg_al)->gp_arg_reg_cnt) {
#line 2488
        emit_set_arg(jit, arg);
      } else {
#line 2489
        emit_push_arg(jit, arg);
      }
    } else
#line 2491
    if (arg->argpos < (jit->reg_al)->fp_arg_reg_cnt) {
#line 2491
      emit_set_fparg(jit, arg);
    } else {
#line 2492
      emit_fppush_arg(jit, arg);
    }
#line 2485
    x --;
  }
#line 2496
  if (jit->prepared_args.fp_args < (jit->reg_al)->fp_arg_reg_cnt) {
#line 2496
    tmp___34 = jit->prepared_args.fp_args;
  } else {
#line 2496
    tmp___34 = (jit->reg_al)->fp_arg_reg_cnt;
  }
#line 2496
  fp_reg_arg_cnt = tmp___34;
#line 2497
  if (fp_reg_arg_cnt != 0) {
#line 2497
    while (1) {
#line 2497
      _amd64_width_temp = (size_t )fp_reg_arg_cnt == (size_t )((int )((size_t )fp_reg_arg_cnt));
#line 2497
      while (1) {
#line 2497
        while (1) {
#line 2497
          if (_amd64_width_temp) {
#line 2497
            tmp___37 = 4;
          } else {
#line 2497
            tmp___37 = 8;
          }
#line 2497
          if (tmp___37 > 4) {
#line 2497
            tmp___36 = 8;
          } else {
#line 2497
            tmp___36 = 0;
          }
#line 2497
          _amd64_rex_bits___5 = (unsigned char )tmp___36;
#line 2497
          if ((int )_amd64_rex_bits___5 != 0) {
#line 2497
            tmp___38 = jit->ip;
#line 2497
            (jit->ip) ++;
#line 2497
            *tmp___38 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
          } else {
#line 2497
            if (_amd64_width_temp) {
#line 2497
              tmp___39 = 4;
            } else {
#line 2497
              tmp___39 = 8;
            }
#line 2497
            if (tmp___39 == 1) {
#line 2497
              tmp___38 = jit->ip;
#line 2497
              (jit->ip) ++;
#line 2497
              *tmp___38 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
            }
          }
#line 2497
          break;
        }
#line 2497
        tmp___40 = jit->ip;
#line 2497
        (jit->ip) ++;
#line 2497
        *tmp___40 = (unsigned char)184;
#line 2497
        if (_amd64_width_temp) {
#line 2497
          tmp___53 = 4;
        } else {
#line 2497
          tmp___53 = 8;
        }
#line 2497
        if (tmp___53 == 8) {
#line 2497
          while (1) {
#line 2497
            imb___3.val = (size_t )fp_reg_arg_cnt;
#line 2497
            tmp___41 = jit->ip;
#line 2497
            (jit->ip) ++;
#line 2497
            *tmp___41 = imb___3.b[0];
#line 2497
            tmp___42 = jit->ip;
#line 2497
            (jit->ip) ++;
#line 2497
            *tmp___42 = imb___3.b[1];
#line 2497
            tmp___43 = jit->ip;
#line 2497
            (jit->ip) ++;
#line 2497
            *tmp___43 = imb___3.b[2];
#line 2497
            tmp___44 = jit->ip;
#line 2497
            (jit->ip) ++;
#line 2497
            *tmp___44 = imb___3.b[3];
#line 2497
            tmp___45 = jit->ip;
#line 2497
            (jit->ip) ++;
#line 2497
            *tmp___45 = imb___3.b[4];
#line 2497
            tmp___46 = jit->ip;
#line 2497
            (jit->ip) ++;
#line 2497
            *tmp___46 = imb___3.b[5];
#line 2497
            tmp___47 = jit->ip;
#line 2497
            (jit->ip) ++;
#line 2497
            *tmp___47 = imb___3.b[6];
#line 2497
            tmp___48 = jit->ip;
#line 2497
            (jit->ip) ++;
#line 2497
            *tmp___48 = imb___3.b[7];
#line 2497
            break;
          }
        } else {
#line 2497
          while (1) {
#line 2497
            imb___4.val = (int )((size_t )fp_reg_arg_cnt);
#line 2497
            tmp___49 = jit->ip;
#line 2497
            (jit->ip) ++;
#line 2497
            *tmp___49 = imb___4.b[0];
#line 2497
            tmp___50 = jit->ip;
#line 2497
            (jit->ip) ++;
#line 2497
            *tmp___50 = imb___4.b[1];
#line 2497
            tmp___51 = jit->ip;
#line 2497
            (jit->ip) ++;
#line 2497
            *tmp___51 = imb___4.b[2];
#line 2497
            tmp___52 = jit->ip;
#line 2497
            (jit->ip) ++;
#line 2497
            *tmp___52 = imb___4.b[3];
#line 2497
            break;
          }
        }
#line 2497
        break;
      }
#line 2497
      break;
    }
  } else {
#line 2498
    while (1) {
#line 2498
      while (1) {
#line 2498
        _amd64_rex_bits___6 = (unsigned char)0;
#line 2498
        if ((int )_amd64_rex_bits___6 != 0) {
#line 2498
          tmp___54 = jit->ip;
#line 2498
          (jit->ip) ++;
#line 2498
          *tmp___54 = (unsigned char )(0x40 | (int )_amd64_rex_bits___6);
        }
#line 2498
        break;
      }
#line 2498
      tmp___55 = jit->ip;
#line 2498
      (jit->ip) ++;
#line 2498
      *tmp___55 = (unsigned char )((6 << 3) + 3);
#line 2498
      while (1) {
#line 2498
        while (1) {
#line 2498
          tmp___56 = jit->ip;
#line 2498
          (jit->ip) ++;
#line 2498
          *tmp___56 = (unsigned char )(3 << 6);
#line 2498
          break;
        }
#line 2498
        break;
      }
#line 2498
      break;
    }
  }
#line 2499
  return (stack_correction);
}
}
/* END FUNCTION-DEF emit_arguments LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_op_compilable LOC=UNKNOWN */
int print_op_compilable(struct jit_disasm *disasm , struct jit_op *op , jit_tree *labels ) 
{ 
  struct output_buf *linebuf ;
  struct output_buf *tmp ;
  jit_tree *lab ;
  jit_tree *tmp___0 ;
  int tmp___1 ;
  jit_tree *lab___0 ;
  jit_tree *tmp___2 ;
  int i ;
  char *tmp___3 ;
  char *tmp___4 ;
  char *tmp___5 ;
  long tmp___6 ;
  int len ;

  {
#line 4606
  tmp = ob_new();
#line 4606
  linebuf = tmp;
#line 4608
  tmp___0 = jit_tree_search(labels, (long )op);
#line 4608
  lab = tmp___0;
#line 4609
  if (lab) {
#line 4609
    if ((long )lab->value > 0L) {
#line 4610
      ob_printf(linebuf, (char const   *)"// ");
#line 4611
      ob_printf(linebuf, (char const   *)disasm->label_template, (long )lab->value);
#line 4612
      ob_printf(linebuf, (char const   *)":\n");
    }
  }
#line 4615
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1928U) {
#line 4616
    print_comment(linebuf, op);
#line 4617
    goto direct_print;
  }
#line 4621
  ob_append(linebuf, disasm->indent_template);
#line 4623
  tmp___1 = jit_op_is_cflow(op);
#line 4623
  if (tmp___1) {
#line 4623
    if ((unsigned long )((void *)op->arg[0]) == (unsigned long )((void *)0)) {
#line 4626
      ob_printf(linebuf, (char const   *)"jit_op * op_%li = ", (unsigned long )op >> 4);
    } else {
#line 4623
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 4623
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1448U) {
#line 4626
    ob_printf(linebuf, (char const   *)"jit_op * op_%li = ", (unsigned long )op >> 4);
  } else
#line 4623
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1456U) {
#line 4626
    ob_printf(linebuf, (char const   *)"jit_op * op_%li = ", (unsigned long )op >> 4);
  } else
#line 4623
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1424U) {
#line 4626
    ob_printf(linebuf, (char const   *)"jit_op * op_%li = ", (unsigned long )op >> 4);
  } else
#line 4623
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1432U) {
#line 4626
    ob_printf(linebuf, (char const   *)"jit_op * op_%li = ", (unsigned long )op >> 4);
  }
#line 4628
  switch ((unsigned int )((jit_opcode )((int )op->code & 0xfff8))) {
  case 136U: 
#line 4630
  ob_printf(linebuf, (char const   *)"jit_label * ");
#line 4632
  tmp___2 = jit_tree_search(labels, op->arg[0]);
#line 4632
  lab___0 = tmp___2;
#line 4633
  if (lab___0) {
#line 4633
    ob_printf(linebuf, (char const   *)disasm->label_template, (long )lab___0->value);
  }
#line 4634
  ob_printf(linebuf, (char const   *)" = jit_get_label(p");
#line 4635
  goto print;
  case 144U: 
#line 4638
  ob_printf(linebuf, (char const   *)"jit_patch  (p, op_%li", (unsigned long )op->arg[0] >> 4);
#line 4639
  goto print;
  case 1408U: 
#line 4642
  ob_printf(linebuf, (char const   *)"jit_data_byte(p, ");
#line 4643
  ob_printf(linebuf, (char const   *)disasm->generic_value_template, op->arg[0]);
#line 4644
  goto print;
  case 1416U: 
#line 4646
  i = 0;
#line 4646
  while ((jit_value )i < op->arg[0]) {
#line 4647
    ob_printf(linebuf, (char const   *)"jit_data_byte(p, ");
#line 4648
    ob_printf(linebuf, (char const   *)disasm->generic_value_template, (int )*((unsigned char *)op->addendum + i));
#line 4649
    if ((jit_value )i < op->arg[0] - 1L) {
#line 4649
      ob_printf(linebuf, (char const   *)");\n");
    }
#line 4646
    i ++;
  }
#line 4651
  goto print;
  case 1456U: 
  case 1448U: 
#line 4654
  tmp___3 = jit_get_op_name(op);
#line 4654
  ob_printf(linebuf, (char const   *)"jit_%s(p, ", tmp___3);
#line 4655
  print_arg(disasm, linebuf, op, 1);
#line 4656
  ob_append(linebuf, ", ");
#line 4657
  print_addr(disasm, linebuf, labels, op, 1);
#line 4658
  goto print;
  case 1432U: 
  case 1424U: 
#line 4661
  tmp___4 = jit_get_op_name(op);
#line 4661
  ob_printf(linebuf, (char const   *)"jit_data_%s(p, ", tmp___4 + 1);
#line 4662
  print_addr(disasm, linebuf, labels, op, 0);
#line 4663
  goto print;
  case 1440U: 
#line 4665
  ob_printf(linebuf, (char const   *)"jit_code_align  (p, ");
#line 4666
  ob_printf(linebuf, (char const   *)disasm->generic_value_template, op->arg[0]);
#line 4667
  goto print;
  case 392U: 
#line 4669
  ob_printf(linebuf, (char const   *)"jit_prepare(p");
#line 4670
  goto print;
  case 448U: 
#line 4672
  ob_printf(linebuf, (char const   *)"jit_prepare_optional(p");
#line 4673
  goto print;
  default: 
#line 4675
  break;
  }
#line 4678
  tmp___5 = jit_get_op_name(op);
#line 4678
  if ((int )*(tmp___5 + 0) == 46) {
#line 4678
    goto direct_print;
  }
#line 4680
  ob_append(linebuf, "jit_");
#line 4681
  print_full_op_name(linebuf, op);
#line 4683
  ob_pad(linebuf, 15);
#line 4685
  ob_append(linebuf, "(p,");
#line 4687
  switch ((unsigned int )((jit_opcode )((int )op->code & 0xfff8))) {
  case 1920U: 
#line 4689
  print_str(linebuf, (char *)op->arg[0]);
#line 4690
  if (! ((int )op->code & 0x02)) {
#line 4691
    ob_append(linebuf, ", ");
#line 4692
    print_arg(disasm, linebuf, op, 2);
  }
#line 4694
  break;
  case 152U: 
#line 4696
  switch (op->arg[0]) {
  case 0L: 
#line 4697
  ob_append(linebuf, "JIT_SIGNED_NUM");
#line 4697
  break;
  case 1L: 
#line 4698
  ob_append(linebuf, "JIT_UNSIGNED_NUM");
#line 4698
  break;
  case 2L: 
#line 4699
  ob_append(linebuf, "JIT_FLOAT_NUM");
#line 4699
  break;
  case 3L: 
#line 4700
  ob_append(linebuf, "JIT_PTR");
#line 4700
  break;
  default: 
#line 4701
  tmp___6 = __builtin_expect(1L, 0L);
#line 4701
  if (tmp___6) {
#line 4701
    __assert_rtn((char const   *)"print_op_compilable", (char const   *)"./jitter-Darwin-X86-64.c",
                 4701, (char const   *)"0");
  }
  }
#line 4703
  ob_append(linebuf, ", ");
#line 4704
  print_arg(disasm, linebuf, op, 2);
#line 4705
  break;
  default: 
#line 4707
  print_args(disasm, linebuf, op, labels);
  }
#line 4710
  if (op->arg_size) {
#line 4710
    ob_printf(linebuf, (char const   *)", %i", (int )op->arg_size);
  }
  print: 
#line 4713
  ob_append(linebuf, ");");
  direct_print: 
#line 4715
  printf((char const   */* __restrict  */)"%s", linebuf->buf);
#line 4716
  len = (int )linebuf->size;
#line 4717
  ob_free(linebuf);
#line 4718
  return (len);
}
}
/* END FUNCTION-DEF print_op_compilable LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_collect_statistics LOC=UNKNOWN */
void jit_collect_statistics(struct jit *jit ) 
{ 
  int i ;
  int j ;
  int ops_from_return ;
  jit_tree *last_hints ;
  jit_op *op ;
  jit_op *tmp ;
  jit_tree *new_hints ;
  jit_tree *tmp___0 ;
  jit_value regs[3] ;
  int found_regs ;
  int found ;
  jit_value reg ;
  int tmp___1 ;
  jit_value reg___0 ;
  jit_tree *hint ;
  jit_tree *tmp___2 ;
  struct jit_allocator_hint *new_hint ;
  void *tmp___3 ;
  unsigned long long tmp___4 ;

  {
#line 5557
  ops_from_return = 0;
#line 5558
  last_hints = (jit_tree *)((void *)0);
#line 5560
  tmp = jit_op_last(jit->ops);
#line 5560
  op = tmp;
#line 5560
  while ((unsigned long )op != (unsigned long )((void *)0)) {
#line 5561
    tmp___0 = jit_tree_clone(last_hints);
#line 5561
    new_hints = tmp___0;
#line 5562
    op->normalized_pos = ops_from_return;
#line 5567
    found_regs = 0;
#line 5568
    i = 0;
#line 5568
    while (i < 3) {
#line 5569
      if ((((int )op->spec >> ((i + 1) - 1) * 2) & 0x03) == 0x01) {
#line 5569
        goto _L;
      } else
#line 5569
      if ((((int )op->spec >> ((i + 1) - 1) * 2) & 0x03) == 0x03) {
        _L: /* CIL Label */ 
#line 5570
        found = 0;
#line 5571
        reg = op->arg[i];
#line 5572
        j = 0;
#line 5572
        while (j < found_regs) {
#line 5573
          if (regs[j] == reg) {
#line 5574
            found = 1;
#line 5575
            break;
          }
#line 5572
          j ++;
        }
#line 5578
        if (! found) {
#line 5578
          tmp___1 = found_regs;
#line 5578
          found_regs ++;
#line 5578
          regs[tmp___1] = reg;
        }
      }
#line 5568
      i ++;
    }
#line 5582
    i = 0;
#line 5582
    while (i < found_regs) {
#line 5583
      reg___0 = regs[i];
#line 5585
      tmp___2 = jit_tree_search(new_hints, reg___0);
#line 5585
      hint = tmp___2;
#line 5586
      tmp___3 = malloc((size_t )sizeof(struct jit_allocator_hint ));
#line 5586
      new_hint = (struct jit_allocator_hint *)tmp___3;
#line 5587
      if (hint) {
#line 5587
        tmp___4 = __builtin_object_size((void *)new_hint, 0);
#line 5587
        __builtin___memcpy_chk((void *)new_hint, (void const   *)hint->value, sizeof(struct jit_allocator_hint ),
                               tmp___4);
      } else {
#line 5589
        new_hint->last_pos = 0;
#line 5590
        new_hint->should_be_calleesaved = 0;
#line 5591
        new_hint->should_be_eax = 0;
      }
#line 5593
      new_hint->refs = 0;
#line 5595
      new_hint->last_pos = ops_from_return;
#line 5597
      if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 440U) {
#line 5598
        (new_hint->should_be_eax) ++;
      } else
#line 5597
      if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 424U) {
#line 5598
        (new_hint->should_be_eax) ++;
      }
#line 5600
      new_hints = jit_tree_insert(new_hints, reg___0, (jit_tree_value )new_hint, (int *)((void *)0));
#line 5582
      i ++;
    }
#line 5603
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 416U) {
#line 5603
      mark_calleesaved_regs(new_hints, op);
    }
#line 5605
    hints_refcount_inc(new_hints);
#line 5606
    op->allocator_hints = new_hints;
#line 5608
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 128U) {
#line 5609
      last_hints = (jit_tree *)((void *)0);
#line 5610
      ops_from_return = 0;
    } else {
#line 5612
      last_hints = new_hints;
#line 5613
      ops_from_return ++;
    }
#line 5560
    op = op->prev;
  }
#line 5616
  return;
}
}
/* END FUNCTION-DEF jit_collect_statistics LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF init_tigress LOC=UNKNOWN */
void init_tigress(void) 
{ 
  struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct *p1 ;
  int i2 ;
  struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct *p3 ;

  {
  while (1) {
    __asm__ volatile ("##_ANNOTATION_INITIALREGION_-TIG-iO-HQIz-2-init-tigress--2":);
    {
    {
    while (1) {
      __asm__ volatile ("##_ANNOTATION_ATOMICREGION_-TIG-iO-HQIz-2-init-tigress--1":);
      p1 = (struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct *)malloc(sizeof(struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct ));
      p1->next = p1;
      p1->prev = p1;
      _TIG_iO_HQIz_2_init_tigress_1_opaque_list_1 = p1;
      i2 = 0;
      while (i2 < 2) {
        p3 = (struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct *)malloc(sizeof(struct _TIG_iO_HQIz_2_init_tigress_1_opaqueNodeStruct ));
        p3->data = i2 * (_TIG_iE_HQIz_1_entropy | 10);
        p3->next = _TIG_iO_HQIz_2_init_tigress_1_opaque_list_1->next;
        p3->prev = _TIG_iO_HQIz_2_init_tigress_1_opaque_list_1;
        (_TIG_iO_HQIz_2_init_tigress_1_opaque_list_1->next)->prev = p3;
        _TIG_iO_HQIz_2_init_tigress_1_opaque_list_1->next = p3;
        i2 ++;
      }
      _TIG_iO_HQIz_2_init_tigress_1_opaque_ptr_1 = _TIG_iO_HQIz_2_init_tigress_1_opaque_list_1->next;
      _TIG_iO_HQIz_2_init_tigress_1_opaque_ptr_2 = _TIG_iO_HQIz_2_init_tigress_1_opaque_ptr_1;
      _TIG_iO_HQIz_2_init_tigress_1_opaque_ptr_2 = _TIG_iO_HQIz_2_init_tigress_1_opaque_ptr_2->next;
      break;
    }
    }
    }
    break;
  }
#line 19 "test-jit.c"
  return;
}
}
/* END FUNCTION-DEF init_tigress LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_messager LOC=UNKNOWN */
void jit_messager(struct jit *j , char *s , int i ) 
{ 
  struct jit_debug_info *tmp ;

  {
#line 6294 "./jitter-Darwin-X86-64.c"
  tmp = jit_debug_info_new((char const   *)"head.c", (char const   *)"jit_messager",
                           24);
#line 6294
  jit_add_op(j, (unsigned short)1921, (unsigned char )((0x01 << 2) | 0x02), (jit_value )s,
             (jit_value )((i & 0xfffffff) << 4), (jit_value )0, (unsigned char)0,
             tmp);
#line 6295
  return;
}
}
/* END FUNCTION-DEF jit_messager LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF analyze_function LOC=UNKNOWN */
__inline static void analyze_function(struct jit *jit , jit_op *first_op , jit_op *last_op ) 
{ 
  int changed ;
  struct code_refs_cache code_refs ;
  struct jit_func_info *func_info ;
  jit_op *op ;
  int tmp ;

  {
#line 3934
  code_refs.size = -1;
#line 3934
  code_refs.ops = (jit_op **)((void *)0);
#line 3936
  func_info = (struct jit_func_info *)first_op->arg[1];
#line 3938
  while (1) {
#line 3939
    changed = 0;
#line 3940
    op = last_op;
#line 3941
    while (1) {
#line 3942
      tmp = flw_analyze_op(jit, op, func_info, changed, & code_refs);
#line 3942
      changed |= tmp;
#line 3943
      if ((unsigned long )op == (unsigned long )first_op) {
#line 3943
        break;
      }
#line 3944
      op = op->prev;
    }
#line 3938
    if (! changed) {
#line 3938
      break;
    }
  }
#line 3947
  if (code_refs.ops) {
#line 3947
    free((void *)code_refs.ops);
  }
#line 3949
  return;
}
}
/* END FUNCTION-DEF analyze_function LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_regs LOC=UNKNOWN */
static void print_regs(jit_tree_key reg , jit_tree_value v , void *thunk ) 
{ 
  char buf[32] ;
  unsigned long long tmp ;
  unsigned long long tmp___0 ;

  {
#line 5020
  if (reg == (jit_tree_key )(2 << 1)) {
#line 5020
    return;
  }
#line 5021
  jit_get_reg_name(& jit_debugging_disasm, buf, (int )reg);
#line 5022
  tmp = __builtin_object_size(thunk, 1);
#line 5022
  __builtin___strcat_chk((char *)thunk, (char const   *)" ", tmp);
#line 5023
  tmp___0 = __builtin_object_size(thunk, 1);
#line 5023
  __builtin___strcat_chk((char *)thunk, (char const   *)(buf), tmp___0);
#line 5024
  return;
}
}
/* END FUNCTION-DEF print_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF sse_alu_sd_reg_safeimm LOC=UNKNOWN */
static void sse_alu_sd_reg_safeimm(struct jit *jit , jit_op *op , int op_id , int reg ,
                                   double *imm ) 
{ 
  jit_hw_reg *r ;
  jit_hw_reg *tmp ;
  int _amd64_width_temp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  unsigned char *tmp___4 ;
  int tmp___5 ;
  unsigned char *tmp___6 ;
  amd64_imm_buf imb ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  int tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  int _amd64_width_temp___0 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  unsigned char *tmp___55 ;
  int tmp___56 ;
  unsigned char *tmp___57 ;
  amd64_imm_buf imb___4 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  int tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;

  {
#line 1482
  if ((jit_unsigned_value )imm > 0xffffffffUL) {
#line 1483
    tmp = jit_get_unused_reg(jit->reg_al, op, 0);
#line 1483
    r = tmp;
#line 1484
    if (r) {
#line 1485
      while (1) {
#line 1485
        _amd64_width_temp = (size_t )((jit_value )imm) == (size_t )((int )((size_t )((jit_value )imm)));
#line 1485
        while (1) {
#line 1485
          while (1) {
#line 1485
            if (_amd64_width_temp) {
#line 1485
              tmp___2 = 4;
            } else {
#line 1485
              tmp___2 = 8;
            }
#line 1485
            if (tmp___2 > 4) {
#line 1485
              tmp___1 = 8;
            } else {
#line 1485
              tmp___1 = 0;
            }
#line 1485
            if (r->id > 7) {
#line 1485
              tmp___3 = 1;
            } else {
#line 1485
              tmp___3 = 0;
            }
#line 1485
            _amd64_rex_bits = (unsigned char )(tmp___1 | tmp___3);
#line 1485
            if ((int )_amd64_rex_bits != 0) {
#line 1485
              tmp___4 = jit->ip;
#line 1485
              (jit->ip) ++;
#line 1485
              *tmp___4 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
            } else {
#line 1485
              if (_amd64_width_temp) {
#line 1485
                tmp___5 = 4;
              } else {
#line 1485
                tmp___5 = 8;
              }
#line 1485
              if (tmp___5 == 1) {
#line 1485
                tmp___4 = jit->ip;
#line 1485
                (jit->ip) ++;
#line 1485
                *tmp___4 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
              }
            }
#line 1485
            break;
          }
#line 1485
          tmp___6 = jit->ip;
#line 1485
          (jit->ip) ++;
#line 1485
          *tmp___6 = (unsigned char )(184 + (r->id & 0x7));
#line 1485
          if (_amd64_width_temp) {
#line 1485
            tmp___19 = 4;
          } else {
#line 1485
            tmp___19 = 8;
          }
#line 1485
          if (tmp___19 == 8) {
#line 1485
            while (1) {
#line 1485
              imb.val = (size_t )((jit_value )imm);
#line 1485
              tmp___7 = jit->ip;
#line 1485
              (jit->ip) ++;
#line 1485
              *tmp___7 = imb.b[0];
#line 1485
              tmp___8 = jit->ip;
#line 1485
              (jit->ip) ++;
#line 1485
              *tmp___8 = imb.b[1];
#line 1485
              tmp___9 = jit->ip;
#line 1485
              (jit->ip) ++;
#line 1485
              *tmp___9 = imb.b[2];
#line 1485
              tmp___10 = jit->ip;
#line 1485
              (jit->ip) ++;
#line 1485
              *tmp___10 = imb.b[3];
#line 1485
              tmp___11 = jit->ip;
#line 1485
              (jit->ip) ++;
#line 1485
              *tmp___11 = imb.b[4];
#line 1485
              tmp___12 = jit->ip;
#line 1485
              (jit->ip) ++;
#line 1485
              *tmp___12 = imb.b[5];
#line 1485
              tmp___13 = jit->ip;
#line 1485
              (jit->ip) ++;
#line 1485
              *tmp___13 = imb.b[6];
#line 1485
              tmp___14 = jit->ip;
#line 1485
              (jit->ip) ++;
#line 1485
              *tmp___14 = imb.b[7];
#line 1485
              break;
            }
          } else {
#line 1485
            while (1) {
#line 1485
              imb___0.val = (int )((size_t )((jit_value )imm));
#line 1485
              tmp___15 = jit->ip;
#line 1485
              (jit->ip) ++;
#line 1485
              *tmp___15 = imb___0.b[0];
#line 1485
              tmp___16 = jit->ip;
#line 1485
              (jit->ip) ++;
#line 1485
              *tmp___16 = imb___0.b[1];
#line 1485
              tmp___17 = jit->ip;
#line 1485
              (jit->ip) ++;
#line 1485
              *tmp___17 = imb___0.b[2];
#line 1485
              tmp___18 = jit->ip;
#line 1485
              (jit->ip) ++;
#line 1485
              *tmp___18 = imb___0.b[3];
#line 1485
              break;
            }
          }
#line 1485
          break;
        }
#line 1485
        break;
      }
#line 1486
      while (1) {
#line 1486
        tmp___20 = jit->ip;
#line 1486
        (jit->ip) ++;
#line 1486
        *tmp___20 = (unsigned char)242;
#line 1486
        while (1) {
#line 1486
          if (reg > 7) {
#line 1486
            tmp___21 = 4;
          } else {
#line 1486
            tmp___21 = 0;
          }
#line 1486
          if (r->id == 16) {
#line 1486
            tmp___24 = 0;
          } else {
#line 1486
            tmp___24 = r->id;
          }
#line 1486
          if (tmp___24 > 7) {
#line 1486
            tmp___23 = 1;
          } else {
#line 1486
            tmp___23 = 0;
          }
#line 1486
          _amd64_rex_bits___0 = (unsigned char )(tmp___21 | tmp___23);
#line 1486
          if ((int )_amd64_rex_bits___0 != 0) {
#line 1486
            tmp___25 = jit->ip;
#line 1486
            (jit->ip) ++;
#line 1486
            *tmp___25 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
          }
#line 1486
          break;
        }
#line 1486
        tmp___26 = jit->ip;
#line 1486
        (jit->ip) ++;
#line 1486
        *tmp___26 = (unsigned char)15;
#line 1486
        tmp___27 = jit->ip;
#line 1486
        (jit->ip) ++;
#line 1486
        *tmp___27 = (unsigned char )op_id;
#line 1486
        while (1) {
#line 1486
          if (r->id == 16) {
#line 1486
            while (1) {
#line 1486
              tmp___28 = jit->ip;
#line 1486
              (jit->ip) ++;
#line 1486
              *tmp___28 = (unsigned char )((((reg & 0x7) & 0x07) << 3) | 5);
#line 1486
              break;
            }
#line 1486
            while (1) {
#line 1486
              imb___1.val = 0;
#line 1486
              tmp___29 = jit->ip;
#line 1486
              (jit->ip) ++;
#line 1486
              *tmp___29 = imb___1.b[0];
#line 1486
              tmp___30 = jit->ip;
#line 1486
              (jit->ip) ++;
#line 1486
              *tmp___30 = imb___1.b[1];
#line 1486
              tmp___31 = jit->ip;
#line 1486
              (jit->ip) ++;
#line 1486
              *tmp___31 = imb___1.b[2];
#line 1486
              tmp___32 = jit->ip;
#line 1486
              (jit->ip) ++;
#line 1486
              *tmp___32 = imb___1.b[3];
#line 1486
              break;
            }
          } else {
#line 1486
            while (1) {
#line 1486
              if ((r->id & 0x7) == 4) {
#line 1486
                while (1) {
#line 1486
                  tmp___33 = jit->ip;
#line 1486
                  (jit->ip) ++;
#line 1486
                  *tmp___33 = (unsigned char )((((reg & 0x7) & 0x07) << 3) | 4);
#line 1486
                  break;
                }
#line 1486
                while (1) {
#line 1486
                  tmp___34 = jit->ip;
#line 1486
                  (jit->ip) ++;
#line 1486
                  *tmp___34 = (unsigned char )((4 << 3) | 4);
#line 1486
                  break;
                }
#line 1486
                break;
              }
#line 1486
              if ((r->id & 0x7) != 5) {
#line 1486
                while (1) {
#line 1486
                  tmp___43 = jit->ip;
#line 1486
                  (jit->ip) ++;
#line 1486
                  *tmp___43 = (unsigned char )((((reg & 0x7) & 0x07) << 3) | ((r->id & 0x7) & 0x07));
#line 1486
                  break;
                }
#line 1486
                break;
              }
#line 1486
              while (1) {
#line 1486
                tmp___44 = jit->ip;
#line 1486
                (jit->ip) ++;
#line 1486
                *tmp___44 = (unsigned char )(((1 << 6) | (((reg & 0x7) & 0x07) << 3)) | ((r->id & 0x7) & 0x07));
#line 1486
                break;
              }
#line 1486
              while (1) {
#line 1486
                *(jit->ip) = (unsigned char)0;
#line 1486
                (jit->ip) ++;
#line 1486
                break;
              }
#line 1486
              break;
            }
          }
#line 1486
          break;
        }
#line 1486
        break;
      }
    } else {
#line 1488
      while (1) {
#line 1488
        while (1) {
#line 1488
          _amd64_rex_bits___1 = (unsigned char)0;
#line 1488
          if ((int )_amd64_rex_bits___1 != 0) {
#line 1488
            tmp___50 = jit->ip;
#line 1488
            (jit->ip) ++;
#line 1488
            *tmp___50 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
          }
#line 1488
          break;
        }
#line 1488
        tmp___51 = jit->ip;
#line 1488
        (jit->ip) ++;
#line 1488
        *tmp___51 = (unsigned char)80;
#line 1488
        break;
      }
#line 1489
      while (1) {
#line 1489
        _amd64_width_temp___0 = (size_t )((jit_value )imm) == (size_t )((int )((size_t )((jit_value )imm)));
#line 1489
        while (1) {
#line 1489
          while (1) {
#line 1489
            if (_amd64_width_temp___0) {
#line 1489
              tmp___54 = 4;
            } else {
#line 1489
              tmp___54 = 8;
            }
#line 1489
            if (tmp___54 > 4) {
#line 1489
              tmp___53 = 8;
            } else {
#line 1489
              tmp___53 = 0;
            }
#line 1489
            _amd64_rex_bits___2 = (unsigned char )tmp___53;
#line 1489
            if ((int )_amd64_rex_bits___2 != 0) {
#line 1489
              tmp___55 = jit->ip;
#line 1489
              (jit->ip) ++;
#line 1489
              *tmp___55 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
            } else {
#line 1489
              if (_amd64_width_temp___0) {
#line 1489
                tmp___56 = 4;
              } else {
#line 1489
                tmp___56 = 8;
              }
#line 1489
              if (tmp___56 == 1) {
#line 1489
                tmp___55 = jit->ip;
#line 1489
                (jit->ip) ++;
#line 1489
                *tmp___55 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
              }
            }
#line 1489
            break;
          }
#line 1489
          tmp___57 = jit->ip;
#line 1489
          (jit->ip) ++;
#line 1489
          *tmp___57 = (unsigned char)184;
#line 1489
          if (_amd64_width_temp___0) {
#line 1489
            tmp___70 = 4;
          } else {
#line 1489
            tmp___70 = 8;
          }
#line 1489
          if (tmp___70 == 8) {
#line 1489
            while (1) {
#line 1489
              imb___4.val = (size_t )((jit_value )imm);
#line 1489
              tmp___58 = jit->ip;
#line 1489
              (jit->ip) ++;
#line 1489
              *tmp___58 = imb___4.b[0];
#line 1489
              tmp___59 = jit->ip;
#line 1489
              (jit->ip) ++;
#line 1489
              *tmp___59 = imb___4.b[1];
#line 1489
              tmp___60 = jit->ip;
#line 1489
              (jit->ip) ++;
#line 1489
              *tmp___60 = imb___4.b[2];
#line 1489
              tmp___61 = jit->ip;
#line 1489
              (jit->ip) ++;
#line 1489
              *tmp___61 = imb___4.b[3];
#line 1489
              tmp___62 = jit->ip;
#line 1489
              (jit->ip) ++;
#line 1489
              *tmp___62 = imb___4.b[4];
#line 1489
              tmp___63 = jit->ip;
#line 1489
              (jit->ip) ++;
#line 1489
              *tmp___63 = imb___4.b[5];
#line 1489
              tmp___64 = jit->ip;
#line 1489
              (jit->ip) ++;
#line 1489
              *tmp___64 = imb___4.b[6];
#line 1489
              tmp___65 = jit->ip;
#line 1489
              (jit->ip) ++;
#line 1489
              *tmp___65 = imb___4.b[7];
#line 1489
              break;
            }
          } else {
#line 1489
            while (1) {
#line 1489
              imb___5.val = (int )((size_t )((jit_value )imm));
#line 1489
              tmp___66 = jit->ip;
#line 1489
              (jit->ip) ++;
#line 1489
              *tmp___66 = imb___5.b[0];
#line 1489
              tmp___67 = jit->ip;
#line 1489
              (jit->ip) ++;
#line 1489
              *tmp___67 = imb___5.b[1];
#line 1489
              tmp___68 = jit->ip;
#line 1489
              (jit->ip) ++;
#line 1489
              *tmp___68 = imb___5.b[2];
#line 1489
              tmp___69 = jit->ip;
#line 1489
              (jit->ip) ++;
#line 1489
              *tmp___69 = imb___5.b[3];
#line 1489
              break;
            }
          }
#line 1489
          break;
        }
#line 1489
        break;
      }
#line 1490
      while (1) {
#line 1490
        tmp___71 = jit->ip;
#line 1490
        (jit->ip) ++;
#line 1490
        *tmp___71 = (unsigned char)242;
#line 1490
        while (1) {
#line 1490
          if (reg > 7) {
#line 1490
            tmp___72 = 4;
          } else {
#line 1490
            tmp___72 = 0;
          }
#line 1490
          _amd64_rex_bits___3 = (unsigned char )tmp___72;
#line 1490
          if ((int )_amd64_rex_bits___3 != 0) {
#line 1490
            tmp___73 = jit->ip;
#line 1490
            (jit->ip) ++;
#line 1490
            *tmp___73 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
          }
#line 1490
          break;
        }
#line 1490
        tmp___74 = jit->ip;
#line 1490
        (jit->ip) ++;
#line 1490
        *tmp___74 = (unsigned char)15;
#line 1490
        tmp___75 = jit->ip;
#line 1490
        (jit->ip) ++;
#line 1490
        *tmp___75 = (unsigned char )op_id;
#line 1490
        while (1) {
#line 1490
          while (1) {
#line 1490
            while (1) {
#line 1490
              tmp___91 = jit->ip;
#line 1490
              (jit->ip) ++;
#line 1490
              *tmp___91 = (unsigned char )(((reg & 0x7) & 0x07) << 3);
#line 1490
              break;
            }
#line 1490
            break;
#line 1490
            while (1) {
#line 1490
              tmp___92 = jit->ip;
#line 1490
              (jit->ip) ++;
#line 1490
              *tmp___92 = (unsigned char )((1 << 6) | (((reg & 0x7) & 0x07) << 3));
#line 1490
              break;
            }
#line 1490
            while (1) {
#line 1490
              *(jit->ip) = (unsigned char)0;
#line 1490
              (jit->ip) ++;
#line 1490
              break;
            }
#line 1490
            break;
          }
#line 1490
          break;
        }
#line 1490
        break;
      }
#line 1491
      while (1) {
#line 1491
        while (1) {
#line 1491
          _amd64_rex_bits___4 = (unsigned char)0;
#line 1491
          if ((int )_amd64_rex_bits___4 != 0) {
#line 1491
            tmp___98 = jit->ip;
#line 1491
            (jit->ip) ++;
#line 1491
            *tmp___98 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
          }
#line 1491
          break;
        }
#line 1491
        tmp___99 = jit->ip;
#line 1491
        (jit->ip) ++;
#line 1491
        *tmp___99 = (unsigned char)88;
#line 1491
        break;
      }
    }
  } else {
#line 1494
    while (1) {
#line 1494
      tmp___100 = jit->ip;
#line 1494
      (jit->ip) ++;
#line 1494
      *tmp___100 = (unsigned char)242;
#line 1494
      while (1) {
#line 1494
        if (reg > 7) {
#line 1494
          tmp___101 = 4;
        } else {
#line 1494
          tmp___101 = 0;
        }
#line 1494
        _amd64_rex_bits___5 = (unsigned char )(8 | tmp___101);
#line 1494
        if ((int )_amd64_rex_bits___5 != 0) {
#line 1494
          tmp___102 = jit->ip;
#line 1494
          (jit->ip) ++;
#line 1494
          *tmp___102 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
        }
#line 1494
        break;
      }
#line 1494
      tmp___103 = jit->ip;
#line 1494
      (jit->ip) ++;
#line 1494
      *tmp___103 = (unsigned char)15;
#line 1494
      tmp___104 = jit->ip;
#line 1494
      (jit->ip) ++;
#line 1494
      *tmp___104 = (unsigned char )op_id;
#line 1494
      while (1) {
#line 1494
        tmp___105 = jit->ip;
#line 1494
        (jit->ip) ++;
#line 1494
        *tmp___105 = (unsigned char )(((reg & 0x07) << 3) | 4);
#line 1494
        break;
      }
#line 1494
      while (1) {
#line 1494
        tmp___106 = jit->ip;
#line 1494
        (jit->ip) ++;
#line 1494
        *tmp___106 = (unsigned char )((4 << 3) | 5);
#line 1494
        break;
      }
#line 1494
      while (1) {
#line 1494
        imb___9.val = (int )((jit_value )imm);
#line 1494
        tmp___107 = jit->ip;
#line 1494
        (jit->ip) ++;
#line 1494
        *tmp___107 = imb___9.b[0];
#line 1494
        tmp___108 = jit->ip;
#line 1494
        (jit->ip) ++;
#line 1494
        *tmp___108 = imb___9.b[1];
#line 1494
        tmp___109 = jit->ip;
#line 1494
        (jit->ip) ++;
#line 1494
        *tmp___109 = imb___9.b[2];
#line 1494
        tmp___110 = jit->ip;
#line 1494
        (jit->ip) ++;
#line 1494
        *tmp___110 = imb___9.b[3];
#line 1494
        break;
      }
#line 1494
      break;
    }
  }
#line 1496
  return;
}
}
/* END FUNCTION-DEF sse_alu_sd_reg_safeimm LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF fac LOC=UNKNOWN */
void fac(int n ) 
{ 
  int s ;
  int i ;

  {
#line 22 "test-jit.c"
  s = 1;
#line 24
  i = 2;
#line 24
  while (i <= n) {
#line 25
    s *= i;
#line 24
    i ++;
  }
#line 27
  printf((char const   */* __restrict  */)"fac(%i)=%i\n", n, s);
#line 28
  return;
}
}
/* END FUNCTION-DEF fac LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_pop_callee_saved_regs LOC=UNKNOWN */
static int emit_pop_callee_saved_regs(struct jit *jit ) 
{ 
  int count ;
  jit_hw_reg *active_regs[32] ;
  int stack_space ;
  int tmp ;
  int stack_offset ;
  int i ;
  int tmp___0 ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;

  {
#line 2815 "./jitter-Darwin-X86-64.c"
  count = 0;
#line 2818
  tmp = list_callee_saved_regs(jit, jit->current_func, active_regs, & count);
#line 2818
  stack_space = tmp;
#line 2819
  stack_offset = 0;
#line 2820
  i = 0;
#line 2820
  while (i < count) {
#line 2821
    tmp___0 = emit_pop_reg(jit, active_regs[i], stack_offset);
#line 2821
    stack_offset += tmp___0;
#line 2820
    i ++;
  }
#line 2823
  if (stack_space) {
#line 2823
    while (1) {
#line 2823
      if ((jit_value )stack_space >= -128L) {
#line 2823
        if ((jit_value )stack_space <= 127L) {
#line 2823
          while (1) {
#line 2823
            _amd64_rex_bits = (unsigned char)8;
#line 2823
            if ((int )_amd64_rex_bits != 0) {
#line 2823
              tmp___1 = jit->ip;
#line 2823
              (jit->ip) ++;
#line 2823
              *tmp___1 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
            }
#line 2823
            break;
          }
#line 2823
          tmp___2 = jit->ip;
#line 2823
          (jit->ip) ++;
#line 2823
          *tmp___2 = (unsigned char)131;
#line 2823
          while (1) {
#line 2823
            while (1) {
#line 2823
              tmp___3 = jit->ip;
#line 2823
              (jit->ip) ++;
#line 2823
              *tmp___3 = (unsigned char )((3 << 6) | 4);
#line 2823
              break;
            }
#line 2823
            break;
          }
#line 2823
          while (1) {
#line 2823
            *(jit->ip) = (unsigned char )(stack_space & 0xff);
#line 2823
            (jit->ip) ++;
#line 2823
            break;
          }
        } else {
#line 2823
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
#line 2823
        while (1) {
#line 2823
          _amd64_rex_bits___1 = (unsigned char)8;
#line 2823
          if ((int )_amd64_rex_bits___1 != 0) {
#line 2823
            tmp___10 = jit->ip;
#line 2823
            (jit->ip) ++;
#line 2823
            *tmp___10 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
          }
#line 2823
          break;
        }
#line 2823
        tmp___11 = jit->ip;
#line 2823
        (jit->ip) ++;
#line 2823
        *tmp___11 = (unsigned char)129;
#line 2823
        while (1) {
#line 2823
          while (1) {
#line 2823
            tmp___12 = jit->ip;
#line 2823
            (jit->ip) ++;
#line 2823
            *tmp___12 = (unsigned char )((3 << 6) | 4);
#line 2823
            break;
          }
#line 2823
          break;
        }
#line 2823
        while (1) {
#line 2823
          imb___0.val = stack_space;
#line 2823
          tmp___13 = jit->ip;
#line 2823
          (jit->ip) ++;
#line 2823
          *tmp___13 = imb___0.b[0];
#line 2823
          tmp___14 = jit->ip;
#line 2823
          (jit->ip) ++;
#line 2823
          *tmp___14 = imb___0.b[1];
#line 2823
          tmp___15 = jit->ip;
#line 2823
          (jit->ip) ++;
#line 2823
          *tmp___15 = imb___0.b[2];
#line 2823
          tmp___16 = jit->ip;
#line 2823
          (jit->ip) ++;
#line 2823
          *tmp___16 = imb___0.b[3];
#line 2823
          break;
        }
      }
#line 2823
      break;
    }
  }
#line 2824
  return (stack_space / (int )sizeof(void *));
}
}
/* END FUNCTION-DEF emit_pop_callee_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF is_spilled LOC=UNKNOWN */
static int is_spilled(jit_value arg_id , jit_op *prepare_op , int *reg ) 
{ 
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp ;

  {
#line 3351
  tmp = rmap_get(prepare_op->regmap, arg_id);
#line 3351
  hreg = tmp;
#line 3353
  if (hreg) {
#line 3354
    *reg = hreg->id;
#line 3355
    return (0);
  } else {
#line 3356
    return (1);
  }
}
}
/* END FUNCTION-DEF is_spilled LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_comment LOC=UNKNOWN */
void print_comment(struct output_buf *linebuf , jit_op *op ) 
{ 
  char *str ;
  int i ;
  size_t tmp ;

  {
#line 4485
  str = (char *)op->arg[0];
#line 4486
  ob_append(linebuf, "// ");
#line 4487
  i = 0;
#line 4487
  while (1) {
#line 4487
    tmp = strlen((char const   *)str);
#line 4487
    if (! ((size_t )i < tmp)) {
#line 4487
      break;
    }
#line 4488
    if ((int )*(str + i) == 13) {
#line 4488
      ob_append(linebuf, "\n// ");
    } else
#line 4488
    if ((int )*(str + i) == 10) {
#line 4488
      ob_append(linebuf, "\n// ");
    } else {
#line 4489
      ob_printf(linebuf, (char const   *)"%c", (int )*(str + i));
    }
#line 4487
    i ++;
  }
#line 4491
  return;
}
}
/* END FUNCTION-DEF print_comment LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF candidate_score LOC=UNKNOWN */
static int candidate_score(jit_op *op , jit_value virtreg , jit_hw_reg *hreg , int *spill ,
                           jit_value *associated_virtreg ) 
{ 
  int score ;
  jit_value x ;
  int hw_associated ;
  jit_hw_reg *tmp ;
  int alive ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  jit_tree *hint_node ;
  jit_tree *tmp___3 ;
  int is_to_be_used ;
  struct jit_allocator_hint *hint ;
  int used_in_steps ;
  jit_tree *hint_node___0 ;
  jit_tree *tmp___4 ;
  struct jit_allocator_hint *hint___0 ;

  {
#line 1978
  score = 0;
#line 1979
  score -= (int )hreg->priority;
#line 1982
  tmp = rmap_is_associated(op->regmap, hreg->id, (int )hreg->fp, & x);
#line 1982
  hw_associated = (unsigned long )tmp != (unsigned long )((void *)0);
#line 1984
  alive = 0;
#line 1985
  if (hw_associated) {
#line 1986
    tmp___0 = jit_set_get(op->live_in, (int )x);
#line 1986
    if (tmp___0) {
#line 1986
      tmp___2 = 1;
    } else {
#line 1986
      tmp___1 = jit_set_get(op->live_out, (int )x);
#line 1986
      if (tmp___1) {
#line 1986
        tmp___2 = 1;
      } else {
#line 1986
        tmp___2 = 0;
      }
    }
#line 1986
    alive = tmp___2;
  }
#line 1988
  if (! alive) {
#line 1988
    score += 10000;
  }
#line 1990
  *spill = 0;
#line 1991
  if (hw_associated) {
#line 1993
    score -= 100000;
#line 1994
    *spill = 1;
#line 1996
    *associated_virtreg = x;
#line 1998
    tmp___3 = jit_tree_search(op->allocator_hints, x);
#line 1998
    hint_node = tmp___3;
#line 1999
    is_to_be_used = (unsigned long )hint_node != (unsigned long )((void *)0);
#line 2001
    if (! is_to_be_used) {
#line 2001
      score += 50000;
    } else {
#line 2003
      hint = (struct jit_allocator_hint *)hint_node->value;
#line 2004
      used_in_steps = - (hint->last_pos - op->normalized_pos);
#line 2005
      if (hw_associated) {
#line 2005
        if (used_in_steps == 0) {
#line 2005
          return ((-0x7FFFFFFF-1));
        } else {
#line 2006
          score += used_in_steps * 5;
        }
      } else {
#line 2006
        score += used_in_steps * 5;
      }
    }
  }
#line 2013
  tmp___4 = jit_tree_search(op->allocator_hints, virtreg);
#line 2013
  hint_node___0 = tmp___4;
#line 2014
  if (hint_node___0) {
#line 2015
    hint___0 = (struct jit_allocator_hint *)hint_node___0->value;
#line 2016
    if ((int )hreg->fp == 0) {
#line 2016
      if (hreg->id == 0) {
#line 2017
        score += hint___0->should_be_eax * 5;
      }
    }
#line 2019
    if (hreg->callee_saved) {
#line 2019
      score += (hint___0->should_be_calleesaved - 1) * 15;
    }
  }
#line 2022
  return (score);
}
}
/* END FUNCTION-DEF candidate_score LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_reg_allocator_create LOC=UNKNOWN */
struct jit_reg_allocator *jit_reg_allocator_create(void) 
{ 
  struct jit_reg_allocator *a ;
  void *tmp ;
  void *tmp___0 ;
  jit_hw_reg __constr_expr_0 ;
  jit_hw_reg __constr_expr_1 ;
  jit_hw_reg __constr_expr_2 ;
  jit_hw_reg __constr_expr_3 ;
  jit_hw_reg __constr_expr_4 ;
  jit_hw_reg __constr_expr_5 ;
  jit_hw_reg __constr_expr_6 ;
  jit_hw_reg __constr_expr_7 ;
  jit_hw_reg __constr_expr_8 ;
  jit_hw_reg __constr_expr_9 ;
  jit_hw_reg __constr_expr_10 ;
  jit_hw_reg __constr_expr_11 ;
  jit_hw_reg __constr_expr_12 ;
  int reg ;
  void *tmp___1 ;
  int tmp___2 ;
  jit_hw_reg __constr_expr_13 ;
  int tmp___3 ;
  jit_hw_reg __constr_expr_14 ;
  int tmp___4 ;
  jit_hw_reg __constr_expr_15 ;
  int tmp___5 ;
  jit_hw_reg __constr_expr_16 ;
  int tmp___6 ;
  jit_hw_reg __constr_expr_17 ;
  int tmp___7 ;
  jit_hw_reg __constr_expr_18 ;
  int tmp___8 ;
  jit_hw_reg __constr_expr_19 ;
  int tmp___9 ;
  jit_hw_reg __constr_expr_20 ;
  int tmp___10 ;
  jit_hw_reg __constr_expr_21 ;
  int tmp___11 ;
  jit_hw_reg __constr_expr_22 ;
  void *tmp___12 ;
  void *tmp___13 ;
  int i ;

  {
#line 2671
  tmp = malloc((size_t )sizeof(struct jit_reg_allocator ));
#line 2671
  a = (struct jit_reg_allocator *)tmp;
#line 2672
  a->gp_reg_cnt = 13;
#line 2674
  tmp___0 = malloc((size_t )(sizeof(jit_hw_reg ) * (unsigned long long )a->gp_reg_cnt));
#line 2674
  a->gp_regs = (jit_hw_reg *)tmp___0;
#line 2676
  __constr_expr_0.id = 0;
#line 2676
  __constr_expr_0.name = "rax";
#line 2676
  __constr_expr_0.callee_saved = (char)0;
#line 2676
  __constr_expr_0.fp = (char)0;
#line 2676
  __constr_expr_0.priority = (short)7;
#line 2676
  *(a->gp_regs + 0) = __constr_expr_0;
#line 2677
  __constr_expr_1.id = 3;
#line 2677
  __constr_expr_1.name = "rbx";
#line 2677
  __constr_expr_1.callee_saved = (char)1;
#line 2677
  __constr_expr_1.fp = (char)0;
#line 2677
  __constr_expr_1.priority = (short)8;
#line 2677
  *(a->gp_regs + 1) = __constr_expr_1;
#line 2678
  __constr_expr_2.id = 1;
#line 2678
  __constr_expr_2.name = "rcx";
#line 2678
  __constr_expr_2.callee_saved = (char)0;
#line 2678
  __constr_expr_2.fp = (char)0;
#line 2678
  __constr_expr_2.priority = (short)4;
#line 2678
  *(a->gp_regs + 2) = __constr_expr_2;
#line 2679
  __constr_expr_3.id = 2;
#line 2679
  __constr_expr_3.name = "rdx";
#line 2679
  __constr_expr_3.callee_saved = (char)0;
#line 2679
  __constr_expr_3.fp = (char)0;
#line 2679
  __constr_expr_3.priority = (short)3;
#line 2679
  *(a->gp_regs + 3) = __constr_expr_3;
#line 2680
  __constr_expr_4.id = 6;
#line 2680
  __constr_expr_4.name = "rsi";
#line 2680
  __constr_expr_4.callee_saved = (char)0;
#line 2680
  __constr_expr_4.fp = (char)0;
#line 2680
  __constr_expr_4.priority = (short)2;
#line 2680
  *(a->gp_regs + 4) = __constr_expr_4;
#line 2681
  __constr_expr_5.id = 7;
#line 2681
  __constr_expr_5.name = "rdi";
#line 2681
  __constr_expr_5.callee_saved = (char)0;
#line 2681
  __constr_expr_5.fp = (char)0;
#line 2681
  __constr_expr_5.priority = (short)1;
#line 2681
  *(a->gp_regs + 5) = __constr_expr_5;
#line 2682
  __constr_expr_6.id = 8;
#line 2682
  __constr_expr_6.name = "r8";
#line 2682
  __constr_expr_6.callee_saved = (char)0;
#line 2682
  __constr_expr_6.fp = (char)0;
#line 2682
  __constr_expr_6.priority = (short)5;
#line 2682
  *(a->gp_regs + 6) = __constr_expr_6;
#line 2683
  __constr_expr_7.id = 9;
#line 2683
  __constr_expr_7.name = "r9";
#line 2683
  __constr_expr_7.callee_saved = (char)0;
#line 2683
  __constr_expr_7.fp = (char)0;
#line 2683
  __constr_expr_7.priority = (short)6;
#line 2683
  *(a->gp_regs + 7) = __constr_expr_7;
#line 2684
  __constr_expr_8.id = 10;
#line 2684
  __constr_expr_8.name = "r10";
#line 2684
  __constr_expr_8.callee_saved = (char)0;
#line 2684
  __constr_expr_8.fp = (char)0;
#line 2684
  __constr_expr_8.priority = (short)9;
#line 2684
  *(a->gp_regs + 8) = __constr_expr_8;
#line 2685
  __constr_expr_9.id = 11;
#line 2685
  __constr_expr_9.name = "r11";
#line 2685
  __constr_expr_9.callee_saved = (char)0;
#line 2685
  __constr_expr_9.fp = (char)0;
#line 2685
  __constr_expr_9.priority = (short)10;
#line 2685
  *(a->gp_regs + 9) = __constr_expr_9;
#line 2686
  __constr_expr_10.id = 12;
#line 2686
  __constr_expr_10.name = "r12";
#line 2686
  __constr_expr_10.callee_saved = (char)1;
#line 2686
  __constr_expr_10.fp = (char)0;
#line 2686
  __constr_expr_10.priority = (short)11;
#line 2686
  *(a->gp_regs + 10) = __constr_expr_10;
#line 2687
  __constr_expr_11.id = 14;
#line 2687
  __constr_expr_11.name = "r14";
#line 2687
  __constr_expr_11.callee_saved = (char)1;
#line 2687
  __constr_expr_11.fp = (char)0;
#line 2687
  __constr_expr_11.priority = (short)13;
#line 2687
  *(a->gp_regs + 11) = __constr_expr_11;
#line 2688
  __constr_expr_12.id = 15;
#line 2688
  __constr_expr_12.name = "r15";
#line 2688
  __constr_expr_12.callee_saved = (char)1;
#line 2688
  __constr_expr_12.fp = (char)0;
#line 2688
  __constr_expr_12.priority = (short)14;
#line 2688
  *(a->gp_regs + 12) = __constr_expr_12;
#line 2694
  a->gp_arg_reg_cnt = 6;
#line 2696
  a->fp_reg = 5;
#line 2697
  a->ret_reg = a->gp_regs + 0;
#line 2699
  a->fp_reg_cnt = 10;
#line 2701
  reg = 0;
#line 2702
  tmp___1 = malloc((size_t )(sizeof(jit_hw_reg ) * (unsigned long long )a->fp_reg_cnt));
#line 2702
  a->fp_regs = (jit_hw_reg *)tmp___1;
#line 2704
  tmp___2 = reg;
#line 2704
  reg ++;
#line 2704
  __constr_expr_13.id = 0;
#line 2704
  __constr_expr_13.name = "xmm0";
#line 2704
  __constr_expr_13.callee_saved = (char)0;
#line 2704
  __constr_expr_13.fp = (char)1;
#line 2704
  __constr_expr_13.priority = (short)99;
#line 2704
  *(a->fp_regs + tmp___2) = __constr_expr_13;
#line 2705
  tmp___3 = reg;
#line 2705
  reg ++;
#line 2705
  __constr_expr_14.id = 1;
#line 2705
  __constr_expr_14.name = "xmm1";
#line 2705
  __constr_expr_14.callee_saved = (char)0;
#line 2705
  __constr_expr_14.fp = (char)1;
#line 2705
  __constr_expr_14.priority = (short)98;
#line 2705
  *(a->fp_regs + tmp___3) = __constr_expr_14;
#line 2706
  tmp___4 = reg;
#line 2706
  reg ++;
#line 2706
  __constr_expr_15.id = 2;
#line 2706
  __constr_expr_15.name = "xmm2";
#line 2706
  __constr_expr_15.callee_saved = (char)0;
#line 2706
  __constr_expr_15.fp = (char)1;
#line 2706
  __constr_expr_15.priority = (short)97;
#line 2706
  *(a->fp_regs + tmp___4) = __constr_expr_15;
#line 2707
  tmp___5 = reg;
#line 2707
  reg ++;
#line 2707
  __constr_expr_16.id = 3;
#line 2707
  __constr_expr_16.name = "xmm3";
#line 2707
  __constr_expr_16.callee_saved = (char)0;
#line 2707
  __constr_expr_16.fp = (char)1;
#line 2707
  __constr_expr_16.priority = (short)96;
#line 2707
  *(a->fp_regs + tmp___5) = __constr_expr_16;
#line 2708
  tmp___6 = reg;
#line 2708
  reg ++;
#line 2708
  __constr_expr_17.id = 4;
#line 2708
  __constr_expr_17.name = "xmm4";
#line 2708
  __constr_expr_17.callee_saved = (char)0;
#line 2708
  __constr_expr_17.fp = (char)1;
#line 2708
  __constr_expr_17.priority = (short)95;
#line 2708
  *(a->fp_regs + tmp___6) = __constr_expr_17;
#line 2709
  tmp___7 = reg;
#line 2709
  reg ++;
#line 2709
  __constr_expr_18.id = 5;
#line 2709
  __constr_expr_18.name = "xmm5";
#line 2709
  __constr_expr_18.callee_saved = (char)0;
#line 2709
  __constr_expr_18.fp = (char)1;
#line 2709
  __constr_expr_18.priority = (short)94;
#line 2709
  *(a->fp_regs + tmp___7) = __constr_expr_18;
#line 2710
  tmp___8 = reg;
#line 2710
  reg ++;
#line 2710
  __constr_expr_19.id = 6;
#line 2710
  __constr_expr_19.name = "xmm6";
#line 2710
  __constr_expr_19.callee_saved = (char)0;
#line 2710
  __constr_expr_19.fp = (char)1;
#line 2710
  __constr_expr_19.priority = (short)93;
#line 2710
  *(a->fp_regs + tmp___8) = __constr_expr_19;
#line 2711
  tmp___9 = reg;
#line 2711
  reg ++;
#line 2711
  __constr_expr_20.id = 7;
#line 2711
  __constr_expr_20.name = "xmm7";
#line 2711
  __constr_expr_20.callee_saved = (char)0;
#line 2711
  __constr_expr_20.fp = (char)1;
#line 2711
  __constr_expr_20.priority = (short)92;
#line 2711
  *(a->fp_regs + tmp___9) = __constr_expr_20;
#line 2714
  tmp___10 = reg;
#line 2714
  reg ++;
#line 2714
  __constr_expr_21.id = 13;
#line 2714
  __constr_expr_21.name = "xmm13";
#line 2714
  __constr_expr_21.callee_saved = (char)0;
#line 2714
  __constr_expr_21.fp = (char)1;
#line 2714
  __constr_expr_21.priority = (short)1;
#line 2714
  *(a->fp_regs + tmp___10) = __constr_expr_21;
#line 2715
  tmp___11 = reg;
#line 2715
  reg ++;
#line 2715
  __constr_expr_22.id = 12;
#line 2715
  __constr_expr_22.name = "xmm12";
#line 2715
  __constr_expr_22.callee_saved = (char)0;
#line 2715
  __constr_expr_22.fp = (char)1;
#line 2715
  __constr_expr_22.priority = (short)2;
#line 2715
  *(a->fp_regs + tmp___11) = __constr_expr_22;
#line 2716
  a->fpret_reg = a->fp_regs + 0;
#line 2718
  a->gp_arg_reg_cnt = 6;
#line 2719
  tmp___12 = malloc((size_t )(sizeof(jit_hw_reg *) * 6ULL));
#line 2719
  a->gp_arg_regs = (jit_hw_reg **)tmp___12;
#line 2720
  *(a->gp_arg_regs + 0) = a->gp_regs + 5;
#line 2721
  *(a->gp_arg_regs + 1) = a->gp_regs + 4;
#line 2722
  *(a->gp_arg_regs + 2) = a->gp_regs + 3;
#line 2723
  *(a->gp_arg_regs + 3) = a->gp_regs + 2;
#line 2724
  *(a->gp_arg_regs + 4) = a->gp_regs + 6;
#line 2725
  *(a->gp_arg_regs + 5) = a->gp_regs + 7;
#line 2727
  a->fp_arg_reg_cnt = 8;
#line 2728
  tmp___13 = malloc((size_t )(sizeof(jit_hw_reg *) * 8ULL));
#line 2728
  a->fp_arg_regs = (jit_hw_reg **)tmp___13;
#line 2729
  i = 0;
#line 2729
  while (i < 8) {
#line 2730
    *(a->fp_arg_regs + i) = a->fp_regs + i;
#line 2729
    i ++;
  }
#line 2732
  return (a);
}
}
/* END FUNCTION-DEF jit_reg_allocator_create LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isrune LOC=UNKNOWN */
__inline int isrune(int _c ) 
{ 
  int tmp ;

  {
#line 337 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  tmp = __istype(_c, 4294967280UL);
#line 337
  return (tmp);
}
}
/* END FUNCTION-DEF isrune LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_tree_delete LOC=UNKNOWN */
__inline static jit_tree *jit_tree_delete(jit_tree *root , jit_tree_key key , int *found ) 
{ 


  {
#line 519 "./jitter-Darwin-X86-64.c"
  root = delete_node(root, key, found);
#line 520
  if (root) {
#line 520
    root->color = 0;
  }
#line 521
  return (root);
}
}
/* END FUNCTION-DEF jit_tree_delete LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_prepare_arguments LOC=UNKNOWN */
void jit_prepare_arguments(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  struct jit_func_info *info ;
  int gp_arg_pos ;
  int fp_arg_pos ;
  int argpos ;
  int phys_reg ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 6065
  tmp = jit_op_first(jit->ops);
#line 6065
  op = tmp;
#line 6066
  info = (struct jit_func_info *)((void *)0);
#line 6067
  gp_arg_pos = 0;
#line 6068
  fp_arg_pos = 0;
#line 6069
  argpos = 0;
#line 6070
  phys_reg = 0;
#line 6072
  while (op) {
#line 6073
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 128U) {
#line 6074
      info = (struct jit_func_info *)op->arg[1];
#line 6075
      info->has_prolog = 1;
#line 6076
      gp_arg_pos = 0;
#line 6077
      fp_arg_pos = 0;
#line 6078
      argpos = 0;
#line 6079
      phys_reg = 0;
    }
#line 6081
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 152U) {
#line 6082
      (info->args + argpos)->type = (enum jit_inp_type )op->arg[0];
#line 6083
      (info->args + argpos)->size = (int )op->arg[1];
#line 6084
      if (op->arg[0] == 2L) {
#line 6085
        (info->args + argpos)->gp_pos = gp_arg_pos;
#line 6086
        tmp___0 = fp_arg_pos;
#line 6086
        fp_arg_pos ++;
#line 6086
        (info->args + argpos)->fp_pos = tmp___0;
      } else {
#line 6088
        tmp___1 = gp_arg_pos;
#line 6088
        gp_arg_pos ++;
#line 6088
        (info->args + argpos)->gp_pos = tmp___1;
#line 6089
        (info->args + argpos)->fp_pos = fp_arg_pos;
      }
#line 6091
      jit_init_arg_params(jit, info, argpos, & phys_reg);
#line 6092
      argpos ++;
    }
#line 6094
    op = op->next;
  }
#line 6097
  return;
}
}
/* END FUNCTION-DEF jit_prepare_arguments LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_div_op LOC=UNKNOWN */
static void emit_div_op(struct jit *jit , struct jit_op *op , int imm , int sign ,
                        int modulo ) 
{ 
  jit_value dest ;
  jit_value dividend ;
  jit_value divisor ;
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  long tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  int tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  int tmp___15 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  int tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  int tmp___23 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  int tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  int tmp___31 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  x86_imm_buf imb ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char _amd64_rex_bits___7 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char _amd64_rex_bits___9 ;
  int tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char _amd64_rex_bits___10 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char _amd64_rex_bits___11 ;
  int tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  int ax_in_use ;
  int tmp___86 ;
  int dx_in_use ;
  int tmp___87 ;
  unsigned char _amd64_rex_bits___12 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char _amd64_rex_bits___13 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char _amd64_rex_bits___14 ;
  int tmp___93 ;
  int tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  long tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char _amd64_rex_bits___15 ;
  unsigned char *tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char _amd64_rex_bits___16 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char _amd64_rex_bits___17 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char _amd64_rex_bits___18 ;
  int tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  amd64_imm_buf imb___5 ;
  unsigned char *tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  unsigned char *tmp___116 ;
  unsigned char *tmp___117 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___118 ;
  unsigned char *tmp___119 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  unsigned char _amd64_rex_bits___19 ;
  unsigned char *tmp___122 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  int tmp___125 ;
  unsigned char _amd64_rex_bits___20 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char _amd64_rex_bits___21 ;
  int tmp___128 ;
  unsigned char *tmp___129 ;
  unsigned char *tmp___130 ;
  unsigned char *tmp___131 ;
  unsigned char _amd64_rex_bits___22 ;
  int tmp___132 ;
  int tmp___133 ;
  unsigned char *tmp___134 ;
  unsigned char *tmp___135 ;
  unsigned char *tmp___136 ;
  long tmp___137 ;
  unsigned char *tmp___138 ;
  unsigned char _amd64_rex_bits___23 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  unsigned char _amd64_rex_bits___24 ;
  unsigned char *tmp___141 ;
  unsigned char *tmp___142 ;
  unsigned char *tmp___143 ;
  unsigned char _amd64_rex_bits___25 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  unsigned char *tmp___146 ;
  int tmp___147 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;
  int tmp___150 ;
  unsigned char *tmp___151 ;
  unsigned char *tmp___152 ;
  int tmp___153 ;
  unsigned char *tmp___154 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___155 ;
  unsigned char *tmp___156 ;
  unsigned char *tmp___157 ;
  unsigned char *tmp___158 ;
  unsigned char *tmp___159 ;
  int tmp___160 ;
  unsigned char *tmp___161 ;
  int tmp___162 ;
  unsigned char *tmp___163 ;
  int tmp___164 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___165 ;
  unsigned char *tmp___166 ;
  unsigned char *tmp___167 ;
  unsigned char *tmp___168 ;
  unsigned char _amd64_rex_bits___26 ;
  unsigned char *tmp___169 ;
  unsigned char *tmp___170 ;
  unsigned char *tmp___171 ;
  unsigned char _amd64_rex_bits___27 ;
  unsigned char *tmp___172 ;
  unsigned char *tmp___173 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___174 ;
  unsigned char *tmp___175 ;
  unsigned char *tmp___176 ;
  unsigned char *tmp___177 ;
  unsigned char _amd64_rex_bits___28 ;
  unsigned char *tmp___178 ;
  unsigned char *tmp___179 ;
  unsigned char *tmp___180 ;
  x86_imm_buf imb___10 ;
  unsigned char *tmp___181 ;
  unsigned char *tmp___182 ;
  unsigned char *tmp___183 ;
  unsigned char *tmp___184 ;
  unsigned char _amd64_rex_bits___29 ;
  int tmp___185 ;
  unsigned char *tmp___186 ;
  unsigned char *tmp___187 ;
  unsigned char *tmp___188 ;
  int tmp___189 ;
  unsigned char *tmp___190 ;
  unsigned char _amd64_rex_bits___30 ;
  int tmp___191 ;
  int tmp___192 ;
  unsigned char *tmp___193 ;
  unsigned char *tmp___194 ;
  unsigned char *tmp___195 ;
  long tmp___196 ;
  unsigned char *tmp___197 ;
  unsigned char *tmp___198 ;
  unsigned char _amd64_rex_bits___31 ;
  int tmp___199 ;
  int tmp___200 ;
  unsigned char *tmp___201 ;
  unsigned char *tmp___202 ;
  unsigned char *tmp___203 ;
  long tmp___204 ;
  unsigned char *tmp___205 ;
  unsigned char _amd64_rex_bits___32 ;
  unsigned char *tmp___206 ;
  unsigned char *tmp___207 ;
  unsigned char _amd64_rex_bits___33 ;
  unsigned char *tmp___208 ;
  unsigned char *tmp___209 ;

  {
#line 3186
  dest = op->r_arg[0];
#line 3187
  dividend = op->r_arg[1];
#line 3188
  divisor = op->r_arg[2];
#line 3190
  if (imm) {
#line 3190
    if (divisor == 2L) {
#line 3190
      goto _L;
    } else
#line 3190
    if (divisor == 4L) {
#line 3190
      goto _L;
    } else
#line 3190
    if (divisor == 8L) {
      _L: /* CIL Label */ 
#line 3191
      if (dest != dividend) {
#line 3191
        while (1) {
#line 3191
          if ((int )sizeof(void *) == 2) {
#line 3191
            tmp = jit->ip;
#line 3191
            (jit->ip) ++;
#line 3191
            *tmp = (unsigned char)102;
          }
#line 3191
          while (1) {
#line 3191
            if ((int )sizeof(void *) > 4) {
#line 3191
              tmp___0 = 8;
            } else {
#line 3191
              tmp___0 = 0;
            }
#line 3191
            if (dest > 7L) {
#line 3191
              tmp___1 = 4;
            } else {
#line 3191
              tmp___1 = 0;
            }
#line 3191
            if (dividend > 7L) {
#line 3191
              tmp___2 = 1;
            } else {
#line 3191
              tmp___2 = 0;
            }
#line 3191
            _amd64_rex_bits = (unsigned char )((tmp___0 | tmp___1) | tmp___2);
#line 3191
            if ((int )_amd64_rex_bits != 0) {
#line 3191
              tmp___3 = jit->ip;
#line 3191
              (jit->ip) ++;
#line 3191
              *tmp___3 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
            } else
#line 3191
            if ((int )sizeof(void *) == 1) {
#line 3191
              tmp___3 = jit->ip;
#line 3191
              (jit->ip) ++;
#line 3191
              *tmp___3 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
            }
#line 3191
            break;
          }
#line 3191
          switch ((int )sizeof(void *)) {
          case 1: 
#line 3191
          tmp___4 = jit->ip;
#line 3191
          (jit->ip) ++;
#line 3191
          *tmp___4 = (unsigned char)138;
#line 3191
          break;
          case 8: 
          case 4: 
          case 2: 
#line 3191
          tmp___5 = jit->ip;
#line 3191
          (jit->ip) ++;
#line 3191
          *tmp___5 = (unsigned char)139;
#line 3191
          break;
          default: 
#line 3191
          tmp___6 = __builtin_expect(1L, 0L);
#line 3191
          if (tmp___6) {
#line 3191
            __assert_rtn((char const   *)"emit_div_op", (char const   *)"./jitter-Darwin-X86-64.c",
                         3191, (char const   *)"0");
          }
          }
#line 3191
          while (1) {
#line 3191
            while (1) {
#line 3191
              tmp___7 = jit->ip;
#line 3191
              (jit->ip) ++;
#line 3191
              *tmp___7 = (unsigned char )(((long )(3 << 6) | ((dest & 7L) << 3)) | (dividend & 7L));
#line 3191
              break;
            }
#line 3191
            break;
          }
#line 3191
          break;
        }
      }
#line 3192
      if (! modulo) {
#line 3193
        switch (divisor) {
        case 2L: 
#line 3194
        while (1) {
#line 3194
          while (1) {
#line 3194
            if (dest > 7L) {
#line 3194
              tmp___8 = 1;
            } else {
#line 3194
              tmp___8 = 0;
            }
#line 3194
            _amd64_rex_bits___0 = (unsigned char )(8 | tmp___8);
#line 3194
            if ((int )_amd64_rex_bits___0 != 0) {
#line 3194
              tmp___9 = jit->ip;
#line 3194
              (jit->ip) ++;
#line 3194
              *tmp___9 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
            }
#line 3194
            break;
          }
#line 3194
          while (1) {
#line 3194
            tmp___10 = jit->ip;
#line 3194
            (jit->ip) ++;
#line 3194
            *tmp___10 = (unsigned char)209;
#line 3194
            while (1) {
#line 3194
              while (1) {
#line 3194
                tmp___11 = jit->ip;
#line 3194
                (jit->ip) ++;
#line 3194
                if (sign) {
#line 3194
                  tmp___12 = 7;
                } else {
#line 3194
                  tmp___12 = 5;
                }
#line 3194
                *tmp___11 = (unsigned char )((long )((3 << 6) | ((tmp___12 & 0x07) << 3)) | ((dest & 7L) & 7L));
#line 3194
                break;
              }
#line 3194
              break;
            }
#line 3194
            break;
          }
#line 3194
          break;
        }
#line 3194
        break;
        case 4L: 
#line 3195
        while (1) {
#line 3195
          while (1) {
#line 3195
            if (dest > 7L) {
#line 3195
              tmp___16 = 1;
            } else {
#line 3195
              tmp___16 = 0;
            }
#line 3195
            _amd64_rex_bits___1 = (unsigned char )(8 | tmp___16);
#line 3195
            if ((int )_amd64_rex_bits___1 != 0) {
#line 3195
              tmp___17 = jit->ip;
#line 3195
              (jit->ip) ++;
#line 3195
              *tmp___17 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
            }
#line 3195
            break;
          }
#line 3195
          while (1) {
#line 3195
            tmp___21 = jit->ip;
#line 3195
            (jit->ip) ++;
#line 3195
            *tmp___21 = (unsigned char)193;
#line 3195
            while (1) {
#line 3195
              while (1) {
#line 3195
                tmp___22 = jit->ip;
#line 3195
                (jit->ip) ++;
#line 3195
                if (sign) {
#line 3195
                  tmp___23 = 7;
                } else {
#line 3195
                  tmp___23 = 5;
                }
#line 3195
                *tmp___22 = (unsigned char )((long )((3 << 6) | ((tmp___23 & 0x07) << 3)) | ((dest & 7L) & 7L));
#line 3195
                break;
              }
#line 3195
              break;
            }
#line 3195
            while (1) {
#line 3195
              *(jit->ip) = (unsigned char)2;
#line 3195
              (jit->ip) ++;
#line 3195
              break;
            }
#line 3195
            break;
          }
#line 3195
          break;
        }
#line 3195
        break;
        case 8L: 
#line 3196
        while (1) {
#line 3196
          while (1) {
#line 3196
            if (dest > 7L) {
#line 3196
              tmp___24 = 1;
            } else {
#line 3196
              tmp___24 = 0;
            }
#line 3196
            _amd64_rex_bits___2 = (unsigned char )(8 | tmp___24);
#line 3196
            if ((int )_amd64_rex_bits___2 != 0) {
#line 3196
              tmp___25 = jit->ip;
#line 3196
              (jit->ip) ++;
#line 3196
              *tmp___25 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
            }
#line 3196
            break;
          }
#line 3196
          while (1) {
#line 3196
            tmp___29 = jit->ip;
#line 3196
            (jit->ip) ++;
#line 3196
            *tmp___29 = (unsigned char)193;
#line 3196
            while (1) {
#line 3196
              while (1) {
#line 3196
                tmp___30 = jit->ip;
#line 3196
                (jit->ip) ++;
#line 3196
                if (sign) {
#line 3196
                  tmp___31 = 7;
                } else {
#line 3196
                  tmp___31 = 5;
                }
#line 3196
                *tmp___30 = (unsigned char )((long )((3 << 6) | ((tmp___31 & 0x07) << 3)) | ((dest & 7L) & 7L));
#line 3196
                break;
              }
#line 3196
              break;
            }
#line 3196
            while (1) {
#line 3196
              *(jit->ip) = (unsigned char)3;
#line 3196
              (jit->ip) ++;
#line 3196
              break;
            }
#line 3196
            break;
          }
#line 3196
          break;
        }
#line 3196
        break;
        }
#line 3198
        return;
      }
#line 3200
      if (modulo) {
#line 3200
        if (! sign) {
#line 3201
          switch (divisor) {
          case 2L: 
#line 3202
          while (1) {
#line 3202
            while (1) {
#line 3202
              if (dest > 7L) {
#line 3202
                tmp___32 = 1;
              } else {
#line 3202
                tmp___32 = 0;
              }
#line 3202
              _amd64_rex_bits___3 = (unsigned char )(8 | tmp___32);
#line 3202
              if ((int )_amd64_rex_bits___3 != 0) {
#line 3202
                tmp___33 = jit->ip;
#line 3202
                (jit->ip) ++;
#line 3202
                *tmp___33 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
              }
#line 3202
              break;
            }
#line 3202
            tmp___34 = jit->ip;
#line 3202
            (jit->ip) ++;
#line 3202
            *tmp___34 = (unsigned char)131;
#line 3202
            while (1) {
#line 3202
              while (1) {
#line 3202
                tmp___35 = jit->ip;
#line 3202
                (jit->ip) ++;
#line 3202
                *tmp___35 = (unsigned char )((long )((3 << 6) | (4 << 3)) | (dest & 7L));
#line 3202
                break;
              }
#line 3202
              break;
            }
#line 3202
            while (1) {
#line 3202
              *(jit->ip) = (unsigned char)1;
#line 3202
              (jit->ip) ++;
#line 3202
              break;
            }
#line 3202
            break;
          }
#line 3202
          break;
          case 4L: 
#line 3203
          while (1) {
#line 3203
            while (1) {
#line 3203
              if (dest > 7L) {
#line 3203
                tmp___50 = 1;
              } else {
#line 3203
                tmp___50 = 0;
              }
#line 3203
              _amd64_rex_bits___6 = (unsigned char )(8 | tmp___50);
#line 3203
              if ((int )_amd64_rex_bits___6 != 0) {
#line 3203
                tmp___51 = jit->ip;
#line 3203
                (jit->ip) ++;
#line 3203
                *tmp___51 = (unsigned char )(0x40 | (int )_amd64_rex_bits___6);
              }
#line 3203
              break;
            }
#line 3203
            tmp___52 = jit->ip;
#line 3203
            (jit->ip) ++;
#line 3203
            *tmp___52 = (unsigned char)131;
#line 3203
            while (1) {
#line 3203
              while (1) {
#line 3203
                tmp___53 = jit->ip;
#line 3203
                (jit->ip) ++;
#line 3203
                *tmp___53 = (unsigned char )((long )((3 << 6) | (4 << 3)) | (dest & 7L));
#line 3203
                break;
              }
#line 3203
              break;
            }
#line 3203
            while (1) {
#line 3203
              *(jit->ip) = (unsigned char)3;
#line 3203
              (jit->ip) ++;
#line 3203
              break;
            }
#line 3203
            break;
          }
#line 3203
          break;
          case 8L: 
#line 3204
          while (1) {
#line 3204
            while (1) {
#line 3204
              if (dest > 7L) {
#line 3204
                tmp___68 = 1;
              } else {
#line 3204
                tmp___68 = 0;
              }
#line 3204
              _amd64_rex_bits___9 = (unsigned char )(8 | tmp___68);
#line 3204
              if ((int )_amd64_rex_bits___9 != 0) {
#line 3204
                tmp___69 = jit->ip;
#line 3204
                (jit->ip) ++;
#line 3204
                *tmp___69 = (unsigned char )(0x40 | (int )_amd64_rex_bits___9);
              }
#line 3204
              break;
            }
#line 3204
            tmp___70 = jit->ip;
#line 3204
            (jit->ip) ++;
#line 3204
            *tmp___70 = (unsigned char)131;
#line 3204
            while (1) {
#line 3204
              while (1) {
#line 3204
                tmp___71 = jit->ip;
#line 3204
                (jit->ip) ++;
#line 3204
                *tmp___71 = (unsigned char )((long )((3 << 6) | (4 << 3)) | (dest & 7L));
#line 3204
                break;
              }
#line 3204
              break;
            }
#line 3204
            while (1) {
#line 3204
              *(jit->ip) = (unsigned char)7;
#line 3204
              (jit->ip) ++;
#line 3204
              break;
            }
#line 3204
            break;
          }
#line 3204
          break;
          }
#line 3206
          return;
        }
      }
    }
  }
#line 3210
  tmp___86 = jit_reg_in_use(op, 0, 0);
#line 3210
  ax_in_use = tmp___86;
#line 3211
  tmp___87 = jit_reg_in_use(op, 2, 0);
#line 3211
  dx_in_use = tmp___87;
#line 3213
  if (dest != 0L) {
#line 3213
    if (ax_in_use) {
#line 3213
      while (1) {
#line 3213
        while (1) {
#line 3213
          _amd64_rex_bits___12 = (unsigned char)0;
#line 3213
          if ((int )_amd64_rex_bits___12 != 0) {
#line 3213
            tmp___88 = jit->ip;
#line 3213
            (jit->ip) ++;
#line 3213
            *tmp___88 = (unsigned char )(0x40 | (int )_amd64_rex_bits___12);
          }
#line 3213
          break;
        }
#line 3213
        tmp___89 = jit->ip;
#line 3213
        (jit->ip) ++;
#line 3213
        *tmp___89 = (unsigned char)80;
#line 3213
        break;
      }
    }
  }
#line 3214
  if (dest != 2L) {
#line 3214
    if (dx_in_use) {
#line 3214
      while (1) {
#line 3214
        while (1) {
#line 3214
          _amd64_rex_bits___13 = (unsigned char)0;
#line 3214
          if ((int )_amd64_rex_bits___13 != 0) {
#line 3214
            tmp___90 = jit->ip;
#line 3214
            (jit->ip) ++;
#line 3214
            *tmp___90 = (unsigned char )(0x40 | (int )_amd64_rex_bits___13);
          }
#line 3214
          break;
        }
#line 3214
        tmp___91 = jit->ip;
#line 3214
        (jit->ip) ++;
#line 3214
        *tmp___91 = (unsigned char)82;
#line 3214
        break;
      }
    }
  }
#line 3216
  if (imm) {
#line 3217
    if (dividend != 0L) {
#line 3217
      while (1) {
#line 3217
        if ((int )sizeof(void *) == 2) {
#line 3217
          tmp___92 = jit->ip;
#line 3217
          (jit->ip) ++;
#line 3217
          *tmp___92 = (unsigned char)102;
        }
#line 3217
        while (1) {
#line 3217
          if ((int )sizeof(void *) > 4) {
#line 3217
            tmp___93 = 8;
          } else {
#line 3217
            tmp___93 = 0;
          }
#line 3217
          if (dividend > 7L) {
#line 3217
            tmp___94 = 1;
          } else {
#line 3217
            tmp___94 = 0;
          }
#line 3217
          _amd64_rex_bits___14 = (unsigned char )(tmp___93 | tmp___94);
#line 3217
          if ((int )_amd64_rex_bits___14 != 0) {
#line 3217
            tmp___95 = jit->ip;
#line 3217
            (jit->ip) ++;
#line 3217
            *tmp___95 = (unsigned char )(0x40 | (int )_amd64_rex_bits___14);
          } else
#line 3217
          if ((int )sizeof(void *) == 1) {
#line 3217
            tmp___95 = jit->ip;
#line 3217
            (jit->ip) ++;
#line 3217
            *tmp___95 = (unsigned char )(0x40 | (int )_amd64_rex_bits___14);
          }
#line 3217
          break;
        }
#line 3217
        switch ((int )sizeof(void *)) {
        case 1: 
#line 3217
        tmp___96 = jit->ip;
#line 3217
        (jit->ip) ++;
#line 3217
        *tmp___96 = (unsigned char)138;
#line 3217
        break;
        case 8: 
        case 4: 
        case 2: 
#line 3217
        tmp___97 = jit->ip;
#line 3217
        (jit->ip) ++;
#line 3217
        *tmp___97 = (unsigned char)139;
#line 3217
        break;
        default: 
#line 3217
        tmp___98 = __builtin_expect(1L, 0L);
#line 3217
        if (tmp___98) {
#line 3217
          __assert_rtn((char const   *)"emit_div_op", (char const   *)"./jitter-Darwin-X86-64.c",
                       3217, (char const   *)"0");
        }
        }
#line 3217
        while (1) {
#line 3217
          while (1) {
#line 3217
            tmp___99 = jit->ip;
#line 3217
            (jit->ip) ++;
#line 3217
            *tmp___99 = (unsigned char )((long )(3 << 6) | (dividend & 7L));
#line 3217
            break;
          }
#line 3217
          break;
        }
#line 3217
        break;
      }
    }
#line 3218
    if (sign) {
#line 3218
      while (1) {
#line 3218
        while (1) {
#line 3218
          _amd64_rex_bits___15 = (unsigned char)8;
#line 3218
          if ((int )_amd64_rex_bits___15 != 0) {
#line 3218
            tmp___100 = jit->ip;
#line 3218
            (jit->ip) ++;
#line 3218
            *tmp___100 = (unsigned char )(0x40 | (int )_amd64_rex_bits___15);
          }
#line 3218
          break;
        }
#line 3218
        while (1) {
#line 3218
          tmp___101 = jit->ip;
#line 3218
          (jit->ip) ++;
#line 3218
          *tmp___101 = (unsigned char)153;
#line 3218
          break;
        }
#line 3218
        break;
      }
    } else {
#line 3219
      while (1) {
#line 3219
        while (1) {
#line 3219
          _amd64_rex_bits___16 = (unsigned char)8;
#line 3219
          if ((int )_amd64_rex_bits___16 != 0) {
#line 3219
            tmp___102 = jit->ip;
#line 3219
            (jit->ip) ++;
#line 3219
            *tmp___102 = (unsigned char )(0x40 | (int )_amd64_rex_bits___16);
          }
#line 3219
          break;
        }
#line 3219
        tmp___103 = jit->ip;
#line 3219
        (jit->ip) ++;
#line 3219
        *tmp___103 = (unsigned char )((6 << 3) + 3);
#line 3219
        while (1) {
#line 3219
          while (1) {
#line 3219
            tmp___104 = jit->ip;
#line 3219
            (jit->ip) ++;
#line 3219
            *tmp___104 = (unsigned char )(((3 << 6) | (2 << 3)) | 2);
#line 3219
            break;
          }
#line 3219
          break;
        }
#line 3219
        break;
      }
    }
#line 3220
    if (dest != 3L) {
#line 3220
      while (1) {
#line 3220
        while (1) {
#line 3220
          _amd64_rex_bits___17 = (unsigned char)0;
#line 3220
          if ((int )_amd64_rex_bits___17 != 0) {
#line 3220
            tmp___105 = jit->ip;
#line 3220
            (jit->ip) ++;
#line 3220
            *tmp___105 = (unsigned char )(0x40 | (int )_amd64_rex_bits___17);
          }
#line 3220
          break;
        }
#line 3220
        tmp___106 = jit->ip;
#line 3220
        (jit->ip) ++;
#line 3220
        *tmp___106 = (unsigned char)83;
#line 3220
        break;
      }
    }
#line 3221
    while (1) {
#line 3221
      while (1) {
#line 3221
        if ((int )sizeof(void *) > 4) {
#line 3221
          tmp___107 = 8;
        } else {
#line 3221
          tmp___107 = 0;
        }
#line 3221
        _amd64_rex_bits___18 = (unsigned char )tmp___107;
#line 3221
        if ((int )_amd64_rex_bits___18 != 0) {
#line 3221
          tmp___108 = jit->ip;
#line 3221
          (jit->ip) ++;
#line 3221
          *tmp___108 = (unsigned char )(0x40 | (int )_amd64_rex_bits___18);
        } else
#line 3221
        if ((int )sizeof(void *) == 1) {
#line 3221
          tmp___108 = jit->ip;
#line 3221
          (jit->ip) ++;
#line 3221
          *tmp___108 = (unsigned char )(0x40 | (int )_amd64_rex_bits___18);
        }
#line 3221
        break;
      }
#line 3221
      tmp___109 = jit->ip;
#line 3221
      (jit->ip) ++;
#line 3221
      *tmp___109 = (unsigned char)187;
#line 3221
      if ((int )sizeof(void *) == 8) {
#line 3221
        while (1) {
#line 3221
          imb___5.val = (size_t )divisor;
#line 3221
          tmp___110 = jit->ip;
#line 3221
          (jit->ip) ++;
#line 3221
          *tmp___110 = imb___5.b[0];
#line 3221
          tmp___111 = jit->ip;
#line 3221
          (jit->ip) ++;
#line 3221
          *tmp___111 = imb___5.b[1];
#line 3221
          tmp___112 = jit->ip;
#line 3221
          (jit->ip) ++;
#line 3221
          *tmp___112 = imb___5.b[2];
#line 3221
          tmp___113 = jit->ip;
#line 3221
          (jit->ip) ++;
#line 3221
          *tmp___113 = imb___5.b[3];
#line 3221
          tmp___114 = jit->ip;
#line 3221
          (jit->ip) ++;
#line 3221
          *tmp___114 = imb___5.b[4];
#line 3221
          tmp___115 = jit->ip;
#line 3221
          (jit->ip) ++;
#line 3221
          *tmp___115 = imb___5.b[5];
#line 3221
          tmp___116 = jit->ip;
#line 3221
          (jit->ip) ++;
#line 3221
          *tmp___116 = imb___5.b[6];
#line 3221
          tmp___117 = jit->ip;
#line 3221
          (jit->ip) ++;
#line 3221
          *tmp___117 = imb___5.b[7];
#line 3221
          break;
        }
      } else {
#line 3221
        while (1) {
#line 3221
          imb___6.val = (int )((size_t )divisor);
#line 3221
          tmp___118 = jit->ip;
#line 3221
          (jit->ip) ++;
#line 3221
          *tmp___118 = imb___6.b[0];
#line 3221
          tmp___119 = jit->ip;
#line 3221
          (jit->ip) ++;
#line 3221
          *tmp___119 = imb___6.b[1];
#line 3221
          tmp___120 = jit->ip;
#line 3221
          (jit->ip) ++;
#line 3221
          *tmp___120 = imb___6.b[2];
#line 3221
          tmp___121 = jit->ip;
#line 3221
          (jit->ip) ++;
#line 3221
          *tmp___121 = imb___6.b[3];
#line 3221
          break;
        }
      }
#line 3221
      break;
    }
#line 3222
    while (1) {
#line 3222
      while (1) {
#line 3222
        _amd64_rex_bits___19 = (unsigned char)8;
#line 3222
        if ((int )_amd64_rex_bits___19 != 0) {
#line 3222
          tmp___122 = jit->ip;
#line 3222
          (jit->ip) ++;
#line 3222
          *tmp___122 = (unsigned char )(0x40 | (int )_amd64_rex_bits___19);
        }
#line 3222
        break;
      }
#line 3222
      while (1) {
#line 3222
        tmp___123 = jit->ip;
#line 3222
        (jit->ip) ++;
#line 3222
        *tmp___123 = (unsigned char)247;
#line 3222
        while (1) {
#line 3222
          while (1) {
#line 3222
            tmp___124 = jit->ip;
#line 3222
            (jit->ip) ++;
#line 3222
            if (sign) {
#line 3222
              tmp___125 = 1;
            } else {
#line 3222
              tmp___125 = 0;
            }
#line 3222
            *tmp___124 = (unsigned char )(((3 << 6) | (((6 + tmp___125) & 0x07) << 3)) | 3);
#line 3222
            break;
          }
#line 3222
          break;
        }
#line 3222
        break;
      }
#line 3222
      break;
    }
#line 3223
    if (dest != 3L) {
#line 3223
      while (1) {
#line 3223
        while (1) {
#line 3223
          _amd64_rex_bits___20 = (unsigned char)0;
#line 3223
          if ((int )_amd64_rex_bits___20 != 0) {
#line 3223
            tmp___126 = jit->ip;
#line 3223
            (jit->ip) ++;
#line 3223
            *tmp___126 = (unsigned char )(0x40 | (int )_amd64_rex_bits___20);
          }
#line 3223
          break;
        }
#line 3223
        tmp___127 = jit->ip;
#line 3223
        (jit->ip) ++;
#line 3223
        *tmp___127 = (unsigned char)91;
#line 3223
        break;
      }
    }
  } else {
#line 3225
    if (divisor == 0L) {
#line 3225
      goto _L___0;
    } else
#line 3225
    if (divisor == 2L) {
      _L___0: /* CIL Label */ 
#line 3226
      while (1) {
#line 3226
        while (1) {
#line 3226
          if (divisor > 7L) {
#line 3226
            tmp___128 = 1;
          } else {
#line 3226
            tmp___128 = 0;
          }
#line 3226
          _amd64_rex_bits___21 = (unsigned char )tmp___128;
#line 3226
          if ((int )_amd64_rex_bits___21 != 0) {
#line 3226
            tmp___129 = jit->ip;
#line 3226
            (jit->ip) ++;
#line 3226
            *tmp___129 = (unsigned char )(0x40 | (int )_amd64_rex_bits___21);
          }
#line 3226
          break;
        }
#line 3226
        tmp___130 = jit->ip;
#line 3226
        (jit->ip) ++;
#line 3226
        *tmp___130 = (unsigned char )(80L + (divisor & 7L));
#line 3226
        break;
      }
    }
#line 3229
    if (dividend != 0L) {
#line 3229
      while (1) {
#line 3229
        if ((int )sizeof(void *) == 2) {
#line 3229
          tmp___131 = jit->ip;
#line 3229
          (jit->ip) ++;
#line 3229
          *tmp___131 = (unsigned char)102;
        }
#line 3229
        while (1) {
#line 3229
          if ((int )sizeof(void *) > 4) {
#line 3229
            tmp___132 = 8;
          } else {
#line 3229
            tmp___132 = 0;
          }
#line 3229
          if (dividend > 7L) {
#line 3229
            tmp___133 = 1;
          } else {
#line 3229
            tmp___133 = 0;
          }
#line 3229
          _amd64_rex_bits___22 = (unsigned char )(tmp___132 | tmp___133);
#line 3229
          if ((int )_amd64_rex_bits___22 != 0) {
#line 3229
            tmp___134 = jit->ip;
#line 3229
            (jit->ip) ++;
#line 3229
            *tmp___134 = (unsigned char )(0x40 | (int )_amd64_rex_bits___22);
          } else
#line 3229
          if ((int )sizeof(void *) == 1) {
#line 3229
            tmp___134 = jit->ip;
#line 3229
            (jit->ip) ++;
#line 3229
            *tmp___134 = (unsigned char )(0x40 | (int )_amd64_rex_bits___22);
          }
#line 3229
          break;
        }
#line 3229
        switch ((int )sizeof(void *)) {
        case 1: 
#line 3229
        tmp___135 = jit->ip;
#line 3229
        (jit->ip) ++;
#line 3229
        *tmp___135 = (unsigned char)138;
#line 3229
        break;
        case 8: 
        case 4: 
        case 2: 
#line 3229
        tmp___136 = jit->ip;
#line 3229
        (jit->ip) ++;
#line 3229
        *tmp___136 = (unsigned char)139;
#line 3229
        break;
        default: 
#line 3229
        tmp___137 = __builtin_expect(1L, 0L);
#line 3229
        if (tmp___137) {
#line 3229
          __assert_rtn((char const   *)"emit_div_op", (char const   *)"./jitter-Darwin-X86-64.c",
                       3229, (char const   *)"0");
        }
        }
#line 3229
        while (1) {
#line 3229
          while (1) {
#line 3229
            tmp___138 = jit->ip;
#line 3229
            (jit->ip) ++;
#line 3229
            *tmp___138 = (unsigned char )((long )(3 << 6) | (dividend & 7L));
#line 3229
            break;
          }
#line 3229
          break;
        }
#line 3229
        break;
      }
    }
#line 3231
    if (sign) {
#line 3231
      while (1) {
#line 3231
        while (1) {
#line 3231
          _amd64_rex_bits___23 = (unsigned char)8;
#line 3231
          if ((int )_amd64_rex_bits___23 != 0) {
#line 3231
            tmp___139 = jit->ip;
#line 3231
            (jit->ip) ++;
#line 3231
            *tmp___139 = (unsigned char )(0x40 | (int )_amd64_rex_bits___23);
          }
#line 3231
          break;
        }
#line 3231
        while (1) {
#line 3231
          tmp___140 = jit->ip;
#line 3231
          (jit->ip) ++;
#line 3231
          *tmp___140 = (unsigned char)153;
#line 3231
          break;
        }
#line 3231
        break;
      }
    } else {
#line 3232
      while (1) {
#line 3232
        while (1) {
#line 3232
          _amd64_rex_bits___24 = (unsigned char)8;
#line 3232
          if ((int )_amd64_rex_bits___24 != 0) {
#line 3232
            tmp___141 = jit->ip;
#line 3232
            (jit->ip) ++;
#line 3232
            *tmp___141 = (unsigned char )(0x40 | (int )_amd64_rex_bits___24);
          }
#line 3232
          break;
        }
#line 3232
        tmp___142 = jit->ip;
#line 3232
        (jit->ip) ++;
#line 3232
        *tmp___142 = (unsigned char )((6 << 3) + 3);
#line 3232
        while (1) {
#line 3232
          while (1) {
#line 3232
            tmp___143 = jit->ip;
#line 3232
            (jit->ip) ++;
#line 3232
            *tmp___143 = (unsigned char )(((3 << 6) | (2 << 3)) | 2);
#line 3232
            break;
          }
#line 3232
          break;
        }
#line 3232
        break;
      }
    }
#line 3234
    if (divisor == 0L) {
#line 3234
      goto _L___2;
    } else
#line 3234
    if (divisor == 2L) {
      _L___2: /* CIL Label */ 
#line 3235
      while (1) {
#line 3235
        while (1) {
#line 3235
          _amd64_rex_bits___25 = (unsigned char)8;
#line 3235
          if ((int )_amd64_rex_bits___25 != 0) {
#line 3235
            tmp___144 = jit->ip;
#line 3235
            (jit->ip) ++;
#line 3235
            *tmp___144 = (unsigned char )(0x40 | (int )_amd64_rex_bits___25);
          }
#line 3235
          break;
        }
#line 3235
        while (1) {
#line 3235
          tmp___145 = jit->ip;
#line 3235
          (jit->ip) ++;
#line 3235
          *tmp___145 = (unsigned char)247;
#line 3235
          while (1) {
#line 3235
            while (1) {
#line 3235
              tmp___146 = jit->ip;
#line 3235
              (jit->ip) ++;
#line 3235
              if (sign) {
#line 3235
                tmp___147 = 1;
              } else {
#line 3235
                tmp___147 = 0;
              }
#line 3235
              *tmp___146 = (unsigned char )((((6 + tmp___147) & 0x07) << 3) | 4);
#line 3235
              break;
            }
#line 3235
            while (1) {
#line 3235
              tmp___148 = jit->ip;
#line 3235
              (jit->ip) ++;
#line 3235
              *tmp___148 = (unsigned char )((4 << 3) | 4);
#line 3235
              break;
            }
#line 3235
            break;
#line 3235
            while (1) {
#line 3235
              tmp___159 = jit->ip;
#line 3235
              (jit->ip) ++;
#line 3235
              if (sign) {
#line 3235
                tmp___160 = 1;
              } else {
#line 3235
                tmp___160 = 0;
              }
#line 3235
              *tmp___159 = (unsigned char )((((6 + tmp___160) & 0x07) << 3) | 4);
#line 3235
              break;
            }
#line 3235
            break;
#line 3235
            while (1) {
#line 3235
              tmp___161 = jit->ip;
#line 3235
              (jit->ip) ++;
#line 3235
              if (sign) {
#line 3235
                tmp___162 = 1;
              } else {
#line 3235
                tmp___162 = 0;
              }
#line 3235
              *tmp___161 = (unsigned char )(((1 << 6) | (((6 + tmp___162) & 0x07) << 3)) | 4);
#line 3235
              break;
            }
#line 3235
            while (1) {
#line 3235
              *(jit->ip) = (unsigned char)0;
#line 3235
              (jit->ip) ++;
#line 3235
              break;
            }
#line 3235
            break;
          }
#line 3235
          break;
        }
#line 3235
        break;
      }
#line 3236
      while (1) {
#line 3236
        if ((jit_value )((int )sizeof(void *)) >= -128L) {
#line 3236
          if ((jit_value )((int )sizeof(void *)) <= 127L) {
#line 3236
            while (1) {
#line 3236
              _amd64_rex_bits___26 = (unsigned char)8;
#line 3236
              if ((int )_amd64_rex_bits___26 != 0) {
#line 3236
                tmp___169 = jit->ip;
#line 3236
                (jit->ip) ++;
#line 3236
                *tmp___169 = (unsigned char )(0x40 | (int )_amd64_rex_bits___26);
              }
#line 3236
              break;
            }
#line 3236
            tmp___170 = jit->ip;
#line 3236
            (jit->ip) ++;
#line 3236
            *tmp___170 = (unsigned char)131;
#line 3236
            while (1) {
#line 3236
              while (1) {
#line 3236
                tmp___171 = jit->ip;
#line 3236
                (jit->ip) ++;
#line 3236
                *tmp___171 = (unsigned char )((3 << 6) | 4);
#line 3236
                break;
              }
#line 3236
              break;
            }
#line 3236
            while (1) {
#line 3236
              *(jit->ip) = (unsigned char )((int )sizeof(void *) & 0xff);
#line 3236
              (jit->ip) ++;
#line 3236
              break;
            }
          } else {
#line 3236
            goto _L___1;
          }
        } else {
          _L___1: /* CIL Label */ 
#line 3236
          while (1) {
#line 3236
            _amd64_rex_bits___28 = (unsigned char)8;
#line 3236
            if ((int )_amd64_rex_bits___28 != 0) {
#line 3236
              tmp___178 = jit->ip;
#line 3236
              (jit->ip) ++;
#line 3236
              *tmp___178 = (unsigned char )(0x40 | (int )_amd64_rex_bits___28);
            }
#line 3236
            break;
          }
#line 3236
          tmp___179 = jit->ip;
#line 3236
          (jit->ip) ++;
#line 3236
          *tmp___179 = (unsigned char)129;
#line 3236
          while (1) {
#line 3236
            while (1) {
#line 3236
              tmp___180 = jit->ip;
#line 3236
              (jit->ip) ++;
#line 3236
              *tmp___180 = (unsigned char )((3 << 6) | 4);
#line 3236
              break;
            }
#line 3236
            break;
          }
#line 3236
          while (1) {
#line 3236
            imb___10.val = (int )sizeof(void *);
#line 3236
            tmp___181 = jit->ip;
#line 3236
            (jit->ip) ++;
#line 3236
            *tmp___181 = imb___10.b[0];
#line 3236
            tmp___182 = jit->ip;
#line 3236
            (jit->ip) ++;
#line 3236
            *tmp___182 = imb___10.b[1];
#line 3236
            tmp___183 = jit->ip;
#line 3236
            (jit->ip) ++;
#line 3236
            *tmp___183 = imb___10.b[2];
#line 3236
            tmp___184 = jit->ip;
#line 3236
            (jit->ip) ++;
#line 3236
            *tmp___184 = imb___10.b[3];
#line 3236
            break;
          }
        }
#line 3236
        break;
      }
    } else {
#line 3238
      while (1) {
#line 3238
        while (1) {
#line 3238
          if (divisor > 7L) {
#line 3238
            tmp___185 = 1;
          } else {
#line 3238
            tmp___185 = 0;
          }
#line 3238
          _amd64_rex_bits___29 = (unsigned char )(8 | tmp___185);
#line 3238
          if ((int )_amd64_rex_bits___29 != 0) {
#line 3238
            tmp___186 = jit->ip;
#line 3238
            (jit->ip) ++;
#line 3238
            *tmp___186 = (unsigned char )(0x40 | (int )_amd64_rex_bits___29);
          }
#line 3238
          break;
        }
#line 3238
        while (1) {
#line 3238
          tmp___187 = jit->ip;
#line 3238
          (jit->ip) ++;
#line 3238
          *tmp___187 = (unsigned char)247;
#line 3238
          while (1) {
#line 3238
            while (1) {
#line 3238
              tmp___188 = jit->ip;
#line 3238
              (jit->ip) ++;
#line 3238
              if (sign) {
#line 3238
                tmp___189 = 1;
              } else {
#line 3238
                tmp___189 = 0;
              }
#line 3238
              *tmp___188 = (unsigned char )((long )((3 << 6) | (((6 + tmp___189) & 0x07) << 3)) | ((divisor & 7L) & 7L));
#line 3238
              break;
            }
#line 3238
            break;
          }
#line 3238
          break;
        }
#line 3238
        break;
      }
    }
  }
#line 3242
  if (! modulo) {
#line 3243
    if (dest != 0L) {
#line 3243
      while (1) {
#line 3243
        if ((int )sizeof(void *) == 2) {
#line 3243
          tmp___190 = jit->ip;
#line 3243
          (jit->ip) ++;
#line 3243
          *tmp___190 = (unsigned char)102;
        }
#line 3243
        while (1) {
#line 3243
          if ((int )sizeof(void *) > 4) {
#line 3243
            tmp___191 = 8;
          } else {
#line 3243
            tmp___191 = 0;
          }
#line 3243
          if (dest > 7L) {
#line 3243
            tmp___192 = 4;
          } else {
#line 3243
            tmp___192 = 0;
          }
#line 3243
          _amd64_rex_bits___30 = (unsigned char )(tmp___191 | tmp___192);
#line 3243
          if ((int )_amd64_rex_bits___30 != 0) {
#line 3243
            tmp___193 = jit->ip;
#line 3243
            (jit->ip) ++;
#line 3243
            *tmp___193 = (unsigned char )(0x40 | (int )_amd64_rex_bits___30);
          } else
#line 3243
          if ((int )sizeof(void *) == 1) {
#line 3243
            tmp___193 = jit->ip;
#line 3243
            (jit->ip) ++;
#line 3243
            *tmp___193 = (unsigned char )(0x40 | (int )_amd64_rex_bits___30);
          }
#line 3243
          break;
        }
#line 3243
        switch ((int )sizeof(void *)) {
        case 1: 
#line 3243
        tmp___194 = jit->ip;
#line 3243
        (jit->ip) ++;
#line 3243
        *tmp___194 = (unsigned char)138;
#line 3243
        break;
        case 8: 
        case 4: 
        case 2: 
#line 3243
        tmp___195 = jit->ip;
#line 3243
        (jit->ip) ++;
#line 3243
        *tmp___195 = (unsigned char)139;
#line 3243
        break;
        default: 
#line 3243
        tmp___196 = __builtin_expect(1L, 0L);
#line 3243
        if (tmp___196) {
#line 3243
          __assert_rtn((char const   *)"emit_div_op", (char const   *)"./jitter-Darwin-X86-64.c",
                       3243, (char const   *)"0");
        }
        }
#line 3243
        while (1) {
#line 3243
          while (1) {
#line 3243
            tmp___197 = jit->ip;
#line 3243
            (jit->ip) ++;
#line 3243
            *tmp___197 = (unsigned char )((long )(3 << 6) | ((dest & 7L) << 3));
#line 3243
            break;
          }
#line 3243
          break;
        }
#line 3243
        break;
      }
    }
  } else
#line 3245
  if (dest != 2L) {
#line 3245
    while (1) {
#line 3245
      if ((int )sizeof(void *) == 2) {
#line 3245
        tmp___198 = jit->ip;
#line 3245
        (jit->ip) ++;
#line 3245
        *tmp___198 = (unsigned char)102;
      }
#line 3245
      while (1) {
#line 3245
        if ((int )sizeof(void *) > 4) {
#line 3245
          tmp___199 = 8;
        } else {
#line 3245
          tmp___199 = 0;
        }
#line 3245
        if (dest > 7L) {
#line 3245
          tmp___200 = 4;
        } else {
#line 3245
          tmp___200 = 0;
        }
#line 3245
        _amd64_rex_bits___31 = (unsigned char )(tmp___199 | tmp___200);
#line 3245
        if ((int )_amd64_rex_bits___31 != 0) {
#line 3245
          tmp___201 = jit->ip;
#line 3245
          (jit->ip) ++;
#line 3245
          *tmp___201 = (unsigned char )(0x40 | (int )_amd64_rex_bits___31);
        } else
#line 3245
        if ((int )sizeof(void *) == 1) {
#line 3245
          tmp___201 = jit->ip;
#line 3245
          (jit->ip) ++;
#line 3245
          *tmp___201 = (unsigned char )(0x40 | (int )_amd64_rex_bits___31);
        }
#line 3245
        break;
      }
#line 3245
      switch ((int )sizeof(void *)) {
      case 1: 
#line 3245
      tmp___202 = jit->ip;
#line 3245
      (jit->ip) ++;
#line 3245
      *tmp___202 = (unsigned char)138;
#line 3245
      break;
      case 8: 
      case 4: 
      case 2: 
#line 3245
      tmp___203 = jit->ip;
#line 3245
      (jit->ip) ++;
#line 3245
      *tmp___203 = (unsigned char)139;
#line 3245
      break;
      default: 
#line 3245
      tmp___204 = __builtin_expect(1L, 0L);
#line 3245
      if (tmp___204) {
#line 3245
        __assert_rtn((char const   *)"emit_div_op", (char const   *)"./jitter-Darwin-X86-64.c",
                     3245, (char const   *)"0");
      }
      }
#line 3245
      while (1) {
#line 3245
        while (1) {
#line 3245
          tmp___205 = jit->ip;
#line 3245
          (jit->ip) ++;
#line 3245
          *tmp___205 = (unsigned char )(((long )(3 << 6) | ((dest & 7L) << 3)) | 2L);
#line 3245
          break;
        }
#line 3245
        break;
      }
#line 3245
      break;
    }
  }
#line 3248
  if (dest != 2L) {
#line 3248
    if (dx_in_use) {
#line 3248
      while (1) {
#line 3248
        while (1) {
#line 3248
          _amd64_rex_bits___32 = (unsigned char)0;
#line 3248
          if ((int )_amd64_rex_bits___32 != 0) {
#line 3248
            tmp___206 = jit->ip;
#line 3248
            (jit->ip) ++;
#line 3248
            *tmp___206 = (unsigned char )(0x40 | (int )_amd64_rex_bits___32);
          }
#line 3248
          break;
        }
#line 3248
        tmp___207 = jit->ip;
#line 3248
        (jit->ip) ++;
#line 3248
        *tmp___207 = (unsigned char)90;
#line 3248
        break;
      }
    }
  }
#line 3249
  if (dest != 0L) {
#line 3249
    if (ax_in_use) {
#line 3249
      while (1) {
#line 3249
        while (1) {
#line 3249
          _amd64_rex_bits___33 = (unsigned char)0;
#line 3249
          if ((int )_amd64_rex_bits___33 != 0) {
#line 3249
            tmp___208 = jit->ip;
#line 3249
            (jit->ip) ++;
#line 3249
            *tmp___208 = (unsigned char )(0x40 | (int )_amd64_rex_bits___33);
          }
#line 3249
          break;
        }
#line 3249
        tmp___209 = jit->ip;
#line 3249
        (jit->ip) ++;
#line 3249
        *tmp___209 = (unsigned char)88;
#line 3249
        break;
      }
    }
  }
#line 3250
  return;
}
}
/* END FUNCTION-DEF emit_div_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF check_argument_sizes LOC=UNKNOWN */
static int check_argument_sizes(jit_op *op , char *msg_buf ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 5061
  switch ((unsigned int )((jit_opcode )((int )op->code & 0xfff8))) {
  case 288U: 
  case 280U: 
  case 272U: 
  case 264U: 
#line 5063
  tmp = valid_size((int )op->arg_size);
#line 5063
  if (tmp) {
#line 5063
    return (0);
  }
#line 5064
  break;
  case 1088U: 
  case 1320U: 
  case 408U: 
  case 1304U: 
  case 1296U: 
  case 1288U: 
  case 1280U: 
#line 5068
  tmp___0 = valid_fsize((int )op->arg_size);
#line 5068
  if (tmp___0) {
#line 5068
    return (0);
  }
#line 5069
  break;
  case 152U: 
#line 5072
  if (op->arg[0] == 0L) {
#line 5072
    goto _L;
  } else
#line 5072
  if (op->arg[0] == 1L) {
    _L: /* CIL Label */ 
#line 5072
    tmp___1 = valid_size((int )op->arg[1]);
#line 5072
    if (tmp___1) {
#line 5072
      return (0);
    }
  }
#line 5073
  if (op->arg[0] == 2L) {
#line 5073
    tmp___2 = valid_fsize((int )op->arg[1]);
#line 5073
    if (tmp___2) {
#line 5073
      return (0);
    }
  }
#line 5074
  if (op->arg[0] == 3L) {
#line 5074
    if ((unsigned long long )op->arg[1] == sizeof(void *)) {
#line 5074
      return (0);
    }
  }
#line 5075
  break;
  default: 
#line 5077
  return (0);
  }
#line 5080
  append_msg(msg_buf, "invalid data size");
#line 5081
  return (4);
}
}
/* END FUNCTION-DEF check_argument_sizes LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF toupper LOC=UNKNOWN */
__inline int toupper(int _c ) 
{ 
  __darwin_ct_rune_t tmp ;

  {
#line 300 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  tmp = __toupper(_c);
#line 300
  return (tmp);
}
}
/* END FUNCTION-DEF toupper LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_print_tree LOC=UNKNOWN */
__inline static void jit_print_tree(jit_tree *h , int level ) 
{ 
  int i ;

  {
#line 553
  if ((unsigned long )h == (unsigned long )((void *)0)) {
#line 553 "./jitter-Darwin-X86-64.c"
    return;
  }
#line 554
  i = 0;
#line 554
  while (i < level) {
#line 555
    printf((char const   */* __restrict  */)" ");
#line 554
    i ++;
  }
#line 557
  printf((char const   */* __restrict  */)"%i:%li\n", (int )h->key, (long )h->value);
#line 558
  jit_print_tree(h->left, level + 1);
#line 559
  jit_print_tree(h->right, level + 1);
#line 560
  return;
}
}
/* END FUNCTION-DEF jit_print_tree LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF append_msg LOC=UNKNOWN */
static void append_msg(char *buf , char *format  , ...) 
{ 
  va_list___0 ap ;
  unsigned long long tmp ;
  size_t tmp___0 ;
  size_t tmp___1 ;
  size_t tmp___2 ;

  {
#line 4949
  tmp___0 = strlen((char const   *)buf);
#line 4949
  if (tmp___0) {
#line 4949
    tmp = __builtin_object_size((void *)buf, 1);
#line 4949
    __builtin___strcat_chk(buf, (char const   *)", ", tmp);
  }
#line 4950
  __builtin_va_start(ap, format);
#line 4951
  tmp___2 = strlen((char const   *)buf);
#line 4951
  __builtin___vsprintf_chk(buf + tmp___2, 0, 18446744073709551615ULL, (char const   *)format,
                           ap);
#line 4952
  __builtin_va_end(ap);
#line 4953
  return;
}
}
/* END FUNCTION-DEF append_msg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF move_red_right LOC=UNKNOWN */
__inline static jit_tree *move_red_right(jit_tree *h ) 
{ 
  int tmp ;

  {
#line 455
  color_flip(h);
#line 456
  tmp = is_red((h->left)->left);
#line 456
  if (tmp) {
#line 457
    h = rotate_right(h);
#line 458
    color_flip(h);
  }
#line 460
  return (h);
}
}
/* END FUNCTION-DEF move_red_right LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_subx_op LOC=UNKNOWN */
static void emit_subx_op(struct jit *jit , struct jit_op *op , int x86_op , int imm ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  long tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  x86_imm_buf imb ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___26 ;
  int tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___32 ;
  int tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  long tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___56 ;
  int tmp___57 ;
  int tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  long tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___85 ;
  int tmp___86 ;
  int tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  long tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___93 ;
  int tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;

  {
#line 3086
  if (imm) {
#line 3087
    if (op->r_arg[0] != op->r_arg[1]) {
#line 3087
      while (1) {
#line 3087
        if ((int )sizeof(void *) == 2) {
#line 3087
          tmp = jit->ip;
#line 3087
          (jit->ip) ++;
#line 3087
          *tmp = (unsigned char)102;
        }
#line 3087
        while (1) {
#line 3087
          if ((int )sizeof(void *) > 4) {
#line 3087
            tmp___0 = 8;
          } else {
#line 3087
            tmp___0 = 0;
          }
#line 3087
          if (op->r_arg[0] > 7L) {
#line 3087
            tmp___1 = 4;
          } else {
#line 3087
            tmp___1 = 0;
          }
#line 3087
          if (op->r_arg[1] > 7L) {
#line 3087
            tmp___2 = 1;
          } else {
#line 3087
            tmp___2 = 0;
          }
#line 3087
          _amd64_rex_bits = (unsigned char )((tmp___0 | tmp___1) | tmp___2);
#line 3087
          if ((int )_amd64_rex_bits != 0) {
#line 3087
            tmp___3 = jit->ip;
#line 3087
            (jit->ip) ++;
#line 3087
            *tmp___3 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          } else
#line 3087
          if ((int )sizeof(void *) == 1) {
#line 3087
            tmp___3 = jit->ip;
#line 3087
            (jit->ip) ++;
#line 3087
            *tmp___3 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          }
#line 3087
          break;
        }
#line 3087
        switch ((int )sizeof(void *)) {
        case 1: 
#line 3087
        tmp___4 = jit->ip;
#line 3087
        (jit->ip) ++;
#line 3087
        *tmp___4 = (unsigned char)138;
#line 3087
        break;
        case 8: 
        case 4: 
        case 2: 
#line 3087
        tmp___5 = jit->ip;
#line 3087
        (jit->ip) ++;
#line 3087
        *tmp___5 = (unsigned char)139;
#line 3087
        break;
        default: 
#line 3087
        tmp___6 = __builtin_expect(1L, 0L);
#line 3087
        if (tmp___6) {
#line 3087
          __assert_rtn((char const   *)"emit_subx_op", (char const   *)"./jitter-Darwin-X86-64.c",
                       3087, (char const   *)"0");
        }
        }
#line 3087
        while (1) {
#line 3087
          while (1) {
#line 3087
            tmp___7 = jit->ip;
#line 3087
            (jit->ip) ++;
#line 3087
            *tmp___7 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
#line 3087
            break;
          }
#line 3087
          break;
        }
#line 3087
        break;
      }
    }
#line 3088
    while (1) {
#line 3088
      if (op->r_arg[2] >= -128L) {
#line 3088
        if (op->r_arg[2] <= 127L) {
#line 3088
          while (1) {
#line 3088
            if (op->r_arg[0] > 7L) {
#line 3088
              tmp___8 = 1;
            } else {
#line 3088
              tmp___8 = 0;
            }
#line 3088
            _amd64_rex_bits___0 = (unsigned char )(8 | tmp___8);
#line 3088
            if ((int )_amd64_rex_bits___0 != 0) {
#line 3088
              tmp___9 = jit->ip;
#line 3088
              (jit->ip) ++;
#line 3088
              *tmp___9 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
            }
#line 3088
            break;
          }
#line 3088
          tmp___10 = jit->ip;
#line 3088
          (jit->ip) ++;
#line 3088
          *tmp___10 = (unsigned char)131;
#line 3088
          while (1) {
#line 3088
            while (1) {
#line 3088
              tmp___11 = jit->ip;
#line 3088
              (jit->ip) ++;
#line 3088
              *tmp___11 = (unsigned char )((long )((3 << 6) | ((x86_op & 0x07) << 3)) | (op->r_arg[0] & 7L));
#line 3088
              break;
            }
#line 3088
            break;
          }
#line 3088
          while (1) {
#line 3088
            *(jit->ip) = (unsigned char )(op->r_arg[2] & 255L);
#line 3088
            (jit->ip) ++;
#line 3088
            break;
          }
        } else {
#line 3088
          goto _L;
        }
      } else
      _L: /* CIL Label */ 
#line 3088
      if (op->r_arg[0] == 0L) {
#line 3088
        while (1) {
#line 3088
          _amd64_rex_bits___1 = (unsigned char)8;
#line 3088
          if ((int )_amd64_rex_bits___1 != 0) {
#line 3088
            tmp___12 = jit->ip;
#line 3088
            (jit->ip) ++;
#line 3088
            *tmp___12 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
          }
#line 3088
          break;
        }
#line 3088
        tmp___13 = jit->ip;
#line 3088
        (jit->ip) ++;
#line 3088
        *tmp___13 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 5);
#line 3088
        while (1) {
#line 3088
          imb.val = (int )op->r_arg[2];
#line 3088
          tmp___14 = jit->ip;
#line 3088
          (jit->ip) ++;
#line 3088
          *tmp___14 = imb.b[0];
#line 3088
          tmp___15 = jit->ip;
#line 3088
          (jit->ip) ++;
#line 3088
          *tmp___15 = imb.b[1];
#line 3088
          tmp___16 = jit->ip;
#line 3088
          (jit->ip) ++;
#line 3088
          *tmp___16 = imb.b[2];
#line 3088
          tmp___17 = jit->ip;
#line 3088
          (jit->ip) ++;
#line 3088
          *tmp___17 = imb.b[3];
#line 3088
          break;
        }
      } else {
#line 3088
        while (1) {
#line 3088
          if (op->r_arg[0] > 7L) {
#line 3088
            tmp___18 = 1;
          } else {
#line 3088
            tmp___18 = 0;
          }
#line 3088
          _amd64_rex_bits___2 = (unsigned char )(8 | tmp___18);
#line 3088
          if ((int )_amd64_rex_bits___2 != 0) {
#line 3088
            tmp___19 = jit->ip;
#line 3088
            (jit->ip) ++;
#line 3088
            *tmp___19 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
          }
#line 3088
          break;
        }
#line 3088
        tmp___20 = jit->ip;
#line 3088
        (jit->ip) ++;
#line 3088
        *tmp___20 = (unsigned char)129;
#line 3088
        while (1) {
#line 3088
          while (1) {
#line 3088
            tmp___21 = jit->ip;
#line 3088
            (jit->ip) ++;
#line 3088
            *tmp___21 = (unsigned char )((long )((3 << 6) | ((x86_op & 0x07) << 3)) | (op->r_arg[0] & 7L));
#line 3088
            break;
          }
#line 3088
          break;
        }
#line 3088
        while (1) {
#line 3088
          imb___0.val = (int )op->r_arg[2];
#line 3088
          tmp___22 = jit->ip;
#line 3088
          (jit->ip) ++;
#line 3088
          *tmp___22 = imb___0.b[0];
#line 3088
          tmp___23 = jit->ip;
#line 3088
          (jit->ip) ++;
#line 3088
          *tmp___23 = imb___0.b[1];
#line 3088
          tmp___24 = jit->ip;
#line 3088
          (jit->ip) ++;
#line 3088
          *tmp___24 = imb___0.b[2];
#line 3088
          tmp___25 = jit->ip;
#line 3088
          (jit->ip) ++;
#line 3088
          *tmp___25 = imb___0.b[3];
#line 3088
          break;
        }
      }
#line 3088
      break;
    }
#line 3089
    return;
  }
#line 3092
  if (op->r_arg[0] == op->r_arg[1]) {
#line 3093
    while (1) {
#line 3093
      while (1) {
#line 3093
        if (op->r_arg[0] > 7L) {
#line 3093
          tmp___26 = 4;
        } else {
#line 3093
          tmp___26 = 0;
        }
#line 3093
        if (op->r_arg[2] > 7L) {
#line 3093
          tmp___27 = 1;
        } else {
#line 3093
          tmp___27 = 0;
        }
#line 3093
        _amd64_rex_bits___3 = (unsigned char )((8 | tmp___26) | tmp___27);
#line 3093
        if ((int )_amd64_rex_bits___3 != 0) {
#line 3093
          tmp___28 = jit->ip;
#line 3093
          (jit->ip) ++;
#line 3093
          *tmp___28 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
        }
#line 3093
        break;
      }
#line 3093
      tmp___29 = jit->ip;
#line 3093
      (jit->ip) ++;
#line 3093
      *tmp___29 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 3);
#line 3093
      while (1) {
#line 3093
        while (1) {
#line 3093
          tmp___30 = jit->ip;
#line 3093
          (jit->ip) ++;
#line 3093
          *tmp___30 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
#line 3093
          break;
        }
#line 3093
        break;
      }
#line 3093
      break;
    }
  } else
#line 3094
  if (op->r_arg[0] == op->r_arg[2]) {
#line 3095
    while (1) {
#line 3095
      if ((int )sizeof(void *) == 2) {
#line 3095
        tmp___31 = jit->ip;
#line 3095
        (jit->ip) ++;
#line 3095
        *tmp___31 = (unsigned char)102;
      }
#line 3095
      while (1) {
#line 3095
        if ((int )sizeof(void *) > 4) {
#line 3095
          tmp___32 = 8;
        } else {
#line 3095
          tmp___32 = 0;
        }
#line 3095
        if (op->r_arg[2] > 7L) {
#line 3095
          tmp___33 = 4;
        } else {
#line 3095
          tmp___33 = 0;
        }
#line 3095
        _amd64_rex_bits___4 = (unsigned char )(tmp___32 | tmp___33);
#line 3095
        if ((int )_amd64_rex_bits___4 != 0) {
#line 3095
          tmp___34 = jit->ip;
#line 3095
          (jit->ip) ++;
#line 3095
          *tmp___34 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
        } else
#line 3095
        if ((int )sizeof(void *) == 1) {
#line 3095
          tmp___34 = jit->ip;
#line 3095
          (jit->ip) ++;
#line 3095
          *tmp___34 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
        }
#line 3095
        break;
      }
#line 3095
      switch ((int )sizeof(void *)) {
      case 1: 
#line 3095
      tmp___35 = jit->ip;
#line 3095
      (jit->ip) ++;
#line 3095
      *tmp___35 = (unsigned char)136;
#line 3095
      break;
      case 8: 
      case 4: 
      case 2: 
#line 3095
      tmp___36 = jit->ip;
#line 3095
      (jit->ip) ++;
#line 3095
      *tmp___36 = (unsigned char)137;
#line 3095
      break;
      default: 
#line 3095
      tmp___37 = __builtin_expect(1L, 0L);
#line 3095
      if (tmp___37) {
#line 3095
        __assert_rtn((char const   *)"emit_subx_op", (char const   *)"./jitter-Darwin-X86-64.c",
                     3095, (char const   *)"0");
      }
      }
#line 3095
      while (1) {
#line 3095
        if (- ((int )sizeof(void *)) == 0) {
#line 3095
          while (1) {
#line 3095
            tmp___38 = jit->ip;
#line 3095
            (jit->ip) ++;
#line 3095
            *tmp___38 = (unsigned char )((((op->r_arg[2] & 7L) & 7L) << 3) | 4L);
#line 3095
            break;
          }
#line 3095
          while (1) {
#line 3095
            tmp___39 = jit->ip;
#line 3095
            (jit->ip) ++;
#line 3095
            *tmp___39 = (unsigned char )((4 << 3) | 4);
#line 3095
            break;
          }
        } else
#line 3095
        if ((jit_value )(- ((int )sizeof(void *))) >= -128L) {
#line 3095
          if ((jit_value )(- ((int )sizeof(void *))) <= 127L) {
#line 3095
            while (1) {
#line 3095
              tmp___40 = jit->ip;
#line 3095
              (jit->ip) ++;
#line 3095
              *tmp___40 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[2] & 7L) & 7L) << 3)) | 4L);
#line 3095
              break;
            }
#line 3095
            while (1) {
#line 3095
              tmp___41 = jit->ip;
#line 3095
              (jit->ip) ++;
#line 3095
              *tmp___41 = (unsigned char )((4 << 3) | 4);
#line 3095
              break;
            }
#line 3095
            while (1) {
#line 3095
              *(jit->ip) = (unsigned char )(- ((int )sizeof(void *)) & 0xff);
#line 3095
              (jit->ip) ++;
#line 3095
              break;
            }
          } else {
#line 3095
            goto _L___0;
          }
        } else {
          _L___0: /* CIL Label */ 
#line 3095
          while (1) {
#line 3095
            tmp___42 = jit->ip;
#line 3095
            (jit->ip) ++;
#line 3095
            *tmp___42 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[2] & 7L) & 7L) << 3)) | 4L);
#line 3095
            break;
          }
#line 3095
          while (1) {
#line 3095
            tmp___43 = jit->ip;
#line 3095
            (jit->ip) ++;
#line 3095
            *tmp___43 = (unsigned char )((4 << 3) | 4);
#line 3095
            break;
          }
#line 3095
          while (1) {
#line 3095
            imb___1.val = - ((int )sizeof(void *));
#line 3095
            tmp___44 = jit->ip;
#line 3095
            (jit->ip) ++;
#line 3095
            *tmp___44 = imb___1.b[0];
#line 3095
            tmp___45 = jit->ip;
#line 3095
            (jit->ip) ++;
#line 3095
            *tmp___45 = imb___1.b[1];
#line 3095
            tmp___46 = jit->ip;
#line 3095
            (jit->ip) ++;
#line 3095
            *tmp___46 = imb___1.b[2];
#line 3095
            tmp___47 = jit->ip;
#line 3095
            (jit->ip) ++;
#line 3095
            *tmp___47 = imb___1.b[3];
#line 3095
            break;
          }
        }
#line 3095
        break;
#line 3095
        if (- ((int )sizeof(void *)) == 0) {
#line 3095
          while (1) {
#line 3095
            tmp___48 = jit->ip;
#line 3095
            (jit->ip) ++;
#line 3095
            *tmp___48 = (unsigned char )((((op->r_arg[2] & 7L) & 7L) << 3) | 4L);
#line 3095
            break;
          }
#line 3095
          break;
        }
#line 3095
        if ((jit_value )(- ((int )sizeof(void *))) >= -128L) {
#line 3095
          if ((jit_value )(- ((int )sizeof(void *))) <= 127L) {
#line 3095
            while (1) {
#line 3095
              tmp___49 = jit->ip;
#line 3095
              (jit->ip) ++;
#line 3095
              *tmp___49 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[2] & 7L) & 7L) << 3)) | 4L);
#line 3095
              break;
            }
#line 3095
            while (1) {
#line 3095
              *(jit->ip) = (unsigned char )(- ((int )sizeof(void *)) & 0xff);
#line 3095
              (jit->ip) ++;
#line 3095
              break;
            }
          } else {
#line 3095
            goto _L___1;
          }
        } else {
          _L___1: /* CIL Label */ 
#line 3095
          while (1) {
#line 3095
            tmp___50 = jit->ip;
#line 3095
            (jit->ip) ++;
#line 3095
            *tmp___50 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[2] & 7L) & 7L) << 3)) | 4L);
#line 3095
            break;
          }
#line 3095
          while (1) {
#line 3095
            imb___2.val = - ((int )sizeof(void *));
#line 3095
            tmp___51 = jit->ip;
#line 3095
            (jit->ip) ++;
#line 3095
            *tmp___51 = imb___2.b[0];
#line 3095
            tmp___52 = jit->ip;
#line 3095
            (jit->ip) ++;
#line 3095
            *tmp___52 = imb___2.b[1];
#line 3095
            tmp___53 = jit->ip;
#line 3095
            (jit->ip) ++;
#line 3095
            *tmp___53 = imb___2.b[2];
#line 3095
            tmp___54 = jit->ip;
#line 3095
            (jit->ip) ++;
#line 3095
            *tmp___54 = imb___2.b[3];
#line 3095
            break;
          }
        }
#line 3095
        break;
      }
#line 3095
      break;
    }
#line 3096
    while (1) {
#line 3096
      if ((int )sizeof(void *) == 2) {
#line 3096
        tmp___55 = jit->ip;
#line 3096
        (jit->ip) ++;
#line 3096
        *tmp___55 = (unsigned char)102;
      }
#line 3096
      while (1) {
#line 3096
        if ((int )sizeof(void *) > 4) {
#line 3096
          tmp___56 = 8;
        } else {
#line 3096
          tmp___56 = 0;
        }
#line 3096
        if (op->r_arg[0] > 7L) {
#line 3096
          tmp___57 = 4;
        } else {
#line 3096
          tmp___57 = 0;
        }
#line 3096
        if (op->r_arg[1] > 7L) {
#line 3096
          tmp___58 = 1;
        } else {
#line 3096
          tmp___58 = 0;
        }
#line 3096
        _amd64_rex_bits___5 = (unsigned char )((tmp___56 | tmp___57) | tmp___58);
#line 3096
        if ((int )_amd64_rex_bits___5 != 0) {
#line 3096
          tmp___59 = jit->ip;
#line 3096
          (jit->ip) ++;
#line 3096
          *tmp___59 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
        } else
#line 3096
        if ((int )sizeof(void *) == 1) {
#line 3096
          tmp___59 = jit->ip;
#line 3096
          (jit->ip) ++;
#line 3096
          *tmp___59 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
        }
#line 3096
        break;
      }
#line 3096
      switch ((int )sizeof(void *)) {
      case 1: 
#line 3096
      tmp___60 = jit->ip;
#line 3096
      (jit->ip) ++;
#line 3096
      *tmp___60 = (unsigned char)138;
#line 3096
      break;
      case 8: 
      case 4: 
      case 2: 
#line 3096
      tmp___61 = jit->ip;
#line 3096
      (jit->ip) ++;
#line 3096
      *tmp___61 = (unsigned char)139;
#line 3096
      break;
      default: 
#line 3096
      tmp___62 = __builtin_expect(1L, 0L);
#line 3096
      if (tmp___62) {
#line 3096
        __assert_rtn((char const   *)"emit_subx_op", (char const   *)"./jitter-Darwin-X86-64.c",
                     3096, (char const   *)"0");
      }
      }
#line 3096
      while (1) {
#line 3096
        while (1) {
#line 3096
          tmp___63 = jit->ip;
#line 3096
          (jit->ip) ++;
#line 3096
          *tmp___63 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
#line 3096
          break;
        }
#line 3096
        break;
      }
#line 3096
      break;
    }
#line 3097
    while (1) {
#line 3097
      while (1) {
#line 3097
        if (op->r_arg[0] > 7L) {
#line 3097
          tmp___64 = 4;
        } else {
#line 3097
          tmp___64 = 0;
        }
#line 3097
        _amd64_rex_bits___6 = (unsigned char )(8 | tmp___64);
#line 3097
        if ((int )_amd64_rex_bits___6 != 0) {
#line 3097
          tmp___65 = jit->ip;
#line 3097
          (jit->ip) ++;
#line 3097
          *tmp___65 = (unsigned char )(0x40 | (int )_amd64_rex_bits___6);
        }
#line 3097
        break;
      }
#line 3097
      while (1) {
#line 3097
        tmp___66 = jit->ip;
#line 3097
        (jit->ip) ++;
#line 3097
        *tmp___66 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 3);
#line 3097
        while (1) {
#line 3097
          if (- ((int )sizeof(void *)) == 0) {
#line 3097
            while (1) {
#line 3097
              tmp___67 = jit->ip;
#line 3097
              (jit->ip) ++;
#line 3097
              *tmp___67 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | 4L);
#line 3097
              break;
            }
#line 3097
            while (1) {
#line 3097
              tmp___68 = jit->ip;
#line 3097
              (jit->ip) ++;
#line 3097
              *tmp___68 = (unsigned char )((4 << 3) | 4);
#line 3097
              break;
            }
          } else
#line 3097
          if ((jit_value )(- ((int )sizeof(void *))) >= -128L) {
#line 3097
            if ((jit_value )(- ((int )sizeof(void *))) <= 127L) {
#line 3097
              while (1) {
#line 3097
                tmp___69 = jit->ip;
#line 3097
                (jit->ip) ++;
#line 3097
                *tmp___69 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
#line 3097
                break;
              }
#line 3097
              while (1) {
#line 3097
                tmp___70 = jit->ip;
#line 3097
                (jit->ip) ++;
#line 3097
                *tmp___70 = (unsigned char )((4 << 3) | 4);
#line 3097
                break;
              }
#line 3097
              while (1) {
#line 3097
                *(jit->ip) = (unsigned char )(- ((int )sizeof(void *)) & 0xff);
#line 3097
                (jit->ip) ++;
#line 3097
                break;
              }
            } else {
#line 3097
              goto _L___2;
            }
          } else {
            _L___2: /* CIL Label */ 
#line 3097
            while (1) {
#line 3097
              tmp___71 = jit->ip;
#line 3097
              (jit->ip) ++;
#line 3097
              *tmp___71 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
#line 3097
              break;
            }
#line 3097
            while (1) {
#line 3097
              tmp___72 = jit->ip;
#line 3097
              (jit->ip) ++;
#line 3097
              *tmp___72 = (unsigned char )((4 << 3) | 4);
#line 3097
              break;
            }
#line 3097
            while (1) {
#line 3097
              imb___3.val = - ((int )sizeof(void *));
#line 3097
              tmp___73 = jit->ip;
#line 3097
              (jit->ip) ++;
#line 3097
              *tmp___73 = imb___3.b[0];
#line 3097
              tmp___74 = jit->ip;
#line 3097
              (jit->ip) ++;
#line 3097
              *tmp___74 = imb___3.b[1];
#line 3097
              tmp___75 = jit->ip;
#line 3097
              (jit->ip) ++;
#line 3097
              *tmp___75 = imb___3.b[2];
#line 3097
              tmp___76 = jit->ip;
#line 3097
              (jit->ip) ++;
#line 3097
              *tmp___76 = imb___3.b[3];
#line 3097
              break;
            }
          }
#line 3097
          break;
#line 3097
          if (- ((int )sizeof(void *)) == 0) {
#line 3097
            while (1) {
#line 3097
              tmp___77 = jit->ip;
#line 3097
              (jit->ip) ++;
#line 3097
              *tmp___77 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | 4L);
#line 3097
              break;
            }
#line 3097
            break;
          }
#line 3097
          if ((jit_value )(- ((int )sizeof(void *))) >= -128L) {
#line 3097
            if ((jit_value )(- ((int )sizeof(void *))) <= 127L) {
#line 3097
              while (1) {
#line 3097
                tmp___78 = jit->ip;
#line 3097
                (jit->ip) ++;
#line 3097
                *tmp___78 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
#line 3097
                break;
              }
#line 3097
              while (1) {
#line 3097
                *(jit->ip) = (unsigned char )(- ((int )sizeof(void *)) & 0xff);
#line 3097
                (jit->ip) ++;
#line 3097
                break;
              }
            } else {
#line 3097
              goto _L___3;
            }
          } else {
            _L___3: /* CIL Label */ 
#line 3097
            while (1) {
#line 3097
              tmp___79 = jit->ip;
#line 3097
              (jit->ip) ++;
#line 3097
              *tmp___79 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
#line 3097
              break;
            }
#line 3097
            while (1) {
#line 3097
              imb___4.val = - ((int )sizeof(void *));
#line 3097
              tmp___80 = jit->ip;
#line 3097
              (jit->ip) ++;
#line 3097
              *tmp___80 = imb___4.b[0];
#line 3097
              tmp___81 = jit->ip;
#line 3097
              (jit->ip) ++;
#line 3097
              *tmp___81 = imb___4.b[1];
#line 3097
              tmp___82 = jit->ip;
#line 3097
              (jit->ip) ++;
#line 3097
              *tmp___82 = imb___4.b[2];
#line 3097
              tmp___83 = jit->ip;
#line 3097
              (jit->ip) ++;
#line 3097
              *tmp___83 = imb___4.b[3];
#line 3097
              break;
            }
          }
#line 3097
          break;
        }
#line 3097
        break;
      }
#line 3097
      break;
    }
  } else {
#line 3099
    while (1) {
#line 3099
      if ((int )sizeof(void *) == 2) {
#line 3099
        tmp___84 = jit->ip;
#line 3099
        (jit->ip) ++;
#line 3099
        *tmp___84 = (unsigned char)102;
      }
#line 3099
      while (1) {
#line 3099
        if ((int )sizeof(void *) > 4) {
#line 3099
          tmp___85 = 8;
        } else {
#line 3099
          tmp___85 = 0;
        }
#line 3099
        if (op->r_arg[0] > 7L) {
#line 3099
          tmp___86 = 4;
        } else {
#line 3099
          tmp___86 = 0;
        }
#line 3099
        if (op->r_arg[1] > 7L) {
#line 3099
          tmp___87 = 1;
        } else {
#line 3099
          tmp___87 = 0;
        }
#line 3099
        _amd64_rex_bits___7 = (unsigned char )((tmp___85 | tmp___86) | tmp___87);
#line 3099
        if ((int )_amd64_rex_bits___7 != 0) {
#line 3099
          tmp___88 = jit->ip;
#line 3099
          (jit->ip) ++;
#line 3099
          *tmp___88 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
        } else
#line 3099
        if ((int )sizeof(void *) == 1) {
#line 3099
          tmp___88 = jit->ip;
#line 3099
          (jit->ip) ++;
#line 3099
          *tmp___88 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
        }
#line 3099
        break;
      }
#line 3099
      switch ((int )sizeof(void *)) {
      case 1: 
#line 3099
      tmp___89 = jit->ip;
#line 3099
      (jit->ip) ++;
#line 3099
      *tmp___89 = (unsigned char)138;
#line 3099
      break;
      case 8: 
      case 4: 
      case 2: 
#line 3099
      tmp___90 = jit->ip;
#line 3099
      (jit->ip) ++;
#line 3099
      *tmp___90 = (unsigned char)139;
#line 3099
      break;
      default: 
#line 3099
      tmp___91 = __builtin_expect(1L, 0L);
#line 3099
      if (tmp___91) {
#line 3099
        __assert_rtn((char const   *)"emit_subx_op", (char const   *)"./jitter-Darwin-X86-64.c",
                     3099, (char const   *)"0");
      }
      }
#line 3099
      while (1) {
#line 3099
        while (1) {
#line 3099
          tmp___92 = jit->ip;
#line 3099
          (jit->ip) ++;
#line 3099
          *tmp___92 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
#line 3099
          break;
        }
#line 3099
        break;
      }
#line 3099
      break;
    }
#line 3100
    while (1) {
#line 3100
      while (1) {
#line 3100
        if (op->r_arg[0] > 7L) {
#line 3100
          tmp___93 = 4;
        } else {
#line 3100
          tmp___93 = 0;
        }
#line 3100
        if (op->r_arg[2] > 7L) {
#line 3100
          tmp___94 = 1;
        } else {
#line 3100
          tmp___94 = 0;
        }
#line 3100
        _amd64_rex_bits___8 = (unsigned char )((8 | tmp___93) | tmp___94);
#line 3100
        if ((int )_amd64_rex_bits___8 != 0) {
#line 3100
          tmp___95 = jit->ip;
#line 3100
          (jit->ip) ++;
#line 3100
          *tmp___95 = (unsigned char )(0x40 | (int )_amd64_rex_bits___8);
        }
#line 3100
        break;
      }
#line 3100
      tmp___96 = jit->ip;
#line 3100
      (jit->ip) ++;
#line 3100
      *tmp___96 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 3);
#line 3100
      while (1) {
#line 3100
        while (1) {
#line 3100
          tmp___97 = jit->ip;
#line 3100
          (jit->ip) ++;
#line 3100
          *tmp___97 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
#line 3100
          break;
        }
#line 3100
        break;
      }
#line 3100
      break;
    }
  }
#line 3102
  return;
}
}
/* END FUNCTION-DEF emit_subx_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rotate_left LOC=UNKNOWN */
__inline static jit_tree *rotate_left(jit_tree *h ) 
{ 
  jit_tree *x ;

  {
#line 353
  x = h->right;
#line 354
  h->right = x->left;
#line 355
  x->left = h;
#line 356
  x->color = (x->left)->color;
#line 357
  (x->left)->color = 1;
#line 358
  return (x);
}
}
/* END FUNCTION-DEF rotate_left LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF join_muli_addi LOC=UNKNOWN */
static int join_muli_addi(jit_op *op , jit_op *nextop ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 2239
  if (nextop->arg[2] >= (-0x7FFFFFFF-1)) {
#line 2239
    if (! (nextop->arg[2] <= 2147483647L)) {
#line 2239
      return (0);
    }
  } else {
#line 2239
    return (0);
  }
#line 2240
  tmp = is_suitable_mul(op);
#line 2240
  if (! tmp) {
#line 2240
    return (0);
  }
#line 2241
  tmp___0 = make_addmuli(op, nextop);
#line 2241
  return (tmp___0);
}
}
/* END FUNCTION-DEF join_muli_addi LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_branch_mask_op LOC=UNKNOWN */
static void emit_branch_mask_op(struct jit *jit , struct jit_op *op , int cond , int imm ) 
{ 
  unsigned char _amd64_rex_bits ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  x86_imm_buf imb ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___13 ;
  int offset ;
  int tmp___14 ;
  size_t tmp___15 ;
  int tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;

  {
#line 3325
  if (imm) {
#line 3325
    while (1) {
#line 3325
      while (1) {
#line 3325
        if (op->r_arg[1] > 7L) {
#line 3325
          tmp = 1;
        } else {
#line 3325
          tmp = 0;
        }
#line 3325
        _amd64_rex_bits = (unsigned char )(8 | tmp);
#line 3325
        if ((int )_amd64_rex_bits != 0) {
#line 3325
          tmp___0 = jit->ip;
#line 3325
          (jit->ip) ++;
#line 3325
          *tmp___0 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
        }
#line 3325
        break;
      }
#line 3325
      while (1) {
#line 3325
        if ((op->r_arg[1] & 7L) == 0L) {
#line 3325
          tmp___1 = jit->ip;
#line 3325
          (jit->ip) ++;
#line 3325
          *tmp___1 = (unsigned char)169;
        } else {
#line 3325
          tmp___2 = jit->ip;
#line 3325
          (jit->ip) ++;
#line 3325
          *tmp___2 = (unsigned char)247;
#line 3325
          while (1) {
#line 3325
            while (1) {
#line 3325
              tmp___3 = jit->ip;
#line 3325
              (jit->ip) ++;
#line 3325
              *tmp___3 = (unsigned char )((long )(3 << 6) | ((op->r_arg[1] & 7L) & 7L));
#line 3325
              break;
            }
#line 3325
            break;
          }
        }
#line 3325
        while (1) {
#line 3325
          imb.val = (int )op->r_arg[2];
#line 3325
          tmp___4 = jit->ip;
#line 3325
          (jit->ip) ++;
#line 3325
          *tmp___4 = imb.b[0];
#line 3325
          tmp___5 = jit->ip;
#line 3325
          (jit->ip) ++;
#line 3325
          *tmp___5 = imb.b[1];
#line 3325
          tmp___6 = jit->ip;
#line 3325
          (jit->ip) ++;
#line 3325
          *tmp___6 = imb.b[2];
#line 3325
          tmp___7 = jit->ip;
#line 3325
          (jit->ip) ++;
#line 3325
          *tmp___7 = imb.b[3];
#line 3325
          break;
        }
#line 3325
        break;
      }
#line 3325
      break;
    }
  } else {
#line 3326
    while (1) {
#line 3326
      while (1) {
#line 3326
        if (op->r_arg[1] > 7L) {
#line 3326
          tmp___8 = 4;
        } else {
#line 3326
          tmp___8 = 0;
        }
#line 3326
        if (op->r_arg[2] > 7L) {
#line 3326
          tmp___9 = 1;
        } else {
#line 3326
          tmp___9 = 0;
        }
#line 3326
        _amd64_rex_bits___0 = (unsigned char )((8 | tmp___8) | tmp___9);
#line 3326
        if ((int )_amd64_rex_bits___0 != 0) {
#line 3326
          tmp___10 = jit->ip;
#line 3326
          (jit->ip) ++;
#line 3326
          *tmp___10 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
        }
#line 3326
        break;
      }
#line 3326
      while (1) {
#line 3326
        tmp___11 = jit->ip;
#line 3326
        (jit->ip) ++;
#line 3326
        *tmp___11 = (unsigned char)133;
#line 3326
        while (1) {
#line 3326
          while (1) {
#line 3326
            tmp___12 = jit->ip;
#line 3326
            (jit->ip) ++;
#line 3326
            *tmp___12 = (unsigned char )(((long )(3 << 6) | (((op->r_arg[2] & 7L) & 7L) << 3)) | ((op->r_arg[1] & 7L) & 7L));
#line 3326
            break;
          }
#line 3326
          break;
        }
#line 3326
        break;
      }
#line 3326
      break;
    }
  }
#line 3328
  op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
#line 3330
  while (1) {
#line 3330
    while (1) {
#line 3330
      _amd64_rex_bits___1 = (unsigned char)8;
#line 3330
      if ((int )_amd64_rex_bits___1 != 0) {
#line 3330
        tmp___13 = jit->ip;
#line 3330
        (jit->ip) ++;
#line 3330
        *tmp___13 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
      }
#line 3330
      break;
    }
#line 3330
    while (1) {
#line 3330
      tmp___16 = jit_is_label(jit, (void *)op->r_arg[0]);
#line 3330
      if (tmp___16) {
#line 3330
        tmp___15 = ((size_t )((jit_value )jit->buf) + ((jit_label *)op->r_arg[0])->pos) - (size_t )((jit_value )jit->ip);
      } else {
#line 3330
        tmp___15 = (size_t )op->r_arg[0];
      }
#line 3330
      offset = (int )(tmp___15 - 6UL);
#line 3330
      while (1) {
#line 3330
        tmp___17 = jit->ip;
#line 3330
        (jit->ip) ++;
#line 3330
        *tmp___17 = (unsigned char)15;
#line 3330
        tmp___19 = jit->ip;
#line 3330
        (jit->ip) ++;
#line 3330
        *tmp___19 = (unsigned char )((int const   )x86_cc_unsigned_map[cond] + 16);
#line 3330
        while (1) {
#line 3330
          imb___0.val = offset;
#line 3330
          tmp___20 = jit->ip;
#line 3330
          (jit->ip) ++;
#line 3330
          *tmp___20 = imb___0.b[0];
#line 3330
          tmp___21 = jit->ip;
#line 3330
          (jit->ip) ++;
#line 3330
          *tmp___21 = imb___0.b[1];
#line 3330
          tmp___22 = jit->ip;
#line 3330
          (jit->ip) ++;
#line 3330
          *tmp___22 = imb___0.b[2];
#line 3330
          tmp___23 = jit->ip;
#line 3330
          (jit->ip) ++;
#line 3330
          *tmp___23 = imb___0.b[3];
#line 3330
          break;
        }
#line 3330
        break;
      }
#line 3330
      break;
    }
#line 3330
    break;
  }
#line 3331
  return;
}
}
/* END FUNCTION-DEF emit_branch_mask_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_op_prepend LOC=UNKNOWN */
__inline static void jit_op_prepend(jit_op *op , jit_op *prepended ) 
{ 


  {
#line 853
  prepended->prev = op->prev;
#line 854
  if ((unsigned long )op->prev != (unsigned long )((void *)0)) {
#line 854
    (op->prev)->next = prepended;
  }
#line 855
  prepended->next = op;
#line 856
  op->prev = prepended;
#line 857
  return;
}
}
/* END FUNCTION-DEF jit_op_prepend LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF get_related_op LOC=UNKNOWN */
static jit_op *get_related_op(jit_op *op , int result_reg ) 
{ 
  jit_op *nextop ;
  int tmp ;
  int used ;
  int i ;

  {
#line 2173
  nextop = op->next;
#line 2175
  if (nextop->arg[0] != (jit_value )result_reg) {
#line 2175
    tmp = jit_set_get(nextop->live_out, result_reg);
#line 2175
    if (tmp) {
#line 2175
      return ((jit_op *)((void *)0));
    }
  }
#line 2177
  used = 0;
#line 2178
  i = 0;
#line 2178
  while (i < 3) {
#line 2179
    if ((((int )nextop->spec >> ((i + 1) - 1) * 2) & 0x03) == 0x01) {
#line 2179
      if (nextop->arg[i]) {
#line 2180
        used = 1;
#line 2181
        break;
      }
    }
#line 2178
    i ++;
  }
#line 2183
  if (used) {
#line 2183
    return (nextop);
  }
#line 2184
  return ((jit_op *)((void *)0));
}
}
/* END FUNCTION-DEF get_related_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_branch_op LOC=UNKNOWN */
static void emit_branch_op(struct jit *jit , struct jit_op *op , int cond , int imm ,
                           int sign ) 
{ 
  unsigned char _amd64_rex_bits ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  x86_imm_buf imb ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___17 ;
  int tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___22 ;
  int offset ;
  int tmp___23 ;
  size_t tmp___24 ;
  int tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;

  {
#line 3315
  if (imm) {
#line 3315
    while (1) {
#line 3315
      if (op->r_arg[2] >= -128L) {
#line 3315
        if (op->r_arg[2] <= 127L) {
#line 3315
          while (1) {
#line 3315
            if (op->r_arg[1] > 7L) {
#line 3315
              tmp = 1;
            } else {
#line 3315
              tmp = 0;
            }
#line 3315
            _amd64_rex_bits = (unsigned char )(8 | tmp);
#line 3315
            if ((int )_amd64_rex_bits != 0) {
#line 3315
              tmp___0 = jit->ip;
#line 3315
              (jit->ip) ++;
#line 3315
              *tmp___0 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
            }
#line 3315
            break;
          }
#line 3315
          tmp___1 = jit->ip;
#line 3315
          (jit->ip) ++;
#line 3315
          *tmp___1 = (unsigned char)131;
#line 3315
          while (1) {
#line 3315
            while (1) {
#line 3315
              tmp___2 = jit->ip;
#line 3315
              (jit->ip) ++;
#line 3315
              *tmp___2 = (unsigned char )((long )((3 << 6) | (7 << 3)) | (op->r_arg[1] & 7L));
#line 3315
              break;
            }
#line 3315
            break;
          }
#line 3315
          while (1) {
#line 3315
            *(jit->ip) = (unsigned char )(op->r_arg[2] & 255L);
#line 3315
            (jit->ip) ++;
#line 3315
            break;
          }
        } else {
#line 3315
          goto _L;
        }
      } else
      _L: /* CIL Label */ 
#line 3315
      if (op->r_arg[1] == 0L) {
#line 3315
        while (1) {
#line 3315
          _amd64_rex_bits___0 = (unsigned char)8;
#line 3315
          if ((int )_amd64_rex_bits___0 != 0) {
#line 3315
            tmp___3 = jit->ip;
#line 3315
            (jit->ip) ++;
#line 3315
            *tmp___3 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
          }
#line 3315
          break;
        }
#line 3315
        tmp___4 = jit->ip;
#line 3315
        (jit->ip) ++;
#line 3315
        *tmp___4 = (unsigned char )((7 << 3) + 5);
#line 3315
        while (1) {
#line 3315
          imb.val = (int )op->r_arg[2];
#line 3315
          tmp___5 = jit->ip;
#line 3315
          (jit->ip) ++;
#line 3315
          *tmp___5 = imb.b[0];
#line 3315
          tmp___6 = jit->ip;
#line 3315
          (jit->ip) ++;
#line 3315
          *tmp___6 = imb.b[1];
#line 3315
          tmp___7 = jit->ip;
#line 3315
          (jit->ip) ++;
#line 3315
          *tmp___7 = imb.b[2];
#line 3315
          tmp___8 = jit->ip;
#line 3315
          (jit->ip) ++;
#line 3315
          *tmp___8 = imb.b[3];
#line 3315
          break;
        }
      } else {
#line 3315
        while (1) {
#line 3315
          if (op->r_arg[1] > 7L) {
#line 3315
            tmp___9 = 1;
          } else {
#line 3315
            tmp___9 = 0;
          }
#line 3315
          _amd64_rex_bits___1 = (unsigned char )(8 | tmp___9);
#line 3315
          if ((int )_amd64_rex_bits___1 != 0) {
#line 3315
            tmp___10 = jit->ip;
#line 3315
            (jit->ip) ++;
#line 3315
            *tmp___10 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
          }
#line 3315
          break;
        }
#line 3315
        tmp___11 = jit->ip;
#line 3315
        (jit->ip) ++;
#line 3315
        *tmp___11 = (unsigned char)129;
#line 3315
        while (1) {
#line 3315
          while (1) {
#line 3315
            tmp___12 = jit->ip;
#line 3315
            (jit->ip) ++;
#line 3315
            *tmp___12 = (unsigned char )((long )((3 << 6) | (7 << 3)) | (op->r_arg[1] & 7L));
#line 3315
            break;
          }
#line 3315
          break;
        }
#line 3315
        while (1) {
#line 3315
          imb___0.val = (int )op->r_arg[2];
#line 3315
          tmp___13 = jit->ip;
#line 3315
          (jit->ip) ++;
#line 3315
          *tmp___13 = imb___0.b[0];
#line 3315
          tmp___14 = jit->ip;
#line 3315
          (jit->ip) ++;
#line 3315
          *tmp___14 = imb___0.b[1];
#line 3315
          tmp___15 = jit->ip;
#line 3315
          (jit->ip) ++;
#line 3315
          *tmp___15 = imb___0.b[2];
#line 3315
          tmp___16 = jit->ip;
#line 3315
          (jit->ip) ++;
#line 3315
          *tmp___16 = imb___0.b[3];
#line 3315
          break;
        }
      }
#line 3315
      break;
    }
  } else {
#line 3316
    while (1) {
#line 3316
      while (1) {
#line 3316
        if (op->r_arg[1] > 7L) {
#line 3316
          tmp___17 = 4;
        } else {
#line 3316
          tmp___17 = 0;
        }
#line 3316
        if (op->r_arg[2] > 7L) {
#line 3316
          tmp___18 = 1;
        } else {
#line 3316
          tmp___18 = 0;
        }
#line 3316
        _amd64_rex_bits___2 = (unsigned char )((8 | tmp___17) | tmp___18);
#line 3316
        if ((int )_amd64_rex_bits___2 != 0) {
#line 3316
          tmp___19 = jit->ip;
#line 3316
          (jit->ip) ++;
#line 3316
          *tmp___19 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
        }
#line 3316
        break;
      }
#line 3316
      tmp___20 = jit->ip;
#line 3316
      (jit->ip) ++;
#line 3316
      *tmp___20 = (unsigned char )((7 << 3) + 3);
#line 3316
      while (1) {
#line 3316
        while (1) {
#line 3316
          tmp___21 = jit->ip;
#line 3316
          (jit->ip) ++;
#line 3316
          *tmp___21 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[1] & 7L) << 3)) | (op->r_arg[2] & 7L));
#line 3316
          break;
        }
#line 3316
        break;
      }
#line 3316
      break;
    }
  }
#line 3318
  op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
#line 3320
  while (1) {
#line 3320
    while (1) {
#line 3320
      _amd64_rex_bits___3 = (unsigned char)8;
#line 3320
      if ((int )_amd64_rex_bits___3 != 0) {
#line 3320
        tmp___22 = jit->ip;
#line 3320
        (jit->ip) ++;
#line 3320
        *tmp___22 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
      }
#line 3320
      break;
    }
#line 3320
    while (1) {
#line 3320
      tmp___25 = jit_is_label(jit, (void *)op->r_arg[0]);
#line 3320
      if (tmp___25) {
#line 3320
        tmp___24 = ((size_t )((jit_value )jit->buf) + ((jit_label *)op->r_arg[0])->pos) - (size_t )((jit_value )jit->ip);
      } else {
#line 3320
        tmp___24 = (size_t )op->r_arg[0];
      }
#line 3320
      offset = (int )(tmp___24 - 6UL);
#line 3320
      while (1) {
#line 3320
        tmp___26 = jit->ip;
#line 3320
        (jit->ip) ++;
#line 3320
        *tmp___26 = (unsigned char)15;
#line 3320
        if (sign) {
#line 3320
          tmp___27 = jit->ip;
#line 3320
          (jit->ip) ++;
#line 3320
          *tmp___27 = (unsigned char )((int const   )x86_cc_signed_map[cond] + 16);
        } else {
#line 3320
          tmp___28 = jit->ip;
#line 3320
          (jit->ip) ++;
#line 3320
          *tmp___28 = (unsigned char )((int const   )x86_cc_unsigned_map[cond] + 16);
        }
#line 3320
        while (1) {
#line 3320
          imb___1.val = offset;
#line 3320
          tmp___29 = jit->ip;
#line 3320
          (jit->ip) ++;
#line 3320
          *tmp___29 = imb___1.b[0];
#line 3320
          tmp___30 = jit->ip;
#line 3320
          (jit->ip) ++;
#line 3320
          *tmp___30 = imb___1.b[1];
#line 3320
          tmp___31 = jit->ip;
#line 3320
          (jit->ip) ++;
#line 3320
          *tmp___31 = imb___1.b[2];
#line 3320
          tmp___32 = jit->ip;
#line 3320
          (jit->ip) ++;
#line 3320
          *tmp___32 = imb___1.b[3];
#line 3320
          break;
        }
#line 3320
        break;
      }
#line 3320
      break;
    }
#line 3320
    break;
  }
#line 3321
  return;
}
}
/* END FUNCTION-DEF emit_branch_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF fib LOC=UNKNOWN */
void fib(int n ) 
{ 
  static struct jit *p20  = (struct jit *)0;
  static void (*_TIG_JD_HQIz_4_fib___foo)(int n ) ;
  int localSize22 ;
  unsigned int KEY_1494878675_538327513_1893549042_1808446567[4]  = {1494878675U,
                                                                     538327513U, 1893549042U,
                                                                     1808446567U};
  unsigned int _TIG_JD_HQIz_4_fib_block_50_362[4]  = {1444080428U, 1810969561U, 1487389103U,
                                                      2989609030U};
  unsigned int _TIG_JD_HQIz_4_fib_block_15_363[54]  = {3865797297U, 3760891365U, 761558494U,
                                                       522395450U, 1526277045U, 1882151377U,
                                                       3457709525U, 3107598410U, 1465759862U,
                                                       1029219087U, 1858616483U, 81869482U,
                                                       2076120487U, 2292022325U, 3366769101U,
                                                       3508836953U, 4090355843U, 2708521218U,
                                                       2350869097U, 2464386636U, 188510432U,
                                                       1700858715U, 1028085647U, 269730501U,
                                                       3843530221U, 1726252080U, 4053607345U,
                                                       4056946771U, 3532174769U, 2561271905U,
                                                       3815749639U, 3581645820U, 1949698010U,
                                                       3232014597U, 4281811494U, 1363023094U,
                                                       1795185181U, 224071490U, 3101847575U,
                                                       756771728U, 294538421U, 4064989444U,
                                                       1432271430U, 710928989U, 1651729196U,
                                                       1240040863U, 185950207U, 3880805153U,
                                                       2337757917U, 832498083U, 3651700240U,
                                                       3673228229U, 2895187267U, 691264721U};
  unsigned int _TIG_JD_HQIz_4_fib_block_8_364[62]  = {3865797297U, 3760891365U, 761558494U,
                                                      522395450U, 1526277045U, 1882151377U,
                                                      3457709525U, 3107598410U, 1465759862U,
                                                      1029219087U, 1858616483U, 81869482U,
                                                      3454081999U, 2597673017U, 200363617U,
                                                      2562688756U, 4090355843U, 2708521218U,
                                                      2350869097U, 2464386636U, 2582019990U,
                                                      1569007058U, 4092598785U, 1165392865U,
                                                      3203902000U, 2612081203U, 4090355843U,
                                                      2708521218U, 165166150U, 1062991189U,
                                                      366944322U, 4040064371U, 539312246U,
                                                      3440173831U, 2102169762U, 1151175671U,
                                                      2889765177U, 3056537090U, 3985140965U,
                                                      2711517693U, 2784173030U, 2154055888U,
                                                      685951863U, 816404079U, 397797121U,
                                                      824613667U, 274738467U, 1807000045U,
                                                      2402421675U, 965908417U, 2647148688U,
                                                      2909351605U, 1062093895U, 3594036299U,
                                                      1765112844U, 2993033847U, 3023753826U,
                                                      2739226783U, 406849208U, 276185752U,
                                                      2935676902U, 1502408300U};
  unsigned int _TIG_JD_HQIz_4_fib_block_3_365[22]  = {3865797297U, 3760891365U, 761558494U,
                                                      522395450U, 1526277045U, 1882151377U,
                                                      3457709525U, 3107598410U, 1465759862U,
                                                      1029219087U, 1858616483U, 81869482U,
                                                      748308417U, 1743382048U, 1412371038U,
                                                      3227713196U, 14687428U, 1150780574U,
                                                      3649725867U, 1098209001U, 3052689886U,
                                                      1853679747U};
  unsigned int _TIG_JD_HQIz_4_fib_block_16_366[32]  = {3865797297U, 3760891365U, 761558494U,
                                                       522395450U, 1526277045U, 1882151377U,
                                                       3457709525U, 3107598410U, 1465759862U,
                                                       1029219087U, 1858616483U, 81869482U,
                                                       748308417U, 1743382048U, 1412371038U,
                                                       3227713196U, 14687428U, 1150780574U,
                                                       4121967146U, 792657600U, 4124960505U,
                                                       1456797105U, 1663984152U, 364170003U,
                                                       2343519458U, 242645394U, 14687428U,
                                                       1150780574U, 2553242030U, 789900243U,
                                                       1168109153U, 3645623787U};
  unsigned int _TIG_JD_HQIz_4_fib_block_36_367[4]  = {3015308295U, 2456679650U, 382995624U,
                                                      3991129455U};
  unsigned int _TIG_JD_HQIz_4_fib_block_26_368[10]  = {3865797297U, 3760891365U, 761558494U,
                                                       522395450U, 1526277045U, 1882151377U,
                                                       3457709525U, 3107598410U, 1784858941U,
                                                       668240381U};
  unsigned int _TIG_JD_HQIz_4_fib_block_19_369[44]  = {2089457311U, 2981884288U, 957859296U,
                                                       889449031U, 3306186640U, 1280531807U,
                                                       2214459479U, 2822463662U, 2114374844U,
                                                       4215843651U, 3128631854U, 69032297U,
                                                       1080600346U, 3005565344U, 4290476190U,
                                                       3816306826U, 4027559976U, 2869328999U,
                                                       2224705390U, 281423291U, 701075140U,
                                                       683806833U, 1188589004U, 3671883122U,
                                                       1832300069U, 3101423687U, 1756273354U,
                                                       4099144994U, 1306796457U, 2292308454U,
                                                       3642241971U, 1560060493U, 1772185333U,
                                                       3405698512U, 3357729287U, 89674792U,
                                                       2282796092U, 1676309847U, 2813450783U,
                                                       3504434609U, 31602387U, 3504531306U,
                                                       1494600203U, 3184256714U};
  unsigned int _TIG_JD_HQIz_4_fib_block_17_370[32]  = {3865797297U, 3760891365U, 761558494U,
                                                       522395450U, 1526277045U, 1882151377U,
                                                       3457709525U, 3107598410U, 1465759862U,
                                                       1029219087U, 1858616483U, 81869482U,
                                                       748308417U, 1743382048U, 1412371038U,
                                                       3227713196U, 14687428U, 1150780574U,
                                                       4121967146U, 792657600U, 4124960505U,
                                                       1456797105U, 4285735600U, 3259001333U,
                                                       1412371038U, 3227713196U, 14687428U,
                                                       1150780574U, 2553242030U, 789900243U,
                                                       3615615965U, 747923792U};
  unsigned int _TIG_JD_HQIz_4_fib_block_27_371[52]  = {3865797297U, 3760891365U, 761558494U,
                                                       522395450U, 1480491644U, 2891198548U,
                                                       1519005496U, 1530496939U, 2403941728U,
                                                       1442483633U, 1858616483U, 81869482U,
                                                       2076120487U, 2292022325U, 3366769101U,
                                                       3508836953U, 4090355843U, 2708521218U,
                                                       1511374732U, 3446476188U, 2960654237U,
                                                       1678555805U, 3086385990U, 368225042U,
                                                       2433331070U, 4109670214U, 3169314791U,
                                                       2202104145U, 1302102285U, 4044365254U,
                                                       1350085867U, 2327042791U, 3270327190U,
                                                       428958051U, 3535311860U, 3975813057U,
                                                       1505435969U, 231646484U, 2293674092U,
                                                       3011685368U, 2403941728U, 1442483633U,
                                                       2065122346U, 2811423260U, 2237122875U,
                                                       1579259482U, 2543888468U, 1215684332U,
                                                       1814671273U, 109164422U, 3284762216U,
                                                       348721987U};
  unsigned int _TIG_JD_HQIz_4_fib_block_34_372[4]  = {3015308295U, 2456679650U, 382995624U,
                                                      3991129455U};
  unsigned int _TIG_JD_HQIz_4_fib_block_28_373[48]  = {3865797297U, 3760891365U, 761558494U,
                                                       522395450U, 1480491644U, 2891198548U,
                                                       1519005496U, 1530496939U, 2403941728U,
                                                       1442483633U, 1858616483U, 81869482U,
                                                       2076120487U, 2292022325U, 3366769101U,
                                                       3508836953U, 4090355843U, 2708521218U,
                                                       1511374732U, 3446476188U, 988951805U,
                                                       2662194866U, 1407920468U, 1474966984U,
                                                       2477253014U, 3396225271U, 2402421675U,
                                                       965908417U, 185950207U, 3880805153U,
                                                       2433500196U, 48674455U, 3824796436U,
                                                       2288612145U, 3023753826U, 2739226783U,
                                                       3286810522U, 353811158U, 3865797297U,
                                                       3760891365U, 761558494U, 522395450U,
                                                       1480491644U, 2891198548U, 1519005496U,
                                                       1530496939U, 2717629007U, 1143989579U};
  unsigned int _TIG_JD_HQIz_4_fib_block_5_374[10]  = {3865797297U, 3760891365U, 2173171270U,
                                                      2018706490U, 3006385897U, 2682043074U,
                                                      2591059234U, 562243003U, 1965739915U,
                                                      3286638776U};
  unsigned int _TIG_JD_HQIz_4_fib_block_10_375[48]  = {3865797297U, 3760891365U, 761558494U,
                                                       522395450U, 1480491644U, 2891198548U,
                                                       1519005496U, 1530496939U, 2403941728U,
                                                       1442483633U, 1858616483U, 81869482U,
                                                       748308417U, 1743382048U, 1412371038U,
                                                       3227713196U, 14687428U, 1150780574U,
                                                       3926256925U, 3205123961U, 4135459984U,
                                                       3626901977U, 1412826086U, 1194919999U,
                                                       3370495442U, 293214133U, 2398795273U,
                                                       510527512U, 2784173030U, 2154055888U,
                                                       3055650927U, 1072354517U, 321865409U,
                                                       863377019U, 3245285980U, 374708606U,
                                                       2445156191U, 2929247318U, 4066325132U,
                                                       957222925U, 2860284462U, 1175157140U,
                                                       2480511193U, 508811278U, 3914638065U,
                                                       1986211332U, 3992696035U, 832714832U};
  unsigned int _TIG_JD_HQIz_4_fib_block_39_376[4]  = {3015308295U, 2456679650U, 382995624U,
                                                      3991129455U};
  unsigned int _TIG_JD_HQIz_4_fib_block_7_377[14]  = {2858941721U, 1289223576U, 567593275U,
                                                      866621778U, 2872122042U, 3596291017U,
                                                      629949489U, 2725296509U, 2370440710U,
                                                      2339357110U, 2447140425U, 1606200693U,
                                                      1706025681U, 1154092196U};
  unsigned int _TIG_JD_HQIz_4_fib_block_12_378[20]  = {3865797297U, 3760891365U, 761558494U,
                                                       522395450U, 1480491644U, 2891198548U,
                                                       1519005496U, 1530496939U, 2403941728U,
                                                       1442483633U, 2065122346U, 2811423260U,
                                                       493693162U, 3790098226U, 1390699531U,
                                                       757701913U, 3852417292U, 3793516835U,
                                                       4244255285U, 1168273524U};
  unsigned int _TIG_JD_HQIz_4_fib_block_45_379[4]  = {3015308295U, 2456679650U, 382995624U,
                                                      3991129455U};
  unsigned int _TIG_JD_HQIz_4_fib_block_11_380[64]  = {3865797297U, 3760891365U, 761558494U,
                                                       522395450U, 1480491644U, 2891198548U,
                                                       1519005496U, 1530496939U, 2403941728U,
                                                       1442483633U, 1858616483U, 81869482U,
                                                       3454081999U, 2597673017U, 200363617U,
                                                       2562688756U, 4090355843U, 2708521218U,
                                                       1511374732U, 3446476188U, 3614067952U,
                                                       2435222532U, 388395449U, 912476982U,
                                                       3547968886U, 3173653027U, 871305017U,
                                                       3259154193U, 3101847575U, 756771728U,
                                                       2327104970U, 1019452678U, 442815909U,
                                                       700069472U, 1095519425U, 1768387736U,
                                                       1818192604U, 4236198370U, 3814031360U,
                                                       1189757590U, 3023753826U, 2739226783U,
                                                       2156124722U, 3477832816U, 1435206690U,
                                                       851526480U, 288826703U, 2295426325U,
                                                       765364733U, 314182458U, 1302102285U,
                                                       4044365254U, 1350085867U, 2327042791U,
                                                       2646364860U, 685302043U, 2393284064U,
                                                       2818684551U, 1505435969U, 231646484U,
                                                       2293674092U, 3011685368U, 2717629007U,
                                                       1143989579U};
  unsigned int _TIG_JD_HQIz_4_fib_block_9_381[52]  = {3865797297U, 3760891365U, 761558494U,
                                                      522395450U, 1480491644U, 2891198548U,
                                                      1519005496U, 1530496939U, 2403941728U,
                                                      1442483633U, 1858616483U, 81869482U,
                                                      2076120487U, 2292022325U, 3366769101U,
                                                      3508836953U, 4090355843U, 2708521218U,
                                                      1511374732U, 3446476188U, 1876910925U,
                                                      536463251U, 2197550066U, 3501948937U,
                                                      547583834U, 3623775089U, 1981748454U,
                                                      1063841909U, 4271294509U, 225703631U,
                                                      2958159265U, 2645632558U, 2559317737U,
                                                      1588016446U, 2231691452U, 2354989324U,
                                                      2169634577U, 358377711U, 1069402571U,
                                                      1662752816U, 3830892764U, 1689755131U,
                                                      2851650795U, 3909011913U, 1897854345U,
                                                      830458887U, 463361367U, 3769071849U,
                                                      1692392660U, 2129805510U, 392103132U,
                                                      173460717U};
  unsigned int _TIG_JD_HQIz_4_fib_block_13_382[10]  = {3865797297U, 3760891365U, 761558494U,
                                                       522395450U, 1480491644U, 2891198548U,
                                                       1519005496U, 1530496939U, 2717629007U,
                                                       1143989579U};
  unsigned int _TIG_JD_HQIz_4_fib_block_51_383[4]  = {3015308295U, 2456679650U, 382995624U,
                                                      3991129455U};
  unsigned int _TIG_JD_HQIz_4_fib_block_40_384[4]  = {3015308295U, 2456679650U, 382995624U,
                                                      3991129455U};
  unsigned int _TIG_JD_HQIz_4_fib_block_6_385[10]  = {3865797297U, 3760891365U, 761558494U,
                                                      522395450U, 1480491644U, 2891198548U,
                                                      1519005496U, 1530496939U, 2717629007U,
                                                      1143989579U};
  unsigned int _TIG_JD_HQIz_4_fib_block_38_386[4]  = {3015308295U, 2456679650U, 382995624U,
                                                      3991129455U};
  unsigned int _TIG_JD_HQIz_4_fib_block_48_387[4]  = {3015308295U, 2456679650U, 382995624U,
                                                      3991129455U};
  unsigned int _TIG_JD_HQIz_4_fib_block_47_388[4]  = {3015308295U, 2456679650U, 382995624U,
                                                      3991129455U};
  unsigned int _TIG_JD_HQIz_4_fib_block_37_389[4]  = {3015308295U, 2456679650U, 382995624U,
                                                      3991129455U};
  unsigned int _TIG_JD_HQIz_4_fib_block_46_390[4]  = {3015308295U, 2456679650U, 382995624U,
                                                      3991129455U};
  unsigned int _TIG_JD_HQIz_4_fib_block_35_391[4]  = {3015308295U, 2456679650U, 382995624U,
                                                      3991129455U};
  unsigned int _TIG_JD_HQIz_4_fib_block_29_392[48]  = {3865797297U, 3760891365U, 761558494U,
                                                       522395450U, 1480491644U, 2891198548U,
                                                       1519005496U, 1530496939U, 2403941728U,
                                                       1442483633U, 1858616483U, 81869482U,
                                                       748308417U, 1743382048U, 1412371038U,
                                                       3227713196U, 14687428U, 1150780574U,
                                                       3926256925U, 3205123961U, 1432412270U,
                                                       2094769909U, 3485264083U, 779957132U,
                                                       2402032157U, 617753438U, 2398795273U,
                                                       510527512U, 2784173030U, 2154055888U,
                                                       3306381074U, 3628436678U, 197948139U,
                                                       3400525342U, 3815749639U, 3581645820U,
                                                       1949698010U, 3232014597U, 4011323351U,
                                                       2161825555U, 2686584926U, 3283896859U,
                                                       3101847575U, 756771728U, 3827806865U,
                                                       2818977076U, 3284762216U, 348721987U};
  unsigned int _TIG_JD_HQIz_4_fib_block_43_393[4]  = {3015308295U, 2456679650U, 382995624U,
                                                      3991129455U};
  jit_label *self394 ;
  struct jit_op *op395 ;
  jit_label *label396 ;
  struct jit_op *op397 ;
  jit_label *label398 ;
  jit_label *label399 ;
  struct jit_op *op400 ;
  struct jit_op *op401 ;
  jit_label *label402 ;
  struct jit_op *op403 ;
  jit_label *label404 ;
  struct jit_op *op405 ;
  struct jit_op *op406 ;
  jit_label *label407 ;
  struct jit_op *op408 ;
  jit_label *label409 ;
  struct jit_op *op410 ;
  jit_label *label411 ;
  struct jit_op *op412 ;
  struct jit_op *op413 ;
  jit_label *label414 ;
  struct jit_op *op415 ;
  jit_label *label416 ;
  struct jit_op *op417 ;
  jit_label *label418 ;
  struct jit_op *op419 ;
  struct jit_op *op420 ;
  jit_label *label421 ;
  struct jit_op *op422 ;
  struct jit_op *op423 ;
  struct jit_op *op424 ;
  struct jit_op *op425 ;
  struct jit_op *op426 ;
  struct jit_op *op427 ;
  struct jit_op *op428 ;
  struct jit_op *op429 ;
  struct jit_op *op430 ;
  struct jit_op *op431 ;
  struct jit_op *op432 ;
  struct jit_op *op433 ;
  struct jit_op *op434 ;
  struct jit_op *op435 ;
  struct jit_op *op436 ;
  struct jit_op *op437 ;
  struct jit_op *op438 ;
  struct jit_op *op439 ;
  struct jit_op *op440 ;
  struct jit_op *op441 ;
  struct jit_op *op442 ;
  struct jit_op *op443 ;
  struct jit_op *op444 ;
  struct jit_op *op445 ;
  struct jit_op *op446 ;
  struct jit_op *op447 ;
  struct jit_op *op448 ;
  struct jit_op *op449 ;
  struct jit_op *op450 ;
  struct jit_op *op451 ;
  struct jit_op *op452 ;
  struct jit_op *op453 ;
  struct jit_op *op454 ;
  struct jit_op *op455 ;
  struct jit_op *op456 ;
  struct jit_op *op457 ;
  struct jit_op *op458 ;
  struct jit_op *op459 ;
  struct jit_op *op460 ;
  struct jit_op *op461 ;
  struct jit_op *op462 ;
  struct jit_op *op463 ;
  struct jit_op *op464 ;
  struct jit_op *op465 ;
  struct jit_op *op466 ;
  struct jit_op *op467 ;
  struct jit_op *op468 ;
  struct jit_op *op469 ;
  struct jit_op *op470 ;
  struct jit_op *op471 ;
  struct jit_op *op472 ;
  struct jit_op *op473 ;
  jit_label *label474 ;
  struct jit_op *op475 ;
  struct jit_op *op476 ;
  jit_label *label477 ;
  struct jit_op *op478 ;
  jit_label *label479 ;
  struct jit_op *op480 ;
  jit_label *label481 ;
  jit_label *label482 ;
  struct jit_op *op483 ;
  struct jit_op *op484 ;
  jit_label *label485 ;
  struct jit_op *op486 ;
  jit_label *label487 ;
  struct jit_op *op488 ;
  struct jit_op *op489 ;
  jit_label *label490 ;
  struct jit_op *op491 ;
  struct jit_op *op492 ;
  jit_label *label493 ;
  struct jit_op *op494 ;
  jit_label *label495 ;
  struct jit_op *op496 ;
  struct jit_op *op497 ;
  jit_label *label498 ;
  struct jit_op *op499 ;
  struct jit_op *op500 ;
  jit_label *label501 ;
  jit_label *label502 ;
  struct jit_op *op503 ;
  jit_label *label504 ;
  struct jit_op *op505 ;
  jit_label *label506 ;
  struct jit_op *op507 ;
  jit_label *label508 ;
  jit_label *label509 ;
  jit_label *label510 ;
  struct jit_op *op511 ;
  struct jit_op *op512 ;
  jit_label *label513 ;
  jit_label *label514 ;
  struct jit_op *op515 ;
  jit_label *label516 ;
  struct jit_op *op517 ;
  jit_label *label518 ;
  struct jit_op *op519 ;
  jit_label *label520 ;
  struct jit_op *op521 ;
  jit_label *label522 ;
  struct jit_op *op523 ;
  jit_label *label524 ;
  struct jit_op *op525 ;
  jit_label *label526 ;
  struct jit_op *op527 ;
  struct jit_op *op528 ;
  jit_label *label529 ;
  struct jit_op *op530 ;
  jit_label *label531 ;
  struct jit_op *op532 ;
  jit_label *label533 ;
  struct jit_op *op534 ;
  struct jit_op *op535 ;
  jit_label *label536 ;
  struct jit_op *op537 ;
  jit_label *label538 ;
  jit_label *label539 ;
  jit_label *label540 ;
  struct jit_op *op541 ;
  jit_label *label542 ;
  struct jit_op *op543 ;
  jit_label *label544 ;
  struct jit_op *op545 ;
  jit_label *label546 ;
  struct jit_op *op547 ;
  jit_label *label548 ;
  struct jit_op *op549 ;
  jit_label *label550 ;
  jit_label *label551 ;
  jit_label *label552 ;
  jit_label *label553 ;
  jit_label *label554 ;
  struct jit_op *op555 ;
  jit_label *label556 ;
  struct jit_op *op557 ;
  struct jit_op *op558 ;
  jit_label *label559 ;
  struct jit_op *op560 ;
  jit_label *label561 ;
  jit_label *label562 ;
  struct jit_op *op563 ;
  jit_label *label564 ;
  jit_label *label565 ;
  struct jit_op *op566 ;
  jit_label *label567 ;
  struct jit_op *op568 ;
  jit_label *label569 ;
  struct jit_op *op570 ;
  jit_label *label571 ;
  jit_label *label572 ;
  jit_label *label573 ;
  struct jit_op *op574 ;
  jit_label *label575 ;
  struct jit_op *op576 ;
  jit_label *label577 ;
  struct jit_op *op578 ;
  struct jit_op *op579 ;
  jit_label *label580 ;
  struct jit_op *op581 ;
  jit_label *label582 ;
  jit_label *label583 ;
  struct jit_op *op584 ;
  struct jit_op *op585 ;
  jit_label *label586 ;
  jit_label *label587 ;
  struct jit_op *op588 ;
  struct jit_op *op589 ;
  jit_label *label590 ;
  struct jit_op *op591 ;
  jit_label *label592 ;
  struct jit_op *op593 ;
  struct jit_op *op594 ;
  jit_label *label595 ;
  struct jit_op *op596 ;
  jit_label *label597 ;
  struct jit_op *op598 ;
  jit_label *label599 ;
  struct jit_op *op600 ;
  jit_label *label601 ;
  struct jit_op *op602 ;
  jit_label *label603 ;
  struct jit_op *op604 ;
  jit_label *label605 ;
  jit_label *label606 ;
  jit_label *label607 ;
  jit_label *label608 ;
  jit_label *label609 ;
  jit_label *label610 ;
  jit_label *label611 ;
  jit_label *label612 ;
  jit_label *label613 ;
  jit_label *label614 ;
  jit_label *label615 ;
  jit_label *label616 ;
  jit_label *label617 ;
  struct jit_op *op618 ;
  jit_label *label619 ;
  struct jit_op *op620 ;
  jit_label *label621 ;
  jit_label *label622 ;
  struct jit_op *op623 ;
  jit_label *label624 ;
  jit_label *label625 ;
  jit_label *label626 ;
  jit_label *label627 ;
  jit_label *label628 ;
  jit_label *label629 ;
  jit_label *label630 ;
  jit_label *label631 ;
  jit_label *label632 ;
  jit_label *label633 ;
  struct jit_op *op634 ;
  jit_label *label635 ;
  jit_label *label636 ;
  struct jit_op *op637 ;
  jit_label *label638 ;
  jit_label *label639 ;
  jit_label *label640 ;
  jit_label *label641 ;
  jit_label *label642 ;
  jit_label *label643 ;
  jit_label *label644 ;
  jit_label *label645 ;
  jit_label *label646 ;
  jit_label *label647 ;
  jit_label *label648 ;
  jit_label *label649 ;
  int measure_iter650 ;
  unsigned int low651 ;
  unsigned int high652 ;
  unsigned int low653 ;
  unsigned int high654 ;
  struct timeval __cil_tmp655 ;
  int __cil_tmp656 ;
  struct timeval __cil_tmp657 ;
  int __cil_tmp658 ;
  struct timeval res659 ;
  struct timeval t0660 ;
  struct timeval t1661 ;
  struct timeval t0662 ;

  {
  __cil_tmp656 = gettimeofday(& __cil_tmp655, 0);
  __asm__ volatile ("cpuid\n"
                    "rdtsc\n": "=a" (low651), "=d" (high652));
  measure_iter650 = 0;
  while (measure_iter650 < 100) {
    if (p20 != 0) {
      jit_free(p20);
      p20 = 0;
    } else {

    }
    p20 = jit_init();
    jit_enable_optimization(p20, 1L);
    jit_enable_optimization(p20, 2L);
    jit_enable_optimization(p20, 4L);
    jit_enable_optimization(p20, 8L);
    self394 = jit_get_label(p20);
    jit_add_prolog(p20, & _TIG_JD_HQIz_4_fib___foo, 0);
    localSize22 = jit_allocai(p20, 1396L);
    jit_add_op(p20, JIT_DECL_ARG, ((0 << 4) | (2 << 2)) | 2, 0, 4, 0L, 0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1336),
               0L, 0);
    jit_add_op(p20, JIT_GETARG, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), 0L, 4, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1360),
               0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (jit_value )(& _TIG_VZ_HQIz_3_fib_$strings), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1384),
               0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((6 & 268435455) << 4)),
               (jit_value )(& _TIG_JD_HQIz_4_fib___t), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((6 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((7 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1376),
               0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((8 & 268435455) << 4)),
               (jit_value )(& printf), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((7 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((8 & 268435455) << 4)), 0L, 8, 0);
    op395 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label396 = jit_get_label(p20);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1320),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1320),
               0L, 0);
    jit_add_op(p20, JIT_LD | (1 | 4), ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               1L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_MUL | (2 | 4), ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((6 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)), 8L, 0L, 0);
    jit_add_op(p20, JIT_ADD | 1, ((1 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((7 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), (0 & 1) | (((0 & 3) << 1) | ((6 & 268435455) << 4)),
               0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((7 & 268435455) << 4)), 0L, 8, 0);
    op397 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label398 = jit_get_label(p20);
    jit_data_bytes(p20, 16L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_50_362));
    label399 = jit_get_label(p20);
    op400 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 51L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    op401 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label402 = jit_get_label(p20);
    op403 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 19L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 176L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label399,
               0L, 0L, 0L, 0);
    label404 = jit_get_label(p20);
    op405 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 19L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 176L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    op406 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label407 = jit_get_label(p20);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label398, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 50L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    op408 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label409 = jit_get_label(p20);
    jit_data_bytes(p20, 216L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_15_363));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    op410 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label411 = jit_get_label(p20);
    op412 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 43L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    op413 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label414 = jit_get_label(p20);
    jit_data_bytes(p20, 248L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_8_364));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    op415 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label416 = jit_get_label(p20);
    op417 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label418 = jit_get_label(p20);
    op419 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    op420 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label421 = jit_get_label(p20);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 752L, 0L, 0);
    op422 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 744L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               1L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 736L, 0L, 0);
    op423 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 728L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               1L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 720L, 0L, 0);
    op424 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 712L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               1L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 704L, 0L, 0);
    op425 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 696L, 0L, 0);
    op426 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 688L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               548L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 680L, 0L, 0);
    op427 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 672L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               (jit_value )label416, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 664L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               528L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 656L, 0L, 0);
    op428 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 648L, 0L, 0);
    op429 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 640L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               544L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 632L, 0L, 0);
    op430 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 624L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               (jit_value )label416, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 616L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 608L, 0L, 0);
    op431 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 600L, 0L, 0);
    op432 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 592L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               536L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 584L, 0L, 0);
    op433 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 576L, 0L, 0);
    op434 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 568L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 560L, 0L, 0);
    op435 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 552L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               4294967249L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 544L, 0L, 0);
    op436 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 536L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               4294967251L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 528L, 0L, 0);
    op437 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 520L, 0L, 0);
    op438 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 512L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               532L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 504L, 0L, 0);
    op439 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 496L, 0L, 0);
    op440 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 488L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               (jit_value )label416, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 480L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               532L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 472L, 0L, 0);
    op441 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 464L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               1L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 456L, 0L, 0);
    op442 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 448L, 0L, 0);
    op443 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 440L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               524L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 432L, 0L, 0);
    op444 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 424L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               (jit_value )label416, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 416L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               528L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 408L, 0L, 0);
    op445 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 400L, 0L, 0);
    op446 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 392L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               520L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 384L, 0L, 0);
    op447 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 376L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               (jit_value )label416, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 368L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               524L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 360L, 0L, 0);
    op448 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 352L, 0L, 0);
    op449 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 344L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               528L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 336L, 0L, 0);
    op450 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 328L, 0L, 0);
    op451 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 320L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               (jit_value )label416, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 312L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               520L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 304L, 0L, 0);
    op452 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 296L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               (jit_value )label416, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 288L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               524L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 280L, 0L, 0);
    op453 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 272L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               36L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 264L, 0L, 0);
    op454 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 256L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               1L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 248L, 0L, 0);
    op455 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 240L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               5L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 232L, 0L, 0);
    op456 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 224L, 0L, 0);
    op457 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 216L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               (jit_value )label416, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 208L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 200L, 0L, 0);
    op458 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 192L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               (jit_value )label416, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 184L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               532L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 176L, 0L, 0);
    op459 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 168L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               1L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 160L, 0L, 0);
    op460 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 152L, 0L, 0);
    op461 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 144L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               532L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 136L, 0L, 0);
    op462 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 128L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               1L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 120L, 0L, 0);
    op463 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 112L, 0L, 0);
    op464 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 104L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               528L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 96L, 0L, 0);
    op465 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 88L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               1L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 80L, 0L, 0);
    op466 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 72L, 0L, 0);
    op467 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 64L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               524L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 56L, 0L, 0);
    op468 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 48L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               1L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 40L, 0L, 0);
    op469 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 32L, 0L, 0);
    op470 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 24L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               520L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 16L, 0L, 0);
    op471 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 8L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    op472 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 760),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 768),
               0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               8L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ADD | 1, ((1 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1320),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
               0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1328),
               0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 768),
               0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ADD | 1, ((1 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1328),
               0L, 0);
    jit_add_op(p20, JIT_LD | (1 | 4), ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1336),
               0L, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
    op473 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label474 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op417, 0L,
               0L, 0L, 0);
    op475 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 17L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 128L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    op476 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label477 = jit_get_label(p20);
    jit_data_bytes(p20, 88L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_3_365));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    op478 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label479 = jit_get_label(p20);
    jit_data_bytes(p20, 128L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_16_366));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    op480 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label481 = jit_get_label(p20);
    jit_data_bytes(p20, 16L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_36_367));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    label482 = jit_get_label(p20);
    op483 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 28L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 192L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    op484 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label485 = jit_get_label(p20);
    op486 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 43L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label418,
               0L, 0L, 0L, 0);
    label487 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op406, 0L,
               0L, 0L, 0);
    op488 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 47L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    op489 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label490 = jit_get_label(p20);
    op491 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 10L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 192L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    op492 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label493 = jit_get_label(p20);
    jit_data_bytes(p20, 40L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_26_368));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    op494 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label495 = jit_get_label(p20);
    op496 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 5L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    op497 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label498 = jit_get_label(p20);
    op499 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 38L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    op500 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label501 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op405, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op403, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 176L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_19_369));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label493,
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label502 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op476, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op475, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 128L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_17_370));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    op503 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label504 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op497, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label409, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 15L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 216L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    op505 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label506 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op456, 0L,
               0L, 0L, 0);
    op507 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label508 = jit_get_label(p20);
    jit_data_bytes(p20, 208L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_27_371));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label481,
               0L, 0L, 0L, 0);
    label509 = jit_get_label(p20);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label414, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 248L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label414,
               0L, 0L, 0L, 0);
    label510 = jit_get_label(p20);
    op511 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 13L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    op512 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label513 = jit_get_label(p20);
    jit_data_bytes(p20, 16L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_34_372));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    label514 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op500, 0L,
               0L, 0L, 0);
    op515 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 48L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label482,
               0L, 0L, 0L, 0);
    label516 = jit_get_label(p20);
    op517 = jit_add_op(p20, JIT_DATA_REF_CODE | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L,
                       0L, 0L, 0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label518 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op483, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 192L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_28_373));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    op519 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label520 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op457, 0L,
               0L, 0L, 0);
    op521 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label522 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op496, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 40L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_5_374));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    op523 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label524 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op420, 0L,
               0L, 0L, 0);
    op525 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 11L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 256L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label510,
               0L, 0L, 0L, 0);
    label526 = jit_get_label(p20);
    op527 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 12L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 80L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    op528 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label529 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op470, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op467, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op464, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op461, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op449, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op446, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op443, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op438, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op429, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op426, 0L,
               0L, 0L, 0);
    op530 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label531 = jit_get_label(p20);
    op532 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 35L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label498,
               0L, 0L, 0L, 0);
    label533 = jit_get_label(p20);
    op534 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 11L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 256L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    op535 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label536 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op480, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label479, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 128L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    op537 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label538 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op491, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 192L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_10_375));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label490,
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label539 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op473, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 16L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_39_376));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label540 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op523, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 56L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_7_377));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    op541 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label542 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op415, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label414, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 248L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    op543 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label544 = jit_get_label(p20);
    op545 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 38L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label407,
               0L, 0L, 0L, 0);
    label546 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op505, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label539, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 39L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    op547 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label548 = jit_get_label(p20);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label508, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 27L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 208L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    op549 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label550 = jit_get_label(p20);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label539, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 39L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label548,
               0L, 0L, 0L, 0);
    label551 = jit_get_label(p20);
    jit_add_op(p20, JIT_REF_DATA, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)),
               (jit_value )label516, 0L, 0L, 0);
    jit_add_op(p20, JIT_SUB | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 1L, 0L, 0);
    jit_add_op(p20, JIT_MUL | (2 | 0), ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 8L, 0L, 0);
    jit_add_op(p20, JIT_LDX | (1 | 4), ((1 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((6 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)), (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               8, 0);
    jit_add_op(p20, JIT_JMP | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((6 & 268435455) << 4)),
               0, 0L, 0L, 0);
    label552 = jit_get_label(p20);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label522, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 5L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label402,
               0L, 0L, 0L, 0);
    label553 = jit_get_label(p20);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label540, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 7L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 56L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label495,
               0L, 0L, 0L, 0);
    label554 = jit_get_label(p20);
    op555 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 46L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label552,
               0L, 0L, 0L, 0);
    label556 = jit_get_label(p20);
    op557 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 9L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 208L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    op558 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label559 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op535, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label481, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 36L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    op560 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label561 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op471, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op468, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op465, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op462, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op459, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op453, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op452, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op450, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op448, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op447, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op445, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op444, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op441, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op439, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op433, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op430, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op428, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op427, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label508,
               0L, 0L, 0L, 0);
    label562 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op395, 0L,
               0L, 0L, 0);
    op563 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 51L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label533,
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label564 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op527, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 80L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_12_378));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label526,
               0L, 0L, 0L, 0);
    label565 = jit_get_label(p20);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label398, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 50L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    op566 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label567 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op432, 0L,
               0L, 0L, 0);
    op568 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label569 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op512, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label493, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 26L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    op570 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label571 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op494, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 16L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_45_379));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    label572 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op503, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label502, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 17L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 128L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label513,
               0L, 0L, 0L, 0);
    label573 = jit_get_label(p20);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label409, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 15L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 216L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    op574 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label575 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op484, 0L,
               0L, 0L, 0);
    op576 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 46L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label404,
               0L, 0L, 0L, 0);
    label577 = jit_get_label(p20);
    op578 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 48L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    op579 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label580 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op397, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1320),
               0L, 0);
    jit_add_op(p20, JIT_LD | (1 | 4), ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 0L, 8, 0);
    jit_add_op(p20, JIT_LD | (1 | 0), ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), 0L, 4, 0);
    jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_BLT | (2 | 0), ((2 << 4) | (1 << 2)) | 2, (jit_value )label493,
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 1L, 0L, 0);
    op581 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label582 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op517, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label501,
               0L, 0L, 0L, 0);
    label583 = jit_get_label(p20);
    op584 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 9L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 208L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    op585 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label586 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op581, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_BGT | (2 | 0), ((2 << 4) | (1 << 2)) | 2, (jit_value )label493,
               (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 1L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label551,
               0L, 0L, 0L, 0);
    label587 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op549, 0L,
               0L, 0L, 0);
    op588 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 35L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    op589 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label590 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op507, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label477, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 3L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 88L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    op591 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label592 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op541, 0L,
               0L, 0L, 0);
    op593 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 6L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    op594 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label595 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op460, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op455, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op454, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op437, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op436, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op424, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op423, 0L,
               0L, 0L, 0);
    op596 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label597 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op570, 0L,
               0L, 0L, 0);
    op598 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 29L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 192L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label554,
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label599 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op534, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op525, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op521, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 256L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_11_380));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    op600 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label601 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op584, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op557, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 208L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_9_381));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    op602 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label603 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op511, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 40L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_13_382));
    op604 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label605 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op563, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op400, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 16L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_51_383));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    label606 = jit_get_label(p20);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label508, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 27L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 208L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label553,
               0L, 0L, 0L, 0);
    label607 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op604, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label481, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 36L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label485,
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label608 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op519, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op419, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 16L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_40_384));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    label609 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op422, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label603,
               0L, 0L, 0L, 0);
    label610 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op458, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op431, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label409,
               0L, 0L, 0L, 0);
    label611 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op401, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label518, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 28L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 192L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label550,
               0L, 0L, 0L, 0);
    label612 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op594, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label477, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 3L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 88L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label398,
               0L, 0L, 0L, 0);
    label613 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op472, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op469, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op466, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op463, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op442, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label518,
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label614 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op593, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 40L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_6_385));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label540,
               0L, 0L, 0L, 0);
    label615 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op408, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label513, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 34L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label573,
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label616 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op545, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op543, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op499, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 16L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_38_386));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    label617 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op434, 0L,
               0L, 0L, 0);
    op618 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label619 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op558, 0L,
               0L, 0L, 0);
    op620 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 37L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label565,
               0L, 0L, 0L, 0);
    label621 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op451, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op440, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label509,
               0L, 0L, 0L, 0);
    label622 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op585, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label571, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 45L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    op623 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                       0);
    label624 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op579, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label540, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 7L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 56L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label544,
               0L, 0L, 0L, 0);
    label625 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op591, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label614, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 6L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label477,
               0L, 0L, 0L, 0);
    label626 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op413, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label608, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label531,
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label627 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op602, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op578, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op515, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 16L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_48_387));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    label628 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op596, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label564, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 12L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 80L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label564,
               0L, 0L, 0L, 0);
    label629 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op425, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label396,
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label630 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op600, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op488, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 16L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_47_388));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    label631 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op489, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label571, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 45L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label606,
               0L, 0L, 0L, 0);
    label632 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op618, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label479, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 128L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label479,
               0L, 0L, 0L, 0);
    label633 = jit_get_label(p20);
    op634 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 29L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 192L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label411,
               0L, 0L, 0L, 0);
    label635 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op530, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label538, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 10L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 192L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label538,
               0L, 0L, 0L, 0);
    label636 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op623, 0L,
               0L, 0L, 0);
    op637 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                       0, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 37L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label577,
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label638 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op637, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op620, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op528, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 16L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_37_389));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    label639 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op566, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label493, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 26L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label633,
               0L, 0L, 0L, 0);
    label640 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op547, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label513, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 34L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label421,
               0L, 0L, 0L, 0);
    label641 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op478, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((9 & 268435455) << 4)),
               (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1392),
               0L, 0);
    jit_add_op(p20, JIT_LD | (1 | 0), ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((10 & 268435455) << 4)),
               (0 & 1) | (((0 & 3) << 1) | ((9 & 268435455) << 4)), 0L, 4, 0);
    jit_add_op(p20, JIT_BNE | 2, ((2 << 4) | (1 << 2)) | 2, (jit_value )label522,
               (0 & 1) | (((0 & 3) << 1) | ((10 & 268435455) << 4)), 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label614,
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label642 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op576, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op555, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op492, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 16L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_46_390));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    label643 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op435, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label601,
               0L, 0L, 0L, 0);
    label644 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op560, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label603, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 13L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label556,
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label645 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op588, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op532, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op410, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 16L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_35_391));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label646 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op634, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op598, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op568, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 192L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_29_392));
    jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label605,
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
               0);
    label647 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op537, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op486, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op412, 0L,
               0L, 0L, 0);
    jit_data_bytes(p20, 16L, (unsigned char *)(_TIG_JD_HQIz_4_fib_block_43_393));
    label648 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op589, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               (jit_value )label630, 0L, 0L, 0);
    jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               (jit_value )(KEY_1494878675_538327513_1893549042_1808446567), 0L, 0L,
               0);
    jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 47L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
               0L, 0L, 0L, 0);
    jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label583,
               0L, 0L, 0L, 0);
    label649 = jit_get_label(p20);
    jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op574, 0L,
               0L, 0L, 0);
    jit_add_op(p20, JIT_RET | 2, ((0 << 4) | (0 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
    jit_generate_code(p20);
    (*_TIG_JD_HQIz_4_fib___foo)(n);


    measure_iter650 ++;
  }
  __asm__ volatile ("cpuid\n"
                    "rdtsc\n": "=a" (low653), "=d" (high654));
  printf("MEASURE,fib,timingCounter,%f\n", (double )((((unsigned long )high654 << 32) | (unsigned long )low653) - (((unsigned long )high652 << 32) | (unsigned long )low651)));
  __cil_tmp658 = gettimeofday(& __cil_tmp657, 0);
  t0660 = __cil_tmp657;
  t1661 = __cil_tmp655;
  res659.tv_sec = t0660.tv_sec - t1661.tv_sec;
  res659.tv_usec = t0660.tv_usec - t1661.tv_usec;
  if (res659.tv_usec < 0) {
    (res659.tv_sec) --;
    res659.tv_usec += 1000000;
  } else {

  }
  t0662 = res659;
  printf("MEASURE,fib,timingGetTimeOfDay,%f\n", (double )t0662.tv_sec + (double )t0662.tv_usec / 1000000.);
  return;
}
}
/* END FUNCTION-DEF fib LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF check_missing_patches LOC=UNKNOWN */
static int check_missing_patches(jit_op *op , char *msg_buf ) 
{ 
  int tmp ;

  {
#line 4991
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 416U) {
#line 4991
    goto _L___1;
  } else
#line 4991
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 384U) {
    _L___1: /* CIL Label */ 
#line 4991
    if ((int )op->code & 0x02) {
#line 4991
      goto _L;
    } else {
#line 4991
      goto _L___0;
    }
  } else {
    _L___0: /* CIL Label */ 
#line 4991
    tmp = jit_op_is_cond_branch(op);
#line 4991
    if (tmp) {
      _L: /* CIL Label */ 
#line 4992
      if (op->arg[0] == (jit_value )((void *)0)) {
#line 4992
        if ((unsigned long )op->jmp_addr == (unsigned long )((void *)0)) {
#line 4993
          append_msg(msg_buf, "missing patch");
#line 4994
          return (128);
        }
      }
    }
  }
#line 4998
  return (0);
}
}
/* END FUNCTION-DEF check_missing_patches LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_clone LOC=UNKNOWN */
static jit_rmap *rmap_clone(jit_rmap *rmap ) 
{ 
  jit_rmap *res ;
  void *tmp ;

  {
#line 1916
  tmp = malloc((size_t )sizeof(jit_rmap ));
#line 1916
  res = (jit_rmap *)tmp;
#line 1917
  res->map = jit_tree_clone(rmap->map);
#line 1918
  return (res);
}
}
/* END FUNCTION-DEF rmap_clone LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_dump_ops LOC=UNKNOWN */
void jit_dump_ops(struct jit *jit , int verbosity ) 
{ 
  jit_tree *labels ;
  jit_tree *tmp ;

  {
#line 4880
  if (! (verbosity & 14)) {
#line 4881
    verbosity |= 0x01;
  }
#line 4883
  tmp = prepare_labels(jit);
#line 4883
  labels = tmp;
#line 4884
  if (verbosity & 0x01) {
#line 4884
    jit_dump_ops_general(jit, labels, verbosity);
  }
#line 4885
  if (verbosity & 0x02) {
#line 4885
    compiler_based_debugger(jit);
  }
#line 4886
  if (verbosity & 0x08) {
#line 4886
    jit_dump_ops_compilable(jit, labels);
  }
#line 4887
  if (verbosity & 0x04) {
#line 4887
    jit_dump_ops_combined(jit, labels);
  }
#line 4888
  jit_tree_free(labels);
#line 4889
  return;
}
}
/* END FUNCTION-DEF jit_dump_ops LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF stack_arg_pos LOC=UNKNOWN */
__inline static int stack_arg_pos(struct jit *jit , struct jit_func_info *info , int arg ) 
{ 
  int tmp ;

  {
#line 1786
  if (info->float_arg_cnt < (jit->reg_al)->fp_arg_reg_cnt) {
#line 1786
    tmp = info->float_arg_cnt;
  } else {
#line 1786
    tmp = (jit->reg_al)->fp_arg_reg_cnt;
  }
#line 1786
  return ((int )(- (info->allocai_mem + (long )(((((info->gp_reg_count + info->fp_reg_count) + tmp) + arg) + 1) * (int )sizeof(void *)))));
}
}
/* END FUNCTION-DEF stack_arg_pos LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_trace LOC=UNKNOWN */
void jit_trace(struct jit *jit , int verbosity ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  jit_op *o ;
  struct jit_op *tmp___0 ;

  {
#line 6227
  tmp = jit_op_first(jit->ops);
#line 6227
  op = tmp->next;
#line 6227
  while ((unsigned long )op != (unsigned long )((void *)0)) {
#line 6228
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 128U) {
#line 6228
      goto __Cont;
    }
#line 6229
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1408U) {
#line 6229
      goto __Cont;
    }
#line 6230
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1424U) {
#line 6230
      goto __Cont;
    }
#line 6231
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1432U) {
#line 6231
      goto __Cont;
    }
#line 6232
    tmp___0 = jit_op_new((unsigned short)4112, (unsigned char)2, (jit_value )verbosity,
                         (jit_value )0, (jit_value )0, (unsigned char)0);
#line 6232
    o = tmp___0;
#line 6233
    o->r_arg[0] = o->arg[0];
#line 6234
    jit_op_prepend(op, o);
    __Cont: /* CIL Label */ 
#line 6227
    op = op->next;
  }
#line 6239
  return;
}
}
/* END FUNCTION-DEF jit_trace LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_pop_reg LOC=UNKNOWN */
static int emit_pop_reg(struct jit *jit , jit_hw_reg *r , int stack_offset ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  long tmp___5 ;
  unsigned char *tmp___6 ;
  x86_imm_buf imb ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;

  {
#line 2750
  if (! r->fp) {
#line 2751
    while (1) {
#line 2751
      if ((int )sizeof(void *) == 2) {
#line 2751
        tmp = jit->ip;
#line 2751
        (jit->ip) ++;
#line 2751
        *tmp = (unsigned char)102;
      }
#line 2751
      while (1) {
#line 2751
        if ((int )sizeof(void *) > 4) {
#line 2751
          tmp___0 = 8;
        } else {
#line 2751
          tmp___0 = 0;
        }
#line 2751
        if (r->id > 7) {
#line 2751
          tmp___1 = 4;
        } else {
#line 2751
          tmp___1 = 0;
        }
#line 2751
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
#line 2751
        if ((int )_amd64_rex_bits != 0) {
#line 2751
          tmp___2 = jit->ip;
#line 2751
          (jit->ip) ++;
#line 2751
          *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
        } else
#line 2751
        if ((int )sizeof(void *) == 1) {
#line 2751
          tmp___2 = jit->ip;
#line 2751
          (jit->ip) ++;
#line 2751
          *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
        }
#line 2751
        break;
      }
#line 2751
      switch ((int )sizeof(void *)) {
      case 1: 
#line 2751
      tmp___3 = jit->ip;
#line 2751
      (jit->ip) ++;
#line 2751
      *tmp___3 = (unsigned char)138;
#line 2751
      break;
      case 8: 
      case 4: 
      case 2: 
#line 2751
      tmp___4 = jit->ip;
#line 2751
      (jit->ip) ++;
#line 2751
      *tmp___4 = (unsigned char)139;
#line 2751
      break;
      default: 
#line 2751
      tmp___5 = __builtin_expect(1L, 0L);
#line 2751
      if (tmp___5) {
#line 2751
        __assert_rtn((char const   *)"emit_pop_reg", (char const   *)"./jitter-Darwin-X86-64.c",
                     2751, (char const   *)"0");
      }
      }
#line 2751
      while (1) {
#line 2751
        while (1) {
#line 2751
          if (stack_offset == 0) {
#line 2751
            while (1) {
#line 2751
              tmp___11 = jit->ip;
#line 2751
              (jit->ip) ++;
#line 2751
              *tmp___11 = (unsigned char )((((r->id & 0x7) & 0x07) << 3) | 4);
#line 2751
              break;
            }
#line 2751
            while (1) {
#line 2751
              tmp___12 = jit->ip;
#line 2751
              (jit->ip) ++;
#line 2751
              *tmp___12 = (unsigned char )((4 << 3) | 4);
#line 2751
              break;
            }
          } else
#line 2751
          if ((jit_value )stack_offset >= -128L) {
#line 2751
            if ((jit_value )stack_offset <= 127L) {
#line 2751
              while (1) {
#line 2751
                tmp___13 = jit->ip;
#line 2751
                (jit->ip) ++;
#line 2751
                *tmp___13 = (unsigned char )(((1 << 6) | (((r->id & 0x7) & 0x07) << 3)) | 4);
#line 2751
                break;
              }
#line 2751
              while (1) {
#line 2751
                tmp___14 = jit->ip;
#line 2751
                (jit->ip) ++;
#line 2751
                *tmp___14 = (unsigned char )((4 << 3) | 4);
#line 2751
                break;
              }
#line 2751
              while (1) {
#line 2751
                *(jit->ip) = (unsigned char )(stack_offset & 0xff);
#line 2751
                (jit->ip) ++;
#line 2751
                break;
              }
            } else {
#line 2751
              goto _L;
            }
          } else {
            _L: /* CIL Label */ 
#line 2751
            while (1) {
#line 2751
              tmp___15 = jit->ip;
#line 2751
              (jit->ip) ++;
#line 2751
              *tmp___15 = (unsigned char )(((2 << 6) | (((r->id & 0x7) & 0x07) << 3)) | 4);
#line 2751
              break;
            }
#line 2751
            while (1) {
#line 2751
              tmp___16 = jit->ip;
#line 2751
              (jit->ip) ++;
#line 2751
              *tmp___16 = (unsigned char )((4 << 3) | 4);
#line 2751
              break;
            }
#line 2751
            while (1) {
#line 2751
              imb___0.val = stack_offset;
#line 2751
              tmp___17 = jit->ip;
#line 2751
              (jit->ip) ++;
#line 2751
              *tmp___17 = imb___0.b[0];
#line 2751
              tmp___18 = jit->ip;
#line 2751
              (jit->ip) ++;
#line 2751
              *tmp___18 = imb___0.b[1];
#line 2751
              tmp___19 = jit->ip;
#line 2751
              (jit->ip) ++;
#line 2751
              *tmp___19 = imb___0.b[2];
#line 2751
              tmp___20 = jit->ip;
#line 2751
              (jit->ip) ++;
#line 2751
              *tmp___20 = imb___0.b[3];
#line 2751
              break;
            }
          }
#line 2751
          break;
#line 2751
          if (stack_offset == 0) {
#line 2751
            while (1) {
#line 2751
              tmp___21 = jit->ip;
#line 2751
              (jit->ip) ++;
#line 2751
              *tmp___21 = (unsigned char )((((r->id & 0x7) & 0x07) << 3) | 4);
#line 2751
              break;
            }
#line 2751
            break;
          }
#line 2751
          if ((jit_value )stack_offset >= -128L) {
#line 2751
            if ((jit_value )stack_offset <= 127L) {
#line 2751
              while (1) {
#line 2751
                tmp___22 = jit->ip;
#line 2751
                (jit->ip) ++;
#line 2751
                *tmp___22 = (unsigned char )(((1 << 6) | (((r->id & 0x7) & 0x07) << 3)) | 4);
#line 2751
                break;
              }
#line 2751
              while (1) {
#line 2751
                *(jit->ip) = (unsigned char )(stack_offset & 0xff);
#line 2751
                (jit->ip) ++;
#line 2751
                break;
              }
            } else {
#line 2751
              goto _L___0;
            }
          } else {
            _L___0: /* CIL Label */ 
#line 2751
            while (1) {
#line 2751
              tmp___23 = jit->ip;
#line 2751
              (jit->ip) ++;
#line 2751
              *tmp___23 = (unsigned char )(((2 << 6) | (((r->id & 0x7) & 0x07) << 3)) | 4);
#line 2751
              break;
            }
#line 2751
            while (1) {
#line 2751
              imb___1.val = stack_offset;
#line 2751
              tmp___24 = jit->ip;
#line 2751
              (jit->ip) ++;
#line 2751
              *tmp___24 = imb___1.b[0];
#line 2751
              tmp___25 = jit->ip;
#line 2751
              (jit->ip) ++;
#line 2751
              *tmp___25 = imb___1.b[1];
#line 2751
              tmp___26 = jit->ip;
#line 2751
              (jit->ip) ++;
#line 2751
              *tmp___26 = imb___1.b[2];
#line 2751
              tmp___27 = jit->ip;
#line 2751
              (jit->ip) ++;
#line 2751
              *tmp___27 = imb___1.b[3];
#line 2751
              break;
            }
          }
#line 2751
          break;
        }
#line 2751
        break;
      }
#line 2751
      break;
    }
#line 2752
    return ((int )sizeof(void *));
  } else {
#line 2754
    while (1) {
#line 2754
      tmp___28 = jit->ip;
#line 2754
      (jit->ip) ++;
#line 2754
      *tmp___28 = (unsigned char)102;
#line 2754
      while (1) {
#line 2754
        if (r->id > 7) {
#line 2754
          tmp___29 = 4;
        } else {
#line 2754
          tmp___29 = 0;
        }
#line 2754
        _amd64_rex_bits___0 = (unsigned char )tmp___29;
#line 2754
        if ((int )_amd64_rex_bits___0 != 0) {
#line 2754
          tmp___30 = jit->ip;
#line 2754
          (jit->ip) ++;
#line 2754
          *tmp___30 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
        }
#line 2754
        break;
      }
#line 2754
      tmp___31 = jit->ip;
#line 2754
      (jit->ip) ++;
#line 2754
      *tmp___31 = (unsigned char)15;
#line 2754
      tmp___32 = jit->ip;
#line 2754
      (jit->ip) ++;
#line 2754
      *tmp___32 = (unsigned char)18;
#line 2754
      while (1) {
#line 2754
        while (1) {
#line 2754
          if (stack_offset == 0) {
#line 2754
            while (1) {
#line 2754
              tmp___38 = jit->ip;
#line 2754
              (jit->ip) ++;
#line 2754
              *tmp___38 = (unsigned char )((((r->id & 0x7) & 0x07) << 3) | 4);
#line 2754
              break;
            }
#line 2754
            while (1) {
#line 2754
              tmp___39 = jit->ip;
#line 2754
              (jit->ip) ++;
#line 2754
              *tmp___39 = (unsigned char )((4 << 3) | 4);
#line 2754
              break;
            }
          } else
#line 2754
          if ((jit_value )stack_offset >= -128L) {
#line 2754
            if ((jit_value )stack_offset <= 127L) {
#line 2754
              while (1) {
#line 2754
                tmp___40 = jit->ip;
#line 2754
                (jit->ip) ++;
#line 2754
                *tmp___40 = (unsigned char )(((1 << 6) | (((r->id & 0x7) & 0x07) << 3)) | 4);
#line 2754
                break;
              }
#line 2754
              while (1) {
#line 2754
                tmp___41 = jit->ip;
#line 2754
                (jit->ip) ++;
#line 2754
                *tmp___41 = (unsigned char )((4 << 3) | 4);
#line 2754
                break;
              }
#line 2754
              while (1) {
#line 2754
                *(jit->ip) = (unsigned char )(stack_offset & 0xff);
#line 2754
                (jit->ip) ++;
#line 2754
                break;
              }
            } else {
#line 2754
              goto _L___1;
            }
          } else {
            _L___1: /* CIL Label */ 
#line 2754
            while (1) {
#line 2754
              tmp___42 = jit->ip;
#line 2754
              (jit->ip) ++;
#line 2754
              *tmp___42 = (unsigned char )(((2 << 6) | (((r->id & 0x7) & 0x07) << 3)) | 4);
#line 2754
              break;
            }
#line 2754
            while (1) {
#line 2754
              tmp___43 = jit->ip;
#line 2754
              (jit->ip) ++;
#line 2754
              *tmp___43 = (unsigned char )((4 << 3) | 4);
#line 2754
              break;
            }
#line 2754
            while (1) {
#line 2754
              imb___3.val = stack_offset;
#line 2754
              tmp___44 = jit->ip;
#line 2754
              (jit->ip) ++;
#line 2754
              *tmp___44 = imb___3.b[0];
#line 2754
              tmp___45 = jit->ip;
#line 2754
              (jit->ip) ++;
#line 2754
              *tmp___45 = imb___3.b[1];
#line 2754
              tmp___46 = jit->ip;
#line 2754
              (jit->ip) ++;
#line 2754
              *tmp___46 = imb___3.b[2];
#line 2754
              tmp___47 = jit->ip;
#line 2754
              (jit->ip) ++;
#line 2754
              *tmp___47 = imb___3.b[3];
#line 2754
              break;
            }
          }
#line 2754
          break;
#line 2754
          if (stack_offset == 0) {
#line 2754
            while (1) {
#line 2754
              tmp___48 = jit->ip;
#line 2754
              (jit->ip) ++;
#line 2754
              *tmp___48 = (unsigned char )((((r->id & 0x7) & 0x07) << 3) | 4);
#line 2754
              break;
            }
#line 2754
            break;
          }
#line 2754
          if ((jit_value )stack_offset >= -128L) {
#line 2754
            if ((jit_value )stack_offset <= 127L) {
#line 2754
              while (1) {
#line 2754
                tmp___49 = jit->ip;
#line 2754
                (jit->ip) ++;
#line 2754
                *tmp___49 = (unsigned char )(((1 << 6) | (((r->id & 0x7) & 0x07) << 3)) | 4);
#line 2754
                break;
              }
#line 2754
              while (1) {
#line 2754
                *(jit->ip) = (unsigned char )(stack_offset & 0xff);
#line 2754
                (jit->ip) ++;
#line 2754
                break;
              }
            } else {
#line 2754
              goto _L___2;
            }
          } else {
            _L___2: /* CIL Label */ 
#line 2754
            while (1) {
#line 2754
              tmp___50 = jit->ip;
#line 2754
              (jit->ip) ++;
#line 2754
              *tmp___50 = (unsigned char )(((2 << 6) | (((r->id & 0x7) & 0x07) << 3)) | 4);
#line 2754
              break;
            }
#line 2754
            while (1) {
#line 2754
              imb___4.val = stack_offset;
#line 2754
              tmp___51 = jit->ip;
#line 2754
              (jit->ip) ++;
#line 2754
              *tmp___51 = imb___4.b[0];
#line 2754
              tmp___52 = jit->ip;
#line 2754
              (jit->ip) ++;
#line 2754
              *tmp___52 = imb___4.b[1];
#line 2754
              tmp___53 = jit->ip;
#line 2754
              (jit->ip) ++;
#line 2754
              *tmp___53 = imb___4.b[2];
#line 2754
              tmp___54 = jit->ip;
#line 2754
              (jit->ip) ++;
#line 2754
              *tmp___54 = imb___4.b[3];
#line 2754
              break;
            }
          }
#line 2754
          break;
        }
#line 2754
        break;
      }
#line 2754
      break;
    }
#line 2755
    return ((int )sizeof(double ));
  }
}
}
/* END FUNCTION-DEF emit_pop_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_unassoc LOC=UNKNOWN */
static void rmap_unassoc(jit_rmap *rmap , jit_value reg ) 
{ 


  {
#line 1911
  rmap->map = jit_tree_delete(rmap->map, reg, (int *)((void *)0));
#line 1912
  return;
}
}
/* END FUNCTION-DEF rmap_unassoc LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_trace_op LOC=UNKNOWN */
void jit_trace_op(struct jit *jit , jit_op *op , int verbosity ) 
{ 
  jit_tree *labels ;
  jit_tree *tmp ;
  FILE *f ;
  FILE *tmp___0 ;

  {
#line 4893
  tmp = prepare_labels(jit);
#line 4893
  labels = tmp;
#line 4894
  if (verbosity & 0x01) {
#line 4895
    print_op(__stdoutp, & jit_disasm_general, op, labels, verbosity);
#line 4896
    printf((char const   */* __restrict  */)"\n");
  }
#line 4898
  if (verbosity & 0x04) {
#line 4900
    tmp___0 = open_disasm();
#line 4900
    f = tmp___0;
#line 4901
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"..addr=%lx\n",
            op->code_offset);
#line 4902
    print_combined_op(f, jit, op, labels);
#line 4903
    fclose(f);
#line 4904
    wait((int *)((void *)0));
  }
#line 4909
  jit_tree_free(labels);
#line 4910
  return;
}
}
/* END FUNCTION-DEF jit_trace_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_tree_addall LOC=UNKNOWN */
__inline static jit_tree *jit_tree_addall(jit_tree *target , jit_tree *n ) 
{ 


  {
#line 529
  if ((unsigned long )n == (unsigned long )((void *)0)) {
#line 529
    return (target);
  }
#line 530
  target = jit_tree_addall(target, n->left);
#line 531
  target = jit_tree_insert(target, n->key, n->value, (int *)((void *)0));
#line 532
  target = jit_tree_addall(target, n->right);
#line 533
  return (target);
}
}
/* END FUNCTION-DEF jit_tree_addall LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF tolower LOC=UNKNOWN */
__inline int tolower(int _c ) 
{ 
  __darwin_ct_rune_t tmp ;

  {
#line 294 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  tmp = __tolower(_c);
#line 294
  return (tmp);
}
}
/* END FUNCTION-DEF tolower LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF initialize_code_refs LOC=UNKNOWN */
__inline static void initialize_code_refs(struct code_refs_cache *code_refs , struct jit_func_info *func_info ) 
{ 
  jit_op *op ;
  void *tmp ;
  int i ;
  int tmp___0 ;

  {
#line 3867 "./jitter-Darwin-X86-64.c"
  op = (func_info->first_op)->next;
#line 3868
  code_refs->size = 0;
#line 3869
  while (1) {
#line 3869
    if (op) {
#line 3869
      if (! ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) != 128U)) {
#line 3869
        break;
      }
    } else {
#line 3869
      break;
    }
#line 3870
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1448U) {
#line 3871
      (code_refs->size) ++;
    } else
#line 3870
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1424U) {
#line 3871
      (code_refs->size) ++;
    }
#line 3872
    op = op->next;
  }
#line 3874
  tmp = malloc((size_t )(sizeof(jit_op *) * (unsigned long long )code_refs->size));
#line 3874
  code_refs->ops = (jit_op **)tmp;
#line 3876
  op = (func_info->first_op)->next;
#line 3877
  i = 0;
#line 3878
  while (1) {
#line 3878
    if (op) {
#line 3878
      if (! ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) != 128U)) {
#line 3878
        break;
      }
    } else {
#line 3878
      break;
    }
#line 3879
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1448U) {
#line 3880
      tmp___0 = i;
#line 3880
      i ++;
#line 3880
      *(code_refs->ops + tmp___0) = op;
    } else
#line 3879
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1424U) {
#line 3880
      tmp___0 = i;
#line 3880
      i ++;
#line 3880
      *(code_refs->ops + tmp___0) = op;
    }
#line 3881
    op = op->next;
  }
#line 3883
  return;
}
}
/* END FUNCTION-DEF initialize_code_refs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_get_unused_reg_with_index LOC=UNKNOWN */
jit_hw_reg *jit_get_unused_reg_with_index(struct jit_reg_allocator *al , jit_op *op ,
                                          int fp , int index___0 ) 
{ 
  jit_hw_reg *regs ;
  int reg_count ;
  int i ;
  int tmp ;

  {
#line 5757
  if (! fp) {
#line 5758
    regs = al->gp_regs;
#line 5759
    reg_count = al->gp_reg_cnt;
  } else {
#line 5761
    regs = al->fp_regs;
#line 5762
    reg_count = al->fp_reg_cnt;
  }
#line 5764
  i = 0;
#line 5764
  while (i < reg_count) {
#line 5765
    if ((regs + i)->callee_saved) {
#line 5765
      goto __Cont;
    }
#line 5766
    tmp = jit_reg_in_use(op, (regs + i)->id, fp);
#line 5766
    if (! tmp) {
#line 5767
      if (index___0 == 0) {
#line 5767
        return (regs + i);
      } else {
#line 5768
        index___0 --;
      }
    }
    __Cont: /* CIL Label */ 
#line 5764
    i ++;
  }
#line 5771
  return ((jit_hw_reg *)((void *)0));
}
}
/* END FUNCTION-DEF jit_get_unused_reg_with_index LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_free_op LOC=UNKNOWN */
__inline static void jit_free_op(struct jit_op *op ) 
{ 
  struct jit_func_info *info ;

  {
#line 879
  if (op->live_in) {
#line 879
    jit_set_free(op->live_in);
  }
#line 880
  if (op->live_out) {
#line 880
    jit_set_free(op->live_out);
  }
#line 881
  rmap_free(op->regmap);
#line 882
  jit_allocator_hints_free(op->allocator_hints);
#line 883
  if (op->debug_info) {
#line 883
    free((void *)op->debug_info);
  }
#line 885
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 128U) {
#line 886
    info = (struct jit_func_info *)op->arg[1];
#line 887
    free((void *)info->args);
#line 888
    free((void *)info);
  }
#line 891
  free((void *)op);
#line 892
  return;
}
}
/* END FUNCTION-DEF jit_free_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_dump_ops_general LOC=UNKNOWN */
static void jit_dump_ops_general(struct jit *jit , jit_tree *labels , int verbosity ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  int size ;
  int tmp___0 ;

  {
#line 4731
  tmp = jit_op_first(jit->ops);
#line 4731
  op = tmp;
#line 4731
  while ((unsigned long )op != (unsigned long )((void *)0)) {
#line 4732
    tmp___0 = print_op(__stdoutp, & jit_disasm_general, op, labels, verbosity);
#line 4732
    size = tmp___0;
#line 4734
    if (size == 0) {
#line 4734
      return;
    }
#line 4736
    while (size < 35) {
#line 4737
      printf((char const   */* __restrict  */)" ");
#line 4736
      size ++;
    }
#line 4739
    if (verbosity & 0x400) {
#line 4739
      if (op->live_in) {
#line 4739
        if (op->live_out) {
#line 4740
          printf((char const   */* __restrict  */)"In: ");
#line 4741
          jit_tree_walk((op->live_in)->root, & print_reg_liveness_callback, (void *)(& jit_disasm_general));
#line 4742
          printf((char const   */* __restrict  */)"\tOut: ");
#line 4743
          jit_tree_walk((op->live_out)->root, & print_reg_liveness_callback, (void *)(& jit_disasm_general));
        }
      }
    }
#line 4746
    if (verbosity & 0x200) {
#line 4746
      if (op->regmap) {
#line 4747
        printf((char const   */* __restrict  */)"\tAssoc: ");
#line 4748
        jit_tree_walk((op->regmap)->map, & print_rmap_callback, (void *)(& jit_disasm_general));
      }
    }
#line 4751
    printf((char const   */* __restrict  */)"\n");
#line 4731
    op = op->next;
  }
#line 4753
  return;
}
}
/* END FUNCTION-DEF jit_dump_ops_general LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_load_op LOC=UNKNOWN */
static int print_load_op(struct jit_disasm *disasm , struct output_buf *linebuf ,
                         jit_op *op ) 
{ 
  char rbuf[256] ;
  char *tmp ;
  char *tmp___0 ;
  jit_value reg ;
  char *tmp___1 ;
  char *tmp___2 ;

  {
#line 4446
  switch ((unsigned int )((jit_opcode )((int )op->code & 0xfff8))) {
  case 24U: 
#line 4448
  ob_append(linebuf, disasm->indent_template);
#line 4449
  tmp = jit_get_op_name(op);
#line 4449
  ob_append(linebuf, tmp);
#line 4450
  ob_pad(linebuf, 13);
#line 4451
  jit_get_reg_name(disasm, rbuf, (int )op->arg[1]);
#line 4452
  ob_append(linebuf, rbuf);
#line 4453
  return (1);
  case 32U: 
  case 16U: 
#line 4456
  ob_append(linebuf, disasm->indent_template);
#line 4457
  tmp___0 = jit_get_op_name(op);
#line 4457
  ob_append(linebuf, tmp___0);
#line 4458
  ob_pad(linebuf, 13);
#line 4459
  jit_get_reg_name(disasm, rbuf, (int )op->arg[0]);
#line 4460
  ob_append(linebuf, rbuf);
#line 4461
  return (1);
  case 40U: 
#line 4464
  rmap_is_associated((op->prev)->regmap, (int )op->arg[1], 0, & reg);
#line 4465
  ob_append(linebuf, disasm->indent_template);
#line 4466
  tmp___1 = jit_get_op_name(op);
#line 4466
  ob_append(linebuf, tmp___1);
#line 4467
  ob_append(linebuf, " ");
#line 4468
  ob_pad(linebuf, 13);
#line 4469
  jit_get_reg_name(disasm, rbuf, (int )reg);
#line 4470
  ob_append(linebuf, rbuf);
#line 4471
  return (1);
  case 48U: 
#line 4474
  ob_append(linebuf, disasm->indent_template);
#line 4475
  tmp___2 = jit_get_op_name(op);
#line 4475
  ob_append(linebuf, tmp___2);
#line 4476
  return (1);
  default: 
#line 4478
  return (0);
  }
}
}
/* END FUNCTION-DEF print_load_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF ob_assert_space LOC=UNKNOWN */
static void ob_assert_space(struct output_buf *ob , int len ) 
{ 
  void *tmp ;

  {
#line 4082
  if ((ob->size + (size_t )len) + 2UL > ob->capacity) {
#line 4083
    ob->capacity += (size_t )(len + 8192);
#line 4084
    tmp = realloc((void *)ob->buf, ob->capacity);
#line 4084
    ob->buf = (char *)tmp;
  }
#line 4086
  return;
}
}
/* END FUNCTION-DEF ob_assert_space LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_floor LOC=UNKNOWN */
static void emit_sse_floor(struct jit *jit , jit_value a1 , jit_value a2 , int floor ) 
{ 
  int tmp_reg ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___15 ;
  int tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___22 ;
  int tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___29 ;
  int tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  x86_imm_buf imb ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___54 ;
  int tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char _amd64_rex_bits___9 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char _amd64_rex_bits___10 ;
  int tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char _amd64_rex_bits___11 ;
  int tmp___79 ;
  int tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char _amd64_rex_bits___12 ;
  int tmp___86 ;
  int tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;

  {
#line 1604
  if (a2 == 7L) {
#line 1604
    tmp = 0;
  } else {
#line 1604
    tmp = 7;
  }
#line 1604
  tmp_reg = tmp;
#line 1607
  while (1) {
#line 1607
    while (1) {
#line 1607
      tmp___0 = jit->ip;
#line 1607
      (jit->ip) ++;
#line 1607
      *tmp___0 = (unsigned char)102;
#line 1607
      while (1) {
#line 1607
        if (a2 > 7L) {
#line 1607
          tmp___1 = 4;
        } else {
#line 1607
          tmp___1 = 0;
        }
#line 1607
        if (a2 > 7L) {
#line 1607
          tmp___2 = 1;
        } else {
#line 1607
          tmp___2 = 0;
        }
#line 1607
        _amd64_rex_bits = (unsigned char )(tmp___1 | tmp___2);
#line 1607
        if ((int )_amd64_rex_bits != 0) {
#line 1607
          tmp___3 = jit->ip;
#line 1607
          (jit->ip) ++;
#line 1607
          *tmp___3 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
        }
#line 1607
        break;
      }
#line 1607
      tmp___4 = jit->ip;
#line 1607
      (jit->ip) ++;
#line 1607
      *tmp___4 = (unsigned char)15;
#line 1607
      tmp___5 = jit->ip;
#line 1607
      (jit->ip) ++;
#line 1607
      *tmp___5 = (unsigned char)198;
#line 1607
      while (1) {
#line 1607
        while (1) {
#line 1607
          tmp___6 = jit->ip;
#line 1607
          (jit->ip) ++;
#line 1607
          *tmp___6 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
#line 1607
          break;
        }
#line 1607
        break;
      }
#line 1607
      break;
    }
#line 1607
    while (1) {
#line 1607
      *(jit->ip) = (unsigned char)0;
#line 1607
      (jit->ip) ++;
#line 1607
      break;
    }
#line 1607
    break;
  }
#line 1609
  while (1) {
#line 1609
    while (1) {
#line 1609
      tmp___7 = jit->ip;
#line 1609
      (jit->ip) ++;
#line 1609
      *tmp___7 = (unsigned char)102;
#line 1609
      while (1) {
#line 1609
        if (tmp_reg > 7) {
#line 1609
          tmp___8 = 4;
        } else {
#line 1609
          tmp___8 = 0;
        }
#line 1609
        if (tmp_reg > 7) {
#line 1609
          tmp___9 = 1;
        } else {
#line 1609
          tmp___9 = 0;
        }
#line 1609
        _amd64_rex_bits___0 = (unsigned char )(tmp___8 | tmp___9);
#line 1609
        if ((int )_amd64_rex_bits___0 != 0) {
#line 1609
          tmp___10 = jit->ip;
#line 1609
          (jit->ip) ++;
#line 1609
          *tmp___10 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
        }
#line 1609
        break;
      }
#line 1609
      tmp___11 = jit->ip;
#line 1609
      (jit->ip) ++;
#line 1609
      *tmp___11 = (unsigned char)15;
#line 1609
      tmp___12 = jit->ip;
#line 1609
      (jit->ip) ++;
#line 1609
      *tmp___12 = (unsigned char)198;
#line 1609
      while (1) {
#line 1609
        while (1) {
#line 1609
          tmp___13 = jit->ip;
#line 1609
          (jit->ip) ++;
#line 1609
          *tmp___13 = (unsigned char )(((3 << 6) | ((tmp_reg & 0x07) << 3)) | (tmp_reg & 0x07));
#line 1609
          break;
        }
#line 1609
        break;
      }
#line 1609
      break;
    }
#line 1609
    while (1) {
#line 1609
      *(jit->ip) = (unsigned char)0;
#line 1609
      (jit->ip) ++;
#line 1609
      break;
    }
#line 1609
    break;
  }
#line 1612
  while (1) {
#line 1612
    tmp___14 = jit->ip;
#line 1612
    (jit->ip) ++;
#line 1612
    *tmp___14 = (unsigned char)242;
#line 1612
    while (1) {
#line 1612
      if (a1 > 7L) {
#line 1612
        tmp___15 = 4;
      } else {
#line 1612
        tmp___15 = 0;
      }
#line 1612
      if (a2 > 7L) {
#line 1612
        tmp___16 = 1;
      } else {
#line 1612
        tmp___16 = 0;
      }
#line 1612
      _amd64_rex_bits___1 = (unsigned char )((8 | tmp___15) | tmp___16);
#line 1612
      if ((int )_amd64_rex_bits___1 != 0) {
#line 1612
        tmp___17 = jit->ip;
#line 1612
        (jit->ip) ++;
#line 1612
        *tmp___17 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
      }
#line 1612
      break;
    }
#line 1612
    tmp___18 = jit->ip;
#line 1612
    (jit->ip) ++;
#line 1612
    *tmp___18 = (unsigned char)15;
#line 1612
    tmp___19 = jit->ip;
#line 1612
    (jit->ip) ++;
#line 1612
    *tmp___19 = (unsigned char)44;
#line 1612
    while (1) {
#line 1612
      while (1) {
#line 1612
        tmp___20 = jit->ip;
#line 1612
        (jit->ip) ++;
#line 1612
        *tmp___20 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
#line 1612
        break;
      }
#line 1612
      break;
    }
#line 1612
    break;
  }
#line 1613
  while (1) {
#line 1613
    tmp___21 = jit->ip;
#line 1613
    (jit->ip) ++;
#line 1613
    *tmp___21 = (unsigned char)242;
#line 1613
    while (1) {
#line 1613
      if (tmp_reg > 7) {
#line 1613
        tmp___22 = 4;
      } else {
#line 1613
        tmp___22 = 0;
      }
#line 1613
      if (a1 > 7L) {
#line 1613
        tmp___23 = 1;
      } else {
#line 1613
        tmp___23 = 0;
      }
#line 1613
      _amd64_rex_bits___2 = (unsigned char )((8 | tmp___22) | tmp___23);
#line 1613
      if ((int )_amd64_rex_bits___2 != 0) {
#line 1613
        tmp___24 = jit->ip;
#line 1613
        (jit->ip) ++;
#line 1613
        *tmp___24 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
      }
#line 1613
      break;
    }
#line 1613
    tmp___25 = jit->ip;
#line 1613
    (jit->ip) ++;
#line 1613
    *tmp___25 = (unsigned char)15;
#line 1613
    tmp___26 = jit->ip;
#line 1613
    (jit->ip) ++;
#line 1613
    *tmp___26 = (unsigned char)42;
#line 1613
    while (1) {
#line 1613
      while (1) {
#line 1613
        tmp___27 = jit->ip;
#line 1613
        (jit->ip) ++;
#line 1613
        *tmp___27 = (unsigned char )((long )((3 << 6) | ((tmp_reg & 0x07) << 3)) | (a1 & 7L));
#line 1613
        break;
      }
#line 1613
      break;
    }
#line 1613
    break;
  }
#line 1615
  if (floor) {
#line 1617
    while (1) {
#line 1617
      tmp___28 = jit->ip;
#line 1617
      (jit->ip) ++;
#line 1617
      *tmp___28 = (unsigned char)102;
#line 1617
      while (1) {
#line 1617
        if (a2 > 7L) {
#line 1617
          tmp___29 = 4;
        } else {
#line 1617
          tmp___29 = 0;
        }
#line 1617
        if (tmp_reg > 7) {
#line 1617
          tmp___30 = 1;
        } else {
#line 1617
          tmp___30 = 0;
        }
#line 1617
        _amd64_rex_bits___3 = (unsigned char )(tmp___29 | tmp___30);
#line 1617
        if ((int )_amd64_rex_bits___3 != 0) {
#line 1617
          tmp___31 = jit->ip;
#line 1617
          (jit->ip) ++;
#line 1617
          *tmp___31 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
        }
#line 1617
        break;
      }
#line 1617
      tmp___32 = jit->ip;
#line 1617
      (jit->ip) ++;
#line 1617
      *tmp___32 = (unsigned char)15;
#line 1617
      tmp___33 = jit->ip;
#line 1617
      (jit->ip) ++;
#line 1617
      *tmp___33 = (unsigned char)47;
#line 1617
      while (1) {
#line 1617
        while (1) {
#line 1617
          tmp___34 = jit->ip;
#line 1617
          (jit->ip) ++;
#line 1617
          *tmp___34 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (long )(tmp_reg & 0x07));
#line 1617
          break;
        }
#line 1617
        break;
      }
#line 1617
      break;
    }
#line 1618
    while (1) {
#line 1618
      while (1) {
#line 1618
        if (a1 > 7L) {
#line 1618
          tmp___35 = 1;
        } else {
#line 1618
          tmp___35 = 0;
        }
#line 1618
        _amd64_rex_bits___4 = (unsigned char )(8 | tmp___35);
#line 1618
        if ((int )_amd64_rex_bits___4 != 0) {
#line 1618
          tmp___36 = jit->ip;
#line 1618
          (jit->ip) ++;
#line 1618
          *tmp___36 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
        }
#line 1618
        break;
      }
#line 1618
      tmp___37 = jit->ip;
#line 1618
      (jit->ip) ++;
#line 1618
      *tmp___37 = (unsigned char)131;
#line 1618
      while (1) {
#line 1618
        while (1) {
#line 1618
          tmp___38 = jit->ip;
#line 1618
          (jit->ip) ++;
#line 1618
          *tmp___38 = (unsigned char )((long )((3 << 6) | (3 << 3)) | (a1 & 7L));
#line 1618
          break;
        }
#line 1618
        break;
      }
#line 1618
      while (1) {
#line 1618
        *(jit->ip) = (unsigned char)0;
#line 1618
        (jit->ip) ++;
#line 1618
        break;
      }
#line 1618
      break;
    }
  } else {
#line 1621
    while (1) {
#line 1621
      tmp___53 = jit->ip;
#line 1621
      (jit->ip) ++;
#line 1621
      *tmp___53 = (unsigned char)102;
#line 1621
      while (1) {
#line 1621
        if (tmp_reg > 7) {
#line 1621
          tmp___54 = 4;
        } else {
#line 1621
          tmp___54 = 0;
        }
#line 1621
        if (a2 > 7L) {
#line 1621
          tmp___55 = 1;
        } else {
#line 1621
          tmp___55 = 0;
        }
#line 1621
        _amd64_rex_bits___7 = (unsigned char )(tmp___54 | tmp___55);
#line 1621
        if ((int )_amd64_rex_bits___7 != 0) {
#line 1621
          tmp___56 = jit->ip;
#line 1621
          (jit->ip) ++;
#line 1621
          *tmp___56 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
        }
#line 1621
        break;
      }
#line 1621
      tmp___57 = jit->ip;
#line 1621
      (jit->ip) ++;
#line 1621
      *tmp___57 = (unsigned char)15;
#line 1621
      tmp___58 = jit->ip;
#line 1621
      (jit->ip) ++;
#line 1621
      *tmp___58 = (unsigned char)47;
#line 1621
      while (1) {
#line 1621
        while (1) {
#line 1621
          tmp___59 = jit->ip;
#line 1621
          (jit->ip) ++;
#line 1621
          *tmp___59 = (unsigned char )((long )((3 << 6) | ((tmp_reg & 0x07) << 3)) | (a2 & 7L));
#line 1621
          break;
        }
#line 1621
        break;
      }
#line 1621
      break;
    }
#line 1622
    while (1) {
#line 1622
      while (1) {
#line 1622
        if (a1 > 7L) {
#line 1622
          tmp___60 = 1;
        } else {
#line 1622
          tmp___60 = 0;
        }
#line 1622
        _amd64_rex_bits___8 = (unsigned char )(8 | tmp___60);
#line 1622
        if ((int )_amd64_rex_bits___8 != 0) {
#line 1622
          tmp___61 = jit->ip;
#line 1622
          (jit->ip) ++;
#line 1622
          *tmp___61 = (unsigned char )(0x40 | (int )_amd64_rex_bits___8);
        }
#line 1622
        break;
      }
#line 1622
      tmp___62 = jit->ip;
#line 1622
      (jit->ip) ++;
#line 1622
      *tmp___62 = (unsigned char)131;
#line 1622
      while (1) {
#line 1622
        while (1) {
#line 1622
          tmp___63 = jit->ip;
#line 1622
          (jit->ip) ++;
#line 1622
          *tmp___63 = (unsigned char )((long )((3 << 6) | (2 << 3)) | (a1 & 7L));
#line 1622
          break;
        }
#line 1622
        break;
      }
#line 1622
      while (1) {
#line 1622
        *(jit->ip) = (unsigned char)0;
#line 1622
        (jit->ip) ++;
#line 1622
        break;
      }
#line 1622
      break;
    }
  }
#line 1626
  while (1) {
#line 1626
    while (1) {
#line 1626
      tmp___78 = jit->ip;
#line 1626
      (jit->ip) ++;
#line 1626
      *tmp___78 = (unsigned char)102;
#line 1626
      while (1) {
#line 1626
        if (a2 > 7L) {
#line 1626
          tmp___79 = 4;
        } else {
#line 1626
          tmp___79 = 0;
        }
#line 1626
        if (a2 > 7L) {
#line 1626
          tmp___80 = 1;
        } else {
#line 1626
          tmp___80 = 0;
        }
#line 1626
        _amd64_rex_bits___11 = (unsigned char )(tmp___79 | tmp___80);
#line 1626
        if ((int )_amd64_rex_bits___11 != 0) {
#line 1626
          tmp___81 = jit->ip;
#line 1626
          (jit->ip) ++;
#line 1626
          *tmp___81 = (unsigned char )(0x40 | (int )_amd64_rex_bits___11);
        }
#line 1626
        break;
      }
#line 1626
      tmp___82 = jit->ip;
#line 1626
      (jit->ip) ++;
#line 1626
      *tmp___82 = (unsigned char)15;
#line 1626
      tmp___83 = jit->ip;
#line 1626
      (jit->ip) ++;
#line 1626
      *tmp___83 = (unsigned char)198;
#line 1626
      while (1) {
#line 1626
        while (1) {
#line 1626
          tmp___84 = jit->ip;
#line 1626
          (jit->ip) ++;
#line 1626
          *tmp___84 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
#line 1626
          break;
        }
#line 1626
        break;
      }
#line 1626
      break;
    }
#line 1626
    while (1) {
#line 1626
      *(jit->ip) = (unsigned char)1;
#line 1626
      (jit->ip) ++;
#line 1626
      break;
    }
#line 1626
    break;
  }
#line 1627
  while (1) {
#line 1627
    while (1) {
#line 1627
      tmp___85 = jit->ip;
#line 1627
      (jit->ip) ++;
#line 1627
      *tmp___85 = (unsigned char)102;
#line 1627
      while (1) {
#line 1627
        if (tmp_reg > 7) {
#line 1627
          tmp___86 = 4;
        } else {
#line 1627
          tmp___86 = 0;
        }
#line 1627
        if (tmp_reg > 7) {
#line 1627
          tmp___87 = 1;
        } else {
#line 1627
          tmp___87 = 0;
        }
#line 1627
        _amd64_rex_bits___12 = (unsigned char )(tmp___86 | tmp___87);
#line 1627
        if ((int )_amd64_rex_bits___12 != 0) {
#line 1627
          tmp___88 = jit->ip;
#line 1627
          (jit->ip) ++;
#line 1627
          *tmp___88 = (unsigned char )(0x40 | (int )_amd64_rex_bits___12);
        }
#line 1627
        break;
      }
#line 1627
      tmp___89 = jit->ip;
#line 1627
      (jit->ip) ++;
#line 1627
      *tmp___89 = (unsigned char)15;
#line 1627
      tmp___90 = jit->ip;
#line 1627
      (jit->ip) ++;
#line 1627
      *tmp___90 = (unsigned char)198;
#line 1627
      while (1) {
#line 1627
        while (1) {
#line 1627
          tmp___91 = jit->ip;
#line 1627
          (jit->ip) ++;
#line 1627
          *tmp___91 = (unsigned char )(((3 << 6) | ((tmp_reg & 0x07) << 3)) | (tmp_reg & 0x07));
#line 1627
          break;
        }
#line 1627
        break;
      }
#line 1627
      break;
    }
#line 1627
    while (1) {
#line 1627
      *(jit->ip) = (unsigned char)1;
#line 1627
      (jit->ip) ++;
#line 1627
      break;
    }
#line 1627
    break;
  }
#line 1628
  return;
}
}
/* END FUNCTION-DEF emit_sse_floor LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rotate_right LOC=UNKNOWN */
__inline static jit_tree *rotate_right(jit_tree *h ) 
{ 
  jit_tree *x ;

  {
#line 363
  x = h->left;
#line 364
  h->left = x->right;
#line 365
  x->right = h;
#line 366
  x->color = (x->right)->color;
#line 367
  (x->right)->color = 1;
#line 368
  return (x);
}
}
/* END FUNCTION-DEF rotate_right LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_exec_mem_seal LOC=UNKNOWN */
static void jit_exec_mem_seal(struct jit_exec_mem *mem ) 
{ 
  char *code ;

  {
#line 322
  code = (char *)mem->data;
#line 326
  __builtin___clear_cache((void *)code, code + mem->size);
#line 327
  return;
}
}
/* END FUNCTION-DEF jit_exec_mem_seal LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_fld_op LOC=UNKNOWN */
static void emit_sse_fld_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___11 ;
  jit_value tmp___12 ;
  int tmp___13 ;
  jit_value tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___52 ;
  int tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;

  {
#line 1658
  if ((unsigned long long )op->arg_size == sizeof(float )) {
#line 1659
    if ((int )op->code & 0x02) {
#line 1659
      while (1) {
#line 1659
        tmp = jit->ip;
#line 1659
        (jit->ip) ++;
#line 1659
        *tmp = (unsigned char)243;
#line 1659
        while (1) {
#line 1659
          if (a1 > 7L) {
#line 1659
            tmp___0 = 4;
          } else {
#line 1659
            tmp___0 = 0;
          }
#line 1659
          _amd64_rex_bits = (unsigned char )tmp___0;
#line 1659
          if ((int )_amd64_rex_bits != 0) {
#line 1659
            tmp___1 = jit->ip;
#line 1659
            (jit->ip) ++;
#line 1659
            *tmp___1 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          }
#line 1659
          break;
        }
#line 1659
        tmp___2 = jit->ip;
#line 1659
        (jit->ip) ++;
#line 1659
        *tmp___2 = (unsigned char)15;
#line 1659
        tmp___3 = jit->ip;
#line 1659
        (jit->ip) ++;
#line 1659
        *tmp___3 = (unsigned char)90;
#line 1659
        while (1) {
#line 1659
          tmp___4 = jit->ip;
#line 1659
          (jit->ip) ++;
#line 1659
          *tmp___4 = (unsigned char )(((a1 & 7L) << 3) | 4L);
#line 1659
          break;
        }
#line 1659
        while (1) {
#line 1659
          tmp___5 = jit->ip;
#line 1659
          (jit->ip) ++;
#line 1659
          *tmp___5 = (unsigned char )((4 << 3) | 5);
#line 1659
          break;
        }
#line 1659
        while (1) {
#line 1659
          imb.val = (int )a2;
#line 1659
          tmp___6 = jit->ip;
#line 1659
          (jit->ip) ++;
#line 1659
          *tmp___6 = imb.b[0];
#line 1659
          tmp___7 = jit->ip;
#line 1659
          (jit->ip) ++;
#line 1659
          *tmp___7 = imb.b[1];
#line 1659
          tmp___8 = jit->ip;
#line 1659
          (jit->ip) ++;
#line 1659
          *tmp___8 = imb.b[2];
#line 1659
          tmp___9 = jit->ip;
#line 1659
          (jit->ip) ++;
#line 1659
          *tmp___9 = imb.b[3];
#line 1659
          break;
        }
#line 1659
        break;
      }
    } else {
#line 1660
      while (1) {
#line 1660
        tmp___10 = jit->ip;
#line 1660
        (jit->ip) ++;
#line 1660
        *tmp___10 = (unsigned char)243;
#line 1660
        while (1) {
#line 1660
          if (a1 > 7L) {
#line 1660
            tmp___11 = 4;
          } else {
#line 1660
            tmp___11 = 0;
          }
#line 1660
          if (a2 == 16L) {
#line 1660
            tmp___14 = (jit_value )0;
          } else {
#line 1660
            tmp___14 = a2;
          }
#line 1660
          if (tmp___14 > 7L) {
#line 1660
            tmp___13 = 1;
          } else {
#line 1660
            tmp___13 = 0;
          }
#line 1660
          _amd64_rex_bits___0 = (unsigned char )(tmp___11 | tmp___13);
#line 1660
          if ((int )_amd64_rex_bits___0 != 0) {
#line 1660
            tmp___15 = jit->ip;
#line 1660
            (jit->ip) ++;
#line 1660
            *tmp___15 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
          }
#line 1660
          break;
        }
#line 1660
        tmp___16 = jit->ip;
#line 1660
        (jit->ip) ++;
#line 1660
        *tmp___16 = (unsigned char)15;
#line 1660
        tmp___17 = jit->ip;
#line 1660
        (jit->ip) ++;
#line 1660
        *tmp___17 = (unsigned char)90;
#line 1660
        while (1) {
#line 1660
          if (a2 == 16L) {
#line 1660
            while (1) {
#line 1660
              tmp___18 = jit->ip;
#line 1660
              (jit->ip) ++;
#line 1660
              *tmp___18 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
#line 1660
              break;
            }
#line 1660
            while (1) {
#line 1660
              imb___0.val = 0;
#line 1660
              tmp___19 = jit->ip;
#line 1660
              (jit->ip) ++;
#line 1660
              *tmp___19 = imb___0.b[0];
#line 1660
              tmp___20 = jit->ip;
#line 1660
              (jit->ip) ++;
#line 1660
              *tmp___20 = imb___0.b[1];
#line 1660
              tmp___21 = jit->ip;
#line 1660
              (jit->ip) ++;
#line 1660
              *tmp___21 = imb___0.b[2];
#line 1660
              tmp___22 = jit->ip;
#line 1660
              (jit->ip) ++;
#line 1660
              *tmp___22 = imb___0.b[3];
#line 1660
              break;
            }
          } else {
#line 1660
            while (1) {
#line 1660
              if ((a2 & 7L) == 4L) {
#line 1660
                while (1) {
#line 1660
                  tmp___23 = jit->ip;
#line 1660
                  (jit->ip) ++;
#line 1660
                  *tmp___23 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 1660
                  break;
                }
#line 1660
                while (1) {
#line 1660
                  tmp___24 = jit->ip;
#line 1660
                  (jit->ip) ++;
#line 1660
                  *tmp___24 = (unsigned char )((4 << 3) | 4);
#line 1660
                  break;
                }
#line 1660
                break;
              }
#line 1660
              if ((a2 & 7L) != 5L) {
#line 1660
                while (1) {
#line 1660
                  tmp___33 = jit->ip;
#line 1660
                  (jit->ip) ++;
#line 1660
                  *tmp___33 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 1660
                  break;
                }
#line 1660
                break;
              }
#line 1660
              while (1) {
#line 1660
                tmp___34 = jit->ip;
#line 1660
                (jit->ip) ++;
#line 1660
                *tmp___34 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 1660
                break;
              }
#line 1660
              while (1) {
#line 1660
                *(jit->ip) = (unsigned char)0;
#line 1660
                (jit->ip) ++;
#line 1660
                break;
              }
#line 1660
              break;
            }
          }
#line 1660
          break;
        }
#line 1660
        break;
      }
    }
  } else
#line 1662
  if ((int )op->code & 0x02) {
#line 1662
    while (1) {
#line 1662
      tmp___40 = jit->ip;
#line 1662
      (jit->ip) ++;
#line 1662
      *tmp___40 = (unsigned char)242;
#line 1662
      while (1) {
#line 1662
        if (a1 > 7L) {
#line 1662
          tmp___41 = 4;
        } else {
#line 1662
          tmp___41 = 0;
        }
#line 1662
        _amd64_rex_bits___1 = (unsigned char )tmp___41;
#line 1662
        if ((int )_amd64_rex_bits___1 != 0) {
#line 1662
          tmp___42 = jit->ip;
#line 1662
          (jit->ip) ++;
#line 1662
          *tmp___42 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
        }
#line 1662
        break;
      }
#line 1662
      tmp___43 = jit->ip;
#line 1662
      (jit->ip) ++;
#line 1662
      *tmp___43 = (unsigned char)15;
#line 1662
      tmp___44 = jit->ip;
#line 1662
      (jit->ip) ++;
#line 1662
      *tmp___44 = (unsigned char)16;
#line 1662
      while (1) {
#line 1662
        tmp___45 = jit->ip;
#line 1662
        (jit->ip) ++;
#line 1662
        *tmp___45 = (unsigned char )(((a1 & 7L) << 3) | 4L);
#line 1662
        break;
      }
#line 1662
      while (1) {
#line 1662
        tmp___46 = jit->ip;
#line 1662
        (jit->ip) ++;
#line 1662
        *tmp___46 = (unsigned char )((4 << 3) | 5);
#line 1662
        break;
      }
#line 1662
      while (1) {
#line 1662
        imb___3.val = (int )a2;
#line 1662
        tmp___47 = jit->ip;
#line 1662
        (jit->ip) ++;
#line 1662
        *tmp___47 = imb___3.b[0];
#line 1662
        tmp___48 = jit->ip;
#line 1662
        (jit->ip) ++;
#line 1662
        *tmp___48 = imb___3.b[1];
#line 1662
        tmp___49 = jit->ip;
#line 1662
        (jit->ip) ++;
#line 1662
        *tmp___49 = imb___3.b[2];
#line 1662
        tmp___50 = jit->ip;
#line 1662
        (jit->ip) ++;
#line 1662
        *tmp___50 = imb___3.b[3];
#line 1662
        break;
      }
#line 1662
      break;
    }
  } else {
#line 1663
    while (1) {
#line 1663
      tmp___51 = jit->ip;
#line 1663
      (jit->ip) ++;
#line 1663
      *tmp___51 = (unsigned char)102;
#line 1663
      while (1) {
#line 1663
        if (a1 > 7L) {
#line 1663
          tmp___52 = 4;
        } else {
#line 1663
          tmp___52 = 0;
        }
#line 1663
        if (a2 > 7L) {
#line 1663
          tmp___53 = 1;
        } else {
#line 1663
          tmp___53 = 0;
        }
#line 1663
        _amd64_rex_bits___2 = (unsigned char )(tmp___52 | tmp___53);
#line 1663
        if ((int )_amd64_rex_bits___2 != 0) {
#line 1663
          tmp___54 = jit->ip;
#line 1663
          (jit->ip) ++;
#line 1663
          *tmp___54 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
        }
#line 1663
        break;
      }
#line 1663
      tmp___55 = jit->ip;
#line 1663
      (jit->ip) ++;
#line 1663
      *tmp___55 = (unsigned char)15;
#line 1663
      tmp___56 = jit->ip;
#line 1663
      (jit->ip) ++;
#line 1663
      *tmp___56 = (unsigned char)18;
#line 1663
      while (1) {
#line 1663
        if (a2 == 16L) {
#line 1663
          while (1) {
#line 1663
            tmp___57 = jit->ip;
#line 1663
            (jit->ip) ++;
#line 1663
            *tmp___57 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
#line 1663
            break;
          }
#line 1663
          while (1) {
#line 1663
            imb___4.val = 0;
#line 1663
            tmp___58 = jit->ip;
#line 1663
            (jit->ip) ++;
#line 1663
            *tmp___58 = imb___4.b[0];
#line 1663
            tmp___59 = jit->ip;
#line 1663
            (jit->ip) ++;
#line 1663
            *tmp___59 = imb___4.b[1];
#line 1663
            tmp___60 = jit->ip;
#line 1663
            (jit->ip) ++;
#line 1663
            *tmp___60 = imb___4.b[2];
#line 1663
            tmp___61 = jit->ip;
#line 1663
            (jit->ip) ++;
#line 1663
            *tmp___61 = imb___4.b[3];
#line 1663
            break;
          }
        } else {
#line 1663
          while (1) {
#line 1663
            if ((a2 & 7L) == 4L) {
#line 1663
              while (1) {
#line 1663
                tmp___62 = jit->ip;
#line 1663
                (jit->ip) ++;
#line 1663
                *tmp___62 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 1663
                break;
              }
#line 1663
              while (1) {
#line 1663
                tmp___63 = jit->ip;
#line 1663
                (jit->ip) ++;
#line 1663
                *tmp___63 = (unsigned char )((4 << 3) | 4);
#line 1663
                break;
              }
#line 1663
              break;
            }
#line 1663
            if ((a2 & 7L) != 5L) {
#line 1663
              while (1) {
#line 1663
                tmp___72 = jit->ip;
#line 1663
                (jit->ip) ++;
#line 1663
                *tmp___72 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 1663
                break;
              }
#line 1663
              break;
            }
#line 1663
            while (1) {
#line 1663
              tmp___73 = jit->ip;
#line 1663
              (jit->ip) ++;
#line 1663
              *tmp___73 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 1663
              break;
            }
#line 1663
            while (1) {
#line 1663
              *(jit->ip) = (unsigned char)0;
#line 1663
              (jit->ip) ++;
#line 1663
              break;
            }
#line 1663
            break;
          }
        }
#line 1663
        break;
      }
#line 1663
      break;
    }
  }
#line 1665
  return;
}
}
/* END FUNCTION-DEF emit_sse_fld_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_combined_op LOC=UNKNOWN */
static jit_op *print_combined_op(FILE *f , struct jit *jit , struct jit_op *op , jit_tree *labels ) 
{ 
  jit_opcode opcode ;
  int i ;
  char *tmp ;

  {
#line 4810
  opcode = (jit_opcode )((int )op->code & 0xfff8);
#line 4811
  if ((unsigned int )opcode == 1408U) {
#line 4811
    goto _L;
  } else
#line 4811
  if ((unsigned int )opcode == 1416U) {
    _L: /* CIL Label */ 
#line 4812
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".text\n%s.byte\n",
            jit_disasm_general.indent_template);
#line 4813
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".data\n");
#line 4814
    while (1) {
#line 4814
      if (op) {
#line 4814
        if (! ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1408U)) {
#line 4814
          if (! ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1416U)) {
#line 4814
            break;
          }
        }
      } else {
#line 4814
        break;
      }
#line 4815
      if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1408U) {
#line 4815
        fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"%02x ",
                (int )((unsigned char )op->arg[0]));
      }
#line 4816
      if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1416U) {
#line 4817
        i = 0;
#line 4817
        while ((jit_value )i < op->arg[0]) {
#line 4818
          fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"%02x ",
                  (int )*((unsigned char *)op->addendum + i));
#line 4817
          i ++;
        }
      }
#line 4821
      op = op->next;
    }
#line 4823
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"\n");
#line 4825
    if (! op) {
#line 4825
      return ((jit_op *)((void *)0));
    }
#line 4826
    op = op->prev;
#line 4827
    return (op);
  }
#line 4830
  if ((unsigned int )opcode == 1928U) {
#line 4831
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".comment\n");
#line 4832
    print_op(f, & jit_disasm_general, op, labels, 0x100);
#line 4833
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"\n");
#line 4834
    return (op);
  }
#line 4837
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".text\n");
#line 4838
  print_op(f, & jit_disasm_general, op, labels, 0x100);
#line 4839
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"\n");
#line 4841
  switch ((unsigned int )opcode) {
  case 1440U: 
#line 4843
  if (op->next) {
#line 4844
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"\n.nl\n");
#line 4845
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".addr=%lx\n",
            (unsigned long )(jit->buf + (op->next)->code_offset));
  }
#line 4847
  break;
  case 1432U: 
  case 1424U: 
#line 4850
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".data\n");
#line 4851
  print_op_bytes(f, jit, op);
#line 4852
  break;
  default: 
#line 4854
  if (! op->code_length) {
#line 4854
    break;
  }
#line 4855
  tmp = platform_id();
#line 4855
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".%s\n", tmp);
#line 4856
  print_op_bytes(f, jit, op);
  }
#line 4858
  return (op);
}
}
/* END FUNCTION-DEF print_combined_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF load_reg LOC=UNKNOWN */
void load_reg(jit_op *op , jit_hw_reg *hreg , jit_value reg ) 
{ 


  {
#line 5220
  insert_reg_op(24, op, (jit_value )hreg->id, reg);
#line 5221
  return;
}
}
/* END FUNCTION-DEF load_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF __darwin_fd_set LOC=UNKNOWN */
__inline void ( __attribute__((__always_inline__)) __darwin_fd_set)(int _fd , struct fd_set *_p ) 
{ 
  int tmp ;

  {
#line 85 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h"
  tmp = __darwin_check_fd_set(_fd, (void const   *)_p);
#line 85
  if (tmp) {
#line 86
    _p->fds_bits[(unsigned long long )((unsigned long )_fd) / (sizeof(__int32_t ) * 8ULL)] |= (__int32_t )(1UL << (unsigned long long )((unsigned long )_fd) % (sizeof(__int32_t ) * 8ULL));
  }
#line 88
  return;
}
}
/* END FUNCTION-DEF __darwin_fd_set LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF sse_alu_pd_reg_safeimm LOC=UNKNOWN */
static void sse_alu_pd_reg_safeimm(struct jit *jit , jit_op *op , int op_id , int reg ,
                                   double *imm ) 
{ 
  jit_hw_reg *r ;
  jit_hw_reg *tmp ;
  int _amd64_width_temp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  unsigned char *tmp___4 ;
  int tmp___5 ;
  unsigned char *tmp___6 ;
  amd64_imm_buf imb ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  int tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  int _amd64_width_temp___0 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  unsigned char *tmp___55 ;
  int tmp___56 ;
  unsigned char *tmp___57 ;
  amd64_imm_buf imb___4 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  int tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;

  {
#line 1458
  if ((jit_unsigned_value )imm > 0xffffffffUL) {
#line 1459
    tmp = jit_get_unused_reg(jit->reg_al, op, 0);
#line 1459
    r = tmp;
#line 1460
    if (r) {
#line 1461
      while (1) {
#line 1461
        _amd64_width_temp = (size_t )((jit_value )imm) == (size_t )((int )((size_t )((jit_value )imm)));
#line 1461
        while (1) {
#line 1461
          while (1) {
#line 1461
            if (_amd64_width_temp) {
#line 1461
              tmp___2 = 4;
            } else {
#line 1461
              tmp___2 = 8;
            }
#line 1461
            if (tmp___2 > 4) {
#line 1461
              tmp___1 = 8;
            } else {
#line 1461
              tmp___1 = 0;
            }
#line 1461
            if (r->id > 7) {
#line 1461
              tmp___3 = 1;
            } else {
#line 1461
              tmp___3 = 0;
            }
#line 1461
            _amd64_rex_bits = (unsigned char )(tmp___1 | tmp___3);
#line 1461
            if ((int )_amd64_rex_bits != 0) {
#line 1461
              tmp___4 = jit->ip;
#line 1461
              (jit->ip) ++;
#line 1461
              *tmp___4 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
            } else {
#line 1461
              if (_amd64_width_temp) {
#line 1461
                tmp___5 = 4;
              } else {
#line 1461
                tmp___5 = 8;
              }
#line 1461
              if (tmp___5 == 1) {
#line 1461
                tmp___4 = jit->ip;
#line 1461
                (jit->ip) ++;
#line 1461
                *tmp___4 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
              }
            }
#line 1461
            break;
          }
#line 1461
          tmp___6 = jit->ip;
#line 1461
          (jit->ip) ++;
#line 1461
          *tmp___6 = (unsigned char )(184 + (r->id & 0x7));
#line 1461
          if (_amd64_width_temp) {
#line 1461
            tmp___19 = 4;
          } else {
#line 1461
            tmp___19 = 8;
          }
#line 1461
          if (tmp___19 == 8) {
#line 1461
            while (1) {
#line 1461
              imb.val = (size_t )((jit_value )imm);
#line 1461
              tmp___7 = jit->ip;
#line 1461
              (jit->ip) ++;
#line 1461
              *tmp___7 = imb.b[0];
#line 1461
              tmp___8 = jit->ip;
#line 1461
              (jit->ip) ++;
#line 1461
              *tmp___8 = imb.b[1];
#line 1461
              tmp___9 = jit->ip;
#line 1461
              (jit->ip) ++;
#line 1461
              *tmp___9 = imb.b[2];
#line 1461
              tmp___10 = jit->ip;
#line 1461
              (jit->ip) ++;
#line 1461
              *tmp___10 = imb.b[3];
#line 1461
              tmp___11 = jit->ip;
#line 1461
              (jit->ip) ++;
#line 1461
              *tmp___11 = imb.b[4];
#line 1461
              tmp___12 = jit->ip;
#line 1461
              (jit->ip) ++;
#line 1461
              *tmp___12 = imb.b[5];
#line 1461
              tmp___13 = jit->ip;
#line 1461
              (jit->ip) ++;
#line 1461
              *tmp___13 = imb.b[6];
#line 1461
              tmp___14 = jit->ip;
#line 1461
              (jit->ip) ++;
#line 1461
              *tmp___14 = imb.b[7];
#line 1461
              break;
            }
          } else {
#line 1461
            while (1) {
#line 1461
              imb___0.val = (int )((size_t )((jit_value )imm));
#line 1461
              tmp___15 = jit->ip;
#line 1461
              (jit->ip) ++;
#line 1461
              *tmp___15 = imb___0.b[0];
#line 1461
              tmp___16 = jit->ip;
#line 1461
              (jit->ip) ++;
#line 1461
              *tmp___16 = imb___0.b[1];
#line 1461
              tmp___17 = jit->ip;
#line 1461
              (jit->ip) ++;
#line 1461
              *tmp___17 = imb___0.b[2];
#line 1461
              tmp___18 = jit->ip;
#line 1461
              (jit->ip) ++;
#line 1461
              *tmp___18 = imb___0.b[3];
#line 1461
              break;
            }
          }
#line 1461
          break;
        }
#line 1461
        break;
      }
#line 1462
      while (1) {
#line 1462
        tmp___20 = jit->ip;
#line 1462
        (jit->ip) ++;
#line 1462
        *tmp___20 = (unsigned char)102;
#line 1462
        while (1) {
#line 1462
          if (reg > 7) {
#line 1462
            tmp___21 = 4;
          } else {
#line 1462
            tmp___21 = 0;
          }
#line 1462
          if (r->id == 16) {
#line 1462
            tmp___24 = 0;
          } else {
#line 1462
            tmp___24 = r->id;
          }
#line 1462
          if (tmp___24 > 7) {
#line 1462
            tmp___23 = 1;
          } else {
#line 1462
            tmp___23 = 0;
          }
#line 1462
          _amd64_rex_bits___0 = (unsigned char )(tmp___21 | tmp___23);
#line 1462
          if ((int )_amd64_rex_bits___0 != 0) {
#line 1462
            tmp___25 = jit->ip;
#line 1462
            (jit->ip) ++;
#line 1462
            *tmp___25 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
          }
#line 1462
          break;
        }
#line 1462
        tmp___26 = jit->ip;
#line 1462
        (jit->ip) ++;
#line 1462
        *tmp___26 = (unsigned char)15;
#line 1462
        tmp___27 = jit->ip;
#line 1462
        (jit->ip) ++;
#line 1462
        *tmp___27 = (unsigned char )op_id;
#line 1462
        while (1) {
#line 1462
          if (r->id == 16) {
#line 1462
            while (1) {
#line 1462
              tmp___28 = jit->ip;
#line 1462
              (jit->ip) ++;
#line 1462
              *tmp___28 = (unsigned char )((((reg & 0x7) & 0x07) << 3) | 5);
#line 1462
              break;
            }
#line 1462
            while (1) {
#line 1462
              imb___1.val = 0;
#line 1462
              tmp___29 = jit->ip;
#line 1462
              (jit->ip) ++;
#line 1462
              *tmp___29 = imb___1.b[0];
#line 1462
              tmp___30 = jit->ip;
#line 1462
              (jit->ip) ++;
#line 1462
              *tmp___30 = imb___1.b[1];
#line 1462
              tmp___31 = jit->ip;
#line 1462
              (jit->ip) ++;
#line 1462
              *tmp___31 = imb___1.b[2];
#line 1462
              tmp___32 = jit->ip;
#line 1462
              (jit->ip) ++;
#line 1462
              *tmp___32 = imb___1.b[3];
#line 1462
              break;
            }
          } else {
#line 1462
            while (1) {
#line 1462
              if ((r->id & 0x7) == 4) {
#line 1462
                while (1) {
#line 1462
                  tmp___33 = jit->ip;
#line 1462
                  (jit->ip) ++;
#line 1462
                  *tmp___33 = (unsigned char )((((reg & 0x7) & 0x07) << 3) | 4);
#line 1462
                  break;
                }
#line 1462
                while (1) {
#line 1462
                  tmp___34 = jit->ip;
#line 1462
                  (jit->ip) ++;
#line 1462
                  *tmp___34 = (unsigned char )((4 << 3) | 4);
#line 1462
                  break;
                }
#line 1462
                break;
              }
#line 1462
              if ((r->id & 0x7) != 5) {
#line 1462
                while (1) {
#line 1462
                  tmp___43 = jit->ip;
#line 1462
                  (jit->ip) ++;
#line 1462
                  *tmp___43 = (unsigned char )((((reg & 0x7) & 0x07) << 3) | ((r->id & 0x7) & 0x07));
#line 1462
                  break;
                }
#line 1462
                break;
              }
#line 1462
              while (1) {
#line 1462
                tmp___44 = jit->ip;
#line 1462
                (jit->ip) ++;
#line 1462
                *tmp___44 = (unsigned char )(((1 << 6) | (((reg & 0x7) & 0x07) << 3)) | ((r->id & 0x7) & 0x07));
#line 1462
                break;
              }
#line 1462
              while (1) {
#line 1462
                *(jit->ip) = (unsigned char)0;
#line 1462
                (jit->ip) ++;
#line 1462
                break;
              }
#line 1462
              break;
            }
          }
#line 1462
          break;
        }
#line 1462
        break;
      }
    } else {
#line 1464
      while (1) {
#line 1464
        while (1) {
#line 1464
          _amd64_rex_bits___1 = (unsigned char)0;
#line 1464
          if ((int )_amd64_rex_bits___1 != 0) {
#line 1464
            tmp___50 = jit->ip;
#line 1464
            (jit->ip) ++;
#line 1464
            *tmp___50 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
          }
#line 1464
          break;
        }
#line 1464
        tmp___51 = jit->ip;
#line 1464
        (jit->ip) ++;
#line 1464
        *tmp___51 = (unsigned char)80;
#line 1464
        break;
      }
#line 1465
      while (1) {
#line 1465
        _amd64_width_temp___0 = (size_t )((jit_value )imm) == (size_t )((int )((size_t )((jit_value )imm)));
#line 1465
        while (1) {
#line 1465
          while (1) {
#line 1465
            if (_amd64_width_temp___0) {
#line 1465
              tmp___54 = 4;
            } else {
#line 1465
              tmp___54 = 8;
            }
#line 1465
            if (tmp___54 > 4) {
#line 1465
              tmp___53 = 8;
            } else {
#line 1465
              tmp___53 = 0;
            }
#line 1465
            _amd64_rex_bits___2 = (unsigned char )tmp___53;
#line 1465
            if ((int )_amd64_rex_bits___2 != 0) {
#line 1465
              tmp___55 = jit->ip;
#line 1465
              (jit->ip) ++;
#line 1465
              *tmp___55 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
            } else {
#line 1465
              if (_amd64_width_temp___0) {
#line 1465
                tmp___56 = 4;
              } else {
#line 1465
                tmp___56 = 8;
              }
#line 1465
              if (tmp___56 == 1) {
#line 1465
                tmp___55 = jit->ip;
#line 1465
                (jit->ip) ++;
#line 1465
                *tmp___55 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
              }
            }
#line 1465
            break;
          }
#line 1465
          tmp___57 = jit->ip;
#line 1465
          (jit->ip) ++;
#line 1465
          *tmp___57 = (unsigned char)184;
#line 1465
          if (_amd64_width_temp___0) {
#line 1465
            tmp___70 = 4;
          } else {
#line 1465
            tmp___70 = 8;
          }
#line 1465
          if (tmp___70 == 8) {
#line 1465
            while (1) {
#line 1465
              imb___4.val = (size_t )((jit_value )imm);
#line 1465
              tmp___58 = jit->ip;
#line 1465
              (jit->ip) ++;
#line 1465
              *tmp___58 = imb___4.b[0];
#line 1465
              tmp___59 = jit->ip;
#line 1465
              (jit->ip) ++;
#line 1465
              *tmp___59 = imb___4.b[1];
#line 1465
              tmp___60 = jit->ip;
#line 1465
              (jit->ip) ++;
#line 1465
              *tmp___60 = imb___4.b[2];
#line 1465
              tmp___61 = jit->ip;
#line 1465
              (jit->ip) ++;
#line 1465
              *tmp___61 = imb___4.b[3];
#line 1465
              tmp___62 = jit->ip;
#line 1465
              (jit->ip) ++;
#line 1465
              *tmp___62 = imb___4.b[4];
#line 1465
              tmp___63 = jit->ip;
#line 1465
              (jit->ip) ++;
#line 1465
              *tmp___63 = imb___4.b[5];
#line 1465
              tmp___64 = jit->ip;
#line 1465
              (jit->ip) ++;
#line 1465
              *tmp___64 = imb___4.b[6];
#line 1465
              tmp___65 = jit->ip;
#line 1465
              (jit->ip) ++;
#line 1465
              *tmp___65 = imb___4.b[7];
#line 1465
              break;
            }
          } else {
#line 1465
            while (1) {
#line 1465
              imb___5.val = (int )((size_t )((jit_value )imm));
#line 1465
              tmp___66 = jit->ip;
#line 1465
              (jit->ip) ++;
#line 1465
              *tmp___66 = imb___5.b[0];
#line 1465
              tmp___67 = jit->ip;
#line 1465
              (jit->ip) ++;
#line 1465
              *tmp___67 = imb___5.b[1];
#line 1465
              tmp___68 = jit->ip;
#line 1465
              (jit->ip) ++;
#line 1465
              *tmp___68 = imb___5.b[2];
#line 1465
              tmp___69 = jit->ip;
#line 1465
              (jit->ip) ++;
#line 1465
              *tmp___69 = imb___5.b[3];
#line 1465
              break;
            }
          }
#line 1465
          break;
        }
#line 1465
        break;
      }
#line 1466
      while (1) {
#line 1466
        tmp___71 = jit->ip;
#line 1466
        (jit->ip) ++;
#line 1466
        *tmp___71 = (unsigned char)102;
#line 1466
        while (1) {
#line 1466
          if (reg > 7) {
#line 1466
            tmp___72 = 4;
          } else {
#line 1466
            tmp___72 = 0;
          }
#line 1466
          _amd64_rex_bits___3 = (unsigned char )tmp___72;
#line 1466
          if ((int )_amd64_rex_bits___3 != 0) {
#line 1466
            tmp___73 = jit->ip;
#line 1466
            (jit->ip) ++;
#line 1466
            *tmp___73 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
          }
#line 1466
          break;
        }
#line 1466
        tmp___74 = jit->ip;
#line 1466
        (jit->ip) ++;
#line 1466
        *tmp___74 = (unsigned char)15;
#line 1466
        tmp___75 = jit->ip;
#line 1466
        (jit->ip) ++;
#line 1466
        *tmp___75 = (unsigned char )op_id;
#line 1466
        while (1) {
#line 1466
          while (1) {
#line 1466
            while (1) {
#line 1466
              tmp___91 = jit->ip;
#line 1466
              (jit->ip) ++;
#line 1466
              *tmp___91 = (unsigned char )(((reg & 0x7) & 0x07) << 3);
#line 1466
              break;
            }
#line 1466
            break;
#line 1466
            while (1) {
#line 1466
              tmp___92 = jit->ip;
#line 1466
              (jit->ip) ++;
#line 1466
              *tmp___92 = (unsigned char )((1 << 6) | (((reg & 0x7) & 0x07) << 3));
#line 1466
              break;
            }
#line 1466
            while (1) {
#line 1466
              *(jit->ip) = (unsigned char)0;
#line 1466
              (jit->ip) ++;
#line 1466
              break;
            }
#line 1466
            break;
          }
#line 1466
          break;
        }
#line 1466
        break;
      }
#line 1467
      while (1) {
#line 1467
        while (1) {
#line 1467
          _amd64_rex_bits___4 = (unsigned char)0;
#line 1467
          if ((int )_amd64_rex_bits___4 != 0) {
#line 1467
            tmp___98 = jit->ip;
#line 1467
            (jit->ip) ++;
#line 1467
            *tmp___98 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
          }
#line 1467
          break;
        }
#line 1467
        tmp___99 = jit->ip;
#line 1467
        (jit->ip) ++;
#line 1467
        *tmp___99 = (unsigned char)88;
#line 1467
        break;
      }
    }
  } else {
#line 1470
    while (1) {
#line 1470 "./jitter-Darwin-X86-64.c"
      tmp___100 = jit->ip;
#line 1470
      (jit->ip) ++;
#line 1470
      *tmp___100 = (unsigned char)102;
#line 1470
      while (1) {
#line 1470
        if (reg > 7) {
#line 1470
          tmp___101 = 4;
        } else {
#line 1470
          tmp___101 = 0;
        }
#line 1470
        _amd64_rex_bits___5 = (unsigned char )(8 | tmp___101);
#line 1470
        if ((int )_amd64_rex_bits___5 != 0) {
#line 1470
          tmp___102 = jit->ip;
#line 1470
          (jit->ip) ++;
#line 1470
          *tmp___102 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
        }
#line 1470
        break;
      }
#line 1470
      tmp___103 = jit->ip;
#line 1470
      (jit->ip) ++;
#line 1470
      *tmp___103 = (unsigned char)15;
#line 1470
      tmp___104 = jit->ip;
#line 1470
      (jit->ip) ++;
#line 1470
      *tmp___104 = (unsigned char )op_id;
#line 1470
      while (1) {
#line 1470
        tmp___105 = jit->ip;
#line 1470
        (jit->ip) ++;
#line 1470
        *tmp___105 = (unsigned char )(((reg & 0x07) << 3) | 4);
#line 1470
        break;
      }
#line 1470
      while (1) {
#line 1470
        tmp___106 = jit->ip;
#line 1470
        (jit->ip) ++;
#line 1470
        *tmp___106 = (unsigned char )((4 << 3) | 5);
#line 1470
        break;
      }
#line 1470
      while (1) {
#line 1470
        imb___9.val = (int )((jit_value )imm);
#line 1470
        tmp___107 = jit->ip;
#line 1470
        (jit->ip) ++;
#line 1470
        *tmp___107 = imb___9.b[0];
#line 1470
        tmp___108 = jit->ip;
#line 1470
        (jit->ip) ++;
#line 1470
        *tmp___108 = imb___9.b[1];
#line 1470
        tmp___109 = jit->ip;
#line 1470
        (jit->ip) ++;
#line 1470
        *tmp___109 = imb___9.b[2];
#line 1470
        tmp___110 = jit->ip;
#line 1470
        (jit->ip) ++;
#line 1470
        *tmp___110 = imb___9.b[3];
#line 1470
        break;
      }
#line 1470
      break;
    }
  }
#line 1472
  return;
}
}
/* END FUNCTION-DEF sse_alu_pd_reg_safeimm LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF mark_calleesaved_regs LOC=UNKNOWN */
static void mark_calleesaved_regs(jit_tree *hint , jit_op *op ) 
{ 
  struct jit_allocator_hint *h ;
  jit_value reg ;
  int tmp ;

  {
#line 5541
  if ((unsigned long )hint == (unsigned long )((void *)0)) {
#line 5541
    return;
  }
#line 5542
  h = (struct jit_allocator_hint *)hint->value;
#line 5543
  reg = hint->key;
#line 5544
  tmp = jit_set_get(op->live_out, (int )reg);
#line 5544
  if (tmp) {
#line 5544
    (h->should_be_calleesaved) ++;
  }
#line 5546
  mark_calleesaved_regs(hint->left, op);
#line 5547
  mark_calleesaved_regs(hint->right, op);
#line 5548
  return;
}
}
/* END FUNCTION-DEF mark_calleesaved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_init LOC=UNKNOWN */
__inline static jit_rmap *rmap_init(void) 
{ 
  jit_rmap *res ;
  void *tmp ;

  {
#line 1866
  tmp = malloc((size_t )sizeof(jit_rmap ));
#line 1866
  res = (jit_rmap *)tmp;
#line 1867
  res->map = (jit_tree *)((void *)0);
#line 1868
  return (res);
}
}
/* END FUNCTION-DEF rmap_init LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF get_frame_size LOC=UNKNOWN */
static int get_frame_size(struct jit *jit , struct jit_func_info *info ) 
{ 
  int stack_mem ;
  int tmp ;
  int tmp___0 ;
  jit_value tmp___1 ;

  {
#line 1776
  stack_mem = 0;
#line 1777
  stack_mem = (int )((long )stack_mem + info->allocai_mem);
#line 1778
  stack_mem += info->gp_reg_count * (int )sizeof(void *);
#line 1779
  stack_mem = (int )((unsigned long long )stack_mem + (unsigned long long )info->fp_reg_count * sizeof(double ));
#line 1780
  if ((jit->reg_al)->gp_arg_reg_cnt < info->general_arg_cnt) {
#line 1780
    tmp = (jit->reg_al)->gp_arg_reg_cnt;
  } else {
#line 1780
    tmp = info->general_arg_cnt;
  }
#line 1780
  stack_mem += tmp * (int )sizeof(void *);
#line 1781
  if ((jit->reg_al)->fp_arg_reg_cnt < info->float_arg_cnt) {
#line 1781
    tmp___0 = (jit->reg_al)->fp_arg_reg_cnt;
  } else {
#line 1781
    tmp___0 = info->float_arg_cnt;
  }
#line 1781
  stack_mem += tmp___0 * (int )sizeof(void *);
#line 1782
  tmp___1 = jit_value_align((jit_value )stack_mem, (jit_value )16);
#line 1782
  return ((int )tmp___1);
}
}
/* END FUNCTION-DEF get_frame_size LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isspecial LOC=UNKNOWN */
__inline int isspecial(int _c ) 
{ 
  int tmp ;

  {
#line 343 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  tmp = __istype(_c, 1048576UL);
#line 343
  return (tmp);
}
}
/* END FUNCTION-DEF isspecial LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF move_red_left LOC=UNKNOWN */
__inline static jit_tree *move_red_left(jit_tree *h ) 
{ 
  int tmp ;

  {
#line 442 "./jitter-Darwin-X86-64.c"
  color_flip(h);
#line 443
  tmp = is_red((h->right)->left);
#line 443
  if (tmp) {
#line 444
    h->right = rotate_right(h->right);
#line 445
    h = rotate_left(h);
#line 446
    color_flip(h);
  }
#line 448
  return (h);
}
}
/* END FUNCTION-DEF move_red_left LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_alu_op LOC=UNKNOWN */
static void emit_alu_op(struct jit *jit , struct jit_op *op , int x86_op , int imm ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  long tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  x86_imm_buf imb ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___26 ;
  int tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___31 ;
  int tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  long tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___45 ;
  int tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;

  {
#line 3041
  if (imm) {
#line 3042
    if (op->r_arg[0] != op->r_arg[1]) {
#line 3042
      while (1) {
#line 3042
        if ((int )sizeof(void *) == 2) {
#line 3042
          tmp = jit->ip;
#line 3042
          (jit->ip) ++;
#line 3042
          *tmp = (unsigned char)102;
        }
#line 3042
        while (1) {
#line 3042
          if ((int )sizeof(void *) > 4) {
#line 3042
            tmp___0 = 8;
          } else {
#line 3042
            tmp___0 = 0;
          }
#line 3042
          if (op->r_arg[0] > 7L) {
#line 3042
            tmp___1 = 4;
          } else {
#line 3042
            tmp___1 = 0;
          }
#line 3042
          if (op->r_arg[1] > 7L) {
#line 3042
            tmp___2 = 1;
          } else {
#line 3042
            tmp___2 = 0;
          }
#line 3042
          _amd64_rex_bits = (unsigned char )((tmp___0 | tmp___1) | tmp___2);
#line 3042
          if ((int )_amd64_rex_bits != 0) {
#line 3042
            tmp___3 = jit->ip;
#line 3042
            (jit->ip) ++;
#line 3042
            *tmp___3 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          } else
#line 3042
          if ((int )sizeof(void *) == 1) {
#line 3042
            tmp___3 = jit->ip;
#line 3042
            (jit->ip) ++;
#line 3042
            *tmp___3 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          }
#line 3042
          break;
        }
#line 3042
        switch ((int )sizeof(void *)) {
        case 1: 
#line 3042
        tmp___4 = jit->ip;
#line 3042
        (jit->ip) ++;
#line 3042
        *tmp___4 = (unsigned char)138;
#line 3042
        break;
        case 8: 
        case 4: 
        case 2: 
#line 3042
        tmp___5 = jit->ip;
#line 3042
        (jit->ip) ++;
#line 3042
        *tmp___5 = (unsigned char)139;
#line 3042
        break;
        default: 
#line 3042
        tmp___6 = __builtin_expect(1L, 0L);
#line 3042
        if (tmp___6) {
#line 3042
          __assert_rtn((char const   *)"emit_alu_op", (char const   *)"./jitter-Darwin-X86-64.c",
                       3042, (char const   *)"0");
        }
        }
#line 3042
        while (1) {
#line 3042
          while (1) {
#line 3042
            tmp___7 = jit->ip;
#line 3042
            (jit->ip) ++;
#line 3042
            *tmp___7 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
#line 3042
            break;
          }
#line 3042
          break;
        }
#line 3042
        break;
      }
    }
#line 3043
    while (1) {
#line 3043
      if (op->r_arg[2] >= -128L) {
#line 3043
        if (op->r_arg[2] <= 127L) {
#line 3043
          while (1) {
#line 3043
            if (op->r_arg[0] > 7L) {
#line 3043
              tmp___8 = 1;
            } else {
#line 3043
              tmp___8 = 0;
            }
#line 3043
            _amd64_rex_bits___0 = (unsigned char )(8 | tmp___8);
#line 3043
            if ((int )_amd64_rex_bits___0 != 0) {
#line 3043
              tmp___9 = jit->ip;
#line 3043
              (jit->ip) ++;
#line 3043
              *tmp___9 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
            }
#line 3043
            break;
          }
#line 3043
          tmp___10 = jit->ip;
#line 3043
          (jit->ip) ++;
#line 3043
          *tmp___10 = (unsigned char)131;
#line 3043
          while (1) {
#line 3043
            while (1) {
#line 3043
              tmp___11 = jit->ip;
#line 3043
              (jit->ip) ++;
#line 3043
              *tmp___11 = (unsigned char )((long )((3 << 6) | ((x86_op & 0x07) << 3)) | (op->r_arg[0] & 7L));
#line 3043
              break;
            }
#line 3043
            break;
          }
#line 3043
          while (1) {
#line 3043
            *(jit->ip) = (unsigned char )(op->r_arg[2] & 255L);
#line 3043
            (jit->ip) ++;
#line 3043
            break;
          }
        } else {
#line 3043
          goto _L;
        }
      } else
      _L: /* CIL Label */ 
#line 3043
      if (op->r_arg[0] == 0L) {
#line 3043
        while (1) {
#line 3043
          _amd64_rex_bits___1 = (unsigned char)8;
#line 3043
          if ((int )_amd64_rex_bits___1 != 0) {
#line 3043
            tmp___12 = jit->ip;
#line 3043
            (jit->ip) ++;
#line 3043
            *tmp___12 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
          }
#line 3043
          break;
        }
#line 3043
        tmp___13 = jit->ip;
#line 3043
        (jit->ip) ++;
#line 3043
        *tmp___13 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 5);
#line 3043
        while (1) {
#line 3043
          imb.val = (int )op->r_arg[2];
#line 3043
          tmp___14 = jit->ip;
#line 3043
          (jit->ip) ++;
#line 3043
          *tmp___14 = imb.b[0];
#line 3043
          tmp___15 = jit->ip;
#line 3043
          (jit->ip) ++;
#line 3043
          *tmp___15 = imb.b[1];
#line 3043
          tmp___16 = jit->ip;
#line 3043
          (jit->ip) ++;
#line 3043
          *tmp___16 = imb.b[2];
#line 3043
          tmp___17 = jit->ip;
#line 3043
          (jit->ip) ++;
#line 3043
          *tmp___17 = imb.b[3];
#line 3043
          break;
        }
      } else {
#line 3043
        while (1) {
#line 3043
          if (op->r_arg[0] > 7L) {
#line 3043
            tmp___18 = 1;
          } else {
#line 3043
            tmp___18 = 0;
          }
#line 3043
          _amd64_rex_bits___2 = (unsigned char )(8 | tmp___18);
#line 3043
          if ((int )_amd64_rex_bits___2 != 0) {
#line 3043
            tmp___19 = jit->ip;
#line 3043
            (jit->ip) ++;
#line 3043
            *tmp___19 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
          }
#line 3043
          break;
        }
#line 3043
        tmp___20 = jit->ip;
#line 3043
        (jit->ip) ++;
#line 3043
        *tmp___20 = (unsigned char)129;
#line 3043
        while (1) {
#line 3043
          while (1) {
#line 3043
            tmp___21 = jit->ip;
#line 3043
            (jit->ip) ++;
#line 3043
            *tmp___21 = (unsigned char )((long )((3 << 6) | ((x86_op & 0x07) << 3)) | (op->r_arg[0] & 7L));
#line 3043
            break;
          }
#line 3043
          break;
        }
#line 3043
        while (1) {
#line 3043
          imb___0.val = (int )op->r_arg[2];
#line 3043
          tmp___22 = jit->ip;
#line 3043
          (jit->ip) ++;
#line 3043
          *tmp___22 = imb___0.b[0];
#line 3043
          tmp___23 = jit->ip;
#line 3043
          (jit->ip) ++;
#line 3043
          *tmp___23 = imb___0.b[1];
#line 3043
          tmp___24 = jit->ip;
#line 3043
          (jit->ip) ++;
#line 3043
          *tmp___24 = imb___0.b[2];
#line 3043
          tmp___25 = jit->ip;
#line 3043
          (jit->ip) ++;
#line 3043
          *tmp___25 = imb___0.b[3];
#line 3043
          break;
        }
      }
#line 3043
      break;
    }
  } else
#line 3046
  if (op->r_arg[0] == op->r_arg[1]) {
#line 3047
    while (1) {
#line 3047
      while (1) {
#line 3047
        if (op->r_arg[0] > 7L) {
#line 3047
          tmp___26 = 4;
        } else {
#line 3047
          tmp___26 = 0;
        }
#line 3047
        if (op->r_arg[2] > 7L) {
#line 3047
          tmp___27 = 1;
        } else {
#line 3047
          tmp___27 = 0;
        }
#line 3047
        _amd64_rex_bits___3 = (unsigned char )((8 | tmp___26) | tmp___27);
#line 3047
        if ((int )_amd64_rex_bits___3 != 0) {
#line 3047
          tmp___28 = jit->ip;
#line 3047
          (jit->ip) ++;
#line 3047
          *tmp___28 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
        }
#line 3047
        break;
      }
#line 3047
      tmp___29 = jit->ip;
#line 3047
      (jit->ip) ++;
#line 3047
      *tmp___29 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 3);
#line 3047
      while (1) {
#line 3047
        while (1) {
#line 3047
          tmp___30 = jit->ip;
#line 3047
          (jit->ip) ++;
#line 3047
          *tmp___30 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
#line 3047
          break;
        }
#line 3047
        break;
      }
#line 3047
      break;
    }
  } else
#line 3048
  if (op->r_arg[0] == op->r_arg[2]) {
#line 3049
    while (1) {
#line 3049
      while (1) {
#line 3049
        if (op->r_arg[0] > 7L) {
#line 3049
          tmp___31 = 4;
        } else {
#line 3049
          tmp___31 = 0;
        }
#line 3049
        if (op->r_arg[1] > 7L) {
#line 3049
          tmp___32 = 1;
        } else {
#line 3049
          tmp___32 = 0;
        }
#line 3049
        _amd64_rex_bits___4 = (unsigned char )((8 | tmp___31) | tmp___32);
#line 3049
        if ((int )_amd64_rex_bits___4 != 0) {
#line 3049
          tmp___33 = jit->ip;
#line 3049
          (jit->ip) ++;
#line 3049
          *tmp___33 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
        }
#line 3049
        break;
      }
#line 3049
      tmp___34 = jit->ip;
#line 3049
      (jit->ip) ++;
#line 3049
      *tmp___34 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 3);
#line 3049
      while (1) {
#line 3049
        while (1) {
#line 3049
          tmp___35 = jit->ip;
#line 3049
          (jit->ip) ++;
#line 3049
          *tmp___35 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
#line 3049
          break;
        }
#line 3049
        break;
      }
#line 3049
      break;
    }
  } else {
#line 3051
    while (1) {
#line 3051
      if ((int )sizeof(void *) == 2) {
#line 3051
        tmp___36 = jit->ip;
#line 3051
        (jit->ip) ++;
#line 3051
        *tmp___36 = (unsigned char)102;
      }
#line 3051
      while (1) {
#line 3051
        if ((int )sizeof(void *) > 4) {
#line 3051
          tmp___37 = 8;
        } else {
#line 3051
          tmp___37 = 0;
        }
#line 3051
        if (op->r_arg[0] > 7L) {
#line 3051
          tmp___38 = 4;
        } else {
#line 3051
          tmp___38 = 0;
        }
#line 3051
        if (op->r_arg[1] > 7L) {
#line 3051
          tmp___39 = 1;
        } else {
#line 3051
          tmp___39 = 0;
        }
#line 3051
        _amd64_rex_bits___5 = (unsigned char )((tmp___37 | tmp___38) | tmp___39);
#line 3051
        if ((int )_amd64_rex_bits___5 != 0) {
#line 3051
          tmp___40 = jit->ip;
#line 3051
          (jit->ip) ++;
#line 3051
          *tmp___40 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
        } else
#line 3051
        if ((int )sizeof(void *) == 1) {
#line 3051
          tmp___40 = jit->ip;
#line 3051
          (jit->ip) ++;
#line 3051
          *tmp___40 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
        }
#line 3051
        break;
      }
#line 3051
      switch ((int )sizeof(void *)) {
      case 1: 
#line 3051
      tmp___41 = jit->ip;
#line 3051
      (jit->ip) ++;
#line 3051
      *tmp___41 = (unsigned char)138;
#line 3051
      break;
      case 8: 
      case 4: 
      case 2: 
#line 3051
      tmp___42 = jit->ip;
#line 3051
      (jit->ip) ++;
#line 3051
      *tmp___42 = (unsigned char)139;
#line 3051
      break;
      default: 
#line 3051
      tmp___43 = __builtin_expect(1L, 0L);
#line 3051
      if (tmp___43) {
#line 3051
        __assert_rtn((char const   *)"emit_alu_op", (char const   *)"./jitter-Darwin-X86-64.c",
                     3051, (char const   *)"0");
      }
      }
#line 3051
      while (1) {
#line 3051
        while (1) {
#line 3051
          tmp___44 = jit->ip;
#line 3051
          (jit->ip) ++;
#line 3051
          *tmp___44 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
#line 3051
          break;
        }
#line 3051
        break;
      }
#line 3051
      break;
    }
#line 3052
    while (1) {
#line 3052
      while (1) {
#line 3052
        if (op->r_arg[0] > 7L) {
#line 3052
          tmp___45 = 4;
        } else {
#line 3052
          tmp___45 = 0;
        }
#line 3052
        if (op->r_arg[2] > 7L) {
#line 3052
          tmp___46 = 1;
        } else {
#line 3052
          tmp___46 = 0;
        }
#line 3052
        _amd64_rex_bits___6 = (unsigned char )((8 | tmp___45) | tmp___46);
#line 3052
        if ((int )_amd64_rex_bits___6 != 0) {
#line 3052
          tmp___47 = jit->ip;
#line 3052
          (jit->ip) ++;
#line 3052
          *tmp___47 = (unsigned char )(0x40 | (int )_amd64_rex_bits___6);
        }
#line 3052
        break;
      }
#line 3052
      tmp___48 = jit->ip;
#line 3052
      (jit->ip) ++;
#line 3052
      *tmp___48 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 3);
#line 3052
      while (1) {
#line 3052
        while (1) {
#line 3052
          tmp___49 = jit->ip;
#line 3052
          (jit->ip) ++;
#line 3052
          *tmp___49 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
#line 3052
          break;
        }
#line 3052
        break;
      }
#line 3052
      break;
    }
  }
#line 3055
  return;
}
}
/* END FUNCTION-DEF emit_alu_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF __sputc LOC=UNKNOWN */
__inline int ( __attribute__((__always_inline__)) __sputc)(int _c , FILE *_p ) 
{ 
  unsigned char *tmp ;
  unsigned char tmp___0 ;
  int tmp___1 ;

  {
#line 261 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h"
  (_p->_w) --;
#line 261
  if (_p->_w >= 0) {
#line 262
    tmp = _p->_p;
#line 262
    (_p->_p) ++;
#line 262
    tmp___0 = (unsigned char )_c;
#line 262
    *tmp = tmp___0;
#line 262
    return ((int )tmp___0);
  } else
#line 261
  if (_p->_w >= _p->_lbfsize) {
#line 261
    if ((int )((char )_c) != 10) {
#line 262
      tmp = _p->_p;
#line 262
      (_p->_p) ++;
#line 262
      tmp___0 = (unsigned char )_c;
#line 262
      *tmp = tmp___0;
#line 262
      return ((int )tmp___0);
    } else {
#line 264
      tmp___1 = __swbuf(_c, _p);
#line 264
      return (tmp___1);
    }
  } else {
#line 264
    tmp___1 = __swbuf(_c, _p);
#line 264
    return (tmp___1);
  }
}
}
/* END FUNCTION-DEF __sputc LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF toascii LOC=UNKNOWN */
__inline int toascii(int _c ) 
{ 


  {
#line 288 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  return (_c & 0x7F);
}
}
/* END FUNCTION-DEF toascii LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF check_dead_code LOC=UNKNOWN */
static int check_dead_code(jit_op *op , char *msg_buf ) 
{ 


  {
#line 4982
  if (! op->in_use) {
#line 4983 "./jitter-Darwin-X86-64.c"
    append_msg(msg_buf, "unreachable operation");
#line 4984
    return (1);
  }
#line 4986
  return (0);
}
}
/* END FUNCTION-DEF check_dead_code LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF pow2 LOC=UNKNOWN */
__inline static int pow2(int arg ) 
{ 
  int r ;
  int i ;

  {
#line 2207
  r = 1;
#line 2208
  i = 0;
#line 2208
  while (i < arg) {
#line 2209
    r *= 2;
#line 2208
    i ++;
  }
#line 2210
  return (r);
}
}
/* END FUNCTION-DEF pow2 LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isdigit LOC=UNKNOWN */
__inline int isdigit(int _c ) 
{ 
  __darwin_ct_rune_t tmp ;

  {
#line 239 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  tmp = __isctype(_c, 1024UL);
#line 239
  return (tmp);
}
}
/* END FUNCTION-DEF isdigit LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_tree_size LOC=UNKNOWN */
static int jit_tree_size(jit_tree *h ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
#line 583
  if ((unsigned long )h == (unsigned long )((void *)0)) {
#line 583 "./jitter-Darwin-X86-64.c"
    return (0);
  }
#line 584
  tmp = jit_tree_size(h->left);
#line 584
  tmp___0 = jit_tree_size(h->right);
#line 584
  return ((tmp + tmp___0) + 1);
}
}
/* END FUNCTION-DEF jit_tree_size LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_is_label LOC=UNKNOWN */
__inline static int jit_is_label(struct jit *jit , void *ptr ) 
{ 
  jit_label *lab ;

  {
#line 903
  lab = jit->labels;
#line 904
  while (1) {
#line 905
    if ((unsigned long )lab == (unsigned long )((void *)0)) {
#line 905
      return (0);
    }
#line 906
    if ((unsigned long )lab == (unsigned long )ptr) {
#line 906
      return (1);
    }
#line 907
    lab = lab->next;
  }
}
}
/* END FUNCTION-DEF jit_is_label LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_set_addall LOC=UNKNOWN */
__inline static void jit_set_addall(jit_set *target , jit_set *s ) 
{ 


  {
#line 612
  target->root = jit_tree_addall(target->root, s->root);
#line 613
  return;
}
}
/* END FUNCTION-DEF jit_set_addall LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_neg_op LOC=UNKNOWN */
static void emit_sse_neg_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;

  {
#line 1562
  if (a1 != a2) {
#line 1562
    while (1) {
#line 1562
      tmp = jit->ip;
#line 1562
      (jit->ip) ++;
#line 1562
      *tmp = (unsigned char)242;
#line 1562
      while (1) {
#line 1562
        if (a1 > 7L) {
#line 1562
          tmp___0 = 4;
        } else {
#line 1562
          tmp___0 = 0;
        }
#line 1562
        if (a2 > 7L) {
#line 1562
          tmp___1 = 1;
        } else {
#line 1562
          tmp___1 = 0;
        }
#line 1562
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
#line 1562
        if ((int )_amd64_rex_bits != 0) {
#line 1562
          tmp___2 = jit->ip;
#line 1562
          (jit->ip) ++;
#line 1562
          *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
        }
#line 1562
        break;
      }
#line 1562
      tmp___3 = jit->ip;
#line 1562
      (jit->ip) ++;
#line 1562
      *tmp___3 = (unsigned char)15;
#line 1562
      tmp___4 = jit->ip;
#line 1562
      (jit->ip) ++;
#line 1562
      *tmp___4 = (unsigned char)16;
#line 1562
      while (1) {
#line 1562
        while (1) {
#line 1562
          tmp___5 = jit->ip;
#line 1562
          (jit->ip) ++;
#line 1562
          *tmp___5 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
#line 1562
          break;
        }
#line 1562
        break;
      }
#line 1562
      break;
    }
  }
#line 1563
  emit_sse_change_sign(jit, op, (int )a1);
#line 1564
  return;
}
}
/* END FUNCTION-DEF emit_sse_neg_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_rsb_op LOC=UNKNOWN */
static void emit_rsb_op(struct jit *jit , struct jit_op *op , int imm ) 
{ 
  unsigned char _amd64_rex_bits ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  x86_imm_buf imb ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___17 ;
  int tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___47 ;
  int tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___56 ;
  int tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___62 ;
  int tmp___63 ;
  int tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  long tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___70 ;
  int tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;

  {
#line 3109
  if (imm) {
#line 3110
    if (op->r_arg[0] == op->r_arg[1]) {
#line 3110
      while (1) {
#line 3110
        if (- op->r_arg[2] >= -128L) {
#line 3110
          if (- op->r_arg[2] <= 127L) {
#line 3110
            while (1) {
#line 3110
              if (op->r_arg[0] > 7L) {
#line 3110
                tmp = 1;
              } else {
#line 3110
                tmp = 0;
              }
#line 3110
              _amd64_rex_bits = (unsigned char )(8 | tmp);
#line 3110
              if ((int )_amd64_rex_bits != 0) {
#line 3110
                tmp___0 = jit->ip;
#line 3110
                (jit->ip) ++;
#line 3110
                *tmp___0 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
              }
#line 3110
              break;
            }
#line 3110
            tmp___1 = jit->ip;
#line 3110
            (jit->ip) ++;
#line 3110
            *tmp___1 = (unsigned char)131;
#line 3110
            while (1) {
#line 3110
              while (1) {
#line 3110
                tmp___2 = jit->ip;
#line 3110
                (jit->ip) ++;
#line 3110
                *tmp___2 = (unsigned char )((long )(3 << 6) | (op->r_arg[0] & 7L));
#line 3110
                break;
              }
#line 3110
              break;
            }
#line 3110
            while (1) {
#line 3110
              *(jit->ip) = (unsigned char )(- op->r_arg[2] & 255L);
#line 3110
              (jit->ip) ++;
#line 3110
              break;
            }
          } else {
#line 3110
            goto _L;
          }
        } else
        _L: /* CIL Label */ 
#line 3110
        if (op->r_arg[0] == 0L) {
#line 3110
          while (1) {
#line 3110
            _amd64_rex_bits___0 = (unsigned char)8;
#line 3110
            if ((int )_amd64_rex_bits___0 != 0) {
#line 3110
              tmp___3 = jit->ip;
#line 3110
              (jit->ip) ++;
#line 3110
              *tmp___3 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
            }
#line 3110
            break;
          }
#line 3110
          tmp___4 = jit->ip;
#line 3110
          (jit->ip) ++;
#line 3110
          *tmp___4 = (unsigned char)5;
#line 3110
          while (1) {
#line 3110
            imb.val = (int )(- op->r_arg[2]);
#line 3110
            tmp___5 = jit->ip;
#line 3110
            (jit->ip) ++;
#line 3110
            *tmp___5 = imb.b[0];
#line 3110
            tmp___6 = jit->ip;
#line 3110
            (jit->ip) ++;
#line 3110
            *tmp___6 = imb.b[1];
#line 3110
            tmp___7 = jit->ip;
#line 3110
            (jit->ip) ++;
#line 3110
            *tmp___7 = imb.b[2];
#line 3110
            tmp___8 = jit->ip;
#line 3110
            (jit->ip) ++;
#line 3110
            *tmp___8 = imb.b[3];
#line 3110
            break;
          }
        } else {
#line 3110
          while (1) {
#line 3110
            if (op->r_arg[0] > 7L) {
#line 3110
              tmp___9 = 1;
            } else {
#line 3110
              tmp___9 = 0;
            }
#line 3110
            _amd64_rex_bits___1 = (unsigned char )(8 | tmp___9);
#line 3110
            if ((int )_amd64_rex_bits___1 != 0) {
#line 3110
              tmp___10 = jit->ip;
#line 3110
              (jit->ip) ++;
#line 3110
              *tmp___10 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
            }
#line 3110
            break;
          }
#line 3110
          tmp___11 = jit->ip;
#line 3110
          (jit->ip) ++;
#line 3110
          *tmp___11 = (unsigned char)129;
#line 3110
          while (1) {
#line 3110
            while (1) {
#line 3110
              tmp___12 = jit->ip;
#line 3110
              (jit->ip) ++;
#line 3110
              *tmp___12 = (unsigned char )((long )(3 << 6) | (op->r_arg[0] & 7L));
#line 3110
              break;
            }
#line 3110
            break;
          }
#line 3110
          while (1) {
#line 3110
            imb___0.val = (int )(- op->r_arg[2]);
#line 3110
            tmp___13 = jit->ip;
#line 3110
            (jit->ip) ++;
#line 3110
            *tmp___13 = imb___0.b[0];
#line 3110
            tmp___14 = jit->ip;
#line 3110
            (jit->ip) ++;
#line 3110
            *tmp___14 = imb___0.b[1];
#line 3110
            tmp___15 = jit->ip;
#line 3110
            (jit->ip) ++;
#line 3110
            *tmp___15 = imb___0.b[2];
#line 3110
            tmp___16 = jit->ip;
#line 3110
            (jit->ip) ++;
#line 3110
            *tmp___16 = imb___0.b[3];
#line 3110
            break;
          }
        }
#line 3110
        break;
      }
    } else {
#line 3111
      while (1) {
#line 3111
        while (1) {
#line 3111
          if (op->r_arg[0] > 7L) {
#line 3111
            tmp___17 = 4;
          } else {
#line 3111
            tmp___17 = 0;
          }
#line 3111
          if (op->r_arg[1] > 7L) {
#line 3111
            tmp___18 = 1;
          } else {
#line 3111
            tmp___18 = 0;
          }
#line 3111
          _amd64_rex_bits___2 = (unsigned char )((8 | tmp___17) | tmp___18);
#line 3111
          if ((int )_amd64_rex_bits___2 != 0) {
#line 3111
            tmp___19 = jit->ip;
#line 3111
            (jit->ip) ++;
#line 3111
            *tmp___19 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
          }
#line 3111
          break;
        }
#line 3111
        tmp___20 = jit->ip;
#line 3111
        (jit->ip) ++;
#line 3111
        *tmp___20 = (unsigned char)141;
#line 3111
        while (1) {
#line 3111
          if (op->r_arg[1] == 16L) {
#line 3111
            while (1) {
#line 3111
              tmp___21 = jit->ip;
#line 3111
              (jit->ip) ++;
#line 3111
              *tmp___21 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | 5L);
#line 3111
              break;
            }
#line 3111
            while (1) {
#line 3111
              imb___1.val = (int )(- op->r_arg[2]);
#line 3111
              tmp___22 = jit->ip;
#line 3111
              (jit->ip) ++;
#line 3111
              *tmp___22 = imb___1.b[0];
#line 3111
              tmp___23 = jit->ip;
#line 3111
              (jit->ip) ++;
#line 3111
              *tmp___23 = imb___1.b[1];
#line 3111
              tmp___24 = jit->ip;
#line 3111
              (jit->ip) ++;
#line 3111
              *tmp___24 = imb___1.b[2];
#line 3111
              tmp___25 = jit->ip;
#line 3111
              (jit->ip) ++;
#line 3111
              *tmp___25 = imb___1.b[3];
#line 3111
              break;
            }
          } else {
#line 3111
            while (1) {
#line 3111
              if ((op->r_arg[1] & 7L) == 4L) {
#line 3111
                if (- op->r_arg[2] == 0L) {
#line 3111
                  while (1) {
#line 3111
                    tmp___26 = jit->ip;
#line 3111
                    (jit->ip) ++;
#line 3111
                    *tmp___26 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | 4L);
#line 3111
                    break;
                  }
#line 3111
                  while (1) {
#line 3111
                    tmp___27 = jit->ip;
#line 3111
                    (jit->ip) ++;
#line 3111
                    *tmp___27 = (unsigned char )((4 << 3) | 4);
#line 3111
                    break;
                  }
                } else
#line 3111
                if (- op->r_arg[2] >= -128L) {
#line 3111
                  if (- op->r_arg[2] <= 127L) {
#line 3111
                    while (1) {
#line 3111
                      tmp___28 = jit->ip;
#line 3111
                      (jit->ip) ++;
#line 3111
                      *tmp___28 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
#line 3111
                      break;
                    }
#line 3111
                    while (1) {
#line 3111
                      tmp___29 = jit->ip;
#line 3111
                      (jit->ip) ++;
#line 3111
                      *tmp___29 = (unsigned char )((4 << 3) | 4);
#line 3111
                      break;
                    }
#line 3111
                    while (1) {
#line 3111
                      *(jit->ip) = (unsigned char )(- op->r_arg[2] & 255L);
#line 3111
                      (jit->ip) ++;
#line 3111
                      break;
                    }
                  } else {
#line 3111
                    goto _L___0;
                  }
                } else {
                  _L___0: /* CIL Label */ 
#line 3111
                  while (1) {
#line 3111
                    tmp___30 = jit->ip;
#line 3111
                    (jit->ip) ++;
#line 3111
                    *tmp___30 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
#line 3111
                    break;
                  }
#line 3111
                  while (1) {
#line 3111
                    tmp___31 = jit->ip;
#line 3111
                    (jit->ip) ++;
#line 3111
                    *tmp___31 = (unsigned char )((4 << 3) | 4);
#line 3111
                    break;
                  }
#line 3111
                  while (1) {
#line 3111
                    imb___2.val = (int )(- op->r_arg[2]);
#line 3111
                    tmp___32 = jit->ip;
#line 3111
                    (jit->ip) ++;
#line 3111
                    *tmp___32 = imb___2.b[0];
#line 3111
                    tmp___33 = jit->ip;
#line 3111
                    (jit->ip) ++;
#line 3111
                    *tmp___33 = imb___2.b[1];
#line 3111
                    tmp___34 = jit->ip;
#line 3111
                    (jit->ip) ++;
#line 3111
                    *tmp___34 = imb___2.b[2];
#line 3111
                    tmp___35 = jit->ip;
#line 3111
                    (jit->ip) ++;
#line 3111
                    *tmp___35 = imb___2.b[3];
#line 3111
                    break;
                  }
                }
#line 3111
                break;
              }
#line 3111
              if (- op->r_arg[2] == 0L) {
#line 3111
                if ((op->r_arg[1] & 7L) != 5L) {
#line 3111
                  while (1) {
#line 3111
                    tmp___36 = jit->ip;
#line 3111
                    (jit->ip) ++;
#line 3111
                    *tmp___36 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | ((op->r_arg[1] & 7L) & 7L));
#line 3111
                    break;
                  }
#line 3111
                  break;
                }
              }
#line 3111
              if (- op->r_arg[2] >= -128L) {
#line 3111
                if (- op->r_arg[2] <= 127L) {
#line 3111
                  while (1) {
#line 3111
                    tmp___37 = jit->ip;
#line 3111
                    (jit->ip) ++;
#line 3111
                    *tmp___37 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | ((op->r_arg[1] & 7L) & 7L));
#line 3111
                    break;
                  }
#line 3111
                  while (1) {
#line 3111
                    *(jit->ip) = (unsigned char )(- op->r_arg[2] & 255L);
#line 3111
                    (jit->ip) ++;
#line 3111
                    break;
                  }
                } else {
#line 3111
                  goto _L___1;
                }
              } else {
                _L___1: /* CIL Label */ 
#line 3111
                while (1) {
#line 3111
                  tmp___38 = jit->ip;
#line 3111
                  (jit->ip) ++;
#line 3111
                  *tmp___38 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | ((op->r_arg[1] & 7L) & 7L));
#line 3111
                  break;
                }
#line 3111
                while (1) {
#line 3111
                  imb___3.val = (int )(- op->r_arg[2]);
#line 3111
                  tmp___39 = jit->ip;
#line 3111
                  (jit->ip) ++;
#line 3111
                  *tmp___39 = imb___3.b[0];
#line 3111
                  tmp___40 = jit->ip;
#line 3111
                  (jit->ip) ++;
#line 3111
                  *tmp___40 = imb___3.b[1];
#line 3111
                  tmp___41 = jit->ip;
#line 3111
                  (jit->ip) ++;
#line 3111
                  *tmp___41 = imb___3.b[2];
#line 3111
                  tmp___42 = jit->ip;
#line 3111
                  (jit->ip) ++;
#line 3111
                  *tmp___42 = imb___3.b[3];
#line 3111
                  break;
                }
              }
#line 3111
              break;
            }
          }
#line 3111
          break;
        }
#line 3111
        break;
      }
    }
#line 3112
    while (1) {
#line 3112
      while (1) {
#line 3112
        if (op->r_arg[0] > 7L) {
#line 3112
          tmp___43 = 1;
        } else {
#line 3112
          tmp___43 = 0;
        }
#line 3112
        _amd64_rex_bits___3 = (unsigned char )(8 | tmp___43);
#line 3112
        if ((int )_amd64_rex_bits___3 != 0) {
#line 3112
          tmp___44 = jit->ip;
#line 3112
          (jit->ip) ++;
#line 3112
          *tmp___44 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
        }
#line 3112
        break;
      }
#line 3112
      while (1) {
#line 3112
        tmp___45 = jit->ip;
#line 3112
        (jit->ip) ++;
#line 3112
        *tmp___45 = (unsigned char)247;
#line 3112
        while (1) {
#line 3112
          while (1) {
#line 3112
            tmp___46 = jit->ip;
#line 3112
            (jit->ip) ++;
#line 3112
            *tmp___46 = (unsigned char )((long )((3 << 6) | (3 << 3)) | ((op->r_arg[0] & 7L) & 7L));
#line 3112
            break;
          }
#line 3112
          break;
        }
#line 3112
        break;
      }
#line 3112
      break;
    }
#line 3113
    return;
  }
#line 3116
  if (op->r_arg[0] == op->r_arg[1]) {
#line 3117
    while (1) {
#line 3117
      while (1) {
#line 3117
        if (op->r_arg[0] > 7L) {
#line 3117
          tmp___47 = 4;
        } else {
#line 3117
          tmp___47 = 0;
        }
#line 3117
        if (op->r_arg[2] > 7L) {
#line 3117
          tmp___48 = 1;
        } else {
#line 3117
          tmp___48 = 0;
        }
#line 3117
        _amd64_rex_bits___4 = (unsigned char )((8 | tmp___47) | tmp___48);
#line 3117
        if ((int )_amd64_rex_bits___4 != 0) {
#line 3117
          tmp___49 = jit->ip;
#line 3117
          (jit->ip) ++;
#line 3117
          *tmp___49 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
        }
#line 3117
        break;
      }
#line 3117
      tmp___50 = jit->ip;
#line 3117
      (jit->ip) ++;
#line 3117
      *tmp___50 = (unsigned char )((5 << 3) + 3);
#line 3117
      while (1) {
#line 3117
        while (1) {
#line 3117
          tmp___51 = jit->ip;
#line 3117
          (jit->ip) ++;
#line 3117
          *tmp___51 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
#line 3117
          break;
        }
#line 3117
        break;
      }
#line 3117
      break;
    }
#line 3118
    while (1) {
#line 3118
      while (1) {
#line 3118
        if (op->r_arg[0] > 7L) {
#line 3118
          tmp___52 = 1;
        } else {
#line 3118
          tmp___52 = 0;
        }
#line 3118
        _amd64_rex_bits___5 = (unsigned char )(8 | tmp___52);
#line 3118
        if ((int )_amd64_rex_bits___5 != 0) {
#line 3118
          tmp___53 = jit->ip;
#line 3118
          (jit->ip) ++;
#line 3118
          *tmp___53 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
        }
#line 3118
        break;
      }
#line 3118
      while (1) {
#line 3118
        tmp___54 = jit->ip;
#line 3118
        (jit->ip) ++;
#line 3118
        *tmp___54 = (unsigned char)247;
#line 3118
        while (1) {
#line 3118
          while (1) {
#line 3118
            tmp___55 = jit->ip;
#line 3118
            (jit->ip) ++;
#line 3118
            *tmp___55 = (unsigned char )((long )((3 << 6) | (3 << 3)) | ((op->r_arg[0] & 7L) & 7L));
#line 3118
            break;
          }
#line 3118
          break;
        }
#line 3118
        break;
      }
#line 3118
      break;
    }
  } else
#line 3119
  if (op->r_arg[0] == op->r_arg[2]) {
#line 3120
    while (1) {
#line 3120
      while (1) {
#line 3120
        if (op->r_arg[0] > 7L) {
#line 3120
          tmp___56 = 4;
        } else {
#line 3120
          tmp___56 = 0;
        }
#line 3120
        if (op->r_arg[1] > 7L) {
#line 3120
          tmp___57 = 1;
        } else {
#line 3120
          tmp___57 = 0;
        }
#line 3120
        _amd64_rex_bits___6 = (unsigned char )((8 | tmp___56) | tmp___57);
#line 3120
        if ((int )_amd64_rex_bits___6 != 0) {
#line 3120
          tmp___58 = jit->ip;
#line 3120
          (jit->ip) ++;
#line 3120
          *tmp___58 = (unsigned char )(0x40 | (int )_amd64_rex_bits___6);
        }
#line 3120
        break;
      }
#line 3120
      tmp___59 = jit->ip;
#line 3120
      (jit->ip) ++;
#line 3120
      *tmp___59 = (unsigned char )((5 << 3) + 3);
#line 3120
      while (1) {
#line 3120
        while (1) {
#line 3120
          tmp___60 = jit->ip;
#line 3120
          (jit->ip) ++;
#line 3120
          *tmp___60 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
#line 3120
          break;
        }
#line 3120
        break;
      }
#line 3120
      break;
    }
  } else {
#line 3122
    while (1) {
#line 3122
      if ((int )sizeof(void *) == 2) {
#line 3122
        tmp___61 = jit->ip;
#line 3122
        (jit->ip) ++;
#line 3122
        *tmp___61 = (unsigned char)102;
      }
#line 3122
      while (1) {
#line 3122
        if ((int )sizeof(void *) > 4) {
#line 3122
          tmp___62 = 8;
        } else {
#line 3122
          tmp___62 = 0;
        }
#line 3122
        if (op->r_arg[0] > 7L) {
#line 3122
          tmp___63 = 4;
        } else {
#line 3122
          tmp___63 = 0;
        }
#line 3122
        if (op->r_arg[2] > 7L) {
#line 3122
          tmp___64 = 1;
        } else {
#line 3122
          tmp___64 = 0;
        }
#line 3122
        _amd64_rex_bits___7 = (unsigned char )((tmp___62 | tmp___63) | tmp___64);
#line 3122
        if ((int )_amd64_rex_bits___7 != 0) {
#line 3122
          tmp___65 = jit->ip;
#line 3122
          (jit->ip) ++;
#line 3122
          *tmp___65 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
        } else
#line 3122
        if ((int )sizeof(void *) == 1) {
#line 3122
          tmp___65 = jit->ip;
#line 3122
          (jit->ip) ++;
#line 3122
          *tmp___65 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
        }
#line 3122
        break;
      }
#line 3122
      switch ((int )sizeof(void *)) {
      case 1: 
#line 3122
      tmp___66 = jit->ip;
#line 3122
      (jit->ip) ++;
#line 3122
      *tmp___66 = (unsigned char)138;
#line 3122
      break;
      case 8: 
      case 4: 
      case 2: 
#line 3122
      tmp___67 = jit->ip;
#line 3122
      (jit->ip) ++;
#line 3122
      *tmp___67 = (unsigned char)139;
#line 3122
      break;
      default: 
#line 3122
      tmp___68 = __builtin_expect(1L, 0L);
#line 3122
      if (tmp___68) {
#line 3122
        __assert_rtn((char const   *)"emit_rsb_op", (char const   *)"./jitter-Darwin-X86-64.c",
                     3122, (char const   *)"0");
      }
      }
#line 3122
      while (1) {
#line 3122
        while (1) {
#line 3122
          tmp___69 = jit->ip;
#line 3122
          (jit->ip) ++;
#line 3122
          *tmp___69 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
#line 3122
          break;
        }
#line 3122
        break;
      }
#line 3122
      break;
    }
#line 3123
    while (1) {
#line 3123
      while (1) {
#line 3123
        if (op->r_arg[0] > 7L) {
#line 3123
          tmp___70 = 4;
        } else {
#line 3123
          tmp___70 = 0;
        }
#line 3123
        if (op->r_arg[1] > 7L) {
#line 3123
          tmp___71 = 1;
        } else {
#line 3123
          tmp___71 = 0;
        }
#line 3123
        _amd64_rex_bits___8 = (unsigned char )((8 | tmp___70) | tmp___71);
#line 3123
        if ((int )_amd64_rex_bits___8 != 0) {
#line 3123
          tmp___72 = jit->ip;
#line 3123
          (jit->ip) ++;
#line 3123
          *tmp___72 = (unsigned char )(0x40 | (int )_amd64_rex_bits___8);
        }
#line 3123
        break;
      }
#line 3123
      tmp___73 = jit->ip;
#line 3123
      (jit->ip) ++;
#line 3123
      *tmp___73 = (unsigned char )((5 << 3) + 3);
#line 3123
      while (1) {
#line 3123
        while (1) {
#line 3123
          tmp___74 = jit->ip;
#line 3123
          (jit->ip) ++;
#line 3123
          *tmp___74 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
#line 3123
          break;
        }
#line 3123
        break;
      }
#line 3123
      break;
    }
  }
#line 3125
  return;
}
}
/* END FUNCTION-DEF emit_rsb_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_set_fparg LOC=UNKNOWN */
__inline static void emit_set_fparg(struct jit *jit , struct jit_out_arg *arg ) 
{ 
  int sreg ;
  int reg ;
  jit_value value ;
  int pos ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___55 ;
  int tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___62 ;
  int tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  int tmp___68 ;
  float val ;
  unsigned int tmp___69 ;
  unsigned long long tmp___70 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  amd64_imm_buf imb___5 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  amd64_imm_buf imb___7 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;

  {
#line 2378
  reg = (*((jit->reg_al)->fp_arg_regs + arg->argpos))->id;
#line 2379
  value = arg->value.generic;
#line 2380
  if (arg->isreg) {
#line 2381
    tmp___68 = is_spilled(value, jit->prepared_args.op, & sreg);
#line 2381
    if (tmp___68) {
#line 2382
      tmp = stack_reg_pos(jit, (int )value);
#line 2382
      pos = tmp;
#line 2383
      if ((unsigned long long )arg->size == sizeof(float )) {
#line 2384
        while (1) {
#line 2384
          tmp___0 = jit->ip;
#line 2384
          (jit->ip) ++;
#line 2384
          *tmp___0 = (unsigned char)242;
#line 2384
          while (1) {
#line 2384
            if (reg > 7) {
#line 2384
              tmp___1 = 4;
            } else {
#line 2384
              tmp___1 = 0;
            }
#line 2384
            _amd64_rex_bits = (unsigned char )tmp___1;
#line 2384
            if ((int )_amd64_rex_bits != 0) {
#line 2384
              tmp___2 = jit->ip;
#line 2384
              (jit->ip) ++;
#line 2384
              *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
            }
#line 2384
            break;
          }
#line 2384
          tmp___3 = jit->ip;
#line 2384
          (jit->ip) ++;
#line 2384
          *tmp___3 = (unsigned char)15;
#line 2384
          tmp___4 = jit->ip;
#line 2384
          (jit->ip) ++;
#line 2384
          *tmp___4 = (unsigned char)90;
#line 2384
          while (1) {
#line 2384
            while (1) {
#line 2384
              if (0) {
#line 2384
                if (pos == 0) {
#line 2384
                  while (1) {
#line 2384
                    tmp___10 = jit->ip;
#line 2384
                    (jit->ip) ++;
#line 2384
                    *tmp___10 = (unsigned char )((((reg & 0x7) & 0x07) << 3) | 4);
#line 2384
                    break;
                  }
#line 2384
                  while (1) {
#line 2384
                    tmp___11 = jit->ip;
#line 2384
                    (jit->ip) ++;
#line 2384
                    *tmp___11 = (unsigned char )((4 << 3) | 4);
#line 2384
                    break;
                  }
                } else
#line 2384
                if ((jit_value )pos >= -128L) {
#line 2384
                  if ((jit_value )pos <= 127L) {
#line 2384
                    while (1) {
#line 2384
                      tmp___12 = jit->ip;
#line 2384
                      (jit->ip) ++;
#line 2384
                      *tmp___12 = (unsigned char )(((1 << 6) | (((reg & 0x7) & 0x07) << 3)) | 4);
#line 2384
                      break;
                    }
#line 2384
                    while (1) {
#line 2384
                      tmp___13 = jit->ip;
#line 2384
                      (jit->ip) ++;
#line 2384
                      *tmp___13 = (unsigned char )((4 << 3) | 4);
#line 2384
                      break;
                    }
#line 2384
                    while (1) {
#line 2384
                      *(jit->ip) = (unsigned char )(pos & 0xff);
#line 2384
                      (jit->ip) ++;
#line 2384
                      break;
                    }
                  } else {
#line 2384
                    goto _L;
                  }
                } else {
                  _L: /* CIL Label */ 
#line 2384
                  while (1) {
#line 2384
                    tmp___14 = jit->ip;
#line 2384
                    (jit->ip) ++;
#line 2384
                    *tmp___14 = (unsigned char )(((2 << 6) | (((reg & 0x7) & 0x07) << 3)) | 4);
#line 2384
                    break;
                  }
#line 2384
                  while (1) {
#line 2384
                    tmp___15 = jit->ip;
#line 2384
                    (jit->ip) ++;
#line 2384
                    *tmp___15 = (unsigned char )((4 << 3) | 4);
#line 2384
                    break;
                  }
#line 2384
                  while (1) {
#line 2384
                    imb___0.val = pos;
#line 2384
                    tmp___16 = jit->ip;
#line 2384
                    (jit->ip) ++;
#line 2384
                    *tmp___16 = imb___0.b[0];
#line 2384
                    tmp___17 = jit->ip;
#line 2384
                    (jit->ip) ++;
#line 2384
                    *tmp___17 = imb___0.b[1];
#line 2384
                    tmp___18 = jit->ip;
#line 2384
                    (jit->ip) ++;
#line 2384
                    *tmp___18 = imb___0.b[2];
#line 2384
                    tmp___19 = jit->ip;
#line 2384
                    (jit->ip) ++;
#line 2384
                    *tmp___19 = imb___0.b[3];
#line 2384
                    break;
                  }
                }
#line 2384
                break;
              }
#line 2384
              if (pos == 0) {

              }
#line 2384
              if ((jit_value )pos >= -128L) {
#line 2384
                if ((jit_value )pos <= 127L) {
#line 2384
                  while (1) {
#line 2384
                    tmp___21 = jit->ip;
#line 2384
                    (jit->ip) ++;
#line 2384
                    *tmp___21 = (unsigned char )(((1 << 6) | (((reg & 0x7) & 0x07) << 3)) | 5);
#line 2384
                    break;
                  }
#line 2384
                  while (1) {
#line 2384
                    *(jit->ip) = (unsigned char )(pos & 0xff);
#line 2384
                    (jit->ip) ++;
#line 2384
                    break;
                  }
                } else {
#line 2384
                  goto _L___0;
                }
              } else {
                _L___0: /* CIL Label */ 
#line 2384
                while (1) {
#line 2384
                  tmp___22 = jit->ip;
#line 2384
                  (jit->ip) ++;
#line 2384
                  *tmp___22 = (unsigned char )(((2 << 6) | (((reg & 0x7) & 0x07) << 3)) | 5);
#line 2384
                  break;
                }
#line 2384
                while (1) {
#line 2384
                  imb___1.val = pos;
#line 2384
                  tmp___23 = jit->ip;
#line 2384
                  (jit->ip) ++;
#line 2384
                  *tmp___23 = imb___1.b[0];
#line 2384
                  tmp___24 = jit->ip;
#line 2384
                  (jit->ip) ++;
#line 2384
                  *tmp___24 = imb___1.b[1];
#line 2384
                  tmp___25 = jit->ip;
#line 2384
                  (jit->ip) ++;
#line 2384
                  *tmp___25 = imb___1.b[2];
#line 2384
                  tmp___26 = jit->ip;
#line 2384
                  (jit->ip) ++;
#line 2384
                  *tmp___26 = imb___1.b[3];
#line 2384
                  break;
                }
              }
#line 2384
              break;
            }
#line 2384
            break;
          }
#line 2384
          break;
        }
      } else {
#line 2385
        while (1) {
#line 2385
          tmp___27 = jit->ip;
#line 2385
          (jit->ip) ++;
#line 2385
          *tmp___27 = (unsigned char)102;
#line 2385
          while (1) {
#line 2385
            if (reg > 7) {
#line 2385
              tmp___28 = 4;
            } else {
#line 2385
              tmp___28 = 0;
            }
#line 2385
            _amd64_rex_bits___0 = (unsigned char )tmp___28;
#line 2385
            if ((int )_amd64_rex_bits___0 != 0) {
#line 2385
              tmp___29 = jit->ip;
#line 2385
              (jit->ip) ++;
#line 2385
              *tmp___29 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
            }
#line 2385
            break;
          }
#line 2385
          tmp___30 = jit->ip;
#line 2385
          (jit->ip) ++;
#line 2385
          *tmp___30 = (unsigned char)15;
#line 2385
          tmp___31 = jit->ip;
#line 2385
          (jit->ip) ++;
#line 2385
          *tmp___31 = (unsigned char)18;
#line 2385
          while (1) {
#line 2385
            while (1) {
#line 2385
              if (0) {
#line 2385
                if (pos == 0) {
#line 2385
                  while (1) {
#line 2385
                    tmp___37 = jit->ip;
#line 2385
                    (jit->ip) ++;
#line 2385
                    *tmp___37 = (unsigned char )((((reg & 0x7) & 0x07) << 3) | 4);
#line 2385
                    break;
                  }
#line 2385
                  while (1) {
#line 2385
                    tmp___38 = jit->ip;
#line 2385
                    (jit->ip) ++;
#line 2385
                    *tmp___38 = (unsigned char )((4 << 3) | 4);
#line 2385
                    break;
                  }
                } else
#line 2385
                if ((jit_value )pos >= -128L) {
#line 2385
                  if ((jit_value )pos <= 127L) {
#line 2385
                    while (1) {
#line 2385
                      tmp___39 = jit->ip;
#line 2385
                      (jit->ip) ++;
#line 2385
                      *tmp___39 = (unsigned char )(((1 << 6) | (((reg & 0x7) & 0x07) << 3)) | 4);
#line 2385
                      break;
                    }
#line 2385
                    while (1) {
#line 2385
                      tmp___40 = jit->ip;
#line 2385
                      (jit->ip) ++;
#line 2385
                      *tmp___40 = (unsigned char )((4 << 3) | 4);
#line 2385
                      break;
                    }
#line 2385
                    while (1) {
#line 2385
                      *(jit->ip) = (unsigned char )(pos & 0xff);
#line 2385
                      (jit->ip) ++;
#line 2385
                      break;
                    }
                  } else {
#line 2385
                    goto _L___1;
                  }
                } else {
                  _L___1: /* CIL Label */ 
#line 2385
                  while (1) {
#line 2385
                    tmp___41 = jit->ip;
#line 2385
                    (jit->ip) ++;
#line 2385
                    *tmp___41 = (unsigned char )(((2 << 6) | (((reg & 0x7) & 0x07) << 3)) | 4);
#line 2385
                    break;
                  }
#line 2385
                  while (1) {
#line 2385
                    tmp___42 = jit->ip;
#line 2385
                    (jit->ip) ++;
#line 2385
                    *tmp___42 = (unsigned char )((4 << 3) | 4);
#line 2385
                    break;
                  }
#line 2385
                  while (1) {
#line 2385
                    imb___3.val = pos;
#line 2385
                    tmp___43 = jit->ip;
#line 2385
                    (jit->ip) ++;
#line 2385
                    *tmp___43 = imb___3.b[0];
#line 2385
                    tmp___44 = jit->ip;
#line 2385
                    (jit->ip) ++;
#line 2385
                    *tmp___44 = imb___3.b[1];
#line 2385
                    tmp___45 = jit->ip;
#line 2385
                    (jit->ip) ++;
#line 2385
                    *tmp___45 = imb___3.b[2];
#line 2385
                    tmp___46 = jit->ip;
#line 2385
                    (jit->ip) ++;
#line 2385
                    *tmp___46 = imb___3.b[3];
#line 2385
                    break;
                  }
                }
#line 2385
                break;
              }
#line 2385
              if (pos == 0) {

              }
#line 2385
              if ((jit_value )pos >= -128L) {
#line 2385
                if ((jit_value )pos <= 127L) {
#line 2385
                  while (1) {
#line 2385
                    tmp___48 = jit->ip;
#line 2385
                    (jit->ip) ++;
#line 2385
                    *tmp___48 = (unsigned char )(((1 << 6) | (((reg & 0x7) & 0x07) << 3)) | 5);
#line 2385
                    break;
                  }
#line 2385
                  while (1) {
#line 2385
                    *(jit->ip) = (unsigned char )(pos & 0xff);
#line 2385
                    (jit->ip) ++;
#line 2385
                    break;
                  }
                } else {
#line 2385
                  goto _L___2;
                }
              } else {
                _L___2: /* CIL Label */ 
#line 2385
                while (1) {
#line 2385
                  tmp___49 = jit->ip;
#line 2385
                  (jit->ip) ++;
#line 2385
                  *tmp___49 = (unsigned char )(((2 << 6) | (((reg & 0x7) & 0x07) << 3)) | 5);
#line 2385
                  break;
                }
#line 2385
                while (1) {
#line 2385
                  imb___4.val = pos;
#line 2385
                  tmp___50 = jit->ip;
#line 2385
                  (jit->ip) ++;
#line 2385
                  *tmp___50 = imb___4.b[0];
#line 2385
                  tmp___51 = jit->ip;
#line 2385
                  (jit->ip) ++;
#line 2385
                  *tmp___51 = imb___4.b[1];
#line 2385
                  tmp___52 = jit->ip;
#line 2385
                  (jit->ip) ++;
#line 2385
                  *tmp___52 = imb___4.b[2];
#line 2385
                  tmp___53 = jit->ip;
#line 2385
                  (jit->ip) ++;
#line 2385
                  *tmp___53 = imb___4.b[3];
#line 2385
                  break;
                }
              }
#line 2385
              break;
            }
#line 2385
            break;
          }
#line 2385
          break;
        }
      }
    } else
#line 2387
    if ((unsigned long long )arg->size == sizeof(float )) {
#line 2388
      while (1) {
#line 2388
        tmp___54 = jit->ip;
#line 2388
        (jit->ip) ++;
#line 2388
        *tmp___54 = (unsigned char)242;
#line 2388
        while (1) {
#line 2388
          if (reg > 7) {
#line 2388
            tmp___55 = 4;
          } else {
#line 2388
            tmp___55 = 0;
          }
#line 2388
          if (sreg > 7) {
#line 2388
            tmp___56 = 1;
          } else {
#line 2388
            tmp___56 = 0;
          }
#line 2388
          _amd64_rex_bits___1 = (unsigned char )(tmp___55 | tmp___56);
#line 2388
          if ((int )_amd64_rex_bits___1 != 0) {
#line 2388
            tmp___57 = jit->ip;
#line 2388
            (jit->ip) ++;
#line 2388
            *tmp___57 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
          }
#line 2388
          break;
        }
#line 2388
        tmp___58 = jit->ip;
#line 2388
        (jit->ip) ++;
#line 2388
        *tmp___58 = (unsigned char)15;
#line 2388
        tmp___59 = jit->ip;
#line 2388
        (jit->ip) ++;
#line 2388
        *tmp___59 = (unsigned char)90;
#line 2388
        while (1) {
#line 2388
          while (1) {
#line 2388
            tmp___60 = jit->ip;
#line 2388
            (jit->ip) ++;
#line 2388
            *tmp___60 = (unsigned char )(((3 << 6) | ((reg & 0x07) << 3)) | (sreg & 0x07));
#line 2388
            break;
          }
#line 2388
          break;
        }
#line 2388
        break;
      }
    } else
#line 2389
    if (reg != sreg) {
#line 2389
      while (1) {
#line 2389
        tmp___61 = jit->ip;
#line 2389
        (jit->ip) ++;
#line 2389
        *tmp___61 = (unsigned char)242;
#line 2389
        while (1) {
#line 2389
          if (reg > 7) {
#line 2389
            tmp___62 = 4;
          } else {
#line 2389
            tmp___62 = 0;
          }
#line 2389
          if (sreg > 7) {
#line 2389
            tmp___63 = 1;
          } else {
#line 2389
            tmp___63 = 0;
          }
#line 2389
          _amd64_rex_bits___2 = (unsigned char )(tmp___62 | tmp___63);
#line 2389
          if ((int )_amd64_rex_bits___2 != 0) {
#line 2389
            tmp___64 = jit->ip;
#line 2389
            (jit->ip) ++;
#line 2389
            *tmp___64 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
          }
#line 2389
          break;
        }
#line 2389
        tmp___65 = jit->ip;
#line 2389
        (jit->ip) ++;
#line 2389
        *tmp___65 = (unsigned char)15;
#line 2389
        tmp___66 = jit->ip;
#line 2389
        (jit->ip) ++;
#line 2389
        *tmp___66 = (unsigned char)16;
#line 2389
        while (1) {
#line 2389
          while (1) {
#line 2389
            tmp___67 = jit->ip;
#line 2389
            (jit->ip) ++;
#line 2389
            *tmp___67 = (unsigned char )(((3 << 6) | ((reg & 0x07) << 3)) | (sreg & 0x07));
#line 2389
            break;
          }
#line 2389
          break;
        }
#line 2389
        break;
      }
    }
  } else
#line 2392
  if ((unsigned long long )arg->size == sizeof(float )) {
#line 2393
    val = (float )arg->value.fp;
#line 2396
    tmp___70 = __builtin_object_size((void *)(& tmp___69), 0);
#line 2396
    __builtin___memcpy_chk((void *)(& tmp___69), (void const   *)(& val), sizeof(float ),
                           tmp___70);
#line 2398
    while (1) {
#line 2398
      while (1) {
#line 2398
        _amd64_rex_bits___3 = (unsigned char)0;
#line 2398
        if ((int )_amd64_rex_bits___3 != 0) {
#line 2398
          tmp___71 = jit->ip;
#line 2398
          (jit->ip) ++;
#line 2398
          *tmp___71 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
        }
#line 2398
        break;
      }
#line 2398
      tmp___72 = jit->ip;
#line 2398
      (jit->ip) ++;
#line 2398
      *tmp___72 = (unsigned char)184;
#line 2398
      while (1) {
#line 2398
        imb___6.val = (int )((size_t )tmp___69);
#line 2398
        tmp___81 = jit->ip;
#line 2398
        (jit->ip) ++;
#line 2398
        *tmp___81 = imb___6.b[0];
#line 2398
        tmp___82 = jit->ip;
#line 2398
        (jit->ip) ++;
#line 2398
        *tmp___82 = imb___6.b[1];
#line 2398
        tmp___83 = jit->ip;
#line 2398
        (jit->ip) ++;
#line 2398
        *tmp___83 = imb___6.b[2];
#line 2398
        tmp___84 = jit->ip;
#line 2398
        (jit->ip) ++;
#line 2398
        *tmp___84 = imb___6.b[3];
#line 2398
        break;
      }
#line 2398
      break;
    }
#line 2399
    while (1) {
#line 2399
      tmp___85 = jit->ip;
#line 2399
      (jit->ip) ++;
#line 2399
      *tmp___85 = (unsigned char)102;
#line 2399
      while (1) {
#line 2399
        if (reg > 7) {
#line 2399
          tmp___86 = 4;
        } else {
#line 2399
          tmp___86 = 0;
        }
#line 2399
        _amd64_rex_bits___4 = (unsigned char )tmp___86;
#line 2399
        if ((int )_amd64_rex_bits___4 != 0) {
#line 2399
          tmp___87 = jit->ip;
#line 2399
          (jit->ip) ++;
#line 2399
          *tmp___87 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
        }
#line 2399
        break;
      }
#line 2399
      tmp___88 = jit->ip;
#line 2399
      (jit->ip) ++;
#line 2399
      *tmp___88 = (unsigned char)15;
#line 2399
      tmp___89 = jit->ip;
#line 2399
      (jit->ip) ++;
#line 2399
      *tmp___89 = (unsigned char)110;
#line 2399
      while (1) {
#line 2399
        while (1) {
#line 2399
          tmp___90 = jit->ip;
#line 2399
          (jit->ip) ++;
#line 2399
          *tmp___90 = (unsigned char )((3 << 6) | ((reg & 0x07) << 3));
#line 2399
          break;
        }
#line 2399
        break;
      }
#line 2399
      break;
    }
  } else {
#line 2401
    while (1) {
#line 2401
      while (1) {
#line 2401
        _amd64_rex_bits___5 = (unsigned char)8;
#line 2401
        if ((int )_amd64_rex_bits___5 != 0) {
#line 2401
          tmp___91 = jit->ip;
#line 2401
          (jit->ip) ++;
#line 2401
          *tmp___91 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
        }
#line 2401
        break;
      }
#line 2401
      tmp___92 = jit->ip;
#line 2401
      (jit->ip) ++;
#line 2401
      *tmp___92 = (unsigned char)184;
#line 2401
      while (1) {
#line 2401
        imb___7.val = (size_t )value;
#line 2401
        tmp___93 = jit->ip;
#line 2401
        (jit->ip) ++;
#line 2401
        *tmp___93 = imb___7.b[0];
#line 2401
        tmp___94 = jit->ip;
#line 2401
        (jit->ip) ++;
#line 2401
        *tmp___94 = imb___7.b[1];
#line 2401
        tmp___95 = jit->ip;
#line 2401
        (jit->ip) ++;
#line 2401
        *tmp___95 = imb___7.b[2];
#line 2401
        tmp___96 = jit->ip;
#line 2401
        (jit->ip) ++;
#line 2401
        *tmp___96 = imb___7.b[3];
#line 2401
        tmp___97 = jit->ip;
#line 2401
        (jit->ip) ++;
#line 2401
        *tmp___97 = imb___7.b[4];
#line 2401
        tmp___98 = jit->ip;
#line 2401
        (jit->ip) ++;
#line 2401
        *tmp___98 = imb___7.b[5];
#line 2401
        tmp___99 = jit->ip;
#line 2401
        (jit->ip) ++;
#line 2401
        *tmp___99 = imb___7.b[6];
#line 2401
        tmp___100 = jit->ip;
#line 2401
        (jit->ip) ++;
#line 2401
        *tmp___100 = imb___7.b[7];
#line 2401
        break;
      }
#line 2401
      break;
    }
#line 2402
    while (1) {
#line 2402
      tmp___105 = jit->ip;
#line 2402
      (jit->ip) ++;
#line 2402
      *tmp___105 = (unsigned char)102;
#line 2402
      while (1) {
#line 2402
        if (reg > 7) {
#line 2402
          tmp___106 = 4;
        } else {
#line 2402
          tmp___106 = 0;
        }
#line 2402
        _amd64_rex_bits___6 = (unsigned char )(8 | tmp___106);
#line 2402
        if ((int )_amd64_rex_bits___6 != 0) {
#line 2402
          tmp___107 = jit->ip;
#line 2402
          (jit->ip) ++;
#line 2402
          *tmp___107 = (unsigned char )(0x40 | (int )_amd64_rex_bits___6);
        }
#line 2402
        break;
      }
#line 2402
      tmp___108 = jit->ip;
#line 2402
      (jit->ip) ++;
#line 2402
      *tmp___108 = (unsigned char)15;
#line 2402
      tmp___109 = jit->ip;
#line 2402
      (jit->ip) ++;
#line 2402
      *tmp___109 = (unsigned char)110;
#line 2402
      while (1) {
#line 2402
        while (1) {
#line 2402
          tmp___110 = jit->ip;
#line 2402
          (jit->ip) ++;
#line 2402
          *tmp___110 = (unsigned char )((3 << 6) | ((reg & 0x07) << 3));
#line 2402
          break;
        }
#line 2402
        break;
      }
#line 2402
      break;
    }
  }
#line 2405
  return;
}
}
/* END FUNCTION-DEF emit_set_fparg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF sse_mov_reg_safeimm LOC=UNKNOWN */
static void sse_mov_reg_safeimm(struct jit *jit , jit_op *op , jit_value reg , double *imm ) 
{ 
  jit_hw_reg *r ;
  jit_hw_reg *tmp ;
  int _amd64_width_temp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  unsigned char *tmp___4 ;
  int tmp___5 ;
  unsigned char *tmp___6 ;
  amd64_imm_buf imb ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  int tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___21 ;
  int tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  int _amd64_width_temp___0 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___45 ;
  int tmp___46 ;
  int tmp___47 ;
  unsigned char *tmp___48 ;
  int tmp___49 ;
  unsigned char *tmp___50 ;
  amd64_imm_buf imb___3 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  int tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;

  {
#line 1434
  if ((jit_unsigned_value )imm > 0xffffffffUL) {
#line 1435
    tmp = jit_get_unused_reg(jit->reg_al, op, 0);
#line 1435
    r = tmp;
#line 1436
    if (r) {
#line 1437
      while (1) {
#line 1437
        _amd64_width_temp = (size_t )((jit_value )imm) == (size_t )((int )((size_t )((jit_value )imm)));
#line 1437
        while (1) {
#line 1437
          while (1) {
#line 1437
            if (_amd64_width_temp) {
#line 1437
              tmp___2 = 4;
            } else {
#line 1437
              tmp___2 = 8;
            }
#line 1437
            if (tmp___2 > 4) {
#line 1437
              tmp___1 = 8;
            } else {
#line 1437
              tmp___1 = 0;
            }
#line 1437
            if (r->id > 7) {
#line 1437
              tmp___3 = 1;
            } else {
#line 1437
              tmp___3 = 0;
            }
#line 1437
            _amd64_rex_bits = (unsigned char )(tmp___1 | tmp___3);
#line 1437
            if ((int )_amd64_rex_bits != 0) {
#line 1437
              tmp___4 = jit->ip;
#line 1437
              (jit->ip) ++;
#line 1437
              *tmp___4 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
            } else {
#line 1437
              if (_amd64_width_temp) {
#line 1437
                tmp___5 = 4;
              } else {
#line 1437
                tmp___5 = 8;
              }
#line 1437
              if (tmp___5 == 1) {
#line 1437
                tmp___4 = jit->ip;
#line 1437
                (jit->ip) ++;
#line 1437
                *tmp___4 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
              }
            }
#line 1437
            break;
          }
#line 1437
          tmp___6 = jit->ip;
#line 1437
          (jit->ip) ++;
#line 1437
          *tmp___6 = (unsigned char )(184 + (r->id & 0x7));
#line 1437
          if (_amd64_width_temp) {
#line 1437
            tmp___19 = 4;
          } else {
#line 1437
            tmp___19 = 8;
          }
#line 1437
          if (tmp___19 == 8) {
#line 1437
            while (1) {
#line 1437
              imb.val = (size_t )((jit_value )imm);
#line 1437
              tmp___7 = jit->ip;
#line 1437
              (jit->ip) ++;
#line 1437
              *tmp___7 = imb.b[0];
#line 1437
              tmp___8 = jit->ip;
#line 1437
              (jit->ip) ++;
#line 1437
              *tmp___8 = imb.b[1];
#line 1437
              tmp___9 = jit->ip;
#line 1437
              (jit->ip) ++;
#line 1437
              *tmp___9 = imb.b[2];
#line 1437
              tmp___10 = jit->ip;
#line 1437
              (jit->ip) ++;
#line 1437
              *tmp___10 = imb.b[3];
#line 1437
              tmp___11 = jit->ip;
#line 1437
              (jit->ip) ++;
#line 1437
              *tmp___11 = imb.b[4];
#line 1437
              tmp___12 = jit->ip;
#line 1437
              (jit->ip) ++;
#line 1437
              *tmp___12 = imb.b[5];
#line 1437
              tmp___13 = jit->ip;
#line 1437
              (jit->ip) ++;
#line 1437
              *tmp___13 = imb.b[6];
#line 1437
              tmp___14 = jit->ip;
#line 1437
              (jit->ip) ++;
#line 1437
              *tmp___14 = imb.b[7];
#line 1437
              break;
            }
          } else {
#line 1437
            while (1) {
#line 1437
              imb___0.val = (int )((size_t )((jit_value )imm));
#line 1437
              tmp___15 = jit->ip;
#line 1437
              (jit->ip) ++;
#line 1437
              *tmp___15 = imb___0.b[0];
#line 1437
              tmp___16 = jit->ip;
#line 1437
              (jit->ip) ++;
#line 1437
              *tmp___16 = imb___0.b[1];
#line 1437
              tmp___17 = jit->ip;
#line 1437
              (jit->ip) ++;
#line 1437
              *tmp___17 = imb___0.b[2];
#line 1437
              tmp___18 = jit->ip;
#line 1437
              (jit->ip) ++;
#line 1437
              *tmp___18 = imb___0.b[3];
#line 1437
              break;
            }
          }
#line 1437
          break;
        }
#line 1437
        break;
      }
#line 1438
      while (1) {
#line 1438
        tmp___20 = jit->ip;
#line 1438
        (jit->ip) ++;
#line 1438
        *tmp___20 = (unsigned char)242;
#line 1438
        while (1) {
#line 1438
          if (reg > 7L) {
#line 1438
            tmp___21 = 4;
          } else {
#line 1438
            tmp___21 = 0;
          }
#line 1438
          if (r->id > 7) {
#line 1438
            tmp___22 = 1;
          } else {
#line 1438
            tmp___22 = 0;
          }
#line 1438
          _amd64_rex_bits___0 = (unsigned char )(tmp___21 | tmp___22);
#line 1438
          if ((int )_amd64_rex_bits___0 != 0) {
#line 1438
            tmp___23 = jit->ip;
#line 1438
            (jit->ip) ++;
#line 1438
            *tmp___23 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
          }
#line 1438
          break;
        }
#line 1438
        tmp___24 = jit->ip;
#line 1438
        (jit->ip) ++;
#line 1438
        *tmp___24 = (unsigned char)15;
#line 1438
        tmp___25 = jit->ip;
#line 1438
        (jit->ip) ++;
#line 1438
        *tmp___25 = (unsigned char)16;
#line 1438
        while (1) {
#line 1438
          if ((r->id & 0x7) == 4) {
#line 1438
            while (1) {
#line 1438
              tmp___26 = jit->ip;
#line 1438
              (jit->ip) ++;
#line 1438
              *tmp___26 = (unsigned char )((((reg & 7L) & 7L) << 3) | 4L);
#line 1438
              break;
            }
#line 1438
            while (1) {
#line 1438
              tmp___27 = jit->ip;
#line 1438
              (jit->ip) ++;
#line 1438
              *tmp___27 = (unsigned char )((4 << 3) | 4);
#line 1438
              break;
            }
#line 1438
            break;
          }
#line 1438
          if ((r->id & 0x7) != 5) {
#line 1438
            while (1) {
#line 1438
              tmp___36 = jit->ip;
#line 1438
              (jit->ip) ++;
#line 1438
              *tmp___36 = (unsigned char )((((reg & 7L) & 7L) << 3) | (long )((r->id & 0x7) & 0x07));
#line 1438
              break;
            }
#line 1438
            break;
          }
#line 1438
          while (1) {
#line 1438
            tmp___37 = jit->ip;
#line 1438
            (jit->ip) ++;
#line 1438
            *tmp___37 = (unsigned char )(((long )(1 << 6) | (((reg & 7L) & 7L) << 3)) | (long )((r->id & 0x7) & 0x07));
#line 1438
            break;
          }
#line 1438
          while (1) {
#line 1438
            *(jit->ip) = (unsigned char)0;
#line 1438
            (jit->ip) ++;
#line 1438
            break;
          }
#line 1438
          break;
        }
#line 1438
        break;
      }
    } else {
#line 1440
      while (1) {
#line 1440
        while (1) {
#line 1440
          _amd64_rex_bits___1 = (unsigned char)0;
#line 1440
          if ((int )_amd64_rex_bits___1 != 0) {
#line 1440
            tmp___43 = jit->ip;
#line 1440
            (jit->ip) ++;
#line 1440
            *tmp___43 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
          }
#line 1440
          break;
        }
#line 1440
        tmp___44 = jit->ip;
#line 1440
        (jit->ip) ++;
#line 1440
        *tmp___44 = (unsigned char)80;
#line 1440
        break;
      }
#line 1441
      while (1) {
#line 1441
        _amd64_width_temp___0 = (size_t )((jit_value )imm) == (size_t )((int )((size_t )((jit_value )imm)));
#line 1441
        while (1) {
#line 1441
          while (1) {
#line 1441
            if (_amd64_width_temp___0) {
#line 1441
              tmp___47 = 4;
            } else {
#line 1441
              tmp___47 = 8;
            }
#line 1441
            if (tmp___47 > 4) {
#line 1441
              tmp___46 = 8;
            } else {
#line 1441
              tmp___46 = 0;
            }
#line 1441
            _amd64_rex_bits___2 = (unsigned char )tmp___46;
#line 1441
            if ((int )_amd64_rex_bits___2 != 0) {
#line 1441
              tmp___48 = jit->ip;
#line 1441
              (jit->ip) ++;
#line 1441
              *tmp___48 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
            } else {
#line 1441
              if (_amd64_width_temp___0) {
#line 1441
                tmp___49 = 4;
              } else {
#line 1441
                tmp___49 = 8;
              }
#line 1441
              if (tmp___49 == 1) {
#line 1441
                tmp___48 = jit->ip;
#line 1441
                (jit->ip) ++;
#line 1441
                *tmp___48 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
              }
            }
#line 1441
            break;
          }
#line 1441
          tmp___50 = jit->ip;
#line 1441
          (jit->ip) ++;
#line 1441
          *tmp___50 = (unsigned char)184;
#line 1441
          if (_amd64_width_temp___0) {
#line 1441
            tmp___63 = 4;
          } else {
#line 1441
            tmp___63 = 8;
          }
#line 1441
          if (tmp___63 == 8) {
#line 1441
            while (1) {
#line 1441
              imb___3.val = (size_t )((jit_value )imm);
#line 1441
              tmp___51 = jit->ip;
#line 1441
              (jit->ip) ++;
#line 1441
              *tmp___51 = imb___3.b[0];
#line 1441
              tmp___52 = jit->ip;
#line 1441
              (jit->ip) ++;
#line 1441
              *tmp___52 = imb___3.b[1];
#line 1441
              tmp___53 = jit->ip;
#line 1441
              (jit->ip) ++;
#line 1441
              *tmp___53 = imb___3.b[2];
#line 1441
              tmp___54 = jit->ip;
#line 1441
              (jit->ip) ++;
#line 1441
              *tmp___54 = imb___3.b[3];
#line 1441
              tmp___55 = jit->ip;
#line 1441
              (jit->ip) ++;
#line 1441
              *tmp___55 = imb___3.b[4];
#line 1441
              tmp___56 = jit->ip;
#line 1441
              (jit->ip) ++;
#line 1441
              *tmp___56 = imb___3.b[5];
#line 1441
              tmp___57 = jit->ip;
#line 1441
              (jit->ip) ++;
#line 1441
              *tmp___57 = imb___3.b[6];
#line 1441
              tmp___58 = jit->ip;
#line 1441
              (jit->ip) ++;
#line 1441
              *tmp___58 = imb___3.b[7];
#line 1441
              break;
            }
          } else {
#line 1441
            while (1) {
#line 1441
              imb___4.val = (int )((size_t )((jit_value )imm));
#line 1441
              tmp___59 = jit->ip;
#line 1441
              (jit->ip) ++;
#line 1441
              *tmp___59 = imb___4.b[0];
#line 1441
              tmp___60 = jit->ip;
#line 1441
              (jit->ip) ++;
#line 1441
              *tmp___60 = imb___4.b[1];
#line 1441
              tmp___61 = jit->ip;
#line 1441
              (jit->ip) ++;
#line 1441
              *tmp___61 = imb___4.b[2];
#line 1441
              tmp___62 = jit->ip;
#line 1441
              (jit->ip) ++;
#line 1441
              *tmp___62 = imb___4.b[3];
#line 1441
              break;
            }
          }
#line 1441
          break;
        }
#line 1441
        break;
      }
#line 1442
      while (1) {
#line 1442
        tmp___64 = jit->ip;
#line 1442
        (jit->ip) ++;
#line 1442
        *tmp___64 = (unsigned char)242;
#line 1442
        while (1) {
#line 1442
          if (reg > 7L) {
#line 1442
            tmp___65 = 4;
          } else {
#line 1442
            tmp___65 = 0;
          }
#line 1442
          _amd64_rex_bits___3 = (unsigned char )tmp___65;
#line 1442
          if ((int )_amd64_rex_bits___3 != 0) {
#line 1442
            tmp___66 = jit->ip;
#line 1442
            (jit->ip) ++;
#line 1442
            *tmp___66 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
          }
#line 1442
          break;
        }
#line 1442
        tmp___67 = jit->ip;
#line 1442
        (jit->ip) ++;
#line 1442
        *tmp___67 = (unsigned char)15;
#line 1442
        tmp___68 = jit->ip;
#line 1442
        (jit->ip) ++;
#line 1442
        *tmp___68 = (unsigned char)16;
#line 1442
        while (1) {
#line 1442
          while (1) {
#line 1442
            tmp___79 = jit->ip;
#line 1442
            (jit->ip) ++;
#line 1442
            *tmp___79 = (unsigned char )(((reg & 7L) & 7L) << 3);
#line 1442
            break;
          }
#line 1442
          break;
#line 1442
          while (1) {
#line 1442
            tmp___80 = jit->ip;
#line 1442
            (jit->ip) ++;
#line 1442
            *tmp___80 = (unsigned char )((long )(1 << 6) | (((reg & 7L) & 7L) << 3));
#line 1442
            break;
          }
#line 1442
          while (1) {
#line 1442
            *(jit->ip) = (unsigned char)0;
#line 1442
            (jit->ip) ++;
#line 1442
            break;
          }
#line 1442
          break;
        }
#line 1442
        break;
      }
#line 1443
      while (1) {
#line 1443
        while (1) {
#line 1443
          _amd64_rex_bits___4 = (unsigned char)0;
#line 1443
          if ((int )_amd64_rex_bits___4 != 0) {
#line 1443
            tmp___86 = jit->ip;
#line 1443
            (jit->ip) ++;
#line 1443
            *tmp___86 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
          }
#line 1443
          break;
        }
#line 1443
        tmp___87 = jit->ip;
#line 1443
        (jit->ip) ++;
#line 1443
        *tmp___87 = (unsigned char)88;
#line 1443
        break;
      }
    }
  } else {
#line 1446
    while (1) {
#line 1446
      tmp___88 = jit->ip;
#line 1446
      (jit->ip) ++;
#line 1446
      *tmp___88 = (unsigned char)242;
#line 1446
      while (1) {
#line 1446
        if (reg > 7L) {
#line 1446
          tmp___89 = 4;
        } else {
#line 1446
          tmp___89 = 0;
        }
#line 1446
        _amd64_rex_bits___5 = (unsigned char )tmp___89;
#line 1446
        if ((int )_amd64_rex_bits___5 != 0) {
#line 1446
          tmp___90 = jit->ip;
#line 1446
          (jit->ip) ++;
#line 1446
          *tmp___90 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
        }
#line 1446
        break;
      }
#line 1446
      tmp___91 = jit->ip;
#line 1446
      (jit->ip) ++;
#line 1446
      *tmp___91 = (unsigned char)15;
#line 1446
      tmp___92 = jit->ip;
#line 1446
      (jit->ip) ++;
#line 1446
      *tmp___92 = (unsigned char)16;
#line 1446
      while (1) {
#line 1446
        tmp___93 = jit->ip;
#line 1446
        (jit->ip) ++;
#line 1446
        *tmp___93 = (unsigned char )(((reg & 7L) << 3) | 4L);
#line 1446
        break;
      }
#line 1446
      while (1) {
#line 1446
        tmp___94 = jit->ip;
#line 1446
        (jit->ip) ++;
#line 1446
        *tmp___94 = (unsigned char )((4 << 3) | 5);
#line 1446
        break;
      }
#line 1446
      while (1) {
#line 1446
        imb___7.val = (int )((jit_value )imm);
#line 1446
        tmp___95 = jit->ip;
#line 1446
        (jit->ip) ++;
#line 1446
        *tmp___95 = imb___7.b[0];
#line 1446
        tmp___96 = jit->ip;
#line 1446
        (jit->ip) ++;
#line 1446
        *tmp___96 = imb___7.b[1];
#line 1446
        tmp___97 = jit->ip;
#line 1446
        (jit->ip) ++;
#line 1446
        *tmp___97 = imb___7.b[2];
#line 1446
        tmp___98 = jit->ip;
#line 1446
        (jit->ip) ++;
#line 1446
        *tmp___98 = imb___7.b[3];
#line 1446
        break;
      }
#line 1446
      break;
    }
  }
#line 1448
  return;
}
}
/* END FUNCTION-DEF sse_mov_reg_safeimm LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF check_data_references LOC=UNKNOWN */
static int check_data_references(jit_op *op , char *msg_buf ) 
{ 
  int tmp ;

  {
#line 5154
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1456U) {
#line 5154
    goto _L;
  } else
#line 5154
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1432U) {
    _L: /* CIL Label */ 
#line 5154
    tmp = jit_op_is_data_op(op->jmp_addr);
#line 5154
    if (! tmp) {
#line 5155
      append_msg(msg_buf, "invalid data reference");
#line 5156
      return (64);
    }
  }
#line 5158
  return (0);
}
}
/* END FUNCTION-DEF check_data_references LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_fldx_op LOC=UNKNOWN */
static void emit_sse_fldx_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                             jit_value a3 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  jit_value tmp___1 ;
  int tmp___2 ;
  jit_value tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  x86_imm_buf imb ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___53 ;
  int tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___81 ;
  int tmp___82 ;
  int tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;

  {
#line 1669
  if ((unsigned long long )op->arg_size == sizeof(float )) {
#line 1670
    if ((int )op->code & 0x02) {
#line 1670
      while (1) {
#line 1670
        tmp = jit->ip;
#line 1670
        (jit->ip) ++;
#line 1670
        *tmp = (unsigned char)243;
#line 1670
        while (1) {
#line 1670
          if (a1 > 7L) {
#line 1670
            tmp___0 = 4;
          } else {
#line 1670
            tmp___0 = 0;
          }
#line 1670
          if (a2 == 16L) {
#line 1670
            tmp___3 = (jit_value )0;
          } else {
#line 1670
            tmp___3 = a2;
          }
#line 1670
          if (tmp___3 > 7L) {
#line 1670
            tmp___2 = 1;
          } else {
#line 1670
            tmp___2 = 0;
          }
#line 1670
          _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___2);
#line 1670
          if ((int )_amd64_rex_bits != 0) {
#line 1670
            tmp___4 = jit->ip;
#line 1670
            (jit->ip) ++;
#line 1670
            *tmp___4 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          }
#line 1670
          break;
        }
#line 1670
        tmp___5 = jit->ip;
#line 1670
        (jit->ip) ++;
#line 1670
        *tmp___5 = (unsigned char)15;
#line 1670
        tmp___6 = jit->ip;
#line 1670
        (jit->ip) ++;
#line 1670
        *tmp___6 = (unsigned char)90;
#line 1670
        while (1) {
#line 1670
          if (a2 == 16L) {
#line 1670
            while (1) {
#line 1670
              tmp___7 = jit->ip;
#line 1670
              (jit->ip) ++;
#line 1670
              *tmp___7 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
#line 1670
              break;
            }
#line 1670
            while (1) {
#line 1670
              imb.val = (int )a3;
#line 1670
              tmp___8 = jit->ip;
#line 1670
              (jit->ip) ++;
#line 1670
              *tmp___8 = imb.b[0];
#line 1670
              tmp___9 = jit->ip;
#line 1670
              (jit->ip) ++;
#line 1670
              *tmp___9 = imb.b[1];
#line 1670
              tmp___10 = jit->ip;
#line 1670
              (jit->ip) ++;
#line 1670
              *tmp___10 = imb.b[2];
#line 1670
              tmp___11 = jit->ip;
#line 1670
              (jit->ip) ++;
#line 1670
              *tmp___11 = imb.b[3];
#line 1670
              break;
            }
          } else {
#line 1670
            while (1) {
#line 1670
              if ((a2 & 7L) == 4L) {
#line 1670
                if (a3 == 0L) {
#line 1670
                  while (1) {
#line 1670
                    tmp___12 = jit->ip;
#line 1670
                    (jit->ip) ++;
#line 1670
                    *tmp___12 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 1670
                    break;
                  }
#line 1670
                  while (1) {
#line 1670
                    tmp___13 = jit->ip;
#line 1670
                    (jit->ip) ++;
#line 1670
                    *tmp___13 = (unsigned char )((4 << 3) | 4);
#line 1670
                    break;
                  }
                } else
#line 1670
                if (a3 >= -128L) {
#line 1670
                  if (a3 <= 127L) {
#line 1670
                    while (1) {
#line 1670
                      tmp___14 = jit->ip;
#line 1670
                      (jit->ip) ++;
#line 1670
                      *tmp___14 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 1670
                      break;
                    }
#line 1670
                    while (1) {
#line 1670
                      tmp___15 = jit->ip;
#line 1670
                      (jit->ip) ++;
#line 1670
                      *tmp___15 = (unsigned char )((4 << 3) | 4);
#line 1670
                      break;
                    }
#line 1670
                    while (1) {
#line 1670
                      *(jit->ip) = (unsigned char )(a3 & 255L);
#line 1670
                      (jit->ip) ++;
#line 1670
                      break;
                    }
                  } else {
#line 1670
                    goto _L;
                  }
                } else {
                  _L: /* CIL Label */ 
#line 1670
                  while (1) {
#line 1670
                    tmp___16 = jit->ip;
#line 1670
                    (jit->ip) ++;
#line 1670
                    *tmp___16 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 1670
                    break;
                  }
#line 1670
                  while (1) {
#line 1670
                    tmp___17 = jit->ip;
#line 1670
                    (jit->ip) ++;
#line 1670
                    *tmp___17 = (unsigned char )((4 << 3) | 4);
#line 1670
                    break;
                  }
#line 1670
                  while (1) {
#line 1670
                    imb___0.val = (int )a3;
#line 1670
                    tmp___18 = jit->ip;
#line 1670
                    (jit->ip) ++;
#line 1670
                    *tmp___18 = imb___0.b[0];
#line 1670
                    tmp___19 = jit->ip;
#line 1670
                    (jit->ip) ++;
#line 1670
                    *tmp___19 = imb___0.b[1];
#line 1670
                    tmp___20 = jit->ip;
#line 1670
                    (jit->ip) ++;
#line 1670
                    *tmp___20 = imb___0.b[2];
#line 1670
                    tmp___21 = jit->ip;
#line 1670
                    (jit->ip) ++;
#line 1670
                    *tmp___21 = imb___0.b[3];
#line 1670
                    break;
                  }
                }
#line 1670
                break;
              }
#line 1670
              if (a3 == 0L) {
#line 1670
                if ((a2 & 7L) != 5L) {
#line 1670
                  while (1) {
#line 1670
                    tmp___22 = jit->ip;
#line 1670
                    (jit->ip) ++;
#line 1670
                    *tmp___22 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 1670
                    break;
                  }
#line 1670
                  break;
                }
              }
#line 1670
              if (a3 >= -128L) {
#line 1670
                if (a3 <= 127L) {
#line 1670
                  while (1) {
#line 1670
                    tmp___23 = jit->ip;
#line 1670
                    (jit->ip) ++;
#line 1670
                    *tmp___23 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 1670
                    break;
                  }
#line 1670
                  while (1) {
#line 1670
                    *(jit->ip) = (unsigned char )(a3 & 255L);
#line 1670
                    (jit->ip) ++;
#line 1670
                    break;
                  }
                } else {
#line 1670
                  goto _L___0;
                }
              } else {
                _L___0: /* CIL Label */ 
#line 1670
                while (1) {
#line 1670
                  tmp___24 = jit->ip;
#line 1670
                  (jit->ip) ++;
#line 1670
                  *tmp___24 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 1670
                  break;
                }
#line 1670
                while (1) {
#line 1670
                  imb___1.val = (int )a3;
#line 1670
                  tmp___25 = jit->ip;
#line 1670
                  (jit->ip) ++;
#line 1670
                  *tmp___25 = imb___1.b[0];
#line 1670
                  tmp___26 = jit->ip;
#line 1670
                  (jit->ip) ++;
#line 1670
                  *tmp___26 = imb___1.b[1];
#line 1670
                  tmp___27 = jit->ip;
#line 1670
                  (jit->ip) ++;
#line 1670
                  *tmp___27 = imb___1.b[2];
#line 1670
                  tmp___28 = jit->ip;
#line 1670
                  (jit->ip) ++;
#line 1670
                  *tmp___28 = imb___1.b[3];
#line 1670
                  break;
                }
              }
#line 1670
              break;
            }
          }
#line 1670
          break;
        }
#line 1670
        break;
      }
    } else {
#line 1671
      while (1) {
#line 1671
        tmp___29 = jit->ip;
#line 1671
        (jit->ip) ++;
#line 1671
        *tmp___29 = (unsigned char)243;
#line 1671
        while (1) {
#line 1671
          if (a1 > 7L) {
#line 1671
            tmp___30 = 4;
          } else {
#line 1671
            tmp___30 = 0;
          }
#line 1671
          if (a3 > 7L) {
#line 1671
            tmp___31 = 2;
          } else {
#line 1671
            tmp___31 = 0;
          }
#line 1671
          if (a2 > 7L) {
#line 1671
            tmp___32 = 1;
          } else {
#line 1671
            tmp___32 = 0;
          }
#line 1671
          _amd64_rex_bits___0 = (unsigned char )(((8 | tmp___30) | tmp___31) | tmp___32);
#line 1671
          if ((int )_amd64_rex_bits___0 != 0) {
#line 1671
            tmp___33 = jit->ip;
#line 1671
            (jit->ip) ++;
#line 1671
            *tmp___33 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
          }
#line 1671
          break;
        }
#line 1671
        tmp___34 = jit->ip;
#line 1671
        (jit->ip) ++;
#line 1671
        *tmp___34 = (unsigned char)15;
#line 1671
        tmp___35 = jit->ip;
#line 1671
        (jit->ip) ++;
#line 1671
        *tmp___35 = (unsigned char)90;
#line 1671
        while (1) {
#line 1671
          if (a2 == -1L) {
#line 1671
            while (1) {
#line 1671
              tmp___36 = jit->ip;
#line 1671
              (jit->ip) ++;
#line 1671
              *tmp___36 = (unsigned char )(((a1 & 7L) << 3) | 4L);
#line 1671
              break;
            }
#line 1671
            while (1) {
#line 1671
              tmp___37 = jit->ip;
#line 1671
              (jit->ip) ++;
#line 1671
              *tmp___37 = (unsigned char )(((a3 & 7L) << 3) | 5L);
#line 1671
              break;
            }
#line 1671
            while (1) {
#line 1671
              imb___2.val = 0;
#line 1671
              tmp___38 = jit->ip;
#line 1671
              (jit->ip) ++;
#line 1671
              *tmp___38 = imb___2.b[0];
#line 1671
              tmp___39 = jit->ip;
#line 1671
              (jit->ip) ++;
#line 1671
              *tmp___39 = imb___2.b[1];
#line 1671
              tmp___40 = jit->ip;
#line 1671
              (jit->ip) ++;
#line 1671
              *tmp___40 = imb___2.b[2];
#line 1671
              tmp___41 = jit->ip;
#line 1671
              (jit->ip) ++;
#line 1671
              *tmp___41 = imb___2.b[3];
#line 1671
              break;
            }
          } else
#line 1671
          if (a2 != 5L) {
#line 1671
            while (1) {
#line 1671
              tmp___42 = jit->ip;
#line 1671
              (jit->ip) ++;
#line 1671
              *tmp___42 = (unsigned char )(((a1 & 7L) << 3) | 4L);
#line 1671
              break;
            }
#line 1671
            while (1) {
#line 1671
              tmp___43 = jit->ip;
#line 1671
              (jit->ip) ++;
#line 1671
              *tmp___43 = (unsigned char )((((a3 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 1671
              break;
            }
          } else {
#line 1671
            while (1) {
#line 1671
              tmp___44 = jit->ip;
#line 1671
              (jit->ip) ++;
#line 1671
              *tmp___44 = (unsigned char )(((long )(1 << 6) | ((a1 & 7L) << 3)) | 4L);
#line 1671
              break;
            }
#line 1671
            while (1) {
#line 1671
              tmp___45 = jit->ip;
#line 1671
              (jit->ip) ++;
#line 1671
              *tmp___45 = (unsigned char )((((a3 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 1671
              break;
            }
#line 1671
            while (1) {
#line 1671
              *(jit->ip) = (unsigned char)0;
#line 1671
              (jit->ip) ++;
#line 1671
              break;
            }
          }
#line 1671
          break;
        }
#line 1671
        break;
      }
    }
  } else
#line 1673
  if ((int )op->code & 0x02) {
#line 1673
    while (1) {
#line 1673
      tmp___52 = jit->ip;
#line 1673
      (jit->ip) ++;
#line 1673
      *tmp___52 = (unsigned char)102;
#line 1673
      while (1) {
#line 1673
        if (a1 > 7L) {
#line 1673
          tmp___53 = 4;
        } else {
#line 1673
          tmp___53 = 0;
        }
#line 1673
        if (a2 > 7L) {
#line 1673
          tmp___54 = 1;
        } else {
#line 1673
          tmp___54 = 0;
        }
#line 1673
        _amd64_rex_bits___1 = (unsigned char )(tmp___53 | tmp___54);
#line 1673
        if ((int )_amd64_rex_bits___1 != 0) {
#line 1673
          tmp___55 = jit->ip;
#line 1673
          (jit->ip) ++;
#line 1673
          *tmp___55 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
        }
#line 1673
        break;
      }
#line 1673
      tmp___56 = jit->ip;
#line 1673
      (jit->ip) ++;
#line 1673
      *tmp___56 = (unsigned char)15;
#line 1673
      tmp___57 = jit->ip;
#line 1673
      (jit->ip) ++;
#line 1673
      *tmp___57 = (unsigned char)18;
#line 1673
      while (1) {
#line 1673
        if (a2 == 16L) {
#line 1673
          while (1) {
#line 1673
            tmp___58 = jit->ip;
#line 1673
            (jit->ip) ++;
#line 1673
            *tmp___58 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
#line 1673
            break;
          }
#line 1673
          while (1) {
#line 1673
            imb___4.val = (int )a3;
#line 1673
            tmp___59 = jit->ip;
#line 1673
            (jit->ip) ++;
#line 1673
            *tmp___59 = imb___4.b[0];
#line 1673
            tmp___60 = jit->ip;
#line 1673
            (jit->ip) ++;
#line 1673
            *tmp___60 = imb___4.b[1];
#line 1673
            tmp___61 = jit->ip;
#line 1673
            (jit->ip) ++;
#line 1673
            *tmp___61 = imb___4.b[2];
#line 1673
            tmp___62 = jit->ip;
#line 1673
            (jit->ip) ++;
#line 1673
            *tmp___62 = imb___4.b[3];
#line 1673
            break;
          }
        } else {
#line 1673
          while (1) {
#line 1673
            if ((a2 & 7L) == 4L) {
#line 1673
              if (a3 == 0L) {
#line 1673
                while (1) {
#line 1673
                  tmp___63 = jit->ip;
#line 1673
                  (jit->ip) ++;
#line 1673
                  *tmp___63 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 1673
                  break;
                }
#line 1673
                while (1) {
#line 1673
                  tmp___64 = jit->ip;
#line 1673
                  (jit->ip) ++;
#line 1673
                  *tmp___64 = (unsigned char )((4 << 3) | 4);
#line 1673
                  break;
                }
              } else
#line 1673
              if (a3 >= -128L) {
#line 1673
                if (a3 <= 127L) {
#line 1673
                  while (1) {
#line 1673
                    tmp___65 = jit->ip;
#line 1673
                    (jit->ip) ++;
#line 1673
                    *tmp___65 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 1673
                    break;
                  }
#line 1673
                  while (1) {
#line 1673
                    tmp___66 = jit->ip;
#line 1673
                    (jit->ip) ++;
#line 1673
                    *tmp___66 = (unsigned char )((4 << 3) | 4);
#line 1673
                    break;
                  }
#line 1673
                  while (1) {
#line 1673
                    *(jit->ip) = (unsigned char )(a3 & 255L);
#line 1673
                    (jit->ip) ++;
#line 1673
                    break;
                  }
                } else {
#line 1673
                  goto _L___1;
                }
              } else {
                _L___1: /* CIL Label */ 
#line 1673
                while (1) {
#line 1673
                  tmp___67 = jit->ip;
#line 1673
                  (jit->ip) ++;
#line 1673
                  *tmp___67 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 1673
                  break;
                }
#line 1673
                while (1) {
#line 1673
                  tmp___68 = jit->ip;
#line 1673
                  (jit->ip) ++;
#line 1673
                  *tmp___68 = (unsigned char )((4 << 3) | 4);
#line 1673
                  break;
                }
#line 1673
                while (1) {
#line 1673
                  imb___5.val = (int )a3;
#line 1673
                  tmp___69 = jit->ip;
#line 1673
                  (jit->ip) ++;
#line 1673
                  *tmp___69 = imb___5.b[0];
#line 1673
                  tmp___70 = jit->ip;
#line 1673
                  (jit->ip) ++;
#line 1673
                  *tmp___70 = imb___5.b[1];
#line 1673
                  tmp___71 = jit->ip;
#line 1673
                  (jit->ip) ++;
#line 1673
                  *tmp___71 = imb___5.b[2];
#line 1673
                  tmp___72 = jit->ip;
#line 1673
                  (jit->ip) ++;
#line 1673
                  *tmp___72 = imb___5.b[3];
#line 1673
                  break;
                }
              }
#line 1673
              break;
            }
#line 1673
            if (a3 == 0L) {
#line 1673
              if ((a2 & 7L) != 5L) {
#line 1673
                while (1) {
#line 1673
                  tmp___73 = jit->ip;
#line 1673
                  (jit->ip) ++;
#line 1673
                  *tmp___73 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 1673
                  break;
                }
#line 1673
                break;
              }
            }
#line 1673
            if (a3 >= -128L) {
#line 1673
              if (a3 <= 127L) {
#line 1673
                while (1) {
#line 1673
                  tmp___74 = jit->ip;
#line 1673
                  (jit->ip) ++;
#line 1673
                  *tmp___74 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 1673
                  break;
                }
#line 1673
                while (1) {
#line 1673
                  *(jit->ip) = (unsigned char )(a3 & 255L);
#line 1673
                  (jit->ip) ++;
#line 1673
                  break;
                }
              } else {
#line 1673
                goto _L___2;
              }
            } else {
              _L___2: /* CIL Label */ 
#line 1673
              while (1) {
#line 1673
                tmp___75 = jit->ip;
#line 1673
                (jit->ip) ++;
#line 1673
                *tmp___75 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 1673
                break;
              }
#line 1673
              while (1) {
#line 1673
                imb___6.val = (int )a3;
#line 1673
                tmp___76 = jit->ip;
#line 1673
                (jit->ip) ++;
#line 1673
                *tmp___76 = imb___6.b[0];
#line 1673
                tmp___77 = jit->ip;
#line 1673
                (jit->ip) ++;
#line 1673
                *tmp___77 = imb___6.b[1];
#line 1673
                tmp___78 = jit->ip;
#line 1673
                (jit->ip) ++;
#line 1673
                *tmp___78 = imb___6.b[2];
#line 1673
                tmp___79 = jit->ip;
#line 1673
                (jit->ip) ++;
#line 1673
                *tmp___79 = imb___6.b[3];
#line 1673
                break;
              }
            }
#line 1673
            break;
          }
        }
#line 1673
        break;
      }
#line 1673
      break;
    }
  } else {
#line 1674
    while (1) {
#line 1674
      tmp___80 = jit->ip;
#line 1674
      (jit->ip) ++;
#line 1674
      *tmp___80 = (unsigned char)102;
#line 1674
      while (1) {
#line 1674
        if (a1 > 7L) {
#line 1674
          tmp___81 = 4;
        } else {
#line 1674
          tmp___81 = 0;
        }
#line 1674
        if (a3 > 7L) {
#line 1674
          tmp___82 = 2;
        } else {
#line 1674
          tmp___82 = 0;
        }
#line 1674
        if (a2 > 7L) {
#line 1674
          tmp___83 = 1;
        } else {
#line 1674
          tmp___83 = 0;
        }
#line 1674
        _amd64_rex_bits___2 = (unsigned char )(((8 | tmp___81) | tmp___82) | tmp___83);
#line 1674
        if ((int )_amd64_rex_bits___2 != 0) {
#line 1674
          tmp___84 = jit->ip;
#line 1674
          (jit->ip) ++;
#line 1674
          *tmp___84 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
        }
#line 1674
        break;
      }
#line 1674
      tmp___85 = jit->ip;
#line 1674
      (jit->ip) ++;
#line 1674
      *tmp___85 = (unsigned char)15;
#line 1674
      tmp___86 = jit->ip;
#line 1674
      (jit->ip) ++;
#line 1674
      *tmp___86 = (unsigned char)18;
#line 1674
      while (1) {
#line 1674
        if (a2 == -1L) {
#line 1674
          while (1) {
#line 1674
            tmp___87 = jit->ip;
#line 1674
            (jit->ip) ++;
#line 1674
            *tmp___87 = (unsigned char )(((a1 & 7L) << 3) | 4L);
#line 1674
            break;
          }
#line 1674
          while (1) {
#line 1674
            tmp___88 = jit->ip;
#line 1674
            (jit->ip) ++;
#line 1674
            *tmp___88 = (unsigned char )(((a3 & 7L) << 3) | 5L);
#line 1674
            break;
          }
#line 1674
          while (1) {
#line 1674
            imb___7.val = 0;
#line 1674
            tmp___89 = jit->ip;
#line 1674
            (jit->ip) ++;
#line 1674
            *tmp___89 = imb___7.b[0];
#line 1674
            tmp___90 = jit->ip;
#line 1674
            (jit->ip) ++;
#line 1674
            *tmp___90 = imb___7.b[1];
#line 1674
            tmp___91 = jit->ip;
#line 1674
            (jit->ip) ++;
#line 1674
            *tmp___91 = imb___7.b[2];
#line 1674
            tmp___92 = jit->ip;
#line 1674
            (jit->ip) ++;
#line 1674
            *tmp___92 = imb___7.b[3];
#line 1674
            break;
          }
        } else
#line 1674
        if (a2 != 5L) {
#line 1674
          while (1) {
#line 1674
            tmp___93 = jit->ip;
#line 1674
            (jit->ip) ++;
#line 1674
            *tmp___93 = (unsigned char )(((a1 & 7L) << 3) | 4L);
#line 1674
            break;
          }
#line 1674
          while (1) {
#line 1674
            tmp___94 = jit->ip;
#line 1674
            (jit->ip) ++;
#line 1674
            *tmp___94 = (unsigned char )((((a3 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 1674
            break;
          }
        } else {
#line 1674
          while (1) {
#line 1674
            tmp___95 = jit->ip;
#line 1674
            (jit->ip) ++;
#line 1674
            *tmp___95 = (unsigned char )(((long )(1 << 6) | ((a1 & 7L) << 3)) | 4L);
#line 1674
            break;
          }
#line 1674
          while (1) {
#line 1674
            tmp___96 = jit->ip;
#line 1674
            (jit->ip) ++;
#line 1674
            *tmp___96 = (unsigned char )((((a3 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 1674
            break;
          }
#line 1674
          while (1) {
#line 1674
            *(jit->ip) = (unsigned char)0;
#line 1674
            (jit->ip) ++;
#line 1674
            break;
          }
        }
#line 1674
        break;
      }
#line 1674
      break;
    }
  }
#line 1676
  return;
}
}
/* END FUNCTION-DEF emit_sse_fldx_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_regs_active LOC=UNKNOWN */
void jit_regs_active(jit_op *op , jit_value *dest ) 
{ 


  {
#line 6286
  jit_set_to_array(op->live_out, dest);
#line 6287
  return;
}
}
/* END FUNCTION-DEF jit_regs_active LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF delete_min LOC=UNKNOWN */
static jit_tree *delete_min(jit_tree *h ) 
{ 
  int tmp ;
  int tmp___0 ;
  jit_tree *tmp___1 ;

  {
#line 471
  if ((unsigned long )h->left == (unsigned long )((void *)0)) {
#line 472
    free((void *)h);
#line 473
    return ((jit_tree *)((void *)0));
  }
#line 476
  tmp = is_red(h->left);
#line 476
  if (! tmp) {
#line 476
    tmp___0 = is_red((h->left)->left);
#line 476
    if (! tmp___0) {
#line 477
      h = move_red_left(h);
    }
  }
#line 479
  h->left = delete_min(h->left);
#line 481
  tmp___1 = fixup(h);
#line 481
  return (tmp___1);
}
}
/* END FUNCTION-DEF delete_min LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF mark_livecode LOC=UNKNOWN */
__inline static void mark_livecode(jit_op *op ) 
{ 


  {
#line 3974
  while (op) {
#line 3975
    if (op->in_use) {
#line 3975
      return;
    }
#line 3976
    op->in_use = (unsigned char)1;
#line 3977
    if (op->jmp_addr) {
#line 3977
      mark_livecode(op->jmp_addr);
    }
#line 3978
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 424U) {
#line 3978
      return;
    }
#line 3979
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1320U) {
#line 3979
      return;
    }
#line 3980
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 384U) {
#line 3980
      return;
    }
#line 3981
    op = op->next;
  }
#line 3983
  return;
}
}
/* END FUNCTION-DEF mark_livecode LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_flw_analysis LOC=UNKNOWN */
__inline static void jit_flw_analysis(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  jit_op *first ;
  jit_op *second ;

  {
#line 3953
  jit_flw_initialize(jit);
#line 3954
  tmp = jit_op_first(jit->ops);
#line 3954
  op = tmp;
#line 3956
  while (op) {
#line 3957
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 128U) {
#line 3958
      first = op;
#line 3959
      while (1) {
#line 3960
        if ((unsigned long )op->next == (unsigned long )((void *)0)) {
#line 3961
          second = op;
#line 3962
          analyze_function(jit, first, second);
#line 3963
          break;
        } else
#line 3960
        if ((unsigned int )((jit_opcode )((int )(op->next)->code & 0xfff8)) == 128U) {
#line 3961
          second = op;
#line 3962
          analyze_function(jit, first, second);
#line 3963
          break;
        }
#line 3965
        op = op->next;
      }
    }
#line 3968
    op = op->next;
  }
#line 3970
  return;
}
}
/* END FUNCTION-DEF jit_flw_analysis LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isupper LOC=UNKNOWN */
__inline int isupper(int _c ) 
{ 
  int tmp ;

  {
#line 275 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  tmp = __istype(_c, 32768UL);
#line 275
  return (tmp);
}
}
/* END FUNCTION-DEF isupper LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_fppush_arg LOC=UNKNOWN */
__inline static void emit_fppush_arg(struct jit *jit , struct jit_out_arg *arg ) 
{ 
  int sreg ;
  int pos ;
  int tmp ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  x86_imm_buf imb ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  int tmp___62 ;
  double b ;
  jit_unsigned_value tmp___63 ;
  unsigned long long tmp___64 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  amd64_imm_buf imb___6 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char _amd64_rex_bits___6 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  x86_imm_buf imb___8 ;
  int tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  int tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  x86_imm_buf imb___9 ;
  int tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  int tmp___103 ;
  int tmp___104 ;
  int tmp___105 ;
  unsigned char *tmp___106 ;
  int tmp___107 ;
  unsigned char *tmp___108 ;
  int tmp___109 ;
  unsigned char *tmp___110 ;
  x86_imm_buf imb___10 ;
  int tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  int tmp___116 ;
  int tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___119 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  unsigned char *tmp___122 ;
  unsigned char *tmp___123 ;
  int tmp___124 ;
  unsigned char _amd64_rex_bits___8 ;
  unsigned char *tmp___125 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char _amd64_rex_bits___9 ;
  unsigned char *tmp___128 ;
  unsigned char *tmp___129 ;
  x86_imm_buf imb___11 ;
  unsigned char *tmp___130 ;
  unsigned char *tmp___131 ;
  unsigned char *tmp___132 ;
  unsigned char *tmp___133 ;
  unsigned char _amd64_rex_bits___10 ;
  unsigned char *tmp___134 ;
  unsigned char *tmp___135 ;
  unsigned char *tmp___136 ;
  x86_imm_buf imb___12 ;
  unsigned char *tmp___137 ;
  unsigned char *tmp___138 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  unsigned char *tmp___141 ;
  unsigned char _amd64_rex_bits___11 ;
  unsigned char *tmp___142 ;
  unsigned char *tmp___143 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  x86_imm_buf imb___13 ;
  unsigned char *tmp___146 ;
  unsigned char *tmp___147 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;
  unsigned char *tmp___150 ;
  unsigned char *tmp___151 ;
  unsigned char *tmp___152 ;
  unsigned char *tmp___153 ;
  unsigned char *tmp___154 ;
  unsigned char *tmp___155 ;
  x86_imm_buf imb___14 ;
  unsigned char *tmp___156 ;
  unsigned char *tmp___157 ;
  unsigned char *tmp___158 ;
  unsigned char *tmp___159 ;
  unsigned char *tmp___160 ;
  unsigned char *tmp___161 ;
  unsigned char *tmp___162 ;
  x86_imm_buf imb___15 ;
  unsigned char *tmp___163 ;
  unsigned char *tmp___164 ;
  unsigned char *tmp___165 ;
  unsigned char *tmp___166 ;
  float b___0 ;
  jit_unsigned_value tmp___167 ;
  unsigned long long tmp___168 ;
  unsigned char _amd64_rex_bits___12 ;
  unsigned char *tmp___169 ;
  unsigned char *tmp___170 ;
  amd64_imm_buf imb___16 ;
  unsigned char *tmp___171 ;
  unsigned char *tmp___172 ;
  unsigned char *tmp___173 ;
  unsigned char *tmp___174 ;
  unsigned char *tmp___175 ;
  unsigned char *tmp___176 ;
  unsigned char *tmp___177 ;
  unsigned char *tmp___178 ;
  x86_imm_buf imb___17 ;
  unsigned char *tmp___179 ;
  unsigned char *tmp___180 ;
  unsigned char *tmp___181 ;
  unsigned char *tmp___182 ;
  unsigned char _amd64_rex_bits___13 ;
  unsigned char *tmp___183 ;
  unsigned char *tmp___184 ;

  {
#line 2425
  if ((unsigned long long )arg->size == sizeof(double )) {
#line 2426
    if (arg->isreg) {
#line 2427
      tmp___62 = is_spilled(arg->value.generic, jit->prepared_args.op, & sreg);
#line 2427
      if (tmp___62) {
#line 2428
        tmp = stack_reg_pos(jit, (int )arg->value.generic);
#line 2428
        pos = tmp;
#line 2429
        while (1) {
#line 2429
          while (1) {
#line 2429
            _amd64_rex_bits = (unsigned char)0;
#line 2429
            if ((int )_amd64_rex_bits != 0) {
#line 2429
              tmp___0 = jit->ip;
#line 2429
              (jit->ip) ++;
#line 2429
              *tmp___0 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
            }
#line 2429
            break;
          }
#line 2429
          tmp___1 = jit->ip;
#line 2429
          (jit->ip) ++;
#line 2429
          *tmp___1 = (unsigned char)255;
#line 2429
          while (1) {
#line 2429
            if (0) {
#line 2429
              if (pos == 0) {
#line 2429
                while (1) {
#line 2429
                  tmp___2 = jit->ip;
#line 2429
                  (jit->ip) ++;
#line 2429
                  *tmp___2 = (unsigned char )((6 << 3) | 4);
#line 2429
                  break;
                }
#line 2429
                while (1) {
#line 2429
                  tmp___3 = jit->ip;
#line 2429
                  (jit->ip) ++;
#line 2429
                  *tmp___3 = (unsigned char )((4 << 3) | 4);
#line 2429
                  break;
                }
              } else
#line 2429
              if ((jit_value )pos >= -128L) {
#line 2429
                if ((jit_value )pos <= 127L) {
#line 2429
                  while (1) {
#line 2429
                    tmp___4 = jit->ip;
#line 2429
                    (jit->ip) ++;
#line 2429
                    *tmp___4 = (unsigned char )(((1 << 6) | (6 << 3)) | 4);
#line 2429
                    break;
                  }
#line 2429
                  while (1) {
#line 2429
                    tmp___5 = jit->ip;
#line 2429
                    (jit->ip) ++;
#line 2429
                    *tmp___5 = (unsigned char )((4 << 3) | 4);
#line 2429
                    break;
                  }
#line 2429
                  while (1) {
#line 2429
                    *(jit->ip) = (unsigned char )(pos & 0xff);
#line 2429
                    (jit->ip) ++;
#line 2429
                    break;
                  }
                } else {
#line 2429
                  goto _L;
                }
              } else {
                _L: /* CIL Label */ 
#line 2429
                while (1) {
#line 2429
                  tmp___6 = jit->ip;
#line 2429
                  (jit->ip) ++;
#line 2429
                  *tmp___6 = (unsigned char )(((2 << 6) | (6 << 3)) | 4);
#line 2429
                  break;
                }
#line 2429
                while (1) {
#line 2429
                  tmp___7 = jit->ip;
#line 2429
                  (jit->ip) ++;
#line 2429
                  *tmp___7 = (unsigned char )((4 << 3) | 4);
#line 2429
                  break;
                }
#line 2429
                while (1) {
#line 2429
                  imb.val = pos;
#line 2429
                  tmp___8 = jit->ip;
#line 2429
                  (jit->ip) ++;
#line 2429
                  *tmp___8 = imb.b[0];
#line 2429
                  tmp___9 = jit->ip;
#line 2429
                  (jit->ip) ++;
#line 2429
                  *tmp___9 = imb.b[1];
#line 2429
                  tmp___10 = jit->ip;
#line 2429
                  (jit->ip) ++;
#line 2429
                  *tmp___10 = imb.b[2];
#line 2429
                  tmp___11 = jit->ip;
#line 2429
                  (jit->ip) ++;
#line 2429
                  *tmp___11 = imb.b[3];
#line 2429
                  break;
                }
              }
#line 2429
              break;
            }
#line 2429
            if (pos == 0) {

            }
#line 2429
            if ((jit_value )pos >= -128L) {
#line 2429
              if ((jit_value )pos <= 127L) {
#line 2429
                while (1) {
#line 2429
                  tmp___13 = jit->ip;
#line 2429
                  (jit->ip) ++;
#line 2429
                  *tmp___13 = (unsigned char )(((1 << 6) | (6 << 3)) | 5);
#line 2429
                  break;
                }
#line 2429
                while (1) {
#line 2429
                  *(jit->ip) = (unsigned char )(pos & 0xff);
#line 2429
                  (jit->ip) ++;
#line 2429
                  break;
                }
              } else {
#line 2429
                goto _L___0;
              }
            } else {
              _L___0: /* CIL Label */ 
#line 2429
              while (1) {
#line 2429
                tmp___14 = jit->ip;
#line 2429
                (jit->ip) ++;
#line 2429
                *tmp___14 = (unsigned char )(((2 << 6) | (6 << 3)) | 5);
#line 2429
                break;
              }
#line 2429
              while (1) {
#line 2429
                imb___0.val = pos;
#line 2429
                tmp___15 = jit->ip;
#line 2429
                (jit->ip) ++;
#line 2429
                *tmp___15 = imb___0.b[0];
#line 2429
                tmp___16 = jit->ip;
#line 2429
                (jit->ip) ++;
#line 2429
                *tmp___16 = imb___0.b[1];
#line 2429
                tmp___17 = jit->ip;
#line 2429
                (jit->ip) ++;
#line 2429
                *tmp___17 = imb___0.b[2];
#line 2429
                tmp___18 = jit->ip;
#line 2429
                (jit->ip) ++;
#line 2429
                *tmp___18 = imb___0.b[3];
#line 2429
                break;
              }
            }
#line 2429
            break;
          }
#line 2429
          break;
        }
      } else {
#line 2432
        while (1) {
#line 2432
          while (1) {
#line 2432
            _amd64_rex_bits___0 = (unsigned char)8;
#line 2432
            if ((int )_amd64_rex_bits___0 != 0) {
#line 2432
              tmp___19 = jit->ip;
#line 2432
              (jit->ip) ++;
#line 2432
              *tmp___19 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
            }
#line 2432
            break;
          }
#line 2432
          tmp___20 = jit->ip;
#line 2432
          (jit->ip) ++;
#line 2432
          *tmp___20 = (unsigned char)131;
#line 2432
          while (1) {
#line 2432
            while (1) {
#line 2432
              tmp___21 = jit->ip;
#line 2432
              (jit->ip) ++;
#line 2432
              *tmp___21 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
#line 2432
              break;
            }
#line 2432
            break;
          }
#line 2432
          while (1) {
#line 2432
            *(jit->ip) = (unsigned char)8;
#line 2432
            (jit->ip) ++;
#line 2432
            break;
          }
#line 2432
          break;
        }
#line 2433
        while (1) {
#line 2433
          tmp___35 = jit->ip;
#line 2433
          (jit->ip) ++;
#line 2433
          *tmp___35 = (unsigned char)102;
#line 2433
          while (1) {
#line 2433
            if (sreg > 7) {
#line 2433
              tmp___36 = 4;
            } else {
#line 2433
              tmp___36 = 0;
            }
#line 2433
            _amd64_rex_bits___3 = (unsigned char )tmp___36;
#line 2433
            if ((int )_amd64_rex_bits___3 != 0) {
#line 2433
              tmp___37 = jit->ip;
#line 2433
              (jit->ip) ++;
#line 2433
              *tmp___37 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
            }
#line 2433
            break;
          }
#line 2433
          tmp___38 = jit->ip;
#line 2433
          (jit->ip) ++;
#line 2433
          *tmp___38 = (unsigned char)15;
#line 2433
          tmp___39 = jit->ip;
#line 2433
          (jit->ip) ++;
#line 2433
          *tmp___39 = (unsigned char)19;
#line 2433
          while (1) {
#line 2433
            while (1) {
#line 2433
              while (1) {
#line 2433
                tmp___45 = jit->ip;
#line 2433
                (jit->ip) ++;
#line 2433
                *tmp___45 = (unsigned char )((((sreg & 0x7) & 0x07) << 3) | 4);
#line 2433
                break;
              }
#line 2433
              while (1) {
#line 2433
                tmp___46 = jit->ip;
#line 2433
                (jit->ip) ++;
#line 2433
                *tmp___46 = (unsigned char )((4 << 3) | 4);
#line 2433
                break;
              }
#line 2433
              break;
#line 2433
              while (1) {
#line 2433
                tmp___55 = jit->ip;
#line 2433
                (jit->ip) ++;
#line 2433
                *tmp___55 = (unsigned char )((((sreg & 0x7) & 0x07) << 3) | 4);
#line 2433
                break;
              }
#line 2433
              break;
#line 2433
              while (1) {
#line 2433
                tmp___56 = jit->ip;
#line 2433
                (jit->ip) ++;
#line 2433
                *tmp___56 = (unsigned char )(((1 << 6) | (((sreg & 0x7) & 0x07) << 3)) | 4);
#line 2433
                break;
              }
#line 2433
              while (1) {
#line 2433
                *(jit->ip) = (unsigned char)0;
#line 2433
                (jit->ip) ++;
#line 2433
                break;
              }
#line 2433
              break;
            }
#line 2433
            break;
          }
#line 2433
          break;
        }
      }
    } else {
#line 2436
      b = arg->value.fp;
#line 2438
      tmp___64 = __builtin_object_size((void *)(& tmp___63), 0);
#line 2438
      __builtin___memcpy_chk((void *)(& tmp___63), (void const   *)(& b), sizeof(double ),
                             tmp___64);
#line 2439
      while (1) {
#line 2439
        while (1) {
#line 2439
          _amd64_rex_bits___4 = (unsigned char)8;
#line 2439
          if ((int )_amd64_rex_bits___4 != 0) {
#line 2439
            tmp___65 = jit->ip;
#line 2439
            (jit->ip) ++;
#line 2439
            *tmp___65 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
          }
#line 2439
          break;
        }
#line 2439
        tmp___66 = jit->ip;
#line 2439
        (jit->ip) ++;
#line 2439
        *tmp___66 = (unsigned char)184;
#line 2439
        while (1) {
#line 2439
          imb___6.val = tmp___63;
#line 2439
          tmp___67 = jit->ip;
#line 2439
          (jit->ip) ++;
#line 2439
          *tmp___67 = imb___6.b[0];
#line 2439
          tmp___68 = jit->ip;
#line 2439
          (jit->ip) ++;
#line 2439
          *tmp___68 = imb___6.b[1];
#line 2439
          tmp___69 = jit->ip;
#line 2439
          (jit->ip) ++;
#line 2439
          *tmp___69 = imb___6.b[2];
#line 2439
          tmp___70 = jit->ip;
#line 2439
          (jit->ip) ++;
#line 2439
          *tmp___70 = imb___6.b[3];
#line 2439
          tmp___71 = jit->ip;
#line 2439
          (jit->ip) ++;
#line 2439
          *tmp___71 = imb___6.b[4];
#line 2439
          tmp___72 = jit->ip;
#line 2439
          (jit->ip) ++;
#line 2439
          *tmp___72 = imb___6.b[5];
#line 2439
          tmp___73 = jit->ip;
#line 2439
          (jit->ip) ++;
#line 2439
          *tmp___73 = imb___6.b[6];
#line 2439
          tmp___74 = jit->ip;
#line 2439
          (jit->ip) ++;
#line 2439
          *tmp___74 = imb___6.b[7];
#line 2439
          break;
        }
#line 2439
        break;
      }
#line 2440
      while (1) {
#line 2440
        while (1) {
#line 2440
          _amd64_rex_bits___5 = (unsigned char)0;
#line 2440
          if ((int )_amd64_rex_bits___5 != 0) {
#line 2440
            tmp___79 = jit->ip;
#line 2440
            (jit->ip) ++;
#line 2440
            *tmp___79 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
          }
#line 2440
          break;
        }
#line 2440
        tmp___80 = jit->ip;
#line 2440
        (jit->ip) ++;
#line 2440
        *tmp___80 = (unsigned char)80;
#line 2440
        break;
      }
    }
  } else
#line 2444
  if (arg->isreg) {
#line 2446
    tmp___124 = is_spilled(arg->value.generic, jit->prepared_args.op, & sreg);
#line 2446
    if (tmp___124) {
#line 2447
      while (1) {
#line 2447
        tmp___81 = jit->ip;
#line 2447
        (jit->ip) ++;
#line 2447
        *tmp___81 = (unsigned char)242;
#line 2447
        while (1) {
#line 2447
          _amd64_rex_bits___6 = (unsigned char)0;
#line 2447
          if ((int )_amd64_rex_bits___6 != 0) {
#line 2447
            tmp___82 = jit->ip;
#line 2447
            (jit->ip) ++;
#line 2447
            *tmp___82 = (unsigned char )(0x40 | (int )_amd64_rex_bits___6);
          }
#line 2447
          break;
        }
#line 2447
        tmp___83 = jit->ip;
#line 2447
        (jit->ip) ++;
#line 2447
        *tmp___83 = (unsigned char)15;
#line 2447
        tmp___84 = jit->ip;
#line 2447
        (jit->ip) ++;
#line 2447
        *tmp___84 = (unsigned char)90;
#line 2447
        while (1) {
#line 2447
          while (1) {
#line 2447
            if (0) {
#line 2447
              tmp___105 = stack_reg_pos(jit, (int )arg->value.generic);
#line 2447
              if (tmp___105 == 0) {
#line 2447
                while (1) {
#line 2447
                  tmp___91 = jit->ip;
#line 2447
                  (jit->ip) ++;
#line 2447
                  *tmp___91 = (unsigned char)4;
#line 2447
                  break;
                }
#line 2447
                while (1) {
#line 2447
                  tmp___92 = jit->ip;
#line 2447
                  (jit->ip) ++;
#line 2447
                  *tmp___92 = (unsigned char )((4 << 3) | 4);
#line 2447
                  break;
                }
              } else {
#line 2447
                tmp___103 = stack_reg_pos(jit, (int )arg->value.generic);
#line 2447
                if ((jit_value )tmp___103 >= -128L) {
#line 2447
                  tmp___104 = stack_reg_pos(jit, (int )arg->value.generic);
#line 2447
                  if ((jit_value )tmp___104 <= 127L) {
#line 2447
                    while (1) {
#line 2447
                      tmp___93 = jit->ip;
#line 2447
                      (jit->ip) ++;
#line 2447
                      *tmp___93 = (unsigned char )((1 << 6) | 4);
#line 2447
                      break;
                    }
#line 2447
                    while (1) {
#line 2447
                      tmp___94 = jit->ip;
#line 2447
                      (jit->ip) ++;
#line 2447
                      *tmp___94 = (unsigned char )((4 << 3) | 4);
#line 2447
                      break;
                    }
#line 2447
                    while (1) {
#line 2447
                      tmp___95 = stack_reg_pos(jit, (int )arg->value.generic);
#line 2447
                      *(jit->ip) = (unsigned char )(tmp___95 & 0xff);
#line 2447
                      (jit->ip) ++;
#line 2447
                      break;
                    }
                  } else {
#line 2447
                    goto _L___1;
                  }
                } else {
                  _L___1: /* CIL Label */ 
#line 2447
                  while (1) {
#line 2447
                    tmp___96 = jit->ip;
#line 2447
                    (jit->ip) ++;
#line 2447
                    *tmp___96 = (unsigned char )((2 << 6) | 4);
#line 2447
                    break;
                  }
#line 2447
                  while (1) {
#line 2447
                    tmp___97 = jit->ip;
#line 2447
                    (jit->ip) ++;
#line 2447
                    *tmp___97 = (unsigned char )((4 << 3) | 4);
#line 2447
                    break;
                  }
#line 2447
                  while (1) {
#line 2447
                    tmp___98 = stack_reg_pos(jit, (int )arg->value.generic);
#line 2447
                    imb___9.val = tmp___98;
#line 2447
                    tmp___99 = jit->ip;
#line 2447
                    (jit->ip) ++;
#line 2447
                    *tmp___99 = imb___9.b[0];
#line 2447
                    tmp___100 = jit->ip;
#line 2447
                    (jit->ip) ++;
#line 2447
                    *tmp___100 = imb___9.b[1];
#line 2447
                    tmp___101 = jit->ip;
#line 2447
                    (jit->ip) ++;
#line 2447
                    *tmp___101 = imb___9.b[2];
#line 2447
                    tmp___102 = jit->ip;
#line 2447
                    (jit->ip) ++;
#line 2447
                    *tmp___102 = imb___9.b[3];
#line 2447
                    break;
                  }
                }
              }
#line 2447
              break;
            }
#line 2447
            tmp___107 = stack_reg_pos(jit, (int )arg->value.generic);
#line 2447
            if (tmp___107 == 0) {

            }
#line 2447
            tmp___116 = stack_reg_pos(jit, (int )arg->value.generic);
#line 2447
            if ((jit_value )tmp___116 >= -128L) {
#line 2447
              tmp___117 = stack_reg_pos(jit, (int )arg->value.generic);
#line 2447
              if ((jit_value )tmp___117 <= 127L) {
#line 2447
                while (1) {
#line 2447
                  tmp___108 = jit->ip;
#line 2447
                  (jit->ip) ++;
#line 2447
                  *tmp___108 = (unsigned char )((1 << 6) | 5);
#line 2447
                  break;
                }
#line 2447
                while (1) {
#line 2447
                  tmp___109 = stack_reg_pos(jit, (int )arg->value.generic);
#line 2447
                  *(jit->ip) = (unsigned char )(tmp___109 & 0xff);
#line 2447
                  (jit->ip) ++;
#line 2447
                  break;
                }
              } else {
#line 2447
                goto _L___2;
              }
            } else {
              _L___2: /* CIL Label */ 
#line 2447
              while (1) {
#line 2447
                tmp___110 = jit->ip;
#line 2447
                (jit->ip) ++;
#line 2447
                *tmp___110 = (unsigned char )((2 << 6) | 5);
#line 2447
                break;
              }
#line 2447
              while (1) {
#line 2447
                tmp___111 = stack_reg_pos(jit, (int )arg->value.generic);
#line 2447
                imb___10.val = tmp___111;
#line 2447
                tmp___112 = jit->ip;
#line 2447
                (jit->ip) ++;
#line 2447
                *tmp___112 = imb___10.b[0];
#line 2447
                tmp___113 = jit->ip;
#line 2447
                (jit->ip) ++;
#line 2447
                *tmp___113 = imb___10.b[1];
#line 2447
                tmp___114 = jit->ip;
#line 2447
                (jit->ip) ++;
#line 2447
                *tmp___114 = imb___10.b[2];
#line 2447
                tmp___115 = jit->ip;
#line 2447
                (jit->ip) ++;
#line 2447
                *tmp___115 = imb___10.b[3];
#line 2447
                break;
              }
            }
#line 2447
            break;
          }
#line 2447
          break;
        }
#line 2447
        break;
      }
    } else {
#line 2449
      while (1) {
#line 2449
        tmp___118 = jit->ip;
#line 2449
        (jit->ip) ++;
#line 2449
        *tmp___118 = (unsigned char)242;
#line 2449
        while (1) {
#line 2449
          if (sreg > 7) {
#line 2449
            tmp___119 = 1;
          } else {
#line 2449
            tmp___119 = 0;
          }
#line 2449
          _amd64_rex_bits___7 = (unsigned char )tmp___119;
#line 2449
          if ((int )_amd64_rex_bits___7 != 0) {
#line 2449
            tmp___120 = jit->ip;
#line 2449
            (jit->ip) ++;
#line 2449
            *tmp___120 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
          }
#line 2449
          break;
        }
#line 2449
        tmp___121 = jit->ip;
#line 2449
        (jit->ip) ++;
#line 2449
        *tmp___121 = (unsigned char)15;
#line 2449
        tmp___122 = jit->ip;
#line 2449
        (jit->ip) ++;
#line 2449
        *tmp___122 = (unsigned char)90;
#line 2449
        while (1) {
#line 2449
          while (1) {
#line 2449
            tmp___123 = jit->ip;
#line 2449
            (jit->ip) ++;
#line 2449
            *tmp___123 = (unsigned char )((3 << 6) | (sreg & 0x07));
#line 2449
            break;
          }
#line 2449
          break;
        }
#line 2449
        break;
      }
    }
#line 2451
    while (1) {
#line 2451
      while (1) {
#line 2451
        _amd64_rex_bits___8 = (unsigned char)8;
#line 2451
        if ((int )_amd64_rex_bits___8 != 0) {
#line 2451
          tmp___125 = jit->ip;
#line 2451
          (jit->ip) ++;
#line 2451
          *tmp___125 = (unsigned char )(0x40 | (int )_amd64_rex_bits___8);
        }
#line 2451
        break;
      }
#line 2451
      tmp___126 = jit->ip;
#line 2451
      (jit->ip) ++;
#line 2451
      *tmp___126 = (unsigned char)131;
#line 2451
      while (1) {
#line 2451
        while (1) {
#line 2451
          tmp___127 = jit->ip;
#line 2451
          (jit->ip) ++;
#line 2451
          *tmp___127 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
#line 2451
          break;
        }
#line 2451
        break;
      }
#line 2451
      while (1) {
#line 2451
        *(jit->ip) = (unsigned char)8;
#line 2451
        (jit->ip) ++;
#line 2451
        break;
      }
#line 2451
      break;
    }
#line 2452
    while (1) {
#line 2452
      tmp___141 = jit->ip;
#line 2452
      (jit->ip) ++;
#line 2452
      *tmp___141 = (unsigned char)102;
#line 2452
      while (1) {
#line 2452
        _amd64_rex_bits___11 = (unsigned char)0;
#line 2452
        if ((int )_amd64_rex_bits___11 != 0) {
#line 2452
          tmp___142 = jit->ip;
#line 2452
          (jit->ip) ++;
#line 2452
          *tmp___142 = (unsigned char )(0x40 | (int )_amd64_rex_bits___11);
        }
#line 2452
        break;
      }
#line 2452
      tmp___143 = jit->ip;
#line 2452
      (jit->ip) ++;
#line 2452
      *tmp___143 = (unsigned char)15;
#line 2452
      tmp___144 = jit->ip;
#line 2452
      (jit->ip) ++;
#line 2452
      *tmp___144 = (unsigned char)19;
#line 2452
      while (1) {
#line 2452
        while (1) {
#line 2452
          while (1) {
#line 2452
            tmp___150 = jit->ip;
#line 2452
            (jit->ip) ++;
#line 2452
            *tmp___150 = (unsigned char)4;
#line 2452
            break;
          }
#line 2452
          while (1) {
#line 2452
            tmp___151 = jit->ip;
#line 2452
            (jit->ip) ++;
#line 2452
            *tmp___151 = (unsigned char )((4 << 3) | 4);
#line 2452
            break;
          }
#line 2452
          break;
#line 2452
          while (1) {
#line 2452
            tmp___160 = jit->ip;
#line 2452
            (jit->ip) ++;
#line 2452
            *tmp___160 = (unsigned char)4;
#line 2452
            break;
          }
#line 2452
          break;
#line 2452
          while (1) {
#line 2452
            tmp___161 = jit->ip;
#line 2452
            (jit->ip) ++;
#line 2452
            *tmp___161 = (unsigned char )((1 << 6) | 4);
#line 2452
            break;
          }
#line 2452
          while (1) {
#line 2452
            *(jit->ip) = (unsigned char)0;
#line 2452
            (jit->ip) ++;
#line 2452
            break;
          }
#line 2452
          break;
        }
#line 2452
        break;
      }
#line 2452
      break;
    }
  } else {
#line 2454 "./jitter-Darwin-X86-64.c"
    b___0 = (float )arg->value.fp;
#line 2455
    tmp___167 = (jit_unsigned_value )0;
#line 2456
    tmp___168 = __builtin_object_size((void *)(& tmp___167), 0);
#line 2456
    __builtin___memcpy_chk((void *)(& tmp___167), (void const   *)(& b___0), sizeof(float ),
                           tmp___168);
#line 2458
    while (1) {
#line 2458
      while (1) {
#line 2458
        _amd64_rex_bits___12 = (unsigned char)8;
#line 2458
        if ((int )_amd64_rex_bits___12 != 0) {
#line 2458
          tmp___169 = jit->ip;
#line 2458
          (jit->ip) ++;
#line 2458
          *tmp___169 = (unsigned char )(0x40 | (int )_amd64_rex_bits___12);
        }
#line 2458
        break;
      }
#line 2458
      tmp___170 = jit->ip;
#line 2458
      (jit->ip) ++;
#line 2458
      *tmp___170 = (unsigned char)184;
#line 2458
      while (1) {
#line 2458
        imb___16.val = tmp___167;
#line 2458
        tmp___171 = jit->ip;
#line 2458
        (jit->ip) ++;
#line 2458
        *tmp___171 = imb___16.b[0];
#line 2458
        tmp___172 = jit->ip;
#line 2458
        (jit->ip) ++;
#line 2458
        *tmp___172 = imb___16.b[1];
#line 2458
        tmp___173 = jit->ip;
#line 2458
        (jit->ip) ++;
#line 2458
        *tmp___173 = imb___16.b[2];
#line 2458
        tmp___174 = jit->ip;
#line 2458
        (jit->ip) ++;
#line 2458
        *tmp___174 = imb___16.b[3];
#line 2458
        tmp___175 = jit->ip;
#line 2458
        (jit->ip) ++;
#line 2458
        *tmp___175 = imb___16.b[4];
#line 2458
        tmp___176 = jit->ip;
#line 2458
        (jit->ip) ++;
#line 2458
        *tmp___176 = imb___16.b[5];
#line 2458
        tmp___177 = jit->ip;
#line 2458
        (jit->ip) ++;
#line 2458
        *tmp___177 = imb___16.b[6];
#line 2458
        tmp___178 = jit->ip;
#line 2458
        (jit->ip) ++;
#line 2458
        *tmp___178 = imb___16.b[7];
#line 2458
        break;
      }
#line 2458
      break;
    }
#line 2459
    while (1) {
#line 2459
      while (1) {
#line 2459
        _amd64_rex_bits___13 = (unsigned char)0;
#line 2459
        if ((int )_amd64_rex_bits___13 != 0) {
#line 2459
          tmp___183 = jit->ip;
#line 2459
          (jit->ip) ++;
#line 2459
          *tmp___183 = (unsigned char )(0x40 | (int )_amd64_rex_bits___13);
        }
#line 2459
        break;
      }
#line 2459
      tmp___184 = jit->ip;
#line 2459
      (jit->ip) ++;
#line 2459
      *tmp___184 = (unsigned char)80;
#line 2459
      break;
    }
  }
#line 2462
  return;
}
}
/* END FUNCTION-DEF emit_fppush_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF check_op_without_effect LOC=UNKNOWN */
static int check_op_without_effect(jit_op *op , char *msg_buf ) 
{ 
  jit_opcode code ;
  int i ;
  int tmp ;

  {
#line 5004
  code = (jit_opcode )((int )op->code & 0xfff8);
#line 5005
  if ((unsigned int )code == 520U) {
#line 5006
    return (0);
  } else
#line 5005
  if ((unsigned int )code == 528U) {
#line 5006
    return (0);
  } else
#line 5005
  if ((unsigned int )code == 544U) {
#line 5006
    return (0);
  } else
#line 5005
  if ((unsigned int )code == 552U) {
#line 5006
    return (0);
  } else
#line 5005
  if ((unsigned int )code == 960U) {
#line 5006
    return (0);
  } else
#line 5005
  if ((unsigned int )code == 968U) {
#line 5006
    return (0);
  } else
#line 5005
  if ((unsigned int )code == 976U) {
#line 5006
    return (0);
  } else
#line 5005
  if ((unsigned int )code == 984U) {
#line 5006
    return (0);
  }
#line 5008
  i = 0;
#line 5008
  while (i < 3) {
#line 5009
    if ((((int )op->spec >> ((i + 1) - 1) * 2) & 0x03) == 0x03) {
#line 5009
      tmp = jit_set_get(op->live_out, (int )op->arg[i]);
#line 5009
      if (! tmp) {
#line 5010
        append_msg(msg_buf, "operation without effect");
#line 5011
        return (2);
      }
    }
#line 5008
    i ++;
  }
#line 5014
  return (0);
}
}
/* END FUNCTION-DEF check_op_without_effect LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jump_adjustment LOC=UNKNOWN */
__inline static void jump_adjustment(struct jit *jit , jit_op *op ) 
{ 
  jit_rmap *cur_regmap ;
  jit_rmap *tgt_regmap ;

  {
#line 5646
  if ((int )op->code == 386) {
#line 5647
    cur_regmap = op->regmap;
#line 5648
    tgt_regmap = (op->jmp_addr)->regmap;
#line 5650
    rmap_sync(op, cur_regmap, tgt_regmap, 1);
#line 5651
    rmap_sync(op, tgt_regmap, cur_regmap, 2);
  }
#line 5653
  return;
}
}
/* END FUNCTION-DEF jump_adjustment LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF assign_regs_for_args LOC=UNKNOWN */
static void assign_regs_for_args(struct jit_reg_allocator *al , jit_op *op ) 
{ 
  struct jit_func_info *info ;
  int assoc_gp_regs ;
  int assoc_fp_regs ;
  int i ;
  int isfp_arg ;

  {
#line 5246
  info = (struct jit_func_info *)op->arg[1];
#line 5248
  assoc_gp_regs = 0;
#line 5249
  assoc_fp_regs = 0;
#line 5250
  i = 0;
#line 5250
  while (i < info->general_arg_cnt + info->float_arg_cnt) {
#line 5251
    isfp_arg = (unsigned int )(info->args + i)->type == 2U;
#line 5252
    if (! isfp_arg) {
#line 5252
      if (assoc_gp_regs < al->gp_arg_reg_cnt) {
#line 5253
        rmap_assoc(op->regmap, (jit_value )((3 << 1) | ((i & 0xfffffff) << 4)), *(al->gp_arg_regs + assoc_gp_regs));
#line 5254
        assoc_gp_regs ++;
      }
    }
#line 5256
    if (isfp_arg) {
#line 5256
      if (assoc_fp_regs < al->fp_arg_reg_cnt) {
#line 5257
        rmap_assoc(op->regmap, (jit_value )((1 | (3 << 1)) | ((i & 0xfffffff) << 4)),
                   *(al->fp_arg_regs + assoc_fp_regs));
#line 5258
        assoc_fp_regs ++;
      }
    }
#line 5250
    i ++;
  }
#line 5261
  return;
}
}
/* END FUNCTION-DEF assign_regs_for_args LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_get_op_name LOC=UNKNOWN */
char *jit_get_op_name(struct jit_op *op ) 
{ 


  {
#line 4188
  switch ((unsigned int )((jit_opcode )((int )op->code & 0xfff8))) {
  case 256U: 
#line 4189
  return ("mov");
  case 264U: 
#line 4190
  return ("ld");
  case 272U: 
#line 4191
  return ("ldx");
  case 280U: 
#line 4192
  return ("st");
  case 288U: 
#line 4193
  return ("stx");
  case 296U: 
#line 4194
  return ("memcpy");
  case 304U: 
#line 4195
  return ("memset");
  case 384U: 
#line 4197
  return ("jmp");
  case 144U: 
#line 4198
  return (".patch");
  case 392U: 
#line 4199
  return ("prepare");
  case 448U: 
#line 4200
  return ("prepare_optional");
  case 400U: 
#line 4201
  return ("putarg");
  case 416U: 
#line 4202
  return ("call");
  case 424U: 
#line 4203
  return ("ret");
  case 128U: 
#line 4204
  return ("prolog");
  case 432U: 
#line 4205
  return ("getarg");
  case 440U: 
#line 4206
  return ("retval");
  case 160U: 
#line 4207
  return ("alloca");
  case 152U: 
#line 4208
  return ("declare_arg");
  case 512U: 
#line 4210
  return ("add");
  case 520U: 
#line 4211
  return ("addc");
  case 528U: 
#line 4212
  return ("addx");
  case 536U: 
#line 4213
  return ("sub");
  case 544U: 
#line 4214
  return ("subc");
  case 552U: 
#line 4215
  return ("subx");
  case 560U: 
#line 4216
  return ("rsb");
  case 568U: 
#line 4217
  return ("neg");
  case 576U: 
#line 4218
  return ("mul");
  case 584U: 
#line 4219
  return ("hmul");
  case 592U: 
#line 4220
  return ("div");
  case 600U: 
#line 4221
  return ("mod");
  case 640U: 
#line 4223
  return ("or");
  case 648U: 
#line 4224
  return ("xor");
  case 656U: 
#line 4225
  return ("and");
  case 664U: 
#line 4226
  return ("lsh");
  case 672U: 
#line 4227
  return ("rsh");
  case 680U: 
#line 4228
  return ("not");
  case 768U: 
#line 4230
  return ("lt");
  case 776U: 
#line 4231
  return ("le");
  case 784U: 
#line 4232
  return ("gt");
  case 792U: 
#line 4233
  return ("ge");
  case 800U: 
#line 4234
  return ("eq");
  case 808U: 
#line 4235
  return ("ne");
  case 896U: 
#line 4237
  return ("blt");
  case 904U: 
#line 4238
  return ("ble");
  case 912U: 
#line 4239
  return ("bgt");
  case 920U: 
#line 4240
  return ("bge");
  case 928U: 
#line 4241
  return ("beq");
  case 936U: 
#line 4242
  return ("bne");
  case 944U: 
#line 4243
  return ("bms");
  case 952U: 
#line 4244
  return ("bmc");
  case 960U: 
#line 4245
  return ("boadd");
  case 968U: 
#line 4246
  return ("bosub");
  case 976U: 
#line 4247
  return ("bnoadd");
  case 984U: 
#line 4248
  return ("bnosub");
  case 16U: 
#line 4250
  return (".ureg");
  case 24U: 
#line 4251
  return (".lreg");
  case 8U: 
#line 4252
  return (".code");
  case 136U: 
#line 4253
  return (".label");
  case 32U: 
#line 4254
  return (".syncreg");
  case 40U: 
#line 4255
  return (".renamereg");
  case 1920U: 
#line 4256
  return ("msg");
  case 1928U: 
#line 4257
  return (".comment");
  case 0U: 
#line 4258
  return ("nop");
  case 1440U: 
#line 4259
  return (".align");
  case 1408U: 
#line 4260
  return (".byte");
  case 1416U: 
#line 4261
  return (".bytes");
  case 1424U: 
#line 4262
  return (".ref_code");
  case 1432U: 
#line 4263
  return (".ref_data");
  case 1448U: 
#line 4264
  return ("ref_code");
  case 1456U: 
#line 4265
  return ("ref_data");
  case 48U: 
#line 4266
  return (".full_spill");
  case 4112U: 
#line 4267
  return (".trace");
  case 4096U: 
#line 4268
  return ("force_spill");
  case 4104U: 
#line 4269
  return ("force_assoc");
  case 4120U: 
#line 4270
  return ("mark");
  case 4128U: 
#line 4271
  return ("touch");
  case 1536U: 
#line 4273
  return ("transfer");
  case 1544U: 
#line 4274
  return ("transfer_cpy");
  case 1560U: 
#line 4275
  return ("transfer_and");
  case 1568U: 
#line 4276
  return ("transfer_or");
  case 1552U: 
#line 4277
  return ("transfer_xor");
  case 1576U: 
#line 4278
  return ("transfer_add");
  case 1592U: 
#line 4279
  return ("transfer_sub");
  case 1024U: 
#line 4281
  return ("fmov");
  case 1032U: 
#line 4282
  return ("fadd");
  case 1040U: 
#line 4283
  return ("fsub");
  case 1048U: 
#line 4284
  return ("frsb");
  case 1056U: 
#line 4285
  return ("fmul");
  case 1064U: 
#line 4286
  return ("fdiv");
  case 1072U: 
#line 4287
  return ("fneg");
  case 1088U: 
#line 4288
  return ("fretval");
  case 408U: 
#line 4289
  return ("fputarg");
  case 1096U: 
#line 4291
  return ("ext");
  case 1104U: 
#line 4292
  return ("round");
  case 1112U: 
#line 4293
  return ("trunc");
  case 1120U: 
#line 4294
  return ("floor");
  case 1128U: 
#line 4295
  return ("ceil");
  case 1152U: 
#line 4297
  return ("fblt");
  case 1160U: 
#line 4298
  return ("fble");
  case 1168U: 
#line 4299
  return ("fbgt");
  case 1176U: 
#line 4300
  return ("fbge");
  case 1184U: 
#line 4301
  return ("fbeq");
  case 1192U: 
#line 4302
  return ("fbne");
  case 1280U: 
#line 4304
  return ("fld");
  case 1288U: 
#line 4305
  return ("fldx");
  case 1296U: 
#line 4306
  return ("fst");
  case 1304U: 
#line 4307
  return ("fstx");
  case 1320U: 
#line 4309
  return ("fret");
  default: 
#line 4310
  return ("(unknown)");
  }
}
}
/* END FUNCTION-DEF jit_get_op_name LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_op_bytes LOC=UNKNOWN */
__inline static void print_op_bytes(FILE *f , struct jit *jit , jit_op *op ) 
{ 
  int i ;

  {
#line 4769
  i = 0;
#line 4769
  while ((size_t )i < op->code_length) {
#line 4770
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)" %02x",
            (int )*(jit->buf + (op->code_offset + (size_t )i)));
#line 4769
    i ++;
  }
#line 4771
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"\n.nl\n");
#line 4772
  return;
}
}
/* END FUNCTION-DEF print_op_bytes LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_is_associated LOC=UNKNOWN */
static jit_hw_reg *rmap_is_associated(jit_rmap *rmap , int reg_id , int fp , jit_value *virt_reg ) 
{ 
  jit_hw_reg *tmp ;

  {
#line 1901
  tmp = rmap_is_associated_aux(rmap->map, reg_id, fp, virt_reg);
#line 1901
  return (tmp);
}
}
/* END FUNCTION-DEF rmap_is_associated LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF main LOC=UNKNOWN */
int main(int argc , char **argv , char **_TIG_IZ_HQIz_formal_envp ) 
{ 
  int init_elems1_inline_2_inline_3 ;

  {
  {
  {
  {
  {
  jit_debugging_disasm.indent_template = "    ";
  jit_debugging_disasm.reg_template = "r%i";
  jit_debugging_disasm.freg_template = "fr%i";
  jit_debugging_disasm.arg_template = "arg%i";
  jit_debugging_disasm.farg_template = "farg%i";
  jit_debugging_disasm.reg_fp_template = "fp";
  jit_debugging_disasm.reg_out_template = "out";
  jit_debugging_disasm.reg_imm_template = "imm";
  jit_debugging_disasm.reg_fimm_template = "fimm";
  jit_debugging_disasm.reg_unknown_template = "(unknown reg.)";
  jit_debugging_disasm.label_template = "<label>";
  jit_debugging_disasm.label_forward_template = "<label>";
  jit_debugging_disasm.generic_addr_template = "<addr: 0x%lx>";
  jit_debugging_disasm.generic_value_template = "0x%lx";
  goto jit_debugging_disasm__INITINLINE_jit_debugging_disasm__INIT;
  }
  jit_debugging_disasm__INITINLINE_jit_debugging_disasm__INIT: /* CIL Label */ ;
  }
  {
  {
  jit_disasm_compilable.indent_template = "    ";
  jit_disasm_compilable.reg_template = "R(%i)";
  jit_disasm_compilable.freg_template = "FR(%i)";
  jit_disasm_compilable.arg_template = "arg(%i)";
  jit_disasm_compilable.farg_template = "farg(%i)";
  jit_disasm_compilable.reg_fp_template = "R_FP";
  jit_disasm_compilable.reg_out_template = "R_OUT";
  jit_disasm_compilable.reg_imm_template = "R_IMM";
  jit_disasm_compilable.reg_fimm_template = "FR_IMM";
  jit_disasm_compilable.reg_unknown_template = "(unknown reg.)";
  jit_disasm_compilable.label_template = "label_%03i";
  jit_disasm_compilable.label_forward_template = "/* label_%03i */ JIT_FORWARD";
  jit_disasm_compilable.generic_addr_template = "<addr: 0x%zx>";
  jit_disasm_compilable.generic_value_template = "%zi";
  goto jit_disasm_compilable__INITINLINE_jit_disasm_compilable__INIT;
  }
  jit_disasm_compilable__INITINLINE_jit_disasm_compilable__INIT: /* CIL Label */ ;
  }
  {
  {
  jit_disasm_general.indent_template = "    ";
  jit_disasm_general.reg_template = "r%i";
  jit_disasm_general.freg_template = "fr%i";
  jit_disasm_general.arg_template = "arg%i";
  jit_disasm_general.farg_template = "farg%i";
  jit_disasm_general.reg_fp_template = "fp";
  jit_disasm_general.reg_out_template = "out";
  jit_disasm_general.reg_imm_template = "imm";
  jit_disasm_general.reg_fimm_template = "fimm";
  jit_disasm_general.reg_unknown_template = "(unknown reg.)";
  jit_disasm_general.label_template = "L%i";
  jit_disasm_general.label_forward_template = "L%i";
  jit_disasm_general.generic_addr_template = "<addr: 0x%zx>";
  jit_disasm_general.generic_value_template = "0x%zx";
  goto jit_disasm_general__INITINLINE_jit_disasm_general__INIT;
  }
  jit_disasm_general__INITINLINE_jit_disasm_general__INIT: /* CIL Label */ ;
  }
  {
  {
  x05 = (double const   )0.5;
  goto x05__INITINLINE_x05__INIT;
  }
  x05__INITINLINE_x05__INIT: /* CIL Label */ ;
  }
  {
  {
  x0 = (double const   )0.0;
  goto x0__INITINLINE_x0__INIT;
  }
  x0__INITINLINE_x0__INIT: /* CIL Label */ ;
  }
  {
  {
  init_elems1_inline_2_inline_3 = 0;
  while (init_elems1_inline_2_inline_3 < 32) {
    bufx[init_elems1_inline_2_inline_3] = (unsigned char)0;
    init_elems1_inline_2_inline_3 ++;
  }
  goto bufx__INITINLINE_bufx__INIT;
  }
  bufx__INITINLINE_bufx__INIT: /* CIL Label */ ;
  }
  {
  {
  x86_cc_signed_map[0] = (unsigned char const   )0x74;
  x86_cc_signed_map[1] = (unsigned char const   )0x75;
  x86_cc_signed_map[2] = (unsigned char const   )0x7c;
  x86_cc_signed_map[3] = (unsigned char const   )0x7e;
  x86_cc_signed_map[4] = (unsigned char const   )0x7f;
  x86_cc_signed_map[5] = (unsigned char const   )0x7d;
  x86_cc_signed_map[6] = (unsigned char const   )0x78;
  x86_cc_signed_map[7] = (unsigned char const   )0x79;
  x86_cc_signed_map[8] = (unsigned char const   )0x7a;
  x86_cc_signed_map[9] = (unsigned char const   )0x7b;
  x86_cc_signed_map[10] = (unsigned char const   )0x70;
  x86_cc_signed_map[11] = (unsigned char const   )0x71;
  goto x86_cc_signed_map__INITINLINE_x86_cc_signed_map__INIT;
  }
  x86_cc_signed_map__INITINLINE_x86_cc_signed_map__INIT: /* CIL Label */ ;
  }
  {
  {
  x86_cc_unsigned_map[0] = (unsigned char const   )0x74;
  x86_cc_unsigned_map[1] = (unsigned char const   )0x75;
  x86_cc_unsigned_map[2] = (unsigned char const   )0x72;
  x86_cc_unsigned_map[3] = (unsigned char const   )0x76;
  x86_cc_unsigned_map[4] = (unsigned char const   )0x77;
  x86_cc_unsigned_map[5] = (unsigned char const   )0x73;
  x86_cc_unsigned_map[6] = (unsigned char const   )0x78;
  x86_cc_unsigned_map[7] = (unsigned char const   )0x79;
  x86_cc_unsigned_map[8] = (unsigned char const   )0x7a;
  x86_cc_unsigned_map[9] = (unsigned char const   )0x7b;
  x86_cc_unsigned_map[10] = (unsigned char const   )0x70;
  x86_cc_unsigned_map[11] = (unsigned char const   )0x71;
  goto x86_cc_unsigned_map__INITINLINE_x86_cc_unsigned_map__INIT;
  }
  x86_cc_unsigned_map__INITINLINE_x86_cc_unsigned_map__INIT: /* CIL Label */ ;
  }
  {
  {
  _TIG_IZ_HQIz_envp = (char **)0;
  goto _TIG_IZ_HQIz_envp__INITINLINE__TIG_IZ_HQIz_envp__INIT;
  }
  _TIG_IZ_HQIz_envp__INITINLINE__TIG_IZ_HQIz_envp__INIT: /* CIL Label */ ;
  }
  {
  {
  _TIG_IZ_HQIz_argv = (char **)0;
  goto _TIG_IZ_HQIz_argv__INITINLINE__TIG_IZ_HQIz_argv__INIT;
  }
  _TIG_IZ_HQIz_argv__INITINLINE__TIG_IZ_HQIz_argv__INIT: /* CIL Label */ ;
  }
  {
  {
  _TIG_IZ_HQIz_argc = 0;
  goto _TIG_IZ_HQIz_argc__INITINLINE__TIG_IZ_HQIz_argc__INIT;
  }
  _TIG_IZ_HQIz_argc__INITINLINE__TIG_IZ_HQIz_argc__INIT: /* CIL Label */ ;
  }
  goto megaInitINLINE_megaInit;
  }
  megaInitINLINE_megaInit: /* CIL Label */ ;
  }
  while (1) {
    __asm__ volatile ("##_ANNOTATION_INITIALREGION_-TIG-IZ-HQIz--0":);
    _TIG_IZ_HQIz_argc = argc;
    _TIG_IZ_HQIz_argv = argv;
    _TIG_IZ_HQIz_envp = _TIG_IZ_HQIz_formal_envp;
    break;
  }
#line 45 "test-jit.c"
  init_tigress();
#line 46
  fac(10);
#line 47
  fib(10);
#line 48
  return (0);
}
}
/* END FUNCTION-DEF main LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_push_reg LOC=UNKNOWN */
static int emit_push_reg(struct jit *jit , jit_hw_reg *r , int stack_offset ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  long tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  x86_imm_buf imb ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;

  {
#line 2736
  if (! r->fp) {
#line 2737
    while (1) {
#line 2737
      if ((int )sizeof(void *) == 2) {
#line 2737
        tmp = jit->ip;
#line 2737
        (jit->ip) ++;
#line 2737
        *tmp = (unsigned char)102;
      }
#line 2737
      while (1) {
#line 2737
        if ((int )sizeof(void *) > 4) {
#line 2737
          tmp___0 = 8;
        } else {
#line 2737
          tmp___0 = 0;
        }
#line 2737
        if (r->id > 7) {
#line 2737
          tmp___1 = 4;
        } else {
#line 2737
          tmp___1 = 0;
        }
#line 2737
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
#line 2737
        if ((int )_amd64_rex_bits != 0) {
#line 2737
          tmp___2 = jit->ip;
#line 2737
          (jit->ip) ++;
#line 2737
          *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
        } else
#line 2737
        if ((int )sizeof(void *) == 1) {
#line 2737
          tmp___2 = jit->ip;
#line 2737
          (jit->ip) ++;
#line 2737
          *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
        }
#line 2737
        break;
      }
#line 2737
      switch ((int )sizeof(void *)) {
      case 1: 
#line 2737
      tmp___3 = jit->ip;
#line 2737
      (jit->ip) ++;
#line 2737
      *tmp___3 = (unsigned char)136;
#line 2737
      break;
      case 8: 
      case 4: 
      case 2: 
#line 2737
      tmp___4 = jit->ip;
#line 2737
      (jit->ip) ++;
#line 2737
      *tmp___4 = (unsigned char)137;
#line 2737
      break;
      default: 
#line 2737
      tmp___5 = __builtin_expect(1L, 0L);
#line 2737
      if (tmp___5) {
#line 2737
        __assert_rtn((char const   *)"emit_push_reg", (char const   *)"./jitter-Darwin-X86-64.c",
                     2737, (char const   *)"0");
      }
      }
#line 2737
      while (1) {
#line 2737
        if (stack_offset == 0) {
#line 2737
          while (1) {
#line 2737
            tmp___6 = jit->ip;
#line 2737
            (jit->ip) ++;
#line 2737
            *tmp___6 = (unsigned char )((((r->id & 0x7) & 0x07) << 3) | 4);
#line 2737
            break;
          }
#line 2737
          while (1) {
#line 2737
            tmp___7 = jit->ip;
#line 2737
            (jit->ip) ++;
#line 2737
            *tmp___7 = (unsigned char )((4 << 3) | 4);
#line 2737
            break;
          }
        } else
#line 2737
        if ((jit_value )stack_offset >= -128L) {
#line 2737
          if ((jit_value )stack_offset <= 127L) {
#line 2737
            while (1) {
#line 2737
              tmp___8 = jit->ip;
#line 2737
              (jit->ip) ++;
#line 2737
              *tmp___8 = (unsigned char )(((1 << 6) | (((r->id & 0x7) & 0x07) << 3)) | 4);
#line 2737
              break;
            }
#line 2737
            while (1) {
#line 2737
              tmp___9 = jit->ip;
#line 2737
              (jit->ip) ++;
#line 2737
              *tmp___9 = (unsigned char )((4 << 3) | 4);
#line 2737
              break;
            }
#line 2737
            while (1) {
#line 2737
              *(jit->ip) = (unsigned char )(stack_offset & 0xff);
#line 2737
              (jit->ip) ++;
#line 2737
              break;
            }
          } else {
#line 2737
            goto _L;
          }
        } else {
          _L: /* CIL Label */ 
#line 2737
          while (1) {
#line 2737
            tmp___10 = jit->ip;
#line 2737
            (jit->ip) ++;
#line 2737
            *tmp___10 = (unsigned char )(((2 << 6) | (((r->id & 0x7) & 0x07) << 3)) | 4);
#line 2737
            break;
          }
#line 2737
          while (1) {
#line 2737
            tmp___11 = jit->ip;
#line 2737
            (jit->ip) ++;
#line 2737
            *tmp___11 = (unsigned char )((4 << 3) | 4);
#line 2737
            break;
          }
#line 2737
          while (1) {
#line 2737
            imb.val = stack_offset;
#line 2737
            tmp___12 = jit->ip;
#line 2737
            (jit->ip) ++;
#line 2737
            *tmp___12 = imb.b[0];
#line 2737
            tmp___13 = jit->ip;
#line 2737
            (jit->ip) ++;
#line 2737
            *tmp___13 = imb.b[1];
#line 2737
            tmp___14 = jit->ip;
#line 2737
            (jit->ip) ++;
#line 2737
            *tmp___14 = imb.b[2];
#line 2737
            tmp___15 = jit->ip;
#line 2737
            (jit->ip) ++;
#line 2737
            *tmp___15 = imb.b[3];
#line 2737
            break;
          }
        }
#line 2737
        break;
#line 2737
        if (stack_offset == 0) {
#line 2737
          while (1) {
#line 2737
            tmp___16 = jit->ip;
#line 2737
            (jit->ip) ++;
#line 2737
            *tmp___16 = (unsigned char )((((r->id & 0x7) & 0x07) << 3) | 4);
#line 2737
            break;
          }
#line 2737
          break;
        }
#line 2737
        if ((jit_value )stack_offset >= -128L) {
#line 2737
          if ((jit_value )stack_offset <= 127L) {
#line 2737
            while (1) {
#line 2737
              tmp___17 = jit->ip;
#line 2737
              (jit->ip) ++;
#line 2737
              *tmp___17 = (unsigned char )(((1 << 6) | (((r->id & 0x7) & 0x07) << 3)) | 4);
#line 2737
              break;
            }
#line 2737
            while (1) {
#line 2737
              *(jit->ip) = (unsigned char )(stack_offset & 0xff);
#line 2737
              (jit->ip) ++;
#line 2737
              break;
            }
          } else {
#line 2737
            goto _L___0;
          }
        } else {
          _L___0: /* CIL Label */ 
#line 2737
          while (1) {
#line 2737
            tmp___18 = jit->ip;
#line 2737
            (jit->ip) ++;
#line 2737
            *tmp___18 = (unsigned char )(((2 << 6) | (((r->id & 0x7) & 0x07) << 3)) | 4);
#line 2737
            break;
          }
#line 2737
          while (1) {
#line 2737
            imb___0.val = stack_offset;
#line 2737
            tmp___19 = jit->ip;
#line 2737
            (jit->ip) ++;
#line 2737
            *tmp___19 = imb___0.b[0];
#line 2737
            tmp___20 = jit->ip;
#line 2737
            (jit->ip) ++;
#line 2737
            *tmp___20 = imb___0.b[1];
#line 2737
            tmp___21 = jit->ip;
#line 2737
            (jit->ip) ++;
#line 2737
            *tmp___21 = imb___0.b[2];
#line 2737
            tmp___22 = jit->ip;
#line 2737
            (jit->ip) ++;
#line 2737
            *tmp___22 = imb___0.b[3];
#line 2737
            break;
          }
        }
#line 2737
        break;
      }
#line 2737
      break;
    }
#line 2738
    return ((int )sizeof(void *));
  } else {
#line 2740
    while (1) {
#line 2740 "./jitter-Darwin-X86-64.c"
      tmp___23 = jit->ip;
#line 2740
      (jit->ip) ++;
#line 2740
      *tmp___23 = (unsigned char)102;
#line 2740
      while (1) {
#line 2740
        if (r->id > 7) {
#line 2740
          tmp___24 = 4;
        } else {
#line 2740
          tmp___24 = 0;
        }
#line 2740
        _amd64_rex_bits___0 = (unsigned char )tmp___24;
#line 2740
        if ((int )_amd64_rex_bits___0 != 0) {
#line 2740
          tmp___25 = jit->ip;
#line 2740
          (jit->ip) ++;
#line 2740
          *tmp___25 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
        }
#line 2740
        break;
      }
#line 2740
      tmp___26 = jit->ip;
#line 2740
      (jit->ip) ++;
#line 2740
      *tmp___26 = (unsigned char)15;
#line 2740
      tmp___27 = jit->ip;
#line 2740
      (jit->ip) ++;
#line 2740
      *tmp___27 = (unsigned char)19;
#line 2740
      while (1) {
#line 2740
        while (1) {
#line 2740
          if (stack_offset == 0) {
#line 2740
            while (1) {
#line 2740
              tmp___33 = jit->ip;
#line 2740
              (jit->ip) ++;
#line 2740
              *tmp___33 = (unsigned char )((((r->id & 0x7) & 0x07) << 3) | 4);
#line 2740
              break;
            }
#line 2740
            while (1) {
#line 2740
              tmp___34 = jit->ip;
#line 2740
              (jit->ip) ++;
#line 2740
              *tmp___34 = (unsigned char )((4 << 3) | 4);
#line 2740
              break;
            }
          } else
#line 2740
          if ((jit_value )stack_offset >= -128L) {
#line 2740
            if ((jit_value )stack_offset <= 127L) {
#line 2740
              while (1) {
#line 2740
                tmp___35 = jit->ip;
#line 2740
                (jit->ip) ++;
#line 2740
                *tmp___35 = (unsigned char )(((1 << 6) | (((r->id & 0x7) & 0x07) << 3)) | 4);
#line 2740
                break;
              }
#line 2740
              while (1) {
#line 2740
                tmp___36 = jit->ip;
#line 2740
                (jit->ip) ++;
#line 2740
                *tmp___36 = (unsigned char )((4 << 3) | 4);
#line 2740
                break;
              }
#line 2740
              while (1) {
#line 2740
                *(jit->ip) = (unsigned char )(stack_offset & 0xff);
#line 2740
                (jit->ip) ++;
#line 2740
                break;
              }
            } else {
#line 2740
              goto _L___1;
            }
          } else {
            _L___1: /* CIL Label */ 
#line 2740
            while (1) {
#line 2740
              tmp___37 = jit->ip;
#line 2740
              (jit->ip) ++;
#line 2740
              *tmp___37 = (unsigned char )(((2 << 6) | (((r->id & 0x7) & 0x07) << 3)) | 4);
#line 2740
              break;
            }
#line 2740
            while (1) {
#line 2740
              tmp___38 = jit->ip;
#line 2740
              (jit->ip) ++;
#line 2740
              *tmp___38 = (unsigned char )((4 << 3) | 4);
#line 2740
              break;
            }
#line 2740
            while (1) {
#line 2740
              imb___2.val = stack_offset;
#line 2740
              tmp___39 = jit->ip;
#line 2740
              (jit->ip) ++;
#line 2740
              *tmp___39 = imb___2.b[0];
#line 2740
              tmp___40 = jit->ip;
#line 2740
              (jit->ip) ++;
#line 2740
              *tmp___40 = imb___2.b[1];
#line 2740
              tmp___41 = jit->ip;
#line 2740
              (jit->ip) ++;
#line 2740
              *tmp___41 = imb___2.b[2];
#line 2740
              tmp___42 = jit->ip;
#line 2740
              (jit->ip) ++;
#line 2740
              *tmp___42 = imb___2.b[3];
#line 2740
              break;
            }
          }
#line 2740
          break;
#line 2740
          if (stack_offset == 0) {
#line 2740
            while (1) {
#line 2740
              tmp___43 = jit->ip;
#line 2740
              (jit->ip) ++;
#line 2740
              *tmp___43 = (unsigned char )((((r->id & 0x7) & 0x07) << 3) | 4);
#line 2740
              break;
            }
#line 2740
            break;
          }
#line 2740
          if ((jit_value )stack_offset >= -128L) {
#line 2740
            if ((jit_value )stack_offset <= 127L) {
#line 2740
              while (1) {
#line 2740
                tmp___44 = jit->ip;
#line 2740
                (jit->ip) ++;
#line 2740
                *tmp___44 = (unsigned char )(((1 << 6) | (((r->id & 0x7) & 0x07) << 3)) | 4);
#line 2740
                break;
              }
#line 2740
              while (1) {
#line 2740
                *(jit->ip) = (unsigned char )(stack_offset & 0xff);
#line 2740
                (jit->ip) ++;
#line 2740
                break;
              }
            } else {
#line 2740
              goto _L___2;
            }
          } else {
            _L___2: /* CIL Label */ 
#line 2740
            while (1) {
#line 2740
              tmp___45 = jit->ip;
#line 2740
              (jit->ip) ++;
#line 2740
              *tmp___45 = (unsigned char )(((2 << 6) | (((r->id & 0x7) & 0x07) << 3)) | 4);
#line 2740
              break;
            }
#line 2740
            while (1) {
#line 2740
              imb___3.val = stack_offset;
#line 2740
              tmp___46 = jit->ip;
#line 2740
              (jit->ip) ++;
#line 2740
              *tmp___46 = imb___3.b[0];
#line 2740
              tmp___47 = jit->ip;
#line 2740
              (jit->ip) ++;
#line 2740
              *tmp___47 = imb___3.b[1];
#line 2740
              tmp___48 = jit->ip;
#line 2740
              (jit->ip) ++;
#line 2740
              *tmp___48 = imb___3.b[2];
#line 2740
              tmp___49 = jit->ip;
#line 2740
              (jit->ip) ++;
#line 2740
              *tmp___49 = imb___3.b[3];
#line 2740
              break;
            }
          }
#line 2740
          break;
        }
#line 2740
        break;
      }
#line 2740
      break;
    }
#line 2741
    return ((int )sizeof(double ));
  }
}
}
/* END FUNCTION-DEF emit_push_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF fixup LOC=UNKNOWN */
__inline static jit_tree *fixup(jit_tree *h ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 380
  tmp = is_red(h->right);
#line 380
  if (tmp) {
#line 380
    h = rotate_left(h);
  }
#line 382
  tmp___0 = is_red(h->left);
#line 382
  if (tmp___0) {
#line 382
    tmp___1 = is_red((h->left)->left);
#line 382
    if (tmp___1) {
#line 383
      h = rotate_right(h);
#line 384
      color_flip(h);
    }
  }
#line 387
  tmp___2 = is_red(h->left);
#line 387
  if (tmp___2) {
#line 387
    tmp___3 = is_red(h->right);
#line 387
    if (tmp___3) {
#line 387
      color_flip(h);
    }
  }
#line 389
  return (h);
}
}
/* END FUNCTION-DEF fixup LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sub_op LOC=UNKNOWN */
static void emit_sub_op(struct jit *jit , struct jit_op *op , int imm ) 
{ 
  unsigned char _amd64_rex_bits ;
  int tmp ;
  int tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  x86_imm_buf imb ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___43 ;
  int tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___48 ;
  int tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___58 ;
  int tmp___59 ;
  int tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  long tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___66 ;
  int tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;

  {
#line 3063
  if (imm) {
#line 3064
    if (op->r_arg[0] != op->r_arg[1]) {
#line 3064
      while (1) {
#line 3064
        while (1) {
#line 3064
          if (op->r_arg[0] > 7L) {
#line 3064
            tmp = 4;
          } else {
#line 3064
            tmp = 0;
          }
#line 3064
          if (op->r_arg[1] > 7L) {
#line 3064
            tmp___0 = 1;
          } else {
#line 3064
            tmp___0 = 0;
          }
#line 3064
          _amd64_rex_bits = (unsigned char )((8 | tmp) | tmp___0);
#line 3064
          if ((int )_amd64_rex_bits != 0) {
#line 3064
            tmp___1 = jit->ip;
#line 3064
            (jit->ip) ++;
#line 3064
            *tmp___1 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          }
#line 3064
          break;
        }
#line 3064
        tmp___2 = jit->ip;
#line 3064
        (jit->ip) ++;
#line 3064
        *tmp___2 = (unsigned char)141;
#line 3064
        while (1) {
#line 3064
          if (op->r_arg[1] == 16L) {
#line 3064
            while (1) {
#line 3064
              tmp___3 = jit->ip;
#line 3064
              (jit->ip) ++;
#line 3064
              *tmp___3 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | 5L);
#line 3064
              break;
            }
#line 3064
            while (1) {
#line 3064
              imb.val = (int )(- op->r_arg[2]);
#line 3064
              tmp___4 = jit->ip;
#line 3064
              (jit->ip) ++;
#line 3064
              *tmp___4 = imb.b[0];
#line 3064
              tmp___5 = jit->ip;
#line 3064
              (jit->ip) ++;
#line 3064
              *tmp___5 = imb.b[1];
#line 3064
              tmp___6 = jit->ip;
#line 3064
              (jit->ip) ++;
#line 3064
              *tmp___6 = imb.b[2];
#line 3064
              tmp___7 = jit->ip;
#line 3064
              (jit->ip) ++;
#line 3064
              *tmp___7 = imb.b[3];
#line 3064
              break;
            }
          } else {
#line 3064
            while (1) {
#line 3064
              if ((op->r_arg[1] & 7L) == 4L) {
#line 3064
                if (- op->r_arg[2] == 0L) {
#line 3064
                  while (1) {
#line 3064
                    tmp___8 = jit->ip;
#line 3064
                    (jit->ip) ++;
#line 3064
                    *tmp___8 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | 4L);
#line 3064
                    break;
                  }
#line 3064
                  while (1) {
#line 3064
                    tmp___9 = jit->ip;
#line 3064
                    (jit->ip) ++;
#line 3064
                    *tmp___9 = (unsigned char )((4 << 3) | 4);
#line 3064
                    break;
                  }
                } else
#line 3064
                if (- op->r_arg[2] >= -128L) {
#line 3064
                  if (- op->r_arg[2] <= 127L) {
#line 3064
                    while (1) {
#line 3064
                      tmp___10 = jit->ip;
#line 3064
                      (jit->ip) ++;
#line 3064
                      *tmp___10 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
#line 3064
                      break;
                    }
#line 3064
                    while (1) {
#line 3064
                      tmp___11 = jit->ip;
#line 3064
                      (jit->ip) ++;
#line 3064
                      *tmp___11 = (unsigned char )((4 << 3) | 4);
#line 3064
                      break;
                    }
#line 3064
                    while (1) {
#line 3064
                      *(jit->ip) = (unsigned char )(- op->r_arg[2] & 255L);
#line 3064
                      (jit->ip) ++;
#line 3064
                      break;
                    }
                  } else {
#line 3064
                    goto _L;
                  }
                } else {
                  _L: /* CIL Label */ 
#line 3064
                  while (1) {
#line 3064
                    tmp___12 = jit->ip;
#line 3064
                    (jit->ip) ++;
#line 3064
                    *tmp___12 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
#line 3064
                    break;
                  }
#line 3064
                  while (1) {
#line 3064
                    tmp___13 = jit->ip;
#line 3064
                    (jit->ip) ++;
#line 3064
                    *tmp___13 = (unsigned char )((4 << 3) | 4);
#line 3064
                    break;
                  }
#line 3064
                  while (1) {
#line 3064
                    imb___0.val = (int )(- op->r_arg[2]);
#line 3064
                    tmp___14 = jit->ip;
#line 3064
                    (jit->ip) ++;
#line 3064
                    *tmp___14 = imb___0.b[0];
#line 3064
                    tmp___15 = jit->ip;
#line 3064
                    (jit->ip) ++;
#line 3064
                    *tmp___15 = imb___0.b[1];
#line 3064
                    tmp___16 = jit->ip;
#line 3064
                    (jit->ip) ++;
#line 3064
                    *tmp___16 = imb___0.b[2];
#line 3064
                    tmp___17 = jit->ip;
#line 3064
                    (jit->ip) ++;
#line 3064
                    *tmp___17 = imb___0.b[3];
#line 3064
                    break;
                  }
                }
#line 3064
                break;
              }
#line 3064
              if (- op->r_arg[2] == 0L) {
#line 3064
                if ((op->r_arg[1] & 7L) != 5L) {
#line 3064
                  while (1) {
#line 3064
                    tmp___18 = jit->ip;
#line 3064
                    (jit->ip) ++;
#line 3064
                    *tmp___18 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | ((op->r_arg[1] & 7L) & 7L));
#line 3064
                    break;
                  }
#line 3064
                  break;
                }
              }
#line 3064
              if (- op->r_arg[2] >= -128L) {
#line 3064
                if (- op->r_arg[2] <= 127L) {
#line 3064
                  while (1) {
#line 3064
                    tmp___19 = jit->ip;
#line 3064
                    (jit->ip) ++;
#line 3064
                    *tmp___19 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | ((op->r_arg[1] & 7L) & 7L));
#line 3064
                    break;
                  }
#line 3064
                  while (1) {
#line 3064
                    *(jit->ip) = (unsigned char )(- op->r_arg[2] & 255L);
#line 3064
                    (jit->ip) ++;
#line 3064
                    break;
                  }
                } else {
#line 3064
                  goto _L___0;
                }
              } else {
                _L___0: /* CIL Label */ 
#line 3064
                while (1) {
#line 3064
                  tmp___20 = jit->ip;
#line 3064
                  (jit->ip) ++;
#line 3064
                  *tmp___20 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | ((op->r_arg[1] & 7L) & 7L));
#line 3064
                  break;
                }
#line 3064
                while (1) {
#line 3064
                  imb___1.val = (int )(- op->r_arg[2]);
#line 3064
                  tmp___21 = jit->ip;
#line 3064
                  (jit->ip) ++;
#line 3064
                  *tmp___21 = imb___1.b[0];
#line 3064
                  tmp___22 = jit->ip;
#line 3064
                  (jit->ip) ++;
#line 3064
                  *tmp___22 = imb___1.b[1];
#line 3064
                  tmp___23 = jit->ip;
#line 3064
                  (jit->ip) ++;
#line 3064
                  *tmp___23 = imb___1.b[2];
#line 3064
                  tmp___24 = jit->ip;
#line 3064
                  (jit->ip) ++;
#line 3064
                  *tmp___24 = imb___1.b[3];
#line 3064
                  break;
                }
              }
#line 3064
              break;
            }
          }
#line 3064
          break;
        }
#line 3064
        break;
      }
    } else {
#line 3065
      while (1) {
#line 3065
        if (op->r_arg[2] >= -128L) {
#line 3065
          if (op->r_arg[2] <= 127L) {
#line 3065
            while (1) {
#line 3065
              if (op->r_arg[0] > 7L) {
#line 3065
                tmp___25 = 1;
              } else {
#line 3065
                tmp___25 = 0;
              }
#line 3065
              _amd64_rex_bits___0 = (unsigned char )(8 | tmp___25);
#line 3065
              if ((int )_amd64_rex_bits___0 != 0) {
#line 3065
                tmp___26 = jit->ip;
#line 3065
                (jit->ip) ++;
#line 3065
                *tmp___26 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
              }
#line 3065
              break;
            }
#line 3065
            tmp___27 = jit->ip;
#line 3065
            (jit->ip) ++;
#line 3065
            *tmp___27 = (unsigned char)131;
#line 3065
            while (1) {
#line 3065
              while (1) {
#line 3065
                tmp___28 = jit->ip;
#line 3065
                (jit->ip) ++;
#line 3065
                *tmp___28 = (unsigned char )((long )((3 << 6) | (5 << 3)) | (op->r_arg[0] & 7L));
#line 3065
                break;
              }
#line 3065
              break;
            }
#line 3065
            while (1) {
#line 3065
              *(jit->ip) = (unsigned char )(op->r_arg[2] & 255L);
#line 3065
              (jit->ip) ++;
#line 3065
              break;
            }
          } else {
#line 3065
            goto _L___1;
          }
        } else
        _L___1: /* CIL Label */ 
#line 3065
        if (op->r_arg[0] == 0L) {
#line 3065
          while (1) {
#line 3065
            _amd64_rex_bits___1 = (unsigned char)8;
#line 3065
            if ((int )_amd64_rex_bits___1 != 0) {
#line 3065
              tmp___29 = jit->ip;
#line 3065
              (jit->ip) ++;
#line 3065
              *tmp___29 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
            }
#line 3065
            break;
          }
#line 3065
          tmp___30 = jit->ip;
#line 3065
          (jit->ip) ++;
#line 3065
          *tmp___30 = (unsigned char )((5 << 3) + 5);
#line 3065
          while (1) {
#line 3065
            imb___2.val = (int )op->r_arg[2];
#line 3065
            tmp___31 = jit->ip;
#line 3065
            (jit->ip) ++;
#line 3065
            *tmp___31 = imb___2.b[0];
#line 3065
            tmp___32 = jit->ip;
#line 3065
            (jit->ip) ++;
#line 3065
            *tmp___32 = imb___2.b[1];
#line 3065
            tmp___33 = jit->ip;
#line 3065
            (jit->ip) ++;
#line 3065
            *tmp___33 = imb___2.b[2];
#line 3065
            tmp___34 = jit->ip;
#line 3065
            (jit->ip) ++;
#line 3065
            *tmp___34 = imb___2.b[3];
#line 3065
            break;
          }
        } else {
#line 3065
          while (1) {
#line 3065
            if (op->r_arg[0] > 7L) {
#line 3065
              tmp___35 = 1;
            } else {
#line 3065
              tmp___35 = 0;
            }
#line 3065
            _amd64_rex_bits___2 = (unsigned char )(8 | tmp___35);
#line 3065
            if ((int )_amd64_rex_bits___2 != 0) {
#line 3065
              tmp___36 = jit->ip;
#line 3065
              (jit->ip) ++;
#line 3065
              *tmp___36 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
            }
#line 3065
            break;
          }
#line 3065
          tmp___37 = jit->ip;
#line 3065
          (jit->ip) ++;
#line 3065
          *tmp___37 = (unsigned char)129;
#line 3065
          while (1) {
#line 3065
            while (1) {
#line 3065
              tmp___38 = jit->ip;
#line 3065
              (jit->ip) ++;
#line 3065
              *tmp___38 = (unsigned char )((long )((3 << 6) | (5 << 3)) | (op->r_arg[0] & 7L));
#line 3065
              break;
            }
#line 3065
            break;
          }
#line 3065
          while (1) {
#line 3065
            imb___3.val = (int )op->r_arg[2];
#line 3065
            tmp___39 = jit->ip;
#line 3065
            (jit->ip) ++;
#line 3065
            *tmp___39 = imb___3.b[0];
#line 3065
            tmp___40 = jit->ip;
#line 3065
            (jit->ip) ++;
#line 3065
            *tmp___40 = imb___3.b[1];
#line 3065
            tmp___41 = jit->ip;
#line 3065
            (jit->ip) ++;
#line 3065
            *tmp___41 = imb___3.b[2];
#line 3065
            tmp___42 = jit->ip;
#line 3065
            (jit->ip) ++;
#line 3065
            *tmp___42 = imb___3.b[3];
#line 3065
            break;
          }
        }
#line 3065
        break;
      }
    }
#line 3066
    return;
  }
#line 3069
  if (op->r_arg[0] == op->r_arg[1]) {
#line 3070
    while (1) {
#line 3070
      while (1) {
#line 3070
        if (op->r_arg[0] > 7L) {
#line 3070
          tmp___43 = 4;
        } else {
#line 3070
          tmp___43 = 0;
        }
#line 3070
        if (op->r_arg[2] > 7L) {
#line 3070
          tmp___44 = 1;
        } else {
#line 3070
          tmp___44 = 0;
        }
#line 3070
        _amd64_rex_bits___3 = (unsigned char )((8 | tmp___43) | tmp___44);
#line 3070
        if ((int )_amd64_rex_bits___3 != 0) {
#line 3070
          tmp___45 = jit->ip;
#line 3070
          (jit->ip) ++;
#line 3070
          *tmp___45 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
        }
#line 3070
        break;
      }
#line 3070
      tmp___46 = jit->ip;
#line 3070
      (jit->ip) ++;
#line 3070
      *tmp___46 = (unsigned char )((5 << 3) + 3);
#line 3070
      while (1) {
#line 3070
        while (1) {
#line 3070
          tmp___47 = jit->ip;
#line 3070
          (jit->ip) ++;
#line 3070
          *tmp___47 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
#line 3070
          break;
        }
#line 3070
        break;
      }
#line 3070
      break;
    }
  } else
#line 3071
  if (op->r_arg[0] == op->r_arg[2]) {
#line 3072
    while (1) {
#line 3072
      while (1) {
#line 3072
        if (op->r_arg[0] > 7L) {
#line 3072
          tmp___48 = 4;
        } else {
#line 3072
          tmp___48 = 0;
        }
#line 3072
        if (op->r_arg[1] > 7L) {
#line 3072
          tmp___49 = 1;
        } else {
#line 3072
          tmp___49 = 0;
        }
#line 3072
        _amd64_rex_bits___4 = (unsigned char )((8 | tmp___48) | tmp___49);
#line 3072
        if ((int )_amd64_rex_bits___4 != 0) {
#line 3072
          tmp___50 = jit->ip;
#line 3072
          (jit->ip) ++;
#line 3072
          *tmp___50 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
        }
#line 3072
        break;
      }
#line 3072
      tmp___51 = jit->ip;
#line 3072
      (jit->ip) ++;
#line 3072
      *tmp___51 = (unsigned char )((5 << 3) + 3);
#line 3072
      while (1) {
#line 3072
        while (1) {
#line 3072
          tmp___52 = jit->ip;
#line 3072
          (jit->ip) ++;
#line 3072
          *tmp___52 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
#line 3072
          break;
        }
#line 3072
        break;
      }
#line 3072
      break;
    }
#line 3073
    while (1) {
#line 3073
      while (1) {
#line 3073
        if (op->r_arg[0] > 7L) {
#line 3073
          tmp___53 = 1;
        } else {
#line 3073
          tmp___53 = 0;
        }
#line 3073
        _amd64_rex_bits___5 = (unsigned char )(8 | tmp___53);
#line 3073
        if ((int )_amd64_rex_bits___5 != 0) {
#line 3073
          tmp___54 = jit->ip;
#line 3073
          (jit->ip) ++;
#line 3073
          *tmp___54 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
        }
#line 3073
        break;
      }
#line 3073
      while (1) {
#line 3073
        tmp___55 = jit->ip;
#line 3073
        (jit->ip) ++;
#line 3073
        *tmp___55 = (unsigned char)247;
#line 3073
        while (1) {
#line 3073
          while (1) {
#line 3073
            tmp___56 = jit->ip;
#line 3073
            (jit->ip) ++;
#line 3073
            *tmp___56 = (unsigned char )((long )((3 << 6) | (3 << 3)) | ((op->r_arg[0] & 7L) & 7L));
#line 3073
            break;
          }
#line 3073
          break;
        }
#line 3073
        break;
      }
#line 3073
      break;
    }
  } else {
#line 3075
    while (1) {
#line 3075
      if ((int )sizeof(void *) == 2) {
#line 3075
        tmp___57 = jit->ip;
#line 3075
        (jit->ip) ++;
#line 3075
        *tmp___57 = (unsigned char)102;
      }
#line 3075
      while (1) {
#line 3075
        if ((int )sizeof(void *) > 4) {
#line 3075
          tmp___58 = 8;
        } else {
#line 3075
          tmp___58 = 0;
        }
#line 3075
        if (op->r_arg[0] > 7L) {
#line 3075
          tmp___59 = 4;
        } else {
#line 3075
          tmp___59 = 0;
        }
#line 3075
        if (op->r_arg[1] > 7L) {
#line 3075
          tmp___60 = 1;
        } else {
#line 3075
          tmp___60 = 0;
        }
#line 3075
        _amd64_rex_bits___6 = (unsigned char )((tmp___58 | tmp___59) | tmp___60);
#line 3075
        if ((int )_amd64_rex_bits___6 != 0) {
#line 3075
          tmp___61 = jit->ip;
#line 3075
          (jit->ip) ++;
#line 3075
          *tmp___61 = (unsigned char )(0x40 | (int )_amd64_rex_bits___6);
        } else
#line 3075
        if ((int )sizeof(void *) == 1) {
#line 3075
          tmp___61 = jit->ip;
#line 3075
          (jit->ip) ++;
#line 3075
          *tmp___61 = (unsigned char )(0x40 | (int )_amd64_rex_bits___6);
        }
#line 3075
        break;
      }
#line 3075
      switch ((int )sizeof(void *)) {
      case 1: 
#line 3075
      tmp___62 = jit->ip;
#line 3075
      (jit->ip) ++;
#line 3075
      *tmp___62 = (unsigned char)138;
#line 3075
      break;
      case 8: 
      case 4: 
      case 2: 
#line 3075
      tmp___63 = jit->ip;
#line 3075
      (jit->ip) ++;
#line 3075
      *tmp___63 = (unsigned char)139;
#line 3075
      break;
      default: 
#line 3075
      tmp___64 = __builtin_expect(1L, 0L);
#line 3075
      if (tmp___64) {
#line 3075
        __assert_rtn((char const   *)"emit_sub_op", (char const   *)"./jitter-Darwin-X86-64.c",
                     3075, (char const   *)"0");
      }
      }
#line 3075
      while (1) {
#line 3075
        while (1) {
#line 3075
          tmp___65 = jit->ip;
#line 3075
          (jit->ip) ++;
#line 3075
          *tmp___65 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
#line 3075
          break;
        }
#line 3075
        break;
      }
#line 3075
      break;
    }
#line 3076
    while (1) {
#line 3076
      while (1) {
#line 3076
        if (op->r_arg[0] > 7L) {
#line 3076
          tmp___66 = 4;
        } else {
#line 3076
          tmp___66 = 0;
        }
#line 3076
        if (op->r_arg[2] > 7L) {
#line 3076
          tmp___67 = 1;
        } else {
#line 3076
          tmp___67 = 0;
        }
#line 3076
        _amd64_rex_bits___7 = (unsigned char )((8 | tmp___66) | tmp___67);
#line 3076
        if ((int )_amd64_rex_bits___7 != 0) {
#line 3076
          tmp___68 = jit->ip;
#line 3076
          (jit->ip) ++;
#line 3076
          *tmp___68 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
        }
#line 3076
        break;
      }
#line 3076
      tmp___69 = jit->ip;
#line 3076
      (jit->ip) ++;
#line 3076
      *tmp___69 = (unsigned char )((5 << 3) + 3);
#line 3076
      while (1) {
#line 3076
        while (1) {
#line 3076
          tmp___70 = jit->ip;
#line 3076
          (jit->ip) ++;
#line 3076
          *tmp___70 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
#line 3076
          break;
        }
#line 3076
        break;
      }
#line 3076
      break;
    }
  }
#line 3078
  return;
}
}
/* END FUNCTION-DEF emit_sub_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_addr LOC=UNKNOWN */
__inline static void print_addr(struct jit_disasm *disasm , struct output_buf *buf ,
                                jit_tree *labels , jit_op *op , int arg_pos ) 
{ 
  void *arg ;
  jit_tree *label_item ;
  jit_tree *tmp ;

  {
#line 4378
  arg = (void *)op->arg[arg_pos];
#line 4380
  tmp = jit_tree_search(labels, (long )op);
#line 4380
  label_item = tmp;
#line 4381
  if (label_item) {
#line 4381
    ob_printf(buf, (char const   *)disasm->label_forward_template, - ((long )label_item->value));
  } else {
#line 4383
    label_item = jit_tree_search(labels, (long )arg);
#line 4384
    if (label_item) {
#line 4384
      ob_printf(buf, (char const   *)disasm->label_template, (long )label_item->value);
    } else {
#line 4385
      ob_printf(buf, (char const   *)disasm->generic_addr_template, arg);
    }
  }
#line 4387
  return;
}
}
/* END FUNCTION-DEF print_addr LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF check_uninitialized_registers LOC=UNKNOWN */
static int check_uninitialized_registers(jit_op *op , char *msg_buf ) 
{ 
  char buf[4096] ;
  size_t tmp ;

  {
#line 5028
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) != 128U) {
#line 5028
    return (0);
  }
#line 5030
  if ((unsigned long )(op->live_in)->root != (unsigned long )((void *)0)) {
#line 5032
    buf[0] = (char )'\000';
#line 5033
    jit_tree_walk((op->live_in)->root, & print_regs, (void *)(buf));
#line 5034
    tmp = strlen((char const   *)(buf));
#line 5034
    if (tmp) {
#line 5035
      append_msg(msg_buf, "uninitialized register(s): %s", buf);
#line 5036
      return (8);
    }
  }
#line 5039
  return (0);
}
}
/* END FUNCTION-DEF check_uninitialized_registers LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_alu_op LOC=UNKNOWN */
static void emit_sse_alu_op(struct jit *jit , jit_op *op , int sse_op ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___14 ;
  int tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___21 ;
  int tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;

  {
#line 1512
  if (op->r_arg[0] == op->r_arg[1]) {
#line 1513
    while (1) {
#line 1513
      tmp = jit->ip;
#line 1513
      (jit->ip) ++;
#line 1513
      *tmp = (unsigned char)242;
#line 1513
      while (1) {
#line 1513
        if (op->r_arg[0] > 7L) {
#line 1513
          tmp___0 = 4;
        } else {
#line 1513
          tmp___0 = 0;
        }
#line 1513
        if (op->r_arg[2] > 7L) {
#line 1513
          tmp___1 = 1;
        } else {
#line 1513
          tmp___1 = 0;
        }
#line 1513
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
#line 1513
        if ((int )_amd64_rex_bits != 0) {
#line 1513
          tmp___2 = jit->ip;
#line 1513
          (jit->ip) ++;
#line 1513
          *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
        }
#line 1513
        break;
      }
#line 1513
      tmp___3 = jit->ip;
#line 1513
      (jit->ip) ++;
#line 1513
      *tmp___3 = (unsigned char)15;
#line 1513
      tmp___4 = jit->ip;
#line 1513
      (jit->ip) ++;
#line 1513
      *tmp___4 = (unsigned char )sse_op;
#line 1513
      while (1) {
#line 1513
        while (1) {
#line 1513
          tmp___5 = jit->ip;
#line 1513
          (jit->ip) ++;
#line 1513
          *tmp___5 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
#line 1513
          break;
        }
#line 1513
        break;
      }
#line 1513
      break;
    }
  } else
#line 1514
  if (op->r_arg[0] == op->r_arg[2]) {
#line 1515
    while (1) {
#line 1515
      tmp___6 = jit->ip;
#line 1515
      (jit->ip) ++;
#line 1515
      *tmp___6 = (unsigned char)242;
#line 1515
      while (1) {
#line 1515
        if (op->r_arg[0] > 7L) {
#line 1515
          tmp___7 = 4;
        } else {
#line 1515
          tmp___7 = 0;
        }
#line 1515
        if (op->r_arg[1] > 7L) {
#line 1515
          tmp___8 = 1;
        } else {
#line 1515
          tmp___8 = 0;
        }
#line 1515
        _amd64_rex_bits___0 = (unsigned char )(tmp___7 | tmp___8);
#line 1515
        if ((int )_amd64_rex_bits___0 != 0) {
#line 1515
          tmp___9 = jit->ip;
#line 1515
          (jit->ip) ++;
#line 1515
          *tmp___9 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
        }
#line 1515
        break;
      }
#line 1515
      tmp___10 = jit->ip;
#line 1515
      (jit->ip) ++;
#line 1515
      *tmp___10 = (unsigned char)15;
#line 1515
      tmp___11 = jit->ip;
#line 1515
      (jit->ip) ++;
#line 1515
      *tmp___11 = (unsigned char )sse_op;
#line 1515
      while (1) {
#line 1515
        while (1) {
#line 1515
          tmp___12 = jit->ip;
#line 1515
          (jit->ip) ++;
#line 1515
          *tmp___12 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
#line 1515
          break;
        }
#line 1515
        break;
      }
#line 1515
      break;
    }
  } else {
#line 1517
    while (1) {
#line 1517
      tmp___13 = jit->ip;
#line 1517
      (jit->ip) ++;
#line 1517
      *tmp___13 = (unsigned char)242;
#line 1517
      while (1) {
#line 1517
        if (op->r_arg[0] > 7L) {
#line 1517
          tmp___14 = 4;
        } else {
#line 1517
          tmp___14 = 0;
        }
#line 1517
        if (op->r_arg[1] > 7L) {
#line 1517
          tmp___15 = 1;
        } else {
#line 1517
          tmp___15 = 0;
        }
#line 1517
        _amd64_rex_bits___1 = (unsigned char )(tmp___14 | tmp___15);
#line 1517
        if ((int )_amd64_rex_bits___1 != 0) {
#line 1517
          tmp___16 = jit->ip;
#line 1517
          (jit->ip) ++;
#line 1517
          *tmp___16 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
        }
#line 1517
        break;
      }
#line 1517
      tmp___17 = jit->ip;
#line 1517
      (jit->ip) ++;
#line 1517
      *tmp___17 = (unsigned char)15;
#line 1517
      tmp___18 = jit->ip;
#line 1517
      (jit->ip) ++;
#line 1517
      *tmp___18 = (unsigned char)16;
#line 1517
      while (1) {
#line 1517
        while (1) {
#line 1517
          tmp___19 = jit->ip;
#line 1517
          (jit->ip) ++;
#line 1517
          *tmp___19 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
#line 1517
          break;
        }
#line 1517
        break;
      }
#line 1517
      break;
    }
#line 1518
    while (1) {
#line 1518
      tmp___20 = jit->ip;
#line 1518
      (jit->ip) ++;
#line 1518
      *tmp___20 = (unsigned char)242;
#line 1518
      while (1) {
#line 1518
        if (op->r_arg[0] > 7L) {
#line 1518
          tmp___21 = 4;
        } else {
#line 1518
          tmp___21 = 0;
        }
#line 1518
        if (op->r_arg[2] > 7L) {
#line 1518
          tmp___22 = 1;
        } else {
#line 1518
          tmp___22 = 0;
        }
#line 1518
        _amd64_rex_bits___2 = (unsigned char )(tmp___21 | tmp___22);
#line 1518
        if ((int )_amd64_rex_bits___2 != 0) {
#line 1518
          tmp___23 = jit->ip;
#line 1518
          (jit->ip) ++;
#line 1518
          *tmp___23 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
        }
#line 1518
        break;
      }
#line 1518
      tmp___24 = jit->ip;
#line 1518
      (jit->ip) ++;
#line 1518
      *tmp___24 = (unsigned char)15;
#line 1518
      tmp___25 = jit->ip;
#line 1518
      (jit->ip) ++;
#line 1518
      *tmp___25 = (unsigned char )sse_op;
#line 1518
      while (1) {
#line 1518
        while (1) {
#line 1518
          tmp___26 = jit->ip;
#line 1518
          (jit->ip) ++;
#line 1518
          *tmp___26 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
#line 1518
          break;
        }
#line 1518
        break;
      }
#line 1518
      break;
    }
  }
#line 1520
  return;
}
}
/* END FUNCTION-DEF emit_sse_alu_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF ispunct LOC=UNKNOWN */
__inline int ispunct(int _c ) 
{ 
  int tmp ;

  {
#line 263 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  tmp = __istype(_c, 8192UL);
#line 263
  return (tmp);
}
}
/* END FUNCTION-DEF ispunct LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_flw_initialize LOC=UNKNOWN */
__inline static void jit_flw_initialize(struct jit *jit ) 
{ 
  struct jit_func_info *func_info ;
  jit_op *op ;
  jit_op *tmp ;
  int i ;
  int arg_id ;

  {
#line 3817 "./jitter-Darwin-X86-64.c"
  func_info = (struct jit_func_info *)((void *)0);
#line 3818
  tmp = jit_op_first(jit->ops);
#line 3818
  op = tmp;
#line 3819
  while (op) {
#line 3820
    op->live_in = jit_set_new();
#line 3821
    op->live_out = jit_set_new();
#line 3823
    i = 0;
#line 3823
    while (i < 3) {
#line 3824
      if ((((int )op->spec >> ((i + 1) - 1) * 2) & 0x03) == 0x01) {
#line 3825
        jit_set_add(op->live_in, (int )op->arg[i]);
      }
#line 3823
      i ++;
    }
#line 3827
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 128U) {
#line 3828
      func_info = (struct jit_func_info *)op->arg[1];
    }
#line 3832
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 432U) {
#line 3833
      arg_id = (int )op->arg[1];
#line 3834
      if ((unsigned int )(func_info->args + arg_id)->type != 2U) {
#line 3835
        jit_set_add(op->live_in, (3 << 1) | ((arg_id & 0xfffffff) << 4));
      } else {
#line 3837
        jit_set_add(op->live_in, (1 | (3 << 1)) | ((arg_id & 0xfffffff) << 4));
#line 3838
        if ((func_info->args + arg_id)->overflow) {
#line 3839
          jit_set_add(op->live_in, ((1 | (3 << 1)) | (1 << 3)) | ((arg_id & 0xfffffff) << 4));
        }
      }
    }
#line 3844
    op = op->next;
  }
#line 3846
  return;
}
}
/* END FUNCTION-DEF jit_flw_initialize LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_spill_candidate LOC=UNKNOWN */
static jit_hw_reg *rmap_spill_candidate(struct jit_reg_allocator *al , jit_op *op ,
                                        jit_value virtreg , int *spill , jit_value *reg_to_spill ,
                                        int callee_saved ) 
{ 
  jit_reg r ;
  jit_hw_reg *regs ;
  int reg_count ;
  jit_hw_reg *result ;
  int best_score ;
  int sp ;
  int i ;
  jit_value assoc ;
  int score ;
  int tmp ;

  {
#line 2026
  r = virtreg;
#line 2029
  result = (jit_hw_reg *)((void *)0);
#line 2030
  best_score = (-0x7FFFFFFF-1);
#line 2032
  if ((r & 1L) == 0L) {
#line 2033
    regs = al->gp_regs;
#line 2034
    reg_count = al->gp_reg_cnt;
  } else {
#line 2036
    regs = al->fp_regs;
#line 2037
    reg_count = al->fp_reg_cnt;
  }
#line 2040
  sp = 0;
#line 2041
  i = 0;
#line 2041
  while (i < reg_count) {
#line 2042
    if (callee_saved) {
#line 2042
      if (! (regs + i)->callee_saved) {
#line 2042
        goto __Cont;
      }
    }
#line 2043
    assoc = (jit_value )0;
#line 2044
    tmp = candidate_score(op, virtreg, regs + i, & sp, & assoc);
#line 2044
    score = tmp;
#line 2045
    if (score > best_score) {
#line 2046
      if (sp) {
#line 2047
        *reg_to_spill = assoc;
#line 2048
        *spill = sp;
      } else {
#line 2050
        *reg_to_spill = (jit_value )-1;
#line 2051
        *spill = 0;
      }
#line 2053
      result = regs + i;
#line 2054
      best_score = score;
    }
    __Cont: /* CIL Label */ 
#line 2041
    i ++;
  }
#line 2057
  return (result);
}
}
/* END FUNCTION-DEF rmap_spill_candidate LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_prepare_reg_counts LOC=UNKNOWN */
void jit_prepare_reg_counts(struct jit *jit ) 
{ 
  int declared_args ;
  int last_gp ;
  int last_fp ;
  int gp_args ;
  int fp_args ;
  struct jit_func_info *info ;
  jit_op *op ;
  jit_op *tmp ;
  void *tmp___0 ;
  int i ;
  jit_reg r ;
  jit_op *xop ;
  jit_opcode next_code ;

  {
#line 5992
  declared_args = 0;
#line 5993
  last_gp = -1;
#line 5994
  last_fp = -1;
#line 5995
  gp_args = 0;
#line 5996
  fp_args = 0;
#line 5997
  info = (struct jit_func_info *)((void *)0);
#line 5998
  tmp = jit_op_first(jit->ops);
#line 5998
  op = tmp;
#line 6000
  while (1) {
#line 6001
    if (! op) {
#line 6001
      goto _L;
    } else
#line 6001
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 128U) {
      _L: /* CIL Label */ 
#line 6002
      if (info) {
#line 6003
        info->gp_reg_count = last_gp + 1;
#line 6004
        info->fp_reg_count = last_fp + 1;
#line 6005
        info->general_arg_cnt = gp_args;
#line 6006
        info->float_arg_cnt = fp_args;
#line 6010
        while ((info->gp_reg_count + info->fp_reg_count) % 2) {
#line 6010
          (info->gp_reg_count) ++;
        }
#line 6012
        tmp___0 = malloc((size_t )(sizeof(struct jit_inp_arg ) * (unsigned long long )declared_args));
#line 6012
        info->args = (struct jit_inp_arg *)tmp___0;
      }
#line 6014
      if (op) {
#line 6015
        declared_args = 0;
#line 6016
        last_gp = -1;
#line 6017
        last_fp = -1;
#line 6018
        gp_args = 0;
#line 6019
        fp_args = 0;
#line 6020
        info = (struct jit_func_info *)op->arg[1];
      }
#line 6022
      if (! op) {
#line 6022
        break;
      }
    }
#line 6025
    i = 0;
#line 6025
    while (i < 3) {
#line 6026
      if ((((int )op->spec >> ((i + 1) - 1) * 2) & 0x03) == 0x03) {
#line 6026
        goto _L___0;
      } else
#line 6026
      if ((((int )op->spec >> ((i + 1) - 1) * 2) & 0x03) == 0x01) {
        _L___0: /* CIL Label */ 
#line 6027
        r = op->arg[i];
#line 6028
        if ((r & 1L) == 0L) {
#line 6028
          if (((r >> 4) & 268435455L) > (long )last_gp) {
#line 6028
            last_gp = (int )((r >> 4) & 268435455L);
          }
        }
#line 6029
        if ((r & 1L) == 1L) {
#line 6029
          if (((r >> 4) & 268435455L) > (long )last_fp) {
#line 6029
            last_fp = (int )((r >> 4) & 268435455L);
          }
        }
      }
#line 6025
      i ++;
    }
#line 6032
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 152U) {
#line 6033
      declared_args ++;
#line 6034
      if (op->arg[0] == 2L) {
#line 6034
        fp_args ++;
      } else {
#line 6035
        gp_args ++;
      }
    }
#line 6038
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 392U) {
#line 6039
      xop = op;
#line 6040
      while (1) {
#line 6041
        if ((unsigned int )((jit_opcode )((int )(op->next)->code & 0xfff8)) == 400U) {
#line 6041
          (xop->arg[0]) ++;
        } else
#line 6042
        if ((unsigned int )((jit_opcode )((int )(op->next)->code & 0xfff8)) == 408U) {
#line 6042
          (xop->arg[1]) ++;
        } else {
#line 6044
          next_code = (jit_opcode )((int )(op->next)->code & 0xfff8);
#line 6045
          if ((unsigned int )next_code == 416U) {
#line 6045
            break;
          }
#line 6046
          if ((unsigned int )next_code != 4112U) {
#line 6046
            if ((unsigned int )next_code != 1440U) {
#line 6046
              if ((unsigned int )next_code != 16U) {
#line 6046
                if ((unsigned int )next_code != 24U) {
#line 6046
                  if ((unsigned int )next_code != 40U) {
#line 6046
                    if ((unsigned int )next_code != 32U) {
#line 6046
                      if ((unsigned int )next_code != 448U) {
#line 6051
                        printf((char const   */* __restrict  */)"Garbage in the prepare-call block. Opcode: %x\n",
                               (unsigned int )next_code >> 3);
#line 6052
                        abort();
                      }
                    }
                  }
                }
              }
            }
          }
        }
#line 6055
        op = op->next;
      }
    }
#line 6058
    op = op->next;
  }
#line 6061
  return;
}
}
/* END FUNCTION-DEF jit_prepare_reg_counts LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_reg_liveness_callback LOC=UNKNOWN */
static void print_reg_liveness_callback(jit_tree_key key , jit_tree_value value ,
                                        void *disasm ) 
{ 
  char buf[256] ;

  {
#line 4342
  jit_get_reg_name((struct jit_disasm *)disasm, buf, (int )key);
#line 4343
  printf((char const   */* __restrict  */)"%s ", buf);
#line 4344
  return;
}
}
/* END FUNCTION-DEF print_reg_liveness_callback LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_patch_local_addrs LOC=UNKNOWN */
void jit_patch_local_addrs(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  unsigned char *buf ;
  jit_value addr ;
  int tmp___0 ;
  size_t tmp___1 ;
  int tmp___2 ;
  unsigned char _amd64_rex_bits ;
  int tmp___3 ;
  int tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  amd64_imm_buf imb ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *buf___0 ;
  jit_value addr___0 ;
  int tmp___19 ;
  size_t tmp___20 ;
  int tmp___21 ;

  {
#line 3569
  tmp = jit_op_first(jit->ops);
#line 3569
  op = tmp;
#line 3569
  while ((unsigned long )op != (unsigned long )((void *)0)) {
#line 3570
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1448U) {
#line 3570
      goto _L;
    } else
#line 3570
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1456U) {
      _L: /* CIL Label */ 
#line 3571
      buf = jit->buf + op->patch_addr;
#line 3572
      tmp___2 = jit_is_label(jit, (void *)op->arg[1]);
#line 3572
      if (tmp___2) {
#line 3572
        tmp___1 = ((jit_label *)op->arg[1])->pos;
      } else {
#line 3572
        tmp___1 = (size_t )op->arg[1];
      }
#line 3572
      addr = (jit_value )tmp___1;
#line 3573
      while (1) {
#line 3573
        while (1) {
#line 3573
          if (sizeof(void *) > 4ULL) {
#line 3573
            tmp___3 = 8;
          } else {
#line 3573
            tmp___3 = 0;
          }
#line 3573
          if (op->r_arg[0] > 7L) {
#line 3573
            tmp___4 = 1;
          } else {
#line 3573
            tmp___4 = 0;
          }
#line 3573
          _amd64_rex_bits = (unsigned char )(tmp___3 | tmp___4);
#line 3573
          if ((int )_amd64_rex_bits != 0) {
#line 3573
            tmp___5 = buf;
#line 3573
            buf ++;
#line 3573
            *tmp___5 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          } else
#line 3573
          if (sizeof(void *) == 1ULL) {
#line 3573
            tmp___5 = buf;
#line 3573
            buf ++;
#line 3573
            *tmp___5 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          }
#line 3573
          break;
        }
#line 3573
        tmp___6 = buf;
#line 3573
        buf ++;
#line 3573
        *tmp___6 = (unsigned char )(184L + (op->r_arg[0] & 7L));
#line 3573
        if (sizeof(void *) == 8ULL) {
#line 3573
          while (1) {
#line 3573
            imb.val = (size_t )(jit->buf + addr);
#line 3573
            tmp___7 = buf;
#line 3573
            buf ++;
#line 3573
            *tmp___7 = imb.b[0];
#line 3573
            tmp___8 = buf;
#line 3573
            buf ++;
#line 3573
            *tmp___8 = imb.b[1];
#line 3573
            tmp___9 = buf;
#line 3573
            buf ++;
#line 3573
            *tmp___9 = imb.b[2];
#line 3573
            tmp___10 = buf;
#line 3573
            buf ++;
#line 3573
            *tmp___10 = imb.b[3];
#line 3573
            tmp___11 = buf;
#line 3573
            buf ++;
#line 3573
            *tmp___11 = imb.b[4];
#line 3573
            tmp___12 = buf;
#line 3573
            buf ++;
#line 3573
            *tmp___12 = imb.b[5];
#line 3573
            tmp___13 = buf;
#line 3573
            buf ++;
#line 3573
            *tmp___13 = imb.b[6];
#line 3573
            tmp___14 = buf;
#line 3573
            buf ++;
#line 3573
            *tmp___14 = imb.b[7];
#line 3573
            break;
          }
        } else {
#line 3573
          while (1) {
#line 3573
            imb___0.val = (int )((size_t )(jit->buf + addr));
#line 3573
            tmp___15 = buf;
#line 3573
            buf ++;
#line 3573
            *tmp___15 = imb___0.b[0];
#line 3573
            tmp___16 = buf;
#line 3573
            buf ++;
#line 3573
            *tmp___16 = imb___0.b[1];
#line 3573
            tmp___17 = buf;
#line 3573
            buf ++;
#line 3573
            *tmp___17 = imb___0.b[2];
#line 3573
            tmp___18 = buf;
#line 3573
            buf ++;
#line 3573
            *tmp___18 = imb___0.b[3];
#line 3573
            break;
          }
        }
#line 3573
        break;
      }
    }
#line 3577
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1424U) {
#line 3577
      goto _L___0;
    } else
#line 3577
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1432U) {
      _L___0: /* CIL Label */ 
#line 3578
      buf___0 = jit->buf + op->patch_addr;
#line 3579
      tmp___21 = jit_is_label(jit, (void *)op->arg[0]);
#line 3579
      if (tmp___21) {
#line 3579
        tmp___20 = ((jit_label *)op->arg[0])->pos;
      } else {
#line 3579
        tmp___20 = (size_t )op->arg[0];
      }
#line 3579
      addr___0 = (jit_value )tmp___20;
#line 3580
      *((jit_value *)buf___0) = (jit_value )(jit->buf + addr___0);
    }
#line 3569
    op = op->next;
  }
#line 3583
  return;
}
}
/* END FUNCTION-DEF jit_patch_local_addrs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_dead_code_analysis LOC=UNKNOWN */
static void jit_dead_code_analysis(struct jit *jit , int remove_dead_code ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  jit_op *op___0 ;
  jit_op *tmp___0 ;
  jit_op *op___1 ;
  jit_op *tmp___1 ;
  jit_op *op___2 ;
  jit_op *tmp___2 ;
  jit_op *next ;

  {
#line 3988
  tmp = jit_op_first(jit->ops);
#line 3988
  op = tmp;
#line 3988
  while (op) {
#line 3989
    op->in_use = (unsigned char)0;
#line 3988
    op = op->next;
  }
#line 3992
  tmp___0 = jit_op_first(jit->ops);
#line 3992
  op___0 = tmp___0;
#line 3992
  while (op___0) {
#line 3993
    if ((unsigned int )((jit_opcode )((int )op___0->code & 0xfff8)) == 128U) {
#line 3993
      mark_livecode(op___0);
    }
#line 3994
    if ((unsigned int )((jit_opcode )((int )op___0->code & 0xfff8)) == 1424U) {
#line 3994
      mark_livecode(op___0->jmp_addr);
    }
#line 3992
    op___0 = op___0->next;
  }
#line 3999
  tmp___1 = jit_op_first(jit->ops);
#line 3999
  op___1 = tmp___1;
#line 3999
  while (op___1) {
#line 4000
    if ((unsigned int )((jit_opcode )((int )op___1->code & 0xfff8)) == 8U) {
#line 4000
      op___1->in_use = (unsigned char)1;
    }
#line 4001
    if ((unsigned int )((jit_opcode )((int )op___1->code & 0xfff8)) == 1408U) {
#line 4001
      op___1->in_use = (unsigned char)1;
    }
#line 4002
    if ((unsigned int )((jit_opcode )((int )op___1->code & 0xfff8)) == 1424U) {
#line 4002
      op___1->in_use = (unsigned char)1;
    }
#line 4003
    if ((unsigned int )((jit_opcode )((int )op___1->code & 0xfff8)) == 1432U) {
#line 4003
      op___1->in_use = (unsigned char)1;
    }
#line 4004
    if ((unsigned int )((jit_opcode )((int )op___1->code & 0xfff8)) == 1440U) {
#line 4004
      op___1->in_use = (unsigned char)1;
    }
#line 4005
    if ((unsigned int )((jit_opcode )((int )op___1->code & 0xfff8)) == 136U) {
#line 4005
      op___1->in_use = (unsigned char)1;
    }
#line 4006
    if ((unsigned int )((jit_opcode )((int )op___1->code & 0xfff8)) == 144U) {
#line 4006
      op___1->in_use = (unsigned char)1;
    }
#line 4007
    if ((unsigned int )((jit_opcode )((int )op___1->code & 0xfff8)) == 1928U) {
#line 4007
      op___1->in_use = (unsigned char)1;
    }
#line 4008
    if ((unsigned int )((jit_opcode )((int )op___1->code & 0xfff8)) == 4120U) {
#line 4008
      op___1->in_use = (unsigned char)1;
    }
#line 3999
    op___1 = op___1->next;
  }
#line 4011
  if (! remove_dead_code) {
#line 4011
    return;
  }
#line 4013
  tmp___2 = jit_op_first(jit->ops);
#line 4013
  op___2 = tmp___2;
#line 4015
  while (op___2) {
#line 4016
    if (! op___2->in_use) {
#line 4017
      if ((unsigned int )((jit_opcode )((int )op___2->code & 0xfff8)) == 48U) {
#line 4017
        goto skip;
      }
#line 4018
      next = op___2->next;
#line 4019
      jit_op_delete(op___2);
#line 4020
      op___2 = next;
#line 4021
      continue;
    }
    skip: 
#line 4024
    op___2 = op___2->next;
  }
#line 4027
  return;
}
}
/* END FUNCTION-DEF jit_dead_code_analysis LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF required_stack_space_for_regs LOC=UNKNOWN */
static int required_stack_space_for_regs(struct jit *jit , jit_op *op ) 
{ 
  struct jit_reg_allocator *al ;
  int space ;
  struct jit_func_info *tmp ;
  int i ;
  jit_hw_reg *reg ;
  int tmp___0 ;
  int i___0 ;
  jit_hw_reg *reg___0 ;
  int tmp___1 ;

  {
#line 2895
  al = jit->reg_al;
#line 2897
  space = (int )sizeof(void *);
#line 2898
  tmp = jit_current_func_info(jit);
#line 2898
  if (! tmp->has_prolog) {
#line 2898
    space += (int )sizeof(void *);
  }
#line 2900
  i = 0;
#line 2900
  while (i < al->gp_reg_cnt) {
#line 2901
    reg = al->gp_regs + i;
#line 2902
    if (! reg->callee_saved) {
#line 2902
      tmp___0 = is_active_register(al, reg, op);
#line 2902
      if (tmp___0) {
#line 2903
        space += (int )sizeof(void *);
      }
    }
#line 2900
    i ++;
  }
#line 2906
  i___0 = 0;
#line 2906
  while (i___0 < al->fp_reg_cnt) {
#line 2907
    reg___0 = al->fp_regs + i___0;
#line 2908
    if (! reg___0->callee_saved) {
#line 2908
      tmp___1 = is_active_register(al, reg___0, op);
#line 2908
      if (tmp___1) {
#line 2909
        space = (int )((unsigned long long )space + sizeof(double ) * 2ULL);
      }
    }
#line 2906
    i___0 ++;
  }
#line 2911
  return (space);
}
}
/* END FUNCTION-DEF required_stack_space_for_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_disable_optimization LOC=UNKNOWN */
void jit_disable_optimization(struct jit *jit , int opt ) 
{ 


  {
#line 6264
  jit->optimizations &= (unsigned int )(~ opt);
#line 6265
  return;
}
}
/* END FUNCTION-DEF jit_disable_optimization LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_set_clone LOC=UNKNOWN */
__inline static jit_set *jit_set_clone(jit_set *s ) 
{ 
  jit_set *clone ;
  jit_set *tmp ;

  {
#line 599
  tmp = jit_set_new();
#line 599
  clone = tmp;
#line 600
  clone->root = jit_tree_clone(s->root);
#line 601
  return (clone);
}
}
/* END FUNCTION-DEF jit_set_clone LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF assign_regs LOC=UNKNOWN */
static void assign_regs(struct jit *jit , struct jit_op *op ) 
{ 
  int i ;
  int skip ;
  struct jit_reg_allocator *al ;
  struct jit_func_info *info ;
  jit_reg virt_reg ;

  {
#line 5480
  skip = 0;
#line 5481
  al = jit->reg_al;
#line 5485
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 128U) {
#line 5487
    info = (struct jit_func_info *)op->arg[1];
#line 5488
    al->current_func_info = info;
#line 5492
    assign_regs_for_args(al, op);
  } else
#line 5495
  if (op->prev) {
#line 5496
    rmap_free(op->regmap);
#line 5497
    op->regmap = rmap_clone((op->prev)->regmap);
  }
#line 5502
  switch ((unsigned int )((jit_opcode )((int )op->code & 0xfff8))) {
  case 392U: 
#line 5503
  prepare_registers_for_call(al, op);
#line 5503
  break;
  case 400U: 
#line 5505
  skip = 1;
#line 5505
  break;
  case 408U: 
#line 5506
  skip = 1;
#line 5506
  break;
  case 440U: 
#line 5509
  skip = assign_ret_reg(op, al->ret_reg);
#line 5509
  break;
  case 1088U: 
#line 5512
  skip = assign_ret_reg(op, al->fpret_reg);
#line 5512
  break;
  case 432U: 
#line 5514
  skip = assign_getarg(op, al);
#line 5514
  break;
  case 416U: 
#line 5515
  skip = assign_call(op, al);
#line 5515
  break;
  case 384U: 
#line 5516
  skip = assign_jmp(op, al);
#line 5516
  break;
  case 48U: 
#line 5517
  skip = spill_all_registers(op, al);
#line 5517
  break;
  case 4096U: 
#line 5518
  skip = force_spill(op);
#line 5518
  break;
  case 4104U: 
#line 5519
  skip = force_assoc(op, al);
#line 5519
  break;
  default: 
#line 5521
  break;
  }
#line 5524
  if (skip) {
#line 5524
    return;
  }
#line 5527
  i = 0;
#line 5527
  while (i < 3) {
#line 5528
    if ((((int )op->spec >> ((i + 1) - 1) * 2) & 0x03) == 0x01) {
#line 5528
      goto _L;
    } else
#line 5528
    if ((((int )op->spec >> ((i + 1) - 1) * 2) & 0x03) == 0x03) {
      _L: /* CIL Label */ 
#line 5529
      virt_reg = op->arg[i];
#line 5530
      if (((virt_reg >> 1) & 3L) == 2L) {
#line 5530
        associate_register_alias(al, op, i);
      } else {
#line 5531
        associate_register(al, op, i);
      }
    } else
#line 5532
    if ((((int )op->spec >> ((i + 1) - 1) * 2) & 0x03) == 0x02) {
#line 5534
      op->r_arg[i] = op->arg[i];
    }
#line 5527
    i ++;
  }
#line 5537
  return;
}
}
/* END FUNCTION-DEF assign_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_arg_layout_add LOC=UNKNOWN */
static void jit_arg_layout_add(struct jit_arg_layout *layout , int isfp , struct jit_out_arg *arg ) 
{ 
  int i ;
  int tmp ;
  struct jit_arg_layout_location *location ;
  struct jit_reg_allocator *reg_al ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1756
  tmp = layout->arg_index;
#line 1756
  (layout->arg_index) ++;
#line 1756
  i = tmp;
#line 1757
  location = & layout->arguments[i];
#line 1758
  reg_al = (layout->jit)->reg_al;
#line 1760
  location->oarg = arg;
#line 1761
  location->isfp = (char )isfp;
#line 1763
  if (! isfp) {
#line 1763
    if (layout->gp_index < reg_al->gp_arg_reg_cnt) {
#line 1764
      location->passed_in_reg = (char)1;
#line 1765
      tmp___0 = layout->gp_index;
#line 1765
      (layout->gp_index) ++;
#line 1765
      location->index = tmp___0;
    } else {
#line 1763
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 1766
  if (isfp) {
#line 1766
    if (layout->fp_index < reg_al->fp_arg_reg_cnt) {
#line 1767
      location->passed_in_reg = (char)1;
#line 1768
      tmp___1 = layout->fp_index;
#line 1768
      (layout->fp_index) ++;
#line 1768
      location->index = tmp___1;
    } else {
#line 1770
      location->passed_in_reg = (char)0;
#line 1771
      location->index = layout->stack_index;
#line 1772
      (layout->stack_index) ++;
    }
  } else {
#line 1770
    location->passed_in_reg = (char)0;
#line 1771
    location->index = layout->stack_index;
#line 1772
    (layout->stack_index) ++;
  }
#line 1774
  return;
}
}
/* END FUNCTION-DEF jit_arg_layout_add LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF insert_reg_op LOC=UNKNOWN */
static void insert_reg_op(int opcode , jit_op *op , jit_value r1 , jit_value r2 ) 
{ 
  jit_op *o ;
  struct jit_op *tmp ;

  {
#line 5203
  tmp = jit_op_new((unsigned short )opcode, (unsigned char )((0x02 << 2) | 0x02),
                   r1, r2, (jit_value )0, (unsigned char)0);
#line 5203
  o = tmp;
#line 5204
  o->r_arg[0] = o->arg[0];
#line 5205
  o->r_arg[1] = o->arg[1];
#line 5206
  jit_op_prepend(op, o);
#line 5207
  return;
}
}
/* END FUNCTION-DEF insert_reg_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_buf_expand LOC=UNKNOWN */
__inline static void jit_buf_expand(struct jit *jit ) 
{ 
  long pos ;
  void *tmp ;

  {
#line 6110
  pos = jit->ip - jit->buf;
#line 6111
  jit->buf_capacity *= 2U;
#line 6112
  tmp = realloc((void *)jit->buf, (size_t )jit->buf_capacity);
#line 6112
  jit->buf = (unsigned char *)tmp;
#line 6113
  jit->ip = jit->buf + pos;
#line 6114
  return;
}
}
/* END FUNCTION-DEF jit_buf_expand LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_push_callee_saved_regs LOC=UNKNOWN */
static int emit_push_callee_saved_regs(struct jit *jit , jit_op *op ) 
{ 
  int count ;
  jit_hw_reg *active_regs[32] ;
  int stack_space ;
  int tmp ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  x86_imm_buf imb ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  int stack_offset ;
  int i ;
  int tmp___16 ;

  {
#line 2800
  count = 0;
#line 2803
  tmp = list_callee_saved_regs(jit, op, active_regs, & count);
#line 2803
  stack_space = tmp;
#line 2804
  if (stack_space) {
#line 2804
    while (1) {
#line 2804
      if ((jit_value )stack_space >= -128L) {
#line 2804
        if ((jit_value )stack_space <= 127L) {
#line 2804
          while (1) {
#line 2804
            _amd64_rex_bits = (unsigned char)8;
#line 2804
            if ((int )_amd64_rex_bits != 0) {
#line 2804
              tmp___0 = jit->ip;
#line 2804
              (jit->ip) ++;
#line 2804
              *tmp___0 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
            }
#line 2804
            break;
          }
#line 2804
          tmp___1 = jit->ip;
#line 2804
          (jit->ip) ++;
#line 2804
          *tmp___1 = (unsigned char)131;
#line 2804
          while (1) {
#line 2804
            while (1) {
#line 2804
              tmp___2 = jit->ip;
#line 2804
              (jit->ip) ++;
#line 2804
              *tmp___2 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
#line 2804
              break;
            }
#line 2804
            break;
          }
#line 2804
          while (1) {
#line 2804
            *(jit->ip) = (unsigned char )(stack_space & 0xff);
#line 2804
            (jit->ip) ++;
#line 2804
            break;
          }
        } else {
#line 2804
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
#line 2804
        while (1) {
#line 2804
          _amd64_rex_bits___1 = (unsigned char)8;
#line 2804
          if ((int )_amd64_rex_bits___1 != 0) {
#line 2804
            tmp___9 = jit->ip;
#line 2804
            (jit->ip) ++;
#line 2804
            *tmp___9 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
          }
#line 2804
          break;
        }
#line 2804
        tmp___10 = jit->ip;
#line 2804
        (jit->ip) ++;
#line 2804
        *tmp___10 = (unsigned char)129;
#line 2804
        while (1) {
#line 2804
          while (1) {
#line 2804
            tmp___11 = jit->ip;
#line 2804
            (jit->ip) ++;
#line 2804
            *tmp___11 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
#line 2804
            break;
          }
#line 2804
          break;
        }
#line 2804
        while (1) {
#line 2804
          imb___0.val = stack_space;
#line 2804
          tmp___12 = jit->ip;
#line 2804
          (jit->ip) ++;
#line 2804
          *tmp___12 = imb___0.b[0];
#line 2804
          tmp___13 = jit->ip;
#line 2804
          (jit->ip) ++;
#line 2804
          *tmp___13 = imb___0.b[1];
#line 2804
          tmp___14 = jit->ip;
#line 2804
          (jit->ip) ++;
#line 2804
          *tmp___14 = imb___0.b[2];
#line 2804
          tmp___15 = jit->ip;
#line 2804
          (jit->ip) ++;
#line 2804
          *tmp___15 = imb___0.b[3];
#line 2804
          break;
        }
      }
#line 2804
      break;
    }
  }
#line 2805
  stack_offset = 0;
#line 2807
  i = 0;
#line 2807
  while (i < count) {
#line 2808
    tmp___16 = emit_push_reg(jit, active_regs[i], stack_offset);
#line 2808
    stack_offset += tmp___16;
#line 2807
    i ++;
  }
#line 2810
  return (stack_space / (int )sizeof(void *));
}
}
/* END FUNCTION-DEF emit_push_callee_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_tree_search LOC=UNKNOWN */
static jit_tree *jit_tree_search(jit_tree *h , jit_tree_key key ) 
{ 
  jit_tree *tmp ;
  jit_tree *tmp___0 ;

  {
#line 435
  if ((unsigned long )h == (unsigned long )((void *)0)) {
#line 435
    return (h);
  } else
#line 435
  if (h->key == key) {
#line 435
    return (h);
  }
#line 436
  if (h->key > key) {
#line 436
    tmp = jit_tree_search(h->left, key);
#line 436
    return (tmp);
  }
#line 437
  tmp___0 = jit_tree_search(h->right, key);
#line 437
  return (tmp___0);
}
}
/* END FUNCTION-DEF jit_tree_search LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF _cipher$_xtea_decipher LOC=UNKNOWN */
void _cipher$_xtea_decipher(unsigned int block_no , unsigned int num_rounds , unsigned int *v ,
                            unsigned int *key , unsigned int size ) 
{ 
  unsigned int i ;

  {
  i = 0;
  while (i < size / 8) {
    _cipher$_xtea_decipherBlock(num_rounds, v, key);
    v += 2;
    i ++;
  }
}
}
/* END FUNCTION-DEF _cipher$_xtea_decipher LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF prepare_registers_for_call LOC=UNKNOWN */
static void prepare_registers_for_call(struct jit_reg_allocator *al , jit_op *op ) 
{ 
  jit_value r ;
  jit_value reg ;
  jit_hw_reg *hreg ;
  int alive ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int spill ;
  jit_value spill_reg ;
  jit_hw_reg *freereg ;
  jit_hw_reg *tmp___2 ;
  int args ;
  jit_value tmp___3 ;
  int q ;
  jit_hw_reg *hreg___0 ;
  jit_hw_reg *tmp___4 ;
  int tmp___5 ;
  int q___0 ;
  jit_hw_reg *hreg___1 ;
  jit_hw_reg *tmp___6 ;
  int tmp___7 ;

  {
#line 5265
  hreg = (jit_hw_reg *)((void *)0);
#line 5267
  if (al->ret_reg) {
#line 5267
    hreg = rmap_is_associated(op->regmap, (al->ret_reg)->id, 0, & r);
  }
#line 5268
  if (hreg) {
#line 5272
    tmp = jit_set_get(op->live_out, (int )r);
#line 5272
    if (tmp) {
#line 5272
      tmp___1 = 1;
    } else {
#line 5272
      tmp___0 = jit_set_get(op->live_in, (int )r);
#line 5272
      if (tmp___0) {
#line 5272
        tmp___1 = 1;
      } else {
#line 5272
        tmp___1 = 0;
      }
    }
#line 5272
    alive = tmp___1;
#line 5273
    if (! alive) {
#line 5273
      goto skip;
    }
#line 5276
    tmp___2 = rmap_spill_candidate(al, op, r, & spill, & spill_reg, 1);
#line 5276
    freereg = tmp___2;
#line 5277
    if (freereg) {
#line 5277
      if (! spill) {
#line 5279
        rename_reg(op, freereg->id, (al->ret_reg)->id);
#line 5281
        rmap_unassoc(op->regmap, r);
#line 5282
        rmap_assoc(op->regmap, r, freereg);
      } else {
#line 5284
        sync_reg(op, hreg, r);
      }
    } else {
#line 5284
      sync_reg(op, hreg, r);
    }
  }
  skip: 
#line 5291
  if (al->fpret_reg) {
#line 5292
    hreg = rmap_is_associated(op->regmap, (al->fpret_reg)->id, 1, & r);
#line 5293
    if (hreg) {
#line 5293
      sync_reg(op, hreg, r);
    }
  }
#line 5298
  if (op->arg[0] < (jit_value )al->gp_arg_reg_cnt) {
#line 5298
    tmp___3 = op->arg[0];
  } else {
#line 5298
    tmp___3 = (jit_value )al->gp_arg_reg_cnt;
  }
#line 5298
  args = (int )tmp___3;
#line 5299
  q = 0;
#line 5299
  while (q < args) {
#line 5300
    tmp___4 = rmap_is_associated(op->regmap, (*(al->gp_arg_regs + q))->id, 0, & reg);
#line 5300
    hreg___0 = tmp___4;
#line 5301
    if (hreg___0) {
#line 5302
      tmp___5 = jit_set_get(op->live_out, (int )reg);
#line 5302
      if (tmp___5) {
#line 5302
        unload_reg(op, hreg___0, reg);
      }
#line 5303
      rmap_unassoc(op->regmap, reg);
    }
#line 5299
    q ++;
  }
#line 5306
  if (op->arg[1] < (jit_value )al->fp_arg_reg_cnt) {
#line 5306
    args = (int )op->arg[1];
  } else {
#line 5306
    args = al->fp_arg_reg_cnt;
  }
#line 5307
  q___0 = 0;
#line 5307
  while (q___0 < args) {
#line 5308
    tmp___6 = rmap_is_associated(op->regmap, (*(al->fp_arg_regs + q___0))->id, 1,
                                 & reg);
#line 5308
    hreg___1 = tmp___6;
#line 5309
    if (hreg___1) {
#line 5310
      if (hreg___1->id != (al->fpret_reg)->id) {
#line 5310
        tmp___7 = jit_set_get(op->live_out, (int )reg);
#line 5310
        if (tmp___7) {
#line 5310
          unload_reg(op, hreg___1, reg);
        }
      }
#line 5311
      rmap_unassoc(op->regmap, reg);
    }
#line 5307
    q___0 ++;
  }
#line 5314
  return;
}
}
/* END FUNCTION-DEF prepare_registers_for_call LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_is_associated_aux LOC=UNKNOWN */
__inline static jit_hw_reg *rmap_is_associated_aux(jit_tree *n , int reg_id , int fp ,
                                                   jit_value *virt_reg ) 
{ 
  jit_hw_reg *r ;
  jit_hw_reg *tmp ;

  {
#line 1881
  if ((unsigned long )n == (unsigned long )((void *)0)) {
#line 1881
    return ((jit_hw_reg *)((void *)0));
  }
#line 1882
  r = (jit_hw_reg *)n->value;
#line 1884
  if ((int )r->fp == fp) {
#line 1884
    if (r->id == reg_id) {
#line 1885
      if (virt_reg) {
#line 1885
        *virt_reg = n->key;
      }
#line 1886
      return (r);
    }
  }
#line 1889
  r = rmap_is_associated_aux(n->left, reg_id, fp, virt_reg);
#line 1890
  if (r) {
#line 1890
    return (r);
  } else {
#line 1891
    tmp = rmap_is_associated_aux(n->right, reg_id, fp, virt_reg);
#line 1891
    return (tmp);
  }
}
}
/* END FUNCTION-DEF rmap_is_associated_aux LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF stack_fparg_pos LOC=UNKNOWN */
__inline static int stack_fparg_pos(struct jit *jit , struct jit_func_info *info ,
                                    int arg ) 
{ 


  {
#line 1791
  return ((int )(- (info->allocai_mem + (long )((((info->gp_reg_count + info->fp_reg_count) + arg) + 1) * (int )sizeof(void *)))));
}
}
/* END FUNCTION-DEF stack_fparg_pos LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_set_free LOC=UNKNOWN */
__inline static void jit_set_free(jit_set *s ) 
{ 


  {
#line 606
  jit_tree_free(s->root);
#line 607
  free((void *)s);
#line 608
  return;
}
}
/* END FUNCTION-DEF jit_set_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF join_addr_addi LOC=UNKNOWN */
static int join_addr_addi(jit_op *op , jit_op *nextop ) 
{ 
  unsigned long long tmp ;

  {
#line 2301
  if (nextop->arg[2] >= (-0x7FFFFFFF-1)) {
#line 2301
    if (! (nextop->arg[2] <= 2147483647L)) {
#line 2301
      return (0);
    }
  } else {
#line 2301
    return (0);
  }
#line 2302
  make_nop(op);
#line 2304
  nextop->code = (unsigned short)2072;
#line 2305
  nextop->spec = (unsigned char )(((0x01 << 4) | (0x01 << 2)) | 0x03);
#line 2307
  nextop->arg[2] = nextop->arg[2];
#line 2309
  tmp = __builtin_object_size((void *)(& nextop->flt_imm), 0);
#line 2309
  __builtin___memcpy_chk((void *)(& nextop->flt_imm), (void const   *)(& nextop->arg[2]),
                         sizeof(jit_value ), tmp);
#line 2310
  nextop->arg[1] = op->arg[1];
#line 2311
  nextop->arg[2] = op->arg[2];
#line 2313
  return (1);
}
}
/* END FUNCTION-DEF join_addr_addi LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_push_arg LOC=UNKNOWN */
__inline static void emit_push_arg(struct jit *jit , struct jit_out_arg *arg ) 
{ 
  int sreg ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  int tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  x86_imm_buf imb ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  unsigned char *tmp___16 ;
  int tmp___17 ;
  unsigned char *tmp___18 ;
  int tmp___19 ;
  unsigned char *tmp___20 ;
  x86_imm_buf imb___0 ;
  int tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  int tmp___31 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  amd64_imm_buf imb___1 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;

  {
#line 2409
  if (arg->isreg) {
#line 2410
    tmp___31 = is_spilled(arg->value.generic, jit->prepared_args.op, & sreg);
#line 2410
    if (tmp___31) {
#line 2411
      while (1) {
#line 2411
        while (1) {
#line 2411
          _amd64_rex_bits = (unsigned char)0;
#line 2411
          if ((int )_amd64_rex_bits != 0) {
#line 2411
            tmp = jit->ip;
#line 2411
            (jit->ip) ++;
#line 2411
            *tmp = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          }
#line 2411
          break;
        }
#line 2411
        tmp___0 = jit->ip;
#line 2411
        (jit->ip) ++;
#line 2411
        *tmp___0 = (unsigned char)255;
#line 2411
        while (1) {
#line 2411
          if (0) {
#line 2411
            tmp___15 = stack_reg_pos(jit, (int )arg->value.generic);
#line 2411
            if (tmp___15 == 0) {
#line 2411
              while (1) {
#line 2411
                tmp___1 = jit->ip;
#line 2411
                (jit->ip) ++;
#line 2411
                *tmp___1 = (unsigned char )((6 << 3) | 4);
#line 2411
                break;
              }
#line 2411
              while (1) {
#line 2411
                tmp___2 = jit->ip;
#line 2411
                (jit->ip) ++;
#line 2411
                *tmp___2 = (unsigned char )((4 << 3) | 4);
#line 2411
                break;
              }
            } else {
#line 2411
              tmp___13 = stack_reg_pos(jit, (int )arg->value.generic);
#line 2411
              if ((jit_value )tmp___13 >= -128L) {
#line 2411
                tmp___14 = stack_reg_pos(jit, (int )arg->value.generic);
#line 2411
                if ((jit_value )tmp___14 <= 127L) {
#line 2411
                  while (1) {
#line 2411
                    tmp___3 = jit->ip;
#line 2411
                    (jit->ip) ++;
#line 2411
                    *tmp___3 = (unsigned char )(((1 << 6) | (6 << 3)) | 4);
#line 2411
                    break;
                  }
#line 2411
                  while (1) {
#line 2411
                    tmp___4 = jit->ip;
#line 2411
                    (jit->ip) ++;
#line 2411
                    *tmp___4 = (unsigned char )((4 << 3) | 4);
#line 2411
                    break;
                  }
#line 2411
                  while (1) {
#line 2411
                    tmp___5 = stack_reg_pos(jit, (int )arg->value.generic);
#line 2411
                    *(jit->ip) = (unsigned char )(tmp___5 & 0xff);
#line 2411
                    (jit->ip) ++;
#line 2411
                    break;
                  }
                } else {
#line 2411
                  goto _L;
                }
              } else {
                _L: /* CIL Label */ 
#line 2411
                while (1) {
#line 2411
                  tmp___6 = jit->ip;
#line 2411
                  (jit->ip) ++;
#line 2411
                  *tmp___6 = (unsigned char )(((2 << 6) | (6 << 3)) | 4);
#line 2411
                  break;
                }
#line 2411
                while (1) {
#line 2411
                  tmp___7 = jit->ip;
#line 2411
                  (jit->ip) ++;
#line 2411
                  *tmp___7 = (unsigned char )((4 << 3) | 4);
#line 2411
                  break;
                }
#line 2411
                while (1) {
#line 2411
                  tmp___8 = stack_reg_pos(jit, (int )arg->value.generic);
#line 2411
                  imb.val = tmp___8;
#line 2411
                  tmp___9 = jit->ip;
#line 2411
                  (jit->ip) ++;
#line 2411
                  *tmp___9 = imb.b[0];
#line 2411
                  tmp___10 = jit->ip;
#line 2411
                  (jit->ip) ++;
#line 2411
                  *tmp___10 = imb.b[1];
#line 2411
                  tmp___11 = jit->ip;
#line 2411
                  (jit->ip) ++;
#line 2411
                  *tmp___11 = imb.b[2];
#line 2411
                  tmp___12 = jit->ip;
#line 2411
                  (jit->ip) ++;
#line 2411
                  *tmp___12 = imb.b[3];
#line 2411
                  break;
                }
              }
            }
#line 2411
            break;
          }
#line 2411
          tmp___17 = stack_reg_pos(jit, (int )arg->value.generic);
#line 2411
          if (tmp___17 == 0) {

          }
#line 2411
          tmp___26 = stack_reg_pos(jit, (int )arg->value.generic);
#line 2411
          if ((jit_value )tmp___26 >= -128L) {
#line 2411
            tmp___27 = stack_reg_pos(jit, (int )arg->value.generic);
#line 2411
            if ((jit_value )tmp___27 <= 127L) {
#line 2411
              while (1) {
#line 2411
                tmp___18 = jit->ip;
#line 2411
                (jit->ip) ++;
#line 2411
                *tmp___18 = (unsigned char )(((1 << 6) | (6 << 3)) | 5);
#line 2411
                break;
              }
#line 2411
              while (1) {
#line 2411
                tmp___19 = stack_reg_pos(jit, (int )arg->value.generic);
#line 2411
                *(jit->ip) = (unsigned char )(tmp___19 & 0xff);
#line 2411
                (jit->ip) ++;
#line 2411
                break;
              }
            } else {
#line 2411
              goto _L___0;
            }
          } else {
            _L___0: /* CIL Label */ 
#line 2411
            while (1) {
#line 2411
              tmp___20 = jit->ip;
#line 2411
              (jit->ip) ++;
#line 2411
              *tmp___20 = (unsigned char )(((2 << 6) | (6 << 3)) | 5);
#line 2411
              break;
            }
#line 2411
            while (1) {
#line 2411
              tmp___21 = stack_reg_pos(jit, (int )arg->value.generic);
#line 2411
              imb___0.val = tmp___21;
#line 2411
              tmp___22 = jit->ip;
#line 2411
              (jit->ip) ++;
#line 2411
              *tmp___22 = imb___0.b[0];
#line 2411
              tmp___23 = jit->ip;
#line 2411
              (jit->ip) ++;
#line 2411
              *tmp___23 = imb___0.b[1];
#line 2411
              tmp___24 = jit->ip;
#line 2411
              (jit->ip) ++;
#line 2411
              *tmp___24 = imb___0.b[2];
#line 2411
              tmp___25 = jit->ip;
#line 2411
              (jit->ip) ++;
#line 2411
              *tmp___25 = imb___0.b[3];
#line 2411
              break;
            }
          }
#line 2411
          break;
        }
#line 2411
        break;
      }
    } else {
#line 2412
      while (1) {
#line 2412
        while (1) {
#line 2412
          if (sreg > 7) {
#line 2412
            tmp___28 = 1;
          } else {
#line 2412
            tmp___28 = 0;
          }
#line 2412
          _amd64_rex_bits___0 = (unsigned char )tmp___28;
#line 2412
          if ((int )_amd64_rex_bits___0 != 0) {
#line 2412
            tmp___29 = jit->ip;
#line 2412
            (jit->ip) ++;
#line 2412
            *tmp___29 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
          }
#line 2412
          break;
        }
#line 2412
        tmp___30 = jit->ip;
#line 2412
        (jit->ip) ++;
#line 2412
        *tmp___30 = (unsigned char )(80 + (sreg & 0x7));
#line 2412
        break;
      }
    }
  } else {
#line 2414
    while (1) {
#line 2414
      while (1) {
#line 2414
        if ((int )sizeof(void *) > 4) {
#line 2414
          tmp___32 = 8;
        } else {
#line 2414
          tmp___32 = 0;
        }
#line 2414
        _amd64_rex_bits___1 = (unsigned char )tmp___32;
#line 2414
        if ((int )_amd64_rex_bits___1 != 0) {
#line 2414
          tmp___33 = jit->ip;
#line 2414
          (jit->ip) ++;
#line 2414
          *tmp___33 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
        } else
#line 2414
        if ((int )sizeof(void *) == 1) {
#line 2414
          tmp___33 = jit->ip;
#line 2414
          (jit->ip) ++;
#line 2414
          *tmp___33 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
        }
#line 2414
        break;
      }
#line 2414
      tmp___34 = jit->ip;
#line 2414
      (jit->ip) ++;
#line 2414
      *tmp___34 = (unsigned char)184;
#line 2414
      if ((int )sizeof(void *) == 8) {
#line 2414
        while (1) {
#line 2414
          imb___1.val = (size_t )arg->value.generic;
#line 2414
          tmp___35 = jit->ip;
#line 2414
          (jit->ip) ++;
#line 2414
          *tmp___35 = imb___1.b[0];
#line 2414
          tmp___36 = jit->ip;
#line 2414
          (jit->ip) ++;
#line 2414
          *tmp___36 = imb___1.b[1];
#line 2414
          tmp___37 = jit->ip;
#line 2414
          (jit->ip) ++;
#line 2414
          *tmp___37 = imb___1.b[2];
#line 2414
          tmp___38 = jit->ip;
#line 2414
          (jit->ip) ++;
#line 2414
          *tmp___38 = imb___1.b[3];
#line 2414
          tmp___39 = jit->ip;
#line 2414
          (jit->ip) ++;
#line 2414
          *tmp___39 = imb___1.b[4];
#line 2414
          tmp___40 = jit->ip;
#line 2414
          (jit->ip) ++;
#line 2414
          *tmp___40 = imb___1.b[5];
#line 2414
          tmp___41 = jit->ip;
#line 2414
          (jit->ip) ++;
#line 2414
          *tmp___41 = imb___1.b[6];
#line 2414
          tmp___42 = jit->ip;
#line 2414
          (jit->ip) ++;
#line 2414
          *tmp___42 = imb___1.b[7];
#line 2414
          break;
        }
      } else {
#line 2414
        while (1) {
#line 2414
          imb___2.val = (int )((size_t )arg->value.generic);
#line 2414
          tmp___43 = jit->ip;
#line 2414
          (jit->ip) ++;
#line 2414
          *tmp___43 = imb___2.b[0];
#line 2414
          tmp___44 = jit->ip;
#line 2414
          (jit->ip) ++;
#line 2414
          *tmp___44 = imb___2.b[1];
#line 2414
          tmp___45 = jit->ip;
#line 2414
          (jit->ip) ++;
#line 2414
          *tmp___45 = imb___2.b[2];
#line 2414
          tmp___46 = jit->ip;
#line 2414
          (jit->ip) ++;
#line 2414
          *tmp___46 = imb___2.b[3];
#line 2414
          break;
        }
      }
#line 2414
      break;
    }
#line 2415
    while (1) {
#line 2415
      while (1) {
#line 2415
        _amd64_rex_bits___2 = (unsigned char)0;
#line 2415
        if ((int )_amd64_rex_bits___2 != 0) {
#line 2415
          tmp___47 = jit->ip;
#line 2415
          (jit->ip) ++;
#line 2415
          *tmp___47 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
        }
#line 2415
        break;
      }
#line 2415
      tmp___48 = jit->ip;
#line 2415
      (jit->ip) ++;
#line 2415
      *tmp___48 = (unsigned char)80;
#line 2415
      break;
    }
  }
#line 2417
  return;
}
}
/* END FUNCTION-DEF emit_push_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_correct_float_imms LOC=UNKNOWN */
__inline static void jit_correct_float_imms(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  int imm_arg ;
  int i ;
  jit_op *newop ;
  struct jit_op *tmp___0 ;

  {
#line 5930
  tmp = jit_op_first(jit->ops);
#line 5930
  op = tmp;
#line 5930
  while ((unsigned long )op != (unsigned long )((void *)0)) {
#line 5931
    if (! ((int )op->code & 0x02)) {
#line 5931
      goto __Cont;
    }
#line 5932
    if (! op->fp) {
#line 5932
      goto __Cont;
    }
#line 5934
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1024U) {
#line 5934
      goto __Cont;
    }
#line 5935
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 408U) {
#line 5935
      goto __Cont;
    }
#line 5937
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1280U) {
#line 5937
      goto __Cont;
    }
#line 5938
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1288U) {
#line 5938
      goto __Cont;
    }
#line 5939
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1296U) {
#line 5939
      goto __Cont;
    }
#line 5940
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1304U) {
#line 5940
      goto __Cont;
    }
#line 5941
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 128U) {
#line 5945
      goto __Cont;
    }
#line 5953
    i = 1;
#line 5953
    while (i < 4) {
#line 5954
      if ((((int )op->spec >> (i - 1) * 2) & 0x03) == 0x02) {
#line 5954
        imm_arg = i - 1;
      }
#line 5953
      i ++;
    }
#line 5957
    tmp___0 = jit_op_new((unsigned short)1026, (unsigned char )((0x02 << 2) | 0x03),
                         (jit_value )(1 | (1 << 1)), (jit_value )0, (jit_value )0,
                         (unsigned char)0);
#line 5957
    newop = tmp___0;
#line 5958
    newop->fp = (unsigned char)1;
#line 5959
    newop->flt_imm = op->flt_imm;
#line 5960
    jit_op_prepend(op, newop);
#line 5961
    op->code = (unsigned short )((int )op->code & -4);
#line 5962
    op->code = (unsigned short )((int )op->code | 0x01);
#line 5964
    op->spec = (unsigned char )((int )op->spec & ~ (0x3 << 2 * imm_arg));
#line 5965
    op->spec = (unsigned char )((int )op->spec | (0x01 << 2 * imm_arg));
#line 5966
    op->arg[imm_arg] = (jit_value )(1 | (1 << 1));
    __Cont: /* CIL Label */ 
#line 5930
    op = op->next;
  }
#line 5968
  return;
}
}
/* END FUNCTION-DEF jit_correct_float_imms LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF check_code_references LOC=UNKNOWN */
static int check_code_references(jit_op *op , char *msg_buf ) 
{ 
  int tmp ;

  {
#line 5163
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1448U) {
#line 5163
    goto _L;
  } else
#line 5163
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1424U) {
    _L: /* CIL Label */ 
#line 5163
    tmp = jit_op_is_data_op(op->jmp_addr);
#line 5163
    if (tmp) {
#line 5164
      append_msg(msg_buf, "invalid code reference");
#line 5165
      return (32);
    }
  }
#line 5167
  return (0);
}
}
/* END FUNCTION-DEF check_code_references LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF assign_getarg LOC=UNKNOWN */
static int assign_getarg(jit_op *op , struct jit_reg_allocator *al ) 
{ 
  int arg_id ;
  struct jit_inp_arg *arg ;
  int reg_id ;
  int tmp ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp___0 ;
  int tmp___1 ;

  {
#line 5331
  arg_id = (int )op->arg[1];
#line 5332
  arg = (al->current_func_info)->args + arg_id;
#line 5333
  if ((unsigned int )arg->type == 2U) {
#line 5333
    tmp = 1;
  } else {
#line 5333
    tmp = 0;
  }
#line 5333
  reg_id = ((tmp & 0x01) | (3 << 1)) | ((arg_id & 0xfffffff) << 4);
#line 5334
  tmp___1 = jit_set_get(op->live_out, reg_id);
#line 5334
  if (! tmp___1) {
#line 5339
    if ((unsigned int )arg->type != 2U) {
#line 5339
      if (arg->size == (int )sizeof(void *)) {
#line 5339
        goto _L;
      } else {
#line 5339
        goto _L___0;
      }
    } else
    _L___0: /* CIL Label */ 
#line 5339
    if ((unsigned int )arg->type == 2U) {
      _L: /* CIL Label */ 
#line 5344
      tmp___0 = rmap_get(op->regmap, (jit_value )reg_id);
#line 5344
      hreg = tmp___0;
#line 5345
      if (hreg) {
#line 5346
        rmap_unassoc(op->regmap, (jit_value )reg_id);
#line 5347
        rmap_assoc(op->regmap, op->arg[0], hreg);
#line 5348
        op->r_arg[0] = (jit_value )hreg->id;
#line 5349
        op->r_arg[1] = op->arg[1];
#line 5351
        op->code = (unsigned short)0;
#line 5352
        return (1);
      }
    }
  }
#line 5356
  return (0);
}
}
/* END FUNCTION-DEF assign_getarg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_div_op LOC=UNKNOWN */
static void emit_sse_div_op(struct jit *jit , jit_value a1 , jit_value a2 , jit_value a3 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___12 ;
  int tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___19 ;
  int tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___31 ;
  int tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___38 ;
  int tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;

  {
#line 1542
  if (a1 == a2) {
#line 1543
    while (1) {
#line 1543
      tmp = jit->ip;
#line 1543
      (jit->ip) ++;
#line 1543
      *tmp = (unsigned char)242;
#line 1543
      while (1) {
#line 1543
        if (a1 > 7L) {
#line 1543
          tmp___0 = 4;
        } else {
#line 1543
          tmp___0 = 0;
        }
#line 1543
        if (a3 > 7L) {
#line 1543
          tmp___1 = 1;
        } else {
#line 1543
          tmp___1 = 0;
        }
#line 1543
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
#line 1543
        if ((int )_amd64_rex_bits != 0) {
#line 1543
          tmp___2 = jit->ip;
#line 1543
          (jit->ip) ++;
#line 1543
          *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
        }
#line 1543
        break;
      }
#line 1543
      tmp___3 = jit->ip;
#line 1543
      (jit->ip) ++;
#line 1543
      *tmp___3 = (unsigned char)15;
#line 1543
      tmp___4 = jit->ip;
#line 1543
      (jit->ip) ++;
#line 1543
      *tmp___4 = (unsigned char)94;
#line 1543
      while (1) {
#line 1543
        while (1) {
#line 1543
          tmp___5 = jit->ip;
#line 1543
          (jit->ip) ++;
#line 1543
          *tmp___5 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a3 & 7L));
#line 1543
          break;
        }
#line 1543
        break;
      }
#line 1543
      break;
    }
  } else
#line 1544
  if (a1 == a3) {
#line 1546
    while (1) {
#line 1546
      while (1) {
#line 1546
        tmp___6 = jit->ip;
#line 1546
        (jit->ip) ++;
#line 1546
        *tmp___6 = (unsigned char)102;
#line 1546
        while (1) {
#line 1546
          tmp___7 = jit->ip;
#line 1546
          (jit->ip) ++;
#line 1546
          *tmp___7 = (unsigned char)15;
#line 1546
          tmp___8 = jit->ip;
#line 1546
          (jit->ip) ++;
#line 1546
          *tmp___8 = (unsigned char)198;
#line 1546
          while (1) {
#line 1546
            while (1) {
#line 1546
              tmp___9 = jit->ip;
#line 1546
              (jit->ip) ++;
#line 1546
              *tmp___9 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
#line 1546
              break;
            }
#line 1546
            break;
          }
#line 1546
          break;
        }
#line 1546
        break;
      }
#line 1546
      tmp___10 = jit->ip;
#line 1546
      (jit->ip) ++;
#line 1546
      *tmp___10 = (unsigned char)0;
#line 1546
      break;
    }
#line 1549
    while (1) {
#line 1549
      tmp___11 = jit->ip;
#line 1549
      (jit->ip) ++;
#line 1549
      *tmp___11 = (unsigned char)242;
#line 1549
      while (1) {
#line 1549
        if (a2 > 7L) {
#line 1549
          tmp___12 = 4;
        } else {
#line 1549
          tmp___12 = 0;
        }
#line 1549
        if (a3 > 7L) {
#line 1549
          tmp___13 = 1;
        } else {
#line 1549
          tmp___13 = 0;
        }
#line 1549
        _amd64_rex_bits___0 = (unsigned char )(tmp___12 | tmp___13);
#line 1549
        if ((int )_amd64_rex_bits___0 != 0) {
#line 1549
          tmp___14 = jit->ip;
#line 1549
          (jit->ip) ++;
#line 1549
          *tmp___14 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
        }
#line 1549
        break;
      }
#line 1549
      tmp___15 = jit->ip;
#line 1549
      (jit->ip) ++;
#line 1549
      *tmp___15 = (unsigned char)15;
#line 1549
      tmp___16 = jit->ip;
#line 1549
      (jit->ip) ++;
#line 1549
      *tmp___16 = (unsigned char)94;
#line 1549
      while (1) {
#line 1549
        while (1) {
#line 1549
          tmp___17 = jit->ip;
#line 1549
          (jit->ip) ++;
#line 1549
          *tmp___17 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a3 & 7L));
#line 1549
          break;
        }
#line 1549
        break;
      }
#line 1549
      break;
    }
#line 1550
    while (1) {
#line 1550
      tmp___18 = jit->ip;
#line 1550
      (jit->ip) ++;
#line 1550
      *tmp___18 = (unsigned char)242;
#line 1550
      while (1) {
#line 1550
        if (a1 > 7L) {
#line 1550
          tmp___19 = 4;
        } else {
#line 1550
          tmp___19 = 0;
        }
#line 1550
        if (a2 > 7L) {
#line 1550
          tmp___20 = 1;
        } else {
#line 1550
          tmp___20 = 0;
        }
#line 1550
        _amd64_rex_bits___1 = (unsigned char )(tmp___19 | tmp___20);
#line 1550
        if ((int )_amd64_rex_bits___1 != 0) {
#line 1550
          tmp___21 = jit->ip;
#line 1550
          (jit->ip) ++;
#line 1550
          *tmp___21 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
        }
#line 1550
        break;
      }
#line 1550
      tmp___22 = jit->ip;
#line 1550
      (jit->ip) ++;
#line 1550
      *tmp___22 = (unsigned char)15;
#line 1550
      tmp___23 = jit->ip;
#line 1550
      (jit->ip) ++;
#line 1550
      *tmp___23 = (unsigned char)16;
#line 1550
      while (1) {
#line 1550
        while (1) {
#line 1550
          tmp___24 = jit->ip;
#line 1550
          (jit->ip) ++;
#line 1550
          *tmp___24 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
#line 1550
          break;
        }
#line 1550
        break;
      }
#line 1550
      break;
    }
#line 1553
    while (1) {
#line 1553
      while (1) {
#line 1553
        tmp___25 = jit->ip;
#line 1553
        (jit->ip) ++;
#line 1553
        *tmp___25 = (unsigned char)102;
#line 1553
        while (1) {
#line 1553
          tmp___26 = jit->ip;
#line 1553
          (jit->ip) ++;
#line 1553
          *tmp___26 = (unsigned char)15;
#line 1553
          tmp___27 = jit->ip;
#line 1553
          (jit->ip) ++;
#line 1553
          *tmp___27 = (unsigned char)198;
#line 1553
          while (1) {
#line 1553
            while (1) {
#line 1553
              tmp___28 = jit->ip;
#line 1553
              (jit->ip) ++;
#line 1553
              *tmp___28 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
#line 1553
              break;
            }
#line 1553
            break;
          }
#line 1553
          break;
        }
#line 1553
        break;
      }
#line 1553
      tmp___29 = jit->ip;
#line 1553
      (jit->ip) ++;
#line 1553
      *tmp___29 = (unsigned char)1;
#line 1553
      break;
    }
  } else {
#line 1555
    while (1) {
#line 1555
      tmp___30 = jit->ip;
#line 1555
      (jit->ip) ++;
#line 1555
      *tmp___30 = (unsigned char)242;
#line 1555
      while (1) {
#line 1555
        if (a1 > 7L) {
#line 1555
          tmp___31 = 4;
        } else {
#line 1555
          tmp___31 = 0;
        }
#line 1555
        if (a2 > 7L) {
#line 1555
          tmp___32 = 1;
        } else {
#line 1555
          tmp___32 = 0;
        }
#line 1555
        _amd64_rex_bits___2 = (unsigned char )(tmp___31 | tmp___32);
#line 1555
        if ((int )_amd64_rex_bits___2 != 0) {
#line 1555
          tmp___33 = jit->ip;
#line 1555
          (jit->ip) ++;
#line 1555
          *tmp___33 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
        }
#line 1555
        break;
      }
#line 1555
      tmp___34 = jit->ip;
#line 1555
      (jit->ip) ++;
#line 1555
      *tmp___34 = (unsigned char)15;
#line 1555
      tmp___35 = jit->ip;
#line 1555
      (jit->ip) ++;
#line 1555
      *tmp___35 = (unsigned char)16;
#line 1555
      while (1) {
#line 1555
        while (1) {
#line 1555
          tmp___36 = jit->ip;
#line 1555
          (jit->ip) ++;
#line 1555
          *tmp___36 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
#line 1555
          break;
        }
#line 1555
        break;
      }
#line 1555
      break;
    }
#line 1556
    while (1) {
#line 1556
      tmp___37 = jit->ip;
#line 1556
      (jit->ip) ++;
#line 1556
      *tmp___37 = (unsigned char)242;
#line 1556
      while (1) {
#line 1556
        if (a1 > 7L) {
#line 1556
          tmp___38 = 4;
        } else {
#line 1556
          tmp___38 = 0;
        }
#line 1556
        if (a3 > 7L) {
#line 1556
          tmp___39 = 1;
        } else {
#line 1556
          tmp___39 = 0;
        }
#line 1556
        _amd64_rex_bits___3 = (unsigned char )(tmp___38 | tmp___39);
#line 1556
        if ((int )_amd64_rex_bits___3 != 0) {
#line 1556
          tmp___40 = jit->ip;
#line 1556
          (jit->ip) ++;
#line 1556
          *tmp___40 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
        }
#line 1556
        break;
      }
#line 1556
      tmp___41 = jit->ip;
#line 1556
      (jit->ip) ++;
#line 1556
      *tmp___41 = (unsigned char)15;
#line 1556
      tmp___42 = jit->ip;
#line 1556
      (jit->ip) ++;
#line 1556
      *tmp___42 = (unsigned char)94;
#line 1556
      while (1) {
#line 1556
        while (1) {
#line 1556
          tmp___43 = jit->ip;
#line 1556
          (jit->ip) ++;
#line 1556
          *tmp___43 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a3 & 7L));
#line 1556
          break;
        }
#line 1556
        break;
      }
#line 1556
      break;
    }
  }
#line 1558
  return;
}
}
/* END FUNCTION-DEF emit_sse_div_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_op_is_data_op LOC=UNKNOWN */
static int jit_op_is_data_op(jit_op *op ) 
{ 
  jit_opcode code ;
  int tmp ;

  {
#line 5128
  while (1) {
#line 5128
    if (op) {
#line 5128
      if (! ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 136U)) {
#line 5128
        if (! ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 144U)) {
#line 5128
          break;
        }
      }
    } else {
#line 5128
      break;
    }
#line 5128
    op = op->next;
  }
#line 5129
  if (! op) {
#line 5129
    return (0);
  }
#line 5131
  code = (jit_opcode )((int )op->code & 0xfff8);
#line 5132
  if ((unsigned int )code == 1408U) {
#line 5132
    tmp = 1;
  } else
#line 5132
  if ((unsigned int )code == 1416U) {
#line 5132
    tmp = 1;
  } else
#line 5132
  if ((unsigned int )code == 1424U) {
#line 5132
    tmp = 1;
  } else
#line 5132
  if ((unsigned int )code == 1432U) {
#line 5132
    tmp = 1;
  } else {
#line 5132
    tmp = 0;
  }
#line 5132
  return (tmp);
}
}
/* END FUNCTION-DEF jit_op_is_data_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_optimize_unused_assignments LOC=UNKNOWN */
void jit_optimize_unused_assignments(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  int tmp___0 ;

  {
#line 2145
  tmp = jit_op_first(jit->ops);
#line 2145
  op = tmp;
#line 2145
  while ((unsigned long )op != (unsigned long )((void *)0)) {
#line 2146
    if (((int )op->spec & 0x03) == 0x03) {
#line 2148
      if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 520U) {
#line 2149
        goto __Cont;
      } else
#line 2148
      if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 528U) {
#line 2149
        goto __Cont;
      } else
#line 2148
      if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 544U) {
#line 2149
        goto __Cont;
      } else
#line 2148
      if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 552U) {
#line 2149
        goto __Cont;
      }
#line 2151
      tmp___0 = jit_set_get(op->live_out, (int )op->arg[0]);
#line 2151
      if (! tmp___0) {
#line 2152
        op->code = (unsigned short)0;
#line 2153
        op->spec = (unsigned char)0;
      }
    }
    __Cont: /* CIL Label */ 
#line 2145
    op = op->next;
  }
#line 2157
  return;
}
}
/* END FUNCTION-DEF jit_optimize_unused_assignments LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF sync_reg LOC=UNKNOWN */
static void sync_reg(jit_op *op , jit_hw_reg *hreg , jit_value virt_reg ) 
{ 


  {
#line 5215
  insert_reg_op(32, op, virt_reg, (jit_value )hreg->id);
#line 5216
  return;
}
}
/* END FUNCTION-DEF sync_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF assign_ret_reg LOC=UNKNOWN */
static int assign_ret_reg(jit_op *op , jit_hw_reg *ret_reg ) 
{ 


  {
#line 5324
  rmap_assoc(op->regmap, op->arg[0], ret_reg);
#line 5325
  return (1);
}
}
/* END FUNCTION-DEF assign_ret_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_op_is_cflow LOC=UNKNOWN */
__inline static int jit_op_is_cflow(jit_op *op ) 
{ 
  int tmp ;

  {
#line 4352
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 416U) {
#line 4352
    goto _L;
  } else
#line 4352
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 384U) {
    _L: /* CIL Label */ 
#line 4352
    if ((int )op->code & 0x02) {
#line 4352
      return (1);
    }
  }
#line 4353
  tmp = jit_op_is_cond_branch(op);
#line 4353
  if (tmp) {
#line 4353
    return (1);
  }
#line 4355
  return (0);
}
}
/* END FUNCTION-DEF jit_op_is_cflow LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isalnum LOC=UNKNOWN */
__inline int isalnum(int _c ) 
{ 
  int tmp ;

  {
#line 214 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  tmp = __istype(_c, 1280UL);
#line 214
  return (tmp);
}
}
/* END FUNCTION-DEF isalnum LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_sync LOC=UNKNOWN */
static void rmap_sync(jit_op *op , jit_rmap *current , jit_rmap *target , int mode ) 
{ 


  {
#line 1973 "./jitter-Darwin-X86-64.c"
  rmap_sync_aux(current->map, target->map, op, mode);
#line 1974
  return;
}
}
/* END FUNCTION-DEF rmap_sync LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_shift_op LOC=UNKNOWN */
static void emit_shift_op(struct jit *jit , struct jit_op *op , int shift_op , int imm ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  long tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  int destreg ;
  int valreg ;
  int shiftreg ;
  int cx_in_use ;
  int tmp___14 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___18 ;
  int tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  long tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  long tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___35 ;
  int tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  long tmp___40 ;
  unsigned char *tmp___41 ;
  x86_imm_buf imb ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char _amd64_rex_bits___6 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  jit_hw_reg *tmp___69 ;
  jit_hw_reg *tmp___70 ;
  int tmpreg ;
  int tmp___71 ;
  int tmp_in_use ;
  int tmp___72 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___77 ;
  int tmp___78 ;
  int tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  long tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char _amd64_rex_bits___9 ;
  int tmp___86 ;
  int tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  long tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char _amd64_rex_bits___10 ;
  int tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char _amd64_rex_bits___11 ;
  int tmp___98 ;
  int tmp___99 ;
  int tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  long tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char _amd64_rex_bits___12 ;
  int tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;

  {
#line 3259
  if (imm) {
#line 3260
    if (op->r_arg[0] != op->r_arg[1]) {
#line 3260
      while (1) {
#line 3260
        if ((int )sizeof(void *) == 2) {
#line 3260
          tmp = jit->ip;
#line 3260
          (jit->ip) ++;
#line 3260
          *tmp = (unsigned char)102;
        }
#line 3260
        while (1) {
#line 3260
          if ((int )sizeof(void *) > 4) {
#line 3260
            tmp___0 = 8;
          } else {
#line 3260
            tmp___0 = 0;
          }
#line 3260
          if (op->r_arg[0] > 7L) {
#line 3260
            tmp___1 = 4;
          } else {
#line 3260
            tmp___1 = 0;
          }
#line 3260
          if (op->r_arg[1] > 7L) {
#line 3260
            tmp___2 = 1;
          } else {
#line 3260
            tmp___2 = 0;
          }
#line 3260
          _amd64_rex_bits = (unsigned char )((tmp___0 | tmp___1) | tmp___2);
#line 3260
          if ((int )_amd64_rex_bits != 0) {
#line 3260
            tmp___3 = jit->ip;
#line 3260
            (jit->ip) ++;
#line 3260
            *tmp___3 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          } else
#line 3260
          if ((int )sizeof(void *) == 1) {
#line 3260
            tmp___3 = jit->ip;
#line 3260
            (jit->ip) ++;
#line 3260
            *tmp___3 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          }
#line 3260
          break;
        }
#line 3260
        switch ((int )sizeof(void *)) {
        case 1: 
#line 3260
        tmp___4 = jit->ip;
#line 3260
        (jit->ip) ++;
#line 3260
        *tmp___4 = (unsigned char)138;
#line 3260
        break;
        case 8: 
        case 4: 
        case 2: 
#line 3260
        tmp___5 = jit->ip;
#line 3260
        (jit->ip) ++;
#line 3260
        *tmp___5 = (unsigned char)139;
#line 3260
        break;
        default: 
#line 3260
        tmp___6 = __builtin_expect(1L, 0L);
#line 3260
        if (tmp___6) {
#line 3260
          __assert_rtn((char const   *)"emit_shift_op", (char const   *)"./jitter-Darwin-X86-64.c",
                       3260, (char const   *)"0");
        }
        }
#line 3260
        while (1) {
#line 3260
          while (1) {
#line 3260
            tmp___7 = jit->ip;
#line 3260
            (jit->ip) ++;
#line 3260
            *tmp___7 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
#line 3260
            break;
          }
#line 3260
          break;
        }
#line 3260
        break;
      }
    }
#line 3261
    while (1) {
#line 3261
      while (1) {
#line 3261
        if (op->r_arg[0] > 7L) {
#line 3261
          tmp___8 = 1;
        } else {
#line 3261
          tmp___8 = 0;
        }
#line 3261
        _amd64_rex_bits___0 = (unsigned char )(8 | tmp___8);
#line 3261
        if ((int )_amd64_rex_bits___0 != 0) {
#line 3261
          tmp___9 = jit->ip;
#line 3261
          (jit->ip) ++;
#line 3261
          *tmp___9 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
        }
#line 3261
        break;
      }
#line 3261
      while (1) {
#line 3261
        if (op->r_arg[2] == 1L) {
#line 3261
          tmp___10 = jit->ip;
#line 3261
          (jit->ip) ++;
#line 3261
          *tmp___10 = (unsigned char)209;
#line 3261
          while (1) {
#line 3261
            while (1) {
#line 3261
              tmp___11 = jit->ip;
#line 3261
              (jit->ip) ++;
#line 3261
              *tmp___11 = (unsigned char )((long )((3 << 6) | ((shift_op & 0x07) << 3)) | ((op->r_arg[0] & 7L) & 7L));
#line 3261
              break;
            }
#line 3261
            break;
          }
        } else {
#line 3261
          tmp___12 = jit->ip;
#line 3261
          (jit->ip) ++;
#line 3261
          *tmp___12 = (unsigned char)193;
#line 3261
          while (1) {
#line 3261
            while (1) {
#line 3261
              tmp___13 = jit->ip;
#line 3261
              (jit->ip) ++;
#line 3261
              *tmp___13 = (unsigned char )((long )((3 << 6) | ((shift_op & 0x07) << 3)) | ((op->r_arg[0] & 7L) & 7L));
#line 3261
              break;
            }
#line 3261
            break;
          }
#line 3261
          while (1) {
#line 3261
            *(jit->ip) = (unsigned char )(op->r_arg[2] & 255L);
#line 3261
            (jit->ip) ++;
#line 3261
            break;
          }
        }
#line 3261
        break;
      }
#line 3261
      break;
    }
  } else {
#line 3263
    destreg = (int )op->r_arg[0];
#line 3264
    valreg = (int )op->r_arg[1];
#line 3265
    shiftreg = (int )op->r_arg[2];
#line 3267
    if (destreg != 1) {
#line 3269
      tmp___14 = jit_reg_in_use(op, 1, 0);
#line 3269
      cx_in_use = tmp___14;
#line 3271
      if (cx_in_use) {
#line 3271
        if (shiftreg != 1) {
#line 3271
          while (1) {
#line 3271
            while (1) {
#line 3271
              _amd64_rex_bits___1 = (unsigned char)0;
#line 3271
              if ((int )_amd64_rex_bits___1 != 0) {
#line 3271
                tmp___15 = jit->ip;
#line 3271
                (jit->ip) ++;
#line 3271
                *tmp___15 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
              }
#line 3271
              break;
            }
#line 3271
            tmp___16 = jit->ip;
#line 3271
            (jit->ip) ++;
#line 3271
            *tmp___16 = (unsigned char)81;
#line 3271
            break;
          }
        }
      }
#line 3272
      if (shiftreg != 1) {
#line 3272
        while (1) {
#line 3272
          if ((int )sizeof(void *) == 2) {
#line 3272
            tmp___17 = jit->ip;
#line 3272
            (jit->ip) ++;
#line 3272
            *tmp___17 = (unsigned char)102;
          }
#line 3272
          while (1) {
#line 3272
            if ((int )sizeof(void *) > 4) {
#line 3272
              tmp___18 = 8;
            } else {
#line 3272
              tmp___18 = 0;
            }
#line 3272
            if (shiftreg > 7) {
#line 3272
              tmp___19 = 1;
            } else {
#line 3272
              tmp___19 = 0;
            }
#line 3272
            _amd64_rex_bits___2 = (unsigned char )(tmp___18 | tmp___19);
#line 3272
            if ((int )_amd64_rex_bits___2 != 0) {
#line 3272
              tmp___20 = jit->ip;
#line 3272
              (jit->ip) ++;
#line 3272
              *tmp___20 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
            } else
#line 3272
            if ((int )sizeof(void *) == 1) {
#line 3272
              tmp___20 = jit->ip;
#line 3272
              (jit->ip) ++;
#line 3272
              *tmp___20 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
            }
#line 3272
            break;
          }
#line 3272
          switch ((int )sizeof(void *)) {
          case 1: 
#line 3272
          tmp___21 = jit->ip;
#line 3272
          (jit->ip) ++;
#line 3272
          *tmp___21 = (unsigned char)138;
#line 3272
          break;
          case 8: 
          case 4: 
          case 2: 
#line 3272
          tmp___22 = jit->ip;
#line 3272
          (jit->ip) ++;
#line 3272
          *tmp___22 = (unsigned char)139;
#line 3272
          break;
          default: 
#line 3272
          tmp___23 = __builtin_expect(1L, 0L);
#line 3272
          if (tmp___23) {
#line 3272
            __assert_rtn((char const   *)"emit_shift_op", (char const   *)"./jitter-Darwin-X86-64.c",
                         3272, (char const   *)"0");
          }
          }
#line 3272
          while (1) {
#line 3272
            while (1) {
#line 3272
              tmp___24 = jit->ip;
#line 3272
              (jit->ip) ++;
#line 3272
              *tmp___24 = (unsigned char )(((3 << 6) | (1 << 3)) | (shiftreg & 0x07));
#line 3272
              break;
            }
#line 3272
            break;
          }
#line 3272
          break;
        }
      }
#line 3273
      if (destreg != valreg) {
#line 3274
        if (valreg != 1) {
#line 3274
          while (1) {
#line 3274
            if ((int )sizeof(void *) == 2) {
#line 3274
              tmp___25 = jit->ip;
#line 3274
              (jit->ip) ++;
#line 3274
              *tmp___25 = (unsigned char)102;
            }
#line 3274
            while (1) {
#line 3274
              if ((int )sizeof(void *) > 4) {
#line 3274
                tmp___26 = 8;
              } else {
#line 3274
                tmp___26 = 0;
              }
#line 3274
              if (destreg > 7) {
#line 3274
                tmp___27 = 4;
              } else {
#line 3274
                tmp___27 = 0;
              }
#line 3274
              if (valreg > 7) {
#line 3274
                tmp___28 = 1;
              } else {
#line 3274
                tmp___28 = 0;
              }
#line 3274
              _amd64_rex_bits___3 = (unsigned char )((tmp___26 | tmp___27) | tmp___28);
#line 3274
              if ((int )_amd64_rex_bits___3 != 0) {
#line 3274
                tmp___29 = jit->ip;
#line 3274
                (jit->ip) ++;
#line 3274
                *tmp___29 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
              } else
#line 3274
              if ((int )sizeof(void *) == 1) {
#line 3274
                tmp___29 = jit->ip;
#line 3274
                (jit->ip) ++;
#line 3274
                *tmp___29 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
              }
#line 3274
              break;
            }
#line 3274
            switch ((int )sizeof(void *)) {
            case 1: 
#line 3274
            tmp___30 = jit->ip;
#line 3274
            (jit->ip) ++;
#line 3274
            *tmp___30 = (unsigned char)138;
#line 3274
            break;
            case 8: 
            case 4: 
            case 2: 
#line 3274
            tmp___31 = jit->ip;
#line 3274
            (jit->ip) ++;
#line 3274
            *tmp___31 = (unsigned char)139;
#line 3274
            break;
            default: 
#line 3274
            tmp___32 = __builtin_expect(1L, 0L);
#line 3274
            if (tmp___32) {
#line 3274
              __assert_rtn((char const   *)"emit_shift_op", (char const   *)"./jitter-Darwin-X86-64.c",
                           3274, (char const   *)"0");
            }
            }
#line 3274
            while (1) {
#line 3274
              while (1) {
#line 3274
                tmp___33 = jit->ip;
#line 3274
                (jit->ip) ++;
#line 3274
                *tmp___33 = (unsigned char )(((3 << 6) | ((destreg & 0x07) << 3)) | (valreg & 0x07));
#line 3274
                break;
              }
#line 3274
              break;
            }
#line 3274
            break;
          }
        } else {
#line 3275
          while (1) {
#line 3275
            if ((int )sizeof(void *) == 2) {
#line 3275
              tmp___34 = jit->ip;
#line 3275
              (jit->ip) ++;
#line 3275
              *tmp___34 = (unsigned char)102;
            }
#line 3275
            while (1) {
#line 3275
              if ((int )sizeof(void *) > 4) {
#line 3275
                tmp___35 = 8;
              } else {
#line 3275
                tmp___35 = 0;
              }
#line 3275
              if (destreg > 7) {
#line 3275
                tmp___36 = 4;
              } else {
#line 3275
                tmp___36 = 0;
              }
#line 3275
              _amd64_rex_bits___4 = (unsigned char )(tmp___35 | tmp___36);
#line 3275
              if ((int )_amd64_rex_bits___4 != 0) {
#line 3275
                tmp___37 = jit->ip;
#line 3275
                (jit->ip) ++;
#line 3275
                *tmp___37 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
              } else
#line 3275
              if ((int )sizeof(void *) == 1) {
#line 3275
                tmp___37 = jit->ip;
#line 3275
                (jit->ip) ++;
#line 3275
                *tmp___37 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
              }
#line 3275
              break;
            }
#line 3275
            switch ((int )sizeof(void *)) {
            case 1: 
#line 3275
            tmp___38 = jit->ip;
#line 3275
            (jit->ip) ++;
#line 3275
            *tmp___38 = (unsigned char)138;
#line 3275
            break;
            case 8: 
            case 4: 
            case 2: 
#line 3275
            tmp___39 = jit->ip;
#line 3275
            (jit->ip) ++;
#line 3275
            *tmp___39 = (unsigned char)139;
#line 3275
            break;
            default: 
#line 3275
            tmp___40 = __builtin_expect(1L, 0L);
#line 3275
            if (tmp___40) {
#line 3275
              __assert_rtn((char const   *)"emit_shift_op", (char const   *)"./jitter-Darwin-X86-64.c",
                           3275, (char const   *)"0");
            }
            }
#line 3275
            while (1) {
#line 3275
              while (1) {
#line 3275
                while (1) {
#line 3275
                  tmp___46 = jit->ip;
#line 3275
                  (jit->ip) ++;
#line 3275
                  *tmp___46 = (unsigned char )((((destreg & 0x7) & 0x07) << 3) | 4);
#line 3275
                  break;
                }
#line 3275
                while (1) {
#line 3275
                  tmp___47 = jit->ip;
#line 3275
                  (jit->ip) ++;
#line 3275
                  *tmp___47 = (unsigned char )((4 << 3) | 4);
#line 3275
                  break;
                }
#line 3275
                break;
#line 3275
                while (1) {
#line 3275
                  tmp___56 = jit->ip;
#line 3275
                  (jit->ip) ++;
#line 3275
                  *tmp___56 = (unsigned char )((((destreg & 0x7) & 0x07) << 3) | 4);
#line 3275
                  break;
                }
#line 3275
                break;
#line 3275
                while (1) {
#line 3275
                  tmp___57 = jit->ip;
#line 3275
                  (jit->ip) ++;
#line 3275
                  *tmp___57 = (unsigned char )(((1 << 6) | (((destreg & 0x7) & 0x07) << 3)) | 4);
#line 3275
                  break;
                }
#line 3275
                while (1) {
#line 3275
                  *(jit->ip) = (unsigned char)0;
#line 3275
                  (jit->ip) ++;
#line 3275
                  break;
                }
#line 3275
                break;
              }
#line 3275
              break;
            }
#line 3275
            break;
          }
        }
      }
#line 3277
      while (1) {
#line 3277
        while (1) {
#line 3277
          if (destreg > 7) {
#line 3277
            tmp___63 = 1;
          } else {
#line 3277
            tmp___63 = 0;
          }
#line 3277
          _amd64_rex_bits___5 = (unsigned char )(8 | tmp___63);
#line 3277
          if ((int )_amd64_rex_bits___5 != 0) {
#line 3277
            tmp___64 = jit->ip;
#line 3277
            (jit->ip) ++;
#line 3277
            *tmp___64 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
          }
#line 3277
          break;
        }
#line 3277
        while (1) {
#line 3277
          tmp___65 = jit->ip;
#line 3277
          (jit->ip) ++;
#line 3277
          *tmp___65 = (unsigned char)211;
#line 3277
          while (1) {
#line 3277
            while (1) {
#line 3277
              tmp___66 = jit->ip;
#line 3277
              (jit->ip) ++;
#line 3277
              *tmp___66 = (unsigned char )(((3 << 6) | ((shift_op & 0x07) << 3)) | ((destreg & 0x7) & 0x07));
#line 3277
              break;
            }
#line 3277
            break;
          }
#line 3277
          break;
        }
#line 3277
        break;
      }
#line 3278
      if (cx_in_use) {
#line 3278
        if (shiftreg != 1) {
#line 3278
          while (1) {
#line 3278
            while (1) {
#line 3278
              _amd64_rex_bits___6 = (unsigned char)0;
#line 3278
              if ((int )_amd64_rex_bits___6 != 0) {
#line 3278
                tmp___67 = jit->ip;
#line 3278
                (jit->ip) ++;
#line 3278
                *tmp___67 = (unsigned char )(0x40 | (int )_amd64_rex_bits___6);
              }
#line 3278
              break;
            }
#line 3278
            tmp___68 = jit->ip;
#line 3278
            (jit->ip) ++;
#line 3278
            *tmp___68 = (unsigned char)89;
#line 3278
            break;
          }
        }
      }
    } else {
#line 3281
      tmp___70 = jit_get_unused_reg(jit->reg_al, op, 0);
#line 3281
      tmp___69 = tmp___70;
#line 3282
      if (tmp___69) {
#line 3282
        tmp___71 = tmp___69->id;
      } else {
#line 3282
        tmp___71 = 0;
      }
#line 3282
      tmpreg = tmp___71;
#line 3284
      tmp___72 = jit_reg_in_use(op, tmpreg, 0);
#line 3284
      tmp_in_use = tmp___72;
#line 3286
      if (tmp_in_use) {
#line 3286
        while (1) {
#line 3286
          while (1) {
#line 3286
            if (tmpreg > 7) {
#line 3286
              tmp___73 = 1;
            } else {
#line 3286
              tmp___73 = 0;
            }
#line 3286
            _amd64_rex_bits___7 = (unsigned char )tmp___73;
#line 3286
            if ((int )_amd64_rex_bits___7 != 0) {
#line 3286
              tmp___74 = jit->ip;
#line 3286
              (jit->ip) ++;
#line 3286
              *tmp___74 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
            }
#line 3286
            break;
          }
#line 3286
          tmp___75 = jit->ip;
#line 3286
          (jit->ip) ++;
#line 3286
          *tmp___75 = (unsigned char )(80 + (tmpreg & 0x7));
#line 3286
          break;
        }
      }
#line 3288
      if (tmpreg != valreg) {
#line 3288
        while (1) {
#line 3288
          if ((int )sizeof(void *) == 2) {
#line 3288
            tmp___76 = jit->ip;
#line 3288
            (jit->ip) ++;
#line 3288
            *tmp___76 = (unsigned char)102;
          }
#line 3288
          while (1) {
#line 3288
            if ((int )sizeof(void *) > 4) {
#line 3288
              tmp___77 = 8;
            } else {
#line 3288
              tmp___77 = 0;
            }
#line 3288
            if (tmpreg > 7) {
#line 3288
              tmp___78 = 4;
            } else {
#line 3288
              tmp___78 = 0;
            }
#line 3288
            if (valreg > 7) {
#line 3288
              tmp___79 = 1;
            } else {
#line 3288
              tmp___79 = 0;
            }
#line 3288
            _amd64_rex_bits___8 = (unsigned char )((tmp___77 | tmp___78) | tmp___79);
#line 3288
            if ((int )_amd64_rex_bits___8 != 0) {
#line 3288
              tmp___80 = jit->ip;
#line 3288
              (jit->ip) ++;
#line 3288
              *tmp___80 = (unsigned char )(0x40 | (int )_amd64_rex_bits___8);
            } else
#line 3288
            if ((int )sizeof(void *) == 1) {
#line 3288
              tmp___80 = jit->ip;
#line 3288
              (jit->ip) ++;
#line 3288
              *tmp___80 = (unsigned char )(0x40 | (int )_amd64_rex_bits___8);
            }
#line 3288
            break;
          }
#line 3288
          switch ((int )sizeof(void *)) {
          case 1: 
#line 3288
          tmp___81 = jit->ip;
#line 3288
          (jit->ip) ++;
#line 3288
          *tmp___81 = (unsigned char)138;
#line 3288
          break;
          case 8: 
          case 4: 
          case 2: 
#line 3288
          tmp___82 = jit->ip;
#line 3288
          (jit->ip) ++;
#line 3288
          *tmp___82 = (unsigned char)139;
#line 3288
          break;
          default: 
#line 3288
          tmp___83 = __builtin_expect(1L, 0L);
#line 3288
          if (tmp___83) {
#line 3288
            __assert_rtn((char const   *)"emit_shift_op", (char const   *)"./jitter-Darwin-X86-64.c",
                         3288, (char const   *)"0");
          }
          }
#line 3288
          while (1) {
#line 3288
            while (1) {
#line 3288
              tmp___84 = jit->ip;
#line 3288
              (jit->ip) ++;
#line 3288
              *tmp___84 = (unsigned char )(((3 << 6) | ((tmpreg & 0x07) << 3)) | (valreg & 0x07));
#line 3288
              break;
            }
#line 3288
            break;
          }
#line 3288
          break;
        }
      }
#line 3289
      if (shiftreg != 1) {
#line 3289
        while (1) {
#line 3289
          if ((int )sizeof(void *) == 2) {
#line 3289
            tmp___85 = jit->ip;
#line 3289
            (jit->ip) ++;
#line 3289
            *tmp___85 = (unsigned char)102;
          }
#line 3289
          while (1) {
#line 3289
            if ((int )sizeof(void *) > 4) {
#line 3289
              tmp___86 = 8;
            } else {
#line 3289
              tmp___86 = 0;
            }
#line 3289
            if (shiftreg > 7) {
#line 3289
              tmp___87 = 1;
            } else {
#line 3289
              tmp___87 = 0;
            }
#line 3289
            _amd64_rex_bits___9 = (unsigned char )(tmp___86 | tmp___87);
#line 3289
            if ((int )_amd64_rex_bits___9 != 0) {
#line 3289
              tmp___88 = jit->ip;
#line 3289
              (jit->ip) ++;
#line 3289
              *tmp___88 = (unsigned char )(0x40 | (int )_amd64_rex_bits___9);
            } else
#line 3289
            if ((int )sizeof(void *) == 1) {
#line 3289
              tmp___88 = jit->ip;
#line 3289
              (jit->ip) ++;
#line 3289
              *tmp___88 = (unsigned char )(0x40 | (int )_amd64_rex_bits___9);
            }
#line 3289
            break;
          }
#line 3289
          switch ((int )sizeof(void *)) {
          case 1: 
#line 3289
          tmp___89 = jit->ip;
#line 3289
          (jit->ip) ++;
#line 3289
          *tmp___89 = (unsigned char)138;
#line 3289
          break;
          case 8: 
          case 4: 
          case 2: 
#line 3289
          tmp___90 = jit->ip;
#line 3289
          (jit->ip) ++;
#line 3289
          *tmp___90 = (unsigned char)139;
#line 3289
          break;
          default: 
#line 3289
          tmp___91 = __builtin_expect(1L, 0L);
#line 3289
          if (tmp___91) {
#line 3289
            __assert_rtn((char const   *)"emit_shift_op", (char const   *)"./jitter-Darwin-X86-64.c",
                         3289, (char const   *)"0");
          }
          }
#line 3289
          while (1) {
#line 3289
            while (1) {
#line 3289
              tmp___92 = jit->ip;
#line 3289
              (jit->ip) ++;
#line 3289
              *tmp___92 = (unsigned char )(((3 << 6) | (1 << 3)) | (shiftreg & 0x07));
#line 3289
              break;
            }
#line 3289
            break;
          }
#line 3289
          break;
        }
      }
#line 3290
      while (1) {
#line 3290
        while (1) {
#line 3290
          if (tmpreg > 7) {
#line 3290
            tmp___93 = 1;
          } else {
#line 3290
            tmp___93 = 0;
          }
#line 3290
          _amd64_rex_bits___10 = (unsigned char )(8 | tmp___93);
#line 3290
          if ((int )_amd64_rex_bits___10 != 0) {
#line 3290
            tmp___94 = jit->ip;
#line 3290
            (jit->ip) ++;
#line 3290
            *tmp___94 = (unsigned char )(0x40 | (int )_amd64_rex_bits___10);
          }
#line 3290
          break;
        }
#line 3290
        while (1) {
#line 3290
          tmp___95 = jit->ip;
#line 3290
          (jit->ip) ++;
#line 3290
          *tmp___95 = (unsigned char)211;
#line 3290
          while (1) {
#line 3290
            while (1) {
#line 3290
              tmp___96 = jit->ip;
#line 3290
              (jit->ip) ++;
#line 3290
              *tmp___96 = (unsigned char )(((3 << 6) | ((shift_op & 0x07) << 3)) | ((tmpreg & 0x7) & 0x07));
#line 3290
              break;
            }
#line 3290
            break;
          }
#line 3290
          break;
        }
#line 3290
        break;
      }
#line 3291
      while (1) {
#line 3291
        if ((int )sizeof(void *) == 2) {
#line 3291
          tmp___97 = jit->ip;
#line 3291
          (jit->ip) ++;
#line 3291
          *tmp___97 = (unsigned char)102;
        }
#line 3291
        while (1) {
#line 3291
          if ((int )sizeof(void *) > 4) {
#line 3291
            tmp___98 = 8;
          } else {
#line 3291
            tmp___98 = 0;
          }
#line 3291
          if (destreg > 7) {
#line 3291
            tmp___99 = 4;
          } else {
#line 3291
            tmp___99 = 0;
          }
#line 3291
          if (tmpreg > 7) {
#line 3291
            tmp___100 = 1;
          } else {
#line 3291
            tmp___100 = 0;
          }
#line 3291
          _amd64_rex_bits___11 = (unsigned char )((tmp___98 | tmp___99) | tmp___100);
#line 3291
          if ((int )_amd64_rex_bits___11 != 0) {
#line 3291
            tmp___101 = jit->ip;
#line 3291
            (jit->ip) ++;
#line 3291
            *tmp___101 = (unsigned char )(0x40 | (int )_amd64_rex_bits___11);
          } else
#line 3291
          if ((int )sizeof(void *) == 1) {
#line 3291
            tmp___101 = jit->ip;
#line 3291
            (jit->ip) ++;
#line 3291
            *tmp___101 = (unsigned char )(0x40 | (int )_amd64_rex_bits___11);
          }
#line 3291
          break;
        }
#line 3291
        switch ((int )sizeof(void *)) {
        case 1: 
#line 3291
        tmp___102 = jit->ip;
#line 3291
        (jit->ip) ++;
#line 3291
        *tmp___102 = (unsigned char)138;
#line 3291
        break;
        case 8: 
        case 4: 
        case 2: 
#line 3291
        tmp___103 = jit->ip;
#line 3291
        (jit->ip) ++;
#line 3291
        *tmp___103 = (unsigned char)139;
#line 3291
        break;
        default: 
#line 3291
        tmp___104 = __builtin_expect(1L, 0L);
#line 3291
        if (tmp___104) {
#line 3291
          __assert_rtn((char const   *)"emit_shift_op", (char const   *)"./jitter-Darwin-X86-64.c",
                       3291, (char const   *)"0");
        }
        }
#line 3291
        while (1) {
#line 3291
          while (1) {
#line 3291
            tmp___105 = jit->ip;
#line 3291
            (jit->ip) ++;
#line 3291
            *tmp___105 = (unsigned char )(((3 << 6) | ((destreg & 0x07) << 3)) | (tmpreg & 0x07));
#line 3291
            break;
          }
#line 3291
          break;
        }
#line 3291
        break;
      }
#line 3293
      if (tmp_in_use) {
#line 3293
        while (1) {
#line 3293
          while (1) {
#line 3293
            if (tmpreg > 7) {
#line 3293
              tmp___106 = 1;
            } else {
#line 3293
              tmp___106 = 0;
            }
#line 3293
            _amd64_rex_bits___12 = (unsigned char )tmp___106;
#line 3293
            if ((int )_amd64_rex_bits___12 != 0) {
#line 3293
              tmp___107 = jit->ip;
#line 3293
              (jit->ip) ++;
#line 3293
              *tmp___107 = (unsigned char )(0x40 | (int )_amd64_rex_bits___12);
            }
#line 3293
            break;
          }
#line 3293
          tmp___108 = jit->ip;
#line 3293
          (jit->ip) ++;
#line 3293
          *tmp___108 = (unsigned char )(88 + (tmpreg & 0x7));
#line 3293
          break;
        }
      }
    }
  }
#line 3296
  return;
}
}
/* END FUNCTION-DEF emit_shift_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF ob_pad LOC=UNKNOWN */
static void ob_pad(struct output_buf *ob , int size ) 
{ 
  size_t tmp ;

  {
#line 4113
  while (1) {
#line 4113
    tmp = strlen((char const   *)ob->buf);
#line 4113
    if (! (tmp < (size_t )size)) {
#line 4113
      break;
    }
#line 4114
    ob_append(ob, " ");
  }
#line 4115
  return;
}
}
/* END FUNCTION-DEF ob_pad LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_get_arg LOC=UNKNOWN */
static void emit_get_arg(struct jit *jit , jit_op *op ) 
{ 
  struct jit_func_info *info ;
  struct jit_func_info *tmp ;
  int dreg ;
  int arg_id ;
  struct jit_inp_arg *arg ;
  int size ;
  int type ;
  int reg_id ;
  int tmp___0 ;
  int read_from_stack ;
  int stack_pos ;
  struct jit_func_info *tmp___1 ;
  jit_hw_reg *tmp___2 ;
  jit_hw_reg *arg_reg ;
  jit_hw_reg *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char _amd64_rex_bits ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  long tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___13 ;
  int tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___19 ;
  int tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  long tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  long tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___38 ;
  int tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  long tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___48 ;
  int tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;

  {
#line 2991
  tmp = jit_current_func_info(jit);
#line 2991
  info = tmp;
#line 2993
  dreg = (int )op->r_arg[0];
#line 2994
  arg_id = (int )op->r_arg[1];
#line 2996
  arg = info->args + arg_id;
#line 2998
  size = arg->size;
#line 2999
  type = (int )arg->type;
#line 3000
  if (type == 2) {
#line 3000
    tmp___0 = 1;
  } else {
#line 3000
    tmp___0 = 0;
  }
#line 3000
  reg_id = ((tmp___0 & 0x01) | (3 << 1)) | ((arg_id & 0xfffffff) << 4);
#line 3002
  read_from_stack = 0;
#line 3005
  if (! arg->passed_by_reg) {
#line 3006
    read_from_stack = 1;
#line 3007
    stack_pos = arg->location.stack_pos;
#line 3010
    tmp___1 = jit_current_func_info(jit);
#line 3010
    if (! tmp___1->has_prolog) {
#line 3011
      stack_pos -= (int )sizeof(void *);
#line 3012
      stack_pos += jit->push_count * (int )sizeof(void *);
#line 3013
      emit_get_arg_from_stack(jit, type, size, dreg, 4, stack_pos);
#line 3014
      return;
    }
  }
#line 3018
  if (arg->passed_by_reg) {
#line 3018
    tmp___2 = rmap_get(op->regmap, (jit_value )reg_id);
#line 3018
    if ((unsigned long )tmp___2 == (unsigned long )((void *)0)) {
#line 3020
      read_from_stack = 1;
#line 3021
      stack_pos = arg->spill_pos;
    }
  }
#line 3024
  if (read_from_stack) {
#line 3025
    stack_pos = arg->spill_pos;
#line 3026
    emit_get_arg_from_stack(jit, type, size, dreg, 5, stack_pos);
#line 3027
    return;
  }
#line 3030
  tmp___3 = rmap_get(op->regmap, (jit_value )reg_id);
#line 3030
  arg_reg = tmp___3;
#line 3031
  if (type != 2) {
#line 3032
    if (size == (int )sizeof(void *)) {
#line 3032
      while (1) {
#line 3032
        if ((int )sizeof(void *) == 2) {
#line 3032
          tmp___4 = jit->ip;
#line 3032
          (jit->ip) ++;
#line 3032
          *tmp___4 = (unsigned char)102;
        }
#line 3032
        while (1) {
#line 3032
          if ((int )sizeof(void *) > 4) {
#line 3032
            tmp___5 = 8;
          } else {
#line 3032
            tmp___5 = 0;
          }
#line 3032
          if (dreg > 7) {
#line 3032
            tmp___6 = 4;
          } else {
#line 3032
            tmp___6 = 0;
          }
#line 3032
          if (arg_reg->id > 7) {
#line 3032
            tmp___7 = 1;
          } else {
#line 3032
            tmp___7 = 0;
          }
#line 3032
          _amd64_rex_bits = (unsigned char )((tmp___5 | tmp___6) | tmp___7);
#line 3032
          if ((int )_amd64_rex_bits != 0) {
#line 3032
            tmp___8 = jit->ip;
#line 3032
            (jit->ip) ++;
#line 3032
            *tmp___8 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          } else
#line 3032
          if ((int )sizeof(void *) == 1) {
#line 3032
            tmp___8 = jit->ip;
#line 3032
            (jit->ip) ++;
#line 3032
            *tmp___8 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          }
#line 3032
          break;
        }
#line 3032
        switch ((int )sizeof(void *)) {
        case 1: 
#line 3032
        tmp___9 = jit->ip;
#line 3032
        (jit->ip) ++;
#line 3032
        *tmp___9 = (unsigned char)138;
#line 3032
        break;
        case 8: 
        case 4: 
        case 2: 
#line 3032
        tmp___10 = jit->ip;
#line 3032
        (jit->ip) ++;
#line 3032
        *tmp___10 = (unsigned char)139;
#line 3032
        break;
        default: 
#line 3032
        tmp___11 = __builtin_expect(1L, 0L);
#line 3032
        if (tmp___11) {
#line 3032
          __assert_rtn((char const   *)"emit_get_arg", (char const   *)"./jitter-Darwin-X86-64.c",
                       3032, (char const   *)"0");
        }
        }
#line 3032
        while (1) {
#line 3032
          while (1) {
#line 3032
            tmp___12 = jit->ip;
#line 3032
            (jit->ip) ++;
#line 3032
            *tmp___12 = (unsigned char )(((3 << 6) | ((dreg & 0x07) << 3)) | (arg_reg->id & 0x07));
#line 3032
            break;
          }
#line 3032
          break;
        }
#line 3032
        break;
      }
    } else
#line 3033
    if (type == 0) {
#line 3033
      while (1) {
#line 3033
        if (size == 4) {
#line 3033
          while (1) {
#line 3033
            while (1) {
#line 3033
              if (dreg > 7) {
#line 3033
                tmp___13 = 4;
              } else {
#line 3033
                tmp___13 = 0;
              }
#line 3033
              if (arg_reg->id > 7) {
#line 3033
                tmp___14 = 1;
              } else {
#line 3033
                tmp___14 = 0;
              }
#line 3033
              _amd64_rex_bits___0 = (unsigned char )((8 | tmp___13) | tmp___14);
#line 3033
              if ((int )_amd64_rex_bits___0 != 0) {
#line 3033
                tmp___15 = jit->ip;
#line 3033
                (jit->ip) ++;
#line 3033
                *tmp___15 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
              }
#line 3033
              break;
            }
#line 3033
            tmp___16 = jit->ip;
#line 3033
            (jit->ip) ++;
#line 3033
            *tmp___16 = (unsigned char)99;
#line 3033
            while (1) {
#line 3033
              while (1) {
#line 3033
                tmp___17 = jit->ip;
#line 3033
                (jit->ip) ++;
#line 3033
                *tmp___17 = (unsigned char )(((3 << 6) | (((dreg & 0x7) & 0x07) << 3)) | ((arg_reg->id & 0x7) & 0x07));
#line 3033
                break;
              }
#line 3033
              break;
            }
#line 3033
            break;
          }
#line 3033
          break;
        }
#line 3033
        if (size == 2) {
#line 3033
          tmp___18 = jit->ip;
#line 3033
          (jit->ip) ++;
#line 3033
          *tmp___18 = (unsigned char)102;
        }
#line 3033
        while (1) {
#line 3033
          if (dreg > 7) {
#line 3033
            tmp___19 = 4;
          } else {
#line 3033
            tmp___19 = 0;
          }
#line 3033
          if (arg_reg->id > 7) {
#line 3033
            tmp___20 = 1;
          } else {
#line 3033
            tmp___20 = 0;
          }
#line 3033
          _amd64_rex_bits___1 = (unsigned char )((8 | tmp___19) | tmp___20);
#line 3033
          if ((int )_amd64_rex_bits___1 != 0) {
#line 3033
            tmp___21 = jit->ip;
#line 3033
            (jit->ip) ++;
#line 3033
            *tmp___21 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
          }
#line 3033
          break;
        }
#line 3033
        switch (size) {
        case 1: 
#line 3033
        tmp___22 = jit->ip;
#line 3033
        (jit->ip) ++;
#line 3033
        *tmp___22 = (unsigned char)15;
#line 3033
        tmp___23 = jit->ip;
#line 3033
        (jit->ip) ++;
#line 3033
        *tmp___23 = (unsigned char)190;
#line 3033
        break;
        case 2: 
#line 3033
        tmp___24 = jit->ip;
#line 3033
        (jit->ip) ++;
#line 3033
        *tmp___24 = (unsigned char)15;
#line 3033
        tmp___25 = jit->ip;
#line 3033
        (jit->ip) ++;
#line 3033
        *tmp___25 = (unsigned char)191;
#line 3033
        break;
        default: 
#line 3033
        tmp___26 = __builtin_expect(1L, 0L);
#line 3033
        if (tmp___26) {
#line 3033
          __assert_rtn((char const   *)"emit_get_arg", (char const   *)"./jitter-Darwin-X86-64.c",
                       3033, (char const   *)"0");
        }
        }
#line 3033
        while (1) {
#line 3033
          while (1) {
#line 3033
            tmp___27 = jit->ip;
#line 3033
            (jit->ip) ++;
#line 3033
            *tmp___27 = (unsigned char )(((3 << 6) | ((dreg & 0x07) << 3)) | (arg_reg->id & 0x07));
#line 3033
            break;
          }
#line 3033
          break;
        }
#line 3033
        break;
      }
    } else {
#line 3034
      while (1) {
#line 3034
        if (size == 8) {
#line 3034
          goto _L;
        } else
#line 3034
        if (size == 4) {
          _L: /* CIL Label */ 
#line 3034
          while (1) {
#line 3034
            if (size == 2) {
#line 3034
              tmp___28 = jit->ip;
#line 3034
              (jit->ip) ++;
#line 3034
              *tmp___28 = (unsigned char)102;
            }
#line 3034
            while (1) {
#line 3034
              if (size > 4) {
#line 3034
                tmp___29 = 8;
              } else {
#line 3034
                tmp___29 = 0;
              }
#line 3034
              if (dreg > 7) {
#line 3034
                tmp___30 = 4;
              } else {
#line 3034
                tmp___30 = 0;
              }
#line 3034
              if (arg_reg->id > 7) {
#line 3034
                tmp___31 = 1;
              } else {
#line 3034
                tmp___31 = 0;
              }
#line 3034
              _amd64_rex_bits___2 = (unsigned char )((tmp___29 | tmp___30) | tmp___31);
#line 3034
              if ((int )_amd64_rex_bits___2 != 0) {
#line 3034
                tmp___32 = jit->ip;
#line 3034
                (jit->ip) ++;
#line 3034
                *tmp___32 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
              } else
#line 3034
              if (size == 1) {
#line 3034
                tmp___32 = jit->ip;
#line 3034
                (jit->ip) ++;
#line 3034
                *tmp___32 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
              }
#line 3034
              break;
            }
#line 3034
            switch (size) {
            case 1: 
#line 3034
            tmp___33 = jit->ip;
#line 3034
            (jit->ip) ++;
#line 3034
            *tmp___33 = (unsigned char)138;
#line 3034
            break;
            case 8: 
            case 4: 
            case 2: 
#line 3034
            tmp___34 = jit->ip;
#line 3034
            (jit->ip) ++;
#line 3034
            *tmp___34 = (unsigned char)139;
#line 3034
            break;
            default: 
#line 3034
            tmp___35 = __builtin_expect(1L, 0L);
#line 3034
            if (tmp___35) {
#line 3034
              __assert_rtn((char const   *)"emit_get_arg", (char const   *)"./jitter-Darwin-X86-64.c",
                           3034, (char const   *)"0");
            }
            }
#line 3034
            while (1) {
#line 3034
              while (1) {
#line 3034
                tmp___36 = jit->ip;
#line 3034
                (jit->ip) ++;
#line 3034
                *tmp___36 = (unsigned char )(((3 << 6) | ((dreg & 0x07) << 3)) | (arg_reg->id & 0x07));
#line 3034
                break;
              }
#line 3034
              break;
            }
#line 3034
            break;
          }
#line 3034
          break;
        }
#line 3034
        if (size == 2) {
#line 3034
          tmp___37 = jit->ip;
#line 3034
          (jit->ip) ++;
#line 3034
          *tmp___37 = (unsigned char)102;
        }
#line 3034
        while (1) {
#line 3034
          if (dreg > 7) {
#line 3034
            tmp___38 = 4;
          } else {
#line 3034
            tmp___38 = 0;
          }
#line 3034
          if (arg_reg->id > 7) {
#line 3034
            tmp___39 = 1;
          } else {
#line 3034
            tmp___39 = 0;
          }
#line 3034
          _amd64_rex_bits___3 = (unsigned char )((8 | tmp___38) | tmp___39);
#line 3034
          if ((int )_amd64_rex_bits___3 != 0) {
#line 3034
            tmp___40 = jit->ip;
#line 3034
            (jit->ip) ++;
#line 3034
            *tmp___40 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
          }
#line 3034
          break;
        }
#line 3034
        switch (size) {
        case 1: 
#line 3034
        tmp___41 = jit->ip;
#line 3034
        (jit->ip) ++;
#line 3034
        *tmp___41 = (unsigned char)15;
#line 3034
        tmp___42 = jit->ip;
#line 3034
        (jit->ip) ++;
#line 3034
        *tmp___42 = (unsigned char)182;
#line 3034
        break;
        case 2: 
#line 3034
        tmp___43 = jit->ip;
#line 3034
        (jit->ip) ++;
#line 3034
        *tmp___43 = (unsigned char)15;
#line 3034
        tmp___44 = jit->ip;
#line 3034
        (jit->ip) ++;
#line 3034
        *tmp___44 = (unsigned char)183;
#line 3034
        break;
        default: 
#line 3034
        tmp___45 = __builtin_expect(1L, 0L);
#line 3034
        if (tmp___45) {
#line 3034
          __assert_rtn((char const   *)"emit_get_arg", (char const   *)"./jitter-Darwin-X86-64.c",
                       3034, (char const   *)"0");
        }
        }
#line 3034
        while (1) {
#line 3034
          while (1) {
#line 3034
            tmp___46 = jit->ip;
#line 3034
            (jit->ip) ++;
#line 3034
            *tmp___46 = (unsigned char )(((3 << 6) | ((dreg & 0x07) << 3)) | (arg_reg->id & 0x07));
#line 3034
            break;
          }
#line 3034
          break;
        }
#line 3034
        break;
      }
    }
  } else {
#line 3036
    while (1) {
#line 3036
      tmp___47 = jit->ip;
#line 3036
      (jit->ip) ++;
#line 3036
      *tmp___47 = (unsigned char)242;
#line 3036
      while (1) {
#line 3036
        if (dreg > 7) {
#line 3036
          tmp___48 = 4;
        } else {
#line 3036
          tmp___48 = 0;
        }
#line 3036
        if (arg_reg->id > 7) {
#line 3036
          tmp___49 = 1;
        } else {
#line 3036
          tmp___49 = 0;
        }
#line 3036
        _amd64_rex_bits___4 = (unsigned char )(tmp___48 | tmp___49);
#line 3036
        if ((int )_amd64_rex_bits___4 != 0) {
#line 3036
          tmp___50 = jit->ip;
#line 3036
          (jit->ip) ++;
#line 3036
          *tmp___50 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
        }
#line 3036
        break;
      }
#line 3036
      tmp___51 = jit->ip;
#line 3036
      (jit->ip) ++;
#line 3036
      *tmp___51 = (unsigned char)15;
#line 3036
      tmp___52 = jit->ip;
#line 3036
      (jit->ip) ++;
#line 3036
      *tmp___52 = (unsigned char)16;
#line 3036
      while (1) {
#line 3036
        while (1) {
#line 3036
          tmp___53 = jit->ip;
#line 3036
          (jit->ip) ++;
#line 3036
          *tmp___53 = (unsigned char )(((3 << 6) | ((dreg & 0x07) << 3)) | (arg_reg->id & 0x07));
#line 3036
          break;
        }
#line 3036
        break;
      }
#line 3036
      break;
    }
  }
#line 3038
  return;
}
}
/* END FUNCTION-DEF emit_get_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_dump_ops_combined LOC=UNKNOWN */
static void jit_dump_ops_combined(struct jit *jit , jit_tree *labels ) 
{ 
  FILE *f ;
  FILE *tmp ;
  jit_op *op ;
  jit_op *tmp___0 ;

  {
#line 4865
  tmp = open_disasm();
#line 4865
  f = tmp;
#line 4867
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".addr=%lx\n",
          (unsigned long )jit->buf);
#line 4868
  tmp___0 = jit_op_first(jit->ops);
#line 4868
  op = tmp___0;
#line 4868
  while ((unsigned long )op != (unsigned long )((void *)0)) {
#line 4869
    op = print_combined_op(f, jit, op, labels);
#line 4870
    if (! op) {
#line 4870
      break;
    }
#line 4868
    op = op->next;
  }
#line 4873
  fclose(f);
#line 4874
  wait((int *)((void *)0));
#line 4876
  return;
}
}
/* END FUNCTION-DEF jit_dump_ops_combined LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_debug_info_new LOC=UNKNOWN */
struct jit_debug_info *jit_debug_info_new(char const   *filename , char const   *function ,
                                          int lineno ) 
{ 
  struct jit_debug_info *r ;
  void *tmp ;

  {
#line 5808
  tmp = malloc((size_t )sizeof(struct jit_debug_info ));
#line 5808
  r = (struct jit_debug_info *)tmp;
#line 5809
  r->filename = filename;
#line 5810
  r->function = function;
#line 5811
  r->lineno = lineno;
#line 5812
  r->warnings = 0;
#line 5813
  return (r);
}
}
/* END FUNCTION-DEF jit_debug_info_new LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_pop_caller_saved_regs LOC=UNKNOWN */
static int emit_pop_caller_saved_regs(struct jit *jit , jit_op *op ) 
{ 
  int gp_count ;
  int fp_count ;
  struct jit_reg_allocator *al ;
  jit_hw_reg *active_regs[32] ;
  int stack_offset ;
  int stack_space ;
  int tmp ;
  int tmp___0 ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  int i ;
  int tmp___17 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char _amd64_rex_bits___6 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char _amd64_rex_bits___7 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;

  {
#line 2854
  al = jit->reg_al;
#line 2857
  stack_offset = 0;
#line 2858
  tmp = list_caller_saved_regs(jit, op, al->gp_regs, al->gp_reg_cnt, 0, al->ret_reg,
                               active_regs, & gp_count);
#line 2858
  stack_space = tmp;
#line 2859
  tmp___0 = list_caller_saved_regs(jit, op, al->fp_regs, al->fp_reg_cnt, 1, al->fpret_reg,
                                   active_regs + gp_count, & fp_count);
#line 2859
  stack_space += tmp___0;
#line 2861
  while (1) {
#line 2861
    while (1) {
#line 2861
      _amd64_rex_bits = (unsigned char)8;
#line 2861
      if ((int )_amd64_rex_bits != 0) {
#line 2861
        tmp___1 = jit->ip;
#line 2861
        (jit->ip) ++;
#line 2861
        *tmp___1 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
      }
#line 2861
      break;
    }
#line 2861
    tmp___2 = jit->ip;
#line 2861
    (jit->ip) ++;
#line 2861
    *tmp___2 = (unsigned char)131;
#line 2861
    while (1) {
#line 2861
      while (1) {
#line 2861
        tmp___3 = jit->ip;
#line 2861
        (jit->ip) ++;
#line 2861
        *tmp___3 = (unsigned char )((3 << 6) | 4);
#line 2861
        break;
      }
#line 2861
      break;
    }
#line 2861
    while (1) {
#line 2861
      *(jit->ip) = (unsigned char)0;
#line 2861
      (jit->ip) ++;
#line 2861
      break;
    }
#line 2861
    break;
  }
#line 2863
  i = 0;
#line 2863
  while (i < gp_count + fp_count) {
#line 2864
    tmp___17 = emit_pop_reg(jit, active_regs[i], stack_offset);
#line 2864
    stack_offset += tmp___17;
#line 2863
    i ++;
  }
#line 2865
  while (1) {
#line 2865
    while (1) {
#line 2865
      _amd64_rex_bits___2 = (unsigned char)8;
#line 2865
      if ((int )_amd64_rex_bits___2 != 0) {
#line 2865
        tmp___18 = jit->ip;
#line 2865
        (jit->ip) ++;
#line 2865
        *tmp___18 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
      }
#line 2865
      break;
    }
#line 2865
    tmp___19 = jit->ip;
#line 2865
    (jit->ip) ++;
#line 2865
    *tmp___19 = (unsigned char)131;
#line 2865
    while (1) {
#line 2865
      while (1) {
#line 2865
        tmp___20 = jit->ip;
#line 2865
        (jit->ip) ++;
#line 2865
        *tmp___20 = (unsigned char )((3 << 6) | 4);
#line 2865
        break;
      }
#line 2865
      break;
    }
#line 2865
    while (1) {
#line 2865
      *(jit->ip) = (unsigned char)0;
#line 2865
      (jit->ip) ++;
#line 2865
      break;
    }
#line 2865
    break;
  }
#line 2867
  if (stack_space) {
#line 2867
    while (1) {
#line 2867
      if ((jit_value )stack_space >= -128L) {
#line 2867
        if ((jit_value )stack_space <= 127L) {
#line 2867
          while (1) {
#line 2867
            _amd64_rex_bits___5 = (unsigned char)8;
#line 2867
            if ((int )_amd64_rex_bits___5 != 0) {
#line 2867
              tmp___34 = jit->ip;
#line 2867
              (jit->ip) ++;
#line 2867
              *tmp___34 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
            }
#line 2867
            break;
          }
#line 2867
          tmp___35 = jit->ip;
#line 2867
          (jit->ip) ++;
#line 2867
          *tmp___35 = (unsigned char)131;
#line 2867
          while (1) {
#line 2867
            while (1) {
#line 2867
              tmp___36 = jit->ip;
#line 2867
              (jit->ip) ++;
#line 2867
              *tmp___36 = (unsigned char )((3 << 6) | 4);
#line 2867
              break;
            }
#line 2867
            break;
          }
#line 2867
          while (1) {
#line 2867
            *(jit->ip) = (unsigned char )(stack_space & 0xff);
#line 2867
            (jit->ip) ++;
#line 2867
            break;
          }
        } else {
#line 2867
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
#line 2867
        while (1) {
#line 2867
          _amd64_rex_bits___7 = (unsigned char)8;
#line 2867
          if ((int )_amd64_rex_bits___7 != 0) {
#line 2867
            tmp___43 = jit->ip;
#line 2867
            (jit->ip) ++;
#line 2867
            *tmp___43 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
          }
#line 2867
          break;
        }
#line 2867
        tmp___44 = jit->ip;
#line 2867
        (jit->ip) ++;
#line 2867
        *tmp___44 = (unsigned char)129;
#line 2867
        while (1) {
#line 2867
          while (1) {
#line 2867
            tmp___45 = jit->ip;
#line 2867
            (jit->ip) ++;
#line 2867
            *tmp___45 = (unsigned char )((3 << 6) | 4);
#line 2867
            break;
          }
#line 2867
          break;
        }
#line 2867
        while (1) {
#line 2867
          imb___4.val = stack_space;
#line 2867
          tmp___46 = jit->ip;
#line 2867
          (jit->ip) ++;
#line 2867
          *tmp___46 = imb___4.b[0];
#line 2867
          tmp___47 = jit->ip;
#line 2867
          (jit->ip) ++;
#line 2867
          *tmp___47 = imb___4.b[1];
#line 2867
          tmp___48 = jit->ip;
#line 2867
          (jit->ip) ++;
#line 2867
          *tmp___48 = imb___4.b[2];
#line 2867
          tmp___49 = jit->ip;
#line 2867
          (jit->ip) ++;
#line 2867
          *tmp___49 = imb___4.b[3];
#line 2867
          break;
        }
      }
#line 2867
      break;
    }
  }
#line 2868
  return (stack_space / (int )sizeof(void *));
}
}
/* END FUNCTION-DEF emit_pop_caller_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isspace LOC=UNKNOWN */
__inline int isspace(int _c ) 
{ 
  int tmp ;

  {
#line 269 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  tmp = __istype(_c, 16384UL);
#line 269
  return (tmp);
}
}
/* END FUNCTION-DEF isspace LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_gen_op LOC=UNKNOWN */
void jit_gen_op(struct jit *jit , struct jit_op *op ) 
{ 
  jit_value a1 ;
  jit_value a2 ;
  jit_value a3 ;
  int imm ;
  int sign ;
  int found ;
  unsigned char _amd64_rex_bits ;
  int tmp ;
  int tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  x86_imm_buf imb ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___47 ;
  int tmp___48 ;
  int tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  long tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___60 ;
  int tmp___61 ;
  int tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  long tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  int tmp___72 ;
  struct jit_op *target ;
  jit_value pa ;
  unsigned char rex_correction ;
  unsigned char *pos ;
  int disp ;
  int size ;
  long tmp___73 ;
  long tmp___74 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  long tmp___79 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char _amd64_rex_bits___6 ;
  unsigned char *tmp___84 ;
  int t ;
  int tmp___85 ;
  size_t tmp___86 ;
  int tmp___87 ;
  unsigned char *tmp___88 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___94 ;
  int tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;
  long tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  amd64_imm_buf imb___6 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;
  unsigned char *tmp___111 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  unsigned char *tmp___116 ;
  unsigned char _amd64_rex_bits___9 ;
  int tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char *tmp___119 ;
  unsigned char *tmp___120 ;
  long tmp___121 ;
  unsigned char *tmp___122 ;
  unsigned char _amd64_rex_bits___10 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  struct jit_func_info *tmp___125 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char *tmp___128 ;
  unsigned char _amd64_rex_bits___11 ;
  int tmp___129 ;
  int tmp___130 ;
  unsigned char *tmp___131 ;
  unsigned char *tmp___132 ;
  amd64_imm_buf imb___8 ;
  unsigned char *tmp___133 ;
  unsigned char *tmp___134 ;
  unsigned char *tmp___135 ;
  unsigned char *tmp___136 ;
  unsigned char *tmp___137 ;
  unsigned char *tmp___138 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___141 ;
  unsigned char *tmp___142 ;
  unsigned char *tmp___143 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  unsigned char _amd64_rex_bits___12 ;
  int tmp___146 ;
  int tmp___147 ;
  int tmp___148 ;
  unsigned char *tmp___149 ;
  unsigned char *tmp___150 ;
  unsigned char *tmp___151 ;
  long tmp___152 ;
  unsigned char *tmp___153 ;
  unsigned char _amd64_rex_bits___13 ;
  int tmp___154 ;
  int tmp___155 ;
  unsigned char *tmp___156 ;
  unsigned char *tmp___157 ;
  unsigned char *tmp___158 ;
  unsigned char _amd64_rex_bits___14 ;
  int tmp___159 ;
  unsigned char *tmp___160 ;
  unsigned char *tmp___161 ;
  amd64_imm_buf imb___10 ;
  unsigned char *tmp___162 ;
  unsigned char *tmp___163 ;
  unsigned char *tmp___164 ;
  unsigned char *tmp___165 ;
  unsigned char *tmp___166 ;
  unsigned char *tmp___167 ;
  unsigned char *tmp___168 ;
  unsigned char *tmp___169 ;
  x86_imm_buf imb___11 ;
  unsigned char *tmp___170 ;
  unsigned char *tmp___171 ;
  unsigned char *tmp___172 ;
  unsigned char *tmp___173 ;
  int tmp___174 ;
  unsigned char *tmp___175 ;
  unsigned char _amd64_rex_bits___15 ;
  int tmp___176 ;
  int tmp___177 ;
  unsigned char *tmp___178 ;
  unsigned char *tmp___179 ;
  unsigned char *tmp___180 ;
  long tmp___181 ;
  unsigned char *tmp___182 ;
  unsigned char *tmp___183 ;
  x86_imm_buf imb___12 ;
  unsigned char *tmp___184 ;
  unsigned char *tmp___185 ;
  unsigned char *tmp___186 ;
  unsigned char *tmp___187 ;
  unsigned char *tmp___188 ;
  unsigned char _amd64_rex_bits___16 ;
  int tmp___189 ;
  int tmp___190 ;
  int tmp___191 ;
  unsigned char *tmp___192 ;
  unsigned char *tmp___193 ;
  unsigned char *tmp___194 ;
  long tmp___195 ;
  unsigned char *tmp___196 ;
  unsigned char *tmp___197 ;
  unsigned char *tmp___198 ;
  unsigned char *tmp___199 ;
  unsigned char *tmp___200 ;
  unsigned char *tmp___201 ;
  x86_imm_buf imb___13 ;
  unsigned char *tmp___202 ;
  unsigned char *tmp___203 ;
  unsigned char *tmp___204 ;
  unsigned char *tmp___205 ;
  unsigned char *tmp___206 ;
  unsigned char *tmp___207 ;
  unsigned char *tmp___208 ;
  x86_imm_buf imb___14 ;
  unsigned char *tmp___209 ;
  unsigned char *tmp___210 ;
  unsigned char *tmp___211 ;
  unsigned char *tmp___212 ;
  unsigned char *tmp___213 ;
  unsigned char _amd64_rex_bits___17 ;
  int tmp___214 ;
  int tmp___215 ;
  int tmp___216 ;
  unsigned char *tmp___217 ;
  unsigned char *tmp___218 ;
  unsigned char *tmp___219 ;
  long tmp___220 ;
  unsigned char *tmp___221 ;
  unsigned char *tmp___222 ;
  unsigned char *tmp___223 ;
  unsigned char *tmp___224 ;
  unsigned char *tmp___225 ;
  unsigned char *tmp___226 ;
  x86_imm_buf imb___15 ;
  unsigned char *tmp___227 ;
  unsigned char *tmp___228 ;
  unsigned char *tmp___229 ;
  unsigned char *tmp___230 ;
  unsigned char *tmp___231 ;
  unsigned char *tmp___232 ;
  unsigned char *tmp___233 ;
  x86_imm_buf imb___16 ;
  unsigned char *tmp___234 ;
  unsigned char *tmp___235 ;
  unsigned char *tmp___236 ;
  unsigned char *tmp___237 ;
  unsigned char *tmp___238 ;
  unsigned char _amd64_rex_bits___18 ;
  int tmp___239 ;
  int tmp___240 ;
  int tmp___241 ;
  int tmp___242 ;
  unsigned char *tmp___243 ;
  unsigned char *tmp___244 ;
  unsigned char *tmp___245 ;
  long tmp___246 ;
  unsigned char *tmp___247 ;
  unsigned char *tmp___248 ;
  x86_imm_buf imb___17 ;
  unsigned char *tmp___249 ;
  unsigned char *tmp___250 ;
  unsigned char *tmp___251 ;
  unsigned char *tmp___252 ;
  unsigned char *tmp___253 ;
  unsigned char *tmp___254 ;
  unsigned char *tmp___255 ;
  unsigned char *tmp___256 ;
  unsigned char *tmp___257 ;
  unsigned char *tmp___258 ;
  x86_imm_buf imb___18 ;
  unsigned char *tmp___259 ;
  unsigned char *tmp___260 ;
  unsigned char *tmp___261 ;
  unsigned char *tmp___262 ;
  unsigned char *tmp___263 ;
  unsigned char _amd64_rex_bits___19 ;
  int tmp___264 ;
  int tmp___265 ;
  unsigned char *tmp___266 ;
  unsigned char *tmp___267 ;
  unsigned char *tmp___268 ;
  unsigned char *tmp___269 ;
  unsigned char *tmp___270 ;
  unsigned char _amd64_rex_bits___20 ;
  int tmp___271 ;
  int tmp___272 ;
  unsigned char *tmp___273 ;
  unsigned char *tmp___274 ;
  unsigned char *tmp___275 ;
  unsigned char *tmp___276 ;
  unsigned char *tmp___277 ;
  unsigned char _amd64_rex_bits___21 ;
  int tmp___278 ;
  int tmp___279 ;
  unsigned char *tmp___280 ;
  unsigned char *tmp___281 ;
  unsigned char *tmp___282 ;
  unsigned char *tmp___283 ;
  unsigned char *tmp___284 ;
  unsigned char _amd64_rex_bits___22 ;
  int tmp___285 ;
  int tmp___286 ;
  int tmp___287 ;
  unsigned char *tmp___288 ;
  unsigned char *tmp___289 ;
  unsigned char *tmp___290 ;
  long tmp___291 ;
  unsigned char *tmp___292 ;
  unsigned char _amd64_rex_bits___23 ;
  int tmp___293 ;
  unsigned char *tmp___294 ;
  unsigned char *tmp___295 ;
  unsigned char *tmp___296 ;
  unsigned char *tmp___297 ;
  x86_imm_buf imb___19 ;
  unsigned char *tmp___298 ;
  unsigned char *tmp___299 ;
  unsigned char *tmp___300 ;
  unsigned char *tmp___301 ;
  unsigned char *tmp___302 ;
  unsigned char *tmp___303 ;
  unsigned char *tmp___304 ;
  unsigned char *tmp___305 ;
  x86_imm_buf imb___20 ;
  unsigned char *tmp___306 ;
  unsigned char *tmp___307 ;
  unsigned char *tmp___308 ;
  unsigned char *tmp___309 ;
  unsigned char *tmp___310 ;
  unsigned char *tmp___311 ;
  unsigned char *tmp___312 ;
  x86_imm_buf imb___21 ;
  unsigned char *tmp___313 ;
  unsigned char *tmp___314 ;
  unsigned char *tmp___315 ;
  unsigned char *tmp___316 ;
  x86_imm_buf imb___22 ;
  unsigned char *tmp___317 ;
  unsigned char *tmp___318 ;
  unsigned char *tmp___319 ;
  unsigned char *tmp___320 ;
  unsigned char *tmp___321 ;
  unsigned char _amd64_rex_bits___24 ;
  int tmp___322 ;
  int tmp___323 ;
  int tmp___324 ;
  int tmp___325 ;
  unsigned char *tmp___326 ;
  int tmp___327 ;
  unsigned char *tmp___328 ;
  unsigned char *tmp___329 ;
  unsigned char *tmp___330 ;
  unsigned char *tmp___331 ;
  unsigned char *tmp___332 ;
  unsigned char *tmp___333 ;
  unsigned char *tmp___334 ;
  x86_imm_buf imb___23 ;
  unsigned char *tmp___335 ;
  unsigned char *tmp___336 ;
  unsigned char *tmp___337 ;
  unsigned char *tmp___338 ;
  unsigned char *tmp___339 ;
  unsigned char *tmp___340 ;
  unsigned char *tmp___341 ;
  x86_imm_buf imb___24 ;
  unsigned char *tmp___342 ;
  unsigned char *tmp___343 ;
  unsigned char *tmp___344 ;
  unsigned char *tmp___345 ;
  unsigned char *tmp___346 ;
  unsigned char *tmp___347 ;
  unsigned char *tmp___348 ;
  unsigned char *tmp___349 ;
  unsigned char *tmp___350 ;
  unsigned char *tmp___351 ;
  unsigned char *tmp___352 ;
  x86_imm_buf imb___25 ;
  unsigned char *tmp___353 ;
  unsigned char *tmp___354 ;
  unsigned char *tmp___355 ;
  unsigned char *tmp___356 ;
  unsigned char *tmp___357 ;
  unsigned char *tmp___358 ;
  unsigned char *tmp___359 ;
  x86_imm_buf imb___26 ;
  unsigned char *tmp___360 ;
  unsigned char *tmp___361 ;
  unsigned char *tmp___362 ;
  unsigned char *tmp___363 ;
  unsigned char *tmp___364 ;
  unsigned char *tmp___365 ;
  unsigned char *tmp___366 ;
  unsigned char *tmp___367 ;
  unsigned char *tmp___368 ;
  unsigned char *tmp___369 ;
  unsigned char *tmp___370 ;
  x86_imm_buf imb___27 ;
  unsigned char *tmp___371 ;
  unsigned char *tmp___372 ;
  unsigned char *tmp___373 ;
  unsigned char *tmp___374 ;
  unsigned char *tmp___375 ;
  unsigned char *tmp___376 ;
  unsigned char *tmp___377 ;
  x86_imm_buf imb___28 ;
  unsigned char *tmp___378 ;
  unsigned char *tmp___379 ;
  unsigned char *tmp___380 ;
  unsigned char *tmp___381 ;
  x86_imm_buf imb___29 ;
  unsigned char *tmp___382 ;
  unsigned char *tmp___383 ;
  unsigned char *tmp___384 ;
  unsigned char *tmp___385 ;
  unsigned char *tmp___386 ;
  unsigned char _amd64_rex_bits___25 ;
  int tmp___387 ;
  int tmp___388 ;
  int tmp___389 ;
  int tmp___390 ;
  unsigned char *tmp___391 ;
  int tmp___392 ;
  unsigned char *tmp___393 ;
  unsigned char *tmp___394 ;
  unsigned char *tmp___395 ;
  unsigned char *tmp___396 ;
  unsigned char *tmp___397 ;
  unsigned char *tmp___398 ;
  unsigned char *tmp___399 ;
  x86_imm_buf imb___30 ;
  unsigned char *tmp___400 ;
  unsigned char *tmp___401 ;
  unsigned char *tmp___402 ;
  unsigned char *tmp___403 ;
  unsigned char *tmp___404 ;
  unsigned char *tmp___405 ;
  unsigned char *tmp___406 ;
  x86_imm_buf imb___31 ;
  unsigned char *tmp___407 ;
  unsigned char *tmp___408 ;
  unsigned char *tmp___409 ;
  unsigned char *tmp___410 ;
  unsigned char *tmp___411 ;
  unsigned char *tmp___412 ;
  unsigned char *tmp___413 ;
  unsigned char *tmp___414 ;
  unsigned char *tmp___415 ;
  unsigned char *tmp___416 ;
  unsigned char *tmp___417 ;
  x86_imm_buf imb___32 ;
  unsigned char *tmp___418 ;
  unsigned char *tmp___419 ;
  unsigned char *tmp___420 ;
  unsigned char *tmp___421 ;
  unsigned char *tmp___422 ;
  unsigned char *tmp___423 ;
  unsigned char *tmp___424 ;
  x86_imm_buf imb___33 ;
  unsigned char *tmp___425 ;
  unsigned char *tmp___426 ;
  unsigned char *tmp___427 ;
  unsigned char *tmp___428 ;
  unsigned char *tmp___429 ;
  unsigned char *tmp___430 ;
  unsigned char *tmp___431 ;
  unsigned char *tmp___432 ;
  unsigned char *tmp___433 ;
  unsigned char *tmp___434 ;
  unsigned char *tmp___435 ;
  x86_imm_buf imb___34 ;
  unsigned char *tmp___436 ;
  unsigned char *tmp___437 ;
  unsigned char *tmp___438 ;
  unsigned char *tmp___439 ;
  unsigned char *tmp___440 ;
  unsigned char *tmp___441 ;
  unsigned char *tmp___442 ;
  x86_imm_buf imb___35 ;
  unsigned char *tmp___443 ;
  unsigned char *tmp___444 ;
  unsigned char *tmp___445 ;
  unsigned char *tmp___446 ;
  x86_imm_buf imb___36 ;
  unsigned char *tmp___447 ;
  unsigned char *tmp___448 ;
  unsigned char *tmp___449 ;
  unsigned char *tmp___450 ;
  unsigned char _amd64_rex_bits___26 ;
  int tmp___451 ;
  int tmp___452 ;
  int tmp___453 ;
  unsigned char *tmp___454 ;
  unsigned char *tmp___455 ;
  unsigned char *tmp___456 ;
  unsigned char *tmp___457 ;
  x86_imm_buf imb___37 ;
  unsigned char *tmp___458 ;
  unsigned char *tmp___459 ;
  unsigned char *tmp___460 ;
  unsigned char *tmp___461 ;
  unsigned char *tmp___462 ;
  unsigned char *tmp___463 ;
  unsigned char *tmp___464 ;
  unsigned char *tmp___465 ;
  unsigned char *tmp___466 ;
  unsigned char *tmp___467 ;
  x86_imm_buf imb___38 ;
  unsigned char *tmp___468 ;
  unsigned char *tmp___469 ;
  unsigned char *tmp___470 ;
  unsigned char *tmp___471 ;
  unsigned char *tmp___472 ;
  unsigned char *tmp___473 ;
  unsigned char *tmp___474 ;
  unsigned char *tmp___475 ;
  x86_imm_buf imb___39 ;
  unsigned char *tmp___476 ;
  unsigned char *tmp___477 ;
  unsigned char *tmp___478 ;
  unsigned char *tmp___479 ;
  unsigned char *tmp___480 ;
  unsigned char *tmp___481 ;
  unsigned char *tmp___482 ;
  unsigned char *tmp___483 ;
  unsigned char *tmp___484 ;
  unsigned char *tmp___485 ;
  x86_imm_buf imb___40 ;
  unsigned char *tmp___486 ;
  unsigned char *tmp___487 ;
  unsigned char *tmp___488 ;
  unsigned char *tmp___489 ;
  unsigned char *tmp___490 ;
  unsigned char *tmp___491 ;
  unsigned char *tmp___492 ;
  x86_imm_buf imb___41 ;
  unsigned char *tmp___493 ;
  unsigned char *tmp___494 ;
  unsigned char *tmp___495 ;
  unsigned char *tmp___496 ;
  unsigned char *tmp___497 ;
  unsigned char *tmp___498 ;
  unsigned char *tmp___499 ;
  unsigned char *tmp___500 ;
  unsigned char *tmp___501 ;
  unsigned char *tmp___502 ;
  x86_imm_buf imb___42 ;
  unsigned char *tmp___503 ;
  unsigned char *tmp___504 ;
  unsigned char *tmp___505 ;
  unsigned char *tmp___506 ;
  x86_imm_buf imb___43 ;
  unsigned char *tmp___507 ;
  unsigned char *tmp___508 ;
  unsigned char *tmp___509 ;
  unsigned char *tmp___510 ;
  int tmp___511 ;
  int tmp___512 ;
  unsigned char _amd64_rex_bits___27 ;
  int tmp___513 ;
  int tmp___514 ;
  int tmp___515 ;
  unsigned char *tmp___516 ;
  unsigned char *tmp___517 ;
  unsigned char *tmp___518 ;
  unsigned char *tmp___519 ;
  x86_imm_buf imb___44 ;
  unsigned char *tmp___520 ;
  unsigned char *tmp___521 ;
  unsigned char *tmp___522 ;
  unsigned char *tmp___523 ;
  unsigned char *tmp___524 ;
  unsigned char *tmp___525 ;
  unsigned char *tmp___526 ;
  unsigned char *tmp___527 ;
  unsigned char *tmp___528 ;
  unsigned char *tmp___529 ;
  x86_imm_buf imb___45 ;
  unsigned char *tmp___530 ;
  unsigned char *tmp___531 ;
  unsigned char *tmp___532 ;
  unsigned char *tmp___533 ;
  unsigned char _amd64_rex_bits___28 ;
  int tmp___534 ;
  int tmp___535 ;
  unsigned char *tmp___536 ;
  unsigned char *tmp___537 ;
  unsigned char *tmp___538 ;
  unsigned char *tmp___539 ;
  x86_imm_buf imb___46 ;
  unsigned char *tmp___540 ;
  unsigned char *tmp___541 ;
  unsigned char *tmp___542 ;
  unsigned char *tmp___543 ;
  unsigned char *tmp___544 ;
  unsigned char *tmp___545 ;
  unsigned char *tmp___546 ;
  unsigned char *tmp___547 ;
  unsigned char *tmp___548 ;
  unsigned char *tmp___549 ;
  x86_imm_buf imb___47 ;
  unsigned char *tmp___550 ;
  unsigned char *tmp___551 ;
  unsigned char *tmp___552 ;
  unsigned char *tmp___553 ;
  jit_value tmp___554 ;
  unsigned long long tmp___555 ;
  unsigned char _amd64_rex_bits___29 ;
  int tmp___556 ;
  int tmp___557 ;
  int tmp___558 ;
  unsigned char *tmp___559 ;
  unsigned char *tmp___560 ;
  unsigned char *tmp___561 ;
  unsigned char *tmp___562 ;
  x86_imm_buf imb___48 ;
  unsigned char *tmp___563 ;
  unsigned char *tmp___564 ;
  unsigned char *tmp___565 ;
  unsigned char *tmp___566 ;
  unsigned char *tmp___567 ;
  unsigned char *tmp___568 ;
  unsigned char *tmp___569 ;
  unsigned char *tmp___570 ;
  unsigned char *tmp___571 ;
  unsigned char *tmp___572 ;
  x86_imm_buf imb___49 ;
  unsigned char *tmp___573 ;
  unsigned char *tmp___574 ;
  unsigned char *tmp___575 ;
  unsigned char *tmp___576 ;

  {
#line 3592 "./jitter-Darwin-X86-64.c"
  a1 = op->r_arg[0];
#line 3593
  a2 = op->r_arg[1];
#line 3594
  a3 = op->r_arg[2];
#line 3595
  imm = (int )op->code & 0x02;
#line 3596
  sign = ! ((int )op->code & 0x04);
#line 3598
  found = 1;
#line 3600
  switch ((unsigned int )((jit_opcode )((int )op->code & 0xfff8))) {
  case 512U: 
#line 3602
  if (a1 != a2) {
#line 3602
    if (a1 != a3) {
#line 3603
      if (imm) {
#line 3603
        while (1) {
#line 3603
          while (1) {
#line 3603
            if (a1 > 7L) {
#line 3603
              tmp = 4;
            } else {
#line 3603
              tmp = 0;
            }
#line 3603
            if (a2 > 7L) {
#line 3603
              tmp___0 = 1;
            } else {
#line 3603
              tmp___0 = 0;
            }
#line 3603
            _amd64_rex_bits = (unsigned char )((8 | tmp) | tmp___0);
#line 3603
            if ((int )_amd64_rex_bits != 0) {
#line 3603
              tmp___1 = jit->ip;
#line 3603
              (jit->ip) ++;
#line 3603
              *tmp___1 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
            }
#line 3603
            break;
          }
#line 3603
          tmp___2 = jit->ip;
#line 3603
          (jit->ip) ++;
#line 3603
          *tmp___2 = (unsigned char)141;
#line 3603
          while (1) {
#line 3603
            if (a2 == 16L) {
#line 3603
              while (1) {
#line 3603
                tmp___3 = jit->ip;
#line 3603
                (jit->ip) ++;
#line 3603
                *tmp___3 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
#line 3603
                break;
              }
#line 3603
              while (1) {
#line 3603
                imb.val = (int )a3;
#line 3603
                tmp___4 = jit->ip;
#line 3603
                (jit->ip) ++;
#line 3603
                *tmp___4 = imb.b[0];
#line 3603
                tmp___5 = jit->ip;
#line 3603
                (jit->ip) ++;
#line 3603
                *tmp___5 = imb.b[1];
#line 3603
                tmp___6 = jit->ip;
#line 3603
                (jit->ip) ++;
#line 3603
                *tmp___6 = imb.b[2];
#line 3603
                tmp___7 = jit->ip;
#line 3603
                (jit->ip) ++;
#line 3603
                *tmp___7 = imb.b[3];
#line 3603
                break;
              }
            } else {
#line 3603
              while (1) {
#line 3603
                if ((a2 & 7L) == 4L) {
#line 3603
                  if (a3 == 0L) {
#line 3603
                    while (1) {
#line 3603
                      tmp___8 = jit->ip;
#line 3603
                      (jit->ip) ++;
#line 3603
                      *tmp___8 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3603
                      break;
                    }
#line 3603
                    while (1) {
#line 3603
                      tmp___9 = jit->ip;
#line 3603
                      (jit->ip) ++;
#line 3603
                      *tmp___9 = (unsigned char )((4 << 3) | 4);
#line 3603
                      break;
                    }
                  } else
#line 3603
                  if (a3 >= -128L) {
#line 3603
                    if (a3 <= 127L) {
#line 3603
                      while (1) {
#line 3603
                        tmp___10 = jit->ip;
#line 3603
                        (jit->ip) ++;
#line 3603
                        *tmp___10 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3603
                        break;
                      }
#line 3603
                      while (1) {
#line 3603
                        tmp___11 = jit->ip;
#line 3603
                        (jit->ip) ++;
#line 3603
                        *tmp___11 = (unsigned char )((4 << 3) | 4);
#line 3603
                        break;
                      }
#line 3603
                      while (1) {
#line 3603
                        *(jit->ip) = (unsigned char )(a3 & 255L);
#line 3603
                        (jit->ip) ++;
#line 3603
                        break;
                      }
                    } else {
#line 3603
                      goto _L;
                    }
                  } else {
                    _L: /* CIL Label */ 
#line 3603
                    while (1) {
#line 3603
                      tmp___12 = jit->ip;
#line 3603
                      (jit->ip) ++;
#line 3603
                      *tmp___12 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3603
                      break;
                    }
#line 3603
                    while (1) {
#line 3603
                      tmp___13 = jit->ip;
#line 3603
                      (jit->ip) ++;
#line 3603
                      *tmp___13 = (unsigned char )((4 << 3) | 4);
#line 3603
                      break;
                    }
#line 3603
                    while (1) {
#line 3603
                      imb___0.val = (int )a3;
#line 3603
                      tmp___14 = jit->ip;
#line 3603
                      (jit->ip) ++;
#line 3603
                      *tmp___14 = imb___0.b[0];
#line 3603
                      tmp___15 = jit->ip;
#line 3603
                      (jit->ip) ++;
#line 3603
                      *tmp___15 = imb___0.b[1];
#line 3603
                      tmp___16 = jit->ip;
#line 3603
                      (jit->ip) ++;
#line 3603
                      *tmp___16 = imb___0.b[2];
#line 3603
                      tmp___17 = jit->ip;
#line 3603
                      (jit->ip) ++;
#line 3603
                      *tmp___17 = imb___0.b[3];
#line 3603
                      break;
                    }
                  }
#line 3603
                  break;
                }
#line 3603
                if (a3 == 0L) {
#line 3603
                  if ((a2 & 7L) != 5L) {
#line 3603
                    while (1) {
#line 3603
                      tmp___18 = jit->ip;
#line 3603
                      (jit->ip) ++;
#line 3603
                      *tmp___18 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 3603
                      break;
                    }
#line 3603
                    break;
                  }
                }
#line 3603
                if (a3 >= -128L) {
#line 3603
                  if (a3 <= 127L) {
#line 3603
                    while (1) {
#line 3603
                      tmp___19 = jit->ip;
#line 3603
                      (jit->ip) ++;
#line 3603
                      *tmp___19 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 3603
                      break;
                    }
#line 3603
                    while (1) {
#line 3603
                      *(jit->ip) = (unsigned char )(a3 & 255L);
#line 3603
                      (jit->ip) ++;
#line 3603
                      break;
                    }
                  } else {
#line 3603
                    goto _L___0;
                  }
                } else {
                  _L___0: /* CIL Label */ 
#line 3603
                  while (1) {
#line 3603
                    tmp___20 = jit->ip;
#line 3603
                    (jit->ip) ++;
#line 3603
                    *tmp___20 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 3603
                    break;
                  }
#line 3603
                  while (1) {
#line 3603
                    imb___1.val = (int )a3;
#line 3603
                    tmp___21 = jit->ip;
#line 3603
                    (jit->ip) ++;
#line 3603
                    *tmp___21 = imb___1.b[0];
#line 3603
                    tmp___22 = jit->ip;
#line 3603
                    (jit->ip) ++;
#line 3603
                    *tmp___22 = imb___1.b[1];
#line 3603
                    tmp___23 = jit->ip;
#line 3603
                    (jit->ip) ++;
#line 3603
                    *tmp___23 = imb___1.b[2];
#line 3603
                    tmp___24 = jit->ip;
#line 3603
                    (jit->ip) ++;
#line 3603
                    *tmp___24 = imb___1.b[3];
#line 3603
                    break;
                  }
                }
#line 3603
                break;
              }
            }
#line 3603
            break;
          }
#line 3603
          break;
        }
      } else {
#line 3604
        while (1) {
#line 3604
          while (1) {
#line 3604
            if (a1 > 7L) {
#line 3604
              tmp___25 = 4;
            } else {
#line 3604
              tmp___25 = 0;
            }
#line 3604
            if (a3 > 7L) {
#line 3604
              tmp___26 = 2;
            } else {
#line 3604
              tmp___26 = 0;
            }
#line 3604
            if (a2 > 7L) {
#line 3604
              tmp___27 = 1;
            } else {
#line 3604
              tmp___27 = 0;
            }
#line 3604
            _amd64_rex_bits___0 = (unsigned char )(((8 | tmp___25) | tmp___26) | tmp___27);
#line 3604
            if ((int )_amd64_rex_bits___0 != 0) {
#line 3604
              tmp___28 = jit->ip;
#line 3604
              (jit->ip) ++;
#line 3604
              *tmp___28 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
            }
#line 3604
            break;
          }
#line 3604
          while (1) {
#line 3604
            tmp___29 = jit->ip;
#line 3604
            (jit->ip) ++;
#line 3604
            *tmp___29 = (unsigned char)141;
#line 3604
            while (1) {
#line 3604
              if (a2 == -1L) {
#line 3604
                while (1) {
#line 3604
                  tmp___30 = jit->ip;
#line 3604
                  (jit->ip) ++;
#line 3604
                  *tmp___30 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3604
                  break;
                }
#line 3604
                while (1) {
#line 3604
                  tmp___31 = jit->ip;
#line 3604
                  (jit->ip) ++;
#line 3604
                  *tmp___31 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
#line 3604
                  break;
                }
#line 3604
                while (1) {
#line 3604
                  imb___2.val = 0;
#line 3604
                  tmp___32 = jit->ip;
#line 3604
                  (jit->ip) ++;
#line 3604
                  *tmp___32 = imb___2.b[0];
#line 3604
                  tmp___33 = jit->ip;
#line 3604
                  (jit->ip) ++;
#line 3604
                  *tmp___33 = imb___2.b[1];
#line 3604
                  tmp___34 = jit->ip;
#line 3604
                  (jit->ip) ++;
#line 3604
                  *tmp___34 = imb___2.b[2];
#line 3604
                  tmp___35 = jit->ip;
#line 3604
                  (jit->ip) ++;
#line 3604
                  *tmp___35 = imb___2.b[3];
#line 3604
                  break;
                }
              } else
#line 3604
              if (a2 != 5L) {
#line 3604
                while (1) {
#line 3604
                  tmp___36 = jit->ip;
#line 3604
                  (jit->ip) ++;
#line 3604
                  *tmp___36 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3604
                  break;
                }
#line 3604
                while (1) {
#line 3604
                  tmp___37 = jit->ip;
#line 3604
                  (jit->ip) ++;
#line 3604
                  *tmp___37 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 3604
                  break;
                }
              } else {
#line 3604
                while (1) {
#line 3604
                  tmp___38 = jit->ip;
#line 3604
                  (jit->ip) ++;
#line 3604
                  *tmp___38 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3604
                  break;
                }
#line 3604
                while (1) {
#line 3604
                  tmp___39 = jit->ip;
#line 3604
                  (jit->ip) ++;
#line 3604
                  *tmp___39 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 3604
                  break;
                }
#line 3604
                while (1) {
#line 3604
                  *(jit->ip) = (unsigned char)0;
#line 3604
                  (jit->ip) ++;
#line 3604
                  break;
                }
              }
#line 3604
              break;
            }
#line 3604
            break;
          }
#line 3604
          break;
        }
      }
    } else {
#line 3605
      emit_alu_op(jit, op, 0, imm);
    }
  } else {
#line 3605
    emit_alu_op(jit, op, 0, imm);
  }
#line 3606
  break;
  case 520U: 
#line 3608
  emit_alu_op(jit, op, 0, imm);
#line 3608
  break;
  case 528U: 
#line 3609
  emit_alu_op(jit, op, 2, imm);
#line 3609
  break;
  case 536U: 
#line 3610
  emit_sub_op(jit, op, imm);
#line 3610
  break;
  case 544U: 
#line 3611
  emit_subx_op(jit, op, 5, imm);
#line 3611
  break;
  case 552U: 
#line 3612
  emit_subx_op(jit, op, 3, imm);
#line 3612
  break;
  case 560U: 
#line 3613
  emit_rsb_op(jit, op, imm);
#line 3613
  break;
  case 568U: 
#line 3615
  if (a1 != a2) {
#line 3615
    while (1) {
#line 3615
      if ((int )sizeof(void *) == 2) {
#line 3615
        tmp___46 = jit->ip;
#line 3615
        (jit->ip) ++;
#line 3615
        *tmp___46 = (unsigned char)102;
      }
#line 3615
      while (1) {
#line 3615
        if ((int )sizeof(void *) > 4) {
#line 3615
          tmp___47 = 8;
        } else {
#line 3615
          tmp___47 = 0;
        }
#line 3615
        if (a1 > 7L) {
#line 3615
          tmp___48 = 4;
        } else {
#line 3615
          tmp___48 = 0;
        }
#line 3615
        if (a2 > 7L) {
#line 3615
          tmp___49 = 1;
        } else {
#line 3615
          tmp___49 = 0;
        }
#line 3615
        _amd64_rex_bits___1 = (unsigned char )((tmp___47 | tmp___48) | tmp___49);
#line 3615
        if ((int )_amd64_rex_bits___1 != 0) {
#line 3615
          tmp___50 = jit->ip;
#line 3615
          (jit->ip) ++;
#line 3615
          *tmp___50 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
        } else
#line 3615
        if ((int )sizeof(void *) == 1) {
#line 3615
          tmp___50 = jit->ip;
#line 3615
          (jit->ip) ++;
#line 3615
          *tmp___50 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
        }
#line 3615
        break;
      }
#line 3615
      switch ((int )sizeof(void *)) {
      case 1: 
#line 3615
      tmp___51 = jit->ip;
#line 3615
      (jit->ip) ++;
#line 3615
      *tmp___51 = (unsigned char)138;
#line 3615
      break;
      case 8: 
      case 4: 
      case 2: 
#line 3615
      tmp___52 = jit->ip;
#line 3615
      (jit->ip) ++;
#line 3615
      *tmp___52 = (unsigned char)139;
#line 3615
      break;
      default: 
#line 3615
      tmp___53 = __builtin_expect(1L, 0L);
#line 3615
      if (tmp___53) {
#line 3615
        __assert_rtn((char const   *)"jit_gen_op", (char const   *)"./jitter-Darwin-X86-64.c",
                     3615, (char const   *)"0");
      }
      }
#line 3615
      while (1) {
#line 3615
        while (1) {
#line 3615
          tmp___54 = jit->ip;
#line 3615
          (jit->ip) ++;
#line 3615
          *tmp___54 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
#line 3615
          break;
        }
#line 3615
        break;
      }
#line 3615
      break;
    }
  }
#line 3616
  while (1) {
#line 3616
    while (1) {
#line 3616
      if (a1 > 7L) {
#line 3616
        tmp___55 = 1;
      } else {
#line 3616
        tmp___55 = 0;
      }
#line 3616
      _amd64_rex_bits___2 = (unsigned char )(8 | tmp___55);
#line 3616
      if ((int )_amd64_rex_bits___2 != 0) {
#line 3616
        tmp___56 = jit->ip;
#line 3616
        (jit->ip) ++;
#line 3616
        *tmp___56 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
      }
#line 3616
      break;
    }
#line 3616
    while (1) {
#line 3616
      tmp___57 = jit->ip;
#line 3616
      (jit->ip) ++;
#line 3616
      *tmp___57 = (unsigned char)247;
#line 3616
      while (1) {
#line 3616
        while (1) {
#line 3616
          tmp___58 = jit->ip;
#line 3616
          (jit->ip) ++;
#line 3616
          *tmp___58 = (unsigned char )((long )((3 << 6) | (3 << 3)) | ((a1 & 7L) & 7L));
#line 3616
          break;
        }
#line 3616
        break;
      }
#line 3616
      break;
    }
#line 3616
    break;
  }
#line 3617
  break;
  case 640U: 
#line 3618
  emit_alu_op(jit, op, 1, imm);
#line 3618
  break;
  case 648U: 
#line 3619
  emit_alu_op(jit, op, 6, imm);
#line 3619
  break;
  case 656U: 
#line 3620
  emit_alu_op(jit, op, 4, imm);
#line 3620
  break;
  case 680U: 
#line 3621
  if (a1 != a2) {
#line 3621
    while (1) {
#line 3621
      if ((int )sizeof(void *) == 2) {
#line 3621
        tmp___59 = jit->ip;
#line 3621
        (jit->ip) ++;
#line 3621
        *tmp___59 = (unsigned char)102;
      }
#line 3621
      while (1) {
#line 3621
        if ((int )sizeof(void *) > 4) {
#line 3621
          tmp___60 = 8;
        } else {
#line 3621
          tmp___60 = 0;
        }
#line 3621
        if (a1 > 7L) {
#line 3621
          tmp___61 = 4;
        } else {
#line 3621
          tmp___61 = 0;
        }
#line 3621
        if (a2 > 7L) {
#line 3621
          tmp___62 = 1;
        } else {
#line 3621
          tmp___62 = 0;
        }
#line 3621
        _amd64_rex_bits___3 = (unsigned char )((tmp___60 | tmp___61) | tmp___62);
#line 3621
        if ((int )_amd64_rex_bits___3 != 0) {
#line 3621
          tmp___63 = jit->ip;
#line 3621
          (jit->ip) ++;
#line 3621
          *tmp___63 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
        } else
#line 3621
        if ((int )sizeof(void *) == 1) {
#line 3621
          tmp___63 = jit->ip;
#line 3621
          (jit->ip) ++;
#line 3621
          *tmp___63 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
        }
#line 3621
        break;
      }
#line 3621
      switch ((int )sizeof(void *)) {
      case 1: 
#line 3621
      tmp___64 = jit->ip;
#line 3621
      (jit->ip) ++;
#line 3621
      *tmp___64 = (unsigned char)138;
#line 3621
      break;
      case 8: 
      case 4: 
      case 2: 
#line 3621
      tmp___65 = jit->ip;
#line 3621
      (jit->ip) ++;
#line 3621
      *tmp___65 = (unsigned char)139;
#line 3621
      break;
      default: 
#line 3621
      tmp___66 = __builtin_expect(1L, 0L);
#line 3621
      if (tmp___66) {
#line 3621
        __assert_rtn((char const   *)"jit_gen_op", (char const   *)"./jitter-Darwin-X86-64.c",
                     3621, (char const   *)"0");
      }
      }
#line 3621
      while (1) {
#line 3621
        while (1) {
#line 3621
          tmp___67 = jit->ip;
#line 3621
          (jit->ip) ++;
#line 3621
          *tmp___67 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
#line 3621
          break;
        }
#line 3621
        break;
      }
#line 3621
      break;
    }
  }
#line 3622
  while (1) {
#line 3622
    while (1) {
#line 3622
      if (a1 > 7L) {
#line 3622
        tmp___68 = 1;
      } else {
#line 3622
        tmp___68 = 0;
      }
#line 3622
      _amd64_rex_bits___4 = (unsigned char )(8 | tmp___68);
#line 3622
      if ((int )_amd64_rex_bits___4 != 0) {
#line 3622
        tmp___69 = jit->ip;
#line 3622
        (jit->ip) ++;
#line 3622
        *tmp___69 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
      }
#line 3622
      break;
    }
#line 3622
    while (1) {
#line 3622
      tmp___70 = jit->ip;
#line 3622
      (jit->ip) ++;
#line 3622
      *tmp___70 = (unsigned char)247;
#line 3622
      while (1) {
#line 3622
        while (1) {
#line 3622
          tmp___71 = jit->ip;
#line 3622
          (jit->ip) ++;
#line 3622
          *tmp___71 = (unsigned char )((long )((3 << 6) | (2 << 3)) | ((a1 & 7L) & 7L));
#line 3622
          break;
        }
#line 3622
        break;
      }
#line 3622
      break;
    }
#line 3622
    break;
  }
#line 3623
  break;
  case 664U: 
#line 3624
  emit_shift_op(jit, op, 4, imm);
#line 3624
  break;
  case 672U: 
#line 3625
  if (sign) {
#line 3625
    tmp___72 = 7;
  } else {
#line 3625
    tmp___72 = 5;
  }
#line 3625
  emit_shift_op(jit, op, tmp___72, imm);
#line 3625
  break;
  case 768U: 
#line 3627
  emit_cond_op(jit, op, 2, imm, sign);
#line 3627
  break;
  case 776U: 
#line 3628
  emit_cond_op(jit, op, 3, imm, sign);
#line 3628
  break;
  case 784U: 
#line 3629
  emit_cond_op(jit, op, 4, imm, sign);
#line 3629
  break;
  case 792U: 
#line 3630
  emit_cond_op(jit, op, 5, imm, sign);
#line 3630
  break;
  case 800U: 
#line 3631
  emit_cond_op(jit, op, 0, imm, sign);
#line 3631
  break;
  case 808U: 
#line 3632
  emit_cond_op(jit, op, 1, imm, sign);
#line 3632
  break;
  case 896U: 
#line 3634
  emit_branch_op(jit, op, 2, imm, sign);
#line 3634
  break;
  case 904U: 
#line 3635
  emit_branch_op(jit, op, 3, imm, sign);
#line 3635
  break;
  case 912U: 
#line 3636
  emit_branch_op(jit, op, 4, imm, sign);
#line 3636
  break;
  case 920U: 
#line 3637
  emit_branch_op(jit, op, 5, imm, sign);
#line 3637
  break;
  case 928U: 
#line 3638
  emit_branch_op(jit, op, 0, imm, sign);
#line 3638
  break;
  case 936U: 
#line 3639
  emit_branch_op(jit, op, 1, imm, sign);
#line 3639
  break;
  case 944U: 
#line 3641
  emit_branch_mask_op(jit, op, 1, imm);
#line 3641
  break;
  case 952U: 
#line 3642
  emit_branch_mask_op(jit, op, 0, imm);
#line 3642
  break;
  case 960U: 
#line 3644
  emit_branch_overflow_op(jit, op, 0, imm, 0);
#line 3644
  break;
  case 968U: 
#line 3645
  emit_branch_overflow_op(jit, op, 5, imm, 0);
#line 3645
  break;
  case 976U: 
#line 3647
  emit_branch_overflow_op(jit, op, 0, imm, 1);
#line 3647
  break;
  case 984U: 
#line 3648
  emit_branch_overflow_op(jit, op, 5, imm, 1);
#line 3648
  break;
  case 576U: 
#line 3650
  emit_mul_op(jit, op, imm, sign, 0);
#line 3650
  break;
  case 584U: 
#line 3651
  emit_mul_op(jit, op, imm, sign, 1);
#line 3651
  break;
  case 592U: 
#line 3652
  emit_div_op(jit, op, imm, sign, 0);
#line 3652
  break;
  case 600U: 
#line 3653
  emit_div_op(jit, op, imm, sign, 1);
#line 3653
  break;
  case 416U: 
#line 3655
  emit_funcall(jit, op, imm);
#line 3655
  break;
  case 144U: 
#line 3656
  while (1) {
#line 3657
    target = (struct jit_op *)a1;
#line 3658
    if (! target->in_use) {
#line 3658
      break;
    }
#line 3659
    switch ((unsigned int )((jit_opcode )((int )target->code & 0xfff8))) {
    case 1456U: 
    case 1448U: 
#line 3662
    target->arg[1] = (jit_value )jit->ip - (jit_value )jit->buf;
#line 3663
    break;
    case 1432U: 
    case 1424U: 
#line 3666
    target->arg[0] = (jit_value )jit->ip - (jit_value )jit->buf;
#line 3667
    break;
    default: 
#line 3669
    pa = target->patch_addr;
#line 3670
    while (1) {
#line 3670
      rex_correction = (unsigned char)0;
#line 3670
      if (((int )*(jit->buf + pa) & 0xf0) == 0x40) {
#line 3670
        rex_correction = (unsigned char )((int )rex_correction + 1);
      }
#line 3670
      pos = ((jit->buf + pa) + 1) + (int )rex_correction;
#line 3670
      size = 0;
#line 3670
      switch ((int )*((jit->buf + pa) + (int )rex_correction)) {
      case 0xe9: 
      case 0xe8: 
#line 3670
      size ++;
#line 3670
      break;
      case 0x0f: 
#line 3670
      if ((int )*pos >= 0x70) {
#line 3670
        if (! ((int )*pos <= 0x8f)) {
#line 3670
          goto _L___1;
        }
      } else {
        _L___1: /* CIL Label */ 
#line 3670
        tmp___73 = __builtin_expect(1L, 0L);
#line 3670
        if (tmp___73) {
#line 3670
          __assert_rtn((char const   *)"jit_gen_op", (char const   *)"./jitter-Darwin-X86-64.c",
                       3670, (char const   *)"0");
        }
      }
#line 3670
      size ++;
#line 3670
      pos ++;
#line 3670
      break;
      case 0x7f: 
      case 0x7e: 
      case 0x7d: 
      case 0x7c: 
      case 0x7b: 
      case 0x7a: 
      case 0x79: 
      case 0x78: 
      case 0x77: 
      case 0x76: 
      case 0x75: 
      case 0x74: 
      case 0x73: 
      case 0x72: 
      case 0x71: 
      case 0x70: 
      case 0xeb: 
      case 0xe2: 
      case 0xe1: 
      case 0xe0: 
#line 3670
      break;
      default: 
#line 3670
      tmp___74 = __builtin_expect(1L, 0L);
#line 3670
      if (tmp___74) {
#line 3670
        __assert_rtn((char const   *)"jit_gen_op", (char const   *)"./jitter-Darwin-X86-64.c",
                     3670, (char const   *)"0");
      }
      }
#line 3670
      disp = (int )(jit->ip - pos);
#line 3670
      if (size) {
#line 3670
        while (1) {
#line 3670
          imb___4.val = disp - 4;
#line 3670
          tmp___75 = pos;
#line 3670
          pos ++;
#line 3670
          *tmp___75 = imb___4.b[0];
#line 3670
          tmp___76 = pos;
#line 3670
          pos ++;
#line 3670
          *tmp___76 = imb___4.b[1];
#line 3670
          tmp___77 = pos;
#line 3670
          pos ++;
#line 3670
          *tmp___77 = imb___4.b[2];
#line 3670
          tmp___78 = pos;
#line 3670
          pos ++;
#line 3670
          *tmp___78 = imb___4.b[3];
#line 3670
          break;
        }
      } else
#line 3670
      if ((jit_value )(disp - 1) >= -128L) {
#line 3670
        if ((jit_value )(disp - 1) <= 127L) {
#line 3670
          while (1) {
#line 3670
            *pos = (unsigned char )((disp - 1) & 0xff);
#line 3670
            pos ++;
#line 3670
            break;
          }
        } else {
#line 3670
          goto _L___2;
        }
      } else {
        _L___2: /* CIL Label */ 
#line 3670
        tmp___79 = __builtin_expect(1L, 0L);
#line 3670
        if (tmp___79) {
#line 3670
          __assert_rtn((char const   *)"jit_gen_op", (char const   *)"./jitter-Darwin-X86-64.c",
                       3670, (char const   *)"0");
        }
      }
#line 3670
      break;
    }
    }
#line 3656
    break;
  }
#line 3675
  break;
  case 384U: 
#line 3677
  op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
#line 3678
  if ((int )op->code & 0x01) {
#line 3678
    while (1) {
#line 3678
      while (1) {
#line 3678
        if (a1 > 7L) {
#line 3678
          tmp___80 = 1;
        } else {
#line 3678
          tmp___80 = 0;
        }
#line 3678
        _amd64_rex_bits___5 = (unsigned char )tmp___80;
#line 3678
        if ((int )_amd64_rex_bits___5 != 0) {
#line 3678
          tmp___81 = jit->ip;
#line 3678
          (jit->ip) ++;
#line 3678
          *tmp___81 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
        }
#line 3678
        break;
      }
#line 3678
      while (1) {
#line 3678
        tmp___82 = jit->ip;
#line 3678
        (jit->ip) ++;
#line 3678
        *tmp___82 = (unsigned char)255;
#line 3678
        while (1) {
#line 3678
          while (1) {
#line 3678
            tmp___83 = jit->ip;
#line 3678
            (jit->ip) ++;
#line 3678
            *tmp___83 = (unsigned char )((long )((3 << 6) | (4 << 3)) | ((a1 & 7L) & 7L));
#line 3678
            break;
          }
#line 3678
          break;
        }
#line 3678
        break;
      }
#line 3678
      break;
    }
  } else {
#line 3679
    while (1) {
#line 3679
      while (1) {
#line 3679
        _amd64_rex_bits___6 = (unsigned char)0;
#line 3679
        if ((int )_amd64_rex_bits___6 != 0) {
#line 3679
          tmp___84 = jit->ip;
#line 3679
          (jit->ip) ++;
#line 3679
          *tmp___84 = (unsigned char )(0x40 | (int )_amd64_rex_bits___6);
        }
#line 3679
        break;
      }
#line 3679
      while (1) {
#line 3679
        tmp___87 = jit_is_label(jit, (void *)a1);
#line 3679
        if (tmp___87) {
#line 3679
          tmp___86 = ((size_t )((jit_value )jit->buf) + ((jit_label *)a1)->pos) - (size_t )((jit_value )jit->ip);
        } else {
#line 3679
          tmp___86 = (size_t )a1;
        }
#line 3679
        t = (int )(tmp___86 - 5UL);
#line 3679
        while (1) {
#line 3679
          tmp___88 = jit->ip;
#line 3679
          (jit->ip) ++;
#line 3679
          *tmp___88 = (unsigned char)233;
#line 3679
          while (1) {
#line 3679
            imb___5.val = t;
#line 3679
            tmp___89 = jit->ip;
#line 3679
            (jit->ip) ++;
#line 3679
            *tmp___89 = imb___5.b[0];
#line 3679
            tmp___90 = jit->ip;
#line 3679
            (jit->ip) ++;
#line 3679
            *tmp___90 = imb___5.b[1];
#line 3679
            tmp___91 = jit->ip;
#line 3679
            (jit->ip) ++;
#line 3679
            *tmp___91 = imb___5.b[2];
#line 3679
            tmp___92 = jit->ip;
#line 3679
            (jit->ip) ++;
#line 3679
            *tmp___92 = imb___5.b[3];
#line 3679
            break;
          }
#line 3679
          break;
        }
#line 3679
        break;
      }
#line 3679
      break;
    }
  }
#line 3680
  break;
  case 424U: 
#line 3682
  if (! imm) {
#line 3682
    if (a1 != 0L) {
#line 3682
      while (1) {
#line 3682
        if ((int )sizeof(void *) == 2) {
#line 3682
          tmp___93 = jit->ip;
#line 3682
          (jit->ip) ++;
#line 3682
          *tmp___93 = (unsigned char)102;
        }
#line 3682
        while (1) {
#line 3682
          if ((int )sizeof(void *) > 4) {
#line 3682
            tmp___94 = 8;
          } else {
#line 3682
            tmp___94 = 0;
          }
#line 3682
          if (a1 > 7L) {
#line 3682
            tmp___95 = 1;
          } else {
#line 3682
            tmp___95 = 0;
          }
#line 3682
          _amd64_rex_bits___7 = (unsigned char )(tmp___94 | tmp___95);
#line 3682
          if ((int )_amd64_rex_bits___7 != 0) {
#line 3682
            tmp___96 = jit->ip;
#line 3682
            (jit->ip) ++;
#line 3682
            *tmp___96 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
          } else
#line 3682
          if ((int )sizeof(void *) == 1) {
#line 3682
            tmp___96 = jit->ip;
#line 3682
            (jit->ip) ++;
#line 3682
            *tmp___96 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
          }
#line 3682
          break;
        }
#line 3682
        switch ((int )sizeof(void *)) {
        case 1: 
#line 3682
        tmp___97 = jit->ip;
#line 3682
        (jit->ip) ++;
#line 3682
        *tmp___97 = (unsigned char)138;
#line 3682
        break;
        case 8: 
        case 4: 
        case 2: 
#line 3682
        tmp___98 = jit->ip;
#line 3682
        (jit->ip) ++;
#line 3682
        *tmp___98 = (unsigned char)139;
#line 3682
        break;
        default: 
#line 3682
        tmp___99 = __builtin_expect(1L, 0L);
#line 3682
        if (tmp___99) {
#line 3682
          __assert_rtn((char const   *)"jit_gen_op", (char const   *)"./jitter-Darwin-X86-64.c",
                       3682, (char const   *)"0");
        }
        }
#line 3682
        while (1) {
#line 3682
          while (1) {
#line 3682
            tmp___100 = jit->ip;
#line 3682
            (jit->ip) ++;
#line 3682
            *tmp___100 = (unsigned char )((long )(3 << 6) | (a1 & 7L));
#line 3682
            break;
          }
#line 3682
          break;
        }
#line 3682
        break;
      }
    }
  }
#line 3683
  if (imm) {
#line 3683
    while (1) {
#line 3683
      while (1) {
#line 3683
        if (sizeof(void *) > 4ULL) {
#line 3683
          tmp___101 = 8;
        } else {
#line 3683
          tmp___101 = 0;
        }
#line 3683
        _amd64_rex_bits___8 = (unsigned char )tmp___101;
#line 3683
        if ((int )_amd64_rex_bits___8 != 0) {
#line 3683
          tmp___102 = jit->ip;
#line 3683
          (jit->ip) ++;
#line 3683
          *tmp___102 = (unsigned char )(0x40 | (int )_amd64_rex_bits___8);
        } else
#line 3683
        if (sizeof(void *) == 1ULL) {
#line 3683
          tmp___102 = jit->ip;
#line 3683
          (jit->ip) ++;
#line 3683
          *tmp___102 = (unsigned char )(0x40 | (int )_amd64_rex_bits___8);
        }
#line 3683
        break;
      }
#line 3683
      tmp___103 = jit->ip;
#line 3683
      (jit->ip) ++;
#line 3683
      *tmp___103 = (unsigned char)184;
#line 3683
      if (sizeof(void *) == 8ULL) {
#line 3683
        while (1) {
#line 3683
          imb___6.val = (size_t )a1;
#line 3683
          tmp___104 = jit->ip;
#line 3683
          (jit->ip) ++;
#line 3683
          *tmp___104 = imb___6.b[0];
#line 3683
          tmp___105 = jit->ip;
#line 3683
          (jit->ip) ++;
#line 3683
          *tmp___105 = imb___6.b[1];
#line 3683
          tmp___106 = jit->ip;
#line 3683
          (jit->ip) ++;
#line 3683
          *tmp___106 = imb___6.b[2];
#line 3683
          tmp___107 = jit->ip;
#line 3683
          (jit->ip) ++;
#line 3683
          *tmp___107 = imb___6.b[3];
#line 3683
          tmp___108 = jit->ip;
#line 3683
          (jit->ip) ++;
#line 3683
          *tmp___108 = imb___6.b[4];
#line 3683
          tmp___109 = jit->ip;
#line 3683
          (jit->ip) ++;
#line 3683
          *tmp___109 = imb___6.b[5];
#line 3683
          tmp___110 = jit->ip;
#line 3683
          (jit->ip) ++;
#line 3683
          *tmp___110 = imb___6.b[6];
#line 3683
          tmp___111 = jit->ip;
#line 3683
          (jit->ip) ++;
#line 3683
          *tmp___111 = imb___6.b[7];
#line 3683
          break;
        }
      } else {
#line 3683
        while (1) {
#line 3683
          imb___7.val = (int )((size_t )a1);
#line 3683
          tmp___112 = jit->ip;
#line 3683
          (jit->ip) ++;
#line 3683
          *tmp___112 = imb___7.b[0];
#line 3683
          tmp___113 = jit->ip;
#line 3683
          (jit->ip) ++;
#line 3683
          *tmp___113 = imb___7.b[1];
#line 3683
          tmp___114 = jit->ip;
#line 3683
          (jit->ip) ++;
#line 3683
          *tmp___114 = imb___7.b[2];
#line 3683
          tmp___115 = jit->ip;
#line 3683
          (jit->ip) ++;
#line 3683
          *tmp___115 = imb___7.b[3];
#line 3683
          break;
        }
      }
#line 3683
      break;
    }
  }
#line 3684
  emit_pop_callee_saved_regs(jit);
#line 3685
  tmp___125 = jit_current_func_info(jit);
#line 3685
  if (tmp___125->has_prolog) {
#line 3686
    while (1) {
#line 3686
      if ((int )sizeof(void *) == 2) {
#line 3686
        tmp___116 = jit->ip;
#line 3686
        (jit->ip) ++;
#line 3686
        *tmp___116 = (unsigned char)102;
      }
#line 3686
      while (1) {
#line 3686
        if ((int )sizeof(void *) > 4) {
#line 3686
          tmp___117 = 8;
        } else {
#line 3686
          tmp___117 = 0;
        }
#line 3686
        _amd64_rex_bits___9 = (unsigned char )tmp___117;
#line 3686
        if ((int )_amd64_rex_bits___9 != 0) {
#line 3686
          tmp___118 = jit->ip;
#line 3686
          (jit->ip) ++;
#line 3686
          *tmp___118 = (unsigned char )(0x40 | (int )_amd64_rex_bits___9);
        } else
#line 3686
        if ((int )sizeof(void *) == 1) {
#line 3686
          tmp___118 = jit->ip;
#line 3686
          (jit->ip) ++;
#line 3686
          *tmp___118 = (unsigned char )(0x40 | (int )_amd64_rex_bits___9);
        }
#line 3686
        break;
      }
#line 3686
      switch ((int )sizeof(void *)) {
      case 1: 
#line 3686
      tmp___119 = jit->ip;
#line 3686
      (jit->ip) ++;
#line 3686
      *tmp___119 = (unsigned char)138;
#line 3686
      break;
      case 8: 
      case 4: 
      case 2: 
#line 3686
      tmp___120 = jit->ip;
#line 3686
      (jit->ip) ++;
#line 3686
      *tmp___120 = (unsigned char)139;
#line 3686
      break;
      default: 
#line 3686
      tmp___121 = __builtin_expect(1L, 0L);
#line 3686
      if (tmp___121) {
#line 3686
        __assert_rtn((char const   *)"jit_gen_op", (char const   *)"./jitter-Darwin-X86-64.c",
                     3686, (char const   *)"0");
      }
      }
#line 3686
      while (1) {
#line 3686
        while (1) {
#line 3686
          tmp___122 = jit->ip;
#line 3686
          (jit->ip) ++;
#line 3686
          *tmp___122 = (unsigned char )(((3 << 6) | (4 << 3)) | 5);
#line 3686
          break;
        }
#line 3686
        break;
      }
#line 3686
      break;
    }
#line 3687
    while (1) {
#line 3687
      while (1) {
#line 3687
        _amd64_rex_bits___10 = (unsigned char)0;
#line 3687
        if ((int )_amd64_rex_bits___10 != 0) {
#line 3687
          tmp___123 = jit->ip;
#line 3687
          (jit->ip) ++;
#line 3687
          *tmp___123 = (unsigned char )(0x40 | (int )_amd64_rex_bits___10);
        }
#line 3687
        break;
      }
#line 3687
      tmp___124 = jit->ip;
#line 3687
      (jit->ip) ++;
#line 3687
      *tmp___124 = (unsigned char)93;
#line 3687
      break;
    }
  }
#line 3689
  while (1) {
#line 3689
    tmp___126 = jit->ip;
#line 3689
    (jit->ip) ++;
#line 3689
    *tmp___126 = (unsigned char)195;
#line 3689
    break;
  }
#line 3690
  break;
  case 400U: 
#line 3692
  funcall_put_arg(jit, op);
#line 3692
  break;
  case 408U: 
#line 3693
  funcall_fput_arg(jit, op);
#line 3693
  break;
  case 432U: 
#line 3694
  emit_get_arg(jit, op);
#line 3694
  break;
  case 1920U: 
#line 3695
  emit_msg_op(jit, op);
#line 3695
  break;
  case 4112U: 
#line 3696
  emit_trace_op(jit, op);
#line 3697
  while ((unsigned long )jit->ip % 16UL) {
#line 3698
    while (1) {
#line 3698
      while (1) {
#line 3698
        tmp___127 = jit->ip;
#line 3698
        (jit->ip) ++;
#line 3698
        *tmp___127 = (unsigned char)144;
#line 3698
        break;
      }
#line 3698
      break;
    }
  }
#line 3699
  break;
  case 264U: 
#line 3701
  emit_ld_op(jit, op, a1, a2);
#line 3701
  break;
  case 272U: 
#line 3702
  emit_ldx_op(jit, op, a1, a2, a3);
#line 3702
  break;
  case 1296U: 
#line 3703
  emit_sse_fst_op(jit, op, a1, a2);
#line 3703
  break;
  case 1304U: 
#line 3704
  emit_sse_fstx_op(jit, op, a1, a2, a3);
#line 3704
  break;
  case 1280U: 
#line 3705
  emit_sse_fld_op(jit, op, a1, a2);
#line 3705
  break;
  case 1288U: 
#line 3706
  emit_sse_fldx_op(jit, op, a1, a2, a3);
#line 3706
  break;
  case 296U: 
#line 3707
  emit_memcpy(jit, op, a1, a2, a3);
#line 3707
  break;
  case 304U: 
#line 3708
  emit_memset(jit, op, a1, a2, a3, (int )op->arg_size);
#line 3708
  break;
  case 1536U: 
#line 3709
  emit_transfer_init(jit, op, a1, a2, a3, (int )op->arg_size);
#line 3709
  break;
  case 1544U: 
#line 3710
  emit_transfer_loop(jit, (jit_op *)a1);
#line 3710
  break;
  case 1552U: 
#line 3711
  emit_transfer_op(jit, op, 6);
#line 3711
  break;
  case 1560U: 
#line 3712
  emit_transfer_op(jit, op, 4);
#line 3712
  break;
  case 1568U: 
#line 3713
  emit_transfer_op(jit, op, 1);
#line 3713
  break;
  case 1576U: 
#line 3714
  emit_transfer_op(jit, op, 0);
#line 3714
  break;
  case 1592U: 
#line 3715
  emit_transfer_op(jit, op, 5);
#line 3715
  break;
  case 160U: 
#line 3717
  break;
  case 152U: 
#line 3718
  break;
  case 440U: 
#line 3719
  break;
  case 136U: 
#line 3720
  ((jit_label *)a1)->pos = (size_t )((jit_value )jit->ip - (jit_value )jit->buf);
#line 3720
  break;
  case 1440U: 
#line 3723
  while ((unsigned long )jit->ip % (unsigned long )op->arg[0]) {
#line 3724
    while (1) {
#line 3724
      while (1) {
#line 3724
        tmp___128 = jit->ip;
#line 3724
        (jit->ip) ++;
#line 3724
        *tmp___128 = (unsigned char)144;
#line 3724
        break;
      }
#line 3724
      break;
    }
  }
#line 3725
  break;
  case 1456U: 
  case 1448U: 
#line 3729
  op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
#line 3730
  while (1) {
#line 3730
    while (1) {
#line 3730
      if (sizeof(void *) > 4ULL) {
#line 3730
        tmp___129 = 8;
      } else {
#line 3730
        tmp___129 = 0;
      }
#line 3730
      if (a1 > 7L) {
#line 3730
        tmp___130 = 1;
      } else {
#line 3730
        tmp___130 = 0;
      }
#line 3730
      _amd64_rex_bits___11 = (unsigned char )(tmp___129 | tmp___130);
#line 3730
      if ((int )_amd64_rex_bits___11 != 0) {
#line 3730
        tmp___131 = jit->ip;
#line 3730
        (jit->ip) ++;
#line 3730
        *tmp___131 = (unsigned char )(0x40 | (int )_amd64_rex_bits___11);
      } else
#line 3730
      if (sizeof(void *) == 1ULL) {
#line 3730
        tmp___131 = jit->ip;
#line 3730
        (jit->ip) ++;
#line 3730
        *tmp___131 = (unsigned char )(0x40 | (int )_amd64_rex_bits___11);
      }
#line 3730
      break;
    }
#line 3730
    tmp___132 = jit->ip;
#line 3730
    (jit->ip) ++;
#line 3730
    *tmp___132 = (unsigned char )(184L + (a1 & 7L));
#line 3730
    if (sizeof(void *) == 8ULL) {
#line 3730
      while (1) {
#line 3730
        imb___8.val = 0xdeadbeefcafebabe;
#line 3730
        tmp___133 = jit->ip;
#line 3730
        (jit->ip) ++;
#line 3730
        *tmp___133 = imb___8.b[0];
#line 3730
        tmp___134 = jit->ip;
#line 3730
        (jit->ip) ++;
#line 3730
        *tmp___134 = imb___8.b[1];
#line 3730
        tmp___135 = jit->ip;
#line 3730
        (jit->ip) ++;
#line 3730
        *tmp___135 = imb___8.b[2];
#line 3730
        tmp___136 = jit->ip;
#line 3730
        (jit->ip) ++;
#line 3730
        *tmp___136 = imb___8.b[3];
#line 3730
        tmp___137 = jit->ip;
#line 3730
        (jit->ip) ++;
#line 3730
        *tmp___137 = imb___8.b[4];
#line 3730
        tmp___138 = jit->ip;
#line 3730
        (jit->ip) ++;
#line 3730
        *tmp___138 = imb___8.b[5];
#line 3730
        tmp___139 = jit->ip;
#line 3730
        (jit->ip) ++;
#line 3730
        *tmp___139 = imb___8.b[6];
#line 3730
        tmp___140 = jit->ip;
#line 3730
        (jit->ip) ++;
#line 3730
        *tmp___140 = imb___8.b[7];
#line 3730
        break;
      }
    } else {
#line 3730
      while (1) {
#line 3730
        imb___9.val = -889275714;
#line 3730
        tmp___141 = jit->ip;
#line 3730
        (jit->ip) ++;
#line 3730
        *tmp___141 = imb___9.b[0];
#line 3730
        tmp___142 = jit->ip;
#line 3730
        (jit->ip) ++;
#line 3730
        *tmp___142 = imb___9.b[1];
#line 3730
        tmp___143 = jit->ip;
#line 3730
        (jit->ip) ++;
#line 3730
        *tmp___143 = imb___9.b[2];
#line 3730
        tmp___144 = jit->ip;
#line 3730
        (jit->ip) ++;
#line 3730
        *tmp___144 = imb___9.b[3];
#line 3730
        break;
      }
    }
#line 3730
    break;
  }
#line 3731
  break;
  case 1408U: 
#line 3734
  break;
  case 48U: 
#line 3735
  break;
  default: 
#line 3738
  found = 0;
  }
#line 3741
  if (found) {
#line 3741
    return;
  }
#line 3744
  switch ((int )op->code) {
  case 257: 
#line 3745
  if (a1 != a2) {
#line 3745
    while (1) {
#line 3745
      if ((int )sizeof(void *) == 2) {
#line 3745
        tmp___145 = jit->ip;
#line 3745
        (jit->ip) ++;
#line 3745
        *tmp___145 = (unsigned char)102;
      }
#line 3745
      while (1) {
#line 3745
        if ((int )sizeof(void *) > 4) {
#line 3745
          tmp___146 = 8;
        } else {
#line 3745
          tmp___146 = 0;
        }
#line 3745
        if (a1 > 7L) {
#line 3745
          tmp___147 = 4;
        } else {
#line 3745
          tmp___147 = 0;
        }
#line 3745
        if (a2 > 7L) {
#line 3745
          tmp___148 = 1;
        } else {
#line 3745
          tmp___148 = 0;
        }
#line 3745
        _amd64_rex_bits___12 = (unsigned char )((tmp___146 | tmp___147) | tmp___148);
#line 3745
        if ((int )_amd64_rex_bits___12 != 0) {
#line 3745
          tmp___149 = jit->ip;
#line 3745
          (jit->ip) ++;
#line 3745
          *tmp___149 = (unsigned char )(0x40 | (int )_amd64_rex_bits___12);
        } else
#line 3745
        if ((int )sizeof(void *) == 1) {
#line 3745
          tmp___149 = jit->ip;
#line 3745
          (jit->ip) ++;
#line 3745
          *tmp___149 = (unsigned char )(0x40 | (int )_amd64_rex_bits___12);
        }
#line 3745
        break;
      }
#line 3745
      switch ((int )sizeof(void *)) {
      case 1: 
#line 3745
      tmp___150 = jit->ip;
#line 3745
      (jit->ip) ++;
#line 3745
      *tmp___150 = (unsigned char)138;
#line 3745
      break;
      case 8: 
      case 4: 
      case 2: 
#line 3745
      tmp___151 = jit->ip;
#line 3745
      (jit->ip) ++;
#line 3745
      *tmp___151 = (unsigned char)139;
#line 3745
      break;
      default: 
#line 3745
      tmp___152 = __builtin_expect(1L, 0L);
#line 3745
      if (tmp___152) {
#line 3745
        __assert_rtn((char const   *)"jit_gen_op", (char const   *)"./jitter-Darwin-X86-64.c",
                     3745, (char const   *)"0");
      }
      }
#line 3745
      while (1) {
#line 3745
        while (1) {
#line 3745
          tmp___153 = jit->ip;
#line 3745
          (jit->ip) ++;
#line 3745
          *tmp___153 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
#line 3745
          break;
        }
#line 3745
        break;
      }
#line 3745
      break;
    }
  }
#line 3745
  break;
  case 258: 
#line 3747
  if (a2 == 0L) {
#line 3747
    while (1) {
#line 3747
      while (1) {
#line 3747
        if (a1 > 7L) {
#line 3747
          tmp___154 = 4;
        } else {
#line 3747
          tmp___154 = 0;
        }
#line 3747
        if (a1 > 7L) {
#line 3747
          tmp___155 = 1;
        } else {
#line 3747
          tmp___155 = 0;
        }
#line 3747
        _amd64_rex_bits___13 = (unsigned char )((8 | tmp___154) | tmp___155);
#line 3747
        if ((int )_amd64_rex_bits___13 != 0) {
#line 3747
          tmp___156 = jit->ip;
#line 3747
          (jit->ip) ++;
#line 3747
          *tmp___156 = (unsigned char )(0x40 | (int )_amd64_rex_bits___13);
        }
#line 3747
        break;
      }
#line 3747
      tmp___157 = jit->ip;
#line 3747
      (jit->ip) ++;
#line 3747
      *tmp___157 = (unsigned char )((6 << 3) + 3);
#line 3747
      while (1) {
#line 3747
        while (1) {
#line 3747
          tmp___158 = jit->ip;
#line 3747
          (jit->ip) ++;
#line 3747
          *tmp___158 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a1 & 7L));
#line 3747
          break;
        }
#line 3747
        break;
      }
#line 3747
      break;
    }
  } else {
#line 3748
    while (1) {
#line 3748
      while (1) {
#line 3748
        if (a1 > 7L) {
#line 3748
          tmp___159 = 1;
        } else {
#line 3748
          tmp___159 = 0;
        }
#line 3748
        _amd64_rex_bits___14 = (unsigned char )(8 | tmp___159);
#line 3748
        if ((int )_amd64_rex_bits___14 != 0) {
#line 3748
          tmp___160 = jit->ip;
#line 3748
          (jit->ip) ++;
#line 3748
          *tmp___160 = (unsigned char )(0x40 | (int )_amd64_rex_bits___14);
        }
#line 3748
        break;
      }
#line 3748
      tmp___161 = jit->ip;
#line 3748
      (jit->ip) ++;
#line 3748
      *tmp___161 = (unsigned char )(184L + (a1 & 7L));
#line 3748
      while (1) {
#line 3748
        imb___10.val = (size_t )a2;
#line 3748
        tmp___162 = jit->ip;
#line 3748
        (jit->ip) ++;
#line 3748
        *tmp___162 = imb___10.b[0];
#line 3748
        tmp___163 = jit->ip;
#line 3748
        (jit->ip) ++;
#line 3748
        *tmp___163 = imb___10.b[1];
#line 3748
        tmp___164 = jit->ip;
#line 3748
        (jit->ip) ++;
#line 3748
        *tmp___164 = imb___10.b[2];
#line 3748
        tmp___165 = jit->ip;
#line 3748
        (jit->ip) ++;
#line 3748
        *tmp___165 = imb___10.b[3];
#line 3748
        tmp___166 = jit->ip;
#line 3748
        (jit->ip) ++;
#line 3748
        *tmp___166 = imb___10.b[4];
#line 3748
        tmp___167 = jit->ip;
#line 3748
        (jit->ip) ++;
#line 3748
        *tmp___167 = imb___10.b[5];
#line 3748
        tmp___168 = jit->ip;
#line 3748
        (jit->ip) ++;
#line 3748
        *tmp___168 = imb___10.b[6];
#line 3748
        tmp___169 = jit->ip;
#line 3748
        (jit->ip) ++;
#line 3748
        *tmp___169 = imb___10.b[7];
#line 3748
        break;
      }
#line 3748
      break;
    }
  }
#line 3749
  break;
  case 392: 
#line 3751
  funcall_prepare(jit, op, (int )(a1 + a2));
#line 3752
  tmp___174 = emit_push_caller_saved_regs(jit, op);
#line 3752
  jit->push_count += tmp___174;
#line 3753
  break;
  case 448: 
#line 3755
  funcall_prepare_optional(jit);
#line 3755
  break;
  case 128: 
#line 3757
  emit_prolog_op(jit, op);
#line 3757
  break;
  case 282: 
#line 3758
  while (1) {
#line 3758
    if ((int )op->arg_size == 2) {
#line 3758
      tmp___175 = jit->ip;
#line 3758
      (jit->ip) ++;
#line 3758
      *tmp___175 = (unsigned char)102;
    }
#line 3758
    while (1) {
#line 3758
      if ((int )op->arg_size > 4) {
#line 3758
        tmp___176 = 8;
      } else {
#line 3758
        tmp___176 = 0;
      }
#line 3758
      if (a2 > 7L) {
#line 3758
        tmp___177 = 4;
      } else {
#line 3758
        tmp___177 = 0;
      }
#line 3758
      _amd64_rex_bits___15 = (unsigned char )(tmp___176 | tmp___177);
#line 3758
      if ((int )_amd64_rex_bits___15 != 0) {
#line 3758
        tmp___178 = jit->ip;
#line 3758
        (jit->ip) ++;
#line 3758
        *tmp___178 = (unsigned char )(0x40 | (int )_amd64_rex_bits___15);
      } else
#line 3758
      if ((int )op->arg_size == 1) {
#line 3758
        tmp___178 = jit->ip;
#line 3758
        (jit->ip) ++;
#line 3758
        *tmp___178 = (unsigned char )(0x40 | (int )_amd64_rex_bits___15);
      }
#line 3758
      break;
    }
#line 3758
    switch ((int )op->arg_size) {
    case 1: 
#line 3758
    tmp___179 = jit->ip;
#line 3758
    (jit->ip) ++;
#line 3758
    *tmp___179 = (unsigned char)136;
#line 3758
    break;
    case 8: 
    case 4: 
    case 2: 
#line 3758
    tmp___180 = jit->ip;
#line 3758
    (jit->ip) ++;
#line 3758
    *tmp___180 = (unsigned char)137;
#line 3758
    break;
    default: 
#line 3758
    tmp___181 = __builtin_expect(1L, 0L);
#line 3758
    if (tmp___181) {
#line 3758
      __assert_rtn((char const   *)"jit_gen_op", (char const   *)"./jitter-Darwin-X86-64.c",
                   3758, (char const   *)"0");
    }
    }
#line 3758
    while (1) {
#line 3758
      tmp___182 = jit->ip;
#line 3758
      (jit->ip) ++;
#line 3758
      *tmp___182 = (unsigned char )(((a2 & 7L) << 3) | 4L);
#line 3758
      break;
    }
#line 3758
    while (1) {
#line 3758
      tmp___183 = jit->ip;
#line 3758
      (jit->ip) ++;
#line 3758
      *tmp___183 = (unsigned char )((4 << 3) | 5);
#line 3758
      break;
    }
#line 3758
    while (1) {
#line 3758
      imb___12.val = (int )a1;
#line 3758
      tmp___184 = jit->ip;
#line 3758
      (jit->ip) ++;
#line 3758
      *tmp___184 = imb___12.b[0];
#line 3758
      tmp___185 = jit->ip;
#line 3758
      (jit->ip) ++;
#line 3758
      *tmp___185 = imb___12.b[1];
#line 3758
      tmp___186 = jit->ip;
#line 3758
      (jit->ip) ++;
#line 3758
      *tmp___186 = imb___12.b[2];
#line 3758
      tmp___187 = jit->ip;
#line 3758
      (jit->ip) ++;
#line 3758
      *tmp___187 = imb___12.b[3];
#line 3758
      break;
    }
#line 3758
    break;
  }
#line 3758
  break;
  case 281: 
#line 3759
  while (1) {
#line 3759
    if ((int )op->arg_size == 2) {
#line 3759
      tmp___188 = jit->ip;
#line 3759
      (jit->ip) ++;
#line 3759
      *tmp___188 = (unsigned char)102;
    }
#line 3759
    while (1) {
#line 3759
      if ((int )op->arg_size > 4) {
#line 3759
        tmp___189 = 8;
      } else {
#line 3759
        tmp___189 = 0;
      }
#line 3759
      if (a2 > 7L) {
#line 3759
        tmp___190 = 4;
      } else {
#line 3759
        tmp___190 = 0;
      }
#line 3759
      if (a1 > 7L) {
#line 3759
        tmp___191 = 1;
      } else {
#line 3759
        tmp___191 = 0;
      }
#line 3759
      _amd64_rex_bits___16 = (unsigned char )((tmp___189 | tmp___190) | tmp___191);
#line 3759
      if ((int )_amd64_rex_bits___16 != 0) {
#line 3759
        tmp___192 = jit->ip;
#line 3759
        (jit->ip) ++;
#line 3759
        *tmp___192 = (unsigned char )(0x40 | (int )_amd64_rex_bits___16);
      } else
#line 3759
      if ((int )op->arg_size == 1) {
#line 3759
        tmp___192 = jit->ip;
#line 3759
        (jit->ip) ++;
#line 3759
        *tmp___192 = (unsigned char )(0x40 | (int )_amd64_rex_bits___16);
      }
#line 3759
      break;
    }
#line 3759
    switch ((int )op->arg_size) {
    case 1: 
#line 3759
    tmp___193 = jit->ip;
#line 3759
    (jit->ip) ++;
#line 3759
    *tmp___193 = (unsigned char)136;
#line 3759
    break;
    case 8: 
    case 4: 
    case 2: 
#line 3759
    tmp___194 = jit->ip;
#line 3759
    (jit->ip) ++;
#line 3759
    *tmp___194 = (unsigned char)137;
#line 3759
    break;
    default: 
#line 3759
    tmp___195 = __builtin_expect(1L, 0L);
#line 3759
    if (tmp___195) {
#line 3759
      __assert_rtn((char const   *)"jit_gen_op", (char const   *)"./jitter-Darwin-X86-64.c",
                   3759, (char const   *)"0");
    }
    }
#line 3759
    while (1) {
#line 3759
      if ((a1 & 7L) == 4L) {
#line 3759
        while (1) {
#line 3759
          tmp___196 = jit->ip;
#line 3759
          (jit->ip) ++;
#line 3759
          *tmp___196 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 4L);
#line 3759
          break;
        }
#line 3759
        while (1) {
#line 3759
          tmp___197 = jit->ip;
#line 3759
          (jit->ip) ++;
#line 3759
          *tmp___197 = (unsigned char )((4 << 3) | 4);
#line 3759
          break;
        }
#line 3759
        break;
      }
#line 3759
      if ((a1 & 7L) != 5L) {
#line 3759
        while (1) {
#line 3759
          tmp___206 = jit->ip;
#line 3759
          (jit->ip) ++;
#line 3759
          *tmp___206 = (unsigned char )((((a2 & 7L) & 7L) << 3) | ((a1 & 7L) & 7L));
#line 3759
          break;
        }
#line 3759
        break;
      }
#line 3759
      while (1) {
#line 3759
        tmp___207 = jit->ip;
#line 3759
        (jit->ip) ++;
#line 3759
        *tmp___207 = (unsigned char )(((long )(1 << 6) | (((a2 & 7L) & 7L) << 3)) | ((a1 & 7L) & 7L));
#line 3759
        break;
      }
#line 3759
      while (1) {
#line 3759
        *(jit->ip) = (unsigned char)0;
#line 3759
        (jit->ip) ++;
#line 3759
        break;
      }
#line 3759
      break;
    }
#line 3759
    break;
  }
#line 3759
  break;
  case 290: 
#line 3760
  while (1) {
#line 3760
    if ((int )op->arg_size == 2) {
#line 3760
      tmp___213 = jit->ip;
#line 3760
      (jit->ip) ++;
#line 3760
      *tmp___213 = (unsigned char)102;
    }
#line 3760
    while (1) {
#line 3760
      if ((int )op->arg_size > 4) {
#line 3760
        tmp___214 = 8;
      } else {
#line 3760
        tmp___214 = 0;
      }
#line 3760
      if (a3 > 7L) {
#line 3760
        tmp___215 = 4;
      } else {
#line 3760
        tmp___215 = 0;
      }
#line 3760
      if (a2 > 7L) {
#line 3760
        tmp___216 = 1;
      } else {
#line 3760
        tmp___216 = 0;
      }
#line 3760
      _amd64_rex_bits___17 = (unsigned char )((tmp___214 | tmp___215) | tmp___216);
#line 3760
      if ((int )_amd64_rex_bits___17 != 0) {
#line 3760
        tmp___217 = jit->ip;
#line 3760
        (jit->ip) ++;
#line 3760
        *tmp___217 = (unsigned char )(0x40 | (int )_amd64_rex_bits___17);
      } else
#line 3760
      if ((int )op->arg_size == 1) {
#line 3760
        tmp___217 = jit->ip;
#line 3760
        (jit->ip) ++;
#line 3760
        *tmp___217 = (unsigned char )(0x40 | (int )_amd64_rex_bits___17);
      }
#line 3760
      break;
    }
#line 3760
    switch ((int )op->arg_size) {
    case 1: 
#line 3760
    tmp___218 = jit->ip;
#line 3760
    (jit->ip) ++;
#line 3760
    *tmp___218 = (unsigned char)136;
#line 3760
    break;
    case 8: 
    case 4: 
    case 2: 
#line 3760
    tmp___219 = jit->ip;
#line 3760
    (jit->ip) ++;
#line 3760
    *tmp___219 = (unsigned char)137;
#line 3760
    break;
    default: 
#line 3760
    tmp___220 = __builtin_expect(1L, 0L);
#line 3760
    if (tmp___220) {
#line 3760
      __assert_rtn((char const   *)"jit_gen_op", (char const   *)"./jitter-Darwin-X86-64.c",
                   3760, (char const   *)"0");
    }
    }
#line 3760
    while (1) {
#line 3760
      if ((a2 & 7L) == 4L) {
#line 3760
        if (a1 == 0L) {
#line 3760
          while (1) {
#line 3760
            tmp___221 = jit->ip;
#line 3760
            (jit->ip) ++;
#line 3760
            *tmp___221 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 4L);
#line 3760
            break;
          }
#line 3760
          while (1) {
#line 3760
            tmp___222 = jit->ip;
#line 3760
            (jit->ip) ++;
#line 3760
            *tmp___222 = (unsigned char )((4 << 3) | 4);
#line 3760
            break;
          }
        } else
#line 3760
        if (a1 >= -128L) {
#line 3760
          if (a1 <= 127L) {
#line 3760
            while (1) {
#line 3760
              tmp___223 = jit->ip;
#line 3760
              (jit->ip) ++;
#line 3760
              *tmp___223 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
#line 3760
              break;
            }
#line 3760
            while (1) {
#line 3760
              tmp___224 = jit->ip;
#line 3760
              (jit->ip) ++;
#line 3760
              *tmp___224 = (unsigned char )((4 << 3) | 4);
#line 3760
              break;
            }
#line 3760
            while (1) {
#line 3760
              *(jit->ip) = (unsigned char )(a1 & 255L);
#line 3760
              (jit->ip) ++;
#line 3760
              break;
            }
          } else {
#line 3760
            goto _L___3;
          }
        } else {
          _L___3: /* CIL Label */ 
#line 3760
          while (1) {
#line 3760
            tmp___225 = jit->ip;
#line 3760
            (jit->ip) ++;
#line 3760
            *tmp___225 = (unsigned char )(((long )(2 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
#line 3760
            break;
          }
#line 3760
          while (1) {
#line 3760
            tmp___226 = jit->ip;
#line 3760
            (jit->ip) ++;
#line 3760
            *tmp___226 = (unsigned char )((4 << 3) | 4);
#line 3760
            break;
          }
#line 3760
          while (1) {
#line 3760
            imb___15.val = (int )a1;
#line 3760
            tmp___227 = jit->ip;
#line 3760
            (jit->ip) ++;
#line 3760
            *tmp___227 = imb___15.b[0];
#line 3760
            tmp___228 = jit->ip;
#line 3760
            (jit->ip) ++;
#line 3760
            *tmp___228 = imb___15.b[1];
#line 3760
            tmp___229 = jit->ip;
#line 3760
            (jit->ip) ++;
#line 3760
            *tmp___229 = imb___15.b[2];
#line 3760
            tmp___230 = jit->ip;
#line 3760
            (jit->ip) ++;
#line 3760
            *tmp___230 = imb___15.b[3];
#line 3760
            break;
          }
        }
#line 3760
        break;
      }
#line 3760
      if (a1 == 0L) {
#line 3760
        if ((a2 & 7L) != 5L) {
#line 3760
          while (1) {
#line 3760
            tmp___231 = jit->ip;
#line 3760
            (jit->ip) ++;
#line 3760
            *tmp___231 = (unsigned char )((((a3 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 3760
            break;
          }
#line 3760
          break;
        }
      }
#line 3760
      if (a1 >= -128L) {
#line 3760
        if (a1 <= 127L) {
#line 3760
          while (1) {
#line 3760
            tmp___232 = jit->ip;
#line 3760
            (jit->ip) ++;
#line 3760
            *tmp___232 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 3760
            break;
          }
#line 3760
          while (1) {
#line 3760
            *(jit->ip) = (unsigned char )(a1 & 255L);
#line 3760
            (jit->ip) ++;
#line 3760
            break;
          }
        } else {
#line 3760
          goto _L___4;
        }
      } else {
        _L___4: /* CIL Label */ 
#line 3760
        while (1) {
#line 3760
          tmp___233 = jit->ip;
#line 3760
          (jit->ip) ++;
#line 3760
          *tmp___233 = (unsigned char )(((long )(2 << 6) | (((a3 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 3760
          break;
        }
#line 3760
        while (1) {
#line 3760
          imb___16.val = (int )a1;
#line 3760
          tmp___234 = jit->ip;
#line 3760
          (jit->ip) ++;
#line 3760
          *tmp___234 = imb___16.b[0];
#line 3760
          tmp___235 = jit->ip;
#line 3760
          (jit->ip) ++;
#line 3760
          *tmp___235 = imb___16.b[1];
#line 3760
          tmp___236 = jit->ip;
#line 3760
          (jit->ip) ++;
#line 3760
          *tmp___236 = imb___16.b[2];
#line 3760
          tmp___237 = jit->ip;
#line 3760
          (jit->ip) ++;
#line 3760
          *tmp___237 = imb___16.b[3];
#line 3760
          break;
        }
      }
#line 3760
      break;
    }
#line 3760
    break;
  }
#line 3760
  break;
  case 289: 
#line 3761
  while (1) {
#line 3761
    if ((int )op->arg_size == 2) {
#line 3761
      tmp___238 = jit->ip;
#line 3761
      (jit->ip) ++;
#line 3761
      *tmp___238 = (unsigned char)102;
    }
#line 3761
    while (1) {
#line 3761
      if ((int )op->arg_size > 4) {
#line 3761
        tmp___239 = 8;
      } else {
#line 3761
        tmp___239 = 0;
      }
#line 3761
      if (a3 > 7L) {
#line 3761
        tmp___240 = 4;
      } else {
#line 3761
        tmp___240 = 0;
      }
#line 3761
      if (a2 > 7L) {
#line 3761
        tmp___241 = 2;
      } else {
#line 3761
        tmp___241 = 0;
      }
#line 3761
      if (a1 > 7L) {
#line 3761
        tmp___242 = 1;
      } else {
#line 3761
        tmp___242 = 0;
      }
#line 3761
      _amd64_rex_bits___18 = (unsigned char )(((tmp___239 | tmp___240) | tmp___241) | tmp___242);
#line 3761
      if ((int )_amd64_rex_bits___18 != 0) {
#line 3761
        tmp___243 = jit->ip;
#line 3761
        (jit->ip) ++;
#line 3761
        *tmp___243 = (unsigned char )(0x40 | (int )_amd64_rex_bits___18);
      } else
#line 3761
      if ((int )op->arg_size == 1) {
#line 3761
        tmp___243 = jit->ip;
#line 3761
        (jit->ip) ++;
#line 3761
        *tmp___243 = (unsigned char )(0x40 | (int )_amd64_rex_bits___18);
      }
#line 3761
      break;
    }
#line 3761
    switch ((int )op->arg_size) {
    case 1: 
#line 3761
    tmp___244 = jit->ip;
#line 3761
    (jit->ip) ++;
#line 3761
    *tmp___244 = (unsigned char)136;
#line 3761
    break;
    case 8: 
    case 4: 
    case 2: 
#line 3761
    tmp___245 = jit->ip;
#line 3761
    (jit->ip) ++;
#line 3761
    *tmp___245 = (unsigned char)137;
#line 3761
    break;
    default: 
#line 3761
    tmp___246 = __builtin_expect(1L, 0L);
#line 3761
    if (tmp___246) {
#line 3761
      __assert_rtn((char const   *)"jit_gen_op", (char const   *)"./jitter-Darwin-X86-64.c",
                   3761, (char const   *)"0");
    }
    }
#line 3761
    while (1) {
#line 3761
      if ((a1 & 7L) == -1L) {
#line 3761
        while (1) {
#line 3761
          tmp___247 = jit->ip;
#line 3761
          (jit->ip) ++;
#line 3761
          *tmp___247 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 4L);
#line 3761
          break;
        }
#line 3761
        while (1) {
#line 3761
          tmp___248 = jit->ip;
#line 3761
          (jit->ip) ++;
#line 3761
          *tmp___248 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 5L);
#line 3761
          break;
        }
#line 3761
        while (1) {
#line 3761
          imb___17.val = 0;
#line 3761
          tmp___249 = jit->ip;
#line 3761
          (jit->ip) ++;
#line 3761
          *tmp___249 = imb___17.b[0];
#line 3761
          tmp___250 = jit->ip;
#line 3761
          (jit->ip) ++;
#line 3761
          *tmp___250 = imb___17.b[1];
#line 3761
          tmp___251 = jit->ip;
#line 3761
          (jit->ip) ++;
#line 3761
          *tmp___251 = imb___17.b[2];
#line 3761
          tmp___252 = jit->ip;
#line 3761
          (jit->ip) ++;
#line 3761
          *tmp___252 = imb___17.b[3];
#line 3761
          break;
        }
      } else
#line 3761
      if ((a1 & 7L) != 5L) {
#line 3761
        while (1) {
#line 3761
          tmp___253 = jit->ip;
#line 3761
          (jit->ip) ++;
#line 3761
          *tmp___253 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 4L);
#line 3761
          break;
        }
#line 3761
        while (1) {
#line 3761
          tmp___254 = jit->ip;
#line 3761
          (jit->ip) ++;
#line 3761
          *tmp___254 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
#line 3761
          break;
        }
      } else {
#line 3761
        while (1) {
#line 3761
          tmp___255 = jit->ip;
#line 3761
          (jit->ip) ++;
#line 3761
          *tmp___255 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
#line 3761
          break;
        }
#line 3761
        while (1) {
#line 3761
          tmp___256 = jit->ip;
#line 3761
          (jit->ip) ++;
#line 3761
          *tmp___256 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
#line 3761
          break;
        }
#line 3761
        while (1) {
#line 3761
          *(jit->ip) = (unsigned char)0;
#line 3761
          (jit->ip) ++;
#line 3761
          break;
        }
      }
#line 3761
      break;
    }
#line 3761
    break;
  }
#line 3761
  break;
  case 1025: 
#line 3766
  while (1) {
#line 3766
    tmp___263 = jit->ip;
#line 3766
    (jit->ip) ++;
#line 3766
    *tmp___263 = (unsigned char)242;
#line 3766
    while (1) {
#line 3766
      if (a1 > 7L) {
#line 3766
        tmp___264 = 4;
      } else {
#line 3766
        tmp___264 = 0;
      }
#line 3766
      if (a2 > 7L) {
#line 3766
        tmp___265 = 1;
      } else {
#line 3766
        tmp___265 = 0;
      }
#line 3766
      _amd64_rex_bits___19 = (unsigned char )(tmp___264 | tmp___265);
#line 3766
      if ((int )_amd64_rex_bits___19 != 0) {
#line 3766
        tmp___266 = jit->ip;
#line 3766
        (jit->ip) ++;
#line 3766
        *tmp___266 = (unsigned char )(0x40 | (int )_amd64_rex_bits___19);
      }
#line 3766
      break;
    }
#line 3766
    tmp___267 = jit->ip;
#line 3766
    (jit->ip) ++;
#line 3766
    *tmp___267 = (unsigned char)15;
#line 3766
    tmp___268 = jit->ip;
#line 3766
    (jit->ip) ++;
#line 3766
    *tmp___268 = (unsigned char)16;
#line 3766
    while (1) {
#line 3766
      while (1) {
#line 3766
        tmp___269 = jit->ip;
#line 3766
        (jit->ip) ++;
#line 3766
        *tmp___269 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
#line 3766
        break;
      }
#line 3766
      break;
    }
#line 3766
    break;
  }
#line 3766
  break;
  case 1026: 
#line 3767
  sse_mov_reg_safeimm(jit, op, a1, & op->flt_imm);
#line 3767
  break;
  case 1033: 
#line 3768
  emit_sse_alu_op(jit, op, 88);
#line 3768
  break;
  case 1041: 
#line 3769
  emit_sse_sub_op(jit, op, a1, a2, a3);
#line 3769
  break;
  case 1049: 
#line 3770
  emit_sse_sub_op(jit, op, a1, a3, a2);
#line 3770
  break;
  case 1057: 
#line 3771
  emit_sse_alu_op(jit, op, 89);
#line 3771
  break;
  case 1065: 
#line 3772
  emit_sse_div_op(jit, a1, a2, a3);
#line 3772
  break;
  case 1073: 
#line 3773
  emit_sse_neg_op(jit, op, a1, a2);
#line 3773
  break;
  case 1153: 
#line 3774
  emit_sse_branch(jit, op, a1, a2, a3, 2);
#line 3774
  break;
  case 1169: 
#line 3775
  emit_sse_branch(jit, op, a1, a2, a3, 4);
#line 3775
  break;
  case 1177: 
#line 3776
  emit_sse_branch(jit, op, a1, a2, a3, 5);
#line 3776
  break;
  case 1161: 
#line 3777
  emit_sse_branch(jit, op, a1, a3, a2, 5);
#line 3777
  break;
  case 1185: 
#line 3778
  emit_sse_branch(jit, op, a1, a3, a2, 0);
#line 3778
  break;
  case 1193: 
#line 3779
  emit_sse_branch(jit, op, a1, a3, a2, 1);
#line 3779
  break;
  case 1097: 
#line 3781
  while (1) {
#line 3781
    tmp___270 = jit->ip;
#line 3781
    (jit->ip) ++;
#line 3781
    *tmp___270 = (unsigned char)242;
#line 3781
    while (1) {
#line 3781
      if (a1 > 7L) {
#line 3781
        tmp___271 = 4;
      } else {
#line 3781
        tmp___271 = 0;
      }
#line 3781
      if (a2 > 7L) {
#line 3781
        tmp___272 = 1;
      } else {
#line 3781
        tmp___272 = 0;
      }
#line 3781
      _amd64_rex_bits___20 = (unsigned char )((8 | tmp___271) | tmp___272);
#line 3781
      if ((int )_amd64_rex_bits___20 != 0) {
#line 3781
        tmp___273 = jit->ip;
#line 3781
        (jit->ip) ++;
#line 3781
        *tmp___273 = (unsigned char )(0x40 | (int )_amd64_rex_bits___20);
      }
#line 3781
      break;
    }
#line 3781
    tmp___274 = jit->ip;
#line 3781
    (jit->ip) ++;
#line 3781
    *tmp___274 = (unsigned char)15;
#line 3781
    tmp___275 = jit->ip;
#line 3781
    (jit->ip) ++;
#line 3781
    *tmp___275 = (unsigned char)42;
#line 3781
    while (1) {
#line 3781
      while (1) {
#line 3781
        tmp___276 = jit->ip;
#line 3781
        (jit->ip) ++;
#line 3781
        *tmp___276 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
#line 3781
        break;
      }
#line 3781
      break;
    }
#line 3781
    break;
  }
#line 3781
  break;
  case 1113: 
#line 3782
  while (1) {
#line 3782
    tmp___277 = jit->ip;
#line 3782
    (jit->ip) ++;
#line 3782
    *tmp___277 = (unsigned char)242;
#line 3782
    while (1) {
#line 3782
      if (a1 > 7L) {
#line 3782
        tmp___278 = 4;
      } else {
#line 3782
        tmp___278 = 0;
      }
#line 3782
      if (a2 > 7L) {
#line 3782
        tmp___279 = 1;
      } else {
#line 3782
        tmp___279 = 0;
      }
#line 3782
      _amd64_rex_bits___21 = (unsigned char )((8 | tmp___278) | tmp___279);
#line 3782
      if ((int )_amd64_rex_bits___21 != 0) {
#line 3782
        tmp___280 = jit->ip;
#line 3782
        (jit->ip) ++;
#line 3782
        *tmp___280 = (unsigned char )(0x40 | (int )_amd64_rex_bits___21);
      }
#line 3782
      break;
    }
#line 3782
    tmp___281 = jit->ip;
#line 3782
    (jit->ip) ++;
#line 3782
    *tmp___281 = (unsigned char)15;
#line 3782
    tmp___282 = jit->ip;
#line 3782
    (jit->ip) ++;
#line 3782
    *tmp___282 = (unsigned char)44;
#line 3782
    while (1) {
#line 3782
      while (1) {
#line 3782
        tmp___283 = jit->ip;
#line 3782
        (jit->ip) ++;
#line 3782
        *tmp___283 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
#line 3782
        break;
      }
#line 3782
      break;
    }
#line 3782
    break;
  }
#line 3782
  break;
  case 1129: 
#line 3783
  emit_sse_floor(jit, a1, a2, 0);
#line 3783
  break;
  case 1121: 
#line 3784
  emit_sse_floor(jit, a1, a2, 1);
#line 3784
  break;
  case 1105: 
#line 3785
  emit_sse_round(jit, op, a1, a2);
#line 3785
  break;
  case 1321: 
#line 3787
  emit_fret_op(jit, op);
#line 3787
  break;
  case 1088: 
#line 3788
  emit_fretval_op(jit, op);
#line 3788
  break;
  case 16: 
#line 3790
  emit_ureg(jit, a1, (int )a2);
#line 3790
  break;
  case 24: 
#line 3791
  emit_lreg(jit, (int )a1, a2);
#line 3791
  break;
  case 32: 
#line 3792
  emit_ureg(jit, a1, (int )a2);
#line 3792
  break;
  case 40: 
#line 3793
  while (1) {
#line 3793
    if ((int )sizeof(void *) == 2) {
#line 3793
      tmp___284 = jit->ip;
#line 3793
      (jit->ip) ++;
#line 3793
      *tmp___284 = (unsigned char)102;
    }
#line 3793
    while (1) {
#line 3793
      if ((int )sizeof(void *) > 4) {
#line 3793
        tmp___285 = 8;
      } else {
#line 3793
        tmp___285 = 0;
      }
#line 3793
      if (a1 > 7L) {
#line 3793
        tmp___286 = 4;
      } else {
#line 3793
        tmp___286 = 0;
      }
#line 3793
      if (a2 > 7L) {
#line 3793
        tmp___287 = 1;
      } else {
#line 3793
        tmp___287 = 0;
      }
#line 3793
      _amd64_rex_bits___22 = (unsigned char )((tmp___285 | tmp___286) | tmp___287);
#line 3793
      if ((int )_amd64_rex_bits___22 != 0) {
#line 3793
        tmp___288 = jit->ip;
#line 3793
        (jit->ip) ++;
#line 3793
        *tmp___288 = (unsigned char )(0x40 | (int )_amd64_rex_bits___22);
      } else
#line 3793
      if ((int )sizeof(void *) == 1) {
#line 3793
        tmp___288 = jit->ip;
#line 3793
        (jit->ip) ++;
#line 3793
        *tmp___288 = (unsigned char )(0x40 | (int )_amd64_rex_bits___22);
      }
#line 3793
      break;
    }
#line 3793
    switch ((int )sizeof(void *)) {
    case 1: 
#line 3793
    tmp___289 = jit->ip;
#line 3793
    (jit->ip) ++;
#line 3793
    *tmp___289 = (unsigned char)138;
#line 3793
    break;
    case 8: 
    case 4: 
    case 2: 
#line 3793
    tmp___290 = jit->ip;
#line 3793
    (jit->ip) ++;
#line 3793
    *tmp___290 = (unsigned char)139;
#line 3793
    break;
    default: 
#line 3793
    tmp___291 = __builtin_expect(1L, 0L);
#line 3793
    if (tmp___291) {
#line 3793
      __assert_rtn((char const   *)"jit_gen_op", (char const   *)"./jitter-Darwin-X86-64.c",
                   3793, (char const   *)"0");
    }
    }
#line 3793
    while (1) {
#line 3793
      while (1) {
#line 3793
        tmp___292 = jit->ip;
#line 3793
        (jit->ip) ++;
#line 3793
        *tmp___292 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
#line 3793
        break;
      }
#line 3793
      break;
    }
#line 3793
    break;
  }
#line 3793
  break;
  case 8: 
#line 3795
  break;
  case 0: 
#line 3796
  break;
  case 2050: 
#line 3800
  while (1) {
#line 3800
    while (1) {
#line 3800
      if ((int )op->arg_size > 4) {
#line 3800
        tmp___293 = 8;
      } else {
#line 3800
        tmp___293 = 0;
      }
#line 3800
      _amd64_rex_bits___23 = (unsigned char )tmp___293;
#line 3800
      if ((int )_amd64_rex_bits___23 != 0) {
#line 3800
        tmp___294 = jit->ip;
#line 3800
        (jit->ip) ++;
#line 3800
        *tmp___294 = (unsigned char )(0x40 | (int )_amd64_rex_bits___23);
      } else
#line 3800
      if ((int )op->arg_size == 1) {
#line 3800
        tmp___294 = jit->ip;
#line 3800
        (jit->ip) ++;
#line 3800
        *tmp___294 = (unsigned char )(0x40 | (int )_amd64_rex_bits___23);
      }
#line 3800
      break;
    }
#line 3800
    if ((int )op->arg_size == 1) {
#line 3800
      tmp___295 = jit->ip;
#line 3800
      (jit->ip) ++;
#line 3800
      *tmp___295 = (unsigned char)198;
#line 3800
      while (1) {
#line 3800
        tmp___296 = jit->ip;
#line 3800
        (jit->ip) ++;
#line 3800
        *tmp___296 = (unsigned char)4;
#line 3800
        tmp___297 = jit->ip;
#line 3800
        (jit->ip) ++;
#line 3800
        *tmp___297 = (unsigned char)37;
#line 3800
        while (1) {
#line 3800
          imb___19.val = (int )a1;
#line 3800
          tmp___298 = jit->ip;
#line 3800
          (jit->ip) ++;
#line 3800
          *tmp___298 = imb___19.b[0];
#line 3800
          tmp___299 = jit->ip;
#line 3800
          (jit->ip) ++;
#line 3800
          *tmp___299 = imb___19.b[1];
#line 3800
          tmp___300 = jit->ip;
#line 3800
          (jit->ip) ++;
#line 3800
          *tmp___300 = imb___19.b[2];
#line 3800
          tmp___301 = jit->ip;
#line 3800
          (jit->ip) ++;
#line 3800
          *tmp___301 = imb___19.b[3];
#line 3800
          break;
        }
#line 3800
        break;
      }
#line 3800
      while (1) {
#line 3800
        *(jit->ip) = (unsigned char )(a2 & 255L);
#line 3800
        (jit->ip) ++;
#line 3800
        break;
      }
    } else
#line 3800
    if ((int )op->arg_size == 2) {
#line 3800
      tmp___302 = jit->ip;
#line 3800
      (jit->ip) ++;
#line 3800
      *tmp___302 = (unsigned char)102;
#line 3800
      tmp___303 = jit->ip;
#line 3800
      (jit->ip) ++;
#line 3800
      *tmp___303 = (unsigned char)199;
#line 3800
      while (1) {
#line 3800
        tmp___304 = jit->ip;
#line 3800
        (jit->ip) ++;
#line 3800
        *tmp___304 = (unsigned char)4;
#line 3800
        tmp___305 = jit->ip;
#line 3800
        (jit->ip) ++;
#line 3800
        *tmp___305 = (unsigned char)37;
#line 3800
        while (1) {
#line 3800
          imb___20.val = (int )a1;
#line 3800
          tmp___306 = jit->ip;
#line 3800
          (jit->ip) ++;
#line 3800
          *tmp___306 = imb___20.b[0];
#line 3800
          tmp___307 = jit->ip;
#line 3800
          (jit->ip) ++;
#line 3800
          *tmp___307 = imb___20.b[1];
#line 3800
          tmp___308 = jit->ip;
#line 3800
          (jit->ip) ++;
#line 3800
          *tmp___308 = imb___20.b[2];
#line 3800
          tmp___309 = jit->ip;
#line 3800
          (jit->ip) ++;
#line 3800
          *tmp___309 = imb___20.b[3];
#line 3800
          break;
        }
#line 3800
        break;
      }
#line 3800
      while (1) {
#line 3800
        *((short *)jit->ip) = (short )a2;
#line 3800
        jit->ip += 2;
#line 3800
        break;
      }
    } else {
#line 3800
      tmp___310 = jit->ip;
#line 3800
      (jit->ip) ++;
#line 3800
      *tmp___310 = (unsigned char)199;
#line 3800
      while (1) {
#line 3800
        tmp___311 = jit->ip;
#line 3800
        (jit->ip) ++;
#line 3800
        *tmp___311 = (unsigned char)4;
#line 3800
        tmp___312 = jit->ip;
#line 3800
        (jit->ip) ++;
#line 3800
        *tmp___312 = (unsigned char)37;
#line 3800
        while (1) {
#line 3800
          imb___21.val = (int )a1;
#line 3800
          tmp___313 = jit->ip;
#line 3800
          (jit->ip) ++;
#line 3800
          *tmp___313 = imb___21.b[0];
#line 3800
          tmp___314 = jit->ip;
#line 3800
          (jit->ip) ++;
#line 3800
          *tmp___314 = imb___21.b[1];
#line 3800
          tmp___315 = jit->ip;
#line 3800
          (jit->ip) ++;
#line 3800
          *tmp___315 = imb___21.b[2];
#line 3800
          tmp___316 = jit->ip;
#line 3800
          (jit->ip) ++;
#line 3800
          *tmp___316 = imb___21.b[3];
#line 3800
          break;
        }
#line 3800
        break;
      }
#line 3800
      while (1) {
#line 3800
        imb___22.val = (int )a2;
#line 3800
        tmp___317 = jit->ip;
#line 3800
        (jit->ip) ++;
#line 3800
        *tmp___317 = imb___22.b[0];
#line 3800
        tmp___318 = jit->ip;
#line 3800
        (jit->ip) ++;
#line 3800
        *tmp___318 = imb___22.b[1];
#line 3800
        tmp___319 = jit->ip;
#line 3800
        (jit->ip) ++;
#line 3800
        *tmp___319 = imb___22.b[2];
#line 3800
        tmp___320 = jit->ip;
#line 3800
        (jit->ip) ++;
#line 3800
        *tmp___320 = imb___22.b[3];
#line 3800
        break;
      }
    }
#line 3800
    break;
  }
#line 3800
  break;
  case 2049: 
#line 3801
  while (1) {
#line 3801
    if ((int )op->arg_size == 2) {
#line 3801
      tmp___321 = jit->ip;
#line 3801
      (jit->ip) ++;
#line 3801
      *tmp___321 = (unsigned char)102;
    }
#line 3801
    while (1) {
#line 3801
      if ((int )op->arg_size == 1) {
#line 3801
        tmp___324 = 0;
      } else {
#line 3801
        tmp___324 = (int )op->arg_size;
      }
#line 3801
      if (tmp___324 > 4) {
#line 3801
        tmp___323 = 8;
      } else {
#line 3801
        tmp___323 = 0;
      }
#line 3801
      if (a1 > 7L) {
#line 3801
        tmp___325 = 1;
      } else {
#line 3801
        tmp___325 = 0;
      }
#line 3801
      _amd64_rex_bits___24 = (unsigned char )(tmp___323 | tmp___325);
#line 3801
      if ((int )_amd64_rex_bits___24 != 0) {
#line 3801
        tmp___326 = jit->ip;
#line 3801
        (jit->ip) ++;
#line 3801
        *tmp___326 = (unsigned char )(0x40 | (int )_amd64_rex_bits___24);
      } else {
#line 3801
        if ((int )op->arg_size == 1) {
#line 3801
          tmp___327 = 0;
        } else {
#line 3801
          tmp___327 = (int )op->arg_size;
        }
#line 3801
        if (tmp___327 == 1) {
#line 3801
          tmp___326 = jit->ip;
#line 3801
          (jit->ip) ++;
#line 3801
          *tmp___326 = (unsigned char )(0x40 | (int )_amd64_rex_bits___24);
        }
      }
#line 3801
      break;
    }
#line 3801
    if ((int )op->arg_size == 1) {
#line 3801
      tmp___328 = jit->ip;
#line 3801
      (jit->ip) ++;
#line 3801
      *tmp___328 = (unsigned char)198;
#line 3801
      while (1) {
#line 3801
        if ((a1 & 7L) == 4L) {
#line 3801
          while (1) {
#line 3801
            tmp___329 = jit->ip;
#line 3801
            (jit->ip) ++;
#line 3801
            *tmp___329 = (unsigned char)4;
#line 3801
            break;
          }
#line 3801
          while (1) {
#line 3801
            tmp___330 = jit->ip;
#line 3801
            (jit->ip) ++;
#line 3801
            *tmp___330 = (unsigned char )((4 << 3) | 4);
#line 3801
            break;
          }
#line 3801
          break;
        }
#line 3801
        if ((a1 & 7L) != 5L) {
#line 3801
          while (1) {
#line 3801
            tmp___339 = jit->ip;
#line 3801
            (jit->ip) ++;
#line 3801
            *tmp___339 = (unsigned char )((a1 & 7L) & 7L);
#line 3801
            break;
          }
#line 3801
          break;
        }
#line 3801
        while (1) {
#line 3801
          tmp___340 = jit->ip;
#line 3801
          (jit->ip) ++;
#line 3801
          *tmp___340 = (unsigned char )((long )(1 << 6) | ((a1 & 7L) & 7L));
#line 3801
          break;
        }
#line 3801
        while (1) {
#line 3801
          *(jit->ip) = (unsigned char)0;
#line 3801
          (jit->ip) ++;
#line 3801
          break;
        }
#line 3801
        break;
      }
#line 3801
      while (1) {
#line 3801
        *(jit->ip) = (unsigned char )(a2 & 255L);
#line 3801
        (jit->ip) ++;
#line 3801
        break;
      }
    } else
#line 3801
    if ((int )op->arg_size == 2) {
#line 3801
      tmp___346 = jit->ip;
#line 3801
      (jit->ip) ++;
#line 3801
      *tmp___346 = (unsigned char)199;
#line 3801
      while (1) {
#line 3801
        if ((a1 & 7L) == 4L) {
#line 3801
          while (1) {
#line 3801
            tmp___347 = jit->ip;
#line 3801
            (jit->ip) ++;
#line 3801
            *tmp___347 = (unsigned char)4;
#line 3801
            break;
          }
#line 3801
          while (1) {
#line 3801
            tmp___348 = jit->ip;
#line 3801
            (jit->ip) ++;
#line 3801
            *tmp___348 = (unsigned char )((4 << 3) | 4);
#line 3801
            break;
          }
#line 3801
          break;
        }
#line 3801
        if ((a1 & 7L) != 5L) {
#line 3801
          while (1) {
#line 3801
            tmp___357 = jit->ip;
#line 3801
            (jit->ip) ++;
#line 3801
            *tmp___357 = (unsigned char )((a1 & 7L) & 7L);
#line 3801
            break;
          }
#line 3801
          break;
        }
#line 3801
        while (1) {
#line 3801
          tmp___358 = jit->ip;
#line 3801
          (jit->ip) ++;
#line 3801
          *tmp___358 = (unsigned char )((long )(1 << 6) | ((a1 & 7L) & 7L));
#line 3801
          break;
        }
#line 3801
        while (1) {
#line 3801
          *(jit->ip) = (unsigned char)0;
#line 3801
          (jit->ip) ++;
#line 3801
          break;
        }
#line 3801
        break;
      }
#line 3801
      while (1) {
#line 3801
        *((short *)jit->ip) = (short )a2;
#line 3801
        jit->ip += 2;
#line 3801
        break;
      }
    } else {
#line 3801
      tmp___364 = jit->ip;
#line 3801
      (jit->ip) ++;
#line 3801
      *tmp___364 = (unsigned char)199;
#line 3801
      while (1) {
#line 3801
        if ((a1 & 7L) == 4L) {
#line 3801
          while (1) {
#line 3801
            tmp___365 = jit->ip;
#line 3801
            (jit->ip) ++;
#line 3801
            *tmp___365 = (unsigned char)4;
#line 3801
            break;
          }
#line 3801
          while (1) {
#line 3801
            tmp___366 = jit->ip;
#line 3801
            (jit->ip) ++;
#line 3801
            *tmp___366 = (unsigned char )((4 << 3) | 4);
#line 3801
            break;
          }
#line 3801
          break;
        }
#line 3801
        if ((a1 & 7L) != 5L) {
#line 3801
          while (1) {
#line 3801
            tmp___375 = jit->ip;
#line 3801
            (jit->ip) ++;
#line 3801
            *tmp___375 = (unsigned char )((a1 & 7L) & 7L);
#line 3801
            break;
          }
#line 3801
          break;
        }
#line 3801
        while (1) {
#line 3801
          tmp___376 = jit->ip;
#line 3801
          (jit->ip) ++;
#line 3801
          *tmp___376 = (unsigned char )((long )(1 << 6) | ((a1 & 7L) & 7L));
#line 3801
          break;
        }
#line 3801
        while (1) {
#line 3801
          *(jit->ip) = (unsigned char)0;
#line 3801
          (jit->ip) ++;
#line 3801
          break;
        }
#line 3801
        break;
      }
#line 3801
      while (1) {
#line 3801
        imb___29.val = (int )a2;
#line 3801
        tmp___382 = jit->ip;
#line 3801
        (jit->ip) ++;
#line 3801
        *tmp___382 = imb___29.b[0];
#line 3801
        tmp___383 = jit->ip;
#line 3801
        (jit->ip) ++;
#line 3801
        *tmp___383 = imb___29.b[1];
#line 3801
        tmp___384 = jit->ip;
#line 3801
        (jit->ip) ++;
#line 3801
        *tmp___384 = imb___29.b[2];
#line 3801
        tmp___385 = jit->ip;
#line 3801
        (jit->ip) ++;
#line 3801
        *tmp___385 = imb___29.b[3];
#line 3801
        break;
      }
    }
#line 3801
    break;
  }
#line 3801
  break;
  case 2058: 
#line 3802
  while (1) {
#line 3802
    if ((int )op->arg_size == 2) {
#line 3802
      tmp___386 = jit->ip;
#line 3802
      (jit->ip) ++;
#line 3802
      *tmp___386 = (unsigned char)102;
    }
#line 3802
    while (1) {
#line 3802
      if ((int )op->arg_size == 1) {
#line 3802
        tmp___389 = 0;
      } else {
#line 3802
        tmp___389 = (int )op->arg_size;
      }
#line 3802
      if (tmp___389 > 4) {
#line 3802
        tmp___388 = 8;
      } else {
#line 3802
        tmp___388 = 0;
      }
#line 3802
      if (a2 > 7L) {
#line 3802
        tmp___390 = 1;
      } else {
#line 3802
        tmp___390 = 0;
      }
#line 3802
      _amd64_rex_bits___25 = (unsigned char )(tmp___388 | tmp___390);
#line 3802
      if ((int )_amd64_rex_bits___25 != 0) {
#line 3802
        tmp___391 = jit->ip;
#line 3802
        (jit->ip) ++;
#line 3802
        *tmp___391 = (unsigned char )(0x40 | (int )_amd64_rex_bits___25);
      } else {
#line 3802
        if ((int )op->arg_size == 1) {
#line 3802
          tmp___392 = 0;
        } else {
#line 3802
          tmp___392 = (int )op->arg_size;
        }
#line 3802
        if (tmp___392 == 1) {
#line 3802
          tmp___391 = jit->ip;
#line 3802
          (jit->ip) ++;
#line 3802
          *tmp___391 = (unsigned char )(0x40 | (int )_amd64_rex_bits___25);
        }
      }
#line 3802
      break;
    }
#line 3802
    if ((int )op->arg_size == 1) {
#line 3802
      tmp___393 = jit->ip;
#line 3802
      (jit->ip) ++;
#line 3802
      *tmp___393 = (unsigned char)198;
#line 3802
      while (1) {
#line 3802
        if ((a2 & 7L) == 4L) {
#line 3802
          if (a1 == 0L) {
#line 3802
            while (1) {
#line 3802
              tmp___394 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___394 = (unsigned char)4;
#line 3802
              break;
            }
#line 3802
            while (1) {
#line 3802
              tmp___395 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___395 = (unsigned char )((4 << 3) | 4);
#line 3802
              break;
            }
          } else
#line 3802
          if (a1 >= -128L) {
#line 3802
            if (a1 <= 127L) {
#line 3802
              while (1) {
#line 3802
                tmp___396 = jit->ip;
#line 3802
                (jit->ip) ++;
#line 3802
                *tmp___396 = (unsigned char )((1 << 6) | 4);
#line 3802
                break;
              }
#line 3802
              while (1) {
#line 3802
                tmp___397 = jit->ip;
#line 3802
                (jit->ip) ++;
#line 3802
                *tmp___397 = (unsigned char )((4 << 3) | 4);
#line 3802
                break;
              }
#line 3802
              while (1) {
#line 3802
                *(jit->ip) = (unsigned char )(a1 & 255L);
#line 3802
                (jit->ip) ++;
#line 3802
                break;
              }
            } else {
#line 3802
              goto _L___5;
            }
          } else {
            _L___5: /* CIL Label */ 
#line 3802
            while (1) {
#line 3802
              tmp___398 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___398 = (unsigned char )((2 << 6) | 4);
#line 3802
              break;
            }
#line 3802
            while (1) {
#line 3802
              tmp___399 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___399 = (unsigned char )((4 << 3) | 4);
#line 3802
              break;
            }
#line 3802
            while (1) {
#line 3802
              imb___30.val = (int )a1;
#line 3802
              tmp___400 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___400 = imb___30.b[0];
#line 3802
              tmp___401 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___401 = imb___30.b[1];
#line 3802
              tmp___402 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___402 = imb___30.b[2];
#line 3802
              tmp___403 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___403 = imb___30.b[3];
#line 3802
              break;
            }
          }
#line 3802
          break;
        }
#line 3802
        if (a1 == 0L) {
#line 3802
          if ((a2 & 7L) != 5L) {
#line 3802
            while (1) {
#line 3802
              tmp___404 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___404 = (unsigned char )((a2 & 7L) & 7L);
#line 3802
              break;
            }
#line 3802
            break;
          }
        }
#line 3802
        if (a1 >= -128L) {
#line 3802
          if (a1 <= 127L) {
#line 3802
            while (1) {
#line 3802
              tmp___405 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___405 = (unsigned char )((long )(1 << 6) | ((a2 & 7L) & 7L));
#line 3802
              break;
            }
#line 3802
            while (1) {
#line 3802
              *(jit->ip) = (unsigned char )(a1 & 255L);
#line 3802
              (jit->ip) ++;
#line 3802
              break;
            }
          } else {
#line 3802
            goto _L___6;
          }
        } else {
          _L___6: /* CIL Label */ 
#line 3802
          while (1) {
#line 3802
            tmp___406 = jit->ip;
#line 3802
            (jit->ip) ++;
#line 3802
            *tmp___406 = (unsigned char )((long )(2 << 6) | ((a2 & 7L) & 7L));
#line 3802
            break;
          }
#line 3802
          while (1) {
#line 3802
            imb___31.val = (int )a1;
#line 3802
            tmp___407 = jit->ip;
#line 3802
            (jit->ip) ++;
#line 3802
            *tmp___407 = imb___31.b[0];
#line 3802
            tmp___408 = jit->ip;
#line 3802
            (jit->ip) ++;
#line 3802
            *tmp___408 = imb___31.b[1];
#line 3802
            tmp___409 = jit->ip;
#line 3802
            (jit->ip) ++;
#line 3802
            *tmp___409 = imb___31.b[2];
#line 3802
            tmp___410 = jit->ip;
#line 3802
            (jit->ip) ++;
#line 3802
            *tmp___410 = imb___31.b[3];
#line 3802
            break;
          }
        }
#line 3802
        break;
      }
#line 3802
      while (1) {
#line 3802
        *(jit->ip) = (unsigned char )(a3 & 255L);
#line 3802
        (jit->ip) ++;
#line 3802
        break;
      }
    } else
#line 3802
    if ((int )op->arg_size == 2) {
#line 3802
      tmp___411 = jit->ip;
#line 3802
      (jit->ip) ++;
#line 3802
      *tmp___411 = (unsigned char)199;
#line 3802
      while (1) {
#line 3802
        if ((a2 & 7L) == 4L) {
#line 3802
          if (a1 == 0L) {
#line 3802
            while (1) {
#line 3802
              tmp___412 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___412 = (unsigned char)4;
#line 3802
              break;
            }
#line 3802
            while (1) {
#line 3802
              tmp___413 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___413 = (unsigned char )((4 << 3) | 4);
#line 3802
              break;
            }
          } else
#line 3802
          if (a1 >= -128L) {
#line 3802
            if (a1 <= 127L) {
#line 3802
              while (1) {
#line 3802
                tmp___414 = jit->ip;
#line 3802
                (jit->ip) ++;
#line 3802
                *tmp___414 = (unsigned char )((1 << 6) | 4);
#line 3802
                break;
              }
#line 3802
              while (1) {
#line 3802
                tmp___415 = jit->ip;
#line 3802
                (jit->ip) ++;
#line 3802
                *tmp___415 = (unsigned char )((4 << 3) | 4);
#line 3802
                break;
              }
#line 3802
              while (1) {
#line 3802
                *(jit->ip) = (unsigned char )(a1 & 255L);
#line 3802
                (jit->ip) ++;
#line 3802
                break;
              }
            } else {
#line 3802
              goto _L___7;
            }
          } else {
            _L___7: /* CIL Label */ 
#line 3802
            while (1) {
#line 3802
              tmp___416 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___416 = (unsigned char )((2 << 6) | 4);
#line 3802
              break;
            }
#line 3802
            while (1) {
#line 3802
              tmp___417 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___417 = (unsigned char )((4 << 3) | 4);
#line 3802
              break;
            }
#line 3802
            while (1) {
#line 3802
              imb___32.val = (int )a1;
#line 3802
              tmp___418 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___418 = imb___32.b[0];
#line 3802
              tmp___419 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___419 = imb___32.b[1];
#line 3802
              tmp___420 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___420 = imb___32.b[2];
#line 3802
              tmp___421 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___421 = imb___32.b[3];
#line 3802
              break;
            }
          }
#line 3802
          break;
        }
#line 3802
        if (a1 == 0L) {
#line 3802
          if ((a2 & 7L) != 5L) {
#line 3802
            while (1) {
#line 3802
              tmp___422 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___422 = (unsigned char )((a2 & 7L) & 7L);
#line 3802
              break;
            }
#line 3802
            break;
          }
        }
#line 3802
        if (a1 >= -128L) {
#line 3802
          if (a1 <= 127L) {
#line 3802
            while (1) {
#line 3802
              tmp___423 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___423 = (unsigned char )((long )(1 << 6) | ((a2 & 7L) & 7L));
#line 3802
              break;
            }
#line 3802
            while (1) {
#line 3802
              *(jit->ip) = (unsigned char )(a1 & 255L);
#line 3802
              (jit->ip) ++;
#line 3802
              break;
            }
          } else {
#line 3802
            goto _L___8;
          }
        } else {
          _L___8: /* CIL Label */ 
#line 3802
          while (1) {
#line 3802
            tmp___424 = jit->ip;
#line 3802
            (jit->ip) ++;
#line 3802
            *tmp___424 = (unsigned char )((long )(2 << 6) | ((a2 & 7L) & 7L));
#line 3802
            break;
          }
#line 3802
          while (1) {
#line 3802
            imb___33.val = (int )a1;
#line 3802
            tmp___425 = jit->ip;
#line 3802
            (jit->ip) ++;
#line 3802
            *tmp___425 = imb___33.b[0];
#line 3802
            tmp___426 = jit->ip;
#line 3802
            (jit->ip) ++;
#line 3802
            *tmp___426 = imb___33.b[1];
#line 3802
            tmp___427 = jit->ip;
#line 3802
            (jit->ip) ++;
#line 3802
            *tmp___427 = imb___33.b[2];
#line 3802
            tmp___428 = jit->ip;
#line 3802
            (jit->ip) ++;
#line 3802
            *tmp___428 = imb___33.b[3];
#line 3802
            break;
          }
        }
#line 3802
        break;
      }
#line 3802
      while (1) {
#line 3802
        *((short *)jit->ip) = (short )a3;
#line 3802
        jit->ip += 2;
#line 3802
        break;
      }
    } else {
#line 3802
      tmp___429 = jit->ip;
#line 3802
      (jit->ip) ++;
#line 3802
      *tmp___429 = (unsigned char)199;
#line 3802
      while (1) {
#line 3802
        if ((a2 & 7L) == 4L) {
#line 3802
          if (a1 == 0L) {
#line 3802
            while (1) {
#line 3802
              tmp___430 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___430 = (unsigned char)4;
#line 3802
              break;
            }
#line 3802
            while (1) {
#line 3802
              tmp___431 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___431 = (unsigned char )((4 << 3) | 4);
#line 3802
              break;
            }
          } else
#line 3802
          if (a1 >= -128L) {
#line 3802
            if (a1 <= 127L) {
#line 3802
              while (1) {
#line 3802
                tmp___432 = jit->ip;
#line 3802
                (jit->ip) ++;
#line 3802
                *tmp___432 = (unsigned char )((1 << 6) | 4);
#line 3802
                break;
              }
#line 3802
              while (1) {
#line 3802
                tmp___433 = jit->ip;
#line 3802
                (jit->ip) ++;
#line 3802
                *tmp___433 = (unsigned char )((4 << 3) | 4);
#line 3802
                break;
              }
#line 3802
              while (1) {
#line 3802
                *(jit->ip) = (unsigned char )(a1 & 255L);
#line 3802
                (jit->ip) ++;
#line 3802
                break;
              }
            } else {
#line 3802
              goto _L___9;
            }
          } else {
            _L___9: /* CIL Label */ 
#line 3802
            while (1) {
#line 3802
              tmp___434 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___434 = (unsigned char )((2 << 6) | 4);
#line 3802
              break;
            }
#line 3802
            while (1) {
#line 3802
              tmp___435 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___435 = (unsigned char )((4 << 3) | 4);
#line 3802
              break;
            }
#line 3802
            while (1) {
#line 3802
              imb___34.val = (int )a1;
#line 3802
              tmp___436 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___436 = imb___34.b[0];
#line 3802
              tmp___437 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___437 = imb___34.b[1];
#line 3802
              tmp___438 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___438 = imb___34.b[2];
#line 3802
              tmp___439 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___439 = imb___34.b[3];
#line 3802
              break;
            }
          }
#line 3802
          break;
        }
#line 3802
        if (a1 == 0L) {
#line 3802
          if ((a2 & 7L) != 5L) {
#line 3802
            while (1) {
#line 3802
              tmp___440 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___440 = (unsigned char )((a2 & 7L) & 7L);
#line 3802
              break;
            }
#line 3802
            break;
          }
        }
#line 3802
        if (a1 >= -128L) {
#line 3802
          if (a1 <= 127L) {
#line 3802
            while (1) {
#line 3802
              tmp___441 = jit->ip;
#line 3802
              (jit->ip) ++;
#line 3802
              *tmp___441 = (unsigned char )((long )(1 << 6) | ((a2 & 7L) & 7L));
#line 3802
              break;
            }
#line 3802
            while (1) {
#line 3802
              *(jit->ip) = (unsigned char )(a1 & 255L);
#line 3802
              (jit->ip) ++;
#line 3802
              break;
            }
          } else {
#line 3802
            goto _L___10;
          }
        } else {
          _L___10: /* CIL Label */ 
#line 3802
          while (1) {
#line 3802
            tmp___442 = jit->ip;
#line 3802
            (jit->ip) ++;
#line 3802
            *tmp___442 = (unsigned char )((long )(2 << 6) | ((a2 & 7L) & 7L));
#line 3802
            break;
          }
#line 3802
          while (1) {
#line 3802
            imb___35.val = (int )a1;
#line 3802
            tmp___443 = jit->ip;
#line 3802
            (jit->ip) ++;
#line 3802
            *tmp___443 = imb___35.b[0];
#line 3802
            tmp___444 = jit->ip;
#line 3802
            (jit->ip) ++;
#line 3802
            *tmp___444 = imb___35.b[1];
#line 3802
            tmp___445 = jit->ip;
#line 3802
            (jit->ip) ++;
#line 3802
            *tmp___445 = imb___35.b[2];
#line 3802
            tmp___446 = jit->ip;
#line 3802
            (jit->ip) ++;
#line 3802
            *tmp___446 = imb___35.b[3];
#line 3802
            break;
          }
        }
#line 3802
        break;
      }
#line 3802
      while (1) {
#line 3802
        imb___36.val = (int )a3;
#line 3802
        tmp___447 = jit->ip;
#line 3802
        (jit->ip) ++;
#line 3802
        *tmp___447 = imb___36.b[0];
#line 3802
        tmp___448 = jit->ip;
#line 3802
        (jit->ip) ++;
#line 3802
        *tmp___448 = imb___36.b[1];
#line 3802
        tmp___449 = jit->ip;
#line 3802
        (jit->ip) ++;
#line 3802
        *tmp___449 = imb___36.b[2];
#line 3802
        tmp___450 = jit->ip;
#line 3802
        (jit->ip) ++;
#line 3802
        *tmp___450 = imb___36.b[3];
#line 3802
        break;
      }
    }
#line 3802
    break;
  }
#line 3802
  break;
  case 2057: 
#line 3803
  while (1) {
#line 3803
    while (1) {
#line 3803
      if ((int )op->arg_size > 4) {
#line 3803
        tmp___451 = 8;
      } else {
#line 3803
        tmp___451 = 0;
      }
#line 3803
      if (a2 > 7L) {
#line 3803
        tmp___452 = 2;
      } else {
#line 3803
        tmp___452 = 0;
      }
#line 3803
      if (a1 > 7L) {
#line 3803
        tmp___453 = 1;
      } else {
#line 3803
        tmp___453 = 0;
      }
#line 3803
      _amd64_rex_bits___26 = (unsigned char )((tmp___451 | tmp___452) | tmp___453);
#line 3803
      if ((int )_amd64_rex_bits___26 != 0) {
#line 3803
        tmp___454 = jit->ip;
#line 3803
        (jit->ip) ++;
#line 3803
        *tmp___454 = (unsigned char )(0x40 | (int )_amd64_rex_bits___26);
      } else
#line 3803
      if ((int )op->arg_size == 1) {
#line 3803
        tmp___454 = jit->ip;
#line 3803
        (jit->ip) ++;
#line 3803
        *tmp___454 = (unsigned char )(0x40 | (int )_amd64_rex_bits___26);
      }
#line 3803
      break;
    }
#line 3803
    while (1) {
#line 3803
      if ((int )op->arg_size == 8) {
#line 3803
        tmp___512 = 4;
      } else {
#line 3803
        tmp___512 = (int )op->arg_size;
      }
#line 3803
      if (tmp___512 == 1) {
#line 3803
        tmp___455 = jit->ip;
#line 3803
        (jit->ip) ++;
#line 3803
        *tmp___455 = (unsigned char)198;
#line 3803
        while (1) {
#line 3803
          if ((a1 & 7L) == -1L) {
#line 3803
            while (1) {
#line 3803
              tmp___456 = jit->ip;
#line 3803
              (jit->ip) ++;
#line 3803
              *tmp___456 = (unsigned char)4;
#line 3803
              break;
            }
#line 3803
            while (1) {
#line 3803
              tmp___457 = jit->ip;
#line 3803
              (jit->ip) ++;
#line 3803
              *tmp___457 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 5L);
#line 3803
              break;
            }
#line 3803
            while (1) {
#line 3803
              imb___37.val = 0;
#line 3803
              tmp___458 = jit->ip;
#line 3803
              (jit->ip) ++;
#line 3803
              *tmp___458 = imb___37.b[0];
#line 3803
              tmp___459 = jit->ip;
#line 3803
              (jit->ip) ++;
#line 3803
              *tmp___459 = imb___37.b[1];
#line 3803
              tmp___460 = jit->ip;
#line 3803
              (jit->ip) ++;
#line 3803
              *tmp___460 = imb___37.b[2];
#line 3803
              tmp___461 = jit->ip;
#line 3803
              (jit->ip) ++;
#line 3803
              *tmp___461 = imb___37.b[3];
#line 3803
              break;
            }
          } else
#line 3803
          if ((a1 & 7L) != 5L) {
#line 3803
            while (1) {
#line 3803
              tmp___462 = jit->ip;
#line 3803
              (jit->ip) ++;
#line 3803
              *tmp___462 = (unsigned char)4;
#line 3803
              break;
            }
#line 3803
            while (1) {
#line 3803
              tmp___463 = jit->ip;
#line 3803
              (jit->ip) ++;
#line 3803
              *tmp___463 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
#line 3803
              break;
            }
          } else {
#line 3803
            while (1) {
#line 3803
              tmp___464 = jit->ip;
#line 3803
              (jit->ip) ++;
#line 3803
              *tmp___464 = (unsigned char )((1 << 6) | 4);
#line 3803
              break;
            }
#line 3803
            while (1) {
#line 3803
              tmp___465 = jit->ip;
#line 3803
              (jit->ip) ++;
#line 3803
              *tmp___465 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
#line 3803
              break;
            }
#line 3803
            while (1) {
#line 3803
              *(jit->ip) = (unsigned char)0;
#line 3803
              (jit->ip) ++;
#line 3803
              break;
            }
          }
#line 3803
          break;
        }
#line 3803
        while (1) {
#line 3803
          *(jit->ip) = (unsigned char )(a3 & 255L);
#line 3803
          (jit->ip) ++;
#line 3803
          break;
        }
      } else {
#line 3803
        if ((int )op->arg_size == 8) {
#line 3803
          tmp___511 = 4;
        } else {
#line 3803
          tmp___511 = (int )op->arg_size;
        }
#line 3803
        if (tmp___511 == 2) {
#line 3803
          tmp___472 = jit->ip;
#line 3803
          (jit->ip) ++;
#line 3803
          *tmp___472 = (unsigned char)102;
#line 3803
          tmp___473 = jit->ip;
#line 3803
          (jit->ip) ++;
#line 3803
          *tmp___473 = (unsigned char)199;
#line 3803
          while (1) {
#line 3803
            if ((a1 & 7L) == -1L) {
#line 3803
              while (1) {
#line 3803
                tmp___474 = jit->ip;
#line 3803
                (jit->ip) ++;
#line 3803
                *tmp___474 = (unsigned char)4;
#line 3803
                break;
              }
#line 3803
              while (1) {
#line 3803
                tmp___475 = jit->ip;
#line 3803
                (jit->ip) ++;
#line 3803
                *tmp___475 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 5L);
#line 3803
                break;
              }
#line 3803
              while (1) {
#line 3803
                imb___39.val = 0;
#line 3803
                tmp___476 = jit->ip;
#line 3803
                (jit->ip) ++;
#line 3803
                *tmp___476 = imb___39.b[0];
#line 3803
                tmp___477 = jit->ip;
#line 3803
                (jit->ip) ++;
#line 3803
                *tmp___477 = imb___39.b[1];
#line 3803
                tmp___478 = jit->ip;
#line 3803
                (jit->ip) ++;
#line 3803
                *tmp___478 = imb___39.b[2];
#line 3803
                tmp___479 = jit->ip;
#line 3803
                (jit->ip) ++;
#line 3803
                *tmp___479 = imb___39.b[3];
#line 3803
                break;
              }
            } else
#line 3803
            if ((a1 & 7L) != 5L) {
#line 3803
              while (1) {
#line 3803
                tmp___480 = jit->ip;
#line 3803
                (jit->ip) ++;
#line 3803
                *tmp___480 = (unsigned char)4;
#line 3803
                break;
              }
#line 3803
              while (1) {
#line 3803
                tmp___481 = jit->ip;
#line 3803
                (jit->ip) ++;
#line 3803
                *tmp___481 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
#line 3803
                break;
              }
            } else {
#line 3803
              while (1) {
#line 3803
                tmp___482 = jit->ip;
#line 3803
                (jit->ip) ++;
#line 3803
                *tmp___482 = (unsigned char )((1 << 6) | 4);
#line 3803
                break;
              }
#line 3803
              while (1) {
#line 3803
                tmp___483 = jit->ip;
#line 3803
                (jit->ip) ++;
#line 3803
                *tmp___483 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
#line 3803
                break;
              }
#line 3803
              while (1) {
#line 3803
                *(jit->ip) = (unsigned char)0;
#line 3803
                (jit->ip) ++;
#line 3803
                break;
              }
            }
#line 3803
            break;
          }
#line 3803
          while (1) {
#line 3803
            *((short *)jit->ip) = (short )a3;
#line 3803
            jit->ip += 2;
#line 3803
            break;
          }
        } else {
#line 3803
          tmp___490 = jit->ip;
#line 3803
          (jit->ip) ++;
#line 3803
          *tmp___490 = (unsigned char)199;
#line 3803
          while (1) {
#line 3803
            if ((a1 & 7L) == -1L) {
#line 3803
              while (1) {
#line 3803
                tmp___491 = jit->ip;
#line 3803
                (jit->ip) ++;
#line 3803
                *tmp___491 = (unsigned char)4;
#line 3803
                break;
              }
#line 3803
              while (1) {
#line 3803
                tmp___492 = jit->ip;
#line 3803
                (jit->ip) ++;
#line 3803
                *tmp___492 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 5L);
#line 3803
                break;
              }
#line 3803
              while (1) {
#line 3803
                imb___41.val = 0;
#line 3803
                tmp___493 = jit->ip;
#line 3803
                (jit->ip) ++;
#line 3803
                *tmp___493 = imb___41.b[0];
#line 3803
                tmp___494 = jit->ip;
#line 3803
                (jit->ip) ++;
#line 3803
                *tmp___494 = imb___41.b[1];
#line 3803
                tmp___495 = jit->ip;
#line 3803
                (jit->ip) ++;
#line 3803
                *tmp___495 = imb___41.b[2];
#line 3803
                tmp___496 = jit->ip;
#line 3803
                (jit->ip) ++;
#line 3803
                *tmp___496 = imb___41.b[3];
#line 3803
                break;
              }
            } else
#line 3803
            if ((a1 & 7L) != 5L) {
#line 3803
              while (1) {
#line 3803
                tmp___497 = jit->ip;
#line 3803
                (jit->ip) ++;
#line 3803
                *tmp___497 = (unsigned char)4;
#line 3803
                break;
              }
#line 3803
              while (1) {
#line 3803
                tmp___498 = jit->ip;
#line 3803
                (jit->ip) ++;
#line 3803
                *tmp___498 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
#line 3803
                break;
              }
            } else {
#line 3803
              while (1) {
#line 3803
                tmp___499 = jit->ip;
#line 3803
                (jit->ip) ++;
#line 3803
                *tmp___499 = (unsigned char )((1 << 6) | 4);
#line 3803
                break;
              }
#line 3803
              while (1) {
#line 3803
                tmp___500 = jit->ip;
#line 3803
                (jit->ip) ++;
#line 3803
                *tmp___500 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
#line 3803
                break;
              }
#line 3803
              while (1) {
#line 3803
                *(jit->ip) = (unsigned char)0;
#line 3803
                (jit->ip) ++;
#line 3803
                break;
              }
            }
#line 3803
            break;
          }
#line 3803
          while (1) {
#line 3803
            imb___43.val = (int )a3;
#line 3803
            tmp___507 = jit->ip;
#line 3803
            (jit->ip) ++;
#line 3803
            *tmp___507 = imb___43.b[0];
#line 3803
            tmp___508 = jit->ip;
#line 3803
            (jit->ip) ++;
#line 3803
            *tmp___508 = imb___43.b[1];
#line 3803
            tmp___509 = jit->ip;
#line 3803
            (jit->ip) ++;
#line 3803
            *tmp___509 = imb___43.b[2];
#line 3803
            tmp___510 = jit->ip;
#line 3803
            (jit->ip) ++;
#line 3803
            *tmp___510 = imb___43.b[3];
#line 3803
            break;
          }
        }
      }
#line 3803
      break;
    }
#line 3803
    break;
  }
#line 3803
  break;
  case 2065: 
#line 3804
  while (1) {
#line 3804
    while (1) {
#line 3804
      if (a1 > 7L) {
#line 3804
        tmp___513 = 4;
      } else {
#line 3804
        tmp___513 = 0;
      }
#line 3804
      if (a3 > 7L) {
#line 3804
        tmp___514 = 2;
      } else {
#line 3804
        tmp___514 = 0;
      }
#line 3804
      if (a2 > 7L) {
#line 3804
        tmp___515 = 1;
      } else {
#line 3804
        tmp___515 = 0;
      }
#line 3804
      _amd64_rex_bits___27 = (unsigned char )(((8 | tmp___513) | tmp___514) | tmp___515);
#line 3804
      if ((int )_amd64_rex_bits___27 != 0) {
#line 3804
        tmp___516 = jit->ip;
#line 3804
        (jit->ip) ++;
#line 3804
        *tmp___516 = (unsigned char )(0x40 | (int )_amd64_rex_bits___27);
      }
#line 3804
      break;
    }
#line 3804
    while (1) {
#line 3804
      tmp___517 = jit->ip;
#line 3804
      (jit->ip) ++;
#line 3804
      *tmp___517 = (unsigned char)141;
#line 3804
      while (1) {
#line 3804
        if (a2 == -1L) {
#line 3804
          while (1) {
#line 3804
            tmp___518 = jit->ip;
#line 3804
            (jit->ip) ++;
#line 3804
            *tmp___518 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3804
            break;
          }
#line 3804
          while (1) {
#line 3804
            tmp___519 = jit->ip;
#line 3804
            (jit->ip) ++;
#line 3804
            *tmp___519 = (unsigned char )(((long )(((int )op->arg_size & 0x03) << 6) | (((a3 & 7L) & 7L) << 3)) | 5L);
#line 3804
            break;
          }
#line 3804
          while (1) {
#line 3804
            imb___44.val = 0;
#line 3804
            tmp___520 = jit->ip;
#line 3804
            (jit->ip) ++;
#line 3804
            *tmp___520 = imb___44.b[0];
#line 3804
            tmp___521 = jit->ip;
#line 3804
            (jit->ip) ++;
#line 3804
            *tmp___521 = imb___44.b[1];
#line 3804
            tmp___522 = jit->ip;
#line 3804
            (jit->ip) ++;
#line 3804
            *tmp___522 = imb___44.b[2];
#line 3804
            tmp___523 = jit->ip;
#line 3804
            (jit->ip) ++;
#line 3804
            *tmp___523 = imb___44.b[3];
#line 3804
            break;
          }
        } else
#line 3804
        if (a2 != 5L) {
#line 3804
          while (1) {
#line 3804
            tmp___524 = jit->ip;
#line 3804
            (jit->ip) ++;
#line 3804
            *tmp___524 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3804
            break;
          }
#line 3804
          while (1) {
#line 3804
            tmp___525 = jit->ip;
#line 3804
            (jit->ip) ++;
#line 3804
            *tmp___525 = (unsigned char )(((long )(((int )op->arg_size & 0x03) << 6) | ((((a3 & 7L) & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 3804
            break;
          }
        } else {
#line 3804
          while (1) {
#line 3804
            tmp___526 = jit->ip;
#line 3804
            (jit->ip) ++;
#line 3804
            *tmp___526 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3804
            break;
          }
#line 3804
          while (1) {
#line 3804
            tmp___527 = jit->ip;
#line 3804
            (jit->ip) ++;
#line 3804
            *tmp___527 = (unsigned char )(((long )(((int )op->arg_size & 0x03) << 6) | ((((a3 & 7L) & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 3804
            break;
          }
#line 3804
          while (1) {
#line 3804
            *(jit->ip) = (unsigned char)0;
#line 3804
            (jit->ip) ++;
#line 3804
            break;
          }
        }
#line 3804
        break;
      }
#line 3804
      break;
    }
#line 3804
    break;
  }
#line 3804
  break;
  case 2066: 
#line 3805
  while (1) {
#line 3805
    while (1) {
#line 3805
      if (a1 > 7L) {
#line 3805
        tmp___534 = 4;
      } else {
#line 3805
        tmp___534 = 0;
      }
#line 3805
      if (a2 > 7L) {
#line 3805
        tmp___535 = 2;
      } else {
#line 3805
        tmp___535 = 0;
      }
#line 3805
      _amd64_rex_bits___28 = (unsigned char )((8 | tmp___534) | tmp___535);
#line 3805
      if ((int )_amd64_rex_bits___28 != 0) {
#line 3805
        tmp___536 = jit->ip;
#line 3805
        (jit->ip) ++;
#line 3805
        *tmp___536 = (unsigned char )(0x40 | (int )_amd64_rex_bits___28);
      }
#line 3805
      break;
    }
#line 3805
    while (1) {
#line 3805
      tmp___537 = jit->ip;
#line 3805
      (jit->ip) ++;
#line 3805
      *tmp___537 = (unsigned char)141;
#line 3805
      while (1) {
#line 3805
        if (1) {
#line 3805
          while (1) {
#line 3805
            tmp___538 = jit->ip;
#line 3805
            (jit->ip) ++;
#line 3805
            *tmp___538 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3805
            break;
          }
#line 3805
          while (1) {
#line 3805
            tmp___539 = jit->ip;
#line 3805
            (jit->ip) ++;
#line 3805
            *tmp___539 = (unsigned char )(((long )(((int )op->arg_size & 0x03) << 6) | (((a2 & 7L) & 7L) << 3)) | 5L);
#line 3805
            break;
          }
#line 3805
          while (1) {
#line 3805
            imb___46.val = (int )a3;
#line 3805
            tmp___540 = jit->ip;
#line 3805
            (jit->ip) ++;
#line 3805
            *tmp___540 = imb___46.b[0];
#line 3805
            tmp___541 = jit->ip;
#line 3805
            (jit->ip) ++;
#line 3805
            *tmp___541 = imb___46.b[1];
#line 3805
            tmp___542 = jit->ip;
#line 3805
            (jit->ip) ++;
#line 3805
            *tmp___542 = imb___46.b[2];
#line 3805
            tmp___543 = jit->ip;
#line 3805
            (jit->ip) ++;
#line 3805
            *tmp___543 = imb___46.b[3];
#line 3805
            break;
          }
        } else
#line 3805
        if (a3 == 0L) {
#line 3805
          while (1) {
#line 3805
            tmp___544 = jit->ip;
#line 3805
            (jit->ip) ++;
#line 3805
            *tmp___544 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3805
            break;
          }
#line 3805
          while (1) {
#line 3805
            tmp___545 = jit->ip;
#line 3805
            (jit->ip) ++;
#line 3805
            *tmp___545 = (unsigned char )(((long )(((int )op->arg_size & 0x03) << 6) | ((((a2 & 7L) & 7L) & 7L) << 3)) | 7L);
#line 3805
            break;
          }
        } else
        _L___12: /* CIL Label */ 
#line 3805
        if (a3 >= -128L) {
#line 3805
          if (a3 <= 127L) {
#line 3805
            while (1) {
#line 3805
              tmp___546 = jit->ip;
#line 3805
              (jit->ip) ++;
#line 3805
              *tmp___546 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3805
              break;
            }
#line 3805
            while (1) {
#line 3805
              tmp___547 = jit->ip;
#line 3805
              (jit->ip) ++;
#line 3805
              *tmp___547 = (unsigned char )(((long )(((int )op->arg_size & 0x03) << 6) | ((((a2 & 7L) & 7L) & 7L) << 3)) | 7L);
#line 3805
              break;
            }
#line 3805
            while (1) {
#line 3805
              *(jit->ip) = (unsigned char )(a3 & 255L);
#line 3805
              (jit->ip) ++;
#line 3805
              break;
            }
          } else {
#line 3805
            goto _L___11;
          }
        } else {
          _L___11: /* CIL Label */ 
#line 3805
          while (1) {
#line 3805
            tmp___548 = jit->ip;
#line 3805
            (jit->ip) ++;
#line 3805
            *tmp___548 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3805
            break;
          }
#line 3805
          while (1) {
#line 3805
            tmp___549 = jit->ip;
#line 3805
            (jit->ip) ++;
#line 3805
            *tmp___549 = (unsigned char )(((long )(((int )op->arg_size & 0x03) << 6) | ((((a2 & 7L) & 7L) & 7L) << 3)) | 7L);
#line 3805
            break;
          }
#line 3805
          while (1) {
#line 3805
            imb___47.val = (int )a3;
#line 3805
            tmp___550 = jit->ip;
#line 3805
            (jit->ip) ++;
#line 3805
            *tmp___550 = imb___47.b[0];
#line 3805
            tmp___551 = jit->ip;
#line 3805
            (jit->ip) ++;
#line 3805
            *tmp___551 = imb___47.b[1];
#line 3805
            tmp___552 = jit->ip;
#line 3805
            (jit->ip) ++;
#line 3805
            *tmp___552 = imb___47.b[2];
#line 3805
            tmp___553 = jit->ip;
#line 3805
            (jit->ip) ++;
#line 3805
            *tmp___553 = imb___47.b[3];
#line 3805
            break;
          }
        }
#line 3805
        break;
      }
#line 3805
      break;
    }
#line 3805
    break;
  }
#line 3805
  break;
  case 2072: 
#line 3808
  tmp___555 = __builtin_object_size((void *)(& tmp___554), 0);
#line 3808
  __builtin___memcpy_chk((void *)(& tmp___554), (void const   *)(& op->flt_imm), sizeof(jit_value ),
                         tmp___555);
#line 3809
  while (1) {
#line 3809
    while (1) {
#line 3809
      if (a1 > 7L) {
#line 3809
        tmp___556 = 4;
      } else {
#line 3809
        tmp___556 = 0;
      }
#line 3809
      if (a3 > 7L) {
#line 3809
        tmp___557 = 2;
      } else {
#line 3809
        tmp___557 = 0;
      }
#line 3809
      if (a2 > 7L) {
#line 3809
        tmp___558 = 1;
      } else {
#line 3809
        tmp___558 = 0;
      }
#line 3809
      _amd64_rex_bits___29 = (unsigned char )(((8 | tmp___556) | tmp___557) | tmp___558);
#line 3809
      if ((int )_amd64_rex_bits___29 != 0) {
#line 3809
        tmp___559 = jit->ip;
#line 3809
        (jit->ip) ++;
#line 3809
        *tmp___559 = (unsigned char )(0x40 | (int )_amd64_rex_bits___29);
      }
#line 3809
      break;
    }
#line 3809
    while (1) {
#line 3809
      tmp___560 = jit->ip;
#line 3809
      (jit->ip) ++;
#line 3809
      *tmp___560 = (unsigned char)141;
#line 3809
      while (1) {
#line 3809
        if (a2 == -1L) {
#line 3809
          while (1) {
#line 3809
            tmp___561 = jit->ip;
#line 3809
            (jit->ip) ++;
#line 3809
            *tmp___561 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3809
            break;
          }
#line 3809
          while (1) {
#line 3809
            tmp___562 = jit->ip;
#line 3809
            (jit->ip) ++;
#line 3809
            *tmp___562 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
#line 3809
            break;
          }
#line 3809
          while (1) {
#line 3809
            imb___48.val = (int )tmp___554;
#line 3809
            tmp___563 = jit->ip;
#line 3809
            (jit->ip) ++;
#line 3809
            *tmp___563 = imb___48.b[0];
#line 3809
            tmp___564 = jit->ip;
#line 3809
            (jit->ip) ++;
#line 3809
            *tmp___564 = imb___48.b[1];
#line 3809
            tmp___565 = jit->ip;
#line 3809
            (jit->ip) ++;
#line 3809
            *tmp___565 = imb___48.b[2];
#line 3809
            tmp___566 = jit->ip;
#line 3809
            (jit->ip) ++;
#line 3809
            *tmp___566 = imb___48.b[3];
#line 3809
            break;
          }
        } else
#line 3809
        if (tmp___554 == 0L) {
#line 3809
          if (a2 != 5L) {
#line 3809
            while (1) {
#line 3809
              tmp___567 = jit->ip;
#line 3809
              (jit->ip) ++;
#line 3809
              *tmp___567 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3809
              break;
            }
#line 3809
            while (1) {
#line 3809
              tmp___568 = jit->ip;
#line 3809
              (jit->ip) ++;
#line 3809
              *tmp___568 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 3809
              break;
            }
          } else {
#line 3809
            goto _L___14;
          }
        } else
        _L___14: /* CIL Label */ 
#line 3809
        if (tmp___554 >= -128L) {
#line 3809
          if (tmp___554 <= 127L) {
#line 3809
            while (1) {
#line 3809
              tmp___569 = jit->ip;
#line 3809
              (jit->ip) ++;
#line 3809
              *tmp___569 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3809
              break;
            }
#line 3809
            while (1) {
#line 3809
              tmp___570 = jit->ip;
#line 3809
              (jit->ip) ++;
#line 3809
              *tmp___570 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 3809
              break;
            }
#line 3809
            while (1) {
#line 3809
              *(jit->ip) = (unsigned char )(tmp___554 & 255L);
#line 3809
              (jit->ip) ++;
#line 3809
              break;
            }
          } else {
#line 3809
            goto _L___13;
          }
        } else {
          _L___13: /* CIL Label */ 
#line 3809
          while (1) {
#line 3809
            tmp___571 = jit->ip;
#line 3809
            (jit->ip) ++;
#line 3809
            *tmp___571 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3809
            break;
          }
#line 3809
          while (1) {
#line 3809
            tmp___572 = jit->ip;
#line 3809
            (jit->ip) ++;
#line 3809
            *tmp___572 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 3809
            break;
          }
#line 3809
          while (1) {
#line 3809
            imb___49.val = (int )tmp___554;
#line 3809
            tmp___573 = jit->ip;
#line 3809
            (jit->ip) ++;
#line 3809
            *tmp___573 = imb___49.b[0];
#line 3809
            tmp___574 = jit->ip;
#line 3809
            (jit->ip) ++;
#line 3809
            *tmp___574 = imb___49.b[1];
#line 3809
            tmp___575 = jit->ip;
#line 3809
            (jit->ip) ++;
#line 3809
            *tmp___575 = imb___49.b[2];
#line 3809
            tmp___576 = jit->ip;
#line 3809
            (jit->ip) ++;
#line 3809
            *tmp___576 = imb___49.b[3];
#line 3809
            break;
          }
        }
#line 3809
        break;
      }
#line 3809
      break;
    }
#line 3809
    break;
  }
#line 3809
  break;
  default: 
#line 3812
  printf((char const   */* __restrict  */)"common86: unknown operation (opcode: 0x%x)\n",
         (unsigned int )((jit_opcode )((int )op->code & 0xfff8)) >> 3);
  }
#line 3814
  return;
}
}
/* END FUNCTION-DEF jit_gen_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_message LOC=UNKNOWN */
void jit_message(struct jit *j , char *s ) 
{ 
  struct jit_debug_info *tmp ;

  {
#line 6290
  tmp = jit_debug_info_new((char const   *)"head.c", (char const   *)"jit_message",
                           20);
#line 6290
  jit_add_op(j, (unsigned short)1922, (unsigned char)2, (jit_value )s, (jit_value )0,
             (jit_value )0, (unsigned char)0, tmp);
#line 6291
  return;
}
}
/* END FUNCTION-DEF jit_message LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF make_addmuli LOC=UNKNOWN */
__inline static int make_addmuli(jit_op *op , jit_op *nextop ) 
{ 
  int tmp ;

  {
#line 2222
  nextop->code = (unsigned short)2066;
#line 2223
  nextop->spec = (unsigned char )(((0x02 << 4) | (0x01 << 2)) | 0x03);
#line 2225
  nextop->arg[1] = op->arg[1];
#line 2226
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 576U) {
#line 2226
    tmp = shift_index((int )op->arg[2]);
#line 2226
    nextop->arg_size = (unsigned char )tmp;
  } else {
#line 2226
    nextop->arg_size = (unsigned char )op->arg[2];
  }
#line 2228
  make_nop(op);
#line 2229
  return (1);
}
}
/* END FUNCTION-DEF make_addmuli LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_op_new LOC=UNKNOWN */
static struct jit_op *jit_op_new(unsigned short code , unsigned char spec , jit_value arg1 ,
                                 jit_value arg2 , jit_value arg3 , unsigned char arg_size ) 
{ 
  struct jit_op *r ;
  void *tmp ;

  {
#line 814
  tmp = malloc((size_t )sizeof(struct jit_op ));
#line 814
  r = (struct jit_op *)tmp;
#line 815
  r->code = code;
#line 816
  r->spec = spec;
#line 817
  r->fp = (unsigned char)0;
#line 819
  r->arg[0] = arg1;
#line 820
  r->arg[1] = arg2;
#line 821
  r->arg[2] = arg3;
#line 823
  r->r_arg[0] = (jit_value )-1;
#line 824
  r->r_arg[1] = (jit_value )-1;
#line 825
  r->r_arg[2] = (jit_value )-1;
#line 827
  r->assigned = (unsigned char)0;
#line 828
  r->in_use = (unsigned char)1;
#line 829
  r->arg_size = arg_size;
#line 830
  r->next = (struct jit_op *)((void *)0);
#line 831
  r->prev = (struct jit_op *)((void *)0);
#line 832
  r->patch_addr = (jit_value )0;
#line 833
  r->jmp_addr = (struct jit_op *)((void *)0);
#line 834
  r->regmap = (struct jit_rmap *)((void *)0);
#line 835
  r->live_in = (struct jit_set *)((void *)0);
#line 836
  r->live_out = (struct jit_set *)((void *)0);
#line 837
  r->allocator_hints = (struct jit_tree *)((void *)0);
#line 838
  r->debug_info = (struct jit_debug_info *)((void *)0);
#line 839
  r->addendum = (void *)0;
#line 840
  return (r);
}
}
/* END FUNCTION-DEF jit_op_new LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_get_reg_name LOC=UNKNOWN */
void jit_get_reg_name(struct jit_disasm *disasm , char *r , int reg ) 
{ 
  unsigned long long tmp ;
  unsigned long long tmp___0 ;
  unsigned long long tmp___1 ;
  unsigned long long tmp___2 ;
  unsigned long long tmp___3 ;
  unsigned long long tmp___4 ;
  unsigned long long tmp___5 ;
  unsigned long long tmp___6 ;
  unsigned long long tmp___7 ;

  {
#line 4316
  if (reg == 2 << 1) {
#line 4316
    tmp = __builtin_object_size((void *)r, 1);
#line 4316
    __builtin___strcpy_chk(r, (char const   *)disasm->reg_fp_template, tmp);
  } else
#line 4317
  if (reg == ((2 << 1) | (1 << 4))) {
#line 4317
    tmp___0 = __builtin_object_size((void *)r, 1);
#line 4317
    __builtin___strcpy_chk(r, (char const   *)disasm->reg_out_template, tmp___0);
  } else
#line 4318
  if (reg == 1 << 1) {
#line 4318
    tmp___1 = __builtin_object_size((void *)r, 1);
#line 4318
    __builtin___strcpy_chk(r, (char const   *)disasm->reg_imm_template, tmp___1);
  } else
#line 4319
  if (reg == (1 | (1 << 1))) {
#line 4319
    tmp___2 = __builtin_object_size((void *)r, 1);
#line 4319
    __builtin___strcpy_chk(r, (char const   *)disasm->reg_fimm_template, tmp___2);
  } else
#line 4321
  if (((reg >> 1) & 0x03) == 0) {
#line 4322
    if ((reg & 0x01) == 0) {
#line 4322
      tmp___3 = __builtin_object_size((void *)r, 1);
#line 4322
      __builtin___sprintf_chk(r, 0, tmp___3, (char const   *)disasm->reg_template,
                              (reg >> 4) & 0xfffffff);
    } else {
#line 4323
      tmp___4 = __builtin_object_size((void *)r, 1);
#line 4323
      __builtin___sprintf_chk(r, 0, tmp___4, (char const   *)disasm->freg_template,
                              (reg >> 4) & 0xfffffff);
    }
  } else
#line 4325
  if (((reg >> 1) & 0x03) == 3) {
#line 4326
    if ((reg & 0x01) == 0) {
#line 4326
      tmp___5 = __builtin_object_size((void *)r, 1);
#line 4326
      __builtin___sprintf_chk(r, 0, tmp___5, (char const   *)disasm->arg_template,
                              (reg >> 4) & 0xfffffff);
    } else {
#line 4327
      tmp___6 = __builtin_object_size((void *)r, 1);
#line 4327
      __builtin___sprintf_chk(r, 0, tmp___6, (char const   *)disasm->farg_template,
                              (reg >> 4) & 0xfffffff);
    }
  } else {
#line 4328
    tmp___7 = __builtin_object_size((void *)r, 1);
#line 4328
    __builtin___sprintf_chk(r, 0, tmp___7, (char const   *)"%s", disasm->reg_unknown_template);
  }
#line 4330
  return;
}
}
/* END FUNCTION-DEF jit_get_reg_name LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_set_arg LOC=UNKNOWN */
__inline static void emit_set_arg(struct jit *jit , struct jit_out_arg *arg ) 
{ 
  int sreg ;
  int reg ;
  jit_value value ;
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  long tmp___5 ;
  unsigned char *tmp___6 ;
  x86_imm_buf imb ;
  int tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  int tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  x86_imm_buf imb___0 ;
  int tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  unsigned char *tmp___27 ;
  int tmp___28 ;
  unsigned char *tmp___29 ;
  int tmp___30 ;
  unsigned char *tmp___31 ;
  x86_imm_buf imb___1 ;
  int tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  int tmp___37 ;
  int tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___40 ;
  int tmp___41 ;
  int tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  long tmp___46 ;
  unsigned char *tmp___47 ;
  int tmp___48 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  amd64_imm_buf imb___2 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;

  {
#line 2360
  reg = (*((jit->reg_al)->gp_arg_regs + arg->argpos))->id;
#line 2361
  value = arg->value.generic;
#line 2362
  if (arg->isreg) {
#line 2363
    tmp___48 = is_spilled(value, jit->prepared_args.op, & sreg);
#line 2363
    if (tmp___48) {
#line 2364
      while (1) {
#line 2364
        if ((int )sizeof(void *) == 2) {
#line 2364
          tmp = jit->ip;
#line 2364
          (jit->ip) ++;
#line 2364
          *tmp = (unsigned char)102;
        }
#line 2364
        while (1) {
#line 2364
          if ((int )sizeof(void *) > 4) {
#line 2364
            tmp___0 = 8;
          } else {
#line 2364
            tmp___0 = 0;
          }
#line 2364
          if (reg > 7) {
#line 2364
            tmp___1 = 4;
          } else {
#line 2364
            tmp___1 = 0;
          }
#line 2364
          _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
#line 2364
          if ((int )_amd64_rex_bits != 0) {
#line 2364
            tmp___2 = jit->ip;
#line 2364
            (jit->ip) ++;
#line 2364
            *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          } else
#line 2364
          if ((int )sizeof(void *) == 1) {
#line 2364
            tmp___2 = jit->ip;
#line 2364
            (jit->ip) ++;
#line 2364
            *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          }
#line 2364
          break;
        }
#line 2364
        switch ((int )sizeof(void *)) {
        case 1: 
#line 2364
        tmp___3 = jit->ip;
#line 2364
        (jit->ip) ++;
#line 2364
        *tmp___3 = (unsigned char)138;
#line 2364
        break;
        case 8: 
        case 4: 
        case 2: 
#line 2364
        tmp___4 = jit->ip;
#line 2364
        (jit->ip) ++;
#line 2364
        *tmp___4 = (unsigned char)139;
#line 2364
        break;
        default: 
#line 2364
        tmp___5 = __builtin_expect(1L, 0L);
#line 2364
        if (tmp___5) {
#line 2364
          __assert_rtn((char const   *)"emit_set_arg", (char const   *)"./jitter-Darwin-X86-64.c",
                       2364, (char const   *)"0");
        }
        }
#line 2364
        while (1) {
#line 2364
          while (1) {
#line 2364
            if (0) {
#line 2364
              tmp___26 = stack_reg_pos(jit, (int )value);
#line 2364
              if (tmp___26 == 0) {
#line 2364
                while (1) {
#line 2364
                  tmp___12 = jit->ip;
#line 2364
                  (jit->ip) ++;
#line 2364
                  *tmp___12 = (unsigned char )((((reg & 0x7) & 0x07) << 3) | 4);
#line 2364
                  break;
                }
#line 2364
                while (1) {
#line 2364
                  tmp___13 = jit->ip;
#line 2364
                  (jit->ip) ++;
#line 2364
                  *tmp___13 = (unsigned char )((4 << 3) | 4);
#line 2364
                  break;
                }
              } else {
#line 2364
                tmp___24 = stack_reg_pos(jit, (int )value);
#line 2364
                if ((jit_value )tmp___24 >= -128L) {
#line 2364
                  tmp___25 = stack_reg_pos(jit, (int )value);
#line 2364
                  if ((jit_value )tmp___25 <= 127L) {
#line 2364
                    while (1) {
#line 2364
                      tmp___14 = jit->ip;
#line 2364
                      (jit->ip) ++;
#line 2364
                      *tmp___14 = (unsigned char )(((1 << 6) | (((reg & 0x7) & 0x07) << 3)) | 4);
#line 2364
                      break;
                    }
#line 2364
                    while (1) {
#line 2364
                      tmp___15 = jit->ip;
#line 2364
                      (jit->ip) ++;
#line 2364
                      *tmp___15 = (unsigned char )((4 << 3) | 4);
#line 2364
                      break;
                    }
#line 2364
                    while (1) {
#line 2364
                      tmp___16 = stack_reg_pos(jit, (int )value);
#line 2364
                      *(jit->ip) = (unsigned char )(tmp___16 & 0xff);
#line 2364
                      (jit->ip) ++;
#line 2364
                      break;
                    }
                  } else {
#line 2364
                    goto _L;
                  }
                } else {
                  _L: /* CIL Label */ 
#line 2364
                  while (1) {
#line 2364
                    tmp___17 = jit->ip;
#line 2364
                    (jit->ip) ++;
#line 2364
                    *tmp___17 = (unsigned char )(((2 << 6) | (((reg & 0x7) & 0x07) << 3)) | 4);
#line 2364
                    break;
                  }
#line 2364
                  while (1) {
#line 2364
                    tmp___18 = jit->ip;
#line 2364
                    (jit->ip) ++;
#line 2364
                    *tmp___18 = (unsigned char )((4 << 3) | 4);
#line 2364
                    break;
                  }
#line 2364
                  while (1) {
#line 2364
                    tmp___19 = stack_reg_pos(jit, (int )value);
#line 2364
                    imb___0.val = tmp___19;
#line 2364
                    tmp___20 = jit->ip;
#line 2364
                    (jit->ip) ++;
#line 2364
                    *tmp___20 = imb___0.b[0];
#line 2364
                    tmp___21 = jit->ip;
#line 2364
                    (jit->ip) ++;
#line 2364
                    *tmp___21 = imb___0.b[1];
#line 2364
                    tmp___22 = jit->ip;
#line 2364
                    (jit->ip) ++;
#line 2364
                    *tmp___22 = imb___0.b[2];
#line 2364
                    tmp___23 = jit->ip;
#line 2364
                    (jit->ip) ++;
#line 2364
                    *tmp___23 = imb___0.b[3];
#line 2364
                    break;
                  }
                }
              }
#line 2364
              break;
            }
#line 2364
            tmp___28 = stack_reg_pos(jit, (int )value);
#line 2364
            if (tmp___28 == 0) {

            }
#line 2364
            tmp___37 = stack_reg_pos(jit, (int )value);
#line 2364
            if ((jit_value )tmp___37 >= -128L) {
#line 2364
              tmp___38 = stack_reg_pos(jit, (int )value);
#line 2364
              if ((jit_value )tmp___38 <= 127L) {
#line 2364
                while (1) {
#line 2364
                  tmp___29 = jit->ip;
#line 2364
                  (jit->ip) ++;
#line 2364
                  *tmp___29 = (unsigned char )(((1 << 6) | (((reg & 0x7) & 0x07) << 3)) | 5);
#line 2364
                  break;
                }
#line 2364
                while (1) {
#line 2364
                  tmp___30 = stack_reg_pos(jit, (int )value);
#line 2364
                  *(jit->ip) = (unsigned char )(tmp___30 & 0xff);
#line 2364
                  (jit->ip) ++;
#line 2364
                  break;
                }
              } else {
#line 2364
                goto _L___0;
              }
            } else {
              _L___0: /* CIL Label */ 
#line 2364
              while (1) {
#line 2364
                tmp___31 = jit->ip;
#line 2364
                (jit->ip) ++;
#line 2364
                *tmp___31 = (unsigned char )(((2 << 6) | (((reg & 0x7) & 0x07) << 3)) | 5);
#line 2364
                break;
              }
#line 2364
              while (1) {
#line 2364
                tmp___32 = stack_reg_pos(jit, (int )value);
#line 2364
                imb___1.val = tmp___32;
#line 2364
                tmp___33 = jit->ip;
#line 2364
                (jit->ip) ++;
#line 2364
                *tmp___33 = imb___1.b[0];
#line 2364
                tmp___34 = jit->ip;
#line 2364
                (jit->ip) ++;
#line 2364
                *tmp___34 = imb___1.b[1];
#line 2364
                tmp___35 = jit->ip;
#line 2364
                (jit->ip) ++;
#line 2364
                *tmp___35 = imb___1.b[2];
#line 2364
                tmp___36 = jit->ip;
#line 2364
                (jit->ip) ++;
#line 2364
                *tmp___36 = imb___1.b[3];
#line 2364
                break;
              }
            }
#line 2364
            break;
          }
#line 2364
          break;
        }
#line 2364
        break;
      }
    } else
#line 2366
    if (reg != sreg) {
#line 2366
      while (1) {
#line 2366
        if ((int )sizeof(void *) == 2) {
#line 2366
          tmp___39 = jit->ip;
#line 2366
          (jit->ip) ++;
#line 2366
          *tmp___39 = (unsigned char)102;
        }
#line 2366
        while (1) {
#line 2366
          if ((int )sizeof(void *) > 4) {
#line 2366
            tmp___40 = 8;
          } else {
#line 2366
            tmp___40 = 0;
          }
#line 2366
          if (reg > 7) {
#line 2366
            tmp___41 = 4;
          } else {
#line 2366
            tmp___41 = 0;
          }
#line 2366
          if (sreg > 7) {
#line 2366
            tmp___42 = 1;
          } else {
#line 2366
            tmp___42 = 0;
          }
#line 2366
          _amd64_rex_bits___0 = (unsigned char )((tmp___40 | tmp___41) | tmp___42);
#line 2366
          if ((int )_amd64_rex_bits___0 != 0) {
#line 2366
            tmp___43 = jit->ip;
#line 2366
            (jit->ip) ++;
#line 2366
            *tmp___43 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
          } else
#line 2366
          if ((int )sizeof(void *) == 1) {
#line 2366
            tmp___43 = jit->ip;
#line 2366
            (jit->ip) ++;
#line 2366
            *tmp___43 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
          }
#line 2366
          break;
        }
#line 2366
        switch ((int )sizeof(void *)) {
        case 1: 
#line 2366
        tmp___44 = jit->ip;
#line 2366
        (jit->ip) ++;
#line 2366
        *tmp___44 = (unsigned char)138;
#line 2366
        break;
        case 8: 
        case 4: 
        case 2: 
#line 2366
        tmp___45 = jit->ip;
#line 2366
        (jit->ip) ++;
#line 2366
        *tmp___45 = (unsigned char)139;
#line 2366
        break;
        default: 
#line 2366
        tmp___46 = __builtin_expect(1L, 0L);
#line 2366
        if (tmp___46) {
#line 2366
          __assert_rtn((char const   *)"emit_set_arg", (char const   *)"./jitter-Darwin-X86-64.c",
                       2366, (char const   *)"0");
        }
        }
#line 2366
        while (1) {
#line 2366
          while (1) {
#line 2366
            tmp___47 = jit->ip;
#line 2366
            (jit->ip) ++;
#line 2366
            *tmp___47 = (unsigned char )(((3 << 6) | ((reg & 0x07) << 3)) | (sreg & 0x07));
#line 2366
            break;
          }
#line 2366
          break;
        }
#line 2366
        break;
      }
    }
  } else {
#line 2368
    while (1) {
#line 2368
      while (1) {
#line 2368
        if (reg > 7) {
#line 2368
          tmp___49 = 1;
        } else {
#line 2368
          tmp___49 = 0;
        }
#line 2368
        _amd64_rex_bits___1 = (unsigned char )(8 | tmp___49);
#line 2368
        if ((int )_amd64_rex_bits___1 != 0) {
#line 2368
          tmp___50 = jit->ip;
#line 2368
          (jit->ip) ++;
#line 2368
          *tmp___50 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
        }
#line 2368
        break;
      }
#line 2368
      tmp___51 = jit->ip;
#line 2368
      (jit->ip) ++;
#line 2368
      *tmp___51 = (unsigned char )(184 + (reg & 0x7));
#line 2368
      while (1) {
#line 2368
        imb___2.val = (size_t )value;
#line 2368
        tmp___52 = jit->ip;
#line 2368
        (jit->ip) ++;
#line 2368
        *tmp___52 = imb___2.b[0];
#line 2368
        tmp___53 = jit->ip;
#line 2368
        (jit->ip) ++;
#line 2368
        *tmp___53 = imb___2.b[1];
#line 2368
        tmp___54 = jit->ip;
#line 2368
        (jit->ip) ++;
#line 2368
        *tmp___54 = imb___2.b[2];
#line 2368
        tmp___55 = jit->ip;
#line 2368
        (jit->ip) ++;
#line 2368
        *tmp___55 = imb___2.b[3];
#line 2368
        tmp___56 = jit->ip;
#line 2368
        (jit->ip) ++;
#line 2368
        *tmp___56 = imb___2.b[4];
#line 2368
        tmp___57 = jit->ip;
#line 2368
        (jit->ip) ++;
#line 2368
        *tmp___57 = imb___2.b[5];
#line 2368
        tmp___58 = jit->ip;
#line 2368
        (jit->ip) ++;
#line 2368
        *tmp___58 = imb___2.b[6];
#line 2368
        tmp___59 = jit->ip;
#line 2368
        (jit->ip) ++;
#line 2368
        *tmp___59 = imb___2.b[7];
#line 2368
        break;
      }
#line 2368
      break;
    }
  }
#line 2369
  return;
}
}
/* END FUNCTION-DEF emit_set_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_transfer_init LOC=UNKNOWN */
static void emit_transfer_init(struct jit *jit , jit_op *op , jit_value destreg ,
                               jit_value srcreg , jit_value cnt , int block_size ) 
{ 
  struct transfer_info *tinf ;
  void *tmp ;
  jit_hw_reg *scrap ;
  jit_hw_reg *tmp___0 ;
  int i ;
  jit_hw_reg *r ;
  jit_hw_reg *counter ;
  jit_hw_reg *tmp___1 ;
  int i___0 ;
  jit_hw_reg *r___0 ;
  jit_hw_reg *counter___0 ;
  jit_hw_reg *tmp___2 ;
  int tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char _amd64_rex_bits ;
  int tmp___5 ;
  int tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  long tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  x86_imm_buf imb ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___29 ;
  int tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  long tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___52 ;
  int tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  amd64_imm_buf imb___3 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  int shift ;
  long tmp___68 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___69 ;
  int tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___89 ;
  int tmp___90 ;
  int tmp___91 ;
  int tmp___92 ;
  unsigned char *tmp___93 ;
  int tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  long tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___115 ;
  int tmp___116 ;
  int tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char *tmp___119 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___122 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  unsigned char *tmp___125 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char *tmp___128 ;
  unsigned char *tmp___129 ;
  unsigned char *tmp___130 ;
  unsigned char *tmp___131 ;
  x86_imm_buf imb___10 ;
  unsigned char *tmp___132 ;
  unsigned char *tmp___133 ;
  unsigned char *tmp___134 ;
  unsigned char *tmp___135 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___136 ;
  int tmp___137 ;
  int tmp___138 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  unsigned char *tmp___141 ;
  unsigned char *tmp___142 ;
  long tmp___143 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  x86_imm_buf imb___11 ;
  unsigned char *tmp___146 ;
  unsigned char *tmp___147 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;
  unsigned char *tmp___150 ;
  unsigned char *tmp___151 ;
  unsigned char *tmp___152 ;
  unsigned char *tmp___153 ;
  unsigned char *tmp___154 ;
  unsigned char *tmp___155 ;
  x86_imm_buf imb___12 ;
  unsigned char *tmp___156 ;
  unsigned char *tmp___157 ;
  unsigned char *tmp___158 ;
  unsigned char *tmp___159 ;

  {
#line 3412
  tmp = malloc((size_t )sizeof(struct transfer_info ));
#line 3412
  tinf = (struct transfer_info *)tmp;
#line 3413
  tinf->sourcereg = (int )srcreg;
#line 3414
  tinf->destreg = (int )destreg;
#line 3415
  tinf->block_size = block_size;
#line 3417
  tmp___0 = jit_get_unused_reg_with_index(jit->reg_al, op, 0, 0);
#line 3417
  scrap = tmp___0;
#line 3418
  if (scrap) {
#line 3418
    tinf->scrapreg = scrap->id;
  } else {
#line 3420
    i = 0;
#line 3420
    while (i < (jit->reg_al)->gp_reg_cnt) {
#line 3421
      r = (jit->reg_al)->gp_regs + i;
#line 3422
      if ((jit_value )r->id != srcreg) {
#line 3422
        if ((jit_value )r->id != destreg) {
#line 3422
          if (! ((int )op->code & 0x02)) {
#line 3422
            if ((jit_value )r->id != cnt) {
#line 3423
              tinf->scrapreg = r->id;
#line 3424
              break;
            }
          }
        }
      }
#line 3420
      i ++;
    }
  }
#line 3429
  tinf->scrap_in_use = jit_reg_in_use(op, tinf->scrapreg, 0);
#line 3431
  if ((int )op->code & 0x02) {
#line 3432
    tmp___1 = jit_get_unused_reg_with_index(jit->reg_al, op, 0, 1);
#line 3432
    counter = tmp___1;
#line 3433
    if (counter) {
#line 3433
      tinf->counterreg = counter->id;
    } else {
#line 3435
      i___0 = 0;
#line 3435
      while (i___0 < (jit->reg_al)->gp_reg_cnt) {
#line 3436
        r___0 = (jit->reg_al)->gp_regs + i___0;
#line 3437
        if ((jit_value )r___0->id != srcreg) {
#line 3437
          if ((jit_value )r___0->id != destreg) {
#line 3437
            if (r___0->id != tinf->scrapreg) {
#line 3438
              tinf->counterreg = r___0->id;
#line 3439
              break;
            }
          }
        }
#line 3435
        i___0 ++;
      }
    }
#line 3444
    tinf->counter_in_use = jit_reg_in_use(op, tinf->counterreg, 0);
  } else {
#line 3446
    tmp___3 = jit_set_get(op->live_out, (int )op->arg[2]);
#line 3446
    if (tmp___3) {
#line 3447
      tmp___2 = jit_get_unused_reg_with_index(jit->reg_al, op, 0, 1);
#line 3447
      counter___0 = tmp___2;
#line 3448
      if (counter___0) {
#line 3448
        tinf->counterreg = counter___0->id;
      } else {
#line 3448
        tinf->counterreg = (int )cnt;
      }
#line 3449
      tinf->counter_in_use = jit_reg_in_use(op, tinf->counterreg, 0);
    } else {
#line 3451
      tinf->counterreg = (int )cnt;
#line 3452
      tinf->counter_in_use = 0;
    }
  }
#line 3456
  if (tinf->counter_in_use) {
#line 3456
    while (1) {
#line 3456
      if ((int )sizeof(void *) == 2) {
#line 3456
        tmp___4 = jit->ip;
#line 3456
        (jit->ip) ++;
#line 3456
        *tmp___4 = (unsigned char)102;
      }
#line 3456
      while (1) {
#line 3456
        if ((int )sizeof(void *) > 4) {
#line 3456
          tmp___5 = 8;
        } else {
#line 3456
          tmp___5 = 0;
        }
#line 3456
        if (tinf->counterreg > 7) {
#line 3456
          tmp___6 = 4;
        } else {
#line 3456
          tmp___6 = 0;
        }
#line 3456
        _amd64_rex_bits = (unsigned char )(tmp___5 | tmp___6);
#line 3456
        if ((int )_amd64_rex_bits != 0) {
#line 3456
          tmp___7 = jit->ip;
#line 3456
          (jit->ip) ++;
#line 3456
          *tmp___7 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
        } else
#line 3456
        if ((int )sizeof(void *) == 1) {
#line 3456
          tmp___7 = jit->ip;
#line 3456
          (jit->ip) ++;
#line 3456
          *tmp___7 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
        }
#line 3456
        break;
      }
#line 3456
      switch ((int )sizeof(void *)) {
      case 1: 
#line 3456
      tmp___8 = jit->ip;
#line 3456
      (jit->ip) ++;
#line 3456
      *tmp___8 = (unsigned char)136;
#line 3456
      break;
      case 8: 
      case 4: 
      case 2: 
#line 3456
      tmp___9 = jit->ip;
#line 3456
      (jit->ip) ++;
#line 3456
      *tmp___9 = (unsigned char)137;
#line 3456
      break;
      default: 
#line 3456
      tmp___10 = __builtin_expect(1L, 0L);
#line 3456
      if (tmp___10) {
#line 3456
        __assert_rtn((char const   *)"emit_transfer_init", (char const   *)"./jitter-Darwin-X86-64.c",
                     3456, (char const   *)"0");
      }
      }
#line 3456
      while (1) {
#line 3456
        if (- ((int )sizeof(void *)) == 0) {
#line 3456
          while (1) {
#line 3456
            tmp___11 = jit->ip;
#line 3456
            (jit->ip) ++;
#line 3456
            *tmp___11 = (unsigned char )((((tinf->counterreg & 0x7) & 0x07) << 3) | 4);
#line 3456
            break;
          }
#line 3456
          while (1) {
#line 3456
            tmp___12 = jit->ip;
#line 3456
            (jit->ip) ++;
#line 3456
            *tmp___12 = (unsigned char )((4 << 3) | 4);
#line 3456
            break;
          }
        } else
#line 3456
        if ((jit_value )(- ((int )sizeof(void *))) >= -128L) {
#line 3456
          if ((jit_value )(- ((int )sizeof(void *))) <= 127L) {
#line 3456
            while (1) {
#line 3456
              tmp___13 = jit->ip;
#line 3456
              (jit->ip) ++;
#line 3456
              *tmp___13 = (unsigned char )(((1 << 6) | (((tinf->counterreg & 0x7) & 0x07) << 3)) | 4);
#line 3456
              break;
            }
#line 3456
            while (1) {
#line 3456
              tmp___14 = jit->ip;
#line 3456
              (jit->ip) ++;
#line 3456
              *tmp___14 = (unsigned char )((4 << 3) | 4);
#line 3456
              break;
            }
#line 3456
            while (1) {
#line 3456
              *(jit->ip) = (unsigned char )(- ((int )sizeof(void *)) & 0xff);
#line 3456
              (jit->ip) ++;
#line 3456
              break;
            }
          } else {
#line 3456
            goto _L;
          }
        } else {
          _L: /* CIL Label */ 
#line 3456
          while (1) {
#line 3456
            tmp___15 = jit->ip;
#line 3456
            (jit->ip) ++;
#line 3456
            *tmp___15 = (unsigned char )(((2 << 6) | (((tinf->counterreg & 0x7) & 0x07) << 3)) | 4);
#line 3456
            break;
          }
#line 3456
          while (1) {
#line 3456
            tmp___16 = jit->ip;
#line 3456
            (jit->ip) ++;
#line 3456
            *tmp___16 = (unsigned char )((4 << 3) | 4);
#line 3456
            break;
          }
#line 3456
          while (1) {
#line 3456
            imb.val = - ((int )sizeof(void *));
#line 3456
            tmp___17 = jit->ip;
#line 3456
            (jit->ip) ++;
#line 3456
            *tmp___17 = imb.b[0];
#line 3456
            tmp___18 = jit->ip;
#line 3456
            (jit->ip) ++;
#line 3456
            *tmp___18 = imb.b[1];
#line 3456
            tmp___19 = jit->ip;
#line 3456
            (jit->ip) ++;
#line 3456
            *tmp___19 = imb.b[2];
#line 3456
            tmp___20 = jit->ip;
#line 3456
            (jit->ip) ++;
#line 3456
            *tmp___20 = imb.b[3];
#line 3456
            break;
          }
        }
#line 3456
        break;
#line 3456
        if (- ((int )sizeof(void *)) == 0) {
#line 3456
          while (1) {
#line 3456
            tmp___21 = jit->ip;
#line 3456
            (jit->ip) ++;
#line 3456
            *tmp___21 = (unsigned char )((((tinf->counterreg & 0x7) & 0x07) << 3) | 4);
#line 3456
            break;
          }
#line 3456
          break;
        }
#line 3456
        if ((jit_value )(- ((int )sizeof(void *))) >= -128L) {
#line 3456
          if ((jit_value )(- ((int )sizeof(void *))) <= 127L) {
#line 3456
            while (1) {
#line 3456
              tmp___22 = jit->ip;
#line 3456
              (jit->ip) ++;
#line 3456
              *tmp___22 = (unsigned char )(((1 << 6) | (((tinf->counterreg & 0x7) & 0x07) << 3)) | 4);
#line 3456
              break;
            }
#line 3456
            while (1) {
#line 3456
              *(jit->ip) = (unsigned char )(- ((int )sizeof(void *)) & 0xff);
#line 3456
              (jit->ip) ++;
#line 3456
              break;
            }
          } else {
#line 3456
            goto _L___0;
          }
        } else {
          _L___0: /* CIL Label */ 
#line 3456
          while (1) {
#line 3456
            tmp___23 = jit->ip;
#line 3456
            (jit->ip) ++;
#line 3456
            *tmp___23 = (unsigned char )(((2 << 6) | (((tinf->counterreg & 0x7) & 0x07) << 3)) | 4);
#line 3456
            break;
          }
#line 3456
          while (1) {
#line 3456
            imb___0.val = - ((int )sizeof(void *));
#line 3456
            tmp___24 = jit->ip;
#line 3456
            (jit->ip) ++;
#line 3456
            *tmp___24 = imb___0.b[0];
#line 3456
            tmp___25 = jit->ip;
#line 3456
            (jit->ip) ++;
#line 3456
            *tmp___25 = imb___0.b[1];
#line 3456
            tmp___26 = jit->ip;
#line 3456
            (jit->ip) ++;
#line 3456
            *tmp___26 = imb___0.b[2];
#line 3456
            tmp___27 = jit->ip;
#line 3456
            (jit->ip) ++;
#line 3456
            *tmp___27 = imb___0.b[3];
#line 3456
            break;
          }
        }
#line 3456
        break;
      }
#line 3456
      break;
    }
  }
#line 3457
  if (tinf->scrap_in_use) {
#line 3457
    while (1) {
#line 3457
      if ((int )sizeof(void *) == 2) {
#line 3457
        tmp___28 = jit->ip;
#line 3457
        (jit->ip) ++;
#line 3457
        *tmp___28 = (unsigned char)102;
      }
#line 3457
      while (1) {
#line 3457
        if ((int )sizeof(void *) > 4) {
#line 3457
          tmp___29 = 8;
        } else {
#line 3457
          tmp___29 = 0;
        }
#line 3457
        if (tinf->scrapreg > 7) {
#line 3457
          tmp___30 = 4;
        } else {
#line 3457
          tmp___30 = 0;
        }
#line 3457
        _amd64_rex_bits___0 = (unsigned char )(tmp___29 | tmp___30);
#line 3457
        if ((int )_amd64_rex_bits___0 != 0) {
#line 3457
          tmp___31 = jit->ip;
#line 3457
          (jit->ip) ++;
#line 3457
          *tmp___31 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
        } else
#line 3457
        if ((int )sizeof(void *) == 1) {
#line 3457
          tmp___31 = jit->ip;
#line 3457
          (jit->ip) ++;
#line 3457
          *tmp___31 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
        }
#line 3457
        break;
      }
#line 3457
      switch ((int )sizeof(void *)) {
      case 1: 
#line 3457
      tmp___32 = jit->ip;
#line 3457
      (jit->ip) ++;
#line 3457
      *tmp___32 = (unsigned char)136;
#line 3457
      break;
      case 8: 
      case 4: 
      case 2: 
#line 3457
      tmp___33 = jit->ip;
#line 3457
      (jit->ip) ++;
#line 3457
      *tmp___33 = (unsigned char)137;
#line 3457
      break;
      default: 
#line 3457
      tmp___34 = __builtin_expect(1L, 0L);
#line 3457
      if (tmp___34) {
#line 3457
        __assert_rtn((char const   *)"emit_transfer_init", (char const   *)"./jitter-Darwin-X86-64.c",
                     3457, (char const   *)"0");
      }
      }
#line 3457
      while (1) {
#line 3457
        if (- ((int )sizeof(void *)) * 2 == 0) {
#line 3457
          while (1) {
#line 3457
            tmp___35 = jit->ip;
#line 3457
            (jit->ip) ++;
#line 3457
            *tmp___35 = (unsigned char )((((tinf->scrapreg & 0x7) & 0x07) << 3) | 4);
#line 3457
            break;
          }
#line 3457
          while (1) {
#line 3457
            tmp___36 = jit->ip;
#line 3457
            (jit->ip) ++;
#line 3457
            *tmp___36 = (unsigned char )((4 << 3) | 4);
#line 3457
            break;
          }
        } else
#line 3457
        if ((jit_value )(- ((int )sizeof(void *)) * 2) >= -128L) {
#line 3457
          if ((jit_value )(- ((int )sizeof(void *)) * 2) <= 127L) {
#line 3457
            while (1) {
#line 3457
              tmp___37 = jit->ip;
#line 3457
              (jit->ip) ++;
#line 3457
              *tmp___37 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3457
              break;
            }
#line 3457
            while (1) {
#line 3457
              tmp___38 = jit->ip;
#line 3457
              (jit->ip) ++;
#line 3457
              *tmp___38 = (unsigned char )((4 << 3) | 4);
#line 3457
              break;
            }
#line 3457
            while (1) {
#line 3457
              *(jit->ip) = (unsigned char )(- ((int )sizeof(void *)) * 2 & 0xff);
#line 3457
              (jit->ip) ++;
#line 3457
              break;
            }
          } else {
#line 3457
            goto _L___1;
          }
        } else {
          _L___1: /* CIL Label */ 
#line 3457
          while (1) {
#line 3457
            tmp___39 = jit->ip;
#line 3457
            (jit->ip) ++;
#line 3457
            *tmp___39 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3457
            break;
          }
#line 3457
          while (1) {
#line 3457
            tmp___40 = jit->ip;
#line 3457
            (jit->ip) ++;
#line 3457
            *tmp___40 = (unsigned char )((4 << 3) | 4);
#line 3457
            break;
          }
#line 3457
          while (1) {
#line 3457
            imb___1.val = - ((int )sizeof(void *)) * 2;
#line 3457
            tmp___41 = jit->ip;
#line 3457
            (jit->ip) ++;
#line 3457
            *tmp___41 = imb___1.b[0];
#line 3457
            tmp___42 = jit->ip;
#line 3457
            (jit->ip) ++;
#line 3457
            *tmp___42 = imb___1.b[1];
#line 3457
            tmp___43 = jit->ip;
#line 3457
            (jit->ip) ++;
#line 3457
            *tmp___43 = imb___1.b[2];
#line 3457
            tmp___44 = jit->ip;
#line 3457
            (jit->ip) ++;
#line 3457
            *tmp___44 = imb___1.b[3];
#line 3457
            break;
          }
        }
#line 3457
        break;
#line 3457
        if (- ((int )sizeof(void *)) * 2 == 0) {
#line 3457
          while (1) {
#line 3457
            tmp___45 = jit->ip;
#line 3457
            (jit->ip) ++;
#line 3457
            *tmp___45 = (unsigned char )((((tinf->scrapreg & 0x7) & 0x07) << 3) | 4);
#line 3457
            break;
          }
#line 3457
          break;
        }
#line 3457
        if ((jit_value )(- ((int )sizeof(void *)) * 2) >= -128L) {
#line 3457
          if ((jit_value )(- ((int )sizeof(void *)) * 2) <= 127L) {
#line 3457
            while (1) {
#line 3457
              tmp___46 = jit->ip;
#line 3457
              (jit->ip) ++;
#line 3457
              *tmp___46 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3457
              break;
            }
#line 3457
            while (1) {
#line 3457
              *(jit->ip) = (unsigned char )(- ((int )sizeof(void *)) * 2 & 0xff);
#line 3457
              (jit->ip) ++;
#line 3457
              break;
            }
          } else {
#line 3457
            goto _L___2;
          }
        } else {
          _L___2: /* CIL Label */ 
#line 3457
          while (1) {
#line 3457
            tmp___47 = jit->ip;
#line 3457
            (jit->ip) ++;
#line 3457
            *tmp___47 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3457
            break;
          }
#line 3457
          while (1) {
#line 3457
            imb___2.val = - ((int )sizeof(void *)) * 2;
#line 3457
            tmp___48 = jit->ip;
#line 3457
            (jit->ip) ++;
#line 3457
            *tmp___48 = imb___2.b[0];
#line 3457
            tmp___49 = jit->ip;
#line 3457
            (jit->ip) ++;
#line 3457
            *tmp___49 = imb___2.b[1];
#line 3457
            tmp___50 = jit->ip;
#line 3457
            (jit->ip) ++;
#line 3457
            *tmp___50 = imb___2.b[2];
#line 3457
            tmp___51 = jit->ip;
#line 3457
            (jit->ip) ++;
#line 3457
            *tmp___51 = imb___2.b[3];
#line 3457
            break;
          }
        }
#line 3457
        break;
      }
#line 3457
      break;
    }
  }
#line 3459
  if ((int )op->code & 0x02) {
#line 3459
    while (1) {
#line 3459
      while (1) {
#line 3459
        if (sizeof(void *) > 4ULL) {
#line 3459
          tmp___52 = 8;
        } else {
#line 3459
          tmp___52 = 0;
        }
#line 3459
        if (tinf->counterreg > 7) {
#line 3459
          tmp___53 = 1;
        } else {
#line 3459
          tmp___53 = 0;
        }
#line 3459
        _amd64_rex_bits___1 = (unsigned char )(tmp___52 | tmp___53);
#line 3459
        if ((int )_amd64_rex_bits___1 != 0) {
#line 3459
          tmp___54 = jit->ip;
#line 3459
          (jit->ip) ++;
#line 3459
          *tmp___54 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
        } else
#line 3459
        if (sizeof(void *) == 1ULL) {
#line 3459
          tmp___54 = jit->ip;
#line 3459
          (jit->ip) ++;
#line 3459
          *tmp___54 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
        }
#line 3459
        break;
      }
#line 3459
      tmp___55 = jit->ip;
#line 3459
      (jit->ip) ++;
#line 3459
      *tmp___55 = (unsigned char )(184 + (tinf->counterreg & 0x7));
#line 3459
      if (sizeof(void *) == 8ULL) {
#line 3459
        while (1) {
#line 3459
          imb___3.val = (size_t )(cnt * (jit_value )block_size);
#line 3459
          tmp___56 = jit->ip;
#line 3459
          (jit->ip) ++;
#line 3459
          *tmp___56 = imb___3.b[0];
#line 3459
          tmp___57 = jit->ip;
#line 3459
          (jit->ip) ++;
#line 3459
          *tmp___57 = imb___3.b[1];
#line 3459
          tmp___58 = jit->ip;
#line 3459
          (jit->ip) ++;
#line 3459
          *tmp___58 = imb___3.b[2];
#line 3459
          tmp___59 = jit->ip;
#line 3459
          (jit->ip) ++;
#line 3459
          *tmp___59 = imb___3.b[3];
#line 3459
          tmp___60 = jit->ip;
#line 3459
          (jit->ip) ++;
#line 3459
          *tmp___60 = imb___3.b[4];
#line 3459
          tmp___61 = jit->ip;
#line 3459
          (jit->ip) ++;
#line 3459
          *tmp___61 = imb___3.b[5];
#line 3459
          tmp___62 = jit->ip;
#line 3459
          (jit->ip) ++;
#line 3459
          *tmp___62 = imb___3.b[6];
#line 3459
          tmp___63 = jit->ip;
#line 3459
          (jit->ip) ++;
#line 3459
          *tmp___63 = imb___3.b[7];
#line 3459
          break;
        }
      } else {
#line 3459
        while (1) {
#line 3459
          imb___4.val = (int )((size_t )(cnt * (jit_value )block_size));
#line 3459
          tmp___64 = jit->ip;
#line 3459
          (jit->ip) ++;
#line 3459
          *tmp___64 = imb___4.b[0];
#line 3459
          tmp___65 = jit->ip;
#line 3459
          (jit->ip) ++;
#line 3459
          *tmp___65 = imb___4.b[1];
#line 3459
          tmp___66 = jit->ip;
#line 3459
          (jit->ip) ++;
#line 3459
          *tmp___66 = imb___4.b[2];
#line 3459
          tmp___67 = jit->ip;
#line 3459
          (jit->ip) ++;
#line 3459
          *tmp___67 = imb___4.b[3];
#line 3459
          break;
        }
      }
#line 3459
      break;
    }
  } else
#line 3460
  if ((jit_value )tinf->counterreg != cnt) {
#line 3460
    goto _L___3;
  } else
#line 3460
  if (block_size > 1) {
    _L___3: /* CIL Label */ 
#line 3462
    if (block_size == 1) {
#line 3462
      shift = 0;
    } else
#line 3463
    if (block_size == 2) {
#line 3463
      shift = 1;
    } else
#line 3464
    if (block_size == 4) {
#line 3464
      shift = 2;
    } else
#line 3465
    if (block_size == 8) {
#line 3465
      shift = 3;
    } else {
#line 3466
      tmp___68 = __builtin_expect(1L, 0L);
#line 3466
      if (tmp___68) {
#line 3466
        __assert_rtn((char const   *)"emit_transfer_init", (char const   *)"./jitter-Darwin-X86-64.c",
                     3466, (char const   *)"0");
      }
    }
#line 3467
    while (1) {
#line 3467
      while (1) {
#line 3467
        if (tinf->counterreg > 7) {
#line 3467
          tmp___69 = 4;
        } else {
#line 3467
          tmp___69 = 0;
        }
#line 3467
        if (cnt > 7L) {
#line 3467
          tmp___70 = 2;
        } else {
#line 3467
          tmp___70 = 0;
        }
#line 3467
        _amd64_rex_bits___2 = (unsigned char )((8 | tmp___69) | tmp___70);
#line 3467
        if ((int )_amd64_rex_bits___2 != 0) {
#line 3467
          tmp___71 = jit->ip;
#line 3467
          (jit->ip) ++;
#line 3467
          *tmp___71 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
        }
#line 3467
        break;
      }
#line 3467
      while (1) {
#line 3467
        tmp___72 = jit->ip;
#line 3467
        (jit->ip) ++;
#line 3467
        *tmp___72 = (unsigned char)141;
#line 3467
        while (1) {
#line 3467
          while (1) {
#line 3467
            tmp___73 = jit->ip;
#line 3467
            (jit->ip) ++;
#line 3467
            *tmp___73 = (unsigned char )((((tinf->counterreg & 0x7) & 0x07) << 3) | 4);
#line 3467
            break;
          }
#line 3467
          while (1) {
#line 3467
            tmp___74 = jit->ip;
#line 3467
            (jit->ip) ++;
#line 3467
            *tmp___74 = (unsigned char )(((long )((shift & 0x03) << 6) | (((cnt & 7L) & 7L) << 3)) | 5L);
#line 3467
            break;
          }
#line 3467
          while (1) {
#line 3467
            imb___5.val = 0;
#line 3467
            tmp___75 = jit->ip;
#line 3467
            (jit->ip) ++;
#line 3467
            *tmp___75 = imb___5.b[0];
#line 3467
            tmp___76 = jit->ip;
#line 3467
            (jit->ip) ++;
#line 3467
            *tmp___76 = imb___5.b[1];
#line 3467
            tmp___77 = jit->ip;
#line 3467
            (jit->ip) ++;
#line 3467
            *tmp___77 = imb___5.b[2];
#line 3467
            tmp___78 = jit->ip;
#line 3467
            (jit->ip) ++;
#line 3467
            *tmp___78 = imb___5.b[3];
#line 3467
            break;
          }
#line 3467
          break;
        }
#line 3467
        break;
      }
#line 3467
      break;
    }
  }
#line 3472
  tinf->loop_addr = jit->ip;
#line 3473
  op->addendum = (void *)tinf;
#line 3475
  if (block_size == (int )sizeof(void *)) {
#line 3475
    while (1) {
#line 3475
      while (1) {
#line 3475
        if (block_size > 4) {
#line 3475
          tmp___89 = 8;
        } else {
#line 3475
          tmp___89 = 0;
        }
#line 3475
        if (tinf->scrapreg > 7) {
#line 3475
          tmp___90 = 4;
        } else {
#line 3475
          tmp___90 = 0;
        }
#line 3475
        if (tinf->counterreg > 7) {
#line 3475
          tmp___91 = 2;
        } else {
#line 3475
          tmp___91 = 0;
        }
#line 3475
        if (srcreg > 7L) {
#line 3475
          tmp___92 = 1;
        } else {
#line 3475
          tmp___92 = 0;
        }
#line 3475
        _amd64_rex_bits___3 = (unsigned char )(((tmp___89 | tmp___90) | tmp___91) | tmp___92);
#line 3475
        if ((int )_amd64_rex_bits___3 != 0) {
#line 3475
          tmp___93 = jit->ip;
#line 3475
          (jit->ip) ++;
#line 3475
          *tmp___93 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
        } else
#line 3475
        if (block_size == 1) {
#line 3475
          tmp___93 = jit->ip;
#line 3475
          (jit->ip) ++;
#line 3475
          *tmp___93 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
        }
#line 3475
        break;
      }
#line 3475
      while (1) {
#line 3475
        if (block_size == 8) {
#line 3475
          tmp___94 = 4;
        } else {
#line 3475
          tmp___94 = block_size;
        }
#line 3475
        switch (tmp___94) {
        case 1: 
#line 3475
        tmp___95 = jit->ip;
#line 3475
        (jit->ip) ++;
#line 3475
        *tmp___95 = (unsigned char)138;
#line 3475
        break;
        case 2: 
#line 3475
        tmp___96 = jit->ip;
#line 3475
        (jit->ip) ++;
#line 3475
        *tmp___96 = (unsigned char)102;
        case 4: 
#line 3475
        tmp___97 = jit->ip;
#line 3475
        (jit->ip) ++;
#line 3475
        *tmp___97 = (unsigned char)139;
#line 3475
        break;
        default: 
#line 3475
        tmp___98 = __builtin_expect(1L, 0L);
#line 3475
        if (tmp___98) {
#line 3475
          __assert_rtn((char const   *)"emit_transfer_init", (char const   *)"./jitter-Darwin-X86-64.c",
                       3475, (char const   *)"0");
        }
        }
#line 3475
        while (1) {
#line 3475
          if ((srcreg & 7L) == -1L) {
#line 3475
            while (1) {
#line 3475
              tmp___99 = jit->ip;
#line 3475
              (jit->ip) ++;
#line 3475
              *tmp___99 = (unsigned char )((((tinf->scrapreg & 0x7) & 0x07) << 3) | 4);
#line 3475
              break;
            }
#line 3475
            while (1) {
#line 3475
              tmp___100 = jit->ip;
#line 3475
              (jit->ip) ++;
#line 3475
              *tmp___100 = (unsigned char )((((tinf->counterreg & 0x7) & 0x07) << 3) | 5);
#line 3475
              break;
            }
#line 3475
            while (1) {
#line 3475
              imb___7.val = - block_size;
#line 3475
              tmp___101 = jit->ip;
#line 3475
              (jit->ip) ++;
#line 3475
              *tmp___101 = imb___7.b[0];
#line 3475
              tmp___102 = jit->ip;
#line 3475
              (jit->ip) ++;
#line 3475
              *tmp___102 = imb___7.b[1];
#line 3475
              tmp___103 = jit->ip;
#line 3475
              (jit->ip) ++;
#line 3475
              *tmp___103 = imb___7.b[2];
#line 3475
              tmp___104 = jit->ip;
#line 3475
              (jit->ip) ++;
#line 3475
              *tmp___104 = imb___7.b[3];
#line 3475
              break;
            }
          } else
#line 3475
          if (- block_size == 0) {
#line 3475
            if ((srcreg & 7L) != 5L) {
#line 3475
              while (1) {
#line 3475
                tmp___105 = jit->ip;
#line 3475
                (jit->ip) ++;
#line 3475
                *tmp___105 = (unsigned char )((((tinf->scrapreg & 0x7) & 0x07) << 3) | 4);
#line 3475
                break;
              }
#line 3475
              while (1) {
#line 3475
                tmp___106 = jit->ip;
#line 3475
                (jit->ip) ++;
#line 3475
                *tmp___106 = (unsigned char )((long )((((tinf->counterreg & 0x7) & 0x7) & 0x07) << 3) | (((srcreg & 7L) & 7L) & 7L));
#line 3475
                break;
              }
            } else {
#line 3475
              goto _L___5;
            }
          } else
          _L___5: /* CIL Label */ 
#line 3475
          if ((jit_value )(- block_size) >= -128L) {
#line 3475
            if ((jit_value )(- block_size) <= 127L) {
#line 3475
              while (1) {
#line 3475
                tmp___107 = jit->ip;
#line 3475
                (jit->ip) ++;
#line 3475
                *tmp___107 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3475
                break;
              }
#line 3475
              while (1) {
#line 3475
                tmp___108 = jit->ip;
#line 3475
                (jit->ip) ++;
#line 3475
                *tmp___108 = (unsigned char )((long )((((tinf->counterreg & 0x7) & 0x7) & 0x07) << 3) | (((srcreg & 7L) & 7L) & 7L));
#line 3475
                break;
              }
#line 3475
              while (1) {
#line 3475
                *(jit->ip) = (unsigned char )(- block_size & 0xff);
#line 3475
                (jit->ip) ++;
#line 3475
                break;
              }
            } else {
#line 3475
              goto _L___4;
            }
          } else {
            _L___4: /* CIL Label */ 
#line 3475
            while (1) {
#line 3475
              tmp___109 = jit->ip;
#line 3475
              (jit->ip) ++;
#line 3475
              *tmp___109 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3475
              break;
            }
#line 3475
            while (1) {
#line 3475
              tmp___110 = jit->ip;
#line 3475
              (jit->ip) ++;
#line 3475
              *tmp___110 = (unsigned char )((long )((((tinf->counterreg & 0x7) & 0x7) & 0x07) << 3) | (((srcreg & 7L) & 7L) & 7L));
#line 3475
              break;
            }
#line 3475
            while (1) {
#line 3475
              imb___8.val = - block_size;
#line 3475
              tmp___111 = jit->ip;
#line 3475
              (jit->ip) ++;
#line 3475
              *tmp___111 = imb___8.b[0];
#line 3475
              tmp___112 = jit->ip;
#line 3475
              (jit->ip) ++;
#line 3475
              *tmp___112 = imb___8.b[1];
#line 3475
              tmp___113 = jit->ip;
#line 3475
              (jit->ip) ++;
#line 3475
              *tmp___113 = imb___8.b[2];
#line 3475
              tmp___114 = jit->ip;
#line 3475
              (jit->ip) ++;
#line 3475
              *tmp___114 = imb___8.b[3];
#line 3475
              break;
            }
          }
#line 3475
          break;
        }
#line 3475
        break;
      }
#line 3475
      break;
    }
  } else {
#line 3476
    while (1) {
#line 3476
      if (block_size == 4) {
#line 3476
        while (1) {
#line 3476
          while (1) {
#line 3476
            if (tinf->scrapreg > 7) {
#line 3476
              tmp___115 = 4;
            } else {
#line 3476
              tmp___115 = 0;
            }
#line 3476
            if (tinf->counterreg > 7) {
#line 3476
              tmp___116 = 2;
            } else {
#line 3476
              tmp___116 = 0;
            }
#line 3476
            if (srcreg > 7L) {
#line 3476
              tmp___117 = 1;
            } else {
#line 3476
              tmp___117 = 0;
            }
#line 3476
            _amd64_rex_bits___4 = (unsigned char )(((8 | tmp___115) | tmp___116) | tmp___117);
#line 3476
            if ((int )_amd64_rex_bits___4 != 0) {
#line 3476
              tmp___118 = jit->ip;
#line 3476
              (jit->ip) ++;
#line 3476
              *tmp___118 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
            }
#line 3476
            break;
          }
#line 3476
          tmp___119 = jit->ip;
#line 3476
          (jit->ip) ++;
#line 3476
          *tmp___119 = (unsigned char)99;
#line 3476
          while (1) {
#line 3476
            if ((srcreg & 7L) == -1L) {
#line 3476
              while (1) {
#line 3476
                tmp___120 = jit->ip;
#line 3476
                (jit->ip) ++;
#line 3476
                *tmp___120 = (unsigned char )((((tinf->scrapreg & 0x7) & 0x07) << 3) | 4);
#line 3476
                break;
              }
#line 3476
              while (1) {
#line 3476
                tmp___121 = jit->ip;
#line 3476
                (jit->ip) ++;
#line 3476
                *tmp___121 = (unsigned char )((((tinf->counterreg & 0x7) & 0x07) << 3) | 5);
#line 3476
                break;
              }
#line 3476
              while (1) {
#line 3476
                imb___9.val = - block_size;
#line 3476
                tmp___122 = jit->ip;
#line 3476
                (jit->ip) ++;
#line 3476
                *tmp___122 = imb___9.b[0];
#line 3476
                tmp___123 = jit->ip;
#line 3476
                (jit->ip) ++;
#line 3476
                *tmp___123 = imb___9.b[1];
#line 3476
                tmp___124 = jit->ip;
#line 3476
                (jit->ip) ++;
#line 3476
                *tmp___124 = imb___9.b[2];
#line 3476
                tmp___125 = jit->ip;
#line 3476
                (jit->ip) ++;
#line 3476
                *tmp___125 = imb___9.b[3];
#line 3476
                break;
              }
            } else
#line 3476
            if (- block_size == 0) {
#line 3476
              if ((srcreg & 7L) != 5L) {
#line 3476
                while (1) {
#line 3476
                  tmp___126 = jit->ip;
#line 3476
                  (jit->ip) ++;
#line 3476
                  *tmp___126 = (unsigned char )((((tinf->scrapreg & 0x7) & 0x07) << 3) | 4);
#line 3476
                  break;
                }
#line 3476
                while (1) {
#line 3476
                  tmp___127 = jit->ip;
#line 3476
                  (jit->ip) ++;
#line 3476
                  *tmp___127 = (unsigned char )((long )((((tinf->counterreg & 0x7) & 0x7) & 0x07) << 3) | (((srcreg & 7L) & 7L) & 7L));
#line 3476
                  break;
                }
              } else {
#line 3476
                goto _L___7;
              }
            } else
            _L___7: /* CIL Label */ 
#line 3476
            if ((jit_value )(- block_size) >= -128L) {
#line 3476
              if ((jit_value )(- block_size) <= 127L) {
#line 3476
                while (1) {
#line 3476
                  tmp___128 = jit->ip;
#line 3476
                  (jit->ip) ++;
#line 3476
                  *tmp___128 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3476
                  break;
                }
#line 3476
                while (1) {
#line 3476
                  tmp___129 = jit->ip;
#line 3476
                  (jit->ip) ++;
#line 3476
                  *tmp___129 = (unsigned char )((long )((((tinf->counterreg & 0x7) & 0x7) & 0x07) << 3) | (((srcreg & 7L) & 7L) & 7L));
#line 3476
                  break;
                }
#line 3476
                while (1) {
#line 3476
                  *(jit->ip) = (unsigned char )(- block_size & 0xff);
#line 3476
                  (jit->ip) ++;
#line 3476
                  break;
                }
              } else {
#line 3476
                goto _L___6;
              }
            } else {
              _L___6: /* CIL Label */ 
#line 3476
              while (1) {
#line 3476
                tmp___130 = jit->ip;
#line 3476
                (jit->ip) ++;
#line 3476
                *tmp___130 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3476
                break;
              }
#line 3476
              while (1) {
#line 3476
                tmp___131 = jit->ip;
#line 3476
                (jit->ip) ++;
#line 3476
                *tmp___131 = (unsigned char )((long )((((tinf->counterreg & 0x7) & 0x7) & 0x07) << 3) | (((srcreg & 7L) & 7L) & 7L));
#line 3476
                break;
              }
#line 3476
              while (1) {
#line 3476
                imb___10.val = - block_size;
#line 3476
                tmp___132 = jit->ip;
#line 3476
                (jit->ip) ++;
#line 3476
                *tmp___132 = imb___10.b[0];
#line 3476
                tmp___133 = jit->ip;
#line 3476
                (jit->ip) ++;
#line 3476
                *tmp___133 = imb___10.b[1];
#line 3476
                tmp___134 = jit->ip;
#line 3476
                (jit->ip) ++;
#line 3476
                *tmp___134 = imb___10.b[2];
#line 3476
                tmp___135 = jit->ip;
#line 3476
                (jit->ip) ++;
#line 3476
                *tmp___135 = imb___10.b[3];
#line 3476
                break;
              }
            }
#line 3476
            break;
          }
#line 3476
          break;
        }
#line 3476
        break;
      }
#line 3476
      while (1) {
#line 3476
        if (tinf->scrapreg > 7) {
#line 3476
          tmp___136 = 4;
        } else {
#line 3476
          tmp___136 = 0;
        }
#line 3476
        if (tinf->counterreg > 7) {
#line 3476
          tmp___137 = 2;
        } else {
#line 3476
          tmp___137 = 0;
        }
#line 3476
        if (srcreg > 7L) {
#line 3476
          tmp___138 = 1;
        } else {
#line 3476
          tmp___138 = 0;
        }
#line 3476
        _amd64_rex_bits___5 = (unsigned char )(((8 | tmp___136) | tmp___137) | tmp___138);
#line 3476
        if ((int )_amd64_rex_bits___5 != 0) {
#line 3476
          tmp___139 = jit->ip;
#line 3476
          (jit->ip) ++;
#line 3476
          *tmp___139 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
        }
#line 3476
        break;
      }
#line 3476
      tmp___140 = jit->ip;
#line 3476
      (jit->ip) ++;
#line 3476
      *tmp___140 = (unsigned char)15;
#line 3476
      switch (block_size) {
      case 1: 
#line 3476
      tmp___141 = jit->ip;
#line 3476
      (jit->ip) ++;
#line 3476
      *tmp___141 = (unsigned char)190;
#line 3476
      break;
      case 2: 
#line 3476
      tmp___142 = jit->ip;
#line 3476
      (jit->ip) ++;
#line 3476
      *tmp___142 = (unsigned char)191;
#line 3476
      break;
      default: 
#line 3476
      tmp___143 = __builtin_expect(1L, 0L);
#line 3476
      if (tmp___143) {
#line 3476
        __assert_rtn((char const   *)"emit_transfer_init", (char const   *)"./jitter-Darwin-X86-64.c",
                     3476, (char const   *)"0");
      }
      }
#line 3476
      while (1) {
#line 3476
        if ((srcreg & 7L) == -1L) {
#line 3476
          while (1) {
#line 3476
            tmp___144 = jit->ip;
#line 3476
            (jit->ip) ++;
#line 3476
            *tmp___144 = (unsigned char )((((tinf->scrapreg & 0x7) & 0x07) << 3) | 4);
#line 3476
            break;
          }
#line 3476
          while (1) {
#line 3476
            tmp___145 = jit->ip;
#line 3476
            (jit->ip) ++;
#line 3476
            *tmp___145 = (unsigned char )((((tinf->counterreg & 0x7) & 0x07) << 3) | 5);
#line 3476
            break;
          }
#line 3476
          while (1) {
#line 3476
            imb___11.val = - block_size;
#line 3476
            tmp___146 = jit->ip;
#line 3476
            (jit->ip) ++;
#line 3476
            *tmp___146 = imb___11.b[0];
#line 3476
            tmp___147 = jit->ip;
#line 3476
            (jit->ip) ++;
#line 3476
            *tmp___147 = imb___11.b[1];
#line 3476
            tmp___148 = jit->ip;
#line 3476
            (jit->ip) ++;
#line 3476
            *tmp___148 = imb___11.b[2];
#line 3476
            tmp___149 = jit->ip;
#line 3476
            (jit->ip) ++;
#line 3476
            *tmp___149 = imb___11.b[3];
#line 3476
            break;
          }
        } else
#line 3476
        if (- block_size == 0) {
#line 3476
          if ((srcreg & 7L) != 5L) {
#line 3476
            while (1) {
#line 3476
              tmp___150 = jit->ip;
#line 3476
              (jit->ip) ++;
#line 3476
              *tmp___150 = (unsigned char )((((tinf->scrapreg & 0x7) & 0x07) << 3) | 4);
#line 3476
              break;
            }
#line 3476
            while (1) {
#line 3476
              tmp___151 = jit->ip;
#line 3476
              (jit->ip) ++;
#line 3476
              *tmp___151 = (unsigned char )((long )((((tinf->counterreg & 0x7) & 0x7) & 0x07) << 3) | (((srcreg & 7L) & 7L) & 7L));
#line 3476
              break;
            }
          } else {
#line 3476
            goto _L___9;
          }
        } else
        _L___9: /* CIL Label */ 
#line 3476
        if ((jit_value )(- block_size) >= -128L) {
#line 3476
          if ((jit_value )(- block_size) <= 127L) {
#line 3476
            while (1) {
#line 3476
              tmp___152 = jit->ip;
#line 3476
              (jit->ip) ++;
#line 3476
              *tmp___152 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3476
              break;
            }
#line 3476
            while (1) {
#line 3476
              tmp___153 = jit->ip;
#line 3476
              (jit->ip) ++;
#line 3476
              *tmp___153 = (unsigned char )((long )((((tinf->counterreg & 0x7) & 0x7) & 0x07) << 3) | (((srcreg & 7L) & 7L) & 7L));
#line 3476
              break;
            }
#line 3476
            while (1) {
#line 3476
              *(jit->ip) = (unsigned char )(- block_size & 0xff);
#line 3476
              (jit->ip) ++;
#line 3476
              break;
            }
          } else {
#line 3476
            goto _L___8;
          }
        } else {
          _L___8: /* CIL Label */ 
#line 3476
          while (1) {
#line 3476
            tmp___154 = jit->ip;
#line 3476
            (jit->ip) ++;
#line 3476
            *tmp___154 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3476
            break;
          }
#line 3476
          while (1) {
#line 3476
            tmp___155 = jit->ip;
#line 3476
            (jit->ip) ++;
#line 3476
            *tmp___155 = (unsigned char )((long )((((tinf->counterreg & 0x7) & 0x7) & 0x07) << 3) | (((srcreg & 7L) & 7L) & 7L));
#line 3476
            break;
          }
#line 3476
          while (1) {
#line 3476
            imb___12.val = - block_size;
#line 3476
            tmp___156 = jit->ip;
#line 3476
            (jit->ip) ++;
#line 3476
            *tmp___156 = imb___12.b[0];
#line 3476
            tmp___157 = jit->ip;
#line 3476
            (jit->ip) ++;
#line 3476
            *tmp___157 = imb___12.b[1];
#line 3476
            tmp___158 = jit->ip;
#line 3476
            (jit->ip) ++;
#line 3476
            *tmp___158 = imb___12.b[2];
#line 3476
            tmp___159 = jit->ip;
#line 3476
            (jit->ip) ++;
#line 3476
            *tmp___159 = imb___12.b[3];
#line 3476
            break;
          }
        }
#line 3476
        break;
      }
#line 3476
      break;
    }
  }
#line 3477
  return;
}
}
/* END FUNCTION-DEF emit_transfer_init LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_enable_optimization LOC=UNKNOWN */
void jit_enable_optimization(struct jit *jit , int opt ) 
{ 


  {
#line 6259
  jit->optimizations |= (unsigned int )opt;
#line 6260
  return;
}
}
/* END FUNCTION-DEF jit_enable_optimization LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_round LOC=UNKNOWN */
static void emit_sse_round(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *branch1 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___6 ;
  int offset ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  x86_imm_buf imb ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *branch2 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___16 ;
  int t ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char rex_correction ;
  unsigned char *pos ;
  int disp ;
  int size ;
  long tmp___23 ;
  long tmp___24 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  long tmp___29 ;
  unsigned char rex_correction___0 ;
  unsigned char *pos___0 ;
  int disp___0 ;
  int size___0 ;
  long tmp___30 ;
  long tmp___31 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  long tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___38 ;
  int tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___45 ;
  int tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;

  {
#line 1579
  while (1) {
#line 1579
    while (1) {
#line 1579
      tmp = jit->ip;
#line 1579
      (jit->ip) ++;
#line 1579
      *tmp = (unsigned char)102;
#line 1579
      while (1) {
#line 1579
        if (a2 > 7L) {
#line 1579
          tmp___0 = 4;
        } else {
#line 1579
          tmp___0 = 0;
        }
#line 1579
        if (a2 > 7L) {
#line 1579
          tmp___1 = 1;
        } else {
#line 1579
          tmp___1 = 0;
        }
#line 1579
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
#line 1579
        if ((int )_amd64_rex_bits != 0) {
#line 1579
          tmp___2 = jit->ip;
#line 1579
          (jit->ip) ++;
#line 1579
          *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
        }
#line 1579
        break;
      }
#line 1579
      tmp___3 = jit->ip;
#line 1579
      (jit->ip) ++;
#line 1579
      *tmp___3 = (unsigned char)15;
#line 1579
      tmp___4 = jit->ip;
#line 1579
      (jit->ip) ++;
#line 1579
      *tmp___4 = (unsigned char)198;
#line 1579
      while (1) {
#line 1579
        while (1) {
#line 1579
          tmp___5 = jit->ip;
#line 1579
          (jit->ip) ++;
#line 1579
          *tmp___5 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
#line 1579
          break;
        }
#line 1579
        break;
      }
#line 1579
      break;
    }
#line 1579
    while (1) {
#line 1579
      *(jit->ip) = (unsigned char)0;
#line 1579
      (jit->ip) ++;
#line 1579
      break;
    }
#line 1579
    break;
  }
#line 1581
  sse_alu_pd_reg_safeimm(jit, op, 47, (int )a2, (double *)(& x0));
#line 1583
  branch1 = jit->ip;
#line 1584
  while (1) {
#line 1584
    while (1) {
#line 1584
      _amd64_rex_bits___0 = (unsigned char)8;
#line 1584
      if ((int )_amd64_rex_bits___0 != 0) {
#line 1584
        tmp___6 = jit->ip;
#line 1584
        (jit->ip) ++;
#line 1584
        *tmp___6 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
      }
#line 1584
      break;
    }
#line 1584
    while (1) {
#line 1584
      offset = -2;
#line 1584
      if ((jit_value )offset >= -128L) {
#line 1584
        if ((jit_value )offset <= 127L) {
#line 1584
          while (1) {
#line 1584
            tmp___8 = jit->ip;
#line 1584
            (jit->ip) ++;
#line 1584
            *tmp___8 = (unsigned char )x86_cc_unsigned_map[2];
#line 1584
            while (1) {
#line 1584
              *(jit->ip) = (unsigned char )(offset & 0xff);
#line 1584
              (jit->ip) ++;
#line 1584
              break;
            }
#line 1584
            break;
          }
        } else {
#line 1584
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
#line 1584
        offset -= 4;
#line 1584
        while (1) {
#line 1584
          tmp___9 = jit->ip;
#line 1584
          (jit->ip) ++;
#line 1584
          *tmp___9 = (unsigned char)15;
#line 1584
          tmp___11 = jit->ip;
#line 1584
          (jit->ip) ++;
#line 1584
          *tmp___11 = (unsigned char )((int const   )x86_cc_unsigned_map[2] + 16);
#line 1584
          while (1) {
#line 1584
            imb.val = offset;
#line 1584
            tmp___12 = jit->ip;
#line 1584
            (jit->ip) ++;
#line 1584
            *tmp___12 = imb.b[0];
#line 1584
            tmp___13 = jit->ip;
#line 1584
            (jit->ip) ++;
#line 1584
            *tmp___13 = imb.b[1];
#line 1584
            tmp___14 = jit->ip;
#line 1584
            (jit->ip) ++;
#line 1584
            *tmp___14 = imb.b[2];
#line 1584
            tmp___15 = jit->ip;
#line 1584
            (jit->ip) ++;
#line 1584
            *tmp___15 = imb.b[3];
#line 1584
            break;
          }
#line 1584
          break;
        }
      }
#line 1584
      break;
    }
#line 1584
    break;
  }
#line 1586
  sse_alu_sd_reg_safeimm(jit, op, 88, (int )a2, (double *)(& x05));
#line 1588
  branch2 = jit->ip;
#line 1589
  while (1) {
#line 1589
    while (1) {
#line 1589
      _amd64_rex_bits___1 = (unsigned char)0;
#line 1589
      if ((int )_amd64_rex_bits___1 != 0) {
#line 1589
        tmp___16 = jit->ip;
#line 1589
        (jit->ip) ++;
#line 1589
        *tmp___16 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
      }
#line 1589
      break;
    }
#line 1589
    while (1) {
#line 1589
      t = -2;
#line 1589
      if ((jit_value )t >= -128L) {
#line 1589
        if ((jit_value )t <= 127L) {
#line 1589
          while (1) {
#line 1589
            tmp___17 = jit->ip;
#line 1589
            (jit->ip) ++;
#line 1589
            *tmp___17 = (unsigned char)235;
#line 1589
            while (1) {
#line 1589
              *(jit->ip) = (unsigned char )(t & 0xff);
#line 1589
              (jit->ip) ++;
#line 1589
              break;
            }
#line 1589
            break;
          }
        } else {
#line 1589
          goto _L___0;
        }
      } else {
        _L___0: /* CIL Label */ 
#line 1589
        t -= 3;
#line 1589
        while (1) {
#line 1589
          tmp___18 = jit->ip;
#line 1589
          (jit->ip) ++;
#line 1589
          *tmp___18 = (unsigned char)233;
#line 1589
          while (1) {
#line 1589
            imb___0.val = t;
#line 1589
            tmp___19 = jit->ip;
#line 1589
            (jit->ip) ++;
#line 1589
            *tmp___19 = imb___0.b[0];
#line 1589
            tmp___20 = jit->ip;
#line 1589
            (jit->ip) ++;
#line 1589
            *tmp___20 = imb___0.b[1];
#line 1589
            tmp___21 = jit->ip;
#line 1589
            (jit->ip) ++;
#line 1589
            *tmp___21 = imb___0.b[2];
#line 1589
            tmp___22 = jit->ip;
#line 1589
            (jit->ip) ++;
#line 1589
            *tmp___22 = imb___0.b[3];
#line 1589
            break;
          }
#line 1589
          break;
        }
      }
#line 1589
      break;
    }
#line 1589
    break;
  }
#line 1591
  while (1) {
#line 1591
    rex_correction = (unsigned char)0;
#line 1591
    if (((int )*branch1 & 0xf0) == 0x40) {
#line 1591
      rex_correction = (unsigned char )((int )rex_correction + 1);
    }
#line 1591
    pos = (branch1 + 1) + (int )rex_correction;
#line 1591
    size = 0;
#line 1591
    switch ((int )*(branch1 + (int )rex_correction)) {
    case 0xe9: 
    case 0xe8: 
#line 1591
    size ++;
#line 1591
    break;
    case 0x0f: 
#line 1591
    if ((int )*pos >= 0x70) {
#line 1591
      if (! ((int )*pos <= 0x8f)) {
#line 1591
        goto _L___1;
      }
    } else {
      _L___1: /* CIL Label */ 
#line 1591
      tmp___23 = __builtin_expect(1L, 0L);
#line 1591
      if (tmp___23) {
#line 1591
        __assert_rtn((char const   *)"emit_sse_round", (char const   *)"./jitter-Darwin-X86-64.c",
                     1591, (char const   *)"0");
      }
    }
#line 1591
    size ++;
#line 1591
    pos ++;
#line 1591
    break;
    case 0x7f: 
    case 0x7e: 
    case 0x7d: 
    case 0x7c: 
    case 0x7b: 
    case 0x7a: 
    case 0x79: 
    case 0x78: 
    case 0x77: 
    case 0x76: 
    case 0x75: 
    case 0x74: 
    case 0x73: 
    case 0x72: 
    case 0x71: 
    case 0x70: 
    case 0xeb: 
    case 0xe2: 
    case 0xe1: 
    case 0xe0: 
#line 1591
    break;
    default: 
#line 1591
    tmp___24 = __builtin_expect(1L, 0L);
#line 1591
    if (tmp___24) {
#line 1591
      __assert_rtn((char const   *)"emit_sse_round", (char const   *)"./jitter-Darwin-X86-64.c",
                   1591, (char const   *)"0");
    }
    }
#line 1591
    disp = (int )(jit->ip - pos);
#line 1591
    if (size) {
#line 1591
      while (1) {
#line 1591
        imb___1.val = disp - 4;
#line 1591
        tmp___25 = pos;
#line 1591
        pos ++;
#line 1591
        *tmp___25 = imb___1.b[0];
#line 1591
        tmp___26 = pos;
#line 1591
        pos ++;
#line 1591
        *tmp___26 = imb___1.b[1];
#line 1591
        tmp___27 = pos;
#line 1591
        pos ++;
#line 1591
        *tmp___27 = imb___1.b[2];
#line 1591
        tmp___28 = pos;
#line 1591
        pos ++;
#line 1591
        *tmp___28 = imb___1.b[3];
#line 1591
        break;
      }
    } else
#line 1591
    if ((jit_value )(disp - 1) >= -128L) {
#line 1591
      if ((jit_value )(disp - 1) <= 127L) {
#line 1591
        while (1) {
#line 1591
          *pos = (unsigned char )((disp - 1) & 0xff);
#line 1591
          pos ++;
#line 1591
          break;
        }
      } else {
#line 1591
        goto _L___2;
      }
    } else {
      _L___2: /* CIL Label */ 
#line 1591
      tmp___29 = __builtin_expect(1L, 0L);
#line 1591
      if (tmp___29) {
#line 1591
        __assert_rtn((char const   *)"emit_sse_round", (char const   *)"./jitter-Darwin-X86-64.c",
                     1591, (char const   *)"0");
      }
    }
#line 1591
    break;
  }
#line 1593
  sse_alu_sd_reg_safeimm(jit, op, 92, (int )a2, (double *)(& x05));
#line 1594
  while (1) {
#line 1594
    rex_correction___0 = (unsigned char)0;
#line 1594
    if (((int )*branch2 & 0xf0) == 0x40) {
#line 1594
      rex_correction___0 = (unsigned char )((int )rex_correction___0 + 1);
    }
#line 1594
    pos___0 = (branch2 + 1) + (int )rex_correction___0;
#line 1594
    size___0 = 0;
#line 1594
    switch ((int )*(branch2 + (int )rex_correction___0)) {
    case 0xe9: 
    case 0xe8: 
#line 1594
    size___0 ++;
#line 1594
    break;
    case 0x0f: 
#line 1594
    if ((int )*pos___0 >= 0x70) {
#line 1594
      if (! ((int )*pos___0 <= 0x8f)) {
#line 1594
        goto _L___3;
      }
    } else {
      _L___3: /* CIL Label */ 
#line 1594
      tmp___30 = __builtin_expect(1L, 0L);
#line 1594
      if (tmp___30) {
#line 1594
        __assert_rtn((char const   *)"emit_sse_round", (char const   *)"./jitter-Darwin-X86-64.c",
                     1594, (char const   *)"0");
      }
    }
#line 1594
    size___0 ++;
#line 1594
    pos___0 ++;
#line 1594
    break;
    case 0x7f: 
    case 0x7e: 
    case 0x7d: 
    case 0x7c: 
    case 0x7b: 
    case 0x7a: 
    case 0x79: 
    case 0x78: 
    case 0x77: 
    case 0x76: 
    case 0x75: 
    case 0x74: 
    case 0x73: 
    case 0x72: 
    case 0x71: 
    case 0x70: 
    case 0xeb: 
    case 0xe2: 
    case 0xe1: 
    case 0xe0: 
#line 1594
    break;
    default: 
#line 1594
    tmp___31 = __builtin_expect(1L, 0L);
#line 1594
    if (tmp___31) {
#line 1594
      __assert_rtn((char const   *)"emit_sse_round", (char const   *)"./jitter-Darwin-X86-64.c",
                   1594, (char const   *)"0");
    }
    }
#line 1594
    disp___0 = (int )(jit->ip - pos___0);
#line 1594
    if (size___0) {
#line 1594
      while (1) {
#line 1594
        imb___2.val = disp___0 - 4;
#line 1594
        tmp___32 = pos___0;
#line 1594
        pos___0 ++;
#line 1594
        *tmp___32 = imb___2.b[0];
#line 1594
        tmp___33 = pos___0;
#line 1594
        pos___0 ++;
#line 1594
        *tmp___33 = imb___2.b[1];
#line 1594
        tmp___34 = pos___0;
#line 1594
        pos___0 ++;
#line 1594
        *tmp___34 = imb___2.b[2];
#line 1594
        tmp___35 = pos___0;
#line 1594
        pos___0 ++;
#line 1594
        *tmp___35 = imb___2.b[3];
#line 1594
        break;
      }
    } else
#line 1594
    if ((jit_value )(disp___0 - 1) >= -128L) {
#line 1594
      if ((jit_value )(disp___0 - 1) <= 127L) {
#line 1594
        while (1) {
#line 1594
          *pos___0 = (unsigned char )((disp___0 - 1) & 0xff);
#line 1594
          pos___0 ++;
#line 1594
          break;
        }
      } else {
#line 1594
        goto _L___4;
      }
    } else {
      _L___4: /* CIL Label */ 
#line 1594
      tmp___36 = __builtin_expect(1L, 0L);
#line 1594
      if (tmp___36) {
#line 1594
        __assert_rtn((char const   *)"emit_sse_round", (char const   *)"./jitter-Darwin-X86-64.c",
                     1594, (char const   *)"0");
      }
    }
#line 1594
    break;
  }
#line 1596
  while (1) {
#line 1596
    tmp___37 = jit->ip;
#line 1596
    (jit->ip) ++;
#line 1596
    *tmp___37 = (unsigned char)242;
#line 1596
    while (1) {
#line 1596
      if (a1 > 7L) {
#line 1596
        tmp___38 = 4;
      } else {
#line 1596
        tmp___38 = 0;
      }
#line 1596
      if (a2 > 7L) {
#line 1596
        tmp___39 = 1;
      } else {
#line 1596
        tmp___39 = 0;
      }
#line 1596
      _amd64_rex_bits___2 = (unsigned char )((8 | tmp___38) | tmp___39);
#line 1596
      if ((int )_amd64_rex_bits___2 != 0) {
#line 1596
        tmp___40 = jit->ip;
#line 1596
        (jit->ip) ++;
#line 1596
        *tmp___40 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
      }
#line 1596
      break;
    }
#line 1596
    tmp___41 = jit->ip;
#line 1596
    (jit->ip) ++;
#line 1596
    *tmp___41 = (unsigned char)15;
#line 1596
    tmp___42 = jit->ip;
#line 1596
    (jit->ip) ++;
#line 1596
    *tmp___42 = (unsigned char)44;
#line 1596
    while (1) {
#line 1596
      while (1) {
#line 1596
        tmp___43 = jit->ip;
#line 1596
        (jit->ip) ++;
#line 1596
        *tmp___43 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
#line 1596
        break;
      }
#line 1596
      break;
    }
#line 1596
    break;
  }
#line 1599
  while (1) {
#line 1599
    while (1) {
#line 1599
      tmp___44 = jit->ip;
#line 1599
      (jit->ip) ++;
#line 1599
      *tmp___44 = (unsigned char)102;
#line 1599
      while (1) {
#line 1599
        if (a2 > 7L) {
#line 1599
          tmp___45 = 4;
        } else {
#line 1599
          tmp___45 = 0;
        }
#line 1599
        if (a2 > 7L) {
#line 1599
          tmp___46 = 1;
        } else {
#line 1599
          tmp___46 = 0;
        }
#line 1599
        _amd64_rex_bits___3 = (unsigned char )(tmp___45 | tmp___46);
#line 1599
        if ((int )_amd64_rex_bits___3 != 0) {
#line 1599
          tmp___47 = jit->ip;
#line 1599
          (jit->ip) ++;
#line 1599
          *tmp___47 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
        }
#line 1599
        break;
      }
#line 1599
      tmp___48 = jit->ip;
#line 1599
      (jit->ip) ++;
#line 1599
      *tmp___48 = (unsigned char)15;
#line 1599
      tmp___49 = jit->ip;
#line 1599
      (jit->ip) ++;
#line 1599
      *tmp___49 = (unsigned char)198;
#line 1599
      while (1) {
#line 1599
        while (1) {
#line 1599
          tmp___50 = jit->ip;
#line 1599
          (jit->ip) ++;
#line 1599
          *tmp___50 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
#line 1599
          break;
        }
#line 1599
        break;
      }
#line 1599
      break;
    }
#line 1599
    while (1) {
#line 1599
      *(jit->ip) = (unsigned char)1;
#line 1599
      (jit->ip) ++;
#line 1599
      break;
    }
#line 1599
    break;
  }
#line 1600
  return;
}
}
/* END FUNCTION-DEF emit_sse_round LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_set_add LOC=UNKNOWN */
__inline static void jit_set_add(jit_set *s , int value ) 
{ 


  {
#line 622
  s->root = jit_tree_insert(s->root, (jit_tree_key )value, (void *)1, (int *)((void *)0));
#line 623
  return;
}
}
/* END FUNCTION-DEF jit_set_add LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_regs_active_count LOC=UNKNOWN */
int jit_regs_active_count(jit_op *op ) 
{ 
  int tmp ;

  {
#line 6281
  tmp = jit_set_size(op->live_out);
#line 6281
  return (tmp);
}
}
/* END FUNCTION-DEF jit_regs_active_count LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_memset LOC=UNKNOWN */
static void emit_memset(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                        jit_value a3 , int block_size ) 
{ 
  jit_hw_reg *counter ;
  jit_hw_reg *tmp ;
  int counterreg ;
  int i ;
  jit_hw_reg *r ;
  int counter_in_use ;
  int tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  long tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  jit_value loop ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  x86_imm_buf imb ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  int tmp___91 ;
  int tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___94 ;
  int tmp___95 ;
  int tmp___96 ;
  int tmp___97 ;
  unsigned char *tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  long tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  unsigned char *tmp___116 ;
  unsigned char *tmp___117 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___118 ;
  unsigned char *tmp___119 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  unsigned char _amd64_rex_bits___7 ;
  unsigned char *tmp___122 ;
  unsigned char *tmp___123 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___124 ;
  unsigned char *tmp___125 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___128 ;
  unsigned char *tmp___129 ;
  unsigned char *tmp___130 ;
  unsigned char *tmp___131 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___132 ;
  unsigned char *tmp___133 ;
  unsigned char *tmp___134 ;
  unsigned char *tmp___135 ;
  unsigned char _amd64_rex_bits___9 ;
  unsigned char *tmp___136 ;
  int offset ;
  unsigned char *tmp___137 ;
  unsigned char *tmp___138 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  unsigned char *tmp___141 ;
  x86_imm_buf imb___10 ;
  unsigned char *tmp___142 ;
  unsigned char *tmp___143 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  unsigned char _amd64_rex_bits___10 ;
  int tmp___146 ;
  unsigned char *tmp___147 ;
  unsigned char *tmp___148 ;

  {
#line 3523
  tmp = jit_get_unused_reg_with_index(jit->reg_al, op, 0, 0);
#line 3523
  counter = tmp;
#line 3524
  counterreg = 0;
#line 3525
  if (counter) {
#line 3525
    counterreg = counter->id;
  } else {
#line 3528
    i = 0;
#line 3528
    while (i < (jit->reg_al)->gp_reg_cnt) {
#line 3529
      r = (jit->reg_al)->gp_regs + i;
#line 3530
      if ((jit_value )r->id != a1) {
#line 3530
        if ((jit_value )r->id != a2) {
#line 3530
          if (! ((int )op->code & 0x02)) {
#line 3530
            if ((jit_value )r->id != a3) {
#line 3531
              counterreg = r->id;
#line 3532
              break;
            }
          }
        }
      }
#line 3528
      i ++;
    }
  }
#line 3537
  tmp___0 = jit_reg_in_use(op, counterreg, 0);
#line 3537
  counter_in_use = tmp___0;
#line 3538
  if (counter_in_use) {
#line 3538
    while (1) {
#line 3538
      while (1) {
#line 3538
        if (counterreg > 7) {
#line 3538
          tmp___1 = 1;
        } else {
#line 3538
          tmp___1 = 0;
        }
#line 3538
        _amd64_rex_bits = (unsigned char )tmp___1;
#line 3538
        if ((int )_amd64_rex_bits != 0) {
#line 3538
          tmp___2 = jit->ip;
#line 3538
          (jit->ip) ++;
#line 3538
          *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
        }
#line 3538
        break;
      }
#line 3538
      tmp___3 = jit->ip;
#line 3538
      (jit->ip) ++;
#line 3538
      *tmp___3 = (unsigned char )(80 + (counterreg & 0x7));
#line 3538
      break;
    }
  }
#line 3539
  while (1) {
#line 3539
    if ((int )sizeof(void *) == 2) {
#line 3539
      tmp___4 = jit->ip;
#line 3539
      (jit->ip) ++;
#line 3539
      *tmp___4 = (unsigned char)102;
    }
#line 3539
    while (1) {
#line 3539
      if ((int )sizeof(void *) > 4) {
#line 3539
        tmp___5 = 8;
      } else {
#line 3539
        tmp___5 = 0;
      }
#line 3539
      if (counterreg > 7) {
#line 3539
        tmp___6 = 4;
      } else {
#line 3539
        tmp___6 = 0;
      }
#line 3539
      if (a2 > 7L) {
#line 3539
        tmp___7 = 1;
      } else {
#line 3539
        tmp___7 = 0;
      }
#line 3539
      _amd64_rex_bits___0 = (unsigned char )((tmp___5 | tmp___6) | tmp___7);
#line 3539
      if ((int )_amd64_rex_bits___0 != 0) {
#line 3539
        tmp___8 = jit->ip;
#line 3539
        (jit->ip) ++;
#line 3539
        *tmp___8 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
      } else
#line 3539
      if ((int )sizeof(void *) == 1) {
#line 3539
        tmp___8 = jit->ip;
#line 3539
        (jit->ip) ++;
#line 3539
        *tmp___8 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
      }
#line 3539
      break;
    }
#line 3539
    switch ((int )sizeof(void *)) {
    case 1: 
#line 3539
    tmp___9 = jit->ip;
#line 3539
    (jit->ip) ++;
#line 3539
    *tmp___9 = (unsigned char)138;
#line 3539
    break;
    case 8: 
    case 4: 
    case 2: 
#line 3539
    tmp___10 = jit->ip;
#line 3539
    (jit->ip) ++;
#line 3539
    *tmp___10 = (unsigned char)139;
#line 3539
    break;
    default: 
#line 3539
    tmp___11 = __builtin_expect(1L, 0L);
#line 3539
    if (tmp___11) {
#line 3539
      __assert_rtn((char const   *)"emit_memset", (char const   *)"./jitter-Darwin-X86-64.c",
                   3539, (char const   *)"0");
    }
    }
#line 3539
    while (1) {
#line 3539
      while (1) {
#line 3539
        tmp___12 = jit->ip;
#line 3539
        (jit->ip) ++;
#line 3539
        *tmp___12 = (unsigned char )((long )((3 << 6) | ((counterreg & 0x07) << 3)) | (a2 & 7L));
#line 3539
        break;
      }
#line 3539
      break;
    }
#line 3539
    break;
  }
#line 3540
  if (block_size == 2) {
#line 3540
    while (1) {
#line 3540
      while (1) {
#line 3540
        if (counterreg > 7) {
#line 3540
          tmp___13 = 1;
        } else {
#line 3540
          tmp___13 = 0;
        }
#line 3540
        _amd64_rex_bits___1 = (unsigned char )(8 | tmp___13);
#line 3540
        if ((int )_amd64_rex_bits___1 != 0) {
#line 3540
          tmp___14 = jit->ip;
#line 3540
          (jit->ip) ++;
#line 3540
          *tmp___14 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
        }
#line 3540
        break;
      }
#line 3540
      while (1) {
#line 3540
        tmp___15 = jit->ip;
#line 3540
        (jit->ip) ++;
#line 3540
        *tmp___15 = (unsigned char)209;
#line 3540
        while (1) {
#line 3540
          while (1) {
#line 3540
            tmp___16 = jit->ip;
#line 3540
            (jit->ip) ++;
#line 3540
            *tmp___16 = (unsigned char )(((3 << 6) | (4 << 3)) | ((counterreg & 0x7) & 0x07));
#line 3540
            break;
          }
#line 3540
          break;
        }
#line 3540
        break;
      }
#line 3540
      break;
    }
  }
#line 3541
  if (block_size == 4) {
#line 3541
    while (1) {
#line 3541
      while (1) {
#line 3541
        if (counterreg > 7) {
#line 3541
          tmp___19 = 1;
        } else {
#line 3541
          tmp___19 = 0;
        }
#line 3541
        _amd64_rex_bits___2 = (unsigned char )(8 | tmp___19);
#line 3541
        if ((int )_amd64_rex_bits___2 != 0) {
#line 3541
          tmp___20 = jit->ip;
#line 3541
          (jit->ip) ++;
#line 3541
          *tmp___20 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
        }
#line 3541
        break;
      }
#line 3541
      while (1) {
#line 3541
        tmp___23 = jit->ip;
#line 3541
        (jit->ip) ++;
#line 3541
        *tmp___23 = (unsigned char)193;
#line 3541
        while (1) {
#line 3541
          while (1) {
#line 3541
            tmp___24 = jit->ip;
#line 3541
            (jit->ip) ++;
#line 3541
            *tmp___24 = (unsigned char )(((3 << 6) | (4 << 3)) | ((counterreg & 0x7) & 0x07));
#line 3541
            break;
          }
#line 3541
          break;
        }
#line 3541
        while (1) {
#line 3541
          *(jit->ip) = (unsigned char)2;
#line 3541
          (jit->ip) ++;
#line 3541
          break;
        }
#line 3541
        break;
      }
#line 3541
      break;
    }
  }
#line 3542
  if (block_size == 8) {
#line 3542
    while (1) {
#line 3542
      while (1) {
#line 3542
        if (counterreg > 7) {
#line 3542
          tmp___25 = 1;
        } else {
#line 3542
          tmp___25 = 0;
        }
#line 3542
        _amd64_rex_bits___3 = (unsigned char )(8 | tmp___25);
#line 3542
        if ((int )_amd64_rex_bits___3 != 0) {
#line 3542
          tmp___26 = jit->ip;
#line 3542
          (jit->ip) ++;
#line 3542
          *tmp___26 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
        }
#line 3542
        break;
      }
#line 3542
      while (1) {
#line 3542
        tmp___29 = jit->ip;
#line 3542
        (jit->ip) ++;
#line 3542
        *tmp___29 = (unsigned char)193;
#line 3542
        while (1) {
#line 3542
          while (1) {
#line 3542
            tmp___30 = jit->ip;
#line 3542
            (jit->ip) ++;
#line 3542
            *tmp___30 = (unsigned char )(((3 << 6) | (4 << 3)) | ((counterreg & 0x7) & 0x07));
#line 3542
            break;
          }
#line 3542
          break;
        }
#line 3542
        while (1) {
#line 3542
          *(jit->ip) = (unsigned char)3;
#line 3542
          (jit->ip) ++;
#line 3542
          break;
        }
#line 3542
        break;
      }
#line 3542
      break;
    }
  }
#line 3545
  loop = (jit_value )jit->ip;
#line 3546
  if ((int )op->code & 0x02) {
#line 3547
    while (1) {
#line 3547
      while (1) {
#line 3547
        if (block_size > 4) {
#line 3547
          tmp___31 = 8;
        } else {
#line 3547
          tmp___31 = 0;
        }
#line 3547
        if (counterreg > 7) {
#line 3547
          tmp___32 = 2;
        } else {
#line 3547
          tmp___32 = 0;
        }
#line 3547
        if (a1 > 7L) {
#line 3547
          tmp___33 = 1;
        } else {
#line 3547
          tmp___33 = 0;
        }
#line 3547
        _amd64_rex_bits___4 = (unsigned char )((tmp___31 | tmp___32) | tmp___33);
#line 3547
        if ((int )_amd64_rex_bits___4 != 0) {
#line 3547
          tmp___34 = jit->ip;
#line 3547
          (jit->ip) ++;
#line 3547
          *tmp___34 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
        } else
#line 3547
        if (block_size == 1) {
#line 3547
          tmp___34 = jit->ip;
#line 3547
          (jit->ip) ++;
#line 3547
          *tmp___34 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
        }
#line 3547
        break;
      }
#line 3547
      while (1) {
#line 3547
        if (block_size == 8) {
#line 3547
          tmp___92 = 4;
        } else {
#line 3547
          tmp___92 = block_size;
        }
#line 3547
        if (tmp___92 == 1) {
#line 3547
          tmp___35 = jit->ip;
#line 3547
          (jit->ip) ++;
#line 3547
          *tmp___35 = (unsigned char)198;
#line 3547
          while (1) {
#line 3547
            if ((a1 & 7L) == -1L) {
#line 3547
              while (1) {
#line 3547
                tmp___36 = jit->ip;
#line 3547
                (jit->ip) ++;
#line 3547
                *tmp___36 = (unsigned char)4;
#line 3547
                break;
              }
#line 3547
              while (1) {
#line 3547
                tmp___37 = jit->ip;
#line 3547
                (jit->ip) ++;
#line 3547
                *tmp___37 = (unsigned char )((((counterreg & 0x7) & 0x07) << 3) | 5);
#line 3547
                break;
              }
#line 3547
              while (1) {
#line 3547
                imb.val = - block_size;
#line 3547
                tmp___38 = jit->ip;
#line 3547
                (jit->ip) ++;
#line 3547
                *tmp___38 = imb.b[0];
#line 3547
                tmp___39 = jit->ip;
#line 3547
                (jit->ip) ++;
#line 3547
                *tmp___39 = imb.b[1];
#line 3547
                tmp___40 = jit->ip;
#line 3547
                (jit->ip) ++;
#line 3547
                *tmp___40 = imb.b[2];
#line 3547
                tmp___41 = jit->ip;
#line 3547
                (jit->ip) ++;
#line 3547
                *tmp___41 = imb.b[3];
#line 3547
                break;
              }
            } else
#line 3547
            if (- block_size == 0) {
#line 3547
              if ((a1 & 7L) != 5L) {
#line 3547
                while (1) {
#line 3547
                  tmp___42 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___42 = (unsigned char)4;
#line 3547
                  break;
                }
#line 3547
                while (1) {
#line 3547
                  tmp___43 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___43 = (unsigned char )((long )((((counterreg & 0x7) & 0x7) & 0x07) << 3) | (((a1 & 7L) & 7L) & 7L));
#line 3547
                  break;
                }
              } else {
#line 3547
                goto _L___0;
              }
            } else
            _L___0: /* CIL Label */ 
#line 3547
            if ((jit_value )(- block_size) >= -128L) {
#line 3547
              if ((jit_value )(- block_size) <= 127L) {
#line 3547
                while (1) {
#line 3547
                  tmp___44 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___44 = (unsigned char )((1 << 6) | 4);
#line 3547
                  break;
                }
#line 3547
                while (1) {
#line 3547
                  tmp___45 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___45 = (unsigned char )((long )((((counterreg & 0x7) & 0x7) & 0x07) << 3) | (((a1 & 7L) & 7L) & 7L));
#line 3547
                  break;
                }
#line 3547
                while (1) {
#line 3547
                  *(jit->ip) = (unsigned char )(- block_size & 0xff);
#line 3547
                  (jit->ip) ++;
#line 3547
                  break;
                }
              } else {
#line 3547
                goto _L;
              }
            } else {
              _L: /* CIL Label */ 
#line 3547
              while (1) {
#line 3547
                tmp___46 = jit->ip;
#line 3547
                (jit->ip) ++;
#line 3547
                *tmp___46 = (unsigned char )((2 << 6) | 4);
#line 3547
                break;
              }
#line 3547
              while (1) {
#line 3547
                tmp___47 = jit->ip;
#line 3547
                (jit->ip) ++;
#line 3547
                *tmp___47 = (unsigned char )((long )((((counterreg & 0x7) & 0x7) & 0x07) << 3) | (((a1 & 7L) & 7L) & 7L));
#line 3547
                break;
              }
#line 3547
              while (1) {
#line 3547
                imb___0.val = - block_size;
#line 3547
                tmp___48 = jit->ip;
#line 3547
                (jit->ip) ++;
#line 3547
                *tmp___48 = imb___0.b[0];
#line 3547
                tmp___49 = jit->ip;
#line 3547
                (jit->ip) ++;
#line 3547
                *tmp___49 = imb___0.b[1];
#line 3547
                tmp___50 = jit->ip;
#line 3547
                (jit->ip) ++;
#line 3547
                *tmp___50 = imb___0.b[2];
#line 3547
                tmp___51 = jit->ip;
#line 3547
                (jit->ip) ++;
#line 3547
                *tmp___51 = imb___0.b[3];
#line 3547
                break;
              }
            }
#line 3547
            break;
          }
#line 3547
          while (1) {
#line 3547
            *(jit->ip) = (unsigned char )(a3 & 255L);
#line 3547
            (jit->ip) ++;
#line 3547
            break;
          }
        } else {
#line 3547
          if (block_size == 8) {
#line 3547
            tmp___91 = 4;
          } else {
#line 3547
            tmp___91 = block_size;
          }
#line 3547
          if (tmp___91 == 2) {
#line 3547
            tmp___52 = jit->ip;
#line 3547
            (jit->ip) ++;
#line 3547
            *tmp___52 = (unsigned char)102;
#line 3547
            tmp___53 = jit->ip;
#line 3547
            (jit->ip) ++;
#line 3547
            *tmp___53 = (unsigned char)199;
#line 3547
            while (1) {
#line 3547
              if ((a1 & 7L) == -1L) {
#line 3547
                while (1) {
#line 3547
                  tmp___54 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___54 = (unsigned char)4;
#line 3547
                  break;
                }
#line 3547
                while (1) {
#line 3547
                  tmp___55 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___55 = (unsigned char )((((counterreg & 0x7) & 0x07) << 3) | 5);
#line 3547
                  break;
                }
#line 3547
                while (1) {
#line 3547
                  imb___1.val = - block_size;
#line 3547
                  tmp___56 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___56 = imb___1.b[0];
#line 3547
                  tmp___57 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___57 = imb___1.b[1];
#line 3547
                  tmp___58 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___58 = imb___1.b[2];
#line 3547
                  tmp___59 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___59 = imb___1.b[3];
#line 3547
                  break;
                }
              } else
#line 3547
              if (- block_size == 0) {
#line 3547
                if ((a1 & 7L) != 5L) {
#line 3547
                  while (1) {
#line 3547
                    tmp___60 = jit->ip;
#line 3547
                    (jit->ip) ++;
#line 3547
                    *tmp___60 = (unsigned char)4;
#line 3547
                    break;
                  }
#line 3547
                  while (1) {
#line 3547
                    tmp___61 = jit->ip;
#line 3547
                    (jit->ip) ++;
#line 3547
                    *tmp___61 = (unsigned char )((long )((((counterreg & 0x7) & 0x7) & 0x07) << 3) | (((a1 & 7L) & 7L) & 7L));
#line 3547
                    break;
                  }
                } else {
#line 3547
                  goto _L___2;
                }
              } else
              _L___2: /* CIL Label */ 
#line 3547
              if ((jit_value )(- block_size) >= -128L) {
#line 3547
                if ((jit_value )(- block_size) <= 127L) {
#line 3547
                  while (1) {
#line 3547
                    tmp___62 = jit->ip;
#line 3547
                    (jit->ip) ++;
#line 3547
                    *tmp___62 = (unsigned char )((1 << 6) | 4);
#line 3547
                    break;
                  }
#line 3547
                  while (1) {
#line 3547
                    tmp___63 = jit->ip;
#line 3547
                    (jit->ip) ++;
#line 3547
                    *tmp___63 = (unsigned char )((long )((((counterreg & 0x7) & 0x7) & 0x07) << 3) | (((a1 & 7L) & 7L) & 7L));
#line 3547
                    break;
                  }
#line 3547
                  while (1) {
#line 3547
                    *(jit->ip) = (unsigned char )(- block_size & 0xff);
#line 3547
                    (jit->ip) ++;
#line 3547
                    break;
                  }
                } else {
#line 3547
                  goto _L___1;
                }
              } else {
                _L___1: /* CIL Label */ 
#line 3547
                while (1) {
#line 3547
                  tmp___64 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___64 = (unsigned char )((2 << 6) | 4);
#line 3547
                  break;
                }
#line 3547
                while (1) {
#line 3547
                  tmp___65 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___65 = (unsigned char )((long )((((counterreg & 0x7) & 0x7) & 0x07) << 3) | (((a1 & 7L) & 7L) & 7L));
#line 3547
                  break;
                }
#line 3547
                while (1) {
#line 3547
                  imb___2.val = - block_size;
#line 3547
                  tmp___66 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___66 = imb___2.b[0];
#line 3547
                  tmp___67 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___67 = imb___2.b[1];
#line 3547
                  tmp___68 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___68 = imb___2.b[2];
#line 3547
                  tmp___69 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___69 = imb___2.b[3];
#line 3547
                  break;
                }
              }
#line 3547
              break;
            }
#line 3547
            while (1) {
#line 3547
              *((short *)jit->ip) = (short )a3;
#line 3547
              jit->ip += 2;
#line 3547
              break;
            }
          } else {
#line 3547
            tmp___70 = jit->ip;
#line 3547
            (jit->ip) ++;
#line 3547
            *tmp___70 = (unsigned char)199;
#line 3547
            while (1) {
#line 3547
              if ((a1 & 7L) == -1L) {
#line 3547
                while (1) {
#line 3547
                  tmp___71 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___71 = (unsigned char)4;
#line 3547
                  break;
                }
#line 3547
                while (1) {
#line 3547
                  tmp___72 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___72 = (unsigned char )((((counterreg & 0x7) & 0x07) << 3) | 5);
#line 3547
                  break;
                }
#line 3547
                while (1) {
#line 3547
                  imb___3.val = - block_size;
#line 3547
                  tmp___73 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___73 = imb___3.b[0];
#line 3547
                  tmp___74 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___74 = imb___3.b[1];
#line 3547
                  tmp___75 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___75 = imb___3.b[2];
#line 3547
                  tmp___76 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___76 = imb___3.b[3];
#line 3547
                  break;
                }
              } else
#line 3547
              if (- block_size == 0) {
#line 3547
                if ((a1 & 7L) != 5L) {
#line 3547
                  while (1) {
#line 3547
                    tmp___77 = jit->ip;
#line 3547
                    (jit->ip) ++;
#line 3547
                    *tmp___77 = (unsigned char)4;
#line 3547
                    break;
                  }
#line 3547
                  while (1) {
#line 3547
                    tmp___78 = jit->ip;
#line 3547
                    (jit->ip) ++;
#line 3547
                    *tmp___78 = (unsigned char )((long )((((counterreg & 0x7) & 0x7) & 0x07) << 3) | (((a1 & 7L) & 7L) & 7L));
#line 3547
                    break;
                  }
                } else {
#line 3547
                  goto _L___4;
                }
              } else
              _L___4: /* CIL Label */ 
#line 3547
              if ((jit_value )(- block_size) >= -128L) {
#line 3547
                if ((jit_value )(- block_size) <= 127L) {
#line 3547
                  while (1) {
#line 3547
                    tmp___79 = jit->ip;
#line 3547
                    (jit->ip) ++;
#line 3547
                    *tmp___79 = (unsigned char )((1 << 6) | 4);
#line 3547
                    break;
                  }
#line 3547
                  while (1) {
#line 3547
                    tmp___80 = jit->ip;
#line 3547
                    (jit->ip) ++;
#line 3547
                    *tmp___80 = (unsigned char )((long )((((counterreg & 0x7) & 0x7) & 0x07) << 3) | (((a1 & 7L) & 7L) & 7L));
#line 3547
                    break;
                  }
#line 3547
                  while (1) {
#line 3547
                    *(jit->ip) = (unsigned char )(- block_size & 0xff);
#line 3547
                    (jit->ip) ++;
#line 3547
                    break;
                  }
                } else {
#line 3547
                  goto _L___3;
                }
              } else {
                _L___3: /* CIL Label */ 
#line 3547
                while (1) {
#line 3547
                  tmp___81 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___81 = (unsigned char )((2 << 6) | 4);
#line 3547
                  break;
                }
#line 3547
                while (1) {
#line 3547
                  tmp___82 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___82 = (unsigned char )((long )((((counterreg & 0x7) & 0x7) & 0x07) << 3) | (((a1 & 7L) & 7L) & 7L));
#line 3547
                  break;
                }
#line 3547
                while (1) {
#line 3547
                  imb___4.val = - block_size;
#line 3547
                  tmp___83 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___83 = imb___4.b[0];
#line 3547
                  tmp___84 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___84 = imb___4.b[1];
#line 3547
                  tmp___85 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___85 = imb___4.b[2];
#line 3547
                  tmp___86 = jit->ip;
#line 3547
                  (jit->ip) ++;
#line 3547
                  *tmp___86 = imb___4.b[3];
#line 3547
                  break;
                }
              }
#line 3547
              break;
            }
#line 3547
            while (1) {
#line 3547
              imb___5.val = (int )a3;
#line 3547
              tmp___87 = jit->ip;
#line 3547
              (jit->ip) ++;
#line 3547
              *tmp___87 = imb___5.b[0];
#line 3547
              tmp___88 = jit->ip;
#line 3547
              (jit->ip) ++;
#line 3547
              *tmp___88 = imb___5.b[1];
#line 3547
              tmp___89 = jit->ip;
#line 3547
              (jit->ip) ++;
#line 3547
              *tmp___89 = imb___5.b[2];
#line 3547
              tmp___90 = jit->ip;
#line 3547
              (jit->ip) ++;
#line 3547
              *tmp___90 = imb___5.b[3];
#line 3547
              break;
            }
          }
        }
#line 3547
        break;
      }
#line 3547
      break;
    }
  } else {
#line 3549
    while (1) {
#line 3549
      if (block_size == 2) {
#line 3549
        tmp___93 = jit->ip;
#line 3549
        (jit->ip) ++;
#line 3549
        *tmp___93 = (unsigned char)102;
      }
#line 3549
      while (1) {
#line 3549
        if (block_size > 4) {
#line 3549
          tmp___94 = 8;
        } else {
#line 3549
          tmp___94 = 0;
        }
#line 3549
        if (a3 > 7L) {
#line 3549
          tmp___95 = 4;
        } else {
#line 3549
          tmp___95 = 0;
        }
#line 3549
        if (counterreg > 7) {
#line 3549
          tmp___96 = 2;
        } else {
#line 3549
          tmp___96 = 0;
        }
#line 3549
        if (a1 > 7L) {
#line 3549
          tmp___97 = 1;
        } else {
#line 3549
          tmp___97 = 0;
        }
#line 3549
        _amd64_rex_bits___5 = (unsigned char )(((tmp___94 | tmp___95) | tmp___96) | tmp___97);
#line 3549
        if ((int )_amd64_rex_bits___5 != 0) {
#line 3549
          tmp___98 = jit->ip;
#line 3549
          (jit->ip) ++;
#line 3549
          *tmp___98 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
        } else
#line 3549
        if (block_size == 1) {
#line 3549
          tmp___98 = jit->ip;
#line 3549
          (jit->ip) ++;
#line 3549
          *tmp___98 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
        }
#line 3549
        break;
      }
#line 3549
      switch (block_size) {
      case 1: 
#line 3549
      tmp___99 = jit->ip;
#line 3549
      (jit->ip) ++;
#line 3549
      *tmp___99 = (unsigned char)136;
#line 3549
      break;
      case 8: 
      case 4: 
      case 2: 
#line 3549
      tmp___100 = jit->ip;
#line 3549
      (jit->ip) ++;
#line 3549
      *tmp___100 = (unsigned char)137;
#line 3549
      break;
      default: 
#line 3549
      tmp___101 = __builtin_expect(1L, 0L);
#line 3549
      if (tmp___101) {
#line 3549
        __assert_rtn((char const   *)"emit_memset", (char const   *)"./jitter-Darwin-X86-64.c",
                     3549, (char const   *)"0");
      }
      }
#line 3549
      while (1) {
#line 3549
        if ((a1 & 7L) == -1L) {
#line 3549
          while (1) {
#line 3549
            tmp___102 = jit->ip;
#line 3549
            (jit->ip) ++;
#line 3549
            *tmp___102 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 4L);
#line 3549
            break;
          }
#line 3549
          while (1) {
#line 3549
            tmp___103 = jit->ip;
#line 3549
            (jit->ip) ++;
#line 3549
            *tmp___103 = (unsigned char )((((counterreg & 0x7) & 0x07) << 3) | 5);
#line 3549
            break;
          }
#line 3549
          while (1) {
#line 3549
            imb___6.val = - block_size;
#line 3549
            tmp___104 = jit->ip;
#line 3549
            (jit->ip) ++;
#line 3549
            *tmp___104 = imb___6.b[0];
#line 3549
            tmp___105 = jit->ip;
#line 3549
            (jit->ip) ++;
#line 3549
            *tmp___105 = imb___6.b[1];
#line 3549
            tmp___106 = jit->ip;
#line 3549
            (jit->ip) ++;
#line 3549
            *tmp___106 = imb___6.b[2];
#line 3549
            tmp___107 = jit->ip;
#line 3549
            (jit->ip) ++;
#line 3549
            *tmp___107 = imb___6.b[3];
#line 3549
            break;
          }
        } else
#line 3549
        if (- block_size == 0) {
#line 3549
          if ((a1 & 7L) != 5L) {
#line 3549
            while (1) {
#line 3549
              tmp___108 = jit->ip;
#line 3549
              (jit->ip) ++;
#line 3549
              *tmp___108 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 4L);
#line 3549
              break;
            }
#line 3549
            while (1) {
#line 3549
              tmp___109 = jit->ip;
#line 3549
              (jit->ip) ++;
#line 3549
              *tmp___109 = (unsigned char )((long )((((counterreg & 0x7) & 0x7) & 0x07) << 3) | (((a1 & 7L) & 7L) & 7L));
#line 3549
              break;
            }
          } else {
#line 3549
            goto _L___6;
          }
        } else
        _L___6: /* CIL Label */ 
#line 3549
        if ((jit_value )(- block_size) >= -128L) {
#line 3549
          if ((jit_value )(- block_size) <= 127L) {
#line 3549
            while (1) {
#line 3549
              tmp___110 = jit->ip;
#line 3549
              (jit->ip) ++;
#line 3549
              *tmp___110 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
#line 3549
              break;
            }
#line 3549
            while (1) {
#line 3549
              tmp___111 = jit->ip;
#line 3549
              (jit->ip) ++;
#line 3549
              *tmp___111 = (unsigned char )((long )((((counterreg & 0x7) & 0x7) & 0x07) << 3) | (((a1 & 7L) & 7L) & 7L));
#line 3549
              break;
            }
#line 3549
            while (1) {
#line 3549
              *(jit->ip) = (unsigned char )(- block_size & 0xff);
#line 3549
              (jit->ip) ++;
#line 3549
              break;
            }
          } else {
#line 3549
            goto _L___5;
          }
        } else {
          _L___5: /* CIL Label */ 
#line 3549
          while (1) {
#line 3549
            tmp___112 = jit->ip;
#line 3549
            (jit->ip) ++;
#line 3549
            *tmp___112 = (unsigned char )(((long )(2 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
#line 3549
            break;
          }
#line 3549
          while (1) {
#line 3549
            tmp___113 = jit->ip;
#line 3549
            (jit->ip) ++;
#line 3549
            *tmp___113 = (unsigned char )((long )((((counterreg & 0x7) & 0x7) & 0x07) << 3) | (((a1 & 7L) & 7L) & 7L));
#line 3549
            break;
          }
#line 3549
          while (1) {
#line 3549
            imb___7.val = - block_size;
#line 3549
            tmp___114 = jit->ip;
#line 3549
            (jit->ip) ++;
#line 3549
            *tmp___114 = imb___7.b[0];
#line 3549
            tmp___115 = jit->ip;
#line 3549
            (jit->ip) ++;
#line 3549
            *tmp___115 = imb___7.b[1];
#line 3549
            tmp___116 = jit->ip;
#line 3549
            (jit->ip) ++;
#line 3549
            *tmp___116 = imb___7.b[2];
#line 3549
            tmp___117 = jit->ip;
#line 3549
            (jit->ip) ++;
#line 3549
            *tmp___117 = imb___7.b[3];
#line 3549
            break;
          }
        }
#line 3549
        break;
      }
#line 3549
      break;
    }
  }
#line 3550
  while (1) {
#line 3550
    if ((jit_value )block_size >= -128L) {
#line 3550
      if ((jit_value )block_size <= 127L) {
#line 3550
        while (1) {
#line 3550
          if (counterreg > 7) {
#line 3550
            tmp___118 = 1;
          } else {
#line 3550
            tmp___118 = 0;
          }
#line 3550
          _amd64_rex_bits___6 = (unsigned char )(8 | tmp___118);
#line 3550
          if ((int )_amd64_rex_bits___6 != 0) {
#line 3550
            tmp___119 = jit->ip;
#line 3550
            (jit->ip) ++;
#line 3550
            *tmp___119 = (unsigned char )(0x40 | (int )_amd64_rex_bits___6);
          }
#line 3550
          break;
        }
#line 3550
        tmp___120 = jit->ip;
#line 3550
        (jit->ip) ++;
#line 3550
        *tmp___120 = (unsigned char)131;
#line 3550
        while (1) {
#line 3550
          while (1) {
#line 3550
            tmp___121 = jit->ip;
#line 3550
            (jit->ip) ++;
#line 3550
            *tmp___121 = (unsigned char )(((3 << 6) | (5 << 3)) | (counterreg & 0x07));
#line 3550
            break;
          }
#line 3550
          break;
        }
#line 3550
        while (1) {
#line 3550
          *(jit->ip) = (unsigned char )(block_size & 0xff);
#line 3550
          (jit->ip) ++;
#line 3550
          break;
        }
      } else {
#line 3550
        goto _L___7;
      }
    } else
    _L___7: /* CIL Label */ 
#line 3550
    if (counterreg == 0) {
#line 3550
      while (1) {
#line 3550
        _amd64_rex_bits___7 = (unsigned char)8;
#line 3550
        if ((int )_amd64_rex_bits___7 != 0) {
#line 3550
          tmp___122 = jit->ip;
#line 3550
          (jit->ip) ++;
#line 3550
          *tmp___122 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
        }
#line 3550
        break;
      }
#line 3550
      tmp___123 = jit->ip;
#line 3550
      (jit->ip) ++;
#line 3550
      *tmp___123 = (unsigned char )((5 << 3) + 5);
#line 3550
      while (1) {
#line 3550
        imb___8.val = block_size;
#line 3550
        tmp___124 = jit->ip;
#line 3550
        (jit->ip) ++;
#line 3550
        *tmp___124 = imb___8.b[0];
#line 3550
        tmp___125 = jit->ip;
#line 3550
        (jit->ip) ++;
#line 3550
        *tmp___125 = imb___8.b[1];
#line 3550
        tmp___126 = jit->ip;
#line 3550
        (jit->ip) ++;
#line 3550
        *tmp___126 = imb___8.b[2];
#line 3550
        tmp___127 = jit->ip;
#line 3550
        (jit->ip) ++;
#line 3550
        *tmp___127 = imb___8.b[3];
#line 3550
        break;
      }
    } else {
#line 3550
      while (1) {
#line 3550
        if (counterreg > 7) {
#line 3550
          tmp___128 = 1;
        } else {
#line 3550
          tmp___128 = 0;
        }
#line 3550
        _amd64_rex_bits___8 = (unsigned char )(8 | tmp___128);
#line 3550
        if ((int )_amd64_rex_bits___8 != 0) {
#line 3550
          tmp___129 = jit->ip;
#line 3550
          (jit->ip) ++;
#line 3550
          *tmp___129 = (unsigned char )(0x40 | (int )_amd64_rex_bits___8);
        }
#line 3550
        break;
      }
#line 3550
      tmp___130 = jit->ip;
#line 3550
      (jit->ip) ++;
#line 3550
      *tmp___130 = (unsigned char)129;
#line 3550
      while (1) {
#line 3550
        while (1) {
#line 3550
          tmp___131 = jit->ip;
#line 3550
          (jit->ip) ++;
#line 3550
          *tmp___131 = (unsigned char )(((3 << 6) | (5 << 3)) | (counterreg & 0x07));
#line 3550
          break;
        }
#line 3550
        break;
      }
#line 3550
      while (1) {
#line 3550
        imb___9.val = block_size;
#line 3550
        tmp___132 = jit->ip;
#line 3550
        (jit->ip) ++;
#line 3550
        *tmp___132 = imb___9.b[0];
#line 3550
        tmp___133 = jit->ip;
#line 3550
        (jit->ip) ++;
#line 3550
        *tmp___133 = imb___9.b[1];
#line 3550
        tmp___134 = jit->ip;
#line 3550
        (jit->ip) ++;
#line 3550
        *tmp___134 = imb___9.b[2];
#line 3550
        tmp___135 = jit->ip;
#line 3550
        (jit->ip) ++;
#line 3550
        *tmp___135 = imb___9.b[3];
#line 3550
        break;
      }
    }
#line 3550
    break;
  }
#line 3551
  while (1) {
#line 3551
    while (1) {
#line 3551
      _amd64_rex_bits___9 = (unsigned char)8;
#line 3551
      if ((int )_amd64_rex_bits___9 != 0) {
#line 3551
        tmp___136 = jit->ip;
#line 3551
        (jit->ip) ++;
#line 3551
        *tmp___136 = (unsigned char )(0x40 | (int )_amd64_rex_bits___9);
      }
#line 3551
      break;
    }
#line 3551
    while (1) {
#line 3551
      offset = (int )((loop - (jit_value )jit->ip) - 2L);
#line 3551
      if ((jit_value )offset >= -128L) {
#line 3551
        if ((jit_value )offset <= 127L) {
#line 3551
          while (1) {
#line 3551
            tmp___138 = jit->ip;
#line 3551
            (jit->ip) ++;
#line 3551
            *tmp___138 = (unsigned char )x86_cc_unsigned_map[1];
#line 3551
            while (1) {
#line 3551
              *(jit->ip) = (unsigned char )(offset & 0xff);
#line 3551
              (jit->ip) ++;
#line 3551
              break;
            }
#line 3551
            break;
          }
        } else {
#line 3551
          goto _L___8;
        }
      } else {
        _L___8: /* CIL Label */ 
#line 3551
        offset -= 4;
#line 3551
        while (1) {
#line 3551
          tmp___139 = jit->ip;
#line 3551
          (jit->ip) ++;
#line 3551
          *tmp___139 = (unsigned char)15;
#line 3551
          tmp___141 = jit->ip;
#line 3551
          (jit->ip) ++;
#line 3551
          *tmp___141 = (unsigned char )((int const   )x86_cc_unsigned_map[1] + 16);
#line 3551
          while (1) {
#line 3551
            imb___10.val = offset;
#line 3551
            tmp___142 = jit->ip;
#line 3551
            (jit->ip) ++;
#line 3551
            *tmp___142 = imb___10.b[0];
#line 3551
            tmp___143 = jit->ip;
#line 3551
            (jit->ip) ++;
#line 3551
            *tmp___143 = imb___10.b[1];
#line 3551
            tmp___144 = jit->ip;
#line 3551
            (jit->ip) ++;
#line 3551
            *tmp___144 = imb___10.b[2];
#line 3551
            tmp___145 = jit->ip;
#line 3551
            (jit->ip) ++;
#line 3551
            *tmp___145 = imb___10.b[3];
#line 3551
            break;
          }
#line 3551
          break;
        }
      }
#line 3551
      break;
    }
#line 3551
    break;
  }
#line 3553
  if (counter_in_use) {
#line 3553
    while (1) {
#line 3553
      while (1) {
#line 3553
        if (counterreg > 7) {
#line 3553
          tmp___146 = 1;
        } else {
#line 3553
          tmp___146 = 0;
        }
#line 3553
        _amd64_rex_bits___10 = (unsigned char )tmp___146;
#line 3553
        if ((int )_amd64_rex_bits___10 != 0) {
#line 3553
          tmp___147 = jit->ip;
#line 3553
          (jit->ip) ++;
#line 3553
          *tmp___147 = (unsigned char )(0x40 | (int )_amd64_rex_bits___10);
        }
#line 3553
        break;
      }
#line 3553
      tmp___148 = jit->ip;
#line 3553
      (jit->ip) ++;
#line 3553
      *tmp___148 = (unsigned char )(88 + (counterreg & 0x7));
#line 3553
      break;
    }
  }
#line 3554
  return;
}
}
/* END FUNCTION-DEF emit_memset LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_arg LOC=UNKNOWN */
__inline static void print_arg(struct jit_disasm *disasm , struct output_buf *buf ,
                               struct jit_op *op , int arg ) 
{ 
  long a ;
  char value[256] ;

  {
#line 4391
  a = op->arg[arg - 1];
#line 4392
  if ((((int )op->spec >> (arg - 1) * 2) & 0x03) == 0x02) {
#line 4392
    ob_printf(buf, (char const   *)disasm->generic_value_template, a);
  }
#line 4393
  if ((((int )op->spec >> (arg - 1) * 2) & 0x03) == 0x01) {
#line 4395
    jit_get_reg_name(disasm, value, (int )a);
#line 4396
    ob_append(buf, value);
  } else
#line 4393
  if ((((int )op->spec >> (arg - 1) * 2) & 0x03) == 0x03) {
#line 4395
    jit_get_reg_name(disasm, value, (int )a);
#line 4396
    ob_append(buf, value);
  }
#line 4398
  return;
}
}
/* END FUNCTION-DEF print_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF __darwin_check_fd_set LOC=UNKNOWN */
__inline int ( __attribute__((__always_inline__)) __darwin_check_fd_set)(int _a ,
                                                                         void const   *_b ) 
{ 
  int tmp ;

  {
#line 60
  if ((uintptr_t )(& __darwin_check_fd_set_overflow) != 0UL) {
#line 64
    tmp = __darwin_check_fd_set_overflow(_a, _b, 0);
#line 64
    return (tmp);
  } else {
#line 67 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h"
    return (1);
  }
}
}
/* END FUNCTION-DEF __darwin_check_fd_set LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF _OSSwapInt32 LOC=UNKNOWN */
__inline static __uint32_t _OSSwapInt32(__uint32_t _data ) 
{ 
  int tmp ;

  {
#line 60 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/libkern/i386/_OSByteOrder.h"
  tmp = __builtin_bswap32((int )_data);
#line 60
  return ((__uint32_t )tmp);
}
}
/* END FUNCTION-DEF _OSSwapInt32 LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_op_last LOC=UNKNOWN */
__inline static jit_op *jit_op_last(jit_op *op ) 
{ 


  {
#line 867
  while ((unsigned long )op->next != (unsigned long )((void *)0)) {
#line 867 "./jitter-Darwin-X86-64.c"
    op = op->next;
  }
#line 868
  return (op);
}
}
/* END FUNCTION-DEF jit_op_last LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF uses_hw_reg LOC=UNKNOWN */
static int uses_hw_reg(struct jit_op *op , jit_value reg , int fp ) 
{ 
  int i ;

  {
#line 1405
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 40U) {
#line 1405
    if (op->r_arg[0] == reg) {
#line 1405
      return (1);
    }
  }
#line 1406
  i = 0;
#line 1406
  while (i < 3) {
#line 1407
    if ((((int )op->spec >> ((i + 1) - 1) * 2) & 0x03) == 0x01) {
#line 1407
      goto _L;
    } else
#line 1407
    if ((((int )op->spec >> ((i + 1) - 1) * 2) & 0x03) == 0x03) {
      _L: /* CIL Label */ 
#line 1408
      if (fp) {
#line 1408
        if ((op->arg[i] & 1L) == 0L) {
#line 1408
          goto __Cont;
        }
      }
#line 1409
      if (! fp) {
#line 1409
        if ((op->arg[i] & 1L) == 1L) {
#line 1409
          goto __Cont;
        }
      }
#line 1410
      if (op->r_arg[i] == reg) {
#line 1410
        return (1);
      }
    }
    __Cont: /* CIL Label */ 
#line 1406
    i ++;
  }
#line 1412
  return (0);
}
}
/* END FUNCTION-DEF uses_hw_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_transfer_op LOC=UNKNOWN */
static void emit_transfer_op(struct jit *jit , jit_op *op , int alu_op ) 
{ 
  jit_op *init_op ;
  struct transfer_info *tinf ;
  unsigned char _amd64_rex_bits ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___60 ;
  int tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  int tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  x86_imm_buf imb___5 ;
  int tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  int tmp___80 ;
  int tmp___81 ;
  int tmp___82 ;
  unsigned char *tmp___83 ;
  int tmp___84 ;
  unsigned char *tmp___85 ;
  int tmp___86 ;
  unsigned char *tmp___87 ;
  x86_imm_buf imb___6 ;
  int tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  int tmp___93 ;
  int tmp___94 ;

  {
#line 3494
  init_op = op->prev;
#line 3495
  while ((unsigned int )((jit_opcode )((int )init_op->code & 0xfff8)) != 1536U) {
#line 3496
    init_op = init_op->prev;
  }
#line 3498
  tinf = (struct transfer_info *)init_op->addendum;
#line 3500
  if (op->arg[1] == (jit_value )((2 << 1) | (1 << 4))) {
#line 3501
    while (1) {
#line 3501
      while (1) {
#line 3501
        if (tinf->scrapreg > 7) {
#line 3501
          tmp = 4;
        } else {
#line 3501
          tmp = 0;
        }
#line 3501
        if (tinf->counterreg > 7) {
#line 3501
          tmp___0 = 2;
        } else {
#line 3501
          tmp___0 = 0;
        }
#line 3501
        if (tinf->destreg > 7) {
#line 3501
          tmp___1 = 1;
        } else {
#line 3501
          tmp___1 = 0;
        }
#line 3501
        _amd64_rex_bits = (unsigned char )(((8 | tmp) | tmp___0) | tmp___1);
#line 3501
        if ((int )_amd64_rex_bits != 0) {
#line 3501
          tmp___2 = jit->ip;
#line 3501
          (jit->ip) ++;
#line 3501
          *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
        }
#line 3501
        break;
      }
#line 3501
      while (1) {
#line 3501
        tmp___3 = jit->ip;
#line 3501
        (jit->ip) ++;
#line 3501
        *tmp___3 = (unsigned char )(((int )((unsigned char )alu_op) << 3) + 3);
#line 3501
        while (1) {
#line 3501
          if ((tinf->destreg & 0x7) == -1) {
#line 3501
            while (1) {
#line 3501
              tmp___4 = jit->ip;
#line 3501
              (jit->ip) ++;
#line 3501
              *tmp___4 = (unsigned char )((((tinf->scrapreg & 0x7) & 0x07) << 3) | 4);
#line 3501
              break;
            }
#line 3501
            while (1) {
#line 3501
              tmp___5 = jit->ip;
#line 3501
              (jit->ip) ++;
#line 3501
              *tmp___5 = (unsigned char )((((tinf->counterreg & 0x7) & 0x07) << 3) | 5);
#line 3501
              break;
            }
#line 3501
            while (1) {
#line 3501
              imb.val = - tinf->block_size;
#line 3501
              tmp___6 = jit->ip;
#line 3501
              (jit->ip) ++;
#line 3501
              *tmp___6 = imb.b[0];
#line 3501
              tmp___7 = jit->ip;
#line 3501
              (jit->ip) ++;
#line 3501
              *tmp___7 = imb.b[1];
#line 3501
              tmp___8 = jit->ip;
#line 3501
              (jit->ip) ++;
#line 3501
              *tmp___8 = imb.b[2];
#line 3501
              tmp___9 = jit->ip;
#line 3501
              (jit->ip) ++;
#line 3501
              *tmp___9 = imb.b[3];
#line 3501
              break;
            }
          } else
#line 3501
          if (- tinf->block_size == 0) {
#line 3501
            if ((tinf->destreg & 0x7) != 5) {
#line 3501
              while (1) {
#line 3501
                tmp___10 = jit->ip;
#line 3501
                (jit->ip) ++;
#line 3501
                *tmp___10 = (unsigned char )((((tinf->scrapreg & 0x7) & 0x07) << 3) | 4);
#line 3501
                break;
              }
#line 3501
              while (1) {
#line 3501
                tmp___11 = jit->ip;
#line 3501
                (jit->ip) ++;
#line 3501
                *tmp___11 = (unsigned char )(((((tinf->counterreg & 0x7) & 0x7) & 0x07) << 3) | (((tinf->destreg & 0x7) & 0x7) & 0x07));
#line 3501
                break;
              }
            } else {
#line 3501
              goto _L___0;
            }
          } else
          _L___0: /* CIL Label */ 
#line 3501
          if ((jit_value )(- tinf->block_size) >= -128L) {
#line 3501
            if ((jit_value )(- tinf->block_size) <= 127L) {
#line 3501
              while (1) {
#line 3501
                tmp___12 = jit->ip;
#line 3501
                (jit->ip) ++;
#line 3501
                *tmp___12 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3501
                break;
              }
#line 3501
              while (1) {
#line 3501
                tmp___13 = jit->ip;
#line 3501
                (jit->ip) ++;
#line 3501
                *tmp___13 = (unsigned char )(((((tinf->counterreg & 0x7) & 0x7) & 0x07) << 3) | (((tinf->destreg & 0x7) & 0x7) & 0x07));
#line 3501
                break;
              }
#line 3501
              while (1) {
#line 3501
                *(jit->ip) = (unsigned char )(- tinf->block_size & 0xff);
#line 3501
                (jit->ip) ++;
#line 3501
                break;
              }
            } else {
#line 3501
              goto _L;
            }
          } else {
            _L: /* CIL Label */ 
#line 3501
            while (1) {
#line 3501
              tmp___14 = jit->ip;
#line 3501
              (jit->ip) ++;
#line 3501
              *tmp___14 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3501
              break;
            }
#line 3501
            while (1) {
#line 3501
              tmp___15 = jit->ip;
#line 3501
              (jit->ip) ++;
#line 3501
              *tmp___15 = (unsigned char )(((((tinf->counterreg & 0x7) & 0x7) & 0x07) << 3) | (((tinf->destreg & 0x7) & 0x7) & 0x07));
#line 3501
              break;
            }
#line 3501
            while (1) {
#line 3501
              imb___0.val = - tinf->block_size;
#line 3501
              tmp___16 = jit->ip;
#line 3501
              (jit->ip) ++;
#line 3501
              *tmp___16 = imb___0.b[0];
#line 3501
              tmp___17 = jit->ip;
#line 3501
              (jit->ip) ++;
#line 3501
              *tmp___17 = imb___0.b[1];
#line 3501
              tmp___18 = jit->ip;
#line 3501
              (jit->ip) ++;
#line 3501
              *tmp___18 = imb___0.b[2];
#line 3501
              tmp___19 = jit->ip;
#line 3501
              (jit->ip) ++;
#line 3501
              *tmp___19 = imb___0.b[3];
#line 3501
              break;
            }
          }
#line 3501
          break;
        }
#line 3501
        break;
      }
#line 3501
      break;
    }
  } else
#line 3502
  if (op->r_arg[1] != -1L) {
#line 3503
    if (op->r_arg[1] == (jit_value )tinf->counterreg) {
#line 3503
      if (tinf->counter_in_use) {
#line 3504
        while (1) {
#line 3504
          while (1) {
#line 3504
            if (tinf->scrapreg > 7) {
#line 3504
              tmp___20 = 4;
            } else {
#line 3504
              tmp___20 = 0;
            }
#line 3504
            _amd64_rex_bits___0 = (unsigned char )(8 | tmp___20);
#line 3504
            if ((int )_amd64_rex_bits___0 != 0) {
#line 3504
              tmp___21 = jit->ip;
#line 3504
              (jit->ip) ++;
#line 3504
              *tmp___21 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
            }
#line 3504
            break;
          }
#line 3504
          while (1) {
#line 3504
            tmp___22 = jit->ip;
#line 3504
            (jit->ip) ++;
#line 3504
            *tmp___22 = (unsigned char )(((int )((unsigned char )alu_op) << 3) + 3);
#line 3504
            while (1) {
#line 3504
              if (- ((int )sizeof(void *)) == 0) {
#line 3504
                while (1) {
#line 3504
                  tmp___23 = jit->ip;
#line 3504
                  (jit->ip) ++;
#line 3504
                  *tmp___23 = (unsigned char )((((tinf->scrapreg & 0x7) & 0x07) << 3) | 4);
#line 3504
                  break;
                }
#line 3504
                while (1) {
#line 3504
                  tmp___24 = jit->ip;
#line 3504
                  (jit->ip) ++;
#line 3504
                  *tmp___24 = (unsigned char )((4 << 3) | 4);
#line 3504
                  break;
                }
              } else
#line 3504
              if ((jit_value )(- ((int )sizeof(void *))) >= -128L) {
#line 3504
                if ((jit_value )(- ((int )sizeof(void *))) <= 127L) {
#line 3504
                  while (1) {
#line 3504
                    tmp___25 = jit->ip;
#line 3504
                    (jit->ip) ++;
#line 3504
                    *tmp___25 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3504
                    break;
                  }
#line 3504
                  while (1) {
#line 3504
                    tmp___26 = jit->ip;
#line 3504
                    (jit->ip) ++;
#line 3504
                    *tmp___26 = (unsigned char )((4 << 3) | 4);
#line 3504
                    break;
                  }
#line 3504
                  while (1) {
#line 3504
                    *(jit->ip) = (unsigned char )(- ((int )sizeof(void *)) & 0xff);
#line 3504
                    (jit->ip) ++;
#line 3504
                    break;
                  }
                } else {
#line 3504
                  goto _L___1;
                }
              } else {
                _L___1: /* CIL Label */ 
#line 3504
                while (1) {
#line 3504
                  tmp___27 = jit->ip;
#line 3504
                  (jit->ip) ++;
#line 3504
                  *tmp___27 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3504
                  break;
                }
#line 3504
                while (1) {
#line 3504
                  tmp___28 = jit->ip;
#line 3504
                  (jit->ip) ++;
#line 3504
                  *tmp___28 = (unsigned char )((4 << 3) | 4);
#line 3504
                  break;
                }
#line 3504
                while (1) {
#line 3504
                  imb___1.val = - ((int )sizeof(void *));
#line 3504
                  tmp___29 = jit->ip;
#line 3504
                  (jit->ip) ++;
#line 3504
                  *tmp___29 = imb___1.b[0];
#line 3504
                  tmp___30 = jit->ip;
#line 3504
                  (jit->ip) ++;
#line 3504
                  *tmp___30 = imb___1.b[1];
#line 3504
                  tmp___31 = jit->ip;
#line 3504
                  (jit->ip) ++;
#line 3504
                  *tmp___31 = imb___1.b[2];
#line 3504
                  tmp___32 = jit->ip;
#line 3504
                  (jit->ip) ++;
#line 3504
                  *tmp___32 = imb___1.b[3];
#line 3504
                  break;
                }
              }
#line 3504
              break;
#line 3504
              if (- ((int )sizeof(void *)) == 0) {
#line 3504
                while (1) {
#line 3504
                  tmp___33 = jit->ip;
#line 3504
                  (jit->ip) ++;
#line 3504
                  *tmp___33 = (unsigned char )((((tinf->scrapreg & 0x7) & 0x07) << 3) | 4);
#line 3504
                  break;
                }
#line 3504
                break;
              }
#line 3504
              if ((jit_value )(- ((int )sizeof(void *))) >= -128L) {
#line 3504
                if ((jit_value )(- ((int )sizeof(void *))) <= 127L) {
#line 3504
                  while (1) {
#line 3504
                    tmp___34 = jit->ip;
#line 3504
                    (jit->ip) ++;
#line 3504
                    *tmp___34 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3504
                    break;
                  }
#line 3504
                  while (1) {
#line 3504
                    *(jit->ip) = (unsigned char )(- ((int )sizeof(void *)) & 0xff);
#line 3504
                    (jit->ip) ++;
#line 3504
                    break;
                  }
                } else {
#line 3504
                  goto _L___2;
                }
              } else {
                _L___2: /* CIL Label */ 
#line 3504
                while (1) {
#line 3504
                  tmp___35 = jit->ip;
#line 3504
                  (jit->ip) ++;
#line 3504
                  *tmp___35 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3504
                  break;
                }
#line 3504
                while (1) {
#line 3504
                  imb___2.val = - ((int )sizeof(void *));
#line 3504
                  tmp___36 = jit->ip;
#line 3504
                  (jit->ip) ++;
#line 3504
                  *tmp___36 = imb___2.b[0];
#line 3504
                  tmp___37 = jit->ip;
#line 3504
                  (jit->ip) ++;
#line 3504
                  *tmp___37 = imb___2.b[1];
#line 3504
                  tmp___38 = jit->ip;
#line 3504
                  (jit->ip) ++;
#line 3504
                  *tmp___38 = imb___2.b[2];
#line 3504
                  tmp___39 = jit->ip;
#line 3504
                  (jit->ip) ++;
#line 3504
                  *tmp___39 = imb___2.b[3];
#line 3504
                  break;
                }
              }
#line 3504
              break;
            }
#line 3504
            break;
          }
#line 3504
          break;
        }
      } else {
#line 3503
        goto _L___6;
      }
    } else
    _L___6: /* CIL Label */ 
#line 3505
    if (op->r_arg[1] == (jit_value )tinf->scrapreg) {
#line 3505
      if (tinf->scrap_in_use) {
#line 3506
        while (1) {
#line 3506
          while (1) {
#line 3506
            if (tinf->scrapreg > 7) {
#line 3506
              tmp___40 = 4;
            } else {
#line 3506
              tmp___40 = 0;
            }
#line 3506
            _amd64_rex_bits___1 = (unsigned char )(8 | tmp___40);
#line 3506
            if ((int )_amd64_rex_bits___1 != 0) {
#line 3506
              tmp___41 = jit->ip;
#line 3506
              (jit->ip) ++;
#line 3506
              *tmp___41 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
            }
#line 3506
            break;
          }
#line 3506
          while (1) {
#line 3506
            tmp___42 = jit->ip;
#line 3506
            (jit->ip) ++;
#line 3506
            *tmp___42 = (unsigned char )(((int )((unsigned char )alu_op) << 3) + 3);
#line 3506
            while (1) {
#line 3506
              if (- ((int )sizeof(void *)) * 2 == 0) {
#line 3506
                while (1) {
#line 3506
                  tmp___43 = jit->ip;
#line 3506
                  (jit->ip) ++;
#line 3506
                  *tmp___43 = (unsigned char )((((tinf->scrapreg & 0x7) & 0x07) << 3) | 4);
#line 3506
                  break;
                }
#line 3506
                while (1) {
#line 3506
                  tmp___44 = jit->ip;
#line 3506
                  (jit->ip) ++;
#line 3506
                  *tmp___44 = (unsigned char )((4 << 3) | 4);
#line 3506
                  break;
                }
              } else
#line 3506
              if ((jit_value )(- ((int )sizeof(void *)) * 2) >= -128L) {
#line 3506
                if ((jit_value )(- ((int )sizeof(void *)) * 2) <= 127L) {
#line 3506
                  while (1) {
#line 3506
                    tmp___45 = jit->ip;
#line 3506
                    (jit->ip) ++;
#line 3506
                    *tmp___45 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3506
                    break;
                  }
#line 3506
                  while (1) {
#line 3506
                    tmp___46 = jit->ip;
#line 3506
                    (jit->ip) ++;
#line 3506
                    *tmp___46 = (unsigned char )((4 << 3) | 4);
#line 3506
                    break;
                  }
#line 3506
                  while (1) {
#line 3506
                    *(jit->ip) = (unsigned char )(- ((int )sizeof(void *)) * 2 & 0xff);
#line 3506
                    (jit->ip) ++;
#line 3506
                    break;
                  }
                } else {
#line 3506
                  goto _L___3;
                }
              } else {
                _L___3: /* CIL Label */ 
#line 3506
                while (1) {
#line 3506
                  tmp___47 = jit->ip;
#line 3506
                  (jit->ip) ++;
#line 3506
                  *tmp___47 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3506
                  break;
                }
#line 3506
                while (1) {
#line 3506
                  tmp___48 = jit->ip;
#line 3506
                  (jit->ip) ++;
#line 3506
                  *tmp___48 = (unsigned char )((4 << 3) | 4);
#line 3506
                  break;
                }
#line 3506
                while (1) {
#line 3506
                  imb___3.val = - ((int )sizeof(void *)) * 2;
#line 3506
                  tmp___49 = jit->ip;
#line 3506
                  (jit->ip) ++;
#line 3506
                  *tmp___49 = imb___3.b[0];
#line 3506
                  tmp___50 = jit->ip;
#line 3506
                  (jit->ip) ++;
#line 3506
                  *tmp___50 = imb___3.b[1];
#line 3506
                  tmp___51 = jit->ip;
#line 3506
                  (jit->ip) ++;
#line 3506
                  *tmp___51 = imb___3.b[2];
#line 3506
                  tmp___52 = jit->ip;
#line 3506
                  (jit->ip) ++;
#line 3506
                  *tmp___52 = imb___3.b[3];
#line 3506
                  break;
                }
              }
#line 3506
              break;
#line 3506
              if (- ((int )sizeof(void *)) * 2 == 0) {
#line 3506
                while (1) {
#line 3506
                  tmp___53 = jit->ip;
#line 3506
                  (jit->ip) ++;
#line 3506
                  *tmp___53 = (unsigned char )((((tinf->scrapreg & 0x7) & 0x07) << 3) | 4);
#line 3506
                  break;
                }
#line 3506
                break;
              }
#line 3506
              if ((jit_value )(- ((int )sizeof(void *)) * 2) >= -128L) {
#line 3506
                if ((jit_value )(- ((int )sizeof(void *)) * 2) <= 127L) {
#line 3506
                  while (1) {
#line 3506
                    tmp___54 = jit->ip;
#line 3506
                    (jit->ip) ++;
#line 3506
                    *tmp___54 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3506
                    break;
                  }
#line 3506
                  while (1) {
#line 3506
                    *(jit->ip) = (unsigned char )(- ((int )sizeof(void *)) * 2 & 0xff);
#line 3506
                    (jit->ip) ++;
#line 3506
                    break;
                  }
                } else {
#line 3506
                  goto _L___4;
                }
              } else {
                _L___4: /* CIL Label */ 
#line 3506
                while (1) {
#line 3506
                  tmp___55 = jit->ip;
#line 3506
                  (jit->ip) ++;
#line 3506
                  *tmp___55 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3506
                  break;
                }
#line 3506
                while (1) {
#line 3506
                  imb___4.val = - ((int )sizeof(void *)) * 2;
#line 3506
                  tmp___56 = jit->ip;
#line 3506
                  (jit->ip) ++;
#line 3506
                  *tmp___56 = imb___4.b[0];
#line 3506
                  tmp___57 = jit->ip;
#line 3506
                  (jit->ip) ++;
#line 3506
                  *tmp___57 = imb___4.b[1];
#line 3506
                  tmp___58 = jit->ip;
#line 3506
                  (jit->ip) ++;
#line 3506
                  *tmp___58 = imb___4.b[2];
#line 3506
                  tmp___59 = jit->ip;
#line 3506
                  (jit->ip) ++;
#line 3506
                  *tmp___59 = imb___4.b[3];
#line 3506
                  break;
                }
              }
#line 3506
              break;
            }
#line 3506
            break;
          }
#line 3506
          break;
        }
      } else {
#line 3505
        goto _L___5;
      }
    } else {
      _L___5: /* CIL Label */ 
#line 3507
      while (1) {
#line 3507
        while (1) {
#line 3507
          if (tinf->scrapreg > 7) {
#line 3507
            tmp___60 = 4;
          } else {
#line 3507
            tmp___60 = 0;
          }
#line 3507
          if (op->r_arg[1] > 7L) {
#line 3507
            tmp___61 = 1;
          } else {
#line 3507
            tmp___61 = 0;
          }
#line 3507
          _amd64_rex_bits___2 = (unsigned char )((8 | tmp___60) | tmp___61);
#line 3507
          if ((int )_amd64_rex_bits___2 != 0) {
#line 3507
            tmp___62 = jit->ip;
#line 3507
            (jit->ip) ++;
#line 3507
            *tmp___62 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
          }
#line 3507
          break;
        }
#line 3507
        tmp___63 = jit->ip;
#line 3507
        (jit->ip) ++;
#line 3507
        *tmp___63 = (unsigned char )(((int )((unsigned char )alu_op) << 3) + 3);
#line 3507
        while (1) {
#line 3507
          while (1) {
#line 3507
            tmp___64 = jit->ip;
#line 3507
            (jit->ip) ++;
#line 3507
            *tmp___64 = (unsigned char )((long )((3 << 6) | ((tinf->scrapreg & 0x07) << 3)) | (op->r_arg[1] & 7L));
#line 3507
            break;
          }
#line 3507
          break;
        }
#line 3507
        break;
      }
    }
  } else {
#line 3509
    while (1) {
#line 3509
      while (1) {
#line 3509
        if (tinf->scrapreg > 7) {
#line 3509
          tmp___65 = 4;
        } else {
#line 3509
          tmp___65 = 0;
        }
#line 3509
        _amd64_rex_bits___3 = (unsigned char )(8 | tmp___65);
#line 3509
        if ((int )_amd64_rex_bits___3 != 0) {
#line 3509
          tmp___66 = jit->ip;
#line 3509
          (jit->ip) ++;
#line 3509
          *tmp___66 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
        }
#line 3509
        break;
      }
#line 3509
      while (1) {
#line 3509
        tmp___67 = jit->ip;
#line 3509
        (jit->ip) ++;
#line 3509
        *tmp___67 = (unsigned char )(((int )((unsigned char )alu_op) << 3) + 3);
#line 3509
        while (1) {
#line 3509
          if (0) {
#line 3509
            tmp___82 = stack_reg_pos(jit, (int )op->arg[1]);
#line 3509
            if (tmp___82 == 0) {
#line 3509
              while (1) {
#line 3509
                tmp___68 = jit->ip;
#line 3509
                (jit->ip) ++;
#line 3509
                *tmp___68 = (unsigned char )((((tinf->scrapreg & 0x7) & 0x07) << 3) | 4);
#line 3509
                break;
              }
#line 3509
              while (1) {
#line 3509
                tmp___69 = jit->ip;
#line 3509
                (jit->ip) ++;
#line 3509
                *tmp___69 = (unsigned char )((4 << 3) | 4);
#line 3509
                break;
              }
            } else {
#line 3509
              tmp___80 = stack_reg_pos(jit, (int )op->arg[1]);
#line 3509
              if ((jit_value )tmp___80 >= -128L) {
#line 3509
                tmp___81 = stack_reg_pos(jit, (int )op->arg[1]);
#line 3509
                if ((jit_value )tmp___81 <= 127L) {
#line 3509
                  while (1) {
#line 3509
                    tmp___70 = jit->ip;
#line 3509
                    (jit->ip) ++;
#line 3509
                    *tmp___70 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3509
                    break;
                  }
#line 3509
                  while (1) {
#line 3509
                    tmp___71 = jit->ip;
#line 3509
                    (jit->ip) ++;
#line 3509
                    *tmp___71 = (unsigned char )((4 << 3) | 4);
#line 3509
                    break;
                  }
#line 3509
                  while (1) {
#line 3509
                    tmp___72 = stack_reg_pos(jit, (int )op->arg[1]);
#line 3509
                    *(jit->ip) = (unsigned char )(tmp___72 & 0xff);
#line 3509
                    (jit->ip) ++;
#line 3509
                    break;
                  }
                } else {
#line 3509
                  goto _L___7;
                }
              } else {
                _L___7: /* CIL Label */ 
#line 3509
                while (1) {
#line 3509
                  tmp___73 = jit->ip;
#line 3509
                  (jit->ip) ++;
#line 3509
                  *tmp___73 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3509
                  break;
                }
#line 3509
                while (1) {
#line 3509
                  tmp___74 = jit->ip;
#line 3509
                  (jit->ip) ++;
#line 3509
                  *tmp___74 = (unsigned char )((4 << 3) | 4);
#line 3509
                  break;
                }
#line 3509
                while (1) {
#line 3509
                  tmp___75 = stack_reg_pos(jit, (int )op->arg[1]);
#line 3509
                  imb___5.val = tmp___75;
#line 3509
                  tmp___76 = jit->ip;
#line 3509
                  (jit->ip) ++;
#line 3509
                  *tmp___76 = imb___5.b[0];
#line 3509
                  tmp___77 = jit->ip;
#line 3509
                  (jit->ip) ++;
#line 3509
                  *tmp___77 = imb___5.b[1];
#line 3509
                  tmp___78 = jit->ip;
#line 3509
                  (jit->ip) ++;
#line 3509
                  *tmp___78 = imb___5.b[2];
#line 3509
                  tmp___79 = jit->ip;
#line 3509
                  (jit->ip) ++;
#line 3509
                  *tmp___79 = imb___5.b[3];
#line 3509
                  break;
                }
              }
            }
#line 3509
            break;
          }
#line 3509
          tmp___84 = stack_reg_pos(jit, (int )op->arg[1]);
#line 3509
          if (tmp___84 == 0) {

          }
#line 3509
          tmp___93 = stack_reg_pos(jit, (int )op->arg[1]);
#line 3509
          if ((jit_value )tmp___93 >= -128L) {
#line 3509
            tmp___94 = stack_reg_pos(jit, (int )op->arg[1]);
#line 3509
            if ((jit_value )tmp___94 <= 127L) {
#line 3509
              while (1) {
#line 3509
                tmp___85 = jit->ip;
#line 3509
                (jit->ip) ++;
#line 3509
                *tmp___85 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 5);
#line 3509
                break;
              }
#line 3509
              while (1) {
#line 3509
                tmp___86 = stack_reg_pos(jit, (int )op->arg[1]);
#line 3509
                *(jit->ip) = (unsigned char )(tmp___86 & 0xff);
#line 3509
                (jit->ip) ++;
#line 3509
                break;
              }
            } else {
#line 3509
              goto _L___8;
            }
          } else {
            _L___8: /* CIL Label */ 
#line 3509
            while (1) {
#line 3509
              tmp___87 = jit->ip;
#line 3509
              (jit->ip) ++;
#line 3509
              *tmp___87 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 5);
#line 3509
              break;
            }
#line 3509
            while (1) {
#line 3509
              tmp___88 = stack_reg_pos(jit, (int )op->arg[1]);
#line 3509
              imb___6.val = tmp___88;
#line 3509
              tmp___89 = jit->ip;
#line 3509
              (jit->ip) ++;
#line 3509
              *tmp___89 = imb___6.b[0];
#line 3509
              tmp___90 = jit->ip;
#line 3509
              (jit->ip) ++;
#line 3509
              *tmp___90 = imb___6.b[1];
#line 3509
              tmp___91 = jit->ip;
#line 3509
              (jit->ip) ++;
#line 3509
              *tmp___91 = imb___6.b[2];
#line 3509
              tmp___92 = jit->ip;
#line 3509
              (jit->ip) ++;
#line 3509
              *tmp___92 = imb___6.b[3];
#line 3509
              break;
            }
          }
#line 3509
          break;
        }
#line 3509
        break;
      }
#line 3509
      break;
    }
  }
#line 3512
  if (op->arg[0]) {
#line 3512
    emit_transfer_loop(jit, (jit_op *)op->arg[0]);
  }
#line 3513
  return;
}
}
/* END FUNCTION-DEF emit_transfer_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF spill_ret_retreg LOC=UNKNOWN */
static void spill_ret_retreg(jit_op *op , jit_hw_reg *ret_reg ) 
{ 
  jit_value r ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp ;

  {
#line 5362
  if (ret_reg) {
#line 5363
    tmp = rmap_is_associated(op->regmap, ret_reg->id, (int )ret_reg->fp, & r);
#line 5363
    hreg = tmp;
#line 5364
    if (hreg) {
#line 5364
      rmap_unassoc(op->regmap, r);
    }
  }
#line 5366
  return;
}
}
/* END FUNCTION-DEF spill_ret_retreg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isxdigit LOC=UNKNOWN */
__inline int isxdigit(int _c ) 
{ 
  __darwin_ct_rune_t tmp ;

  {
#line 282 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  tmp = __isctype(_c, 65536UL);
#line 282
  return (tmp);
}
}
/* END FUNCTION-DEF isxdigit LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF check_register_types LOC=UNKNOWN */
static int check_register_types(struct jit *jit , jit_op *op , char *msg_buf ) 
{ 
  struct jit_func_info *info ;
  struct jit_func_info *tmp ;

  {
#line 5088
  switch ((unsigned int )((jit_opcode )((int )op->code & 0xfff8))) {
  case 432U: 
#line 5090 "./jitter-Darwin-X86-64.c"
  tmp = jit_current_func_info(jit);
#line 5090
  info = tmp;
#line 5091
  if ((unsigned int )(info->args + op->arg[1])->type == 2U) {
#line 5092
    if (((int )op->spec & 0x03) != 0x01) {
#line 5092
      if (((int )op->spec & 0x03) != 0x03) {
#line 5092
        return (0);
      } else {
#line 5092
        goto _L;
      }
    } else
    _L: /* CIL Label */ 
#line 5092
    if ((op->arg[0] & 1L) == 1L) {
#line 5092
      return (0);
    }
  } else
#line 5094
  if (((int )op->spec & 0x03) != 0x01) {
#line 5094
    if (((int )op->spec & 0x03) != 0x03) {
#line 5094
      return (0);
    } else {
#line 5094
      goto _L___0;
    }
  } else
  _L___0: /* CIL Label */ 
#line 5094
  if ((op->arg[0] & 1L) == 0L) {
#line 5094
    return (0);
  }
#line 5096
  break;
  case 1120U: 
  case 1104U: 
  case 1128U: 
  case 1112U: 
  case 1296U: 
#line 5103
  if (((int )op->spec & 0x03) != 0x01) {
#line 5103
    if (((int )op->spec & 0x03) != 0x03) {
#line 5103
      goto _L___2;
    } else {
#line 5103
      goto _L___3;
    }
  } else
  _L___3: /* CIL Label */ 
#line 5103
  if ((op->arg[0] & 1L) == 0L) {
    _L___2: /* CIL Label */ 
#line 5103
    if ((((int )op->spec >> 2) & 0x03) != 0x01) {
#line 5103
      if ((((int )op->spec >> 2) & 0x03) != 0x03) {
#line 5103
        return (0);
      } else {
#line 5103
        goto _L___1;
      }
    } else
    _L___1: /* CIL Label */ 
#line 5103
    if ((op->arg[1] & 1L) == 1L) {
#line 5103
      return (0);
    }
  }
#line 5104
  break;
  case 1280U: 
  case 1096U: 
#line 5107
  if (((int )op->spec & 0x03) != 0x01) {
#line 5107
    if (((int )op->spec & 0x03) != 0x03) {
#line 5107
      goto _L___5;
    } else {
#line 5107
      goto _L___6;
    }
  } else
  _L___6: /* CIL Label */ 
#line 5107
  if ((op->arg[0] & 1L) == 1L) {
    _L___5: /* CIL Label */ 
#line 5107
    if ((((int )op->spec >> 2) & 0x03) != 0x01) {
#line 5107
      if ((((int )op->spec >> 2) & 0x03) != 0x03) {
#line 5107
        return (0);
      } else {
#line 5107
        goto _L___4;
      }
    } else
    _L___4: /* CIL Label */ 
#line 5107
    if ((op->arg[1] & 1L) == 0L) {
#line 5107
      return (0);
    }
  }
#line 5108
  break;
  case 1288U: 
#line 5110
  if (((int )op->spec & 0x03) != 0x01) {
#line 5110
    if (((int )op->spec & 0x03) != 0x03) {
#line 5110
      goto _L___10;
    } else {
#line 5110
      goto _L___11;
    }
  } else
  _L___11: /* CIL Label */ 
#line 5110
  if ((op->arg[0] & 1L) == 1L) {
    _L___10: /* CIL Label */ 
#line 5110
    if ((((int )op->spec >> 2) & 0x03) != 0x01) {
#line 5110
      if ((((int )op->spec >> 2) & 0x03) != 0x03) {
#line 5110
        goto _L___8;
      } else {
#line 5110
        goto _L___9;
      }
    } else
    _L___9: /* CIL Label */ 
#line 5110
    if ((op->arg[1] & 1L) == 0L) {
      _L___8: /* CIL Label */ 
#line 5110
      if ((((int )op->spec >> 4) & 0x03) != 0x01) {
#line 5110
        if ((((int )op->spec >> 4) & 0x03) != 0x03) {
#line 5110
          return (0);
        } else {
#line 5110
          goto _L___7;
        }
      } else
      _L___7: /* CIL Label */ 
#line 5110
      if ((op->arg[2] & 1L) == 0L) {
#line 5110
        return (0);
      }
    }
  }
#line 5111
  break;
  case 1304U: 
#line 5113
  if (((int )op->spec & 0x03) != 0x01) {
#line 5113
    if (((int )op->spec & 0x03) != 0x03) {
#line 5113
      goto _L___15;
    } else {
#line 5113
      goto _L___16;
    }
  } else
  _L___16: /* CIL Label */ 
#line 5113
  if ((op->arg[0] & 1L) == 0L) {
    _L___15: /* CIL Label */ 
#line 5113
    if ((((int )op->spec >> 2) & 0x03) != 0x01) {
#line 5113
      if ((((int )op->spec >> 2) & 0x03) != 0x03) {
#line 5113
        goto _L___13;
      } else {
#line 5113
        goto _L___14;
      }
    } else
    _L___14: /* CIL Label */ 
#line 5113
    if ((op->arg[1] & 1L) == 0L) {
      _L___13: /* CIL Label */ 
#line 5113
      if ((((int )op->spec >> 4) & 0x03) != 0x01) {
#line 5113
        if ((((int )op->spec >> 4) & 0x03) != 0x03) {
#line 5113
          return (0);
        } else {
#line 5113
          goto _L___12;
        }
      } else
      _L___12: /* CIL Label */ 
#line 5113
      if ((op->arg[2] & 1L) == 1L) {
#line 5113
        return (0);
      }
    }
  }
#line 5114
  break;
  case 4104U: 
  case 4096U: 
#line 5117
  return (0);
  default: 
#line 5119
  if (! op->fp) {
#line 5119
    if (((int )op->spec & 0x03) != 0x01) {
#line 5119
      if (((int )op->spec & 0x03) != 0x03) {
#line 5119
        goto _L___20;
      } else {
#line 5119
        goto _L___21;
      }
    } else
    _L___21: /* CIL Label */ 
#line 5119
    if ((op->arg[0] & 1L) == 0L) {
      _L___20: /* CIL Label */ 
#line 5119
      if ((((int )op->spec >> 2) & 0x03) != 0x01) {
#line 5119
        if ((((int )op->spec >> 2) & 0x03) != 0x03) {
#line 5119
          goto _L___18;
        } else {
#line 5119
          goto _L___19;
        }
      } else
      _L___19: /* CIL Label */ 
#line 5119
      if ((op->arg[1] & 1L) == 0L) {
        _L___18: /* CIL Label */ 
#line 5119
        if ((((int )op->spec >> 4) & 0x03) != 0x01) {
#line 5119
          if ((((int )op->spec >> 4) & 0x03) != 0x03) {
#line 5119
            return (0);
          } else {
#line 5119
            goto _L___17;
          }
        } else
        _L___17: /* CIL Label */ 
#line 5119
        if ((op->arg[2] & 1L) == 0L) {
#line 5119
          return (0);
        }
      }
    }
  }
#line 5120
  if (op->fp) {
#line 5120
    if (((int )op->spec & 0x03) != 0x01) {
#line 5120
      if (((int )op->spec & 0x03) != 0x03) {
#line 5120
        goto _L___25;
      } else {
#line 5120
        goto _L___26;
      }
    } else
    _L___26: /* CIL Label */ 
#line 5120
    if ((op->arg[0] & 1L) == 1L) {
      _L___25: /* CIL Label */ 
#line 5120
      if ((((int )op->spec >> 2) & 0x03) != 0x01) {
#line 5120
        if ((((int )op->spec >> 2) & 0x03) != 0x03) {
#line 5120
          goto _L___23;
        } else {
#line 5120
          goto _L___24;
        }
      } else
      _L___24: /* CIL Label */ 
#line 5120
      if ((op->arg[1] & 1L) == 1L) {
        _L___23: /* CIL Label */ 
#line 5120
        if ((((int )op->spec >> 4) & 0x03) != 0x01) {
#line 5120
          if ((((int )op->spec >> 4) & 0x03) != 0x03) {
#line 5120
            return (0);
          } else {
#line 5120
            goto _L___22;
          }
        } else
        _L___22: /* CIL Label */ 
#line 5120
        if ((op->arg[2] & 1L) == 1L) {
#line 5120
          return (0);
        }
      }
    }
  }
  }
#line 5122
  append_msg(msg_buf, "register type mismatch");
#line 5123
  return (256);
}
}
/* END FUNCTION-DEF check_register_types LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF assign_call LOC=UNKNOWN */
static int assign_call(jit_op *op , struct jit_reg_allocator *al ) 
{ 


  {
#line 5389
  spill_ret_retreg(op, al->ret_reg);
#line 5390
  spill_ret_retreg(op, al->fpret_reg);
#line 5391
  return (1);
}
}
/* END FUNCTION-DEF assign_call LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_set_get LOC=UNKNOWN */
__inline static int jit_set_get(jit_set *s , int value ) 
{ 
  jit_tree *tmp ;

  {
#line 617
  tmp = jit_tree_search(s->root, (jit_tree_key )value);
#line 617
  return ((unsigned long )tmp != (unsigned long )((void *)0));
}
}
/* END FUNCTION-DEF jit_set_get LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF list_caller_saved_regs LOC=UNKNOWN */
static int list_caller_saved_regs(struct jit *jit , jit_op *op , jit_hw_reg *regs ,
                                  int reg_count , int fp , jit_hw_reg *skip_reg ,
                                  jit_hw_reg **used_regs , int *used_count ) 
{ 
  jit_value reg ;
  int skip_reg_id ;
  int tmp ;
  int i ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp___0 ;
  int tmp___1 ;
  int stack_space ;
  unsigned long long tmp___2 ;

  {
#line 2783
  if (skip_reg) {
#line 2783
    tmp = skip_reg->id;
  } else {
#line 2783
    tmp = -1;
  }
#line 2783
  skip_reg_id = tmp;
#line 2785
  *used_count = 0;
#line 2786
  i = 0;
#line 2786
  while (i < reg_count) {
#line 2787
    if ((regs + i)->id == skip_reg_id) {
#line 2787
      goto __Cont;
    } else
#line 2787
    if ((regs + i)->callee_saved) {
#line 2787
      goto __Cont;
    }
#line 2788
    tmp___0 = rmap_is_associated(op->regmap, (regs + i)->id, fp, & reg);
#line 2788
    hreg = tmp___0;
#line 2789
    if (hreg) {
#line 2789
      tmp___1 = jit_set_get(op->live_in, (int )reg);
#line 2789
      if (tmp___1) {
#line 2790
        *(used_regs + *used_count) = hreg;
#line 2791
        (*used_count) ++;
      }
    }
    __Cont: /* CIL Label */ 
#line 2786
    i ++;
  }
#line 2794
  if (fp) {
#line 2794
    tmp___2 = sizeof(double );
  } else {
#line 2794
    tmp___2 = (unsigned long long )((int )sizeof(void *));
  }
#line 2794
  stack_space = (int )((unsigned long long )*used_count * tmp___2);
#line 2795
  return (stack_space);
}
}
/* END FUNCTION-DEF list_caller_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_assoc LOC=UNKNOWN */
static void rmap_assoc(jit_rmap *rmap , jit_value reg , jit_hw_reg *hreg ) 
{ 


  {
#line 1906
  rmap->map = jit_tree_insert(rmap->map, reg, (jit_tree_value )hreg, (int *)((void *)0));
#line 1907
  return;
}
}
/* END FUNCTION-DEF rmap_assoc LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF associate_register_alias LOC=UNKNOWN */
static void associate_register_alias(struct jit_reg_allocator *al , jit_op *op , int i ) 
{ 
  long tmp ;

  {
#line 5441
  if ((int )op->arg[i] == ((2 << 1) | (1 << 4))) {
#line 5441
    op->r_arg[i] = (jit_value )(al->ret_reg)->id;
  } else
#line 5442
  if ((int )op->arg[i] == 2 << 1) {
#line 5442
    op->r_arg[i] = (jit_value )al->fp_reg;
  } else {
#line 5443
    tmp = __builtin_expect(1L, 0L);
#line 5443
    if (tmp) {
#line 5443
      __assert_rtn((char const   *)"associate_register_alias", (char const   *)"./jitter-Darwin-X86-64.c",
                   5443, (char const   *)"0");
    }
  }
#line 5444
  return;
}
}
/* END FUNCTION-DEF associate_register_alias LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF is_red LOC=UNKNOWN */
__inline static int is_red(jit_tree *n ) 
{ 


  {
#line 347
  if ((unsigned long )n == (unsigned long )((void *)0)) {
#line 347
    return (0);
  }
#line 348
  return (n->color == 1);
}
}
/* END FUNCTION-DEF is_red LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF __wcwidth LOC=UNKNOWN */
__inline int __wcwidth(__darwin_ct_rune_t _c ) 
{ 
  unsigned int _x ;
  int tmp ;
  int tmp___0 ;

  {
#line 198
  if (_c == 0) {
#line 199 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
    return (0);
  }
#line 200
  tmp = __maskrune(_c, 3758358528UL);
#line 200
  _x = (unsigned int )tmp;
#line 201
  if (((long )_x & 0xe0000000L) != 0L) {
#line 202
    return ((int )(((long )_x & 0xe0000000L) >> 30));
  }
#line 203
  if (((long )_x & 0x00040000L) != 0L) {
#line 203
    tmp___0 = 1;
  } else {
#line 203
    tmp___0 = -1;
  }
#line 203
  return (tmp___0);
}
}
/* END FUNCTION-DEF __wcwidth LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_imm_overflow LOC=UNKNOWN */
static int jit_imm_overflow(struct jit *jit , jit_op *op , jit_value value ) 
{ 
  jit_unsigned_value mask ;
  jit_unsigned_value high_bits ;

  {
#line 5866 "./jitter-Darwin-X86-64.c"
  mask = ~ ((1UL << 31) - 1UL);
#line 5867
  high_bits = (unsigned long )value & mask;
#line 5869
  if (! ((int )op->code & 0x04)) {
#line 5870
    if (high_bits != 0UL) {
#line 5870
      if (high_bits != mask) {
#line 5870
        return (1);
      }
    }
  } else
#line 5872
  if (high_bits != 0UL) {
#line 5872
    return (1);
  }
#line 5874
  return (0);
}
}
/* END FUNCTION-DEF jit_imm_overflow LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF _cipher$_xtea_encipher LOC=UNKNOWN */
void _cipher$_xtea_encipher(unsigned int block_no , unsigned int num_rounds , unsigned int *v ,
                            unsigned int *key , unsigned int size ) 
{ 
  unsigned int i ;

  {
  i = 0;
  while (i < size / 8) {
    _cipher$_xtea_encipherBlock(num_rounds, v, key);
    v += 2;
    i ++;
  }
}
}
/* END FUNCTION-DEF _cipher$_xtea_encipher LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF assign_jmp LOC=UNKNOWN */
static int assign_jmp(jit_op *op , struct jit_reg_allocator *al ) 
{ 
  jit_value reg ;
  int i ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp ;
  int tmp___0 ;
  int i___0 ;
  jit_hw_reg *hreg___0 ;
  jit_hw_reg *tmp___1 ;
  int tmp___2 ;

  {
#line 5373
  if ((int )op->code == 386) {
#line 5373
    return (0);
  }
#line 5375
  i = 0;
#line 5375
  while (i < al->gp_reg_cnt) {
#line 5376
    tmp = rmap_is_associated(op->regmap, (al->gp_regs + i)->id, 0, & reg);
#line 5376
    hreg = tmp;
#line 5377
    if (hreg) {
#line 5377
      tmp___0 = jit_set_get(op->live_out, (int )reg);
#line 5377
      if (tmp___0) {
#line 5377
        sync_reg(op, hreg, reg);
      }
    }
#line 5375
    i ++;
  }
#line 5380
  i___0 = 0;
#line 5380
  while (i___0 < al->fp_reg_cnt) {
#line 5381
    tmp___1 = rmap_is_associated(op->regmap, (al->fp_regs + i___0)->id, 1, & reg);
#line 5381
    hreg___0 = tmp___1;
#line 5382
    if (hreg___0) {
#line 5382
      tmp___2 = jit_set_get(op->live_out, (int )reg);
#line 5382
      if (tmp___2) {
#line 5382
        sync_reg(op, hreg___0, reg);
      }
    }
#line 5380
    i___0 ++;
  }
#line 5384
  return (0);
}
}
/* END FUNCTION-DEF assign_jmp LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_subset LOC=UNKNOWN */
static int rmap_subset(jit_op *op , jit_tree *current , jit_tree *target ) 
{ 
  jit_set *tgt_livein ;
  int tmp ;
  jit_tree *found ;
  jit_tree *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 1923
  if ((unsigned long )current == (unsigned long )((void *)0)) {
#line 1923
    return (1);
  }
#line 1926
  tgt_livein = (op->jmp_addr)->live_in;
#line 1928
  tmp = jit_set_get(tgt_livein, (int )current->key);
#line 1928
  if (! tmp) {
#line 1928
    goto skip;
  }
#line 1930
  tmp___0 = jit_tree_search(target, current->key);
#line 1930
  found = tmp___0;
#line 1931
  if (! found) {
#line 1931
    return (0);
  } else
#line 1931
  if ((unsigned long )current->value != (unsigned long )found->value) {
#line 1931
    return (0);
  }
  skip: 
#line 1934
  tmp___1 = rmap_subset(op, current->left, target);
#line 1934
  if (tmp___1) {
#line 1934
    tmp___2 = rmap_subset(op, current->right, target);
#line 1934
    if (tmp___2) {
#line 1934
      tmp___3 = 1;
    } else {
#line 1934
      tmp___3 = 0;
    }
  } else {
#line 1934
    tmp___3 = 0;
  }
#line 1934
  return (tmp___3);
}
}
/* END FUNCTION-DEF rmap_subset LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_memcpy LOC=UNKNOWN */
static void emit_memcpy(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                        jit_value a3 ) 
{ 


  {
#line 3517
  emit_transfer_init(jit, op, a1, a2, a3, 1);
#line 3518
  emit_transfer_loop(jit, op);
#line 3519
  return;
}
}
/* END FUNCTION-DEF emit_memcpy LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_lreg LOC=UNKNOWN */
static void emit_lreg(struct jit *jit , int hreg_id , jit_value vreg ) 
{ 
  int stack_pos ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___28 ;
  int tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  long tmp___33 ;
  unsigned char *tmp___34 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;

  {
#line 2958
  tmp = stack_reg_pos(jit, (int )vreg);
#line 2958
  stack_pos = tmp;
#line 2960
  if ((vreg & 1L) == 1L) {
#line 2960
    while (1) {
#line 2960
      tmp___0 = jit->ip;
#line 2960
      (jit->ip) ++;
#line 2960
      *tmp___0 = (unsigned char)102;
#line 2960
      while (1) {
#line 2960
        if (hreg_id > 7) {
#line 2960
          tmp___1 = 4;
        } else {
#line 2960
          tmp___1 = 0;
        }
#line 2960
        _amd64_rex_bits = (unsigned char )tmp___1;
#line 2960
        if ((int )_amd64_rex_bits != 0) {
#line 2960
          tmp___2 = jit->ip;
#line 2960
          (jit->ip) ++;
#line 2960
          *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
        }
#line 2960
        break;
      }
#line 2960
      tmp___3 = jit->ip;
#line 2960
      (jit->ip) ++;
#line 2960
      *tmp___3 = (unsigned char)15;
#line 2960
      tmp___4 = jit->ip;
#line 2960
      (jit->ip) ++;
#line 2960
      *tmp___4 = (unsigned char)18;
#line 2960
      while (1) {
#line 2960
        while (1) {
#line 2960
          if (0) {
#line 2960
            if (stack_pos == 0) {
#line 2960
              while (1) {
#line 2960
                tmp___10 = jit->ip;
#line 2960
                (jit->ip) ++;
#line 2960
                *tmp___10 = (unsigned char )((((hreg_id & 0x7) & 0x07) << 3) | 4);
#line 2960
                break;
              }
#line 2960
              while (1) {
#line 2960
                tmp___11 = jit->ip;
#line 2960
                (jit->ip) ++;
#line 2960
                *tmp___11 = (unsigned char )((4 << 3) | 4);
#line 2960
                break;
              }
            } else
#line 2960
            if ((jit_value )stack_pos >= -128L) {
#line 2960
              if ((jit_value )stack_pos <= 127L) {
#line 2960
                while (1) {
#line 2960
                  tmp___12 = jit->ip;
#line 2960
                  (jit->ip) ++;
#line 2960
                  *tmp___12 = (unsigned char )(((1 << 6) | (((hreg_id & 0x7) & 0x07) << 3)) | 4);
#line 2960
                  break;
                }
#line 2960
                while (1) {
#line 2960
                  tmp___13 = jit->ip;
#line 2960
                  (jit->ip) ++;
#line 2960
                  *tmp___13 = (unsigned char )((4 << 3) | 4);
#line 2960
                  break;
                }
#line 2960
                while (1) {
#line 2960
                  *(jit->ip) = (unsigned char )(stack_pos & 0xff);
#line 2960
                  (jit->ip) ++;
#line 2960
                  break;
                }
              } else {
#line 2960
                goto _L;
              }
            } else {
              _L: /* CIL Label */ 
#line 2960
              while (1) {
#line 2960
                tmp___14 = jit->ip;
#line 2960
                (jit->ip) ++;
#line 2960
                *tmp___14 = (unsigned char )(((2 << 6) | (((hreg_id & 0x7) & 0x07) << 3)) | 4);
#line 2960
                break;
              }
#line 2960
              while (1) {
#line 2960
                tmp___15 = jit->ip;
#line 2960
                (jit->ip) ++;
#line 2960
                *tmp___15 = (unsigned char )((4 << 3) | 4);
#line 2960
                break;
              }
#line 2960
              while (1) {
#line 2960
                imb___0.val = stack_pos;
#line 2960
                tmp___16 = jit->ip;
#line 2960
                (jit->ip) ++;
#line 2960
                *tmp___16 = imb___0.b[0];
#line 2960
                tmp___17 = jit->ip;
#line 2960
                (jit->ip) ++;
#line 2960
                *tmp___17 = imb___0.b[1];
#line 2960
                tmp___18 = jit->ip;
#line 2960
                (jit->ip) ++;
#line 2960
                *tmp___18 = imb___0.b[2];
#line 2960
                tmp___19 = jit->ip;
#line 2960
                (jit->ip) ++;
#line 2960
                *tmp___19 = imb___0.b[3];
#line 2960
                break;
              }
            }
#line 2960
            break;
          }
#line 2960
          if (stack_pos == 0) {

          }
#line 2960
          if ((jit_value )stack_pos >= -128L) {
#line 2960
            if ((jit_value )stack_pos <= 127L) {
#line 2960
              while (1) {
#line 2960
                tmp___21 = jit->ip;
#line 2960
                (jit->ip) ++;
#line 2960
                *tmp___21 = (unsigned char )(((1 << 6) | (((hreg_id & 0x7) & 0x07) << 3)) | 5);
#line 2960
                break;
              }
#line 2960
              while (1) {
#line 2960
                *(jit->ip) = (unsigned char )(stack_pos & 0xff);
#line 2960
                (jit->ip) ++;
#line 2960
                break;
              }
            } else {
#line 2960
              goto _L___0;
            }
          } else {
            _L___0: /* CIL Label */ 
#line 2960
            while (1) {
#line 2960
              tmp___22 = jit->ip;
#line 2960
              (jit->ip) ++;
#line 2960
              *tmp___22 = (unsigned char )(((2 << 6) | (((hreg_id & 0x7) & 0x07) << 3)) | 5);
#line 2960
              break;
            }
#line 2960
            while (1) {
#line 2960
              imb___1.val = stack_pos;
#line 2960
              tmp___23 = jit->ip;
#line 2960
              (jit->ip) ++;
#line 2960
              *tmp___23 = imb___1.b[0];
#line 2960
              tmp___24 = jit->ip;
#line 2960
              (jit->ip) ++;
#line 2960
              *tmp___24 = imb___1.b[1];
#line 2960
              tmp___25 = jit->ip;
#line 2960
              (jit->ip) ++;
#line 2960
              *tmp___25 = imb___1.b[2];
#line 2960
              tmp___26 = jit->ip;
#line 2960
              (jit->ip) ++;
#line 2960
              *tmp___26 = imb___1.b[3];
#line 2960
              break;
            }
          }
#line 2960
          break;
        }
#line 2960
        break;
      }
#line 2960
      break;
    }
  } else {
#line 2961
    while (1) {
#line 2961
      if ((int )sizeof(void *) == 2) {
#line 2961
        tmp___27 = jit->ip;
#line 2961
        (jit->ip) ++;
#line 2961
        *tmp___27 = (unsigned char)102;
      }
#line 2961
      while (1) {
#line 2961
        if ((int )sizeof(void *) > 4) {
#line 2961
          tmp___28 = 8;
        } else {
#line 2961
          tmp___28 = 0;
        }
#line 2961
        if (hreg_id > 7) {
#line 2961
          tmp___29 = 4;
        } else {
#line 2961
          tmp___29 = 0;
        }
#line 2961
        _amd64_rex_bits___0 = (unsigned char )(tmp___28 | tmp___29);
#line 2961
        if ((int )_amd64_rex_bits___0 != 0) {
#line 2961
          tmp___30 = jit->ip;
#line 2961
          (jit->ip) ++;
#line 2961
          *tmp___30 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
        } else
#line 2961
        if ((int )sizeof(void *) == 1) {
#line 2961
          tmp___30 = jit->ip;
#line 2961
          (jit->ip) ++;
#line 2961
          *tmp___30 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
        }
#line 2961
        break;
      }
#line 2961
      switch ((int )sizeof(void *)) {
      case 1: 
#line 2961
      tmp___31 = jit->ip;
#line 2961
      (jit->ip) ++;
#line 2961
      *tmp___31 = (unsigned char)138;
#line 2961
      break;
      case 8: 
      case 4: 
      case 2: 
#line 2961
      tmp___32 = jit->ip;
#line 2961
      (jit->ip) ++;
#line 2961
      *tmp___32 = (unsigned char)139;
#line 2961
      break;
      default: 
#line 2961
      tmp___33 = __builtin_expect(1L, 0L);
#line 2961
      if (tmp___33) {
#line 2961
        __assert_rtn((char const   *)"emit_lreg", (char const   *)"./jitter-Darwin-X86-64.c",
                     2961, (char const   *)"0");
      }
      }
#line 2961
      while (1) {
#line 2961
        while (1) {
#line 2961
          if (0) {
#line 2961
            if (stack_pos == 0) {
#line 2961
              while (1) {
#line 2961
                tmp___39 = jit->ip;
#line 2961
                (jit->ip) ++;
#line 2961
                *tmp___39 = (unsigned char )((((hreg_id & 0x7) & 0x07) << 3) | 4);
#line 2961
                break;
              }
#line 2961
              while (1) {
#line 2961
                tmp___40 = jit->ip;
#line 2961
                (jit->ip) ++;
#line 2961
                *tmp___40 = (unsigned char )((4 << 3) | 4);
#line 2961
                break;
              }
            } else
#line 2961
            if ((jit_value )stack_pos >= -128L) {
#line 2961
              if ((jit_value )stack_pos <= 127L) {
#line 2961
                while (1) {
#line 2961
                  tmp___41 = jit->ip;
#line 2961
                  (jit->ip) ++;
#line 2961
                  *tmp___41 = (unsigned char )(((1 << 6) | (((hreg_id & 0x7) & 0x07) << 3)) | 4);
#line 2961
                  break;
                }
#line 2961
                while (1) {
#line 2961
                  tmp___42 = jit->ip;
#line 2961
                  (jit->ip) ++;
#line 2961
                  *tmp___42 = (unsigned char )((4 << 3) | 4);
#line 2961
                  break;
                }
#line 2961
                while (1) {
#line 2961
                  *(jit->ip) = (unsigned char )(stack_pos & 0xff);
#line 2961
                  (jit->ip) ++;
#line 2961
                  break;
                }
              } else {
#line 2961
                goto _L___1;
              }
            } else {
              _L___1: /* CIL Label */ 
#line 2961
              while (1) {
#line 2961
                tmp___43 = jit->ip;
#line 2961
                (jit->ip) ++;
#line 2961
                *tmp___43 = (unsigned char )(((2 << 6) | (((hreg_id & 0x7) & 0x07) << 3)) | 4);
#line 2961
                break;
              }
#line 2961
              while (1) {
#line 2961
                tmp___44 = jit->ip;
#line 2961
                (jit->ip) ++;
#line 2961
                *tmp___44 = (unsigned char )((4 << 3) | 4);
#line 2961
                break;
              }
#line 2961
              while (1) {
#line 2961
                imb___3.val = stack_pos;
#line 2961
                tmp___45 = jit->ip;
#line 2961
                (jit->ip) ++;
#line 2961
                *tmp___45 = imb___3.b[0];
#line 2961
                tmp___46 = jit->ip;
#line 2961
                (jit->ip) ++;
#line 2961
                *tmp___46 = imb___3.b[1];
#line 2961
                tmp___47 = jit->ip;
#line 2961
                (jit->ip) ++;
#line 2961
                *tmp___47 = imb___3.b[2];
#line 2961
                tmp___48 = jit->ip;
#line 2961
                (jit->ip) ++;
#line 2961
                *tmp___48 = imb___3.b[3];
#line 2961
                break;
              }
            }
#line 2961
            break;
          }
#line 2961
          if (stack_pos == 0) {

          }
#line 2961
          if ((jit_value )stack_pos >= -128L) {
#line 2961
            if ((jit_value )stack_pos <= 127L) {
#line 2961
              while (1) {
#line 2961
                tmp___50 = jit->ip;
#line 2961
                (jit->ip) ++;
#line 2961
                *tmp___50 = (unsigned char )(((1 << 6) | (((hreg_id & 0x7) & 0x07) << 3)) | 5);
#line 2961
                break;
              }
#line 2961
              while (1) {
#line 2961
                *(jit->ip) = (unsigned char )(stack_pos & 0xff);
#line 2961
                (jit->ip) ++;
#line 2961
                break;
              }
            } else {
#line 2961
              goto _L___2;
            }
          } else {
            _L___2: /* CIL Label */ 
#line 2961
            while (1) {
#line 2961
              tmp___51 = jit->ip;
#line 2961
              (jit->ip) ++;
#line 2961
              *tmp___51 = (unsigned char )(((2 << 6) | (((hreg_id & 0x7) & 0x07) << 3)) | 5);
#line 2961
              break;
            }
#line 2961
            while (1) {
#line 2961
              imb___4.val = stack_pos;
#line 2961
              tmp___52 = jit->ip;
#line 2961
              (jit->ip) ++;
#line 2961
              *tmp___52 = imb___4.b[0];
#line 2961
              tmp___53 = jit->ip;
#line 2961
              (jit->ip) ++;
#line 2961
              *tmp___53 = imb___4.b[1];
#line 2961
              tmp___54 = jit->ip;
#line 2961
              (jit->ip) ++;
#line 2961
              *tmp___54 = imb___4.b[2];
#line 2961
              tmp___55 = jit->ip;
#line 2961
              (jit->ip) ++;
#line 2961
              *tmp___55 = imb___4.b[3];
#line 2961
              break;
            }
          }
#line 2961
          break;
        }
#line 2961
        break;
      }
#line 2961
      break;
    }
  }
#line 2962
  return;
}
}
/* END FUNCTION-DEF emit_lreg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_restore_all_regs LOC=UNKNOWN */
static void emit_restore_all_regs(struct jit *jit , jit_op *op ) 
{ 
  int alignment ;
  int tmp ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  x86_imm_buf imb ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  struct jit_reg_allocator *al ;
  int i ;
  jit_hw_reg *reg ;
  unsigned char *tmp___16 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  int tmp___59 ;
  int i___0 ;
  jit_hw_reg *reg___0 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  int tmp___63 ;
  unsigned char _amd64_rex_bits___7 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;

  {
#line 2938
  tmp = required_stack_space_for_regs(jit, op);
#line 2938
  alignment = tmp % 16;
#line 2939
  if (alignment != 0) {
#line 2939
    while (1) {
#line 2939
      if ((jit_value )(16 - alignment) >= -128L) {
#line 2939
        if ((jit_value )(16 - alignment) <= 127L) {
#line 2939
          while (1) {
#line 2939
            _amd64_rex_bits = (unsigned char)8;
#line 2939
            if ((int )_amd64_rex_bits != 0) {
#line 2939
              tmp___0 = jit->ip;
#line 2939
              (jit->ip) ++;
#line 2939
              *tmp___0 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
            }
#line 2939
            break;
          }
#line 2939
          tmp___1 = jit->ip;
#line 2939
          (jit->ip) ++;
#line 2939
          *tmp___1 = (unsigned char)131;
#line 2939
          while (1) {
#line 2939
            while (1) {
#line 2939
              tmp___2 = jit->ip;
#line 2939
              (jit->ip) ++;
#line 2939
              *tmp___2 = (unsigned char )((3 << 6) | 4);
#line 2939
              break;
            }
#line 2939
            break;
          }
#line 2939
          while (1) {
#line 2939
            *(jit->ip) = (unsigned char )((16 - alignment) & 0xff);
#line 2939
            (jit->ip) ++;
#line 2939
            break;
          }
        } else {
#line 2939
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
#line 2939
        while (1) {
#line 2939
          _amd64_rex_bits___1 = (unsigned char)8;
#line 2939
          if ((int )_amd64_rex_bits___1 != 0) {
#line 2939
            tmp___9 = jit->ip;
#line 2939
            (jit->ip) ++;
#line 2939
            *tmp___9 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
          }
#line 2939
          break;
        }
#line 2939
        tmp___10 = jit->ip;
#line 2939
        (jit->ip) ++;
#line 2939
        *tmp___10 = (unsigned char)129;
#line 2939
        while (1) {
#line 2939
          while (1) {
#line 2939
            tmp___11 = jit->ip;
#line 2939
            (jit->ip) ++;
#line 2939
            *tmp___11 = (unsigned char )((3 << 6) | 4);
#line 2939
            break;
          }
#line 2939
          break;
        }
#line 2939
        while (1) {
#line 2939
          imb___0.val = 16 - alignment;
#line 2939
          tmp___12 = jit->ip;
#line 2939
          (jit->ip) ++;
#line 2939
          *tmp___12 = imb___0.b[0];
#line 2939
          tmp___13 = jit->ip;
#line 2939
          (jit->ip) ++;
#line 2939
          *tmp___13 = imb___0.b[1];
#line 2939
          tmp___14 = jit->ip;
#line 2939
          (jit->ip) ++;
#line 2939
          *tmp___14 = imb___0.b[2];
#line 2939
          tmp___15 = jit->ip;
#line 2939
          (jit->ip) ++;
#line 2939
          *tmp___15 = imb___0.b[3];
#line 2939
          break;
        }
      }
#line 2939
      break;
    }
  }
#line 2941
  al = jit->reg_al;
#line 2943
  i = al->fp_reg_cnt - 1;
#line 2943
  while (i >= 0) {
#line 2944
    reg = al->fp_regs + i;
#line 2945
    if (! reg->callee_saved) {
#line 2945
      tmp___59 = is_active_register(al, reg, op);
#line 2945
      if (tmp___59) {
#line 2946
        while (1) {
#line 2946
          tmp___16 = jit->ip;
#line 2946
          (jit->ip) ++;
#line 2946
          *tmp___16 = (unsigned char)102;
#line 2946
          while (1) {
#line 2946
            if (reg->id > 7) {
#line 2946
              tmp___17 = 4;
            } else {
#line 2946
              tmp___17 = 0;
            }
#line 2946
            _amd64_rex_bits___2 = (unsigned char )tmp___17;
#line 2946
            if ((int )_amd64_rex_bits___2 != 0) {
#line 2946
              tmp___18 = jit->ip;
#line 2946
              (jit->ip) ++;
#line 2946
              *tmp___18 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
            }
#line 2946
            break;
          }
#line 2946
          tmp___19 = jit->ip;
#line 2946
          (jit->ip) ++;
#line 2946
          *tmp___19 = (unsigned char)15;
#line 2946
          tmp___20 = jit->ip;
#line 2946
          (jit->ip) ++;
#line 2946
          *tmp___20 = (unsigned char)18;
#line 2946
          while (1) {
#line 2946
            while (1) {
#line 2946
              while (1) {
#line 2946
                tmp___26 = jit->ip;
#line 2946
                (jit->ip) ++;
#line 2946
                *tmp___26 = (unsigned char )((((reg->id & 0x7) & 0x07) << 3) | 4);
#line 2946
                break;
              }
#line 2946
              while (1) {
#line 2946
                tmp___27 = jit->ip;
#line 2946
                (jit->ip) ++;
#line 2946
                *tmp___27 = (unsigned char )((4 << 3) | 4);
#line 2946
                break;
              }
#line 2946
              break;
#line 2946
              while (1) {
#line 2946
                tmp___36 = jit->ip;
#line 2946
                (jit->ip) ++;
#line 2946
                *tmp___36 = (unsigned char )((((reg->id & 0x7) & 0x07) << 3) | 4);
#line 2946
                break;
              }
#line 2946
              break;
#line 2946
              while (1) {
#line 2946
                tmp___37 = jit->ip;
#line 2946
                (jit->ip) ++;
#line 2946
                *tmp___37 = (unsigned char )(((1 << 6) | (((reg->id & 0x7) & 0x07) << 3)) | 4);
#line 2946
                break;
              }
#line 2946
              while (1) {
#line 2946
                *(jit->ip) = (unsigned char)0;
#line 2946
                (jit->ip) ++;
#line 2946
                break;
              }
#line 2946
              break;
            }
#line 2946
            break;
          }
#line 2946
          break;
        }
#line 2946
        while (1) {
#line 2946
          while (1) {
#line 2946
            _amd64_rex_bits___3 = (unsigned char)8;
#line 2946
            if ((int )_amd64_rex_bits___3 != 0) {
#line 2946
              tmp___43 = jit->ip;
#line 2946
              (jit->ip) ++;
#line 2946
              *tmp___43 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
            }
#line 2946
            break;
          }
#line 2946
          tmp___44 = jit->ip;
#line 2946
          (jit->ip) ++;
#line 2946
          *tmp___44 = (unsigned char)131;
#line 2946
          while (1) {
#line 2946
            while (1) {
#line 2946
              tmp___45 = jit->ip;
#line 2946
              (jit->ip) ++;
#line 2946
              *tmp___45 = (unsigned char )((3 << 6) | 4);
#line 2946
              break;
            }
#line 2946
            break;
          }
#line 2946
          while (1) {
#line 2946
            *(jit->ip) = (unsigned char)8;
#line 2946
            (jit->ip) ++;
#line 2946
            break;
          }
#line 2946
          break;
        }
      }
    }
#line 2946
    while (1) {
#line 2946
      break;
    }
#line 2943
    i --;
  }
#line 2949
  i___0 = al->gp_reg_cnt - 1;
#line 2949
  while (i___0 >= 0) {
#line 2950
    reg___0 = al->gp_regs + i___0;
#line 2951
    if (! reg___0->callee_saved) {
#line 2951
      tmp___63 = is_active_register(al, reg___0, op);
#line 2951
      if (tmp___63) {
#line 2952
        while (1) {
#line 2952
          while (1) {
#line 2952
            if (reg___0->id > 7) {
#line 2952
              tmp___60 = 1;
            } else {
#line 2952
              tmp___60 = 0;
            }
#line 2952
            _amd64_rex_bits___6 = (unsigned char )tmp___60;
#line 2952
            if ((int )_amd64_rex_bits___6 != 0) {
#line 2952
              tmp___61 = jit->ip;
#line 2952
              (jit->ip) ++;
#line 2952
              *tmp___61 = (unsigned char )(0x40 | (int )_amd64_rex_bits___6);
            }
#line 2952
            break;
          }
#line 2952
          tmp___62 = jit->ip;
#line 2952
          (jit->ip) ++;
#line 2952
          *tmp___62 = (unsigned char )(88 + (reg___0->id & 0x7));
#line 2952
          break;
        }
      }
    }
#line 2949
    i___0 --;
  }
#line 2954
  while (1) {
#line 2954
    while (1) {
#line 2954
      _amd64_rex_bits___7 = (unsigned char)8;
#line 2954
      if ((int )_amd64_rex_bits___7 != 0) {
#line 2954
        tmp___64 = jit->ip;
#line 2954
        (jit->ip) ++;
#line 2954
        *tmp___64 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
      }
#line 2954
      break;
    }
#line 2954
    while (1) {
#line 2954
      tmp___65 = jit->ip;
#line 2954
      (jit->ip) ++;
#line 2954
      *tmp___65 = (unsigned char)157;
#line 2954
      break;
    }
#line 2954
    break;
  }
#line 2955
  return;
}
}
/* END FUNCTION-DEF emit_restore_all_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_check_code LOC=UNKNOWN */
void jit_check_code(struct jit *jit , int warnings ) 
{ 
  char buf[8192] ;
  jit_op *op ;
  jit_op *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
#line 5175
  jit_expand_patches_and_labels(jit);
#line 5176
  jit_dead_code_analysis(jit, 0);
#line 5177
  jit_prepare_reg_counts(jit);
#line 5178
  jit_prepare_arguments(jit);
#line 5179
  jit_flw_analysis(jit);
#line 5181
  tmp = jit_op_first(jit->ops);
#line 5181
  op = tmp;
#line 5181
  while (op) {
#line 5182
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 128U) {
#line 5182
      jit->current_func = op;
    }
#line 5183
    if (! op->debug_info) {
#line 5183
      goto __Cont;
    }
#line 5184
    buf[0] = (char )'\000';
#line 5186
    if (warnings & 1) {
#line 5186
      tmp___0 = check_dead_code(op, buf);
#line 5186
      (op->debug_info)->warnings |= tmp___0;
    }
#line 5187
    if (warnings & 128) {
#line 5187
      tmp___1 = check_missing_patches(op, buf);
#line 5187
      (op->debug_info)->warnings |= tmp___1;
    }
#line 5188
    if (warnings & 2) {
#line 5188
      tmp___2 = check_op_without_effect(op, buf);
#line 5188
      (op->debug_info)->warnings |= tmp___2;
    }
#line 5189
    if (warnings & 8) {
#line 5189
      tmp___3 = check_uninitialized_registers(op, buf);
#line 5189
      (op->debug_info)->warnings |= tmp___3;
    }
#line 5190
    if (warnings & 4) {
#line 5190
      tmp___4 = check_argument_sizes(op, buf);
#line 5190
      (op->debug_info)->warnings |= tmp___4;
    }
#line 5191
    if (warnings & 256) {
#line 5191
      tmp___5 = check_register_types(jit, op, buf);
#line 5191
      (op->debug_info)->warnings |= tmp___5;
    }
#line 5192
    if (warnings & 16) {
#line 5192
      tmp___6 = check_data_alignment(op, buf);
#line 5192
      (op->debug_info)->warnings |= tmp___6;
    }
#line 5193
    if (warnings & 64) {
#line 5193
      tmp___7 = check_data_references(op, buf);
#line 5193
      (op->debug_info)->warnings |= tmp___7;
    }
#line 5194
    if (warnings & 32) {
#line 5194
      tmp___8 = check_code_references(op, buf);
#line 5194
      (op->debug_info)->warnings |= tmp___8;
    }
#line 5196
    if ((op->debug_info)->warnings) {
#line 5196
      report_warning(jit, op, buf);
    }
    __Cont: /* CIL Label */ 
#line 5181
    op = op->next;
  }
#line 5199
  cleanup(jit);
#line 5200
  return;
}
}
/* END FUNCTION-DEF jit_check_code LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_assign_regs LOC=UNKNOWN */
void jit_assign_regs(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  jit_op *op___0 ;
  jit_op *tmp___0 ;
  jit_op *op___1 ;
  jit_op *tmp___1 ;
  jit_op *op___2 ;
  jit_op *tmp___2 ;

  {
#line 5715
  tmp = jit_op_first(jit->ops);
#line 5715
  op = tmp;
#line 5715
  while ((unsigned long )op != (unsigned long )((void *)0)) {
#line 5716
    op->regmap = rmap_init();
#line 5715
    op = op->next;
  }
#line 5718
  tmp___0 = jit_op_first(jit->ops);
#line 5718
  op___0 = tmp___0;
#line 5718
  while ((unsigned long )op___0 != (unsigned long )((void *)0)) {
#line 5719
    assign_regs(jit, op___0);
#line 5718
    op___0 = op___0->next;
  }
#line 5721
  tmp___1 = jit_op_first(jit->ops);
#line 5721
  op___1 = tmp___1;
#line 5721
  while ((unsigned long )op___1 != (unsigned long )((void *)0)) {
#line 5722
    branch_adjustment(jit, op___1);
#line 5721
    op___1 = op___1->next;
  }
#line 5724
  tmp___2 = jit_op_first(jit->ops);
#line 5724
  op___2 = tmp___2;
#line 5724
  while ((unsigned long )op___2 != (unsigned long )((void *)0)) {
#line 5725
    jump_adjustment(jit, op___2);
#line 5724
    op___2 = op___2->next;
  }
#line 5726
  return;
}
}
/* END FUNCTION-DEF jit_assign_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_str LOC=UNKNOWN */
__inline static void print_str(struct output_buf *buf , char *str ) 
{ 
  int i ;
  char xbuf[16] ;
  unsigned long long tmp ;
  unsigned long long tmp___0 ;
  unsigned long long tmp___1 ;
  unsigned long long tmp___2 ;
  size_t tmp___3 ;

  {
#line 4402
  ob_append(buf, " \"");
#line 4403
  i = 0;
#line 4403
  while (1) {
#line 4403
    tmp___3 = strlen((char const   *)str);
#line 4403
    if (! ((size_t )i < tmp___3)) {
#line 4403
      break;
    }
#line 4404
    if ((int )*(str + i) >= 32) {
#line 4406
      ob_printf(buf, (char const   *)"%c", (int )*(str + i));
    } else {
#line 4411
      switch ((int )*(str + i)) {
      case 9: 
#line 4412
      tmp = __builtin_object_size((void *)(xbuf), 1);
#line 4412
      __builtin___strcpy_chk(xbuf, (char const   *)"\\t", tmp);
#line 4412
      break;
      case 10: 
#line 4413
      tmp___0 = __builtin_object_size((void *)(xbuf), 1);
#line 4413
      __builtin___strcpy_chk(xbuf, (char const   *)"\\n", tmp___0);
#line 4413
      break;
      case 13: 
#line 4414
      tmp___1 = __builtin_object_size((void *)(xbuf), 1);
#line 4414
      __builtin___strcpy_chk(xbuf, (char const   *)"\\r", tmp___1);
#line 4414
      break;
      default: 
#line 4415
      tmp___2 = __builtin_object_size((void *)(xbuf), 1);
#line 4415
      __builtin___sprintf_chk(xbuf, 0, tmp___2, (char const   *)"\\x%02x", (int )*(str + i));
      }
#line 4417
      ob_append(buf, xbuf);
    }
#line 4403
    i ++;
  }
#line 4420
  ob_append(buf, "\"");
#line 4421
  return;
}
}
/* END FUNCTION-DEF print_str LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_mul_op LOC=UNKNOWN */
static void emit_mul_op(struct jit *jit , struct jit_op *op , int imm , int sign ,
                        int high_bytes ) 
{ 
  jit_value dest ;
  jit_value factor1 ;
  jit_value factor2 ;
  unsigned char _amd64_rex_bits ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  x86_imm_buf imb ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___48 ;
  int tmp___49 ;
  int tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  long tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___62 ;
  int tmp___63 ;
  int tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___84 ;
  int tmp___85 ;
  int tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  long tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___98 ;
  int tmp___99 ;
  int tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___115 ;
  unsigned char *tmp___116 ;
  unsigned char *tmp___117 ;
  unsigned char *tmp___118 ;
  int ax_in_use ;
  int tmp___119 ;
  int dx_in_use ;
  int tmp___120 ;
  unsigned char _amd64_rex_bits___8 ;
  unsigned char *tmp___121 ;
  unsigned char *tmp___122 ;
  unsigned char _amd64_rex_bits___9 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  unsigned char *tmp___125 ;
  unsigned char _amd64_rex_bits___10 ;
  int tmp___126 ;
  int tmp___127 ;
  unsigned char *tmp___128 ;
  unsigned char *tmp___129 ;
  unsigned char *tmp___130 ;
  long tmp___131 ;
  unsigned char *tmp___132 ;
  unsigned char _amd64_rex_bits___11 ;
  int tmp___133 ;
  unsigned char *tmp___134 ;
  unsigned char *tmp___135 ;
  amd64_imm_buf imb___7 ;
  unsigned char *tmp___136 ;
  unsigned char *tmp___137 ;
  unsigned char *tmp___138 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  unsigned char *tmp___141 ;
  unsigned char *tmp___142 ;
  unsigned char *tmp___143 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  unsigned char *tmp___146 ;
  unsigned char *tmp___147 ;
  unsigned char _amd64_rex_bits___12 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;
  unsigned char *tmp___150 ;
  int tmp___151 ;
  unsigned char _amd64_rex_bits___13 ;
  int tmp___152 ;
  unsigned char *tmp___153 ;
  unsigned char *tmp___154 ;
  unsigned char *tmp___155 ;
  int tmp___156 ;
  unsigned char _amd64_rex_bits___14 ;
  int tmp___157 ;
  unsigned char *tmp___158 ;
  unsigned char *tmp___159 ;
  unsigned char *tmp___160 ;
  int tmp___161 ;
  unsigned char *tmp___162 ;
  unsigned char _amd64_rex_bits___15 ;
  int tmp___163 ;
  int tmp___164 ;
  unsigned char *tmp___165 ;
  unsigned char *tmp___166 ;
  unsigned char *tmp___167 ;
  long tmp___168 ;
  unsigned char *tmp___169 ;
  unsigned char _amd64_rex_bits___16 ;
  int tmp___170 ;
  unsigned char *tmp___171 ;
  unsigned char *tmp___172 ;
  unsigned char *tmp___173 ;
  int tmp___174 ;
  unsigned char *tmp___175 ;
  unsigned char _amd64_rex_bits___17 ;
  int tmp___176 ;
  int tmp___177 ;
  unsigned char *tmp___178 ;
  unsigned char *tmp___179 ;
  unsigned char *tmp___180 ;
  long tmp___181 ;
  unsigned char *tmp___182 ;
  unsigned char *tmp___183 ;
  unsigned char _amd64_rex_bits___18 ;
  int tmp___184 ;
  int tmp___185 ;
  unsigned char *tmp___186 ;
  unsigned char *tmp___187 ;
  unsigned char *tmp___188 ;
  long tmp___189 ;
  unsigned char *tmp___190 ;
  unsigned char _amd64_rex_bits___19 ;
  unsigned char *tmp___191 ;
  unsigned char *tmp___192 ;
  unsigned char _amd64_rex_bits___20 ;
  unsigned char *tmp___193 ;
  unsigned char *tmp___194 ;

  {
#line 3128
  dest = op->r_arg[0];
#line 3129
  factor1 = op->r_arg[1];
#line 3130
  factor2 = op->r_arg[2];
#line 3133
  if (! high_bytes) {
#line 3133
    if (imm) {
#line 3134
      switch (factor2) {
      case 2L: 
#line 3135
      if (factor1 == dest) {
#line 3135
        while (1) {
#line 3135
          while (1) {
#line 3135
            if (dest > 7L) {
#line 3135
              tmp = 1;
            } else {
#line 3135
              tmp = 0;
            }
#line 3135
            _amd64_rex_bits = (unsigned char )(8 | tmp);
#line 3135
            if ((int )_amd64_rex_bits != 0) {
#line 3135
              tmp___0 = jit->ip;
#line 3135
              (jit->ip) ++;
#line 3135
              *tmp___0 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
            }
#line 3135
            break;
          }
#line 3135
          while (1) {
#line 3135
            tmp___1 = jit->ip;
#line 3135
            (jit->ip) ++;
#line 3135
            *tmp___1 = (unsigned char)209;
#line 3135
            while (1) {
#line 3135
              while (1) {
#line 3135
                tmp___2 = jit->ip;
#line 3135
                (jit->ip) ++;
#line 3135
                *tmp___2 = (unsigned char )((long )((3 << 6) | (4 << 3)) | ((dest & 7L) & 7L));
#line 3135
                break;
              }
#line 3135
              break;
            }
#line 3135
            break;
          }
#line 3135
          break;
        }
      } else {
#line 3136
        while (1) {
#line 3136
          while (1) {
#line 3136
            if (dest > 7L) {
#line 3136
              tmp___5 = 4;
            } else {
#line 3136
              tmp___5 = 0;
            }
#line 3136
            if (factor1 > 7L) {
#line 3136
              tmp___6 = 2;
            } else {
#line 3136
              tmp___6 = 0;
            }
#line 3136
            if (factor1 > 7L) {
#line 3136
              tmp___7 = 1;
            } else {
#line 3136
              tmp___7 = 0;
            }
#line 3136
            _amd64_rex_bits___0 = (unsigned char )(((8 | tmp___5) | tmp___6) | tmp___7);
#line 3136
            if ((int )_amd64_rex_bits___0 != 0) {
#line 3136
              tmp___8 = jit->ip;
#line 3136
              (jit->ip) ++;
#line 3136
              *tmp___8 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
            }
#line 3136
            break;
          }
#line 3136
          while (1) {
#line 3136
            tmp___9 = jit->ip;
#line 3136
            (jit->ip) ++;
#line 3136
            *tmp___9 = (unsigned char)141;
#line 3136
            while (1) {
#line 3136
              if (factor1 == -1L) {
#line 3136
                while (1) {
#line 3136
                  tmp___10 = jit->ip;
#line 3136
                  (jit->ip) ++;
#line 3136
                  *tmp___10 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
#line 3136
                  break;
                }
#line 3136
                while (1) {
#line 3136
                  tmp___11 = jit->ip;
#line 3136
                  (jit->ip) ++;
#line 3136
                  *tmp___11 = (unsigned char )((((factor1 & 7L) & 7L) << 3) | 5L);
#line 3136
                  break;
                }
#line 3136
                while (1) {
#line 3136
                  imb.val = 0;
#line 3136
                  tmp___12 = jit->ip;
#line 3136
                  (jit->ip) ++;
#line 3136
                  *tmp___12 = imb.b[0];
#line 3136
                  tmp___13 = jit->ip;
#line 3136
                  (jit->ip) ++;
#line 3136
                  *tmp___13 = imb.b[1];
#line 3136
                  tmp___14 = jit->ip;
#line 3136
                  (jit->ip) ++;
#line 3136
                  *tmp___14 = imb.b[2];
#line 3136
                  tmp___15 = jit->ip;
#line 3136
                  (jit->ip) ++;
#line 3136
                  *tmp___15 = imb.b[3];
#line 3136
                  break;
                }
              } else
#line 3136
              if (factor1 != 5L) {
#line 3136
                while (1) {
#line 3136
                  tmp___16 = jit->ip;
#line 3136
                  (jit->ip) ++;
#line 3136
                  *tmp___16 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
#line 3136
                  break;
                }
#line 3136
                while (1) {
#line 3136
                  tmp___17 = jit->ip;
#line 3136
                  (jit->ip) ++;
#line 3136
                  *tmp___17 = (unsigned char )(((((factor1 & 7L) & 7L) & 7L) << 3) | ((factor1 & 7L) & 7L));
#line 3136
                  break;
                }
              } else {
#line 3136
                while (1) {
#line 3136
                  tmp___18 = jit->ip;
#line 3136
                  (jit->ip) ++;
#line 3136
                  *tmp___18 = (unsigned char )(((long )(1 << 6) | (((dest & 7L) & 7L) << 3)) | 4L);
#line 3136
                  break;
                }
#line 3136
                while (1) {
#line 3136
                  tmp___19 = jit->ip;
#line 3136
                  (jit->ip) ++;
#line 3136
                  *tmp___19 = (unsigned char )(((((factor1 & 7L) & 7L) & 7L) << 3) | ((factor1 & 7L) & 7L));
#line 3136
                  break;
                }
#line 3136
                while (1) {
#line 3136
                  *(jit->ip) = (unsigned char)0;
#line 3136
                  (jit->ip) ++;
#line 3136
                  break;
                }
              }
#line 3136
              break;
            }
#line 3136
            break;
          }
#line 3136
          break;
        }
      }
#line 3137
      return;
      case 3L: 
#line 3139
      while (1) {
#line 3139
        while (1) {
#line 3139
          if (dest > 7L) {
#line 3139
            tmp___26 = 4;
          } else {
#line 3139
            tmp___26 = 0;
          }
#line 3139
          if (factor1 > 7L) {
#line 3139
            tmp___27 = 2;
          } else {
#line 3139
            tmp___27 = 0;
          }
#line 3139
          if (factor1 > 7L) {
#line 3139
            tmp___28 = 1;
          } else {
#line 3139
            tmp___28 = 0;
          }
#line 3139
          _amd64_rex_bits___1 = (unsigned char )(((8 | tmp___26) | tmp___27) | tmp___28);
#line 3139
          if ((int )_amd64_rex_bits___1 != 0) {
#line 3139
            tmp___29 = jit->ip;
#line 3139
            (jit->ip) ++;
#line 3139
            *tmp___29 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
          }
#line 3139
          break;
        }
#line 3139
        while (1) {
#line 3139
          tmp___30 = jit->ip;
#line 3139
          (jit->ip) ++;
#line 3139
          *tmp___30 = (unsigned char)141;
#line 3139
          while (1) {
#line 3139
            if (factor1 == -1L) {
#line 3139
              while (1) {
#line 3139
                tmp___31 = jit->ip;
#line 3139
                (jit->ip) ++;
#line 3139
                *tmp___31 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
#line 3139
                break;
              }
#line 3139
              while (1) {
#line 3139
                tmp___32 = jit->ip;
#line 3139
                (jit->ip) ++;
#line 3139
                *tmp___32 = (unsigned char )(((long )(1 << 6) | (((factor1 & 7L) & 7L) << 3)) | 5L);
#line 3139
                break;
              }
#line 3139
              while (1) {
#line 3139
                imb___1.val = 0;
#line 3139
                tmp___33 = jit->ip;
#line 3139
                (jit->ip) ++;
#line 3139
                *tmp___33 = imb___1.b[0];
#line 3139
                tmp___34 = jit->ip;
#line 3139
                (jit->ip) ++;
#line 3139
                *tmp___34 = imb___1.b[1];
#line 3139
                tmp___35 = jit->ip;
#line 3139
                (jit->ip) ++;
#line 3139
                *tmp___35 = imb___1.b[2];
#line 3139
                tmp___36 = jit->ip;
#line 3139
                (jit->ip) ++;
#line 3139
                *tmp___36 = imb___1.b[3];
#line 3139
                break;
              }
            } else
#line 3139
            if (factor1 != 5L) {
#line 3139
              while (1) {
#line 3139
                tmp___37 = jit->ip;
#line 3139
                (jit->ip) ++;
#line 3139
                *tmp___37 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
#line 3139
                break;
              }
#line 3139
              while (1) {
#line 3139
                tmp___38 = jit->ip;
#line 3139
                (jit->ip) ++;
#line 3139
                *tmp___38 = (unsigned char )(((long )(1 << 6) | ((((factor1 & 7L) & 7L) & 7L) << 3)) | ((factor1 & 7L) & 7L));
#line 3139
                break;
              }
            } else {
#line 3139
              while (1) {
#line 3139
                tmp___39 = jit->ip;
#line 3139
                (jit->ip) ++;
#line 3139
                *tmp___39 = (unsigned char )(((long )(1 << 6) | (((dest & 7L) & 7L) << 3)) | 4L);
#line 3139
                break;
              }
#line 3139
              while (1) {
#line 3139
                tmp___40 = jit->ip;
#line 3139
                (jit->ip) ++;
#line 3139
                *tmp___40 = (unsigned char )(((long )(1 << 6) | ((((factor1 & 7L) & 7L) & 7L) << 3)) | ((factor1 & 7L) & 7L));
#line 3139
                break;
              }
#line 3139
              while (1) {
#line 3139
                *(jit->ip) = (unsigned char)0;
#line 3139
                (jit->ip) ++;
#line 3139
                break;
              }
            }
#line 3139
            break;
          }
#line 3139
          break;
        }
#line 3139
        break;
      }
#line 3139
      return;
      case 4L: 
#line 3141
      if (factor1 != dest) {
#line 3141
        while (1) {
#line 3141
          if ((int )sizeof(void *) == 2) {
#line 3141
            tmp___47 = jit->ip;
#line 3141
            (jit->ip) ++;
#line 3141
            *tmp___47 = (unsigned char)102;
          }
#line 3141
          while (1) {
#line 3141
            if ((int )sizeof(void *) > 4) {
#line 3141
              tmp___48 = 8;
            } else {
#line 3141
              tmp___48 = 0;
            }
#line 3141
            if (dest > 7L) {
#line 3141
              tmp___49 = 4;
            } else {
#line 3141
              tmp___49 = 0;
            }
#line 3141
            if (factor1 > 7L) {
#line 3141
              tmp___50 = 1;
            } else {
#line 3141
              tmp___50 = 0;
            }
#line 3141
            _amd64_rex_bits___2 = (unsigned char )((tmp___48 | tmp___49) | tmp___50);
#line 3141
            if ((int )_amd64_rex_bits___2 != 0) {
#line 3141
              tmp___51 = jit->ip;
#line 3141
              (jit->ip) ++;
#line 3141
              *tmp___51 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
            } else
#line 3141
            if ((int )sizeof(void *) == 1) {
#line 3141
              tmp___51 = jit->ip;
#line 3141
              (jit->ip) ++;
#line 3141
              *tmp___51 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
            }
#line 3141
            break;
          }
#line 3141
          switch ((int )sizeof(void *)) {
          case 1: 
#line 3141
          tmp___52 = jit->ip;
#line 3141
          (jit->ip) ++;
#line 3141
          *tmp___52 = (unsigned char)138;
#line 3141
          break;
          case 8: 
          case 4: 
          case 2: 
#line 3141
          tmp___53 = jit->ip;
#line 3141
          (jit->ip) ++;
#line 3141
          *tmp___53 = (unsigned char)139;
#line 3141
          break;
          default: 
#line 3141
          tmp___54 = __builtin_expect(1L, 0L);
#line 3141
          if (tmp___54) {
#line 3141
            __assert_rtn((char const   *)"emit_mul_op", (char const   *)"./jitter-Darwin-X86-64.c",
                         3141, (char const   *)"0");
          }
          }
#line 3141
          while (1) {
#line 3141
            while (1) {
#line 3141
              tmp___55 = jit->ip;
#line 3141
              (jit->ip) ++;
#line 3141
              *tmp___55 = (unsigned char )(((long )(3 << 6) | ((dest & 7L) << 3)) | (factor1 & 7L));
#line 3141
              break;
            }
#line 3141
            break;
          }
#line 3141
          break;
        }
      }
#line 3142
      while (1) {
#line 3142
        while (1) {
#line 3142
          if (dest > 7L) {
#line 3142
            tmp___56 = 1;
          } else {
#line 3142
            tmp___56 = 0;
          }
#line 3142
          _amd64_rex_bits___3 = (unsigned char )(8 | tmp___56);
#line 3142
          if ((int )_amd64_rex_bits___3 != 0) {
#line 3142
            tmp___57 = jit->ip;
#line 3142
            (jit->ip) ++;
#line 3142
            *tmp___57 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
          }
#line 3142
          break;
        }
#line 3142
        while (1) {
#line 3142
          tmp___60 = jit->ip;
#line 3142
          (jit->ip) ++;
#line 3142
          *tmp___60 = (unsigned char)193;
#line 3142
          while (1) {
#line 3142
            while (1) {
#line 3142
              tmp___61 = jit->ip;
#line 3142
              (jit->ip) ++;
#line 3142
              *tmp___61 = (unsigned char )((long )((3 << 6) | (4 << 3)) | ((dest & 7L) & 7L));
#line 3142
              break;
            }
#line 3142
            break;
          }
#line 3142
          while (1) {
#line 3142
            *(jit->ip) = (unsigned char)2;
#line 3142
            (jit->ip) ++;
#line 3142
            break;
          }
#line 3142
          break;
        }
#line 3142
        break;
      }
#line 3143
      return;
      case 5L: 
#line 3144
      while (1) {
#line 3144
        while (1) {
#line 3144
          if (dest > 7L) {
#line 3144
            tmp___62 = 4;
          } else {
#line 3144
            tmp___62 = 0;
          }
#line 3144
          if (factor1 > 7L) {
#line 3144
            tmp___63 = 2;
          } else {
#line 3144
            tmp___63 = 0;
          }
#line 3144
          if (factor1 > 7L) {
#line 3144
            tmp___64 = 1;
          } else {
#line 3144
            tmp___64 = 0;
          }
#line 3144
          _amd64_rex_bits___4 = (unsigned char )(((8 | tmp___62) | tmp___63) | tmp___64);
#line 3144
          if ((int )_amd64_rex_bits___4 != 0) {
#line 3144
            tmp___65 = jit->ip;
#line 3144
            (jit->ip) ++;
#line 3144
            *tmp___65 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
          }
#line 3144
          break;
        }
#line 3144
        while (1) {
#line 3144
          tmp___66 = jit->ip;
#line 3144
          (jit->ip) ++;
#line 3144
          *tmp___66 = (unsigned char)141;
#line 3144
          while (1) {
#line 3144
            if (factor1 == -1L) {
#line 3144
              while (1) {
#line 3144
                tmp___67 = jit->ip;
#line 3144
                (jit->ip) ++;
#line 3144
                *tmp___67 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
#line 3144
                break;
              }
#line 3144
              while (1) {
#line 3144
                tmp___68 = jit->ip;
#line 3144
                (jit->ip) ++;
#line 3144
                *tmp___68 = (unsigned char )(((long )(2 << 6) | (((factor1 & 7L) & 7L) << 3)) | 5L);
#line 3144
                break;
              }
#line 3144
              while (1) {
#line 3144
                imb___3.val = 0;
#line 3144
                tmp___69 = jit->ip;
#line 3144
                (jit->ip) ++;
#line 3144
                *tmp___69 = imb___3.b[0];
#line 3144
                tmp___70 = jit->ip;
#line 3144
                (jit->ip) ++;
#line 3144
                *tmp___70 = imb___3.b[1];
#line 3144
                tmp___71 = jit->ip;
#line 3144
                (jit->ip) ++;
#line 3144
                *tmp___71 = imb___3.b[2];
#line 3144
                tmp___72 = jit->ip;
#line 3144
                (jit->ip) ++;
#line 3144
                *tmp___72 = imb___3.b[3];
#line 3144
                break;
              }
            } else
#line 3144
            if (factor1 != 5L) {
#line 3144
              while (1) {
#line 3144
                tmp___73 = jit->ip;
#line 3144
                (jit->ip) ++;
#line 3144
                *tmp___73 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
#line 3144
                break;
              }
#line 3144
              while (1) {
#line 3144
                tmp___74 = jit->ip;
#line 3144
                (jit->ip) ++;
#line 3144
                *tmp___74 = (unsigned char )(((long )(2 << 6) | ((((factor1 & 7L) & 7L) & 7L) << 3)) | ((factor1 & 7L) & 7L));
#line 3144
                break;
              }
            } else {
#line 3144
              while (1) {
#line 3144
                tmp___75 = jit->ip;
#line 3144
                (jit->ip) ++;
#line 3144
                *tmp___75 = (unsigned char )(((long )(1 << 6) | (((dest & 7L) & 7L) << 3)) | 4L);
#line 3144
                break;
              }
#line 3144
              while (1) {
#line 3144
                tmp___76 = jit->ip;
#line 3144
                (jit->ip) ++;
#line 3144
                *tmp___76 = (unsigned char )(((long )(2 << 6) | ((((factor1 & 7L) & 7L) & 7L) << 3)) | ((factor1 & 7L) & 7L));
#line 3144
                break;
              }
#line 3144
              while (1) {
#line 3144
                *(jit->ip) = (unsigned char)0;
#line 3144
                (jit->ip) ++;
#line 3144
                break;
              }
            }
#line 3144
            break;
          }
#line 3144
          break;
        }
#line 3144
        break;
      }
#line 3145
      return;
      case 8L: 
#line 3146
      if (factor1 != dest) {
#line 3146
        while (1) {
#line 3146
          if ((int )sizeof(void *) == 2) {
#line 3146
            tmp___83 = jit->ip;
#line 3146
            (jit->ip) ++;
#line 3146
            *tmp___83 = (unsigned char)102;
          }
#line 3146
          while (1) {
#line 3146
            if ((int )sizeof(void *) > 4) {
#line 3146
              tmp___84 = 8;
            } else {
#line 3146
              tmp___84 = 0;
            }
#line 3146
            if (dest > 7L) {
#line 3146
              tmp___85 = 4;
            } else {
#line 3146
              tmp___85 = 0;
            }
#line 3146
            if (factor1 > 7L) {
#line 3146
              tmp___86 = 1;
            } else {
#line 3146
              tmp___86 = 0;
            }
#line 3146
            _amd64_rex_bits___5 = (unsigned char )((tmp___84 | tmp___85) | tmp___86);
#line 3146
            if ((int )_amd64_rex_bits___5 != 0) {
#line 3146
              tmp___87 = jit->ip;
#line 3146
              (jit->ip) ++;
#line 3146
              *tmp___87 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
            } else
#line 3146
            if ((int )sizeof(void *) == 1) {
#line 3146
              tmp___87 = jit->ip;
#line 3146
              (jit->ip) ++;
#line 3146
              *tmp___87 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
            }
#line 3146
            break;
          }
#line 3146
          switch ((int )sizeof(void *)) {
          case 1: 
#line 3146
          tmp___88 = jit->ip;
#line 3146
          (jit->ip) ++;
#line 3146
          *tmp___88 = (unsigned char)138;
#line 3146
          break;
          case 8: 
          case 4: 
          case 2: 
#line 3146
          tmp___89 = jit->ip;
#line 3146
          (jit->ip) ++;
#line 3146
          *tmp___89 = (unsigned char)139;
#line 3146
          break;
          default: 
#line 3146
          tmp___90 = __builtin_expect(1L, 0L);
#line 3146
          if (tmp___90) {
#line 3146
            __assert_rtn((char const   *)"emit_mul_op", (char const   *)"./jitter-Darwin-X86-64.c",
                         3146, (char const   *)"0");
          }
          }
#line 3146
          while (1) {
#line 3146
            while (1) {
#line 3146
              tmp___91 = jit->ip;
#line 3146
              (jit->ip) ++;
#line 3146
              *tmp___91 = (unsigned char )(((long )(3 << 6) | ((dest & 7L) << 3)) | (factor1 & 7L));
#line 3146
              break;
            }
#line 3146
            break;
          }
#line 3146
          break;
        }
      }
#line 3147
      while (1) {
#line 3147
        while (1) {
#line 3147
          if (dest > 7L) {
#line 3147
            tmp___92 = 1;
          } else {
#line 3147
            tmp___92 = 0;
          }
#line 3147
          _amd64_rex_bits___6 = (unsigned char )(8 | tmp___92);
#line 3147
          if ((int )_amd64_rex_bits___6 != 0) {
#line 3147
            tmp___93 = jit->ip;
#line 3147
            (jit->ip) ++;
#line 3147
            *tmp___93 = (unsigned char )(0x40 | (int )_amd64_rex_bits___6);
          }
#line 3147
          break;
        }
#line 3147
        while (1) {
#line 3147
          tmp___96 = jit->ip;
#line 3147
          (jit->ip) ++;
#line 3147
          *tmp___96 = (unsigned char)193;
#line 3147
          while (1) {
#line 3147
            while (1) {
#line 3147
              tmp___97 = jit->ip;
#line 3147
              (jit->ip) ++;
#line 3147
              *tmp___97 = (unsigned char )((long )((3 << 6) | (4 << 3)) | ((dest & 7L) & 7L));
#line 3147
              break;
            }
#line 3147
            break;
          }
#line 3147
          while (1) {
#line 3147
            *(jit->ip) = (unsigned char)3;
#line 3147
            (jit->ip) ++;
#line 3147
            break;
          }
#line 3147
          break;
        }
#line 3147
        break;
      }
#line 3148
      return;
      case 9L: 
#line 3149
      while (1) {
#line 3149
        while (1) {
#line 3149
          if (dest > 7L) {
#line 3149
            tmp___98 = 4;
          } else {
#line 3149
            tmp___98 = 0;
          }
#line 3149
          if (factor1 > 7L) {
#line 3149
            tmp___99 = 2;
          } else {
#line 3149
            tmp___99 = 0;
          }
#line 3149
          if (factor1 > 7L) {
#line 3149
            tmp___100 = 1;
          } else {
#line 3149
            tmp___100 = 0;
          }
#line 3149
          _amd64_rex_bits___7 = (unsigned char )(((8 | tmp___98) | tmp___99) | tmp___100);
#line 3149
          if ((int )_amd64_rex_bits___7 != 0) {
#line 3149
            tmp___101 = jit->ip;
#line 3149
            (jit->ip) ++;
#line 3149
            *tmp___101 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
          }
#line 3149
          break;
        }
#line 3149
        while (1) {
#line 3149
          tmp___102 = jit->ip;
#line 3149
          (jit->ip) ++;
#line 3149
          *tmp___102 = (unsigned char)141;
#line 3149
          while (1) {
#line 3149
            if (factor1 == -1L) {
#line 3149
              while (1) {
#line 3149
                tmp___103 = jit->ip;
#line 3149
                (jit->ip) ++;
#line 3149
                *tmp___103 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
#line 3149
                break;
              }
#line 3149
              while (1) {
#line 3149
                tmp___104 = jit->ip;
#line 3149
                (jit->ip) ++;
#line 3149
                *tmp___104 = (unsigned char )(((long )(3 << 6) | (((factor1 & 7L) & 7L) << 3)) | 5L);
#line 3149
                break;
              }
#line 3149
              while (1) {
#line 3149
                imb___5.val = 0;
#line 3149
                tmp___105 = jit->ip;
#line 3149
                (jit->ip) ++;
#line 3149
                *tmp___105 = imb___5.b[0];
#line 3149
                tmp___106 = jit->ip;
#line 3149
                (jit->ip) ++;
#line 3149
                *tmp___106 = imb___5.b[1];
#line 3149
                tmp___107 = jit->ip;
#line 3149
                (jit->ip) ++;
#line 3149
                *tmp___107 = imb___5.b[2];
#line 3149
                tmp___108 = jit->ip;
#line 3149
                (jit->ip) ++;
#line 3149
                *tmp___108 = imb___5.b[3];
#line 3149
                break;
              }
            } else
#line 3149
            if (factor1 != 5L) {
#line 3149
              while (1) {
#line 3149
                tmp___109 = jit->ip;
#line 3149
                (jit->ip) ++;
#line 3149
                *tmp___109 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
#line 3149
                break;
              }
#line 3149
              while (1) {
#line 3149
                tmp___110 = jit->ip;
#line 3149
                (jit->ip) ++;
#line 3149
                *tmp___110 = (unsigned char )(((long )(3 << 6) | ((((factor1 & 7L) & 7L) & 7L) << 3)) | ((factor1 & 7L) & 7L));
#line 3149
                break;
              }
            } else {
#line 3149
              while (1) {
#line 3149
                tmp___111 = jit->ip;
#line 3149
                (jit->ip) ++;
#line 3149
                *tmp___111 = (unsigned char )(((long )(1 << 6) | (((dest & 7L) & 7L) << 3)) | 4L);
#line 3149
                break;
              }
#line 3149
              while (1) {
#line 3149
                tmp___112 = jit->ip;
#line 3149
                (jit->ip) ++;
#line 3149
                *tmp___112 = (unsigned char )(((long )(3 << 6) | ((((factor1 & 7L) & 7L) & 7L) << 3)) | ((factor1 & 7L) & 7L));
#line 3149
                break;
              }
#line 3149
              while (1) {
#line 3149
                *(jit->ip) = (unsigned char)0;
#line 3149
                (jit->ip) ++;
#line 3149
                break;
              }
            }
#line 3149
            break;
          }
#line 3149
          break;
        }
#line 3149
        break;
      }
#line 3150
      return;
      }
    }
  }
#line 3156
  tmp___119 = jit_reg_in_use(op, 0, 0);
#line 3156
  ax_in_use = tmp___119;
#line 3157
  tmp___120 = jit_reg_in_use(op, 2, 0);
#line 3157
  dx_in_use = tmp___120;
#line 3159
  if (dest != 0L) {
#line 3159
    if (ax_in_use) {
#line 3159
      while (1) {
#line 3159
        while (1) {
#line 3159
          _amd64_rex_bits___8 = (unsigned char)0;
#line 3159
          if ((int )_amd64_rex_bits___8 != 0) {
#line 3159
            tmp___121 = jit->ip;
#line 3159
            (jit->ip) ++;
#line 3159
            *tmp___121 = (unsigned char )(0x40 | (int )_amd64_rex_bits___8);
          }
#line 3159
          break;
        }
#line 3159
        tmp___122 = jit->ip;
#line 3159
        (jit->ip) ++;
#line 3159
        *tmp___122 = (unsigned char)80;
#line 3159
        break;
      }
    }
  }
#line 3160
  if (dest != 2L) {
#line 3160
    if (dx_in_use) {
#line 3160
      while (1) {
#line 3160
        while (1) {
#line 3160
          _amd64_rex_bits___9 = (unsigned char)0;
#line 3160
          if ((int )_amd64_rex_bits___9 != 0) {
#line 3160
            tmp___123 = jit->ip;
#line 3160
            (jit->ip) ++;
#line 3160
            *tmp___123 = (unsigned char )(0x40 | (int )_amd64_rex_bits___9);
          }
#line 3160
          break;
        }
#line 3160
        tmp___124 = jit->ip;
#line 3160
        (jit->ip) ++;
#line 3160
        *tmp___124 = (unsigned char)82;
#line 3160
        break;
      }
    }
  }
#line 3162
  if (imm) {
#line 3163
    if (factor1 != 0L) {
#line 3163
      while (1) {
#line 3163
        if ((int )sizeof(void *) == 2) {
#line 3163
          tmp___125 = jit->ip;
#line 3163
          (jit->ip) ++;
#line 3163
          *tmp___125 = (unsigned char)102;
        }
#line 3163
        while (1) {
#line 3163
          if ((int )sizeof(void *) > 4) {
#line 3163
            tmp___126 = 8;
          } else {
#line 3163
            tmp___126 = 0;
          }
#line 3163
          if (factor1 > 7L) {
#line 3163
            tmp___127 = 1;
          } else {
#line 3163
            tmp___127 = 0;
          }
#line 3163
          _amd64_rex_bits___10 = (unsigned char )(tmp___126 | tmp___127);
#line 3163
          if ((int )_amd64_rex_bits___10 != 0) {
#line 3163
            tmp___128 = jit->ip;
#line 3163
            (jit->ip) ++;
#line 3163
            *tmp___128 = (unsigned char )(0x40 | (int )_amd64_rex_bits___10);
          } else
#line 3163
          if ((int )sizeof(void *) == 1) {
#line 3163
            tmp___128 = jit->ip;
#line 3163
            (jit->ip) ++;
#line 3163
            *tmp___128 = (unsigned char )(0x40 | (int )_amd64_rex_bits___10);
          }
#line 3163
          break;
        }
#line 3163
        switch ((int )sizeof(void *)) {
        case 1: 
#line 3163
        tmp___129 = jit->ip;
#line 3163
        (jit->ip) ++;
#line 3163
        *tmp___129 = (unsigned char)138;
#line 3163
        break;
        case 8: 
        case 4: 
        case 2: 
#line 3163
        tmp___130 = jit->ip;
#line 3163
        (jit->ip) ++;
#line 3163
        *tmp___130 = (unsigned char)139;
#line 3163
        break;
        default: 
#line 3163
        tmp___131 = __builtin_expect(1L, 0L);
#line 3163
        if (tmp___131) {
#line 3163
          __assert_rtn((char const   *)"emit_mul_op", (char const   *)"./jitter-Darwin-X86-64.c",
                       3163, (char const   *)"0");
        }
        }
#line 3163
        while (1) {
#line 3163
          while (1) {
#line 3163
            tmp___132 = jit->ip;
#line 3163
            (jit->ip) ++;
#line 3163
            *tmp___132 = (unsigned char )((long )(3 << 6) | (factor1 & 7L));
#line 3163
            break;
          }
#line 3163
          break;
        }
#line 3163
        break;
      }
    }
#line 3164
    while (1) {
#line 3164
      while (1) {
#line 3164
        if (sizeof(void *) > 4ULL) {
#line 3164
          tmp___133 = 8;
        } else {
#line 3164
          tmp___133 = 0;
        }
#line 3164
        _amd64_rex_bits___11 = (unsigned char )tmp___133;
#line 3164
        if ((int )_amd64_rex_bits___11 != 0) {
#line 3164
          tmp___134 = jit->ip;
#line 3164
          (jit->ip) ++;
#line 3164
          *tmp___134 = (unsigned char )(0x40 | (int )_amd64_rex_bits___11);
        } else
#line 3164
        if (sizeof(void *) == 1ULL) {
#line 3164
          tmp___134 = jit->ip;
#line 3164
          (jit->ip) ++;
#line 3164
          *tmp___134 = (unsigned char )(0x40 | (int )_amd64_rex_bits___11);
        }
#line 3164
        break;
      }
#line 3164
      tmp___135 = jit->ip;
#line 3164
      (jit->ip) ++;
#line 3164
      *tmp___135 = (unsigned char)186;
#line 3164
      if (sizeof(void *) == 8ULL) {
#line 3164
        while (1) {
#line 3164
          imb___7.val = (size_t )factor2;
#line 3164
          tmp___136 = jit->ip;
#line 3164
          (jit->ip) ++;
#line 3164
          *tmp___136 = imb___7.b[0];
#line 3164
          tmp___137 = jit->ip;
#line 3164
          (jit->ip) ++;
#line 3164
          *tmp___137 = imb___7.b[1];
#line 3164
          tmp___138 = jit->ip;
#line 3164
          (jit->ip) ++;
#line 3164
          *tmp___138 = imb___7.b[2];
#line 3164
          tmp___139 = jit->ip;
#line 3164
          (jit->ip) ++;
#line 3164
          *tmp___139 = imb___7.b[3];
#line 3164
          tmp___140 = jit->ip;
#line 3164
          (jit->ip) ++;
#line 3164
          *tmp___140 = imb___7.b[4];
#line 3164
          tmp___141 = jit->ip;
#line 3164
          (jit->ip) ++;
#line 3164
          *tmp___141 = imb___7.b[5];
#line 3164
          tmp___142 = jit->ip;
#line 3164
          (jit->ip) ++;
#line 3164
          *tmp___142 = imb___7.b[6];
#line 3164
          tmp___143 = jit->ip;
#line 3164
          (jit->ip) ++;
#line 3164
          *tmp___143 = imb___7.b[7];
#line 3164
          break;
        }
      } else {
#line 3164
        while (1) {
#line 3164
          imb___8.val = (int )((size_t )factor2);
#line 3164
          tmp___144 = jit->ip;
#line 3164
          (jit->ip) ++;
#line 3164
          *tmp___144 = imb___8.b[0];
#line 3164
          tmp___145 = jit->ip;
#line 3164
          (jit->ip) ++;
#line 3164
          *tmp___145 = imb___8.b[1];
#line 3164
          tmp___146 = jit->ip;
#line 3164
          (jit->ip) ++;
#line 3164
          *tmp___146 = imb___8.b[2];
#line 3164
          tmp___147 = jit->ip;
#line 3164
          (jit->ip) ++;
#line 3164
          *tmp___147 = imb___8.b[3];
#line 3164
          break;
        }
      }
#line 3164
      break;
    }
#line 3165
    while (1) {
#line 3165
      while (1) {
#line 3165
        _amd64_rex_bits___12 = (unsigned char)8;
#line 3165
        if ((int )_amd64_rex_bits___12 != 0) {
#line 3165
          tmp___148 = jit->ip;
#line 3165
          (jit->ip) ++;
#line 3165
          *tmp___148 = (unsigned char )(0x40 | (int )_amd64_rex_bits___12);
        }
#line 3165
        break;
      }
#line 3165
      while (1) {
#line 3165
        tmp___149 = jit->ip;
#line 3165
        (jit->ip) ++;
#line 3165
        *tmp___149 = (unsigned char)247;
#line 3165
        while (1) {
#line 3165
          while (1) {
#line 3165
            tmp___150 = jit->ip;
#line 3165
            (jit->ip) ++;
#line 3165
            if (sign) {
#line 3165
              tmp___151 = 1;
            } else {
#line 3165
              tmp___151 = 0;
            }
#line 3165
            *tmp___150 = (unsigned char )(((3 << 6) | (((4 + tmp___151) & 0x07) << 3)) | 2);
#line 3165
            break;
          }
#line 3165
          break;
        }
#line 3165
        break;
      }
#line 3165
      break;
    }
  } else
#line 3167
  if (factor1 == 0L) {
#line 3167
    while (1) {
#line 3167
      while (1) {
#line 3167
        if (factor2 > 7L) {
#line 3167
          tmp___152 = 1;
        } else {
#line 3167
          tmp___152 = 0;
        }
#line 3167
        _amd64_rex_bits___13 = (unsigned char )(8 | tmp___152);
#line 3167
        if ((int )_amd64_rex_bits___13 != 0) {
#line 3167
          tmp___153 = jit->ip;
#line 3167
          (jit->ip) ++;
#line 3167
          *tmp___153 = (unsigned char )(0x40 | (int )_amd64_rex_bits___13);
        }
#line 3167
        break;
      }
#line 3167
      while (1) {
#line 3167
        tmp___154 = jit->ip;
#line 3167
        (jit->ip) ++;
#line 3167
        *tmp___154 = (unsigned char)247;
#line 3167
        while (1) {
#line 3167
          while (1) {
#line 3167
            tmp___155 = jit->ip;
#line 3167
            (jit->ip) ++;
#line 3167
            if (sign) {
#line 3167
              tmp___156 = 1;
            } else {
#line 3167
              tmp___156 = 0;
            }
#line 3167
            *tmp___155 = (unsigned char )((long )((3 << 6) | (((4 + tmp___156) & 0x07) << 3)) | ((factor2 & 7L) & 7L));
#line 3167
            break;
          }
#line 3167
          break;
        }
#line 3167
        break;
      }
#line 3167
      break;
    }
  } else
#line 3168
  if (factor2 == 0L) {
#line 3168
    while (1) {
#line 3168
      while (1) {
#line 3168
        if (factor1 > 7L) {
#line 3168
          tmp___157 = 1;
        } else {
#line 3168
          tmp___157 = 0;
        }
#line 3168
        _amd64_rex_bits___14 = (unsigned char )(8 | tmp___157);
#line 3168
        if ((int )_amd64_rex_bits___14 != 0) {
#line 3168
          tmp___158 = jit->ip;
#line 3168
          (jit->ip) ++;
#line 3168
          *tmp___158 = (unsigned char )(0x40 | (int )_amd64_rex_bits___14);
        }
#line 3168
        break;
      }
#line 3168
      while (1) {
#line 3168
        tmp___159 = jit->ip;
#line 3168
        (jit->ip) ++;
#line 3168
        *tmp___159 = (unsigned char)247;
#line 3168
        while (1) {
#line 3168
          while (1) {
#line 3168
            tmp___160 = jit->ip;
#line 3168
            (jit->ip) ++;
#line 3168
            if (sign) {
#line 3168
              tmp___161 = 1;
            } else {
#line 3168
              tmp___161 = 0;
            }
#line 3168
            *tmp___160 = (unsigned char )((long )((3 << 6) | (((4 + tmp___161) & 0x07) << 3)) | ((factor1 & 7L) & 7L));
#line 3168
            break;
          }
#line 3168
          break;
        }
#line 3168
        break;
      }
#line 3168
      break;
    }
  } else {
#line 3170
    while (1) {
#line 3170
      if ((int )sizeof(void *) == 2) {
#line 3170
        tmp___162 = jit->ip;
#line 3170
        (jit->ip) ++;
#line 3170
        *tmp___162 = (unsigned char)102;
      }
#line 3170
      while (1) {
#line 3170
        if ((int )sizeof(void *) > 4) {
#line 3170
          tmp___163 = 8;
        } else {
#line 3170
          tmp___163 = 0;
        }
#line 3170
        if (factor1 > 7L) {
#line 3170
          tmp___164 = 1;
        } else {
#line 3170
          tmp___164 = 0;
        }
#line 3170
        _amd64_rex_bits___15 = (unsigned char )(tmp___163 | tmp___164);
#line 3170
        if ((int )_amd64_rex_bits___15 != 0) {
#line 3170
          tmp___165 = jit->ip;
#line 3170
          (jit->ip) ++;
#line 3170
          *tmp___165 = (unsigned char )(0x40 | (int )_amd64_rex_bits___15);
        } else
#line 3170
        if ((int )sizeof(void *) == 1) {
#line 3170
          tmp___165 = jit->ip;
#line 3170
          (jit->ip) ++;
#line 3170
          *tmp___165 = (unsigned char )(0x40 | (int )_amd64_rex_bits___15);
        }
#line 3170
        break;
      }
#line 3170
      switch ((int )sizeof(void *)) {
      case 1: 
#line 3170
      tmp___166 = jit->ip;
#line 3170
      (jit->ip) ++;
#line 3170
      *tmp___166 = (unsigned char)138;
#line 3170
      break;
      case 8: 
      case 4: 
      case 2: 
#line 3170
      tmp___167 = jit->ip;
#line 3170
      (jit->ip) ++;
#line 3170
      *tmp___167 = (unsigned char)139;
#line 3170
      break;
      default: 
#line 3170
      tmp___168 = __builtin_expect(1L, 0L);
#line 3170
      if (tmp___168) {
#line 3170
        __assert_rtn((char const   *)"emit_mul_op", (char const   *)"./jitter-Darwin-X86-64.c",
                     3170, (char const   *)"0");
      }
      }
#line 3170
      while (1) {
#line 3170
        while (1) {
#line 3170
          tmp___169 = jit->ip;
#line 3170
          (jit->ip) ++;
#line 3170
          *tmp___169 = (unsigned char )((long )(3 << 6) | (factor1 & 7L));
#line 3170
          break;
        }
#line 3170
        break;
      }
#line 3170
      break;
    }
#line 3171
    while (1) {
#line 3171
      while (1) {
#line 3171
        if (factor2 > 7L) {
#line 3171
          tmp___170 = 1;
        } else {
#line 3171
          tmp___170 = 0;
        }
#line 3171
        _amd64_rex_bits___16 = (unsigned char )(8 | tmp___170);
#line 3171
        if ((int )_amd64_rex_bits___16 != 0) {
#line 3171
          tmp___171 = jit->ip;
#line 3171
          (jit->ip) ++;
#line 3171
          *tmp___171 = (unsigned char )(0x40 | (int )_amd64_rex_bits___16);
        }
#line 3171
        break;
      }
#line 3171
      while (1) {
#line 3171
        tmp___172 = jit->ip;
#line 3171
        (jit->ip) ++;
#line 3171
        *tmp___172 = (unsigned char)247;
#line 3171
        while (1) {
#line 3171
          while (1) {
#line 3171
            tmp___173 = jit->ip;
#line 3171
            (jit->ip) ++;
#line 3171
            if (sign) {
#line 3171
              tmp___174 = 1;
            } else {
#line 3171
              tmp___174 = 0;
            }
#line 3171
            *tmp___173 = (unsigned char )((long )((3 << 6) | (((4 + tmp___174) & 0x07) << 3)) | ((factor2 & 7L) & 7L));
#line 3171
            break;
          }
#line 3171
          break;
        }
#line 3171
        break;
      }
#line 3171
      break;
    }
  }
#line 3175
  if (! high_bytes) {
#line 3176
    if (dest != 0L) {
#line 3176
      while (1) {
#line 3176
        if ((int )sizeof(void *) == 2) {
#line 3176
          tmp___175 = jit->ip;
#line 3176
          (jit->ip) ++;
#line 3176
          *tmp___175 = (unsigned char)102;
        }
#line 3176
        while (1) {
#line 3176
          if ((int )sizeof(void *) > 4) {
#line 3176
            tmp___176 = 8;
          } else {
#line 3176
            tmp___176 = 0;
          }
#line 3176
          if (dest > 7L) {
#line 3176
            tmp___177 = 4;
          } else {
#line 3176
            tmp___177 = 0;
          }
#line 3176
          _amd64_rex_bits___17 = (unsigned char )(tmp___176 | tmp___177);
#line 3176
          if ((int )_amd64_rex_bits___17 != 0) {
#line 3176
            tmp___178 = jit->ip;
#line 3176
            (jit->ip) ++;
#line 3176
            *tmp___178 = (unsigned char )(0x40 | (int )_amd64_rex_bits___17);
          } else
#line 3176
          if ((int )sizeof(void *) == 1) {
#line 3176
            tmp___178 = jit->ip;
#line 3176
            (jit->ip) ++;
#line 3176
            *tmp___178 = (unsigned char )(0x40 | (int )_amd64_rex_bits___17);
          }
#line 3176
          break;
        }
#line 3176
        switch ((int )sizeof(void *)) {
        case 1: 
#line 3176
        tmp___179 = jit->ip;
#line 3176
        (jit->ip) ++;
#line 3176
        *tmp___179 = (unsigned char)138;
#line 3176
        break;
        case 8: 
        case 4: 
        case 2: 
#line 3176
        tmp___180 = jit->ip;
#line 3176
        (jit->ip) ++;
#line 3176
        *tmp___180 = (unsigned char)139;
#line 3176
        break;
        default: 
#line 3176
        tmp___181 = __builtin_expect(1L, 0L);
#line 3176
        if (tmp___181) {
#line 3176
          __assert_rtn((char const   *)"emit_mul_op", (char const   *)"./jitter-Darwin-X86-64.c",
                       3176, (char const   *)"0");
        }
        }
#line 3176
        while (1) {
#line 3176
          while (1) {
#line 3176
            tmp___182 = jit->ip;
#line 3176
            (jit->ip) ++;
#line 3176
            *tmp___182 = (unsigned char )((long )(3 << 6) | ((dest & 7L) << 3));
#line 3176
            break;
          }
#line 3176
          break;
        }
#line 3176
        break;
      }
    }
  } else
#line 3178
  if (dest != 2L) {
#line 3178
    while (1) {
#line 3178
      if ((int )sizeof(void *) == 2) {
#line 3178
        tmp___183 = jit->ip;
#line 3178
        (jit->ip) ++;
#line 3178
        *tmp___183 = (unsigned char)102;
      }
#line 3178
      while (1) {
#line 3178
        if ((int )sizeof(void *) > 4) {
#line 3178
          tmp___184 = 8;
        } else {
#line 3178
          tmp___184 = 0;
        }
#line 3178
        if (dest > 7L) {
#line 3178
          tmp___185 = 4;
        } else {
#line 3178
          tmp___185 = 0;
        }
#line 3178
        _amd64_rex_bits___18 = (unsigned char )(tmp___184 | tmp___185);
#line 3178
        if ((int )_amd64_rex_bits___18 != 0) {
#line 3178
          tmp___186 = jit->ip;
#line 3178
          (jit->ip) ++;
#line 3178
          *tmp___186 = (unsigned char )(0x40 | (int )_amd64_rex_bits___18);
        } else
#line 3178
        if ((int )sizeof(void *) == 1) {
#line 3178
          tmp___186 = jit->ip;
#line 3178
          (jit->ip) ++;
#line 3178
          *tmp___186 = (unsigned char )(0x40 | (int )_amd64_rex_bits___18);
        }
#line 3178
        break;
      }
#line 3178
      switch ((int )sizeof(void *)) {
      case 1: 
#line 3178
      tmp___187 = jit->ip;
#line 3178
      (jit->ip) ++;
#line 3178
      *tmp___187 = (unsigned char)138;
#line 3178
      break;
      case 8: 
      case 4: 
      case 2: 
#line 3178
      tmp___188 = jit->ip;
#line 3178
      (jit->ip) ++;
#line 3178
      *tmp___188 = (unsigned char)139;
#line 3178
      break;
      default: 
#line 3178
      tmp___189 = __builtin_expect(1L, 0L);
#line 3178
      if (tmp___189) {
#line 3178
        __assert_rtn((char const   *)"emit_mul_op", (char const   *)"./jitter-Darwin-X86-64.c",
                     3178, (char const   *)"0");
      }
      }
#line 3178
      while (1) {
#line 3178
        while (1) {
#line 3178
          tmp___190 = jit->ip;
#line 3178
          (jit->ip) ++;
#line 3178
          *tmp___190 = (unsigned char )(((long )(3 << 6) | ((dest & 7L) << 3)) | 2L);
#line 3178
          break;
        }
#line 3178
        break;
      }
#line 3178
      break;
    }
  }
#line 3181
  if (dest != 2L) {
#line 3181
    if (dx_in_use) {
#line 3181
      while (1) {
#line 3181
        while (1) {
#line 3181
          _amd64_rex_bits___19 = (unsigned char)0;
#line 3181
          if ((int )_amd64_rex_bits___19 != 0) {
#line 3181
            tmp___191 = jit->ip;
#line 3181
            (jit->ip) ++;
#line 3181
            *tmp___191 = (unsigned char )(0x40 | (int )_amd64_rex_bits___19);
          }
#line 3181
          break;
        }
#line 3181
        tmp___192 = jit->ip;
#line 3181
        (jit->ip) ++;
#line 3181
        *tmp___192 = (unsigned char)90;
#line 3181
        break;
      }
    }
  }
#line 3182
  if (dest != 0L) {
#line 3182
    if (ax_in_use) {
#line 3182
      while (1) {
#line 3182
        while (1) {
#line 3182
          _amd64_rex_bits___20 = (unsigned char)0;
#line 3182
          if ((int )_amd64_rex_bits___20 != 0) {
#line 3182
            tmp___193 = jit->ip;
#line 3182
            (jit->ip) ++;
#line 3182
            *tmp___193 = (unsigned char )(0x40 | (int )_amd64_rex_bits___20);
          }
#line 3182
          break;
        }
#line 3182
        tmp___194 = jit->ip;
#line 3182
        (jit->ip) ++;
#line 3182
        *tmp___194 = (unsigned char)88;
#line 3182
        break;
      }
    }
  }
#line 3183
  return;
}
}
/* END FUNCTION-DEF emit_mul_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF __darwin_fd_clr LOC=UNKNOWN */
__inline void ( __attribute__((__always_inline__)) __darwin_fd_clr)(int _fd , struct fd_set *_p ) 
{ 
  int tmp ;

  {
#line 93 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h"
  tmp = __darwin_check_fd_set(_fd, (void const   *)_p);
#line 93
  if (tmp) {
#line 94
    _p->fds_bits[(unsigned long long )((unsigned long )_fd) / (sizeof(__int32_t ) * 8ULL)] &= ~ ((__int32_t )(1UL << (unsigned long long )((unsigned long )_fd) % (sizeof(__int32_t ) * 8ULL)));
  }
#line 96
  return;
}
}
/* END FUNCTION-DEF __darwin_fd_clr LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_init_arg_params LOC=UNKNOWN */
void jit_init_arg_params(struct jit *jit , struct jit_func_info *info , int p , int *phys_reg ) 
{ 
  struct jit_arg_layout *layout ;
  struct jit_arg_layout *tmp ;
  struct jit_inp_arg *a ;
  struct jit_arg_layout_location *location ;

  {
#line 1795 "./jitter-Darwin-X86-64.c"
  tmp = jit_arg_layout_create_input(jit, info, p);
#line 1795
  layout = tmp;
#line 1796
  a = info->args + p;
#line 1797
  location = & layout->arguments[p];
#line 1799
  a->passed_by_reg = location->passed_in_reg;
#line 1800
  a->overflow = 0;
#line 1807
  if (! location->passed_in_reg) {
#line 1809
    a->location.stack_pos = (2 + location->index) * (int )sizeof(void *);
#line 1813
    a->spill_pos = a->location.stack_pos;
  } else
#line 1815
  if (! location->isfp) {
#line 1816
    a->location.reg = (*((jit->reg_al)->gp_arg_regs + location->index))->id;
#line 1817
    a->spill_pos = stack_arg_pos(jit, info, location->index);
  } else {
#line 1819
    a->location.reg = (*((jit->reg_al)->fp_arg_regs + location->index))->id;
#line 1820
    a->spill_pos = stack_fparg_pos(jit, info, location->index);
  }
#line 1824
  free((void *)layout);
#line 1825
  return;
}
}
/* END FUNCTION-DEF jit_init_arg_params LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF make_nop LOC=UNKNOWN */
__inline static void make_nop(jit_op *op ) 
{ 


  {
#line 2167
  op->code = (unsigned short)0;
#line 2168
  op->spec = (unsigned char)0;
#line 2169
  return;
}
}
/* END FUNCTION-DEF make_nop LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_tree_clone LOC=UNKNOWN */
__inline static jit_tree *jit_tree_clone(jit_tree *root ) 
{ 
  jit_tree *tmp ;

  {
#line 538
  tmp = jit_tree_addall((jit_tree *)((void *)0), root);
#line 538
  return (tmp);
}
}
/* END FUNCTION-DEF jit_tree_clone LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_trace_op LOC=UNKNOWN */
static void emit_trace_op(struct jit *jit , jit_op *op ) 
{ 
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp ;
  unsigned char *tmp___0 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  long tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  x86_imm_buf imb ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char _amd64_rex_bits___6 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  int trace ;
  jit_opcode prev_code ;
  jit_opcode next_code ;
  int jit_reg___0 ;
  int op_reg ;
  int verbosity_reg ;
  int trace_reg ;
  int fun_reg ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  amd64_imm_buf imb___3 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  amd64_imm_buf imb___5 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char _amd64_rex_bits___9 ;
  int tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  amd64_imm_buf imb___7 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char _amd64_rex_bits___10 ;
  int tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  amd64_imm_buf imb___9 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  x86_imm_buf imb___10 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;
  unsigned char _amd64_rex_bits___11 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char *tmp___101 ;
  int _amd64_width_temp ;
  unsigned char _amd64_rex_bits___12 ;
  int tmp___102 ;
  int tmp___103 ;
  int tmp___104 ;
  int tmp___105 ;
  unsigned char *tmp___106 ;
  int tmp___107 ;
  unsigned char *tmp___108 ;
  amd64_imm_buf imb___11 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  unsigned char *tmp___116 ;
  x86_imm_buf imb___12 ;
  unsigned char *tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char *tmp___119 ;
  unsigned char *tmp___120 ;
  int tmp___121 ;
  unsigned char _amd64_rex_bits___13 ;
  int tmp___122 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  unsigned char *tmp___125 ;
  unsigned char _amd64_rex_bits___14 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char *tmp___128 ;
  unsigned char *tmp___129 ;
  long tmp___130 ;
  unsigned char *tmp___131 ;
  unsigned char _amd64_rex_bits___15 ;
  unsigned char *tmp___132 ;
  unsigned char *tmp___133 ;

  {
#line 2595
  emit_save_all_regs(jit, op);
#line 2598
  while (1) {
#line 2598
    while (1) {
#line 2598
      _amd64_rex_bits = (unsigned char)0;
#line 2598
      if ((int )_amd64_rex_bits != 0) {
#line 2598
        tmp = jit->ip;
#line 2598
        (jit->ip) ++;
#line 2598
        *tmp = (unsigned char )(0x40 | (int )_amd64_rex_bits);
      }
#line 2598
      break;
    }
#line 2598
    tmp___0 = jit->ip;
#line 2598
    (jit->ip) ++;
#line 2598
    *tmp___0 = (unsigned char)83;
#line 2598
    break;
  }
#line 2599
  while (1) {
#line 2599
    while (1) {
#line 2599
      _amd64_rex_bits___0 = (unsigned char)8;
#line 2599
      if ((int )_amd64_rex_bits___0 != 0) {
#line 2599
        tmp___1 = jit->ip;
#line 2599
        (jit->ip) ++;
#line 2599
        *tmp___1 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
      }
#line 2599
      break;
    }
#line 2599
    while (1) {
#line 2599
      switch (4) {
      case 1: 
#line 2599
      tmp___2 = jit->ip;
#line 2599
      (jit->ip) ++;
#line 2599
      *tmp___2 = (unsigned char)138;
#line 2599
      break;
      case 2: 
#line 2599
      tmp___3 = jit->ip;
#line 2599
      (jit->ip) ++;
#line 2599
      *tmp___3 = (unsigned char)102;
      case 4: 
#line 2599
      tmp___4 = jit->ip;
#line 2599
      (jit->ip) ++;
#line 2599
      *tmp___4 = (unsigned char)139;
#line 2599
      break;
      default: 
#line 2599
      tmp___5 = __builtin_expect(1L, 0L);
#line 2599
      if (tmp___5) {
#line 2599
        __assert_rtn((char const   *)"emit_trace_op", (char const   *)"./jitter-Darwin-X86-64.c",
                     2599, (char const   *)"0");
      }
      }
#line 2599
      while (1) {
#line 2599
        while (1) {
#line 2599
          tmp___6 = jit->ip;
#line 2599
          (jit->ip) ++;
#line 2599
          *tmp___6 = (unsigned char )(((3 << 6) | (3 << 3)) | 4);
#line 2599
          break;
        }
#line 2599
        break;
      }
#line 2599
      break;
    }
#line 2599
    break;
  }
#line 2600
  while (1) {
#line 2600
    while (1) {
#line 2600
      _amd64_rex_bits___1 = (unsigned char)8;
#line 2600
      if ((int )_amd64_rex_bits___1 != 0) {
#line 2600
        tmp___7 = jit->ip;
#line 2600
        (jit->ip) ++;
#line 2600
        *tmp___7 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
      }
#line 2600
      break;
    }
#line 2600
    tmp___8 = jit->ip;
#line 2600
    (jit->ip) ++;
#line 2600
    *tmp___8 = (unsigned char)131;
#line 2600
    while (1) {
#line 2600
      while (1) {
#line 2600
        tmp___9 = jit->ip;
#line 2600
        (jit->ip) ++;
#line 2600
        *tmp___9 = (unsigned char )(((3 << 6) | (4 << 3)) | 4);
#line 2600
        break;
      }
#line 2600
      break;
    }
#line 2600
    while (1) {
#line 2600
      *(jit->ip) = (unsigned char)240;
#line 2600
      (jit->ip) ++;
#line 2600
      break;
    }
#line 2600
    break;
  }
#line 2601
  while (1) {
#line 2601
    while (1) {
#line 2601
      _amd64_rex_bits___4 = (unsigned char)8;
#line 2601
      if ((int )_amd64_rex_bits___4 != 0) {
#line 2601
        tmp___23 = jit->ip;
#line 2601
        (jit->ip) ++;
#line 2601
        *tmp___23 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
      }
#line 2601
      break;
    }
#line 2601
    tmp___24 = jit->ip;
#line 2601
    (jit->ip) ++;
#line 2601
    *tmp___24 = (unsigned char)131;
#line 2601
    while (1) {
#line 2601
      while (1) {
#line 2601
        tmp___25 = jit->ip;
#line 2601
        (jit->ip) ++;
#line 2601
        *tmp___25 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
#line 2601
        break;
      }
#line 2601
      break;
    }
#line 2601
    while (1) {
#line 2601
      *(jit->ip) = (unsigned char)16;
#line 2601
      (jit->ip) ++;
#line 2601
      break;
    }
#line 2601
    break;
  }
#line 2603
  trace = 0;
#line 2604
  prev_code = (jit_opcode )((int )(op->prev)->code & 0xfff8);
#line 2605
  next_code = (jit_opcode )((int )(op->next)->code & 0xfff8);
#line 2606
  if ((unsigned int )prev_code == 128U) {
#line 2606
    trace |= 1;
  } else
#line 2606
  if ((unsigned int )prev_code == 136U) {
#line 2606
    trace |= 1;
  } else
#line 2606
  if ((unsigned int )prev_code == 144U) {
#line 2606
    trace |= 1;
  }
#line 2607
  if ((unsigned int )next_code != 128U) {
#line 2607
    if ((unsigned int )next_code != 136U) {
#line 2607
      if ((unsigned int )next_code != 144U) {
#line 2607
        trace |= 2;
      }
    }
  }
#line 2610
  jit_reg___0 = 7;
#line 2611
  op_reg = 6;
#line 2612
  verbosity_reg = 2;
#line 2613
  trace_reg = 1;
#line 2614
  fun_reg = 8;
#line 2615
  while (1) {
#line 2615
    while (1) {
#line 2615
      if (jit_reg___0 > 7) {
#line 2615
        tmp___39 = 1;
      } else {
#line 2615
        tmp___39 = 0;
      }
#line 2615
      _amd64_rex_bits___7 = (unsigned char )(8 | tmp___39);
#line 2615
      if ((int )_amd64_rex_bits___7 != 0) {
#line 2615
        tmp___40 = jit->ip;
#line 2615
        (jit->ip) ++;
#line 2615
        *tmp___40 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
      }
#line 2615
      break;
    }
#line 2615
    tmp___41 = jit->ip;
#line 2615
    (jit->ip) ++;
#line 2615
    *tmp___41 = (unsigned char )(184 + (jit_reg___0 & 0x7));
#line 2615
    while (1) {
#line 2615
      imb___3.val = (size_t )jit;
#line 2615
      tmp___42 = jit->ip;
#line 2615
      (jit->ip) ++;
#line 2615
      *tmp___42 = imb___3.b[0];
#line 2615
      tmp___43 = jit->ip;
#line 2615
      (jit->ip) ++;
#line 2615
      *tmp___43 = imb___3.b[1];
#line 2615
      tmp___44 = jit->ip;
#line 2615
      (jit->ip) ++;
#line 2615
      *tmp___44 = imb___3.b[2];
#line 2615
      tmp___45 = jit->ip;
#line 2615
      (jit->ip) ++;
#line 2615
      *tmp___45 = imb___3.b[3];
#line 2615
      tmp___46 = jit->ip;
#line 2615
      (jit->ip) ++;
#line 2615
      *tmp___46 = imb___3.b[4];
#line 2615
      tmp___47 = jit->ip;
#line 2615
      (jit->ip) ++;
#line 2615
      *tmp___47 = imb___3.b[5];
#line 2615
      tmp___48 = jit->ip;
#line 2615
      (jit->ip) ++;
#line 2615
      *tmp___48 = imb___3.b[6];
#line 2615
      tmp___49 = jit->ip;
#line 2615
      (jit->ip) ++;
#line 2615
      *tmp___49 = imb___3.b[7];
#line 2615
      break;
    }
#line 2615
    break;
  }
#line 2616
  while (1) {
#line 2616
    while (1) {
#line 2616
      if (op_reg > 7) {
#line 2616
        tmp___54 = 1;
      } else {
#line 2616
        tmp___54 = 0;
      }
#line 2616
      _amd64_rex_bits___8 = (unsigned char )(8 | tmp___54);
#line 2616
      if ((int )_amd64_rex_bits___8 != 0) {
#line 2616
        tmp___55 = jit->ip;
#line 2616
        (jit->ip) ++;
#line 2616
        *tmp___55 = (unsigned char )(0x40 | (int )_amd64_rex_bits___8);
      }
#line 2616
      break;
    }
#line 2616
    tmp___56 = jit->ip;
#line 2616
    (jit->ip) ++;
#line 2616
    *tmp___56 = (unsigned char )(184 + (op_reg & 0x7));
#line 2616
    while (1) {
#line 2616
      imb___5.val = (size_t )op;
#line 2616
      tmp___57 = jit->ip;
#line 2616
      (jit->ip) ++;
#line 2616
      *tmp___57 = imb___5.b[0];
#line 2616
      tmp___58 = jit->ip;
#line 2616
      (jit->ip) ++;
#line 2616
      *tmp___58 = imb___5.b[1];
#line 2616
      tmp___59 = jit->ip;
#line 2616
      (jit->ip) ++;
#line 2616
      *tmp___59 = imb___5.b[2];
#line 2616
      tmp___60 = jit->ip;
#line 2616
      (jit->ip) ++;
#line 2616
      *tmp___60 = imb___5.b[3];
#line 2616
      tmp___61 = jit->ip;
#line 2616
      (jit->ip) ++;
#line 2616
      *tmp___61 = imb___5.b[4];
#line 2616
      tmp___62 = jit->ip;
#line 2616
      (jit->ip) ++;
#line 2616
      *tmp___62 = imb___5.b[5];
#line 2616
      tmp___63 = jit->ip;
#line 2616
      (jit->ip) ++;
#line 2616
      *tmp___63 = imb___5.b[6];
#line 2616
      tmp___64 = jit->ip;
#line 2616
      (jit->ip) ++;
#line 2616
      *tmp___64 = imb___5.b[7];
#line 2616
      break;
    }
#line 2616
    break;
  }
#line 2617
  while (1) {
#line 2617
    while (1) {
#line 2617
      if (verbosity_reg > 7) {
#line 2617
        tmp___69 = 1;
      } else {
#line 2617
        tmp___69 = 0;
      }
#line 2617
      _amd64_rex_bits___9 = (unsigned char )tmp___69;
#line 2617
      if ((int )_amd64_rex_bits___9 != 0) {
#line 2617
        tmp___70 = jit->ip;
#line 2617
        (jit->ip) ++;
#line 2617
        *tmp___70 = (unsigned char )(0x40 | (int )_amd64_rex_bits___9);
      }
#line 2617
      break;
    }
#line 2617
    tmp___71 = jit->ip;
#line 2617
    (jit->ip) ++;
#line 2617
    *tmp___71 = (unsigned char )(184 + (verbosity_reg & 0x7));
#line 2617
    while (1) {
#line 2617
      imb___8.val = (int )((size_t )op->r_arg[0]);
#line 2617
      tmp___80 = jit->ip;
#line 2617
      (jit->ip) ++;
#line 2617
      *tmp___80 = imb___8.b[0];
#line 2617
      tmp___81 = jit->ip;
#line 2617
      (jit->ip) ++;
#line 2617
      *tmp___81 = imb___8.b[1];
#line 2617
      tmp___82 = jit->ip;
#line 2617
      (jit->ip) ++;
#line 2617
      *tmp___82 = imb___8.b[2];
#line 2617
      tmp___83 = jit->ip;
#line 2617
      (jit->ip) ++;
#line 2617
      *tmp___83 = imb___8.b[3];
#line 2617
      break;
    }
#line 2617
    break;
  }
#line 2618
  while (1) {
#line 2618
    while (1) {
#line 2618
      if (trace_reg > 7) {
#line 2618
        tmp___84 = 1;
      } else {
#line 2618
        tmp___84 = 0;
      }
#line 2618
      _amd64_rex_bits___10 = (unsigned char )tmp___84;
#line 2618
      if ((int )_amd64_rex_bits___10 != 0) {
#line 2618
        tmp___85 = jit->ip;
#line 2618
        (jit->ip) ++;
#line 2618
        *tmp___85 = (unsigned char )(0x40 | (int )_amd64_rex_bits___10);
      }
#line 2618
      break;
    }
#line 2618
    tmp___86 = jit->ip;
#line 2618
    (jit->ip) ++;
#line 2618
    *tmp___86 = (unsigned char )(184 + (trace_reg & 0x7));
#line 2618
    while (1) {
#line 2618
      imb___10.val = (int )((size_t )trace);
#line 2618
      tmp___95 = jit->ip;
#line 2618
      (jit->ip) ++;
#line 2618
      *tmp___95 = imb___10.b[0];
#line 2618
      tmp___96 = jit->ip;
#line 2618
      (jit->ip) ++;
#line 2618
      *tmp___96 = imb___10.b[1];
#line 2618
      tmp___97 = jit->ip;
#line 2618
      (jit->ip) ++;
#line 2618
      *tmp___97 = imb___10.b[2];
#line 2618
      tmp___98 = jit->ip;
#line 2618
      (jit->ip) ++;
#line 2618
      *tmp___98 = imb___10.b[3];
#line 2618
      break;
    }
#line 2618
    break;
  }
#line 2619
  while (1) {
#line 2619
    while (1) {
#line 2619
      _amd64_rex_bits___11 = (unsigned char)8;
#line 2619
      if ((int )_amd64_rex_bits___11 != 0) {
#line 2619
        tmp___99 = jit->ip;
#line 2619
        (jit->ip) ++;
#line 2619
        *tmp___99 = (unsigned char )(0x40 | (int )_amd64_rex_bits___11);
      }
#line 2619
      break;
    }
#line 2619
    tmp___100 = jit->ip;
#line 2619
    (jit->ip) ++;
#line 2619
    *tmp___100 = (unsigned char )((6 << 3) + 3);
#line 2619
    while (1) {
#line 2619
      while (1) {
#line 2619
        tmp___101 = jit->ip;
#line 2619
        (jit->ip) ++;
#line 2619
        *tmp___101 = (unsigned char )(3 << 6);
#line 2619
        break;
      }
#line 2619
      break;
    }
#line 2619
    break;
  }
#line 2620
  while (1) {
#line 2620
    _amd64_width_temp = (size_t )(& jit_trace_callback) == (size_t )((int )((size_t )(& jit_trace_callback)));
#line 2620
    while (1) {
#line 2620
      while (1) {
#line 2620
        if (_amd64_width_temp) {
#line 2620
          tmp___104 = 4;
        } else {
#line 2620
          tmp___104 = 8;
        }
#line 2620
        if (tmp___104 > 4) {
#line 2620
          tmp___103 = 8;
        } else {
#line 2620
          tmp___103 = 0;
        }
#line 2620
        if (fun_reg > 7) {
#line 2620
          tmp___105 = 1;
        } else {
#line 2620
          tmp___105 = 0;
        }
#line 2620
        _amd64_rex_bits___12 = (unsigned char )(tmp___103 | tmp___105);
#line 2620
        if ((int )_amd64_rex_bits___12 != 0) {
#line 2620
          tmp___106 = jit->ip;
#line 2620
          (jit->ip) ++;
#line 2620
          *tmp___106 = (unsigned char )(0x40 | (int )_amd64_rex_bits___12);
        } else {
#line 2620
          if (_amd64_width_temp) {
#line 2620
            tmp___107 = 4;
          } else {
#line 2620
            tmp___107 = 8;
          }
#line 2620
          if (tmp___107 == 1) {
#line 2620
            tmp___106 = jit->ip;
#line 2620
            (jit->ip) ++;
#line 2620
            *tmp___106 = (unsigned char )(0x40 | (int )_amd64_rex_bits___12);
          }
        }
#line 2620
        break;
      }
#line 2620
      tmp___108 = jit->ip;
#line 2620
      (jit->ip) ++;
#line 2620
      *tmp___108 = (unsigned char )(184 + (fun_reg & 0x7));
#line 2620
      if (_amd64_width_temp) {
#line 2620
        tmp___121 = 4;
      } else {
#line 2620
        tmp___121 = 8;
      }
#line 2620
      if (tmp___121 == 8) {
#line 2620
        while (1) {
#line 2620
          imb___11.val = (size_t )(& jit_trace_callback);
#line 2620
          tmp___109 = jit->ip;
#line 2620
          (jit->ip) ++;
#line 2620
          *tmp___109 = imb___11.b[0];
#line 2620
          tmp___110 = jit->ip;
#line 2620
          (jit->ip) ++;
#line 2620
          *tmp___110 = imb___11.b[1];
#line 2620
          tmp___111 = jit->ip;
#line 2620
          (jit->ip) ++;
#line 2620
          *tmp___111 = imb___11.b[2];
#line 2620
          tmp___112 = jit->ip;
#line 2620
          (jit->ip) ++;
#line 2620
          *tmp___112 = imb___11.b[3];
#line 2620
          tmp___113 = jit->ip;
#line 2620
          (jit->ip) ++;
#line 2620
          *tmp___113 = imb___11.b[4];
#line 2620
          tmp___114 = jit->ip;
#line 2620
          (jit->ip) ++;
#line 2620
          *tmp___114 = imb___11.b[5];
#line 2620
          tmp___115 = jit->ip;
#line 2620
          (jit->ip) ++;
#line 2620
          *tmp___115 = imb___11.b[6];
#line 2620
          tmp___116 = jit->ip;
#line 2620
          (jit->ip) ++;
#line 2620
          *tmp___116 = imb___11.b[7];
#line 2620
          break;
        }
      } else {
#line 2620
        while (1) {
#line 2620
          imb___12.val = (int )((size_t )(& jit_trace_callback));
#line 2620
          tmp___117 = jit->ip;
#line 2620
          (jit->ip) ++;
#line 2620
          *tmp___117 = imb___12.b[0];
#line 2620
          tmp___118 = jit->ip;
#line 2620
          (jit->ip) ++;
#line 2620
          *tmp___118 = imb___12.b[1];
#line 2620
          tmp___119 = jit->ip;
#line 2620
          (jit->ip) ++;
#line 2620
          *tmp___119 = imb___12.b[2];
#line 2620
          tmp___120 = jit->ip;
#line 2620
          (jit->ip) ++;
#line 2620
          *tmp___120 = imb___12.b[3];
#line 2620
          break;
        }
      }
#line 2620
      break;
    }
#line 2620
    break;
  }
#line 2621
  while (1) {
#line 2621
    while (1) {
#line 2621
      if (fun_reg > 7) {
#line 2621
        tmp___122 = 1;
      } else {
#line 2621
        tmp___122 = 0;
      }
#line 2621
      _amd64_rex_bits___13 = (unsigned char )tmp___122;
#line 2621
      if ((int )_amd64_rex_bits___13 != 0) {
#line 2621
        tmp___123 = jit->ip;
#line 2621
        (jit->ip) ++;
#line 2621
        *tmp___123 = (unsigned char )(0x40 | (int )_amd64_rex_bits___13);
      }
#line 2621
      break;
    }
#line 2621
    tmp___124 = jit->ip;
#line 2621
    (jit->ip) ++;
#line 2621
    *tmp___124 = (unsigned char)255;
#line 2621
    while (1) {
#line 2621
      while (1) {
#line 2621
        tmp___125 = jit->ip;
#line 2621
        (jit->ip) ++;
#line 2621
        *tmp___125 = (unsigned char )(((3 << 6) | (2 << 3)) | ((fun_reg & 0x7) & 0x07));
#line 2621
        break;
      }
#line 2621
      break;
    }
#line 2621
    break;
  }
#line 2625
  while (1) {
#line 2625
    while (1) {
#line 2625
      _amd64_rex_bits___14 = (unsigned char)8;
#line 2625
      if ((int )_amd64_rex_bits___14 != 0) {
#line 2625
        tmp___126 = jit->ip;
#line 2625
        (jit->ip) ++;
#line 2625
        *tmp___126 = (unsigned char )(0x40 | (int )_amd64_rex_bits___14);
      }
#line 2625
      break;
    }
#line 2625
    while (1) {
#line 2625
      switch (4) {
      case 1: 
#line 2625
      tmp___127 = jit->ip;
#line 2625
      (jit->ip) ++;
#line 2625
      *tmp___127 = (unsigned char)138;
#line 2625
      break;
      case 2: 
#line 2625
      tmp___128 = jit->ip;
#line 2625
      (jit->ip) ++;
#line 2625
      *tmp___128 = (unsigned char)102;
      case 4: 
#line 2625
      tmp___129 = jit->ip;
#line 2625
      (jit->ip) ++;
#line 2625
      *tmp___129 = (unsigned char)139;
#line 2625
      break;
      default: 
#line 2625
      tmp___130 = __builtin_expect(1L, 0L);
#line 2625
      if (tmp___130) {
#line 2625
        __assert_rtn((char const   *)"emit_trace_op", (char const   *)"./jitter-Darwin-X86-64.c",
                     2625, (char const   *)"0");
      }
      }
#line 2625
      while (1) {
#line 2625
        while (1) {
#line 2625
          tmp___131 = jit->ip;
#line 2625
          (jit->ip) ++;
#line 2625
          *tmp___131 = (unsigned char )(((3 << 6) | (4 << 3)) | 3);
#line 2625
          break;
        }
#line 2625
        break;
      }
#line 2625
      break;
    }
#line 2625
    break;
  }
#line 2626
  while (1) {
#line 2626
    while (1) {
#line 2626
      _amd64_rex_bits___15 = (unsigned char)0;
#line 2626
      if ((int )_amd64_rex_bits___15 != 0) {
#line 2626
        tmp___132 = jit->ip;
#line 2626
        (jit->ip) ++;
#line 2626
        *tmp___132 = (unsigned char )(0x40 | (int )_amd64_rex_bits___15);
      }
#line 2626
      break;
    }
#line 2626
    tmp___133 = jit->ip;
#line 2626
    (jit->ip) ++;
#line 2626
    *tmp___133 = (unsigned char)91;
#line 2626
    break;
  }
#line 2628
  emit_restore_all_regs(jit, op);
#line 2629
  return;
}
}
/* END FUNCTION-DEF emit_trace_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF join_2ops LOC=UNKNOWN */
static int join_2ops(jit_op *op , int opcode1 , int opcode2 , int (*joinfn)(jit_op * ,
                                                                            jit_op * ) ) 
{ 
  jit_value result_reg ;
  jit_op *nextop ;
  jit_op *tmp ;
  int tmp___0 ;

  {
#line 2189
  if ((int )op->code == opcode1) {
#line 2190
    result_reg = op->arg[0];
#line 2191
    tmp = get_related_op(op, (int )result_reg);
#line 2191
    nextop = tmp;
#line 2192
    if (nextop) {
#line 2192
      if ((int )nextop->code == opcode2) {
#line 2192
        tmp___0 = (*joinfn)(op, nextop);
#line 2192
        return (tmp___0);
      }
    }
  }
#line 2194
  return (0);
}
}
/* END FUNCTION-DEF join_2ops LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF spill_all_registers LOC=UNKNOWN */
static int spill_all_registers(jit_op *op , struct jit_reg_allocator *al ) 
{ 
  jit_value reg ;
  int i ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp ;
  int tmp___0 ;
  int i___0 ;
  jit_hw_reg *hreg___0 ;
  jit_hw_reg *tmp___1 ;
  int tmp___2 ;

  {
#line 5400
  i = 0;
#line 5400
  while (i < al->gp_reg_cnt) {
#line 5401
    tmp = rmap_is_associated(op->regmap, (al->gp_regs + i)->id, 0, & reg);
#line 5401
    hreg = tmp;
#line 5402
    if (hreg) {
#line 5402
      tmp___0 = jit_set_get(op->live_out, (int )reg);
#line 5402
      if (tmp___0) {
#line 5403
        if (op->in_use) {
#line 5403
          unload_reg(op, hreg, reg);
        }
#line 5404
        rmap_unassoc(op->regmap, reg);
      }
    }
#line 5400
    i ++;
  }
#line 5408
  i___0 = 0;
#line 5408
  while (i___0 < al->fp_reg_cnt) {
#line 5409
    tmp___1 = rmap_is_associated(op->regmap, (al->fp_regs + i___0)->id, 1, & reg);
#line 5409
    hreg___0 = tmp___1;
#line 5410
    if (hreg___0) {
#line 5410
      tmp___2 = jit_set_get(op->live_out, (int )reg);
#line 5410
      if (tmp___2) {
#line 5411
        if (op->in_use) {
#line 5411
          unload_reg(op, hreg___0, reg);
        }
#line 5412
        rmap_unassoc(op->regmap, reg);
      }
    }
#line 5408
    i___0 ++;
  }
#line 5416
  return (1);
}
}
/* END FUNCTION-DEF spill_all_registers LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_optimize_frame_ptr LOC=UNKNOWN */
void jit_optimize_frame_ptr(struct jit *jit ) 
{ 
  struct jit_func_info *info ;
  int uses_frame_ptr ;
  jit_op *op ;
  jit_op *tmp ;

  {
#line 2120
  if (! (jit->optimizations & 1U)) {
#line 2120
    return;
  }
#line 2122
  info = (struct jit_func_info *)((void *)0);
#line 2123
  uses_frame_ptr = 0;
#line 2124
  tmp = jit_op_first(jit->ops);
#line 2124
  op = tmp;
#line 2124
  while (1) {
#line 2125
    if (! op) {
#line 2125
      goto _L;
    } else
#line 2125
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 128U) {
      _L: /* CIL Label */ 
#line 2126
      if (info) {
#line 2126
        if (! uses_frame_ptr) {
#line 2127
          info->has_prolog = 0;
#line 2128
          uses_frame_ptr = 0;
        }
      }
#line 2131
      if (op) {
#line 2131
        info = (struct jit_func_info *)op->arg[1];
      }
    }
#line 2133
    if (! op) {
#line 2133
      break;
    }
#line 2134
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 160U) {
#line 2135
      uses_frame_ptr |= 1;
    } else
#line 2134
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 16U) {
#line 2135
      uses_frame_ptr |= 1;
    } else
#line 2134
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 24U) {
#line 2135
      uses_frame_ptr |= 1;
    } else
#line 2134
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 32U) {
#line 2135
      uses_frame_ptr |= 1;
    }
#line 2137
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 152U) {
#line 2137
      if (op->arg[0] == 2L) {
#line 2137
        if ((unsigned long long )op->arg[1] == sizeof(float )) {
#line 2138
          uses_frame_ptr |= 1;
        }
      }
    }
#line 2124
    op = op->next;
  }
#line 2141
  return;
}
}
/* END FUNCTION-DEF jit_optimize_frame_ptr LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF cleanup LOC=UNKNOWN */
static void cleanup(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  struct jit_func_info *info ;

  {
#line 4957
  tmp = jit_op_first(jit->ops);
#line 4957
  op = tmp;
#line 4957
  while (op) {
#line 4958
    if (op->live_in) {
#line 4959
      jit_set_free(op->live_in);
#line 4960
      op->live_in = (struct jit_set *)((void *)0);
    }
#line 4962
    if (op->live_out) {
#line 4963
      jit_set_free(op->live_out);
#line 4964
      op->live_out = (struct jit_set *)((void *)0);
    }
#line 4966
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 128U) {
#line 4967
      if (op->arg[1]) {
#line 4968
        info = (struct jit_func_info *)op->arg[1];
#line 4969
        free((void *)info->args);
#line 4970
        info->args = (struct jit_inp_arg *)((void *)0);
      }
    }
#line 4973
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 392U) {
#line 4974
      op->arg[0] = (jit_value )0;
#line 4975
      op->arg[1] = (jit_value )0;
    }
#line 4957
    op = op->next;
  }
#line 4978
  return;
}
}
/* END FUNCTION-DEF cleanup LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_value_align LOC=UNKNOWN */
__inline static jit_value jit_value_align(jit_value value , jit_value alignment ) 
{ 


  {
#line 1010
  return ((value + (alignment - 1L)) & - alignment);
}
}
/* END FUNCTION-DEF jit_value_align LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_ld_op LOC=UNKNOWN */
static void emit_ld_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  long tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  x86_imm_buf imb ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  long tmp___19 ;
  unsigned char *tmp___20 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  long tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___64 ;
  int tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  long tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  long tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___88 ;
  int tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___109 ;
  int tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  long tmp___115 ;
  unsigned char *tmp___116 ;
  unsigned char *tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char *tmp___119 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___122 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  unsigned char *tmp___125 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char *tmp___128 ;
  x86_imm_buf imb___10 ;
  unsigned char *tmp___129 ;
  unsigned char *tmp___130 ;
  unsigned char *tmp___131 ;
  unsigned char *tmp___132 ;
  unsigned char *tmp___133 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___134 ;
  int tmp___135 ;
  int tmp___136 ;
  unsigned char *tmp___137 ;
  unsigned char *tmp___138 ;
  unsigned char *tmp___139 ;
  long tmp___140 ;
  unsigned char *tmp___141 ;
  x86_imm_buf imb___11 ;
  unsigned char *tmp___142 ;
  unsigned char *tmp___143 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  unsigned char *tmp___146 ;
  unsigned char *tmp___147 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;
  unsigned char *tmp___150 ;
  unsigned char *tmp___151 ;
  x86_imm_buf imb___12 ;
  unsigned char *tmp___152 ;
  unsigned char *tmp___153 ;
  unsigned char *tmp___154 ;
  unsigned char *tmp___155 ;
  unsigned char *tmp___156 ;
  unsigned char *tmp___157 ;
  unsigned char *tmp___158 ;
  x86_imm_buf imb___13 ;
  unsigned char *tmp___159 ;
  unsigned char *tmp___160 ;
  unsigned char *tmp___161 ;
  unsigned char *tmp___162 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___163 ;
  int tmp___164 ;
  unsigned char *tmp___165 ;
  unsigned char *tmp___166 ;
  unsigned char *tmp___167 ;
  unsigned char *tmp___168 ;
  long tmp___169 ;
  unsigned char *tmp___170 ;
  unsigned char *tmp___171 ;
  unsigned char *tmp___172 ;
  unsigned char *tmp___173 ;
  unsigned char *tmp___174 ;
  unsigned char *tmp___175 ;
  x86_imm_buf imb___14 ;
  unsigned char *tmp___176 ;
  unsigned char *tmp___177 ;
  unsigned char *tmp___178 ;
  unsigned char *tmp___179 ;
  unsigned char *tmp___180 ;
  unsigned char *tmp___181 ;
  unsigned char *tmp___182 ;
  x86_imm_buf imb___15 ;
  unsigned char *tmp___183 ;
  unsigned char *tmp___184 ;
  unsigned char *tmp___185 ;
  unsigned char *tmp___186 ;
  long tmp___187 ;

  {
#line 3364
  if ((int )op->arg_size == (int )sizeof(void *)) {
#line 3365
    if ((int )op->code & 0x02) {
#line 3365
      while (1) {
#line 3365
        if ((int )op->arg_size == 2) {
#line 3365
          tmp = jit->ip;
#line 3365
          (jit->ip) ++;
#line 3365
          *tmp = (unsigned char)102;
        }
#line 3365
        while (1) {
#line 3365
          if ((int )op->arg_size > 4) {
#line 3365
            tmp___0 = 8;
          } else {
#line 3365
            tmp___0 = 0;
          }
#line 3365
          if (a1 > 7L) {
#line 3365
            tmp___1 = 4;
          } else {
#line 3365
            tmp___1 = 0;
          }
#line 3365
          _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
#line 3365
          if ((int )_amd64_rex_bits != 0) {
#line 3365
            tmp___2 = jit->ip;
#line 3365
            (jit->ip) ++;
#line 3365
            *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          } else
#line 3365
          if ((int )op->arg_size == 1) {
#line 3365
            tmp___2 = jit->ip;
#line 3365
            (jit->ip) ++;
#line 3365
            *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          }
#line 3365
          break;
        }
#line 3365
        switch ((int )op->arg_size) {
        case 1: 
#line 3365
        tmp___3 = jit->ip;
#line 3365
        (jit->ip) ++;
#line 3365
        *tmp___3 = (unsigned char)138;
#line 3365
        break;
        case 8: 
        case 4: 
        case 2: 
#line 3365
        tmp___4 = jit->ip;
#line 3365
        (jit->ip) ++;
#line 3365
        *tmp___4 = (unsigned char)139;
#line 3365
        break;
        default: 
#line 3365
        tmp___5 = __builtin_expect(1L, 0L);
#line 3365
        if (tmp___5) {
#line 3365
          __assert_rtn((char const   *)"emit_ld_op", (char const   *)"./jitter-Darwin-X86-64.c",
                       3365, (char const   *)"0");
        }
        }
#line 3365
        while (1) {
#line 3365
          tmp___6 = jit->ip;
#line 3365
          (jit->ip) ++;
#line 3365
          *tmp___6 = (unsigned char )(((a1 & 7L) << 3) | 4L);
#line 3365
          break;
        }
#line 3365
        while (1) {
#line 3365
          tmp___7 = jit->ip;
#line 3365
          (jit->ip) ++;
#line 3365
          *tmp___7 = (unsigned char )((4 << 3) | 5);
#line 3365
          break;
        }
#line 3365
        while (1) {
#line 3365
          imb.val = (int )a2;
#line 3365
          tmp___8 = jit->ip;
#line 3365
          (jit->ip) ++;
#line 3365
          *tmp___8 = imb.b[0];
#line 3365
          tmp___9 = jit->ip;
#line 3365
          (jit->ip) ++;
#line 3365
          *tmp___9 = imb.b[1];
#line 3365
          tmp___10 = jit->ip;
#line 3365
          (jit->ip) ++;
#line 3365
          *tmp___10 = imb.b[2];
#line 3365
          tmp___11 = jit->ip;
#line 3365
          (jit->ip) ++;
#line 3365
          *tmp___11 = imb.b[3];
#line 3365
          break;
        }
#line 3365
        break;
      }
    } else {
#line 3366
      while (1) {
#line 3366
        if ((int )op->arg_size == 2) {
#line 3366
          tmp___12 = jit->ip;
#line 3366
          (jit->ip) ++;
#line 3366
          *tmp___12 = (unsigned char)102;
        }
#line 3366
        while (1) {
#line 3366
          if ((int )op->arg_size > 4) {
#line 3366
            tmp___13 = 8;
          } else {
#line 3366
            tmp___13 = 0;
          }
#line 3366
          if (a1 > 7L) {
#line 3366
            tmp___14 = 4;
          } else {
#line 3366
            tmp___14 = 0;
          }
#line 3366
          if (a2 > 7L) {
#line 3366
            tmp___15 = 1;
          } else {
#line 3366
            tmp___15 = 0;
          }
#line 3366
          _amd64_rex_bits___0 = (unsigned char )((tmp___13 | tmp___14) | tmp___15);
#line 3366
          if ((int )_amd64_rex_bits___0 != 0) {
#line 3366
            tmp___16 = jit->ip;
#line 3366
            (jit->ip) ++;
#line 3366
            *tmp___16 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
          } else
#line 3366
          if ((int )op->arg_size == 1) {
#line 3366
            tmp___16 = jit->ip;
#line 3366
            (jit->ip) ++;
#line 3366
            *tmp___16 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
          }
#line 3366
          break;
        }
#line 3366
        switch ((int )op->arg_size) {
        case 1: 
#line 3366
        tmp___17 = jit->ip;
#line 3366
        (jit->ip) ++;
#line 3366
        *tmp___17 = (unsigned char)138;
#line 3366
        break;
        case 8: 
        case 4: 
        case 2: 
#line 3366
        tmp___18 = jit->ip;
#line 3366
        (jit->ip) ++;
#line 3366
        *tmp___18 = (unsigned char)139;
#line 3366
        break;
        default: 
#line 3366
        tmp___19 = __builtin_expect(1L, 0L);
#line 3366
        if (tmp___19) {
#line 3366
          __assert_rtn((char const   *)"emit_ld_op", (char const   *)"./jitter-Darwin-X86-64.c",
                       3366, (char const   *)"0");
        }
        }
#line 3366
        while (1) {
#line 3366
          if (a2 == 16L) {
#line 3366
            while (1) {
#line 3366
              tmp___20 = jit->ip;
#line 3366
              (jit->ip) ++;
#line 3366
              *tmp___20 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
#line 3366
              break;
            }
#line 3366
            while (1) {
#line 3366
              imb___0.val = 0;
#line 3366
              tmp___21 = jit->ip;
#line 3366
              (jit->ip) ++;
#line 3366
              *tmp___21 = imb___0.b[0];
#line 3366
              tmp___22 = jit->ip;
#line 3366
              (jit->ip) ++;
#line 3366
              *tmp___22 = imb___0.b[1];
#line 3366
              tmp___23 = jit->ip;
#line 3366
              (jit->ip) ++;
#line 3366
              *tmp___23 = imb___0.b[2];
#line 3366
              tmp___24 = jit->ip;
#line 3366
              (jit->ip) ++;
#line 3366
              *tmp___24 = imb___0.b[3];
#line 3366
              break;
            }
          } else {
#line 3366
            while (1) {
#line 3366
              if ((a2 & 7L) == 4L) {
#line 3366
                while (1) {
#line 3366
                  tmp___25 = jit->ip;
#line 3366
                  (jit->ip) ++;
#line 3366
                  *tmp___25 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3366
                  break;
                }
#line 3366
                while (1) {
#line 3366
                  tmp___26 = jit->ip;
#line 3366
                  (jit->ip) ++;
#line 3366
                  *tmp___26 = (unsigned char )((4 << 3) | 4);
#line 3366
                  break;
                }
#line 3366
                break;
              }
#line 3366
              if ((a2 & 7L) != 5L) {
#line 3366
                while (1) {
#line 3366
                  tmp___35 = jit->ip;
#line 3366
                  (jit->ip) ++;
#line 3366
                  *tmp___35 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 3366
                  break;
                }
#line 3366
                break;
              }
#line 3366
              while (1) {
#line 3366
                tmp___36 = jit->ip;
#line 3366
                (jit->ip) ++;
#line 3366
                *tmp___36 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 3366
                break;
              }
#line 3366
              while (1) {
#line 3366
                *(jit->ip) = (unsigned char)0;
#line 3366
                (jit->ip) ++;
#line 3366
                break;
              }
#line 3366
              break;
            }
          }
#line 3366
          break;
        }
#line 3366
        break;
      }
    }
#line 3367
    return;
  }
#line 3370
  switch ((int )op->code) {
  case 266: 
#line 3371
  while (1) {
#line 3371
    if ((int )op->arg_size == 4) {
#line 3371
      while (1) {
#line 3371
        while (1) {
#line 3371
          if (a1 > 7L) {
#line 3371
            tmp___42 = 4;
          } else {
#line 3371
            tmp___42 = 0;
          }
#line 3371
          _amd64_rex_bits___1 = (unsigned char )(8 | tmp___42);
#line 3371
          if ((int )_amd64_rex_bits___1 != 0) {
#line 3371
            tmp___43 = jit->ip;
#line 3371
            (jit->ip) ++;
#line 3371
            *tmp___43 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
          }
#line 3371
          break;
        }
#line 3371
        tmp___44 = jit->ip;
#line 3371
        (jit->ip) ++;
#line 3371
        *tmp___44 = (unsigned char)99;
#line 3371
        while (1) {
#line 3371
          tmp___45 = jit->ip;
#line 3371
          (jit->ip) ++;
#line 3371
          *tmp___45 = (unsigned char )(((a1 & 7L) << 3) | 4L);
#line 3371
          break;
        }
#line 3371
        while (1) {
#line 3371
          tmp___46 = jit->ip;
#line 3371
          (jit->ip) ++;
#line 3371
          *tmp___46 = (unsigned char )((4 << 3) | 5);
#line 3371
          break;
        }
#line 3371
        while (1) {
#line 3371
          imb___3.val = (int )a2;
#line 3371
          tmp___47 = jit->ip;
#line 3371
          (jit->ip) ++;
#line 3371
          *tmp___47 = imb___3.b[0];
#line 3371
          tmp___48 = jit->ip;
#line 3371
          (jit->ip) ++;
#line 3371
          *tmp___48 = imb___3.b[1];
#line 3371
          tmp___49 = jit->ip;
#line 3371
          (jit->ip) ++;
#line 3371
          *tmp___49 = imb___3.b[2];
#line 3371
          tmp___50 = jit->ip;
#line 3371
          (jit->ip) ++;
#line 3371
          *tmp___50 = imb___3.b[3];
#line 3371
          break;
        }
#line 3371
        break;
      }
#line 3371
      break;
    }
#line 3371
    while (1) {
#line 3371
      if (a1 > 7L) {
#line 3371
        tmp___51 = 4;
      } else {
#line 3371
        tmp___51 = 0;
      }
#line 3371
      _amd64_rex_bits___2 = (unsigned char )(8 | tmp___51);
#line 3371
      if ((int )_amd64_rex_bits___2 != 0) {
#line 3371
        tmp___52 = jit->ip;
#line 3371
        (jit->ip) ++;
#line 3371
        *tmp___52 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
      }
#line 3371
      break;
    }
#line 3371
    tmp___53 = jit->ip;
#line 3371
    (jit->ip) ++;
#line 3371
    *tmp___53 = (unsigned char)15;
#line 3371
    switch ((int )op->arg_size) {
    case 1: 
#line 3371
    tmp___54 = jit->ip;
#line 3371
    (jit->ip) ++;
#line 3371
    *tmp___54 = (unsigned char)190;
#line 3371
    break;
    case 2: 
#line 3371
    tmp___55 = jit->ip;
#line 3371
    (jit->ip) ++;
#line 3371
    *tmp___55 = (unsigned char)191;
#line 3371
    break;
    default: 
#line 3371
    tmp___56 = __builtin_expect(1L, 0L);
#line 3371
    if (tmp___56) {
#line 3371
      __assert_rtn((char const   *)"emit_ld_op", (char const   *)"./jitter-Darwin-X86-64.c",
                   3371, (char const   *)"0");
    }
    }
#line 3371
    while (1) {
#line 3371
      tmp___57 = jit->ip;
#line 3371
      (jit->ip) ++;
#line 3371
      *tmp___57 = (unsigned char )(((a1 & 7L) << 3) | 4L);
#line 3371
      break;
    }
#line 3371
    while (1) {
#line 3371
      tmp___58 = jit->ip;
#line 3371
      (jit->ip) ++;
#line 3371
      *tmp___58 = (unsigned char )((4 << 3) | 5);
#line 3371
      break;
    }
#line 3371
    while (1) {
#line 3371
      imb___4.val = (int )a2;
#line 3371
      tmp___59 = jit->ip;
#line 3371
      (jit->ip) ++;
#line 3371
      *tmp___59 = imb___4.b[0];
#line 3371
      tmp___60 = jit->ip;
#line 3371
      (jit->ip) ++;
#line 3371
      *tmp___60 = imb___4.b[1];
#line 3371
      tmp___61 = jit->ip;
#line 3371
      (jit->ip) ++;
#line 3371
      *tmp___61 = imb___4.b[2];
#line 3371
      tmp___62 = jit->ip;
#line 3371
      (jit->ip) ++;
#line 3371
      *tmp___62 = imb___4.b[3];
#line 3371
      break;
    }
#line 3371
    break;
  }
#line 3371
  break;
  case 270: 
#line 3372
  while (1) {
#line 3372
    if ((int )op->arg_size == 8) {
#line 3372
      goto _L;
    } else
#line 3372
    if ((int )op->arg_size == 4) {
      _L: /* CIL Label */ 
#line 3372
      while (1) {
#line 3372
        if ((int )op->arg_size == 2) {
#line 3372
          tmp___63 = jit->ip;
#line 3372
          (jit->ip) ++;
#line 3372
          *tmp___63 = (unsigned char)102;
        }
#line 3372
        while (1) {
#line 3372
          if ((int )op->arg_size > 4) {
#line 3372
            tmp___64 = 8;
          } else {
#line 3372
            tmp___64 = 0;
          }
#line 3372
          if (a1 > 7L) {
#line 3372
            tmp___65 = 4;
          } else {
#line 3372
            tmp___65 = 0;
          }
#line 3372
          _amd64_rex_bits___3 = (unsigned char )(tmp___64 | tmp___65);
#line 3372
          if ((int )_amd64_rex_bits___3 != 0) {
#line 3372
            tmp___66 = jit->ip;
#line 3372
            (jit->ip) ++;
#line 3372
            *tmp___66 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
          } else
#line 3372
          if ((int )op->arg_size == 1) {
#line 3372
            tmp___66 = jit->ip;
#line 3372
            (jit->ip) ++;
#line 3372
            *tmp___66 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
          }
#line 3372
          break;
        }
#line 3372
        switch ((int )op->arg_size) {
        case 1: 
#line 3372
        tmp___67 = jit->ip;
#line 3372
        (jit->ip) ++;
#line 3372
        *tmp___67 = (unsigned char)138;
#line 3372
        break;
        case 8: 
        case 4: 
        case 2: 
#line 3372
        tmp___68 = jit->ip;
#line 3372
        (jit->ip) ++;
#line 3372
        *tmp___68 = (unsigned char)139;
#line 3372
        break;
        default: 
#line 3372
        tmp___69 = __builtin_expect(1L, 0L);
#line 3372
        if (tmp___69) {
#line 3372
          __assert_rtn((char const   *)"emit_ld_op", (char const   *)"./jitter-Darwin-X86-64.c",
                       3372, (char const   *)"0");
        }
        }
#line 3372
        while (1) {
#line 3372
          tmp___70 = jit->ip;
#line 3372
          (jit->ip) ++;
#line 3372
          *tmp___70 = (unsigned char )(((a1 & 7L) << 3) | 4L);
#line 3372
          break;
        }
#line 3372
        while (1) {
#line 3372
          tmp___71 = jit->ip;
#line 3372
          (jit->ip) ++;
#line 3372
          *tmp___71 = (unsigned char )((4 << 3) | 5);
#line 3372
          break;
        }
#line 3372
        while (1) {
#line 3372
          imb___5.val = (int )a2;
#line 3372
          tmp___72 = jit->ip;
#line 3372
          (jit->ip) ++;
#line 3372
          *tmp___72 = imb___5.b[0];
#line 3372
          tmp___73 = jit->ip;
#line 3372
          (jit->ip) ++;
#line 3372
          *tmp___73 = imb___5.b[1];
#line 3372
          tmp___74 = jit->ip;
#line 3372
          (jit->ip) ++;
#line 3372
          *tmp___74 = imb___5.b[2];
#line 3372
          tmp___75 = jit->ip;
#line 3372
          (jit->ip) ++;
#line 3372
          *tmp___75 = imb___5.b[3];
#line 3372
          break;
        }
#line 3372
        break;
      }
#line 3372
      break;
    }
#line 3372
    while (1) {
#line 3372
      if (a1 > 7L) {
#line 3372
        tmp___76 = 4;
      } else {
#line 3372
        tmp___76 = 0;
      }
#line 3372
      _amd64_rex_bits___4 = (unsigned char )(8 | tmp___76);
#line 3372
      if ((int )_amd64_rex_bits___4 != 0) {
#line 3372
        tmp___77 = jit->ip;
#line 3372
        (jit->ip) ++;
#line 3372
        *tmp___77 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
      }
#line 3372
      break;
    }
#line 3372
    tmp___78 = jit->ip;
#line 3372
    (jit->ip) ++;
#line 3372
    *tmp___78 = (unsigned char)15;
#line 3372
    switch ((int )op->arg_size) {
    case 1: 
#line 3372
    tmp___79 = jit->ip;
#line 3372
    (jit->ip) ++;
#line 3372
    *tmp___79 = (unsigned char)182;
#line 3372
    break;
    case 2: 
#line 3372
    tmp___80 = jit->ip;
#line 3372
    (jit->ip) ++;
#line 3372
    *tmp___80 = (unsigned char)183;
#line 3372
    break;
    default: 
#line 3372
    tmp___81 = __builtin_expect(1L, 0L);
#line 3372
    if (tmp___81) {
#line 3372
      __assert_rtn((char const   *)"emit_ld_op", (char const   *)"./jitter-Darwin-X86-64.c",
                   3372, (char const   *)"0");
    }
    }
#line 3372
    while (1) {
#line 3372
      tmp___82 = jit->ip;
#line 3372
      (jit->ip) ++;
#line 3372
      *tmp___82 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3372
      break;
    }
#line 3372
    while (1) {
#line 3372
      tmp___83 = jit->ip;
#line 3372
      (jit->ip) ++;
#line 3372
      *tmp___83 = (unsigned char )((4 << 3) | 5);
#line 3372
      break;
    }
#line 3372
    while (1) {
#line 3372
      imb___6.val = (int )a2;
#line 3372
      tmp___84 = jit->ip;
#line 3372
      (jit->ip) ++;
#line 3372
      *tmp___84 = imb___6.b[0];
#line 3372
      tmp___85 = jit->ip;
#line 3372
      (jit->ip) ++;
#line 3372
      *tmp___85 = imb___6.b[1];
#line 3372
      tmp___86 = jit->ip;
#line 3372
      (jit->ip) ++;
#line 3372
      *tmp___86 = imb___6.b[2];
#line 3372
      tmp___87 = jit->ip;
#line 3372
      (jit->ip) ++;
#line 3372
      *tmp___87 = imb___6.b[3];
#line 3372
      break;
    }
#line 3372
    break;
  }
#line 3372
  break;
  case 265: 
#line 3373
  while (1) {
#line 3373
    if ((int )op->arg_size == 4) {
#line 3373
      while (1) {
#line 3373
        while (1) {
#line 3373
          if (a1 > 7L) {
#line 3373
            tmp___88 = 4;
          } else {
#line 3373
            tmp___88 = 0;
          }
#line 3373
          if (a2 > 7L) {
#line 3373
            tmp___89 = 1;
          } else {
#line 3373
            tmp___89 = 0;
          }
#line 3373
          _amd64_rex_bits___5 = (unsigned char )((8 | tmp___88) | tmp___89);
#line 3373
          if ((int )_amd64_rex_bits___5 != 0) {
#line 3373
            tmp___90 = jit->ip;
#line 3373
            (jit->ip) ++;
#line 3373
            *tmp___90 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
          }
#line 3373
          break;
        }
#line 3373
        tmp___91 = jit->ip;
#line 3373
        (jit->ip) ++;
#line 3373
        *tmp___91 = (unsigned char)99;
#line 3373
        while (1) {
#line 3373
          if ((a2 & 7L) == 4L) {
#line 3373
            while (1) {
#line 3373
              tmp___92 = jit->ip;
#line 3373
              (jit->ip) ++;
#line 3373
              *tmp___92 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3373
              break;
            }
#line 3373
            while (1) {
#line 3373
              tmp___93 = jit->ip;
#line 3373
              (jit->ip) ++;
#line 3373
              *tmp___93 = (unsigned char )((4 << 3) | 4);
#line 3373
              break;
            }
#line 3373
            break;
          }
#line 3373
          if ((a2 & 7L) != 5L) {
#line 3373
            while (1) {
#line 3373
              tmp___102 = jit->ip;
#line 3373
              (jit->ip) ++;
#line 3373
              *tmp___102 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 3373
              break;
            }
#line 3373
            break;
          }
#line 3373
          while (1) {
#line 3373
            tmp___103 = jit->ip;
#line 3373
            (jit->ip) ++;
#line 3373
            *tmp___103 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 3373
            break;
          }
#line 3373
          while (1) {
#line 3373
            *(jit->ip) = (unsigned char)0;
#line 3373
            (jit->ip) ++;
#line 3373
            break;
          }
#line 3373
          break;
        }
#line 3373
        break;
      }
#line 3373
      break;
    }
#line 3373
    while (1) {
#line 3373
      if (a1 > 7L) {
#line 3373
        tmp___109 = 4;
      } else {
#line 3373
        tmp___109 = 0;
      }
#line 3373
      if (a2 > 7L) {
#line 3373
        tmp___110 = 1;
      } else {
#line 3373
        tmp___110 = 0;
      }
#line 3373
      _amd64_rex_bits___6 = (unsigned char )((8 | tmp___109) | tmp___110);
#line 3373
      if ((int )_amd64_rex_bits___6 != 0) {
#line 3373
        tmp___111 = jit->ip;
#line 3373
        (jit->ip) ++;
#line 3373
        *tmp___111 = (unsigned char )(0x40 | (int )_amd64_rex_bits___6);
      }
#line 3373
      break;
    }
#line 3373
    tmp___112 = jit->ip;
#line 3373
    (jit->ip) ++;
#line 3373
    *tmp___112 = (unsigned char)15;
#line 3373
    switch ((int )op->arg_size) {
    case 1: 
#line 3373
    tmp___113 = jit->ip;
#line 3373
    (jit->ip) ++;
#line 3373
    *tmp___113 = (unsigned char)190;
#line 3373
    break;
    case 2: 
#line 3373
    tmp___114 = jit->ip;
#line 3373
    (jit->ip) ++;
#line 3373
    *tmp___114 = (unsigned char)191;
#line 3373
    break;
    default: 
#line 3373
    tmp___115 = __builtin_expect(1L, 0L);
#line 3373
    if (tmp___115) {
#line 3373
      __assert_rtn((char const   *)"emit_ld_op", (char const   *)"./jitter-Darwin-X86-64.c",
                   3373, (char const   *)"0");
    }
    }
#line 3373
    while (1) {
#line 3373
      if ((a2 & 7L) == 4L) {
#line 3373
        while (1) {
#line 3373
          tmp___116 = jit->ip;
#line 3373
          (jit->ip) ++;
#line 3373
          *tmp___116 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3373
          break;
        }
#line 3373
        while (1) {
#line 3373
          tmp___117 = jit->ip;
#line 3373
          (jit->ip) ++;
#line 3373
          *tmp___117 = (unsigned char )((4 << 3) | 4);
#line 3373
          break;
        }
#line 3373
        break;
      }
#line 3373
      if ((a2 & 7L) != 5L) {
#line 3373
        while (1) {
#line 3373
          tmp___126 = jit->ip;
#line 3373
          (jit->ip) ++;
#line 3373
          *tmp___126 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 3373
          break;
        }
#line 3373
        break;
      }
#line 3373
      while (1) {
#line 3373
        tmp___127 = jit->ip;
#line 3373
        (jit->ip) ++;
#line 3373
        *tmp___127 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 3373
        break;
      }
#line 3373
      while (1) {
#line 3373
        *(jit->ip) = (unsigned char)0;
#line 3373
        (jit->ip) ++;
#line 3373
        break;
      }
#line 3373
      break;
    }
#line 3373
    break;
  }
#line 3373
  break;
  case 269: 
#line 3374
  while (1) {
#line 3374
    if ((int )op->arg_size == 8) {
#line 3374
      goto _L___0;
    } else
#line 3374
    if ((int )op->arg_size == 4) {
      _L___0: /* CIL Label */ 
#line 3374
      while (1) {
#line 3374
        if ((int )op->arg_size == 2) {
#line 3374
          tmp___133 = jit->ip;
#line 3374
          (jit->ip) ++;
#line 3374
          *tmp___133 = (unsigned char)102;
        }
#line 3374
        while (1) {
#line 3374
          if ((int )op->arg_size > 4) {
#line 3374
            tmp___134 = 8;
          } else {
#line 3374
            tmp___134 = 0;
          }
#line 3374
          if (a1 > 7L) {
#line 3374
            tmp___135 = 4;
          } else {
#line 3374
            tmp___135 = 0;
          }
#line 3374
          if (a2 > 7L) {
#line 3374
            tmp___136 = 1;
          } else {
#line 3374
            tmp___136 = 0;
          }
#line 3374
          _amd64_rex_bits___7 = (unsigned char )((tmp___134 | tmp___135) | tmp___136);
#line 3374
          if ((int )_amd64_rex_bits___7 != 0) {
#line 3374
            tmp___137 = jit->ip;
#line 3374
            (jit->ip) ++;
#line 3374
            *tmp___137 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
          } else
#line 3374
          if ((int )op->arg_size == 1) {
#line 3374
            tmp___137 = jit->ip;
#line 3374
            (jit->ip) ++;
#line 3374
            *tmp___137 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
          }
#line 3374
          break;
        }
#line 3374
        switch ((int )op->arg_size) {
        case 1: 
#line 3374
        tmp___138 = jit->ip;
#line 3374
        (jit->ip) ++;
#line 3374
        *tmp___138 = (unsigned char)138;
#line 3374
        break;
        case 8: 
        case 4: 
        case 2: 
#line 3374
        tmp___139 = jit->ip;
#line 3374
        (jit->ip) ++;
#line 3374
        *tmp___139 = (unsigned char)139;
#line 3374
        break;
        default: 
#line 3374
        tmp___140 = __builtin_expect(1L, 0L);
#line 3374
        if (tmp___140) {
#line 3374
          __assert_rtn((char const   *)"emit_ld_op", (char const   *)"./jitter-Darwin-X86-64.c",
                       3374, (char const   *)"0");
        }
        }
#line 3374
        while (1) {
#line 3374
          if (a2 == 16L) {
#line 3374
            while (1) {
#line 3374
              tmp___141 = jit->ip;
#line 3374
              (jit->ip) ++;
#line 3374
              *tmp___141 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
#line 3374
              break;
            }
#line 3374
            while (1) {
#line 3374
              imb___11.val = 0;
#line 3374
              tmp___142 = jit->ip;
#line 3374
              (jit->ip) ++;
#line 3374
              *tmp___142 = imb___11.b[0];
#line 3374
              tmp___143 = jit->ip;
#line 3374
              (jit->ip) ++;
#line 3374
              *tmp___143 = imb___11.b[1];
#line 3374
              tmp___144 = jit->ip;
#line 3374
              (jit->ip) ++;
#line 3374
              *tmp___144 = imb___11.b[2];
#line 3374
              tmp___145 = jit->ip;
#line 3374
              (jit->ip) ++;
#line 3374
              *tmp___145 = imb___11.b[3];
#line 3374
              break;
            }
          } else {
#line 3374
            while (1) {
#line 3374
              if ((a2 & 7L) == 4L) {
#line 3374
                while (1) {
#line 3374
                  tmp___146 = jit->ip;
#line 3374
                  (jit->ip) ++;
#line 3374
                  *tmp___146 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3374
                  break;
                }
#line 3374
                while (1) {
#line 3374
                  tmp___147 = jit->ip;
#line 3374
                  (jit->ip) ++;
#line 3374
                  *tmp___147 = (unsigned char )((4 << 3) | 4);
#line 3374
                  break;
                }
#line 3374
                break;
              }
#line 3374
              if ((a2 & 7L) != 5L) {
#line 3374
                while (1) {
#line 3374
                  tmp___156 = jit->ip;
#line 3374
                  (jit->ip) ++;
#line 3374
                  *tmp___156 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 3374
                  break;
                }
#line 3374
                break;
              }
#line 3374
              while (1) {
#line 3374
                tmp___157 = jit->ip;
#line 3374
                (jit->ip) ++;
#line 3374
                *tmp___157 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 3374
                break;
              }
#line 3374
              while (1) {
#line 3374
                *(jit->ip) = (unsigned char)0;
#line 3374
                (jit->ip) ++;
#line 3374
                break;
              }
#line 3374
              break;
            }
          }
#line 3374
          break;
        }
#line 3374
        break;
      }
#line 3374
      break;
    }
#line 3374
    while (1) {
#line 3374
      if (a1 > 7L) {
#line 3374
        tmp___163 = 4;
      } else {
#line 3374
        tmp___163 = 0;
      }
#line 3374
      if (a2 > 7L) {
#line 3374
        tmp___164 = 1;
      } else {
#line 3374
        tmp___164 = 0;
      }
#line 3374
      _amd64_rex_bits___8 = (unsigned char )((8 | tmp___163) | tmp___164);
#line 3374
      if ((int )_amd64_rex_bits___8 != 0) {
#line 3374
        tmp___165 = jit->ip;
#line 3374
        (jit->ip) ++;
#line 3374
        *tmp___165 = (unsigned char )(0x40 | (int )_amd64_rex_bits___8);
      }
#line 3374
      break;
    }
#line 3374
    tmp___166 = jit->ip;
#line 3374
    (jit->ip) ++;
#line 3374
    *tmp___166 = (unsigned char)15;
#line 3374
    switch ((int )op->arg_size) {
    case 1: 
#line 3374
    tmp___167 = jit->ip;
#line 3374
    (jit->ip) ++;
#line 3374
    *tmp___167 = (unsigned char)182;
#line 3374
    break;
    case 2: 
#line 3374
    tmp___168 = jit->ip;
#line 3374
    (jit->ip) ++;
#line 3374
    *tmp___168 = (unsigned char)183;
#line 3374
    break;
    default: 
#line 3374
    tmp___169 = __builtin_expect(1L, 0L);
#line 3374
    if (tmp___169) {
#line 3374
      __assert_rtn((char const   *)"emit_ld_op", (char const   *)"./jitter-Darwin-X86-64.c",
                   3374, (char const   *)"0");
    }
    }
#line 3374
    while (1) {
#line 3374
      if ((a2 & 7L) == 4L) {
#line 3374
        while (1) {
#line 3374
          tmp___170 = jit->ip;
#line 3374
          (jit->ip) ++;
#line 3374
          *tmp___170 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3374
          break;
        }
#line 3374
        while (1) {
#line 3374
          tmp___171 = jit->ip;
#line 3374
          (jit->ip) ++;
#line 3374
          *tmp___171 = (unsigned char )((4 << 3) | 4);
#line 3374
          break;
        }
#line 3374
        break;
      }
#line 3374
      if ((a2 & 7L) != 5L) {
#line 3374
        while (1) {
#line 3374
          tmp___180 = jit->ip;
#line 3374
          (jit->ip) ++;
#line 3374
          *tmp___180 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 3374
          break;
        }
#line 3374
        break;
      }
#line 3374
      while (1) {
#line 3374
        tmp___181 = jit->ip;
#line 3374
        (jit->ip) ++;
#line 3374
        *tmp___181 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 3374
        break;
      }
#line 3374
      while (1) {
#line 3374
        *(jit->ip) = (unsigned char)0;
#line 3374
        (jit->ip) ++;
#line 3374
        break;
      }
#line 3374
      break;
    }
#line 3374
    break;
  }
#line 3374
  break;
  default: 
#line 3375
  tmp___187 = __builtin_expect(1L, 0L);
#line 3375
  if (tmp___187) {
#line 3375
    __assert_rtn((char const   *)"emit_ld_op", (char const   *)"./jitter-Darwin-X86-64.c",
                 3375, (char const   *)"0");
  }
  }
#line 3377
  return;
}
}
/* END FUNCTION-DEF emit_ld_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF unload_reg LOC=UNKNOWN */
void unload_reg(jit_op *op , jit_hw_reg *hreg , jit_value virt_reg ) 
{ 


  {
#line 5210
  insert_reg_op(16, op, virt_reg, (jit_value )hreg->id);
#line 5211
  return;
}
}
/* END FUNCTION-DEF unload_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_arg_layout_create_input LOC=UNKNOWN */
static struct jit_arg_layout *jit_arg_layout_create_input(struct jit *jit , struct jit_func_info *info ,
                                                          int arg_cnt ) 
{ 
  struct jit_arg_layout *layout ;
  struct jit_arg_layout *tmp ;
  int i ;
  struct jit_inp_arg *arg ;

  {
#line 1742
  tmp = jit_arg_layout_create(jit, arg_cnt + 1);
#line 1742
  layout = tmp;
#line 1744
  i = 0;
#line 1744
  while (i <= arg_cnt) {
#line 1745
    arg = info->args + i;
#line 1746
    jit_arg_layout_add(layout, (unsigned int )arg->type == 2U, (struct jit_out_arg *)((void *)0));
#line 1744
    i ++;
  }
#line 1748
  return (layout);
}
}
/* END FUNCTION-DEF jit_arg_layout_create_input LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_branch LOC=UNKNOWN */
static void emit_sse_branch(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                            jit_value a3 , int x86_cond ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  int offset ;
  int tmp___6 ;
  size_t tmp___7 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  x86_imm_buf imb ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;

  {
#line 1568
  while (1) {
#line 1568
    tmp = jit->ip;
#line 1568
    (jit->ip) ++;
#line 1568
    *tmp = (unsigned char)102;
#line 1568
    while (1) {
#line 1568
      if (a2 > 7L) {
#line 1568
        tmp___0 = 4;
      } else {
#line 1568
        tmp___0 = 0;
      }
#line 1568
      if (a3 > 7L) {
#line 1568
        tmp___1 = 1;
      } else {
#line 1568
        tmp___1 = 0;
      }
#line 1568
      _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
#line 1568
      if ((int )_amd64_rex_bits != 0) {
#line 1568
        tmp___2 = jit->ip;
#line 1568
        (jit->ip) ++;
#line 1568
        *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
      }
#line 1568
      break;
    }
#line 1568
    tmp___3 = jit->ip;
#line 1568
    (jit->ip) ++;
#line 1568
    *tmp___3 = (unsigned char)15;
#line 1568
    tmp___4 = jit->ip;
#line 1568
    (jit->ip) ++;
#line 1568
    *tmp___4 = (unsigned char)47;
#line 1568
    while (1) {
#line 1568
      while (1) {
#line 1568
        tmp___5 = jit->ip;
#line 1568
        (jit->ip) ++;
#line 1568
        *tmp___5 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a3 & 7L));
#line 1568
        break;
      }
#line 1568
      break;
    }
#line 1568
    break;
  }
#line 1569
  op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
#line 1570
  while (1) {
#line 1570
    tmp___8 = jit_is_label(jit, (void *)a1);
#line 1570
    if (tmp___8) {
#line 1570
      tmp___7 = ((size_t )((jit_value )jit->buf) + ((jit_label *)a1)->pos) - (size_t )((jit_value )jit->ip);
    } else {
#line 1570
      tmp___7 = (size_t )a1;
    }
#line 1570
    offset = (int )(tmp___7 - 6UL);
#line 1570
    while (1) {
#line 1570
      tmp___9 = jit->ip;
#line 1570
      (jit->ip) ++;
#line 1570
      *tmp___9 = (unsigned char)15;
#line 1570
      tmp___11 = jit->ip;
#line 1570
      (jit->ip) ++;
#line 1570
      *tmp___11 = (unsigned char )((int const   )x86_cc_unsigned_map[x86_cond] + 16);
#line 1570
      while (1) {
#line 1570
        imb.val = offset;
#line 1570
        tmp___12 = jit->ip;
#line 1570
        (jit->ip) ++;
#line 1570
        *tmp___12 = imb.b[0];
#line 1570
        tmp___13 = jit->ip;
#line 1570
        (jit->ip) ++;
#line 1570
        *tmp___13 = imb.b[1];
#line 1570
        tmp___14 = jit->ip;
#line 1570
        (jit->ip) ++;
#line 1570
        *tmp___14 = imb.b[2];
#line 1570
        tmp___15 = jit->ip;
#line 1570
        (jit->ip) ++;
#line 1570
        *tmp___15 = imb.b[3];
#line 1570
        break;
      }
#line 1570
      break;
    }
#line 1570
    break;
  }
#line 1571
  return;
}
}
/* END FUNCTION-DEF emit_sse_branch LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isprint LOC=UNKNOWN */
__inline int isprint(int _c ) 
{ 
  int tmp ;

  {
#line 257 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  tmp = __istype(_c, 262144UL);
#line 257
  return (tmp);
}
}
/* END FUNCTION-DEF isprint LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF is_active_register LOC=UNKNOWN */
static int is_active_register(struct jit_reg_allocator *al , jit_hw_reg *reg , jit_op *op ) 
{ 
  jit_value vreg ;
  jit_hw_reg *hw ;
  jit_hw_reg *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 2873
  if ((unsigned long )op->next == (unsigned long )((void *)0)) {
#line 2873 "./jitter-Darwin-X86-64.c"
    return (0);
  }
#line 2874
  if ((unsigned int )((jit_opcode )((int )(op->next)->code & 0xfff8)) == 400U) {
#line 2874
    return (1);
  } else
#line 2874
  if ((unsigned int )((jit_opcode )((int )(op->next)->code & 0xfff8)) == 408U) {
#line 2874
    return (1);
  } else
#line 2874
  if ((unsigned int )((jit_opcode )((int )(op->next)->code & 0xfff8)) == 416U) {
#line 2874
    return (1);
  }
#line 2875
  if ((unsigned int )((jit_opcode )((int )(op->next)->code & 0xfff8)) == 440U) {
#line 2875
    if ((unsigned long )reg == (unsigned long )al->ret_reg) {
#line 2875
      return (1);
    }
  }
#line 2878
  if ((unsigned long )(op->next)->regmap == (unsigned long )((void *)0)) {
#line 2878
    return (1);
  }
#line 2879
  if ((unsigned long )(op->prev)->regmap == (unsigned long )((void *)0)) {
#line 2879
    return (1);
  }
#line 2882
  tmp = rmap_is_associated(op->regmap, reg->id, (int )reg->fp, & vreg);
#line 2882
  hw = tmp;
#line 2884
  if (hw) {
#line 2885
    if (op->prev) {
#line 2885
      if ((op->prev)->live_in) {
#line 2885
        tmp___0 = jit_set_get((op->prev)->live_in, (int )vreg);
#line 2885
        if (tmp___0) {
#line 2885
          return (1);
        } else {
#line 2885
          goto _L;
        }
      } else
      _L: /* CIL Label */ 
#line 2885
      if ((op->prev)->live_out) {
#line 2885
        tmp___1 = jit_set_get((op->prev)->live_out, (int )vreg);
#line 2885
        if (tmp___1) {
#line 2885
          return (1);
        }
      }
    }
#line 2886
    if (op->next) {
#line 2886
      if ((op->next)->live_in) {
#line 2886
        tmp___2 = jit_set_get((op->next)->live_in, (int )vreg);
#line 2886
        if (tmp___2) {
#line 2886
          return (1);
        } else {
#line 2886
          goto _L___0;
        }
      } else
      _L___0: /* CIL Label */ 
#line 2886
      if ((op->next)->live_out) {
#line 2886
        tmp___3 = jit_set_get((op->next)->live_out, (int )vreg);
#line 2886
        if (tmp___3) {
#line 2886
          return (1);
        }
      }
    }
#line 2887
    return (0);
  }
#line 2889
  return (0);
}
}
/* END FUNCTION-DEF is_active_register LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_full_op_name LOC=UNKNOWN */
void print_full_op_name(struct output_buf *linebuf , jit_op *op ) 
{ 
  char *op_name ;
  char *tmp ;

  {
#line 4435
  tmp = jit_get_op_name(op);
#line 4435
  op_name = tmp;
#line 4436
  ob_append(linebuf, op_name);
#line 4437
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 416U) {
#line 4437
    if (((int )op->code & 0x0007) & 0x02) {
#line 4437
      return;
    }
  }
#line 4438
  if (((int )op->code & 0x0007) & 0x02) {
#line 4438
    ob_append(linebuf, "i");
  }
#line 4439
  if (((int )op->code & 0x0007) & 0x01) {
#line 4439
    ob_append(linebuf, "r");
  }
#line 4440
  if (((int )op->code & 0x0007) & 0x04) {
#line 4440
    ob_append(linebuf, "_u");
  }
#line 4441
  return;
}
}
/* END FUNCTION-DEF print_full_op_name LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isideogram LOC=UNKNOWN */
__inline int isideogram(int _c ) 
{ 
  int tmp ;

  {
#line 319 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  tmp = __istype(_c, 524288UL);
#line 319
  return (tmp);
}
}
/* END FUNCTION-DEF isideogram LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF funcall_fput_arg LOC=UNKNOWN */
__inline static void funcall_fput_arg(struct jit *jit , jit_op *op ) 
{ 
  int pos ;
  struct jit_out_arg *arg ;
  int tmp ;

  {
#line 964 "./jitter-Darwin-X86-64.c"
  pos = jit->prepared_args.ready;
#line 965
  arg = jit->prepared_args.args + pos;
#line 966
  arg->isreg = (char )(! ((int )op->code & 0x02));
#line 967
  arg->isfp = (char)1;
#line 968
  arg->isref = (char )((int )op->spec == ((0x02 << 2) | 0x02));
#line 969
  arg->size = (char )op->arg_size;
#line 970
  arg->isoptional = (char )jit->prepared_args.variadic;
#line 972
  tmp = jit->prepared_args.fp_args;
#line 972
  (jit->prepared_args.fp_args) ++;
#line 972
  arg->argpos = tmp;
#line 977
  if (arg->isref) {
#line 977
    arg->value.label = (jit_label *)op->arg[1];
  } else
#line 978
  if ((int )op->code & 0x02) {
#line 978
    arg->value.fp = op->flt_imm;
  } else {
#line 979
    arg->value.generic = op->arg[0];
  }
#line 980
  (jit->prepared_args.ready) ++;
#line 983
  if (jit->prepared_args.fp_args > (jit->reg_al)->fp_arg_reg_cnt) {
#line 985
    jit->prepared_args.stack_size += (int )sizeof(void *);
  }
#line 990
  return;
}
}
/* END FUNCTION-DEF funcall_fput_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_fst_op LOC=UNKNOWN */
static void emit_sse_fst_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) 
{ 
  int live ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  x86_imm_buf imb ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___26 ;
  int tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___49 ;
  int tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___67 ;
  jit_value tmp___68 ;
  int tmp___69 ;
  jit_value tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;

  {
#line 1636
  if ((unsigned long long )op->arg_size == sizeof(float )) {
#line 1641
    tmp = jit_set_get(op->live_out, (int )op->arg[1]);
#line 1641
    live = tmp;
#line 1642
    if (live) {
#line 1642
      while (1) {
#line 1642
        while (1) {
#line 1642
          tmp___0 = jit->ip;
#line 1642
          (jit->ip) ++;
#line 1642
          *tmp___0 = (unsigned char)102;
#line 1642
          while (1) {
#line 1642
            if (a2 > 7L) {
#line 1642
              tmp___1 = 4;
            } else {
#line 1642
              tmp___1 = 0;
            }
#line 1642
            if (a2 > 7L) {
#line 1642
              tmp___2 = 1;
            } else {
#line 1642
              tmp___2 = 0;
            }
#line 1642
            _amd64_rex_bits = (unsigned char )(tmp___1 | tmp___2);
#line 1642
            if ((int )_amd64_rex_bits != 0) {
#line 1642
              tmp___3 = jit->ip;
#line 1642
              (jit->ip) ++;
#line 1642
              *tmp___3 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
            }
#line 1642
            break;
          }
#line 1642
          tmp___4 = jit->ip;
#line 1642
          (jit->ip) ++;
#line 1642
          *tmp___4 = (unsigned char)15;
#line 1642
          tmp___5 = jit->ip;
#line 1642
          (jit->ip) ++;
#line 1642
          *tmp___5 = (unsigned char)198;
#line 1642
          while (1) {
#line 1642
            while (1) {
#line 1642
              tmp___6 = jit->ip;
#line 1642
              (jit->ip) ++;
#line 1642
              *tmp___6 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
#line 1642
              break;
            }
#line 1642
            break;
          }
#line 1642
          break;
        }
#line 1642
        while (1) {
#line 1642
          *(jit->ip) = (unsigned char)0;
#line 1642
          (jit->ip) ++;
#line 1642
          break;
        }
#line 1642
        break;
      }
    }
#line 1643
    while (1) {
#line 1643
      tmp___7 = jit->ip;
#line 1643
      (jit->ip) ++;
#line 1643
      *tmp___7 = (unsigned char)242;
#line 1643
      while (1) {
#line 1643
        if (a2 > 7L) {
#line 1643
          tmp___8 = 4;
        } else {
#line 1643
          tmp___8 = 0;
        }
#line 1643
        if (a2 > 7L) {
#line 1643
          tmp___9 = 1;
        } else {
#line 1643
          tmp___9 = 0;
        }
#line 1643
        _amd64_rex_bits___0 = (unsigned char )(tmp___8 | tmp___9);
#line 1643
        if ((int )_amd64_rex_bits___0 != 0) {
#line 1643
          tmp___10 = jit->ip;
#line 1643
          (jit->ip) ++;
#line 1643
          *tmp___10 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
        }
#line 1643
        break;
      }
#line 1643
      tmp___11 = jit->ip;
#line 1643
      (jit->ip) ++;
#line 1643
      *tmp___11 = (unsigned char)15;
#line 1643
      tmp___12 = jit->ip;
#line 1643
      (jit->ip) ++;
#line 1643
      *tmp___12 = (unsigned char)90;
#line 1643
      while (1) {
#line 1643
        while (1) {
#line 1643
          tmp___13 = jit->ip;
#line 1643
          (jit->ip) ++;
#line 1643
          *tmp___13 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
#line 1643
          break;
        }
#line 1643
        break;
      }
#line 1643
      break;
    }
#line 1645
    if ((int )op->code & 0x02) {
#line 1645
      while (1) {
#line 1645
        tmp___14 = jit->ip;
#line 1645
        (jit->ip) ++;
#line 1645
        *tmp___14 = (unsigned char)243;
#line 1645
        while (1) {
#line 1645
          if (a2 > 7L) {
#line 1645
            tmp___15 = 4;
          } else {
#line 1645
            tmp___15 = 0;
          }
#line 1645
          _amd64_rex_bits___1 = (unsigned char )tmp___15;
#line 1645
          if ((int )_amd64_rex_bits___1 != 0) {
#line 1645
            tmp___16 = jit->ip;
#line 1645
            (jit->ip) ++;
#line 1645
            *tmp___16 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
          }
#line 1645
          break;
        }
#line 1645
        tmp___17 = jit->ip;
#line 1645
        (jit->ip) ++;
#line 1645
        *tmp___17 = (unsigned char)15;
#line 1645
        tmp___18 = jit->ip;
#line 1645
        (jit->ip) ++;
#line 1645
        *tmp___18 = (unsigned char)17;
#line 1645
        while (1) {
#line 1645
          tmp___19 = jit->ip;
#line 1645
          (jit->ip) ++;
#line 1645
          *tmp___19 = (unsigned char )(((a2 & 7L) << 3) | 4L);
#line 1645
          break;
        }
#line 1645
        while (1) {
#line 1645
          tmp___20 = jit->ip;
#line 1645
          (jit->ip) ++;
#line 1645
          *tmp___20 = (unsigned char )((4 << 3) | 5);
#line 1645
          break;
        }
#line 1645
        while (1) {
#line 1645
          imb.val = (int )a1;
#line 1645
          tmp___21 = jit->ip;
#line 1645
          (jit->ip) ++;
#line 1645
          *tmp___21 = imb.b[0];
#line 1645
          tmp___22 = jit->ip;
#line 1645
          (jit->ip) ++;
#line 1645
          *tmp___22 = imb.b[1];
#line 1645
          tmp___23 = jit->ip;
#line 1645
          (jit->ip) ++;
#line 1645
          *tmp___23 = imb.b[2];
#line 1645
          tmp___24 = jit->ip;
#line 1645
          (jit->ip) ++;
#line 1645
          *tmp___24 = imb.b[3];
#line 1645
          break;
        }
#line 1645
        break;
      }
    } else {
#line 1646
      while (1) {
#line 1646
        tmp___25 = jit->ip;
#line 1646
        (jit->ip) ++;
#line 1646
        *tmp___25 = (unsigned char)243;
#line 1646
        while (1) {
#line 1646
          if (a2 > 7L) {
#line 1646
            tmp___26 = 4;
          } else {
#line 1646
            tmp___26 = 0;
          }
#line 1646
          if (a1 > 7L) {
#line 1646
            tmp___27 = 1;
          } else {
#line 1646
            tmp___27 = 0;
          }
#line 1646
          _amd64_rex_bits___2 = (unsigned char )(tmp___26 | tmp___27);
#line 1646
          if ((int )_amd64_rex_bits___2 != 0) {
#line 1646
            tmp___28 = jit->ip;
#line 1646
            (jit->ip) ++;
#line 1646
            *tmp___28 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
          }
#line 1646
          break;
        }
#line 1646
        tmp___29 = jit->ip;
#line 1646
        (jit->ip) ++;
#line 1646
        *tmp___29 = (unsigned char)15;
#line 1646
        tmp___30 = jit->ip;
#line 1646
        (jit->ip) ++;
#line 1646
        *tmp___30 = (unsigned char)17;
#line 1646
        while (1) {
#line 1646
          if ((a1 & 7L) == 4L) {
#line 1646
            while (1) {
#line 1646
              tmp___31 = jit->ip;
#line 1646
              (jit->ip) ++;
#line 1646
              *tmp___31 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 4L);
#line 1646
              break;
            }
#line 1646
            while (1) {
#line 1646
              tmp___32 = jit->ip;
#line 1646
              (jit->ip) ++;
#line 1646
              *tmp___32 = (unsigned char )((4 << 3) | 4);
#line 1646
              break;
            }
#line 1646
            break;
          }
#line 1646
          if ((a1 & 7L) != 5L) {
#line 1646
            while (1) {
#line 1646
              tmp___41 = jit->ip;
#line 1646
              (jit->ip) ++;
#line 1646
              *tmp___41 = (unsigned char )((((a2 & 7L) & 7L) << 3) | ((a1 & 7L) & 7L));
#line 1646
              break;
            }
#line 1646
            break;
          }
#line 1646
          while (1) {
#line 1646
            tmp___42 = jit->ip;
#line 1646
            (jit->ip) ++;
#line 1646
            *tmp___42 = (unsigned char )(((long )(1 << 6) | (((a2 & 7L) & 7L) << 3)) | ((a1 & 7L) & 7L));
#line 1646
            break;
          }
#line 1646
          while (1) {
#line 1646
            *(jit->ip) = (unsigned char)0;
#line 1646
            (jit->ip) ++;
#line 1646
            break;
          }
#line 1646
          break;
        }
#line 1646
        break;
      }
    }
#line 1648
    if (live) {
#line 1648
      while (1) {
#line 1648
        while (1) {
#line 1648
          tmp___48 = jit->ip;
#line 1648
          (jit->ip) ++;
#line 1648
          *tmp___48 = (unsigned char)102;
#line 1648
          while (1) {
#line 1648
            if (a2 > 7L) {
#line 1648
              tmp___49 = 4;
            } else {
#line 1648
              tmp___49 = 0;
            }
#line 1648
            if (a2 > 7L) {
#line 1648
              tmp___50 = 1;
            } else {
#line 1648
              tmp___50 = 0;
            }
#line 1648
            _amd64_rex_bits___3 = (unsigned char )(tmp___49 | tmp___50);
#line 1648
            if ((int )_amd64_rex_bits___3 != 0) {
#line 1648
              tmp___51 = jit->ip;
#line 1648
              (jit->ip) ++;
#line 1648
              *tmp___51 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
            }
#line 1648
            break;
          }
#line 1648
          tmp___52 = jit->ip;
#line 1648
          (jit->ip) ++;
#line 1648
          *tmp___52 = (unsigned char)15;
#line 1648
          tmp___53 = jit->ip;
#line 1648
          (jit->ip) ++;
#line 1648
          *tmp___53 = (unsigned char)198;
#line 1648
          while (1) {
#line 1648
            while (1) {
#line 1648
              tmp___54 = jit->ip;
#line 1648
              (jit->ip) ++;
#line 1648
              *tmp___54 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
#line 1648
              break;
            }
#line 1648
            break;
          }
#line 1648
          break;
        }
#line 1648
        while (1) {
#line 1648
          *(jit->ip) = (unsigned char)1;
#line 1648
          (jit->ip) ++;
#line 1648
          break;
        }
#line 1648
        break;
      }
    }
  } else
#line 1651
  if ((int )op->code & 0x02) {
#line 1651
    while (1) {
#line 1651
      tmp___55 = jit->ip;
#line 1651
      (jit->ip) ++;
#line 1651
      *tmp___55 = (unsigned char)102;
#line 1651
      while (1) {
#line 1651
        if (a2 > 7L) {
#line 1651
          tmp___56 = 4;
        } else {
#line 1651
          tmp___56 = 0;
        }
#line 1651
        _amd64_rex_bits___4 = (unsigned char )tmp___56;
#line 1651
        if ((int )_amd64_rex_bits___4 != 0) {
#line 1651
          tmp___57 = jit->ip;
#line 1651
          (jit->ip) ++;
#line 1651
          *tmp___57 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
        }
#line 1651
        break;
      }
#line 1651
      tmp___58 = jit->ip;
#line 1651
      (jit->ip) ++;
#line 1651
      *tmp___58 = (unsigned char)15;
#line 1651
      tmp___59 = jit->ip;
#line 1651
      (jit->ip) ++;
#line 1651
      *tmp___59 = (unsigned char)19;
#line 1651
      while (1) {
#line 1651
        tmp___60 = jit->ip;
#line 1651
        (jit->ip) ++;
#line 1651
        *tmp___60 = (unsigned char )(((a2 & 7L) << 3) | 4L);
#line 1651
        break;
      }
#line 1651
      while (1) {
#line 1651
        tmp___61 = jit->ip;
#line 1651
        (jit->ip) ++;
#line 1651
        *tmp___61 = (unsigned char )((4 << 3) | 5);
#line 1651
        break;
      }
#line 1651
      while (1) {
#line 1651
        imb___2.val = (int )a1;
#line 1651
        tmp___62 = jit->ip;
#line 1651
        (jit->ip) ++;
#line 1651
        *tmp___62 = imb___2.b[0];
#line 1651
        tmp___63 = jit->ip;
#line 1651
        (jit->ip) ++;
#line 1651
        *tmp___63 = imb___2.b[1];
#line 1651
        tmp___64 = jit->ip;
#line 1651
        (jit->ip) ++;
#line 1651
        *tmp___64 = imb___2.b[2];
#line 1651
        tmp___65 = jit->ip;
#line 1651
        (jit->ip) ++;
#line 1651
        *tmp___65 = imb___2.b[3];
#line 1651
        break;
      }
#line 1651
      break;
    }
  } else {
#line 1652
    while (1) {
#line 1652
      tmp___66 = jit->ip;
#line 1652
      (jit->ip) ++;
#line 1652
      *tmp___66 = (unsigned char)102;
#line 1652
      while (1) {
#line 1652
        if (a2 > 7L) {
#line 1652
          tmp___67 = 4;
        } else {
#line 1652
          tmp___67 = 0;
        }
#line 1652
        if (a1 == 16L) {
#line 1652
          tmp___70 = (jit_value )0;
        } else {
#line 1652
          tmp___70 = a1;
        }
#line 1652
        if (tmp___70 > 7L) {
#line 1652
          tmp___69 = 1;
        } else {
#line 1652
          tmp___69 = 0;
        }
#line 1652
        _amd64_rex_bits___5 = (unsigned char )(tmp___67 | tmp___69);
#line 1652
        if ((int )_amd64_rex_bits___5 != 0) {
#line 1652
          tmp___71 = jit->ip;
#line 1652
          (jit->ip) ++;
#line 1652
          *tmp___71 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
        }
#line 1652
        break;
      }
#line 1652
      tmp___72 = jit->ip;
#line 1652
      (jit->ip) ++;
#line 1652
      *tmp___72 = (unsigned char)15;
#line 1652
      tmp___73 = jit->ip;
#line 1652
      (jit->ip) ++;
#line 1652
      *tmp___73 = (unsigned char)19;
#line 1652
      while (1) {
#line 1652
        if (a1 == 16L) {
#line 1652
          while (1) {
#line 1652
            tmp___74 = jit->ip;
#line 1652
            (jit->ip) ++;
#line 1652
            *tmp___74 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 5L);
#line 1652
            break;
          }
#line 1652
          while (1) {
#line 1652
            imb___3.val = 0;
#line 1652
            tmp___75 = jit->ip;
#line 1652
            (jit->ip) ++;
#line 1652
            *tmp___75 = imb___3.b[0];
#line 1652
            tmp___76 = jit->ip;
#line 1652
            (jit->ip) ++;
#line 1652
            *tmp___76 = imb___3.b[1];
#line 1652
            tmp___77 = jit->ip;
#line 1652
            (jit->ip) ++;
#line 1652
            *tmp___77 = imb___3.b[2];
#line 1652
            tmp___78 = jit->ip;
#line 1652
            (jit->ip) ++;
#line 1652
            *tmp___78 = imb___3.b[3];
#line 1652
            break;
          }
        } else {
#line 1652
          while (1) {
#line 1652
            if ((a1 & 7L) == 4L) {
#line 1652
              while (1) {
#line 1652
                tmp___79 = jit->ip;
#line 1652
                (jit->ip) ++;
#line 1652
                *tmp___79 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 4L);
#line 1652
                break;
              }
#line 1652
              while (1) {
#line 1652
                tmp___80 = jit->ip;
#line 1652
                (jit->ip) ++;
#line 1652
                *tmp___80 = (unsigned char )((4 << 3) | 4);
#line 1652
                break;
              }
#line 1652
              break;
            }
#line 1652
            if ((a1 & 7L) != 5L) {
#line 1652
              while (1) {
#line 1652
                tmp___89 = jit->ip;
#line 1652
                (jit->ip) ++;
#line 1652
                *tmp___89 = (unsigned char )((((a2 & 7L) & 7L) << 3) | ((a1 & 7L) & 7L));
#line 1652
                break;
              }
#line 1652
              break;
            }
#line 1652
            while (1) {
#line 1652
              tmp___90 = jit->ip;
#line 1652
              (jit->ip) ++;
#line 1652
              *tmp___90 = (unsigned char )(((long )(1 << 6) | (((a2 & 7L) & 7L) << 3)) | ((a1 & 7L) & 7L));
#line 1652
              break;
            }
#line 1652
            while (1) {
#line 1652
              *(jit->ip) = (unsigned char)0;
#line 1652
              (jit->ip) ++;
#line 1652
              break;
            }
#line 1652
            break;
          }
        }
#line 1652
        break;
      }
#line 1652
      break;
    }
  }
#line 1654
  return;
}
}
/* END FUNCTION-DEF emit_sse_fst_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_fretval_op LOC=UNKNOWN */
static void emit_fretval_op(struct jit *jit , jit_op *op ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;

  {
#line 2650
  if ((unsigned long long )op->arg_size == sizeof(float )) {
#line 2650
    while (1) {
#line 2650
      tmp = jit->ip;
#line 2650
      (jit->ip) ++;
#line 2650
      *tmp = (unsigned char)243;
#line 2650
      while (1) {
#line 2650
        _amd64_rex_bits = (unsigned char)0;
#line 2650
        if ((int )_amd64_rex_bits != 0) {
#line 2650
          tmp___0 = jit->ip;
#line 2650
          (jit->ip) ++;
#line 2650
          *tmp___0 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
        }
#line 2650
        break;
      }
#line 2650
      tmp___1 = jit->ip;
#line 2650
      (jit->ip) ++;
#line 2650
      *tmp___1 = (unsigned char)15;
#line 2650
      tmp___2 = jit->ip;
#line 2650
      (jit->ip) ++;
#line 2650
      *tmp___2 = (unsigned char)90;
#line 2650
      while (1) {
#line 2650
        while (1) {
#line 2650
          tmp___3 = jit->ip;
#line 2650
          (jit->ip) ++;
#line 2650
          *tmp___3 = (unsigned char )(3 << 6);
#line 2650
          break;
        }
#line 2650
        break;
      }
#line 2650
      break;
    }
  }
#line 2655
  return;
}
}
/* END FUNCTION-DEF emit_fretval_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_op_first LOC=UNKNOWN */
__inline static jit_op *jit_op_first(jit_op *op ) 
{ 


  {
#line 861
  while ((unsigned long )op->prev != (unsigned long )((void *)0)) {
#line 861
    op = op->prev;
  }
#line 862
  return (op);
}
}
/* END FUNCTION-DEF jit_op_first LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF make_free_reg LOC=UNKNOWN */
static jit_hw_reg *make_free_reg(struct jit_reg_allocator *al , jit_op *op , jit_value for_reg ) 
{ 
  int spill ;
  jit_value spill_candidate ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp ;
  int tmp___0 ;

  {
#line 5233
  spill = 0;
#line 5234
  spill_candidate = (jit_value )-1;
#line 5235
  tmp = rmap_spill_candidate(al, op, for_reg, & spill, & spill_candidate, 0);
#line 5235
  hreg = tmp;
#line 5237
  if (spill) {
#line 5238
    tmp___0 = jit_set_get(op->live_in, (int )spill_candidate);
#line 5238
    if (tmp___0) {
#line 5239
      unload_reg(op, hreg, spill_candidate);
    }
#line 5240
    rmap_unassoc(op->regmap, spill_candidate);
  }
#line 5242
  return (hreg);
}
}
/* END FUNCTION-DEF make_free_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF list_callee_saved_regs LOC=UNKNOWN */
static int list_callee_saved_regs(struct jit *jit , jit_op *func_start , jit_hw_reg **active_regs ,
                                  int *count ) 
{ 
  int i ;
  jit_hw_reg *r ;
  struct jit_op *o ;
  int tmp ;
  int stack_space ;
  jit_value tmp___0 ;

  {
#line 2762
  *count = 0;
#line 2763
  i = (jit->reg_al)->gp_reg_cnt - 1;
#line 2763
  while (i >= 0) {
#line 2764
    r = (jit->reg_al)->gp_regs + i;
#line 2765
    if (! r->callee_saved) {
#line 2765
      goto __Cont;
    }
#line 2766
    o = func_start->next;
#line 2766
    while ((unsigned long )o != (unsigned long )((void *)0)) {
#line 2767
      if ((unsigned int )((jit_opcode )((int )o->code & 0xfff8)) == 128U) {
#line 2767
        break;
      }
#line 2768
      tmp = uses_hw_reg(o, (jit_value )r->id, 0);
#line 2768
      if (tmp) {
#line 2769
        *(active_regs + *count) = r;
#line 2770
        (*count) ++;
#line 2771
        break;
      }
#line 2766
      o = o->next;
    }
    __Cont: /* CIL Label */ 
#line 2763
    i --;
  }
#line 2776
  tmp___0 = jit_value_align((jit_value )(*count * (int )sizeof(void *)), (jit_value )16);
#line 2776
  stack_space = (int )tmp___0;
#line 2777
  return (stack_space);
}
}
/* END FUNCTION-DEF list_callee_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF ob_append LOC=UNKNOWN */
static void ob_append(struct output_buf *ob , char *str ) 
{ 
  int len ;
  size_t tmp ;
  unsigned long long tmp___0 ;

  {
#line 4105
  tmp = strlen((char const   *)str);
#line 4105
  len = (int )tmp;
#line 4106
  ob_assert_space(ob, len);
#line 4107
  tmp___0 = __builtin_object_size((void *)ob->buf, 1);
#line 4107
  __builtin___strcat_chk(ob->buf, (char const   *)str, tmp___0);
#line 4108
  ob->size += (size_t )len;
#line 4109
  return;
}
}
/* END FUNCTION-DEF ob_append LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF ishexnumber LOC=UNKNOWN */
__inline int ishexnumber(int _c ) 
{ 
  int tmp ;

  {
#line 313 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  tmp = __istype(_c, 65536UL);
#line 313
  return (tmp);
}
}
/* END FUNCTION-DEF ishexnumber LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_add_prolog LOC=UNKNOWN */
jit_op *jit_add_prolog(struct jit *jit , void *func , struct jit_debug_info *debug_info ) 
{ 
  jit_op *op ;
  struct jit_op *tmp ;
  struct jit_func_info *info ;
  void *tmp___0 ;

  {
#line 5835 "./jitter-Darwin-X86-64.c"
  tmp = jit_add_op(jit, (unsigned short)128, (unsigned char)2, (jit_value )func, (jit_value )0,
                   (jit_value )0, (unsigned char)0, (struct jit_debug_info *)((void *)0));
#line 5835
  op = tmp;
#line 5836
  tmp___0 = malloc((size_t )sizeof(struct jit_func_info ));
#line 5836
  info = (struct jit_func_info *)tmp___0;
#line 5837
  op->arg[1] = (jit_value )info;
#line 5838
  op->debug_info = debug_info;
#line 5840
  jit->current_func = op;
#line 5842
  info->first_op = op;
#line 5843
  info->allocai_mem = 0L;
#line 5844
  info->general_arg_cnt = 0;
#line 5845
  info->float_arg_cnt = 0;
#line 5846
  return (op);
}
}
/* END FUNCTION-DEF jit_add_prolog LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF platform_id LOC=UNKNOWN */
static char *platform_id(void) 
{ 


  {
#line 4758
  return ("amd64");
}
}
/* END FUNCTION-DEF platform_id LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_msg_op LOC=UNKNOWN */
static void emit_msg_op(struct jit *jit , jit_op *op ) 
{ 
  int fmt_reg ;
  int val_reg ;
  int fun_reg ;
  unsigned char _amd64_rex_bits ;
  int tmp ;
  int tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  long tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  amd64_imm_buf imb ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  int _amd64_width_temp ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  unsigned char *tmp___29 ;
  int tmp___30 ;
  unsigned char *tmp___31 ;
  amd64_imm_buf imb___1 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  int tmp___44 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;

  {
#line 2568
  emit_save_all_regs(jit, op);
#line 2571
  fmt_reg = 7;
#line 2572
  val_reg = 6;
#line 2573
  fun_reg = 2;
#line 2581
  if (! ((int )op->code & 0x02)) {
#line 2581
    while (1) {
#line 2581
      while (1) {
#line 2581
        if (val_reg > 7) {
#line 2581
          tmp = 4;
        } else {
#line 2581
          tmp = 0;
        }
#line 2581
        if (op->r_arg[1] > 7L) {
#line 2581
          tmp___0 = 1;
        } else {
#line 2581
          tmp___0 = 0;
        }
#line 2581
        _amd64_rex_bits = (unsigned char )((8 | tmp) | tmp___0);
#line 2581
        if ((int )_amd64_rex_bits != 0) {
#line 2581
          tmp___1 = jit->ip;
#line 2581
          (jit->ip) ++;
#line 2581
          *tmp___1 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
        }
#line 2581
        break;
      }
#line 2581
      while (1) {
#line 2581
        switch (4) {
        case 1: 
#line 2581
        tmp___2 = jit->ip;
#line 2581
        (jit->ip) ++;
#line 2581
        *tmp___2 = (unsigned char)138;
#line 2581
        break;
        case 2: 
#line 2581
        tmp___3 = jit->ip;
#line 2581
        (jit->ip) ++;
#line 2581
        *tmp___3 = (unsigned char)102;
        case 4: 
#line 2581
        tmp___4 = jit->ip;
#line 2581
        (jit->ip) ++;
#line 2581
        *tmp___4 = (unsigned char)139;
#line 2581
        break;
        default: 
#line 2581
        tmp___5 = __builtin_expect(1L, 0L);
#line 2581
        if (tmp___5) {
#line 2581
          __assert_rtn((char const   *)"emit_msg_op", (char const   *)"./jitter-Darwin-X86-64.c",
                       2581, (char const   *)"0");
        }
        }
#line 2581
        while (1) {
#line 2581
          while (1) {
#line 2581
            tmp___6 = jit->ip;
#line 2581
            (jit->ip) ++;
#line 2581
            *tmp___6 = (unsigned char )((long )((3 << 6) | (((val_reg & 0x7) & 0x07) << 3)) | ((op->r_arg[1] & 7L) & 7L));
#line 2581
            break;
          }
#line 2581
          break;
        }
#line 2581
        break;
      }
#line 2581
      break;
    }
  }
#line 2582
  while (1) {
#line 2582
    while (1) {
#line 2582
      if (fmt_reg > 7) {
#line 2582
        tmp___7 = 1;
      } else {
#line 2582
        tmp___7 = 0;
      }
#line 2582
      _amd64_rex_bits___0 = (unsigned char )(8 | tmp___7);
#line 2582
      if ((int )_amd64_rex_bits___0 != 0) {
#line 2582
        tmp___8 = jit->ip;
#line 2582
        (jit->ip) ++;
#line 2582
        *tmp___8 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
      }
#line 2582
      break;
    }
#line 2582
    tmp___9 = jit->ip;
#line 2582
    (jit->ip) ++;
#line 2582
    *tmp___9 = (unsigned char )(184 + (fmt_reg & 0x7));
#line 2582
    while (1) {
#line 2582
      imb.val = (size_t )op->r_arg[0];
#line 2582
      tmp___10 = jit->ip;
#line 2582
      (jit->ip) ++;
#line 2582
      *tmp___10 = imb.b[0];
#line 2582
      tmp___11 = jit->ip;
#line 2582
      (jit->ip) ++;
#line 2582
      *tmp___11 = imb.b[1];
#line 2582
      tmp___12 = jit->ip;
#line 2582
      (jit->ip) ++;
#line 2582
      *tmp___12 = imb.b[2];
#line 2582
      tmp___13 = jit->ip;
#line 2582
      (jit->ip) ++;
#line 2582
      *tmp___13 = imb.b[3];
#line 2582
      tmp___14 = jit->ip;
#line 2582
      (jit->ip) ++;
#line 2582
      *tmp___14 = imb.b[4];
#line 2582
      tmp___15 = jit->ip;
#line 2582
      (jit->ip) ++;
#line 2582
      *tmp___15 = imb.b[5];
#line 2582
      tmp___16 = jit->ip;
#line 2582
      (jit->ip) ++;
#line 2582
      *tmp___16 = imb.b[6];
#line 2582
      tmp___17 = jit->ip;
#line 2582
      (jit->ip) ++;
#line 2582
      *tmp___17 = imb.b[7];
#line 2582
      break;
    }
#line 2582
    break;
  }
#line 2583
  while (1) {
#line 2583
    while (1) {
#line 2583
      _amd64_rex_bits___1 = (unsigned char)8;
#line 2583
      if ((int )_amd64_rex_bits___1 != 0) {
#line 2583
        tmp___22 = jit->ip;
#line 2583
        (jit->ip) ++;
#line 2583
        *tmp___22 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
      }
#line 2583
      break;
    }
#line 2583
    tmp___23 = jit->ip;
#line 2583
    (jit->ip) ++;
#line 2583
    *tmp___23 = (unsigned char )((6 << 3) + 3);
#line 2583
    while (1) {
#line 2583
      while (1) {
#line 2583
        tmp___24 = jit->ip;
#line 2583
        (jit->ip) ++;
#line 2583
        *tmp___24 = (unsigned char )(3 << 6);
#line 2583
        break;
      }
#line 2583
      break;
    }
#line 2583
    break;
  }
#line 2584
  while (1) {
#line 2584
    _amd64_width_temp = (size_t )(& printf) == (size_t )((int )((size_t )(& printf)));
#line 2584
    while (1) {
#line 2584
      while (1) {
#line 2584
        if (_amd64_width_temp) {
#line 2584
          tmp___27 = 4;
        } else {
#line 2584
          tmp___27 = 8;
        }
#line 2584
        if (tmp___27 > 4) {
#line 2584
          tmp___26 = 8;
        } else {
#line 2584
          tmp___26 = 0;
        }
#line 2584
        if (fun_reg > 7) {
#line 2584
          tmp___28 = 1;
        } else {
#line 2584
          tmp___28 = 0;
        }
#line 2584
        _amd64_rex_bits___2 = (unsigned char )(tmp___26 | tmp___28);
#line 2584
        if ((int )_amd64_rex_bits___2 != 0) {
#line 2584
          tmp___29 = jit->ip;
#line 2584
          (jit->ip) ++;
#line 2584
          *tmp___29 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
        } else {
#line 2584
          if (_amd64_width_temp) {
#line 2584
            tmp___30 = 4;
          } else {
#line 2584
            tmp___30 = 8;
          }
#line 2584
          if (tmp___30 == 1) {
#line 2584
            tmp___29 = jit->ip;
#line 2584
            (jit->ip) ++;
#line 2584
            *tmp___29 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
          }
        }
#line 2584
        break;
      }
#line 2584
      tmp___31 = jit->ip;
#line 2584
      (jit->ip) ++;
#line 2584
      *tmp___31 = (unsigned char )(184 + (fun_reg & 0x7));
#line 2584
      if (_amd64_width_temp) {
#line 2584
        tmp___44 = 4;
      } else {
#line 2584
        tmp___44 = 8;
      }
#line 2584
      if (tmp___44 == 8) {
#line 2584
        while (1) {
#line 2584
          imb___1.val = (size_t )(& printf);
#line 2584
          tmp___32 = jit->ip;
#line 2584
          (jit->ip) ++;
#line 2584
          *tmp___32 = imb___1.b[0];
#line 2584
          tmp___33 = jit->ip;
#line 2584
          (jit->ip) ++;
#line 2584
          *tmp___33 = imb___1.b[1];
#line 2584
          tmp___34 = jit->ip;
#line 2584
          (jit->ip) ++;
#line 2584
          *tmp___34 = imb___1.b[2];
#line 2584
          tmp___35 = jit->ip;
#line 2584
          (jit->ip) ++;
#line 2584
          *tmp___35 = imb___1.b[3];
#line 2584
          tmp___36 = jit->ip;
#line 2584
          (jit->ip) ++;
#line 2584
          *tmp___36 = imb___1.b[4];
#line 2584
          tmp___37 = jit->ip;
#line 2584
          (jit->ip) ++;
#line 2584
          *tmp___37 = imb___1.b[5];
#line 2584
          tmp___38 = jit->ip;
#line 2584
          (jit->ip) ++;
#line 2584
          *tmp___38 = imb___1.b[6];
#line 2584
          tmp___39 = jit->ip;
#line 2584
          (jit->ip) ++;
#line 2584
          *tmp___39 = imb___1.b[7];
#line 2584
          break;
        }
      } else {
#line 2584
        while (1) {
#line 2584
          imb___2.val = (int )((size_t )(& printf));
#line 2584
          tmp___40 = jit->ip;
#line 2584
          (jit->ip) ++;
#line 2584
          *tmp___40 = imb___2.b[0];
#line 2584
          tmp___41 = jit->ip;
#line 2584
          (jit->ip) ++;
#line 2584
          *tmp___41 = imb___2.b[1];
#line 2584
          tmp___42 = jit->ip;
#line 2584
          (jit->ip) ++;
#line 2584
          *tmp___42 = imb___2.b[2];
#line 2584
          tmp___43 = jit->ip;
#line 2584
          (jit->ip) ++;
#line 2584
          *tmp___43 = imb___2.b[3];
#line 2584
          break;
        }
      }
#line 2584
      break;
    }
#line 2584
    break;
  }
#line 2585
  while (1) {
#line 2585
    while (1) {
#line 2585
      if (fun_reg > 7) {
#line 2585
        tmp___45 = 1;
      } else {
#line 2585
        tmp___45 = 0;
      }
#line 2585
      _amd64_rex_bits___3 = (unsigned char )tmp___45;
#line 2585
      if ((int )_amd64_rex_bits___3 != 0) {
#line 2585
        tmp___46 = jit->ip;
#line 2585
        (jit->ip) ++;
#line 2585
        *tmp___46 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
      }
#line 2585
      break;
    }
#line 2585
    tmp___47 = jit->ip;
#line 2585
    (jit->ip) ++;
#line 2585
    *tmp___47 = (unsigned char)255;
#line 2585
    while (1) {
#line 2585
      while (1) {
#line 2585
        tmp___48 = jit->ip;
#line 2585
        (jit->ip) ++;
#line 2585
        *tmp___48 = (unsigned char )(((3 << 6) | (2 << 3)) | ((fun_reg & 0x7) & 0x07));
#line 2585
        break;
      }
#line 2585
      break;
    }
#line 2585
    break;
  }
#line 2590
  emit_restore_all_regs(jit, op);
#line 2591
  return;
}
}
/* END FUNCTION-DEF emit_msg_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isascii LOC=UNKNOWN */
__inline int isascii(int _c ) 
{ 


  {
#line 137 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  return ((_c & -128) == 0);
}
}
/* END FUNCTION-DEF isascii LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF free_ops LOC=UNKNOWN */
static void free_ops(struct jit_op *op ) 
{ 


  {
#line 6243
  if ((unsigned long )op == (unsigned long )((void *)0)) {
#line 6243 "./jitter-Darwin-X86-64.c"
    return;
  }
#line 6244
  free_ops(op->next);
#line 6245
  if (op->addendum) {
#line 6245
    free(op->addendum);
  }
#line 6246
  jit_free_op(op);
#line 6248
  return;
}
}
/* END FUNCTION-DEF free_ops LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_funcall LOC=UNKNOWN */
static void emit_funcall(struct jit *jit , struct jit_op *op , int imm ) 
{ 
  int stack_correction ;
  int tmp ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  x86_imm_buf imb ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  int tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  x86_imm_buf imb___0 ;
  int tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  unsigned char *tmp___28 ;
  int tmp___29 ;
  unsigned char *tmp___30 ;
  int tmp___31 ;
  unsigned char *tmp___32 ;
  x86_imm_buf imb___1 ;
  int tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  unsigned char *tmp___40 ;
  x86_imm_buf imb___2 ;
  int tmp___41 ;
  size_t tmp___42 ;
  int tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  amd64_imm_buf imb___3 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  int tmp___65 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  int tmp___82 ;

  {
#line 2504
  tmp = emit_arguments(jit);
#line 2504
  stack_correction = tmp;
#line 2506
  if (! imm) {
#line 2507
    tmp___0 = rmap_get(op->regmap, op->arg[0]);
#line 2507
    hreg = tmp___0;
#line 2508
    if (hreg) {
#line 2508
      while (1) {
#line 2508
        while (1) {
#line 2508
          if (hreg->id > 7) {
#line 2508
            tmp___1 = 1;
          } else {
#line 2508
            tmp___1 = 0;
          }
#line 2508
          _amd64_rex_bits = (unsigned char )tmp___1;
#line 2508
          if ((int )_amd64_rex_bits != 0) {
#line 2508
            tmp___2 = jit->ip;
#line 2508
            (jit->ip) ++;
#line 2508
            *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          }
#line 2508
          break;
        }
#line 2508
        tmp___3 = jit->ip;
#line 2508
        (jit->ip) ++;
#line 2508
        *tmp___3 = (unsigned char)255;
#line 2508
        while (1) {
#line 2508
          while (1) {
#line 2508
            tmp___4 = jit->ip;
#line 2508
            (jit->ip) ++;
#line 2508
            *tmp___4 = (unsigned char )(((3 << 6) | (2 << 3)) | ((hreg->id & 0x7) & 0x07));
#line 2508
            break;
          }
#line 2508
          break;
        }
#line 2508
        break;
      }
    } else {
#line 2509
      while (1) {
#line 2509
        while (1) {
#line 2509
          _amd64_rex_bits___0 = (unsigned char)0;
#line 2509
          if ((int )_amd64_rex_bits___0 != 0) {
#line 2509
            tmp___5 = jit->ip;
#line 2509
            (jit->ip) ++;
#line 2509
            *tmp___5 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
          }
#line 2509
          break;
        }
#line 2509
        tmp___6 = jit->ip;
#line 2509
        (jit->ip) ++;
#line 2509
        *tmp___6 = (unsigned char)255;
#line 2509
        while (1) {
#line 2509
          while (1) {
#line 2509
            if (0) {
#line 2509
              tmp___27 = stack_reg_pos(jit, (int )op->arg[0]);
#line 2509
              if (tmp___27 == 0) {
#line 2509
                while (1) {
#line 2509
                  tmp___13 = jit->ip;
#line 2509
                  (jit->ip) ++;
#line 2509
                  *tmp___13 = (unsigned char )((2 << 3) | 4);
#line 2509
                  break;
                }
#line 2509
                while (1) {
#line 2509
                  tmp___14 = jit->ip;
#line 2509
                  (jit->ip) ++;
#line 2509
                  *tmp___14 = (unsigned char )((4 << 3) | 4);
#line 2509
                  break;
                }
              } else {
#line 2509
                tmp___25 = stack_reg_pos(jit, (int )op->arg[0]);
#line 2509
                if ((jit_value )tmp___25 >= -128L) {
#line 2509
                  tmp___26 = stack_reg_pos(jit, (int )op->arg[0]);
#line 2509
                  if ((jit_value )tmp___26 <= 127L) {
#line 2509
                    while (1) {
#line 2509
                      tmp___15 = jit->ip;
#line 2509
                      (jit->ip) ++;
#line 2509
                      *tmp___15 = (unsigned char )(((1 << 6) | (2 << 3)) | 4);
#line 2509
                      break;
                    }
#line 2509
                    while (1) {
#line 2509
                      tmp___16 = jit->ip;
#line 2509
                      (jit->ip) ++;
#line 2509
                      *tmp___16 = (unsigned char )((4 << 3) | 4);
#line 2509
                      break;
                    }
#line 2509
                    while (1) {
#line 2509
                      tmp___17 = stack_reg_pos(jit, (int )op->arg[0]);
#line 2509
                      *(jit->ip) = (unsigned char )(tmp___17 & 0xff);
#line 2509
                      (jit->ip) ++;
#line 2509
                      break;
                    }
                  } else {
#line 2509
                    goto _L;
                  }
                } else {
                  _L: /* CIL Label */ 
#line 2509
                  while (1) {
#line 2509
                    tmp___18 = jit->ip;
#line 2509
                    (jit->ip) ++;
#line 2509
                    *tmp___18 = (unsigned char )(((2 << 6) | (2 << 3)) | 4);
#line 2509
                    break;
                  }
#line 2509
                  while (1) {
#line 2509
                    tmp___19 = jit->ip;
#line 2509
                    (jit->ip) ++;
#line 2509
                    *tmp___19 = (unsigned char )((4 << 3) | 4);
#line 2509
                    break;
                  }
#line 2509
                  while (1) {
#line 2509
                    tmp___20 = stack_reg_pos(jit, (int )op->arg[0]);
#line 2509
                    imb___0.val = tmp___20;
#line 2509
                    tmp___21 = jit->ip;
#line 2509
                    (jit->ip) ++;
#line 2509
                    *tmp___21 = imb___0.b[0];
#line 2509
                    tmp___22 = jit->ip;
#line 2509
                    (jit->ip) ++;
#line 2509
                    *tmp___22 = imb___0.b[1];
#line 2509
                    tmp___23 = jit->ip;
#line 2509
                    (jit->ip) ++;
#line 2509
                    *tmp___23 = imb___0.b[2];
#line 2509
                    tmp___24 = jit->ip;
#line 2509
                    (jit->ip) ++;
#line 2509
                    *tmp___24 = imb___0.b[3];
#line 2509
                    break;
                  }
                }
              }
#line 2509
              break;
            }
#line 2509
            tmp___29 = stack_reg_pos(jit, (int )op->arg[0]);
#line 2509
            if (tmp___29 == 0) {

            }
#line 2509
            tmp___38 = stack_reg_pos(jit, (int )op->arg[0]);
#line 2509
            if ((jit_value )tmp___38 >= -128L) {
#line 2509
              tmp___39 = stack_reg_pos(jit, (int )op->arg[0]);
#line 2509
              if ((jit_value )tmp___39 <= 127L) {
#line 2509
                while (1) {
#line 2509
                  tmp___30 = jit->ip;
#line 2509
                  (jit->ip) ++;
#line 2509
                  *tmp___30 = (unsigned char )(((1 << 6) | (2 << 3)) | 5);
#line 2509
                  break;
                }
#line 2509
                while (1) {
#line 2509
                  tmp___31 = stack_reg_pos(jit, (int )op->arg[0]);
#line 2509
                  *(jit->ip) = (unsigned char )(tmp___31 & 0xff);
#line 2509
                  (jit->ip) ++;
#line 2509
                  break;
                }
              } else {
#line 2509
                goto _L___0;
              }
            } else {
              _L___0: /* CIL Label */ 
#line 2509
              while (1) {
#line 2509
                tmp___32 = jit->ip;
#line 2509
                (jit->ip) ++;
#line 2509
                *tmp___32 = (unsigned char )(((2 << 6) | (2 << 3)) | 5);
#line 2509
                break;
              }
#line 2509
              while (1) {
#line 2509
                tmp___33 = stack_reg_pos(jit, (int )op->arg[0]);
#line 2509
                imb___1.val = tmp___33;
#line 2509
                tmp___34 = jit->ip;
#line 2509
                (jit->ip) ++;
#line 2509
                *tmp___34 = imb___1.b[0];
#line 2509
                tmp___35 = jit->ip;
#line 2509
                (jit->ip) ++;
#line 2509
                *tmp___35 = imb___1.b[1];
#line 2509
                tmp___36 = jit->ip;
#line 2509
                (jit->ip) ++;
#line 2509
                *tmp___36 = imb___1.b[2];
#line 2509
                tmp___37 = jit->ip;
#line 2509
                (jit->ip) ++;
#line 2509
                *tmp___37 = imb___1.b[3];
#line 2509
                break;
              }
            }
#line 2509
            break;
          }
#line 2509
          break;
        }
#line 2509
        break;
      }
    }
  } else {
#line 2511
    tmp___65 = jit_is_label(jit, (void *)op->arg[0]);
#line 2511
    if (tmp___65) {
#line 2512
      op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
#line 2513
      while (1) {
#line 2513
        while (1) {
#line 2513
          tmp___40 = jit->ip;
#line 2513
          (jit->ip) ++;
#line 2513
          *tmp___40 = (unsigned char)232;
#line 2513
          while (1) {
#line 2513
            tmp___43 = jit_is_label(jit, (void *)op->arg[0]);
#line 2513
            if (tmp___43) {
#line 2513
              tmp___42 = ((size_t )((jit_value )jit->buf) + ((jit_label *)op->arg[0])->pos) - (size_t )((jit_value )jit->ip);
            } else {
#line 2513
              tmp___42 = (size_t )op->arg[0];
            }
#line 2513
            imb___2.val = (int )(tmp___42 - 4UL);
#line 2513
            tmp___44 = jit->ip;
#line 2513
            (jit->ip) ++;
#line 2513
            *tmp___44 = imb___2.b[0];
#line 2513
            tmp___45 = jit->ip;
#line 2513
            (jit->ip) ++;
#line 2513
            *tmp___45 = imb___2.b[1];
#line 2513
            tmp___46 = jit->ip;
#line 2513
            (jit->ip) ++;
#line 2513
            *tmp___46 = imb___2.b[2];
#line 2513
            tmp___47 = jit->ip;
#line 2513
            (jit->ip) ++;
#line 2513
            *tmp___47 = imb___2.b[3];
#line 2513
            break;
          }
#line 2513
          break;
        }
#line 2513
        break;
      }
    } else {
#line 2519
      while (1) {
#line 2519
        while (1) {
#line 2519
          _amd64_rex_bits___1 = (unsigned char)9;
#line 2519
          if ((int )_amd64_rex_bits___1 != 0) {
#line 2519
            tmp___48 = jit->ip;
#line 2519
            (jit->ip) ++;
#line 2519
            *tmp___48 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
          }
#line 2519
          break;
        }
#line 2519
        tmp___49 = jit->ip;
#line 2519
        (jit->ip) ++;
#line 2519
        *tmp___49 = (unsigned char)187;
#line 2519
        while (1) {
#line 2519
          imb___3.val = (size_t )op->arg[0];
#line 2519
          tmp___50 = jit->ip;
#line 2519
          (jit->ip) ++;
#line 2519
          *tmp___50 = imb___3.b[0];
#line 2519
          tmp___51 = jit->ip;
#line 2519
          (jit->ip) ++;
#line 2519
          *tmp___51 = imb___3.b[1];
#line 2519
          tmp___52 = jit->ip;
#line 2519
          (jit->ip) ++;
#line 2519
          *tmp___52 = imb___3.b[2];
#line 2519
          tmp___53 = jit->ip;
#line 2519
          (jit->ip) ++;
#line 2519
          *tmp___53 = imb___3.b[3];
#line 2519
          tmp___54 = jit->ip;
#line 2519
          (jit->ip) ++;
#line 2519
          *tmp___54 = imb___3.b[4];
#line 2519
          tmp___55 = jit->ip;
#line 2519
          (jit->ip) ++;
#line 2519
          *tmp___55 = imb___3.b[5];
#line 2519
          tmp___56 = jit->ip;
#line 2519
          (jit->ip) ++;
#line 2519
          *tmp___56 = imb___3.b[6];
#line 2519
          tmp___57 = jit->ip;
#line 2519
          (jit->ip) ++;
#line 2519
          *tmp___57 = imb___3.b[7];
#line 2519
          break;
        }
#line 2519
        break;
      }
#line 2520
      while (1) {
#line 2520
        while (1) {
#line 2520
          _amd64_rex_bits___2 = (unsigned char)1;
#line 2520
          if ((int )_amd64_rex_bits___2 != 0) {
#line 2520
            tmp___62 = jit->ip;
#line 2520
            (jit->ip) ++;
#line 2520
            *tmp___62 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
          }
#line 2520
          break;
        }
#line 2520
        tmp___63 = jit->ip;
#line 2520
        (jit->ip) ++;
#line 2520
        *tmp___63 = (unsigned char)255;
#line 2520
        while (1) {
#line 2520
          while (1) {
#line 2520
            tmp___64 = jit->ip;
#line 2520
            (jit->ip) ++;
#line 2520
            *tmp___64 = (unsigned char )(((3 << 6) | (2 << 3)) | 3);
#line 2520
            break;
          }
#line 2520
          break;
        }
#line 2520
        break;
      }
    }
  }
#line 2524
  stack_correction += jit->prepared_args.stack_size;
#line 2525
  if (stack_correction) {
#line 2526
    while (1) {
#line 2526
      if ((jit_value )stack_correction >= -128L) {
#line 2526
        if ((jit_value )stack_correction <= 127L) {
#line 2526
          while (1) {
#line 2526
            _amd64_rex_bits___3 = (unsigned char)8;
#line 2526
            if ((int )_amd64_rex_bits___3 != 0) {
#line 2526
              tmp___66 = jit->ip;
#line 2526
              (jit->ip) ++;
#line 2526
              *tmp___66 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
            }
#line 2526
            break;
          }
#line 2526
          tmp___67 = jit->ip;
#line 2526
          (jit->ip) ++;
#line 2526
          *tmp___67 = (unsigned char)131;
#line 2526
          while (1) {
#line 2526
            while (1) {
#line 2526
              tmp___68 = jit->ip;
#line 2526
              (jit->ip) ++;
#line 2526
              *tmp___68 = (unsigned char )((3 << 6) | 4);
#line 2526
              break;
            }
#line 2526
            break;
          }
#line 2526
          while (1) {
#line 2526
            *(jit->ip) = (unsigned char )(stack_correction & 0xff);
#line 2526
            (jit->ip) ++;
#line 2526
            break;
          }
        } else {
#line 2526
          goto _L___1;
        }
      } else {
        _L___1: /* CIL Label */ 
#line 2526
        while (1) {
#line 2526
          _amd64_rex_bits___5 = (unsigned char)8;
#line 2526
          if ((int )_amd64_rex_bits___5 != 0) {
#line 2526
            tmp___75 = jit->ip;
#line 2526
            (jit->ip) ++;
#line 2526
            *tmp___75 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
          }
#line 2526
          break;
        }
#line 2526
        tmp___76 = jit->ip;
#line 2526
        (jit->ip) ++;
#line 2526
        *tmp___76 = (unsigned char)129;
#line 2526
        while (1) {
#line 2526
          while (1) {
#line 2526
            tmp___77 = jit->ip;
#line 2526
            (jit->ip) ++;
#line 2526
            *tmp___77 = (unsigned char )((3 << 6) | 4);
#line 2526
            break;
          }
#line 2526
          break;
        }
#line 2526
        while (1) {
#line 2526
          imb___6.val = stack_correction;
#line 2526
          tmp___78 = jit->ip;
#line 2526
          (jit->ip) ++;
#line 2526
          *tmp___78 = imb___6.b[0];
#line 2526
          tmp___79 = jit->ip;
#line 2526
          (jit->ip) ++;
#line 2526
          *tmp___79 = imb___6.b[1];
#line 2526
          tmp___80 = jit->ip;
#line 2526
          (jit->ip) ++;
#line 2526
          *tmp___80 = imb___6.b[2];
#line 2526
          tmp___81 = jit->ip;
#line 2526
          (jit->ip) ++;
#line 2526
          *tmp___81 = imb___6.b[3];
#line 2526
          break;
        }
      }
#line 2526
      break;
    }
  }
#line 2527
  free((void *)jit->prepared_args.args);
#line 2529
  tmp___82 = emit_pop_caller_saved_regs(jit, op);
#line 2529
  jit->push_count -= tmp___82;
#line 2530
  return;
}
}
/* END FUNCTION-DEF emit_funcall LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF is_transfer_op LOC=UNKNOWN */
static int is_transfer_op(jit_op *op ) 
{ 
  jit_opcode code ;
  int tmp ;

  {
#line 5448
  code = (jit_opcode )((int )op->code & 0xfff8);
#line 5449
  if ((unsigned int )code == 1576U) {
#line 5449
    tmp = 1;
  } else
#line 5449
  if ((unsigned int )code == 1592U) {
#line 5449
    tmp = 1;
  } else
#line 5449
  if ((unsigned int )code == 1568U) {
#line 5449
    tmp = 1;
  } else
#line 5449
  if ((unsigned int )code == 1552U) {
#line 5449
    tmp = 1;
  } else
#line 5449
  if ((unsigned int )code == 1560U) {
#line 5449
    tmp = 1;
  } else {
#line 5449
    tmp = 0;
  }
#line 5449
  return (tmp);
}
}
/* END FUNCTION-DEF is_transfer_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_sub_op LOC=UNKNOWN */
static void emit_sse_sub_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                            jit_value a3 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___14 ;
  int tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___21 ;
  int tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;

  {
#line 1529
  if (a1 == a2) {
#line 1530
    while (1) {
#line 1530
      tmp = jit->ip;
#line 1530
      (jit->ip) ++;
#line 1530
      *tmp = (unsigned char)242;
#line 1530
      while (1) {
#line 1530
        if (a1 > 7L) {
#line 1530
          tmp___0 = 4;
        } else {
#line 1530
          tmp___0 = 0;
        }
#line 1530
        if (a3 > 7L) {
#line 1530
          tmp___1 = 1;
        } else {
#line 1530
          tmp___1 = 0;
        }
#line 1530
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
#line 1530
        if ((int )_amd64_rex_bits != 0) {
#line 1530
          tmp___2 = jit->ip;
#line 1530
          (jit->ip) ++;
#line 1530
          *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
        }
#line 1530
        break;
      }
#line 1530
      tmp___3 = jit->ip;
#line 1530
      (jit->ip) ++;
#line 1530
      *tmp___3 = (unsigned char)15;
#line 1530
      tmp___4 = jit->ip;
#line 1530
      (jit->ip) ++;
#line 1530
      *tmp___4 = (unsigned char)92;
#line 1530
      while (1) {
#line 1530
        while (1) {
#line 1530
          tmp___5 = jit->ip;
#line 1530
          (jit->ip) ++;
#line 1530
          *tmp___5 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a3 & 7L));
#line 1530
          break;
        }
#line 1530
        break;
      }
#line 1530
      break;
    }
  } else
#line 1531
  if (a1 == a3) {
#line 1532
    while (1) {
#line 1532
      tmp___6 = jit->ip;
#line 1532
      (jit->ip) ++;
#line 1532
      *tmp___6 = (unsigned char)242;
#line 1532
      while (1) {
#line 1532
        if (a1 > 7L) {
#line 1532
          tmp___7 = 4;
        } else {
#line 1532
          tmp___7 = 0;
        }
#line 1532
        if (a2 > 7L) {
#line 1532
          tmp___8 = 1;
        } else {
#line 1532
          tmp___8 = 0;
        }
#line 1532
        _amd64_rex_bits___0 = (unsigned char )(tmp___7 | tmp___8);
#line 1532
        if ((int )_amd64_rex_bits___0 != 0) {
#line 1532
          tmp___9 = jit->ip;
#line 1532
          (jit->ip) ++;
#line 1532
          *tmp___9 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
        }
#line 1532
        break;
      }
#line 1532
      tmp___10 = jit->ip;
#line 1532
      (jit->ip) ++;
#line 1532
      *tmp___10 = (unsigned char)15;
#line 1532
      tmp___11 = jit->ip;
#line 1532
      (jit->ip) ++;
#line 1532
      *tmp___11 = (unsigned char)92;
#line 1532
      while (1) {
#line 1532
        while (1) {
#line 1532
          tmp___12 = jit->ip;
#line 1532
          (jit->ip) ++;
#line 1532
          *tmp___12 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
#line 1532
          break;
        }
#line 1532
        break;
      }
#line 1532
      break;
    }
#line 1533
    emit_sse_change_sign(jit, op, (int )a1);
  } else {
#line 1535
    while (1) {
#line 1535
      tmp___13 = jit->ip;
#line 1535
      (jit->ip) ++;
#line 1535
      *tmp___13 = (unsigned char)242;
#line 1535
      while (1) {
#line 1535
        if (a1 > 7L) {
#line 1535
          tmp___14 = 4;
        } else {
#line 1535
          tmp___14 = 0;
        }
#line 1535
        if (a2 > 7L) {
#line 1535
          tmp___15 = 1;
        } else {
#line 1535
          tmp___15 = 0;
        }
#line 1535
        _amd64_rex_bits___1 = (unsigned char )(tmp___14 | tmp___15);
#line 1535
        if ((int )_amd64_rex_bits___1 != 0) {
#line 1535
          tmp___16 = jit->ip;
#line 1535
          (jit->ip) ++;
#line 1535
          *tmp___16 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
        }
#line 1535
        break;
      }
#line 1535
      tmp___17 = jit->ip;
#line 1535
      (jit->ip) ++;
#line 1535
      *tmp___17 = (unsigned char)15;
#line 1535
      tmp___18 = jit->ip;
#line 1535
      (jit->ip) ++;
#line 1535
      *tmp___18 = (unsigned char)16;
#line 1535
      while (1) {
#line 1535
        while (1) {
#line 1535
          tmp___19 = jit->ip;
#line 1535
          (jit->ip) ++;
#line 1535
          *tmp___19 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
#line 1535
          break;
        }
#line 1535
        break;
      }
#line 1535
      break;
    }
#line 1536
    while (1) {
#line 1536
      tmp___20 = jit->ip;
#line 1536
      (jit->ip) ++;
#line 1536
      *tmp___20 = (unsigned char)242;
#line 1536
      while (1) {
#line 1536
        if (a1 > 7L) {
#line 1536
          tmp___21 = 4;
        } else {
#line 1536
          tmp___21 = 0;
        }
#line 1536
        if (a3 > 7L) {
#line 1536
          tmp___22 = 1;
        } else {
#line 1536
          tmp___22 = 0;
        }
#line 1536
        _amd64_rex_bits___2 = (unsigned char )(tmp___21 | tmp___22);
#line 1536
        if ((int )_amd64_rex_bits___2 != 0) {
#line 1536
          tmp___23 = jit->ip;
#line 1536
          (jit->ip) ++;
#line 1536
          *tmp___23 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
        }
#line 1536
        break;
      }
#line 1536
      tmp___24 = jit->ip;
#line 1536
      (jit->ip) ++;
#line 1536
      *tmp___24 = (unsigned char)15;
#line 1536
      tmp___25 = jit->ip;
#line 1536
      (jit->ip) ++;
#line 1536
      *tmp___25 = (unsigned char)92;
#line 1536
      while (1) {
#line 1536
        while (1) {
#line 1536
          tmp___26 = jit->ip;
#line 1536
          (jit->ip) ++;
#line 1536
          *tmp___26 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a3 & 7L));
#line 1536
          break;
        }
#line 1536
        break;
      }
#line 1536
      break;
    }
  }
#line 1538
  return;
}
}
/* END FUNCTION-DEF emit_sse_sub_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF digittoint LOC=UNKNOWN */
__inline int digittoint(int _c ) 
{ 
  int tmp ;

  {
#line 307 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  tmp = __maskrune(_c, 15UL);
#line 307
  return (tmp);
}
}
/* END FUNCTION-DEF digittoint LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF islower LOC=UNKNOWN */
__inline int islower(int _c ) 
{ 
  int tmp ;

  {
#line 251
  tmp = __istype(_c, 4096UL);
#line 251
  return (tmp);
}
}
/* END FUNCTION-DEF islower LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF node_insert LOC=UNKNOWN */
static jit_tree *node_insert(jit_tree *h , jit_tree_key key , jit_tree_value value ,
                             int *found ) 
{ 
  jit_tree *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  jit_tree *tmp___2 ;

  {
#line 407
  if ((unsigned long )h == (unsigned long )((void *)0)) {
#line 407 "./jitter-Darwin-X86-64.c"
    tmp = node_new(key, value);
#line 407
    return (tmp);
  }
#line 408
  tmp___0 = is_red(h->left);
#line 408
  if (tmp___0) {
#line 408
    tmp___1 = is_red(h->right);
#line 408
    if (tmp___1) {
#line 408
      color_flip(h);
    }
  }
#line 411
  if (h->key == key) {
#line 412
    h->value = value;
#line 413
    if (found) {
#line 413
      *found = 1;
    }
  } else
#line 414
  if (h->key > key) {
#line 414
    h->left = node_insert(h->left, key, value, found);
  } else {
#line 415
    h->right = node_insert(h->right, key, value, found);
  }
#line 421
  tmp___2 = fixup(h);
#line 421
  return (tmp___2);
}
}
/* END FUNCTION-DEF node_insert LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_rmap_callback LOC=UNKNOWN */
static void print_rmap_callback(jit_tree_key key , jit_tree_value value , void *disasm ) 
{ 
  char buf[256] ;

  {
#line 4335
  jit_get_reg_name((struct jit_disasm *)disasm, buf, (int )key);
#line 4336
  printf((char const   */* __restrict  */)"%s=%s ", buf, ((jit_hw_reg *)value)->name);
#line 4337
  return;
}
}
/* END FUNCTION-DEF print_rmap_callback LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF join_addi_addr LOC=UNKNOWN */
static int join_addi_addr(jit_op *op , jit_op *nextop ) 
{ 
  unsigned long long tmp ;

  {
#line 2323
  if (op->arg[2] >= (-0x7FFFFFFF-1)) {
#line 2323
    if (! (op->arg[2] <= 2147483647L)) {
#line 2323
      return (0);
    }
  } else {
#line 2323
    return (0);
  }
#line 2324
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 536U) {
#line 2324
    op->arg[2] = - op->arg[2];
  }
#line 2326
  make_nop(op);
#line 2328
  nextop->code = (unsigned short)2072;
#line 2329
  nextop->spec = (unsigned char )(((0x01 << 4) | (0x01 << 2)) | 0x03);
#line 2331
  if (nextop->arg[1] == nextop->arg[2]) {
#line 2331
    op->arg[2] *= 2L;
  }
#line 2332
  tmp = __builtin_object_size((void *)(& nextop->flt_imm), 0);
#line 2332
  __builtin___memcpy_chk((void *)(& nextop->flt_imm), (void const   *)(& op->arg[2]),
                         sizeof(jit_value ), tmp);
#line 2334
  if (nextop->arg[1] == op->arg[0]) {
#line 2334
    nextop->arg[1] = op->arg[1];
  }
#line 2335
  if (nextop->arg[2] == op->arg[0]) {
#line 2335
    nextop->arg[2] = op->arg[1];
  }
#line 2337
  return (1);
}
}
/* END FUNCTION-DEF join_addi_addr LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_get_arg_from_stack LOC=UNKNOWN */
static void emit_get_arg_from_stack(struct jit *jit , int type , int size , int dreg ,
                                    int stack_reg , int stack_pos ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  long tmp___6 ;
  unsigned char *tmp___7 ;
  x86_imm_buf imb ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___29 ;
  int tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___50 ;
  int tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  long tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___75 ;
  int tmp___76 ;
  int tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  long tmp___81 ;
  unsigned char *tmp___82 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;
  unsigned char *tmp___99 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___104 ;
  int tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  long tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  unsigned char *tmp___116 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char *tmp___119 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  unsigned char *tmp___122 ;
  unsigned char *tmp___123 ;
  x86_imm_buf imb___10 ;
  unsigned char *tmp___124 ;
  unsigned char *tmp___125 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char *tmp___128 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___129 ;
  int tmp___130 ;
  unsigned char *tmp___131 ;
  unsigned char *tmp___132 ;
  unsigned char *tmp___133 ;
  unsigned char *tmp___134 ;
  x86_imm_buf imb___11 ;
  unsigned char *tmp___135 ;
  unsigned char *tmp___136 ;
  unsigned char *tmp___137 ;
  unsigned char *tmp___138 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  unsigned char *tmp___141 ;
  unsigned char *tmp___142 ;
  unsigned char *tmp___143 ;
  unsigned char *tmp___144 ;
  x86_imm_buf imb___12 ;
  unsigned char *tmp___145 ;
  unsigned char *tmp___146 ;
  unsigned char *tmp___147 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;
  unsigned char *tmp___150 ;
  unsigned char *tmp___151 ;
  x86_imm_buf imb___13 ;
  unsigned char *tmp___152 ;
  unsigned char *tmp___153 ;
  unsigned char *tmp___154 ;
  unsigned char *tmp___155 ;

  {
#line 2980
  if (type != 2) {
#line 2981
    if (size == (int )sizeof(void *)) {
#line 2981
      while (1) {
#line 2981
        if ((int )sizeof(void *) == 2) {
#line 2981
          tmp = jit->ip;
#line 2981
          (jit->ip) ++;
#line 2981
          *tmp = (unsigned char)102;
        }
#line 2981
        while (1) {
#line 2981
          if ((int )sizeof(void *) > 4) {
#line 2981
            tmp___0 = 8;
          } else {
#line 2981
            tmp___0 = 0;
          }
#line 2981
          if (dreg > 7) {
#line 2981
            tmp___1 = 4;
          } else {
#line 2981
            tmp___1 = 0;
          }
#line 2981
          if (stack_reg > 7) {
#line 2981
            tmp___2 = 1;
          } else {
#line 2981
            tmp___2 = 0;
          }
#line 2981
          _amd64_rex_bits = (unsigned char )((tmp___0 | tmp___1) | tmp___2);
#line 2981
          if ((int )_amd64_rex_bits != 0) {
#line 2981
            tmp___3 = jit->ip;
#line 2981
            (jit->ip) ++;
#line 2981
            *tmp___3 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          } else
#line 2981
          if ((int )sizeof(void *) == 1) {
#line 2981
            tmp___3 = jit->ip;
#line 2981
            (jit->ip) ++;
#line 2981
            *tmp___3 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          }
#line 2981
          break;
        }
#line 2981
        switch ((int )sizeof(void *)) {
        case 1: 
#line 2981
        tmp___4 = jit->ip;
#line 2981
        (jit->ip) ++;
#line 2981
        *tmp___4 = (unsigned char)138;
#line 2981
        break;
        case 8: 
        case 4: 
        case 2: 
#line 2981
        tmp___5 = jit->ip;
#line 2981
        (jit->ip) ++;
#line 2981
        *tmp___5 = (unsigned char)139;
#line 2981
        break;
        default: 
#line 2981
        tmp___6 = __builtin_expect(1L, 0L);
#line 2981
        if (tmp___6) {
#line 2981
          __assert_rtn((char const   *)"emit_get_arg_from_stack", (char const   *)"./jitter-Darwin-X86-64.c",
                       2981, (char const   *)"0");
        }
        }
#line 2981
        while (1) {
#line 2981
          if (stack_reg == 16) {
#line 2981
            while (1) {
#line 2981
              tmp___7 = jit->ip;
#line 2981
              (jit->ip) ++;
#line 2981
              *tmp___7 = (unsigned char )((((dreg & 0x7) & 0x07) << 3) | 5);
#line 2981
              break;
            }
#line 2981
            while (1) {
#line 2981
              imb.val = stack_pos;
#line 2981
              tmp___8 = jit->ip;
#line 2981
              (jit->ip) ++;
#line 2981
              *tmp___8 = imb.b[0];
#line 2981
              tmp___9 = jit->ip;
#line 2981
              (jit->ip) ++;
#line 2981
              *tmp___9 = imb.b[1];
#line 2981
              tmp___10 = jit->ip;
#line 2981
              (jit->ip) ++;
#line 2981
              *tmp___10 = imb.b[2];
#line 2981
              tmp___11 = jit->ip;
#line 2981
              (jit->ip) ++;
#line 2981
              *tmp___11 = imb.b[3];
#line 2981
              break;
            }
          } else {
#line 2981
            while (1) {
#line 2981
              if ((stack_reg & 0x7) == 4) {
#line 2981
                if (stack_pos == 0) {
#line 2981
                  while (1) {
#line 2981
                    tmp___12 = jit->ip;
#line 2981
                    (jit->ip) ++;
#line 2981
                    *tmp___12 = (unsigned char )((((dreg & 0x7) & 0x07) << 3) | 4);
#line 2981
                    break;
                  }
#line 2981
                  while (1) {
#line 2981
                    tmp___13 = jit->ip;
#line 2981
                    (jit->ip) ++;
#line 2981
                    *tmp___13 = (unsigned char )((4 << 3) | 4);
#line 2981
                    break;
                  }
                } else
#line 2981
                if ((jit_value )stack_pos >= -128L) {
#line 2981
                  if ((jit_value )stack_pos <= 127L) {
#line 2981
                    while (1) {
#line 2981
                      tmp___14 = jit->ip;
#line 2981
                      (jit->ip) ++;
#line 2981
                      *tmp___14 = (unsigned char )(((1 << 6) | (((dreg & 0x7) & 0x07) << 3)) | 4);
#line 2981
                      break;
                    }
#line 2981
                    while (1) {
#line 2981
                      tmp___15 = jit->ip;
#line 2981
                      (jit->ip) ++;
#line 2981
                      *tmp___15 = (unsigned char )((4 << 3) | 4);
#line 2981
                      break;
                    }
#line 2981
                    while (1) {
#line 2981
                      *(jit->ip) = (unsigned char )(stack_pos & 0xff);
#line 2981
                      (jit->ip) ++;
#line 2981
                      break;
                    }
                  } else {
#line 2981
                    goto _L;
                  }
                } else {
                  _L: /* CIL Label */ 
#line 2981
                  while (1) {
#line 2981
                    tmp___16 = jit->ip;
#line 2981
                    (jit->ip) ++;
#line 2981
                    *tmp___16 = (unsigned char )(((2 << 6) | (((dreg & 0x7) & 0x07) << 3)) | 4);
#line 2981
                    break;
                  }
#line 2981
                  while (1) {
#line 2981
                    tmp___17 = jit->ip;
#line 2981
                    (jit->ip) ++;
#line 2981
                    *tmp___17 = (unsigned char )((4 << 3) | 4);
#line 2981
                    break;
                  }
#line 2981
                  while (1) {
#line 2981
                    imb___0.val = stack_pos;
#line 2981
                    tmp___18 = jit->ip;
#line 2981
                    (jit->ip) ++;
#line 2981
                    *tmp___18 = imb___0.b[0];
#line 2981
                    tmp___19 = jit->ip;
#line 2981
                    (jit->ip) ++;
#line 2981
                    *tmp___19 = imb___0.b[1];
#line 2981
                    tmp___20 = jit->ip;
#line 2981
                    (jit->ip) ++;
#line 2981
                    *tmp___20 = imb___0.b[2];
#line 2981
                    tmp___21 = jit->ip;
#line 2981
                    (jit->ip) ++;
#line 2981
                    *tmp___21 = imb___0.b[3];
#line 2981
                    break;
                  }
                }
#line 2981
                break;
              }
#line 2981
              if (stack_pos == 0) {
#line 2981
                if ((stack_reg & 0x7) != 5) {
#line 2981
                  while (1) {
#line 2981
                    tmp___22 = jit->ip;
#line 2981
                    (jit->ip) ++;
#line 2981
                    *tmp___22 = (unsigned char )((((dreg & 0x7) & 0x07) << 3) | ((stack_reg & 0x7) & 0x07));
#line 2981
                    break;
                  }
#line 2981
                  break;
                }
              }
#line 2981
              if ((jit_value )stack_pos >= -128L) {
#line 2981
                if ((jit_value )stack_pos <= 127L) {
#line 2981
                  while (1) {
#line 2981
                    tmp___23 = jit->ip;
#line 2981
                    (jit->ip) ++;
#line 2981
                    *tmp___23 = (unsigned char )(((1 << 6) | (((dreg & 0x7) & 0x07) << 3)) | ((stack_reg & 0x7) & 0x07));
#line 2981
                    break;
                  }
#line 2981
                  while (1) {
#line 2981
                    *(jit->ip) = (unsigned char )(stack_pos & 0xff);
#line 2981
                    (jit->ip) ++;
#line 2981
                    break;
                  }
                } else {
#line 2981
                  goto _L___0;
                }
              } else {
                _L___0: /* CIL Label */ 
#line 2981
                while (1) {
#line 2981
                  tmp___24 = jit->ip;
#line 2981
                  (jit->ip) ++;
#line 2981
                  *tmp___24 = (unsigned char )(((2 << 6) | (((dreg & 0x7) & 0x07) << 3)) | ((stack_reg & 0x7) & 0x07));
#line 2981
                  break;
                }
#line 2981
                while (1) {
#line 2981
                  imb___1.val = stack_pos;
#line 2981
                  tmp___25 = jit->ip;
#line 2981
                  (jit->ip) ++;
#line 2981
                  *tmp___25 = imb___1.b[0];
#line 2981
                  tmp___26 = jit->ip;
#line 2981
                  (jit->ip) ++;
#line 2981
                  *tmp___26 = imb___1.b[1];
#line 2981
                  tmp___27 = jit->ip;
#line 2981
                  (jit->ip) ++;
#line 2981
                  *tmp___27 = imb___1.b[2];
#line 2981
                  tmp___28 = jit->ip;
#line 2981
                  (jit->ip) ++;
#line 2981
                  *tmp___28 = imb___1.b[3];
#line 2981
                  break;
                }
              }
#line 2981
              break;
            }
          }
#line 2981
          break;
        }
#line 2981
        break;
      }
    } else
#line 2982
    if (type == 0) {
#line 2983
      while (1) {
#line 2983
        if (size == 4) {
#line 2983
          while (1) {
#line 2983
            while (1) {
#line 2983
              if (dreg > 7) {
#line 2983
                tmp___29 = 4;
              } else {
#line 2983
                tmp___29 = 0;
              }
#line 2983
              if (stack_reg > 7) {
#line 2983
                tmp___30 = 1;
              } else {
#line 2983
                tmp___30 = 0;
              }
#line 2983
              _amd64_rex_bits___0 = (unsigned char )((8 | tmp___29) | tmp___30);
#line 2983
              if ((int )_amd64_rex_bits___0 != 0) {
#line 2983
                tmp___31 = jit->ip;
#line 2983
                (jit->ip) ++;
#line 2983
                *tmp___31 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
              }
#line 2983
              break;
            }
#line 2983
            tmp___32 = jit->ip;
#line 2983
            (jit->ip) ++;
#line 2983
            *tmp___32 = (unsigned char)99;
#line 2983
            while (1) {
#line 2983
              if ((stack_reg & 0x7) == 4) {
#line 2983
                if (stack_pos == 0) {
#line 2983
                  while (1) {
#line 2983
                    tmp___33 = jit->ip;
#line 2983
                    (jit->ip) ++;
#line 2983
                    *tmp___33 = (unsigned char )((((dreg & 0x7) & 0x07) << 3) | 4);
#line 2983
                    break;
                  }
#line 2983
                  while (1) {
#line 2983
                    tmp___34 = jit->ip;
#line 2983
                    (jit->ip) ++;
#line 2983
                    *tmp___34 = (unsigned char )((4 << 3) | 4);
#line 2983
                    break;
                  }
                } else
#line 2983
                if ((jit_value )stack_pos >= -128L) {
#line 2983
                  if ((jit_value )stack_pos <= 127L) {
#line 2983
                    while (1) {
#line 2983
                      tmp___35 = jit->ip;
#line 2983
                      (jit->ip) ++;
#line 2983
                      *tmp___35 = (unsigned char )(((1 << 6) | (((dreg & 0x7) & 0x07) << 3)) | 4);
#line 2983
                      break;
                    }
#line 2983
                    while (1) {
#line 2983
                      tmp___36 = jit->ip;
#line 2983
                      (jit->ip) ++;
#line 2983
                      *tmp___36 = (unsigned char )((4 << 3) | 4);
#line 2983
                      break;
                    }
#line 2983
                    while (1) {
#line 2983
                      *(jit->ip) = (unsigned char )(stack_pos & 0xff);
#line 2983
                      (jit->ip) ++;
#line 2983
                      break;
                    }
                  } else {
#line 2983
                    goto _L___1;
                  }
                } else {
                  _L___1: /* CIL Label */ 
#line 2983
                  while (1) {
#line 2983
                    tmp___37 = jit->ip;
#line 2983
                    (jit->ip) ++;
#line 2983
                    *tmp___37 = (unsigned char )(((2 << 6) | (((dreg & 0x7) & 0x07) << 3)) | 4);
#line 2983
                    break;
                  }
#line 2983
                  while (1) {
#line 2983
                    tmp___38 = jit->ip;
#line 2983
                    (jit->ip) ++;
#line 2983
                    *tmp___38 = (unsigned char )((4 << 3) | 4);
#line 2983
                    break;
                  }
#line 2983
                  while (1) {
#line 2983
                    imb___2.val = stack_pos;
#line 2983
                    tmp___39 = jit->ip;
#line 2983
                    (jit->ip) ++;
#line 2983
                    *tmp___39 = imb___2.b[0];
#line 2983
                    tmp___40 = jit->ip;
#line 2983
                    (jit->ip) ++;
#line 2983
                    *tmp___40 = imb___2.b[1];
#line 2983
                    tmp___41 = jit->ip;
#line 2983
                    (jit->ip) ++;
#line 2983
                    *tmp___41 = imb___2.b[2];
#line 2983
                    tmp___42 = jit->ip;
#line 2983
                    (jit->ip) ++;
#line 2983
                    *tmp___42 = imb___2.b[3];
#line 2983
                    break;
                  }
                }
#line 2983
                break;
              }
#line 2983
              if (stack_pos == 0) {
#line 2983
                if ((stack_reg & 0x7) != 5) {
#line 2983
                  while (1) {
#line 2983
                    tmp___43 = jit->ip;
#line 2983
                    (jit->ip) ++;
#line 2983
                    *tmp___43 = (unsigned char )((((dreg & 0x7) & 0x07) << 3) | ((stack_reg & 0x7) & 0x07));
#line 2983
                    break;
                  }
#line 2983
                  break;
                }
              }
#line 2983
              if ((jit_value )stack_pos >= -128L) {
#line 2983
                if ((jit_value )stack_pos <= 127L) {
#line 2983
                  while (1) {
#line 2983
                    tmp___44 = jit->ip;
#line 2983
                    (jit->ip) ++;
#line 2983
                    *tmp___44 = (unsigned char )(((1 << 6) | (((dreg & 0x7) & 0x07) << 3)) | ((stack_reg & 0x7) & 0x07));
#line 2983
                    break;
                  }
#line 2983
                  while (1) {
#line 2983
                    *(jit->ip) = (unsigned char )(stack_pos & 0xff);
#line 2983
                    (jit->ip) ++;
#line 2983
                    break;
                  }
                } else {
#line 2983
                  goto _L___2;
                }
              } else {
                _L___2: /* CIL Label */ 
#line 2983
                while (1) {
#line 2983
                  tmp___45 = jit->ip;
#line 2983
                  (jit->ip) ++;
#line 2983
                  *tmp___45 = (unsigned char )(((2 << 6) | (((dreg & 0x7) & 0x07) << 3)) | ((stack_reg & 0x7) & 0x07));
#line 2983
                  break;
                }
#line 2983
                while (1) {
#line 2983
                  imb___3.val = stack_pos;
#line 2983
                  tmp___46 = jit->ip;
#line 2983
                  (jit->ip) ++;
#line 2983
                  *tmp___46 = imb___3.b[0];
#line 2983
                  tmp___47 = jit->ip;
#line 2983
                  (jit->ip) ++;
#line 2983
                  *tmp___47 = imb___3.b[1];
#line 2983
                  tmp___48 = jit->ip;
#line 2983
                  (jit->ip) ++;
#line 2983
                  *tmp___48 = imb___3.b[2];
#line 2983
                  tmp___49 = jit->ip;
#line 2983
                  (jit->ip) ++;
#line 2983
                  *tmp___49 = imb___3.b[3];
#line 2983
                  break;
                }
              }
#line 2983
              break;
            }
#line 2983
            break;
          }
#line 2983
          break;
        }
#line 2983
        while (1) {
#line 2983
          if (dreg > 7) {
#line 2983
            tmp___50 = 4;
          } else {
#line 2983
            tmp___50 = 0;
          }
#line 2983
          if (stack_reg > 7) {
#line 2983
            tmp___51 = 1;
          } else {
#line 2983
            tmp___51 = 0;
          }
#line 2983
          _amd64_rex_bits___1 = (unsigned char )((8 | tmp___50) | tmp___51);
#line 2983
          if ((int )_amd64_rex_bits___1 != 0) {
#line 2983
            tmp___52 = jit->ip;
#line 2983
            (jit->ip) ++;
#line 2983
            *tmp___52 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
          }
#line 2983
          break;
        }
#line 2983
        tmp___53 = jit->ip;
#line 2983
        (jit->ip) ++;
#line 2983
        *tmp___53 = (unsigned char)15;
#line 2983
        switch (size) {
        case 1: 
#line 2983
        tmp___54 = jit->ip;
#line 2983
        (jit->ip) ++;
#line 2983
        *tmp___54 = (unsigned char)190;
#line 2983
        break;
        case 2: 
#line 2983
        tmp___55 = jit->ip;
#line 2983
        (jit->ip) ++;
#line 2983
        *tmp___55 = (unsigned char)191;
#line 2983
        break;
        default: 
#line 2983
        tmp___56 = __builtin_expect(1L, 0L);
#line 2983
        if (tmp___56) {
#line 2983
          __assert_rtn((char const   *)"emit_get_arg_from_stack", (char const   *)"./jitter-Darwin-X86-64.c",
                       2983, (char const   *)"0");
        }
        }
#line 2983
        while (1) {
#line 2983
          if ((stack_reg & 0x7) == 4) {
#line 2983
            if (stack_pos == 0) {
#line 2983
              while (1) {
#line 2983
                tmp___57 = jit->ip;
#line 2983
                (jit->ip) ++;
#line 2983
                *tmp___57 = (unsigned char )((((dreg & 0x7) & 0x07) << 3) | 4);
#line 2983
                break;
              }
#line 2983
              while (1) {
#line 2983
                tmp___58 = jit->ip;
#line 2983
                (jit->ip) ++;
#line 2983
                *tmp___58 = (unsigned char )((4 << 3) | 4);
#line 2983
                break;
              }
            } else
#line 2983
            if ((jit_value )stack_pos >= -128L) {
#line 2983
              if ((jit_value )stack_pos <= 127L) {
#line 2983
                while (1) {
#line 2983
                  tmp___59 = jit->ip;
#line 2983
                  (jit->ip) ++;
#line 2983
                  *tmp___59 = (unsigned char )(((1 << 6) | (((dreg & 0x7) & 0x07) << 3)) | 4);
#line 2983
                  break;
                }
#line 2983
                while (1) {
#line 2983
                  tmp___60 = jit->ip;
#line 2983
                  (jit->ip) ++;
#line 2983
                  *tmp___60 = (unsigned char )((4 << 3) | 4);
#line 2983
                  break;
                }
#line 2983
                while (1) {
#line 2983
                  *(jit->ip) = (unsigned char )(stack_pos & 0xff);
#line 2983
                  (jit->ip) ++;
#line 2983
                  break;
                }
              } else {
#line 2983
                goto _L___3;
              }
            } else {
              _L___3: /* CIL Label */ 
#line 2983
              while (1) {
#line 2983
                tmp___61 = jit->ip;
#line 2983
                (jit->ip) ++;
#line 2983
                *tmp___61 = (unsigned char )(((2 << 6) | (((dreg & 0x7) & 0x07) << 3)) | 4);
#line 2983
                break;
              }
#line 2983
              while (1) {
#line 2983
                tmp___62 = jit->ip;
#line 2983
                (jit->ip) ++;
#line 2983
                *tmp___62 = (unsigned char )((4 << 3) | 4);
#line 2983
                break;
              }
#line 2983
              while (1) {
#line 2983
                imb___4.val = stack_pos;
#line 2983
                tmp___63 = jit->ip;
#line 2983
                (jit->ip) ++;
#line 2983
                *tmp___63 = imb___4.b[0];
#line 2983
                tmp___64 = jit->ip;
#line 2983
                (jit->ip) ++;
#line 2983
                *tmp___64 = imb___4.b[1];
#line 2983
                tmp___65 = jit->ip;
#line 2983
                (jit->ip) ++;
#line 2983
                *tmp___65 = imb___4.b[2];
#line 2983
                tmp___66 = jit->ip;
#line 2983
                (jit->ip) ++;
#line 2983
                *tmp___66 = imb___4.b[3];
#line 2983
                break;
              }
            }
#line 2983
            break;
          }
#line 2983
          if (stack_pos == 0) {
#line 2983
            if ((stack_reg & 0x7) != 5) {
#line 2983
              while (1) {
#line 2983
                tmp___67 = jit->ip;
#line 2983
                (jit->ip) ++;
#line 2983
                *tmp___67 = (unsigned char )((((dreg & 0x7) & 0x07) << 3) | ((stack_reg & 0x7) & 0x07));
#line 2983
                break;
              }
#line 2983
              break;
            }
          }
#line 2983
          if ((jit_value )stack_pos >= -128L) {
#line 2983
            if ((jit_value )stack_pos <= 127L) {
#line 2983
              while (1) {
#line 2983
                tmp___68 = jit->ip;
#line 2983
                (jit->ip) ++;
#line 2983
                *tmp___68 = (unsigned char )(((1 << 6) | (((dreg & 0x7) & 0x07) << 3)) | ((stack_reg & 0x7) & 0x07));
#line 2983
                break;
              }
#line 2983
              while (1) {
#line 2983
                *(jit->ip) = (unsigned char )(stack_pos & 0xff);
#line 2983
                (jit->ip) ++;
#line 2983
                break;
              }
            } else {
#line 2983
              goto _L___4;
            }
          } else {
            _L___4: /* CIL Label */ 
#line 2983
            while (1) {
#line 2983
              tmp___69 = jit->ip;
#line 2983
              (jit->ip) ++;
#line 2983
              *tmp___69 = (unsigned char )(((2 << 6) | (((dreg & 0x7) & 0x07) << 3)) | ((stack_reg & 0x7) & 0x07));
#line 2983
              break;
            }
#line 2983
            while (1) {
#line 2983
              imb___5.val = stack_pos;
#line 2983
              tmp___70 = jit->ip;
#line 2983
              (jit->ip) ++;
#line 2983
              *tmp___70 = imb___5.b[0];
#line 2983
              tmp___71 = jit->ip;
#line 2983
              (jit->ip) ++;
#line 2983
              *tmp___71 = imb___5.b[1];
#line 2983
              tmp___72 = jit->ip;
#line 2983
              (jit->ip) ++;
#line 2983
              *tmp___72 = imb___5.b[2];
#line 2983
              tmp___73 = jit->ip;
#line 2983
              (jit->ip) ++;
#line 2983
              *tmp___73 = imb___5.b[3];
#line 2983
              break;
            }
          }
#line 2983
          break;
        }
#line 2983
        break;
      }
    } else {
#line 2984
      while (1) {
#line 2984
        if (size == 8) {
#line 2984
          goto _L___7;
        } else
#line 2984
        if (size == 4) {
          _L___7: /* CIL Label */ 
#line 2984
          while (1) {
#line 2984
            if (size == 2) {
#line 2984
              tmp___74 = jit->ip;
#line 2984
              (jit->ip) ++;
#line 2984
              *tmp___74 = (unsigned char)102;
            }
#line 2984
            while (1) {
#line 2984
              if (size > 4) {
#line 2984
                tmp___75 = 8;
              } else {
#line 2984
                tmp___75 = 0;
              }
#line 2984
              if (dreg > 7) {
#line 2984
                tmp___76 = 4;
              } else {
#line 2984
                tmp___76 = 0;
              }
#line 2984
              if (stack_reg > 7) {
#line 2984
                tmp___77 = 1;
              } else {
#line 2984
                tmp___77 = 0;
              }
#line 2984
              _amd64_rex_bits___2 = (unsigned char )((tmp___75 | tmp___76) | tmp___77);
#line 2984
              if ((int )_amd64_rex_bits___2 != 0) {
#line 2984
                tmp___78 = jit->ip;
#line 2984
                (jit->ip) ++;
#line 2984
                *tmp___78 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
              } else
#line 2984
              if (size == 1) {
#line 2984
                tmp___78 = jit->ip;
#line 2984
                (jit->ip) ++;
#line 2984
                *tmp___78 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
              }
#line 2984
              break;
            }
#line 2984
            switch (size) {
            case 1: 
#line 2984
            tmp___79 = jit->ip;
#line 2984
            (jit->ip) ++;
#line 2984
            *tmp___79 = (unsigned char)138;
#line 2984
            break;
            case 8: 
            case 4: 
            case 2: 
#line 2984
            tmp___80 = jit->ip;
#line 2984
            (jit->ip) ++;
#line 2984
            *tmp___80 = (unsigned char)139;
#line 2984
            break;
            default: 
#line 2984
            tmp___81 = __builtin_expect(1L, 0L);
#line 2984
            if (tmp___81) {
#line 2984
              __assert_rtn((char const   *)"emit_get_arg_from_stack", (char const   *)"./jitter-Darwin-X86-64.c",
                           2984, (char const   *)"0");
            }
            }
#line 2984
            while (1) {
#line 2984
              if (stack_reg == 16) {
#line 2984
                while (1) {
#line 2984
                  tmp___82 = jit->ip;
#line 2984
                  (jit->ip) ++;
#line 2984
                  *tmp___82 = (unsigned char )((((dreg & 0x7) & 0x07) << 3) | 5);
#line 2984
                  break;
                }
#line 2984
                while (1) {
#line 2984
                  imb___6.val = stack_pos;
#line 2984
                  tmp___83 = jit->ip;
#line 2984
                  (jit->ip) ++;
#line 2984
                  *tmp___83 = imb___6.b[0];
#line 2984
                  tmp___84 = jit->ip;
#line 2984
                  (jit->ip) ++;
#line 2984
                  *tmp___84 = imb___6.b[1];
#line 2984
                  tmp___85 = jit->ip;
#line 2984
                  (jit->ip) ++;
#line 2984
                  *tmp___85 = imb___6.b[2];
#line 2984
                  tmp___86 = jit->ip;
#line 2984
                  (jit->ip) ++;
#line 2984
                  *tmp___86 = imb___6.b[3];
#line 2984
                  break;
                }
              } else {
#line 2984
                while (1) {
#line 2984
                  if ((stack_reg & 0x7) == 4) {
#line 2984
                    if (stack_pos == 0) {
#line 2984
                      while (1) {
#line 2984
                        tmp___87 = jit->ip;
#line 2984
                        (jit->ip) ++;
#line 2984
                        *tmp___87 = (unsigned char )((((dreg & 0x7) & 0x07) << 3) | 4);
#line 2984
                        break;
                      }
#line 2984
                      while (1) {
#line 2984
                        tmp___88 = jit->ip;
#line 2984
                        (jit->ip) ++;
#line 2984
                        *tmp___88 = (unsigned char )((4 << 3) | 4);
#line 2984
                        break;
                      }
                    } else
#line 2984
                    if ((jit_value )stack_pos >= -128L) {
#line 2984
                      if ((jit_value )stack_pos <= 127L) {
#line 2984
                        while (1) {
#line 2984
                          tmp___89 = jit->ip;
#line 2984
                          (jit->ip) ++;
#line 2984
                          *tmp___89 = (unsigned char )(((1 << 6) | (((dreg & 0x7) & 0x07) << 3)) | 4);
#line 2984
                          break;
                        }
#line 2984
                        while (1) {
#line 2984
                          tmp___90 = jit->ip;
#line 2984
                          (jit->ip) ++;
#line 2984
                          *tmp___90 = (unsigned char )((4 << 3) | 4);
#line 2984
                          break;
                        }
#line 2984
                        while (1) {
#line 2984
                          *(jit->ip) = (unsigned char )(stack_pos & 0xff);
#line 2984
                          (jit->ip) ++;
#line 2984
                          break;
                        }
                      } else {
#line 2984
                        goto _L___5;
                      }
                    } else {
                      _L___5: /* CIL Label */ 
#line 2984
                      while (1) {
#line 2984
                        tmp___91 = jit->ip;
#line 2984
                        (jit->ip) ++;
#line 2984
                        *tmp___91 = (unsigned char )(((2 << 6) | (((dreg & 0x7) & 0x07) << 3)) | 4);
#line 2984
                        break;
                      }
#line 2984
                      while (1) {
#line 2984
                        tmp___92 = jit->ip;
#line 2984
                        (jit->ip) ++;
#line 2984
                        *tmp___92 = (unsigned char )((4 << 3) | 4);
#line 2984
                        break;
                      }
#line 2984
                      while (1) {
#line 2984
                        imb___7.val = stack_pos;
#line 2984
                        tmp___93 = jit->ip;
#line 2984
                        (jit->ip) ++;
#line 2984
                        *tmp___93 = imb___7.b[0];
#line 2984
                        tmp___94 = jit->ip;
#line 2984
                        (jit->ip) ++;
#line 2984
                        *tmp___94 = imb___7.b[1];
#line 2984
                        tmp___95 = jit->ip;
#line 2984
                        (jit->ip) ++;
#line 2984
                        *tmp___95 = imb___7.b[2];
#line 2984
                        tmp___96 = jit->ip;
#line 2984
                        (jit->ip) ++;
#line 2984
                        *tmp___96 = imb___7.b[3];
#line 2984
                        break;
                      }
                    }
#line 2984
                    break;
                  }
#line 2984
                  if (stack_pos == 0) {
#line 2984
                    if ((stack_reg & 0x7) != 5) {
#line 2984
                      while (1) {
#line 2984
                        tmp___97 = jit->ip;
#line 2984
                        (jit->ip) ++;
#line 2984
                        *tmp___97 = (unsigned char )((((dreg & 0x7) & 0x07) << 3) | ((stack_reg & 0x7) & 0x07));
#line 2984
                        break;
                      }
#line 2984
                      break;
                    }
                  }
#line 2984
                  if ((jit_value )stack_pos >= -128L) {
#line 2984
                    if ((jit_value )stack_pos <= 127L) {
#line 2984
                      while (1) {
#line 2984
                        tmp___98 = jit->ip;
#line 2984
                        (jit->ip) ++;
#line 2984
                        *tmp___98 = (unsigned char )(((1 << 6) | (((dreg & 0x7) & 0x07) << 3)) | ((stack_reg & 0x7) & 0x07));
#line 2984
                        break;
                      }
#line 2984
                      while (1) {
#line 2984
                        *(jit->ip) = (unsigned char )(stack_pos & 0xff);
#line 2984
                        (jit->ip) ++;
#line 2984
                        break;
                      }
                    } else {
#line 2984
                      goto _L___6;
                    }
                  } else {
                    _L___6: /* CIL Label */ 
#line 2984
                    while (1) {
#line 2984
                      tmp___99 = jit->ip;
#line 2984
                      (jit->ip) ++;
#line 2984
                      *tmp___99 = (unsigned char )(((2 << 6) | (((dreg & 0x7) & 0x07) << 3)) | ((stack_reg & 0x7) & 0x07));
#line 2984
                      break;
                    }
#line 2984
                    while (1) {
#line 2984
                      imb___8.val = stack_pos;
#line 2984
                      tmp___100 = jit->ip;
#line 2984
                      (jit->ip) ++;
#line 2984
                      *tmp___100 = imb___8.b[0];
#line 2984
                      tmp___101 = jit->ip;
#line 2984
                      (jit->ip) ++;
#line 2984
                      *tmp___101 = imb___8.b[1];
#line 2984
                      tmp___102 = jit->ip;
#line 2984
                      (jit->ip) ++;
#line 2984
                      *tmp___102 = imb___8.b[2];
#line 2984
                      tmp___103 = jit->ip;
#line 2984
                      (jit->ip) ++;
#line 2984
                      *tmp___103 = imb___8.b[3];
#line 2984
                      break;
                    }
                  }
#line 2984
                  break;
                }
              }
#line 2984
              break;
            }
#line 2984
            break;
          }
#line 2984
          break;
        }
#line 2984
        while (1) {
#line 2984
          if (dreg > 7) {
#line 2984
            tmp___104 = 4;
          } else {
#line 2984
            tmp___104 = 0;
          }
#line 2984
          if (stack_reg > 7) {
#line 2984
            tmp___105 = 1;
          } else {
#line 2984
            tmp___105 = 0;
          }
#line 2984
          _amd64_rex_bits___3 = (unsigned char )((8 | tmp___104) | tmp___105);
#line 2984
          if ((int )_amd64_rex_bits___3 != 0) {
#line 2984
            tmp___106 = jit->ip;
#line 2984
            (jit->ip) ++;
#line 2984
            *tmp___106 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
          }
#line 2984
          break;
        }
#line 2984
        tmp___107 = jit->ip;
#line 2984
        (jit->ip) ++;
#line 2984
        *tmp___107 = (unsigned char)15;
#line 2984
        switch (size) {
        case 1: 
#line 2984
        tmp___108 = jit->ip;
#line 2984
        (jit->ip) ++;
#line 2984
        *tmp___108 = (unsigned char)182;
#line 2984
        break;
        case 2: 
#line 2984
        tmp___109 = jit->ip;
#line 2984
        (jit->ip) ++;
#line 2984
        *tmp___109 = (unsigned char)183;
#line 2984
        break;
        default: 
#line 2984
        tmp___110 = __builtin_expect(1L, 0L);
#line 2984
        if (tmp___110) {
#line 2984
          __assert_rtn((char const   *)"emit_get_arg_from_stack", (char const   *)"./jitter-Darwin-X86-64.c",
                       2984, (char const   *)"0");
        }
        }
#line 2984
        while (1) {
#line 2984
          if ((stack_reg & 0x7) == 4) {
#line 2984
            if (stack_pos == 0) {
#line 2984
              while (1) {
#line 2984
                tmp___111 = jit->ip;
#line 2984
                (jit->ip) ++;
#line 2984
                *tmp___111 = (unsigned char )((((dreg & 0x7) & 0x07) << 3) | 4);
#line 2984
                break;
              }
#line 2984
              while (1) {
#line 2984
                tmp___112 = jit->ip;
#line 2984
                (jit->ip) ++;
#line 2984
                *tmp___112 = (unsigned char )((4 << 3) | 4);
#line 2984
                break;
              }
            } else
#line 2984
            if ((jit_value )stack_pos >= -128L) {
#line 2984
              if ((jit_value )stack_pos <= 127L) {
#line 2984
                while (1) {
#line 2984
                  tmp___113 = jit->ip;
#line 2984
                  (jit->ip) ++;
#line 2984
                  *tmp___113 = (unsigned char )(((1 << 6) | (((dreg & 0x7) & 0x07) << 3)) | 4);
#line 2984
                  break;
                }
#line 2984
                while (1) {
#line 2984
                  tmp___114 = jit->ip;
#line 2984
                  (jit->ip) ++;
#line 2984
                  *tmp___114 = (unsigned char )((4 << 3) | 4);
#line 2984
                  break;
                }
#line 2984
                while (1) {
#line 2984
                  *(jit->ip) = (unsigned char )(stack_pos & 0xff);
#line 2984
                  (jit->ip) ++;
#line 2984
                  break;
                }
              } else {
#line 2984
                goto _L___8;
              }
            } else {
              _L___8: /* CIL Label */ 
#line 2984
              while (1) {
#line 2984
                tmp___115 = jit->ip;
#line 2984
                (jit->ip) ++;
#line 2984
                *tmp___115 = (unsigned char )(((2 << 6) | (((dreg & 0x7) & 0x07) << 3)) | 4);
#line 2984
                break;
              }
#line 2984
              while (1) {
#line 2984
                tmp___116 = jit->ip;
#line 2984
                (jit->ip) ++;
#line 2984
                *tmp___116 = (unsigned char )((4 << 3) | 4);
#line 2984
                break;
              }
#line 2984
              while (1) {
#line 2984
                imb___9.val = stack_pos;
#line 2984
                tmp___117 = jit->ip;
#line 2984
                (jit->ip) ++;
#line 2984
                *tmp___117 = imb___9.b[0];
#line 2984
                tmp___118 = jit->ip;
#line 2984
                (jit->ip) ++;
#line 2984
                *tmp___118 = imb___9.b[1];
#line 2984
                tmp___119 = jit->ip;
#line 2984
                (jit->ip) ++;
#line 2984
                *tmp___119 = imb___9.b[2];
#line 2984
                tmp___120 = jit->ip;
#line 2984
                (jit->ip) ++;
#line 2984
                *tmp___120 = imb___9.b[3];
#line 2984
                break;
              }
            }
#line 2984
            break;
          }
#line 2984
          if (stack_pos == 0) {
#line 2984
            if ((stack_reg & 0x7) != 5) {
#line 2984
              while (1) {
#line 2984
                tmp___121 = jit->ip;
#line 2984
                (jit->ip) ++;
#line 2984
                *tmp___121 = (unsigned char )((((dreg & 0x7) & 0x07) << 3) | ((stack_reg & 0x7) & 0x07));
#line 2984
                break;
              }
#line 2984
              break;
            }
          }
#line 2984
          if ((jit_value )stack_pos >= -128L) {
#line 2984
            if ((jit_value )stack_pos <= 127L) {
#line 2984
              while (1) {
#line 2984
                tmp___122 = jit->ip;
#line 2984
                (jit->ip) ++;
#line 2984
                *tmp___122 = (unsigned char )(((1 << 6) | (((dreg & 0x7) & 0x07) << 3)) | ((stack_reg & 0x7) & 0x07));
#line 2984
                break;
              }
#line 2984
              while (1) {
#line 2984
                *(jit->ip) = (unsigned char )(stack_pos & 0xff);
#line 2984
                (jit->ip) ++;
#line 2984
                break;
              }
            } else {
#line 2984
              goto _L___9;
            }
          } else {
            _L___9: /* CIL Label */ 
#line 2984
            while (1) {
#line 2984
              tmp___123 = jit->ip;
#line 2984
              (jit->ip) ++;
#line 2984
              *tmp___123 = (unsigned char )(((2 << 6) | (((dreg & 0x7) & 0x07) << 3)) | ((stack_reg & 0x7) & 0x07));
#line 2984
              break;
            }
#line 2984
            while (1) {
#line 2984
              imb___10.val = stack_pos;
#line 2984
              tmp___124 = jit->ip;
#line 2984
              (jit->ip) ++;
#line 2984
              *tmp___124 = imb___10.b[0];
#line 2984
              tmp___125 = jit->ip;
#line 2984
              (jit->ip) ++;
#line 2984
              *tmp___125 = imb___10.b[1];
#line 2984
              tmp___126 = jit->ip;
#line 2984
              (jit->ip) ++;
#line 2984
              *tmp___126 = imb___10.b[2];
#line 2984
              tmp___127 = jit->ip;
#line 2984
              (jit->ip) ++;
#line 2984
              *tmp___127 = imb___10.b[3];
#line 2984
              break;
            }
          }
#line 2984
          break;
        }
#line 2984
        break;
      }
    }
  } else {
#line 2986
    while (1) {
#line 2986
      tmp___128 = jit->ip;
#line 2986
      (jit->ip) ++;
#line 2986
      *tmp___128 = (unsigned char)102;
#line 2986
      while (1) {
#line 2986
        if (dreg > 7) {
#line 2986
          tmp___129 = 4;
        } else {
#line 2986
          tmp___129 = 0;
        }
#line 2986
        if (stack_reg > 7) {
#line 2986
          tmp___130 = 1;
        } else {
#line 2986
          tmp___130 = 0;
        }
#line 2986
        _amd64_rex_bits___4 = (unsigned char )(tmp___129 | tmp___130);
#line 2986
        if ((int )_amd64_rex_bits___4 != 0) {
#line 2986
          tmp___131 = jit->ip;
#line 2986
          (jit->ip) ++;
#line 2986
          *tmp___131 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
        }
#line 2986
        break;
      }
#line 2986
      tmp___132 = jit->ip;
#line 2986
      (jit->ip) ++;
#line 2986
      *tmp___132 = (unsigned char)15;
#line 2986
      tmp___133 = jit->ip;
#line 2986
      (jit->ip) ++;
#line 2986
      *tmp___133 = (unsigned char)18;
#line 2986
      while (1) {
#line 2986
        if (stack_reg == 16) {
#line 2986
          while (1) {
#line 2986
            tmp___134 = jit->ip;
#line 2986
            (jit->ip) ++;
#line 2986
            *tmp___134 = (unsigned char )((((dreg & 0x7) & 0x07) << 3) | 5);
#line 2986
            break;
          }
#line 2986
          while (1) {
#line 2986
            imb___11.val = stack_pos;
#line 2986
            tmp___135 = jit->ip;
#line 2986
            (jit->ip) ++;
#line 2986
            *tmp___135 = imb___11.b[0];
#line 2986
            tmp___136 = jit->ip;
#line 2986
            (jit->ip) ++;
#line 2986
            *tmp___136 = imb___11.b[1];
#line 2986
            tmp___137 = jit->ip;
#line 2986
            (jit->ip) ++;
#line 2986
            *tmp___137 = imb___11.b[2];
#line 2986
            tmp___138 = jit->ip;
#line 2986
            (jit->ip) ++;
#line 2986
            *tmp___138 = imb___11.b[3];
#line 2986
            break;
          }
        } else {
#line 2986
          while (1) {
#line 2986
            if ((stack_reg & 0x7) == 4) {
#line 2986
              if (stack_pos == 0) {
#line 2986
                while (1) {
#line 2986
                  tmp___139 = jit->ip;
#line 2986
                  (jit->ip) ++;
#line 2986
                  *tmp___139 = (unsigned char )((((dreg & 0x7) & 0x07) << 3) | 4);
#line 2986
                  break;
                }
#line 2986
                while (1) {
#line 2986
                  tmp___140 = jit->ip;
#line 2986
                  (jit->ip) ++;
#line 2986
                  *tmp___140 = (unsigned char )((4 << 3) | 4);
#line 2986
                  break;
                }
              } else
#line 2986
              if ((jit_value )stack_pos >= -128L) {
#line 2986
                if ((jit_value )stack_pos <= 127L) {
#line 2986
                  while (1) {
#line 2986
                    tmp___141 = jit->ip;
#line 2986
                    (jit->ip) ++;
#line 2986
                    *tmp___141 = (unsigned char )(((1 << 6) | (((dreg & 0x7) & 0x07) << 3)) | 4);
#line 2986
                    break;
                  }
#line 2986
                  while (1) {
#line 2986
                    tmp___142 = jit->ip;
#line 2986
                    (jit->ip) ++;
#line 2986
                    *tmp___142 = (unsigned char )((4 << 3) | 4);
#line 2986
                    break;
                  }
#line 2986
                  while (1) {
#line 2986
                    *(jit->ip) = (unsigned char )(stack_pos & 0xff);
#line 2986
                    (jit->ip) ++;
#line 2986
                    break;
                  }
                } else {
#line 2986
                  goto _L___10;
                }
              } else {
                _L___10: /* CIL Label */ 
#line 2986
                while (1) {
#line 2986
                  tmp___143 = jit->ip;
#line 2986
                  (jit->ip) ++;
#line 2986
                  *tmp___143 = (unsigned char )(((2 << 6) | (((dreg & 0x7) & 0x07) << 3)) | 4);
#line 2986
                  break;
                }
#line 2986
                while (1) {
#line 2986
                  tmp___144 = jit->ip;
#line 2986
                  (jit->ip) ++;
#line 2986
                  *tmp___144 = (unsigned char )((4 << 3) | 4);
#line 2986
                  break;
                }
#line 2986
                while (1) {
#line 2986
                  imb___12.val = stack_pos;
#line 2986
                  tmp___145 = jit->ip;
#line 2986
                  (jit->ip) ++;
#line 2986
                  *tmp___145 = imb___12.b[0];
#line 2986
                  tmp___146 = jit->ip;
#line 2986
                  (jit->ip) ++;
#line 2986
                  *tmp___146 = imb___12.b[1];
#line 2986
                  tmp___147 = jit->ip;
#line 2986
                  (jit->ip) ++;
#line 2986
                  *tmp___147 = imb___12.b[2];
#line 2986
                  tmp___148 = jit->ip;
#line 2986
                  (jit->ip) ++;
#line 2986
                  *tmp___148 = imb___12.b[3];
#line 2986
                  break;
                }
              }
#line 2986
              break;
            }
#line 2986
            if (stack_pos == 0) {
#line 2986
              if ((stack_reg & 0x7) != 5) {
#line 2986
                while (1) {
#line 2986
                  tmp___149 = jit->ip;
#line 2986
                  (jit->ip) ++;
#line 2986
                  *tmp___149 = (unsigned char )((((dreg & 0x7) & 0x07) << 3) | ((stack_reg & 0x7) & 0x07));
#line 2986
                  break;
                }
#line 2986
                break;
              }
            }
#line 2986
            if ((jit_value )stack_pos >= -128L) {
#line 2986
              if ((jit_value )stack_pos <= 127L) {
#line 2986
                while (1) {
#line 2986
                  tmp___150 = jit->ip;
#line 2986
                  (jit->ip) ++;
#line 2986
                  *tmp___150 = (unsigned char )(((1 << 6) | (((dreg & 0x7) & 0x07) << 3)) | ((stack_reg & 0x7) & 0x07));
#line 2986
                  break;
                }
#line 2986
                while (1) {
#line 2986
                  *(jit->ip) = (unsigned char )(stack_pos & 0xff);
#line 2986
                  (jit->ip) ++;
#line 2986
                  break;
                }
              } else {
#line 2986
                goto _L___11;
              }
            } else {
              _L___11: /* CIL Label */ 
#line 2986
              while (1) {
#line 2986
                tmp___151 = jit->ip;
#line 2986
                (jit->ip) ++;
#line 2986
                *tmp___151 = (unsigned char )(((2 << 6) | (((dreg & 0x7) & 0x07) << 3)) | ((stack_reg & 0x7) & 0x07));
#line 2986
                break;
              }
#line 2986
              while (1) {
#line 2986
                imb___13.val = stack_pos;
#line 2986
                tmp___152 = jit->ip;
#line 2986
                (jit->ip) ++;
#line 2986
                *tmp___152 = imb___13.b[0];
#line 2986
                tmp___153 = jit->ip;
#line 2986
                (jit->ip) ++;
#line 2986
                *tmp___153 = imb___13.b[1];
#line 2986
                tmp___154 = jit->ip;
#line 2986
                (jit->ip) ++;
#line 2986
                *tmp___154 = imb___13.b[2];
#line 2986
                tmp___155 = jit->ip;
#line 2986
                (jit->ip) ++;
#line 2986
                *tmp___155 = imb___13.b[3];
#line 2986
                break;
              }
            }
#line 2986
            break;
          }
        }
#line 2986
        break;
      }
#line 2986
      break;
    }
  }
#line 2988
  return;
}
}
/* END FUNCTION-DEF emit_get_arg_from_stack LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isblank LOC=UNKNOWN */
__inline int isblank(int _c ) 
{ 
  int tmp ;

  {
#line 226 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  tmp = __istype(_c, 131072UL);
#line 226
  return (tmp);
}
}
/* END FUNCTION-DEF isblank LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_set_remove LOC=UNKNOWN */
__inline static void jit_set_remove(jit_set *s , int value ) 
{ 


  {
#line 627 "./jitter-Darwin-X86-64.c"
  s->root = jit_tree_delete(s->root, (jit_tree_key )value, (int *)((void *)0));
#line 628
  return;
}
}
/* END FUNCTION-DEF jit_set_remove LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_args LOC=UNKNOWN */
static void print_args(struct jit_disasm *disasm , struct output_buf *linebuf , jit_op *op ,
                       jit_tree *labels ) 
{ 
  int i ;
  char *tmp ;
  int tmp___0 ;

  {
#line 4425
  i = 1;
#line 4425
  while (i <= 3) {
#line 4426
    if ((((int )op->spec >> (i - 1) * 2) & 0x03) == 0x00) {
#line 4426
      goto __Cont;
    }
#line 4427
    if (i == 1) {
#line 4427
      tmp = " ";
    } else {
#line 4427
      tmp = ", ";
    }
#line 4427
    ob_append(linebuf, tmp);
#line 4428
    if (i == 1) {
#line 4428
      tmp___0 = jit_op_is_cflow(op);
#line 4428
      if (tmp___0) {
#line 4428
        print_addr(disasm, linebuf, labels, op, 0);
      } else {
#line 4429
        print_arg(disasm, linebuf, op, i);
      }
    } else {
#line 4429
      print_arg(disasm, linebuf, op, i);
    }
    __Cont: /* CIL Label */ 
#line 4425
    i ++;
  }
#line 4431
  return;
}
}
/* END FUNCTION-DEF print_args LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF copy_reg_to_array LOC=UNKNOWN */
static void copy_reg_to_array(jit_tree_key key , jit_tree_value value , void *target ) 
{ 
  struct copy_target *t ;

  {
#line 647
  t = (struct copy_target *)target;
#line 648
  *(t->target + t->index) = key;
#line 649
  (t->index) ++;
#line 650
  return;
}
}
/* END FUNCTION-DEF copy_reg_to_array LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF _cipher$_xtea_decipherBlock LOC=UNKNOWN */
void _cipher$_xtea_decipherBlock(unsigned int num_rounds , unsigned int *v , unsigned int *key ) 
{ 
  unsigned int v0 ;
  unsigned int v1 ;
  unsigned int delta ;
  unsigned int sum ;
  unsigned int i ;

  {
  v0 = v[0];
  v1 = v[1];
  delta = 2117564857;
  sum = delta * num_rounds;
  i = 0;
  while (i < num_rounds) {
    v1 -= (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + key[(sum >> 11) & 3]);
    sum -= delta;
    v0 -= (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + key[sum & 3]);
    i ++;
  }
  v[0] = v0;
  v[1] = v1;
}
}
/* END FUNCTION-DEF _cipher$_xtea_decipherBlock LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_tree_free LOC=UNKNOWN */
static void jit_tree_free(jit_tree *h ) 
{ 


  {
#line 564
  if ((unsigned long )h == (unsigned long )((void *)0)) {
#line 564
    return;
  }
#line 565
  jit_tree_free(h->left);
#line 566
  jit_tree_free(h->right);
#line 567
  free((void *)h);
#line 568
  return;
}
}
/* END FUNCTION-DEF jit_tree_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_get LOC=UNKNOWN */
static jit_hw_reg *rmap_get(jit_rmap *rmap , jit_value reg ) 
{ 
  jit_tree *found ;
  jit_tree *tmp ;

  {
#line 1873
  tmp = jit_tree_search(rmap->map, reg);
#line 1873
  found = tmp;
#line 1874
  if (found) {
#line 1874
    return ((jit_hw_reg *)found->value);
  }
#line 1876
  return ((jit_hw_reg *)((void *)0));
}
}
/* END FUNCTION-DEF rmap_get LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF report_warning LOC=UNKNOWN */
static void report_warning(struct jit *jit , jit_op *op , char *desc ) 
{ 


  {
#line 4941
  fprintf((FILE */* __restrict  */)__stdoutp, (char const   */* __restrict  */)"%s at function `%s\' (%s:%i)\n",
          desc, (op->debug_info)->function, (op->debug_info)->filename, (op->debug_info)->lineno);
#line 4942
  print_op(__stdoutp, & jit_debugging_disasm, op, (jit_tree *)((void *)0), 0);
#line 4943
  fprintf((FILE */* __restrict  */)__stdoutp, (char const   */* __restrict  */)"\n");
#line 4944
  return;
}
}
/* END FUNCTION-DEF report_warning LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF associate_register LOC=UNKNOWN */
static void associate_register(struct jit_reg_allocator *al , jit_op *op , int i ) 
{ 
  jit_hw_reg *reg ;
  jit_hw_reg *tmp ;
  jit_hw_reg *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 5458
  tmp = rmap_get(op->regmap, op->arg[i]);
#line 5458
  reg = tmp;
#line 5460
  if (reg) {
#line 5460
    op->r_arg[i] = (jit_value )reg->id;
  } else {
#line 5462
    tmp___2 = is_transfer_op(op);
#line 5462
    if (tmp___2) {
#line 5473
      op->r_arg[i] = (jit_value )-1;
    } else
#line 5462
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) != 416U) {
#line 5467
      reg = make_free_reg(al, op, op->arg[i]);
#line 5468
      rmap_assoc(op->regmap, op->arg[i], reg);
#line 5470
      op->r_arg[i] = (jit_value )reg->id;
#line 5471
      tmp___1 = jit_set_get(op->live_in, (int )op->arg[i]);
#line 5471
      if (tmp___1) {
#line 5472
        tmp___0 = rmap_get(op->regmap, op->arg[i]);
#line 5472
        load_reg(op, tmp___0, op->arg[i]);
      }
    } else {
#line 5473
      op->r_arg[i] = (jit_value )-1;
    }
  }
#line 5475
  return;
}
}
/* END FUNCTION-DEF associate_register LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_reg_allocator_free LOC=UNKNOWN */
void jit_reg_allocator_free(struct jit_reg_allocator *a ) 
{ 


  {
#line 5730
  if (a->fp_regs) {
#line 5730
    free((void *)a->fp_regs);
  }
#line 5731
  free((void *)a->gp_regs);
#line 5732
  if (a->fp_arg_regs) {
#line 5732
    free((void *)a->fp_arg_regs);
  }
#line 5733
  if (a->gp_arg_regs) {
#line 5733
    free((void *)a->gp_arg_regs);
  }
#line 5734
  free((void *)a);
#line 5735
  return;
}
}
/* END FUNCTION-DEF jit_reg_allocator_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_fstx_op LOC=UNKNOWN */
static void emit_sse_fstx_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                             jit_value a3 ) 
{ 
  int live ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___15 ;
  int tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  x86_imm_buf imb ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___61 ;
  int tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___68 ;
  jit_value tmp___69 ;
  int tmp___70 ;
  jit_value tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___98 ;
  int tmp___99 ;
  int tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___116 ;
  unsigned char *tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char *tmp___119 ;

  {
#line 1683
  if ((unsigned long long )op->arg_size == sizeof(float )) {
#line 1689
    tmp = jit_set_get(op->live_out, (int )op->arg[2]);
#line 1689
    live = tmp;
#line 1690
    if (live) {
#line 1690
      while (1) {
#line 1690
        while (1) {
#line 1690
          tmp___0 = jit->ip;
#line 1690
          (jit->ip) ++;
#line 1690
          *tmp___0 = (unsigned char)102;
#line 1690
          while (1) {
#line 1690
            if (a3 > 7L) {
#line 1690
              tmp___1 = 4;
            } else {
#line 1690
              tmp___1 = 0;
            }
#line 1690
            if (a3 > 7L) {
#line 1690
              tmp___2 = 1;
            } else {
#line 1690
              tmp___2 = 0;
            }
#line 1690
            _amd64_rex_bits = (unsigned char )(tmp___1 | tmp___2);
#line 1690
            if ((int )_amd64_rex_bits != 0) {
#line 1690
              tmp___3 = jit->ip;
#line 1690
              (jit->ip) ++;
#line 1690
              *tmp___3 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
            }
#line 1690
            break;
          }
#line 1690
          tmp___4 = jit->ip;
#line 1690
          (jit->ip) ++;
#line 1690
          *tmp___4 = (unsigned char)15;
#line 1690
          tmp___5 = jit->ip;
#line 1690
          (jit->ip) ++;
#line 1690
          *tmp___5 = (unsigned char)198;
#line 1690
          while (1) {
#line 1690
            while (1) {
#line 1690
              tmp___6 = jit->ip;
#line 1690
              (jit->ip) ++;
#line 1690
              *tmp___6 = (unsigned char )(((long )(3 << 6) | ((a3 & 7L) << 3)) | (a3 & 7L));
#line 1690
              break;
            }
#line 1690
            break;
          }
#line 1690
          break;
        }
#line 1690
        while (1) {
#line 1690
          *(jit->ip) = (unsigned char)0;
#line 1690
          (jit->ip) ++;
#line 1690
          break;
        }
#line 1690
        break;
      }
    }
#line 1691
    while (1) {
#line 1691
      tmp___7 = jit->ip;
#line 1691
      (jit->ip) ++;
#line 1691
      *tmp___7 = (unsigned char)242;
#line 1691
      while (1) {
#line 1691
        if (a3 > 7L) {
#line 1691
          tmp___8 = 4;
        } else {
#line 1691
          tmp___8 = 0;
        }
#line 1691
        if (a3 > 7L) {
#line 1691
          tmp___9 = 1;
        } else {
#line 1691
          tmp___9 = 0;
        }
#line 1691
        _amd64_rex_bits___0 = (unsigned char )(tmp___8 | tmp___9);
#line 1691
        if ((int )_amd64_rex_bits___0 != 0) {
#line 1691
          tmp___10 = jit->ip;
#line 1691
          (jit->ip) ++;
#line 1691
          *tmp___10 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
        }
#line 1691
        break;
      }
#line 1691
      tmp___11 = jit->ip;
#line 1691
      (jit->ip) ++;
#line 1691
      *tmp___11 = (unsigned char)15;
#line 1691
      tmp___12 = jit->ip;
#line 1691
      (jit->ip) ++;
#line 1691
      *tmp___12 = (unsigned char)90;
#line 1691
      while (1) {
#line 1691
        while (1) {
#line 1691
          tmp___13 = jit->ip;
#line 1691
          (jit->ip) ++;
#line 1691
          *tmp___13 = (unsigned char )(((long )(3 << 6) | ((a3 & 7L) << 3)) | (a3 & 7L));
#line 1691
          break;
        }
#line 1691
        break;
      }
#line 1691
      break;
    }
#line 1693
    if ((int )op->code & 0x02) {
#line 1693
      while (1) {
#line 1693
        tmp___14 = jit->ip;
#line 1693
        (jit->ip) ++;
#line 1693
        *tmp___14 = (unsigned char)243;
#line 1693
        while (1) {
#line 1693
          if (a3 > 7L) {
#line 1693
            tmp___15 = 4;
          } else {
#line 1693
            tmp___15 = 0;
          }
#line 1693
          if (a2 > 7L) {
#line 1693
            tmp___16 = 1;
          } else {
#line 1693
            tmp___16 = 0;
          }
#line 1693
          _amd64_rex_bits___1 = (unsigned char )(tmp___15 | tmp___16);
#line 1693
          if ((int )_amd64_rex_bits___1 != 0) {
#line 1693
            tmp___17 = jit->ip;
#line 1693
            (jit->ip) ++;
#line 1693
            *tmp___17 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
          }
#line 1693
          break;
        }
#line 1693
        tmp___18 = jit->ip;
#line 1693
        (jit->ip) ++;
#line 1693
        *tmp___18 = (unsigned char)15;
#line 1693
        tmp___19 = jit->ip;
#line 1693
        (jit->ip) ++;
#line 1693
        *tmp___19 = (unsigned char)17;
#line 1693
        while (1) {
#line 1693
          if ((a2 & 7L) == 4L) {
#line 1693
            if (a1 == 0L) {
#line 1693
              while (1) {
#line 1693
                tmp___20 = jit->ip;
#line 1693
                (jit->ip) ++;
#line 1693
                *tmp___20 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 4L);
#line 1693
                break;
              }
#line 1693
              while (1) {
#line 1693
                tmp___21 = jit->ip;
#line 1693
                (jit->ip) ++;
#line 1693
                *tmp___21 = (unsigned char )((4 << 3) | 4);
#line 1693
                break;
              }
            } else
#line 1693
            if (a1 >= -128L) {
#line 1693
              if (a1 <= 127L) {
#line 1693
                while (1) {
#line 1693
                  tmp___22 = jit->ip;
#line 1693
                  (jit->ip) ++;
#line 1693
                  *tmp___22 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
#line 1693
                  break;
                }
#line 1693
                while (1) {
#line 1693
                  tmp___23 = jit->ip;
#line 1693
                  (jit->ip) ++;
#line 1693
                  *tmp___23 = (unsigned char )((4 << 3) | 4);
#line 1693
                  break;
                }
#line 1693
                while (1) {
#line 1693
                  *(jit->ip) = (unsigned char )(a1 & 255L);
#line 1693
                  (jit->ip) ++;
#line 1693
                  break;
                }
              } else {
#line 1693
                goto _L;
              }
            } else {
              _L: /* CIL Label */ 
#line 1693
              while (1) {
#line 1693
                tmp___24 = jit->ip;
#line 1693
                (jit->ip) ++;
#line 1693
                *tmp___24 = (unsigned char )(((long )(2 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
#line 1693
                break;
              }
#line 1693
              while (1) {
#line 1693
                tmp___25 = jit->ip;
#line 1693
                (jit->ip) ++;
#line 1693
                *tmp___25 = (unsigned char )((4 << 3) | 4);
#line 1693
                break;
              }
#line 1693
              while (1) {
#line 1693
                imb.val = (int )a1;
#line 1693
                tmp___26 = jit->ip;
#line 1693
                (jit->ip) ++;
#line 1693
                *tmp___26 = imb.b[0];
#line 1693
                tmp___27 = jit->ip;
#line 1693
                (jit->ip) ++;
#line 1693
                *tmp___27 = imb.b[1];
#line 1693
                tmp___28 = jit->ip;
#line 1693
                (jit->ip) ++;
#line 1693
                *tmp___28 = imb.b[2];
#line 1693
                tmp___29 = jit->ip;
#line 1693
                (jit->ip) ++;
#line 1693
                *tmp___29 = imb.b[3];
#line 1693
                break;
              }
            }
#line 1693
            break;
          }
#line 1693
          if (a1 == 0L) {
#line 1693
            if ((a2 & 7L) != 5L) {
#line 1693
              while (1) {
#line 1693
                tmp___30 = jit->ip;
#line 1693
                (jit->ip) ++;
#line 1693
                *tmp___30 = (unsigned char )((((a3 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 1693
                break;
              }
#line 1693
              break;
            }
          }
#line 1693
          if (a1 >= -128L) {
#line 1693
            if (a1 <= 127L) {
#line 1693
              while (1) {
#line 1693
                tmp___31 = jit->ip;
#line 1693
                (jit->ip) ++;
#line 1693
                *tmp___31 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 1693
                break;
              }
#line 1693
              while (1) {
#line 1693
                *(jit->ip) = (unsigned char )(a1 & 255L);
#line 1693
                (jit->ip) ++;
#line 1693
                break;
              }
            } else {
#line 1693
              goto _L___0;
            }
          } else {
            _L___0: /* CIL Label */ 
#line 1693
            while (1) {
#line 1693
              tmp___32 = jit->ip;
#line 1693
              (jit->ip) ++;
#line 1693
              *tmp___32 = (unsigned char )(((long )(2 << 6) | (((a3 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 1693
              break;
            }
#line 1693
            while (1) {
#line 1693
              imb___0.val = (int )a1;
#line 1693
              tmp___33 = jit->ip;
#line 1693
              (jit->ip) ++;
#line 1693
              *tmp___33 = imb___0.b[0];
#line 1693
              tmp___34 = jit->ip;
#line 1693
              (jit->ip) ++;
#line 1693
              *tmp___34 = imb___0.b[1];
#line 1693
              tmp___35 = jit->ip;
#line 1693
              (jit->ip) ++;
#line 1693
              *tmp___35 = imb___0.b[2];
#line 1693
              tmp___36 = jit->ip;
#line 1693
              (jit->ip) ++;
#line 1693
              *tmp___36 = imb___0.b[3];
#line 1693
              break;
            }
          }
#line 1693
          break;
        }
#line 1693
        break;
      }
    } else {
#line 1694
      while (1) {
#line 1694
        tmp___37 = jit->ip;
#line 1694
        (jit->ip) ++;
#line 1694
        *tmp___37 = (unsigned char)243;
#line 1694
        while (1) {
#line 1694
          if (a3 > 7L) {
#line 1694
            tmp___38 = 4;
          } else {
#line 1694
            tmp___38 = 0;
          }
#line 1694
          if (a2 > 7L) {
#line 1694
            tmp___39 = 2;
          } else {
#line 1694
            tmp___39 = 0;
          }
#line 1694
          if (a1 > 7L) {
#line 1694
            tmp___40 = 1;
          } else {
#line 1694
            tmp___40 = 0;
          }
#line 1694
          _amd64_rex_bits___2 = (unsigned char )(((8 | tmp___38) | tmp___39) | tmp___40);
#line 1694
          if ((int )_amd64_rex_bits___2 != 0) {
#line 1694
            tmp___41 = jit->ip;
#line 1694
            (jit->ip) ++;
#line 1694
            *tmp___41 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
          }
#line 1694
          break;
        }
#line 1694
        tmp___42 = jit->ip;
#line 1694
        (jit->ip) ++;
#line 1694
        *tmp___42 = (unsigned char)15;
#line 1694
        tmp___43 = jit->ip;
#line 1694
        (jit->ip) ++;
#line 1694
        *tmp___43 = (unsigned char)17;
#line 1694
        while (1) {
#line 1694
          if (a1 == -1L) {
#line 1694
            while (1) {
#line 1694
              tmp___44 = jit->ip;
#line 1694
              (jit->ip) ++;
#line 1694
              *tmp___44 = (unsigned char )(((a3 & 7L) << 3) | 4L);
#line 1694
              break;
            }
#line 1694
            while (1) {
#line 1694
              tmp___45 = jit->ip;
#line 1694
              (jit->ip) ++;
#line 1694
              *tmp___45 = (unsigned char )(((a2 & 7L) << 3) | 5L);
#line 1694
              break;
            }
#line 1694
            while (1) {
#line 1694
              imb___1.val = 0;
#line 1694
              tmp___46 = jit->ip;
#line 1694
              (jit->ip) ++;
#line 1694
              *tmp___46 = imb___1.b[0];
#line 1694
              tmp___47 = jit->ip;
#line 1694
              (jit->ip) ++;
#line 1694
              *tmp___47 = imb___1.b[1];
#line 1694
              tmp___48 = jit->ip;
#line 1694
              (jit->ip) ++;
#line 1694
              *tmp___48 = imb___1.b[2];
#line 1694
              tmp___49 = jit->ip;
#line 1694
              (jit->ip) ++;
#line 1694
              *tmp___49 = imb___1.b[3];
#line 1694
              break;
            }
          } else
#line 1694
          if (a1 != 5L) {
#line 1694
            while (1) {
#line 1694
              tmp___50 = jit->ip;
#line 1694
              (jit->ip) ++;
#line 1694
              *tmp___50 = (unsigned char )(((a3 & 7L) << 3) | 4L);
#line 1694
              break;
            }
#line 1694
            while (1) {
#line 1694
              tmp___51 = jit->ip;
#line 1694
              (jit->ip) ++;
#line 1694
              *tmp___51 = (unsigned char )((((a2 & 7L) & 7L) << 3) | ((a1 & 7L) & 7L));
#line 1694
              break;
            }
          } else {
#line 1694
            while (1) {
#line 1694
              tmp___52 = jit->ip;
#line 1694
              (jit->ip) ++;
#line 1694
              *tmp___52 = (unsigned char )(((long )(1 << 6) | ((a3 & 7L) << 3)) | 4L);
#line 1694
              break;
            }
#line 1694
            while (1) {
#line 1694
              tmp___53 = jit->ip;
#line 1694
              (jit->ip) ++;
#line 1694
              *tmp___53 = (unsigned char )((((a2 & 7L) & 7L) << 3) | ((a1 & 7L) & 7L));
#line 1694
              break;
            }
#line 1694
            while (1) {
#line 1694
              *(jit->ip) = (unsigned char)0;
#line 1694
              (jit->ip) ++;
#line 1694
              break;
            }
          }
#line 1694
          break;
        }
#line 1694
        break;
      }
    }
#line 1696
    if (live) {
#line 1696
      while (1) {
#line 1696
        while (1) {
#line 1696
          tmp___60 = jit->ip;
#line 1696
          (jit->ip) ++;
#line 1696
          *tmp___60 = (unsigned char)102;
#line 1696
          while (1) {
#line 1696
            if (a3 > 7L) {
#line 1696
              tmp___61 = 4;
            } else {
#line 1696
              tmp___61 = 0;
            }
#line 1696
            if (a3 > 7L) {
#line 1696
              tmp___62 = 1;
            } else {
#line 1696
              tmp___62 = 0;
            }
#line 1696
            _amd64_rex_bits___3 = (unsigned char )(tmp___61 | tmp___62);
#line 1696
            if ((int )_amd64_rex_bits___3 != 0) {
#line 1696
              tmp___63 = jit->ip;
#line 1696
              (jit->ip) ++;
#line 1696
              *tmp___63 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
            }
#line 1696
            break;
          }
#line 1696
          tmp___64 = jit->ip;
#line 1696
          (jit->ip) ++;
#line 1696
          *tmp___64 = (unsigned char)15;
#line 1696
          tmp___65 = jit->ip;
#line 1696
          (jit->ip) ++;
#line 1696
          *tmp___65 = (unsigned char)198;
#line 1696
          while (1) {
#line 1696
            while (1) {
#line 1696
              tmp___66 = jit->ip;
#line 1696
              (jit->ip) ++;
#line 1696
              *tmp___66 = (unsigned char )(((long )(3 << 6) | ((a3 & 7L) << 3)) | (a3 & 7L));
#line 1696
              break;
            }
#line 1696
            break;
          }
#line 1696
          break;
        }
#line 1696
        while (1) {
#line 1696
          *(jit->ip) = (unsigned char)1;
#line 1696
          (jit->ip) ++;
#line 1696
          break;
        }
#line 1696
        break;
      }
    }
  } else
#line 1699
  if ((int )op->code & 0x02) {
#line 1699
    while (1) {
#line 1699
      tmp___67 = jit->ip;
#line 1699
      (jit->ip) ++;
#line 1699
      *tmp___67 = (unsigned char)102;
#line 1699
      while (1) {
#line 1699
        if (a3 > 7L) {
#line 1699
          tmp___68 = 4;
        } else {
#line 1699
          tmp___68 = 0;
        }
#line 1699
        if (a2 == 16L) {
#line 1699
          tmp___71 = (jit_value )0;
        } else {
#line 1699
          tmp___71 = a2;
        }
#line 1699
        if (tmp___71 > 7L) {
#line 1699
          tmp___70 = 1;
        } else {
#line 1699
          tmp___70 = 0;
        }
#line 1699
        _amd64_rex_bits___4 = (unsigned char )(tmp___68 | tmp___70);
#line 1699
        if ((int )_amd64_rex_bits___4 != 0) {
#line 1699
          tmp___72 = jit->ip;
#line 1699
          (jit->ip) ++;
#line 1699
          *tmp___72 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
        }
#line 1699
        break;
      }
#line 1699
      tmp___73 = jit->ip;
#line 1699
      (jit->ip) ++;
#line 1699
      *tmp___73 = (unsigned char)15;
#line 1699
      tmp___74 = jit->ip;
#line 1699
      (jit->ip) ++;
#line 1699
      *tmp___74 = (unsigned char)19;
#line 1699
      while (1) {
#line 1699
        if (a2 == 16L) {
#line 1699
          while (1) {
#line 1699
            tmp___75 = jit->ip;
#line 1699
            (jit->ip) ++;
#line 1699
            *tmp___75 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
#line 1699
            break;
          }
#line 1699
          while (1) {
#line 1699
            imb___3.val = (int )a1;
#line 1699
            tmp___76 = jit->ip;
#line 1699
            (jit->ip) ++;
#line 1699
            *tmp___76 = imb___3.b[0];
#line 1699
            tmp___77 = jit->ip;
#line 1699
            (jit->ip) ++;
#line 1699
            *tmp___77 = imb___3.b[1];
#line 1699
            tmp___78 = jit->ip;
#line 1699
            (jit->ip) ++;
#line 1699
            *tmp___78 = imb___3.b[2];
#line 1699
            tmp___79 = jit->ip;
#line 1699
            (jit->ip) ++;
#line 1699
            *tmp___79 = imb___3.b[3];
#line 1699
            break;
          }
        } else {
#line 1699
          while (1) {
#line 1699
            if ((a2 & 7L) == 4L) {
#line 1699
              if (a1 == 0L) {
#line 1699
                while (1) {
#line 1699
                  tmp___80 = jit->ip;
#line 1699
                  (jit->ip) ++;
#line 1699
                  *tmp___80 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 4L);
#line 1699
                  break;
                }
#line 1699
                while (1) {
#line 1699
                  tmp___81 = jit->ip;
#line 1699
                  (jit->ip) ++;
#line 1699
                  *tmp___81 = (unsigned char )((4 << 3) | 4);
#line 1699
                  break;
                }
              } else
#line 1699
              if (a1 >= -128L) {
#line 1699
                if (a1 <= 127L) {
#line 1699
                  while (1) {
#line 1699
                    tmp___82 = jit->ip;
#line 1699
                    (jit->ip) ++;
#line 1699
                    *tmp___82 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
#line 1699
                    break;
                  }
#line 1699
                  while (1) {
#line 1699
                    tmp___83 = jit->ip;
#line 1699
                    (jit->ip) ++;
#line 1699
                    *tmp___83 = (unsigned char )((4 << 3) | 4);
#line 1699
                    break;
                  }
#line 1699
                  while (1) {
#line 1699
                    *(jit->ip) = (unsigned char )(a1 & 255L);
#line 1699
                    (jit->ip) ++;
#line 1699
                    break;
                  }
                } else {
#line 1699
                  goto _L___1;
                }
              } else {
                _L___1: /* CIL Label */ 
#line 1699
                while (1) {
#line 1699
                  tmp___84 = jit->ip;
#line 1699
                  (jit->ip) ++;
#line 1699
                  *tmp___84 = (unsigned char )(((long )(2 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
#line 1699
                  break;
                }
#line 1699
                while (1) {
#line 1699
                  tmp___85 = jit->ip;
#line 1699
                  (jit->ip) ++;
#line 1699
                  *tmp___85 = (unsigned char )((4 << 3) | 4);
#line 1699
                  break;
                }
#line 1699
                while (1) {
#line 1699
                  imb___4.val = (int )a1;
#line 1699
                  tmp___86 = jit->ip;
#line 1699
                  (jit->ip) ++;
#line 1699
                  *tmp___86 = imb___4.b[0];
#line 1699
                  tmp___87 = jit->ip;
#line 1699
                  (jit->ip) ++;
#line 1699
                  *tmp___87 = imb___4.b[1];
#line 1699
                  tmp___88 = jit->ip;
#line 1699
                  (jit->ip) ++;
#line 1699
                  *tmp___88 = imb___4.b[2];
#line 1699
                  tmp___89 = jit->ip;
#line 1699
                  (jit->ip) ++;
#line 1699
                  *tmp___89 = imb___4.b[3];
#line 1699
                  break;
                }
              }
#line 1699
              break;
            }
#line 1699
            if (a1 == 0L) {
#line 1699
              if ((a2 & 7L) != 5L) {
#line 1699
                while (1) {
#line 1699
                  tmp___90 = jit->ip;
#line 1699
                  (jit->ip) ++;
#line 1699
                  *tmp___90 = (unsigned char )((((a3 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 1699
                  break;
                }
#line 1699
                break;
              }
            }
#line 1699
            if (a1 >= -128L) {
#line 1699
              if (a1 <= 127L) {
#line 1699
                while (1) {
#line 1699
                  tmp___91 = jit->ip;
#line 1699
                  (jit->ip) ++;
#line 1699
                  *tmp___91 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 1699
                  break;
                }
#line 1699
                while (1) {
#line 1699
                  *(jit->ip) = (unsigned char )(a1 & 255L);
#line 1699
                  (jit->ip) ++;
#line 1699
                  break;
                }
              } else {
#line 1699
                goto _L___2;
              }
            } else {
              _L___2: /* CIL Label */ 
#line 1699
              while (1) {
#line 1699
                tmp___92 = jit->ip;
#line 1699
                (jit->ip) ++;
#line 1699
                *tmp___92 = (unsigned char )(((long )(2 << 6) | (((a3 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 1699
                break;
              }
#line 1699
              while (1) {
#line 1699
                imb___5.val = (int )a1;
#line 1699
                tmp___93 = jit->ip;
#line 1699
                (jit->ip) ++;
#line 1699
                *tmp___93 = imb___5.b[0];
#line 1699
                tmp___94 = jit->ip;
#line 1699
                (jit->ip) ++;
#line 1699
                *tmp___94 = imb___5.b[1];
#line 1699
                tmp___95 = jit->ip;
#line 1699
                (jit->ip) ++;
#line 1699
                *tmp___95 = imb___5.b[2];
#line 1699
                tmp___96 = jit->ip;
#line 1699
                (jit->ip) ++;
#line 1699
                *tmp___96 = imb___5.b[3];
#line 1699
                break;
              }
            }
#line 1699
            break;
          }
        }
#line 1699
        break;
      }
#line 1699
      break;
    }
  } else {
#line 1700
    while (1) {
#line 1700
      tmp___97 = jit->ip;
#line 1700
      (jit->ip) ++;
#line 1700
      *tmp___97 = (unsigned char)102;
#line 1700
      while (1) {
#line 1700
        if (a3 > 7L) {
#line 1700
          tmp___98 = 4;
        } else {
#line 1700
          tmp___98 = 0;
        }
#line 1700
        if (a2 > 7L) {
#line 1700
          tmp___99 = 2;
        } else {
#line 1700
          tmp___99 = 0;
        }
#line 1700
        if (a1 > 7L) {
#line 1700
          tmp___100 = 1;
        } else {
#line 1700
          tmp___100 = 0;
        }
#line 1700
        _amd64_rex_bits___5 = (unsigned char )(((8 | tmp___98) | tmp___99) | tmp___100);
#line 1700
        if ((int )_amd64_rex_bits___5 != 0) {
#line 1700
          tmp___101 = jit->ip;
#line 1700
          (jit->ip) ++;
#line 1700
          *tmp___101 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
        }
#line 1700
        break;
      }
#line 1700
      tmp___102 = jit->ip;
#line 1700
      (jit->ip) ++;
#line 1700
      *tmp___102 = (unsigned char)15;
#line 1700
      tmp___103 = jit->ip;
#line 1700
      (jit->ip) ++;
#line 1700
      *tmp___103 = (unsigned char)19;
#line 1700
      while (1) {
#line 1700
        if (a1 == -1L) {
#line 1700
          while (1) {
#line 1700
            tmp___104 = jit->ip;
#line 1700
            (jit->ip) ++;
#line 1700
            *tmp___104 = (unsigned char )(((a3 & 7L) << 3) | 4L);
#line 1700
            break;
          }
#line 1700
          while (1) {
#line 1700
            tmp___105 = jit->ip;
#line 1700
            (jit->ip) ++;
#line 1700
            *tmp___105 = (unsigned char )(((a2 & 7L) << 3) | 5L);
#line 1700
            break;
          }
#line 1700
          while (1) {
#line 1700
            imb___6.val = 0;
#line 1700
            tmp___106 = jit->ip;
#line 1700
            (jit->ip) ++;
#line 1700
            *tmp___106 = imb___6.b[0];
#line 1700
            tmp___107 = jit->ip;
#line 1700
            (jit->ip) ++;
#line 1700
            *tmp___107 = imb___6.b[1];
#line 1700
            tmp___108 = jit->ip;
#line 1700
            (jit->ip) ++;
#line 1700
            *tmp___108 = imb___6.b[2];
#line 1700
            tmp___109 = jit->ip;
#line 1700
            (jit->ip) ++;
#line 1700
            *tmp___109 = imb___6.b[3];
#line 1700
            break;
          }
        } else
#line 1700
        if (a1 != 5L) {
#line 1700
          while (1) {
#line 1700
            tmp___110 = jit->ip;
#line 1700
            (jit->ip) ++;
#line 1700
            *tmp___110 = (unsigned char )(((a3 & 7L) << 3) | 4L);
#line 1700
            break;
          }
#line 1700
          while (1) {
#line 1700
            tmp___111 = jit->ip;
#line 1700
            (jit->ip) ++;
#line 1700
            *tmp___111 = (unsigned char )((((a2 & 7L) & 7L) << 3) | ((a1 & 7L) & 7L));
#line 1700
            break;
          }
        } else {
#line 1700
          while (1) {
#line 1700
            tmp___112 = jit->ip;
#line 1700
            (jit->ip) ++;
#line 1700
            *tmp___112 = (unsigned char )(((long )(1 << 6) | ((a3 & 7L) << 3)) | 4L);
#line 1700
            break;
          }
#line 1700
          while (1) {
#line 1700
            tmp___113 = jit->ip;
#line 1700
            (jit->ip) ++;
#line 1700
            *tmp___113 = (unsigned char )((((a2 & 7L) & 7L) << 3) | ((a1 & 7L) & 7L));
#line 1700
            break;
          }
#line 1700
          while (1) {
#line 1700
            *(jit->ip) = (unsigned char)0;
#line 1700
            (jit->ip) ++;
#line 1700
            break;
          }
        }
#line 1700
        break;
      }
#line 1700
      break;
    }
  }
#line 1702
  return;
}
}
/* END FUNCTION-DEF emit_sse_fstx_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_set_to_array LOC=UNKNOWN */
__inline static void jit_set_to_array(jit_set *s , jit_value *dest ) 
{ 
  struct copy_target t ;

  {
#line 655
  t.target = dest;
#line 656
  t.index = 0;
#line 657
  jit_tree_walk(s->root, & copy_reg_to_array, (void *)(& t));
#line 658
  return;
}
}
/* END FUNCTION-DEF jit_set_to_array LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isphonogram LOC=UNKNOWN */
__inline int isphonogram(int _c ) 
{ 
  int tmp ;

  {
#line 331 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  tmp = __istype(_c, 2097152UL);
#line 331
  return (tmp);
}
}
/* END FUNCTION-DEF isphonogram LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_get_unused_reg LOC=UNKNOWN */
jit_hw_reg *jit_get_unused_reg(struct jit_reg_allocator *al , jit_op *op , int fp ) 
{ 
  jit_hw_reg *tmp ;

  {
#line 5779 "./jitter-Darwin-X86-64.c"
  tmp = jit_get_unused_reg_with_index(al, op, fp, 0);
#line 5779
  return (tmp);
}
}
/* END FUNCTION-DEF jit_get_unused_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_add_fop LOC=UNKNOWN */
struct jit_op *jit_add_fop(struct jit *jit , unsigned short code , unsigned char spec ,
                           jit_value arg1 , jit_value arg2 , jit_value arg3 , double flt_imm ,
                           unsigned char arg_size , struct jit_debug_info *debug_info ) 
{ 
  struct jit_op *r ;
  struct jit_op *tmp ;

  {
#line 5799
  tmp = jit_add_op(jit, code, spec, arg1, arg2, arg3, arg_size, debug_info);
#line 5799
  r = tmp;
#line 5800
  r->fp = (unsigned char)1;
#line 5801
  r->flt_imm = flt_imm;
#line 5803
  return (r);
}
}
/* END FUNCTION-DEF jit_add_fop LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_data_bytes LOC=UNKNOWN */
jit_op *jit_data_bytes(struct jit *jit , jit_value count , unsigned char *data ) 
{ 
  jit_op *op ;
  struct jit_op *tmp ;
  unsigned long long tmp___0 ;

  {
#line 287
  tmp = jit_add_op(jit, (unsigned short)1418, (unsigned char)2, count, (jit_value )0,
                   (jit_value )0, (unsigned char)0, (struct jit_debug_info *)((void *)0));
#line 287
  op = tmp;
#line 288
  op->addendum = malloc((size_t )count);
#line 289
  tmp___0 = __builtin_object_size(op->addendum, 0);
#line 289
  __builtin___memcpy_chk(op->addendum, (void const   *)data, (unsigned long long )count,
                         tmp___0);
#line 290
  return (op);
}
}
/* END FUNCTION-DEF jit_data_bytes LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_prepare_spills_on_jmpr_targets LOC=UNKNOWN */
__inline static void jit_prepare_spills_on_jmpr_targets(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  jit_op *newop ;
  struct jit_op *tmp___0 ;

  {
#line 6101
  tmp = jit_op_first(jit->ops);
#line 6101
  op = tmp;
#line 6101
  while ((unsigned long )op != (unsigned long )((void *)0)) {
#line 6102
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1448U) {
#line 6103
      tmp___0 = jit_op_new((unsigned short)50, (unsigned char)0, (jit_value )0, (jit_value )0,
                           (jit_value )0, (unsigned char)0);
#line 6103
      newop = tmp___0;
#line 6104
      jit_op_prepend(op->jmp_addr, newop);
    } else
#line 6102
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1424U) {
#line 6103
      tmp___0 = jit_op_new((unsigned short)50, (unsigned char)0, (jit_value )0, (jit_value )0,
                           (jit_value )0, (unsigned char)0);
#line 6103
      newop = tmp___0;
#line 6104
      jit_op_prepend(op->jmp_addr, newop);
    }
#line 6101
    op = op->next;
  }
#line 6106
  return;
}
}
/* END FUNCTION-DEF jit_prepare_spills_on_jmpr_targets LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_set_size LOC=UNKNOWN */
__inline static int jit_set_size(jit_set *s ) 
{ 
  int tmp ;

  {
#line 637
  tmp = jit_tree_size(s->root);
#line 637
  return (tmp);
}
}
/* END FUNCTION-DEF jit_set_size LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_proc_value LOC=UNKNOWN */
__inline static jit_value jit_proc_value(void (*f)(void) ) 
{ 
  union jit_proc_value_alias alias ;

  {
#line 109
  alias.ptr = f;
#line 110
  return (alias.num);
}
}
/* END FUNCTION-DEF jit_proc_value LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF ob_free LOC=UNKNOWN */
static void ob_free(struct output_buf *ob ) 
{ 


  {
#line 4076
  free((void *)ob->buf);
#line 4077
  free((void *)ob);
#line 4078
  return;
}
}
/* END FUNCTION-DEF ob_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rename_reg LOC=UNKNOWN */
static void rename_reg(jit_op *op , int r1 , int r2 ) 
{ 


  {
#line 5228
  insert_reg_op(40, op, (jit_value )r1, (jit_value )r2);
#line 5229
  return;
}
}
/* END FUNCTION-DEF rename_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF hints_refcount_inc LOC=UNKNOWN */
static void hints_refcount_inc(jit_tree *hints ) 
{ 


  {
#line 5620
  if ((unsigned long )hints == (unsigned long )((void *)0)) {
#line 5620
    return;
  }
#line 5621
  (((struct jit_allocator_hint *)hints->value)->refs) ++;
#line 5622
  hints_refcount_inc(hints->left);
#line 5623
  hints_refcount_inc(hints->right);
#line 5624
  return;
}
}
/* END FUNCTION-DEF hints_refcount_inc LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF ob_new LOC=UNKNOWN */
static struct output_buf *ob_new(void) 
{ 
  struct output_buf *ob ;
  void *tmp ;
  void *tmp___0 ;

  {
#line 4066
  tmp = malloc((size_t )sizeof(struct output_buf ));
#line 4066
  ob = (struct output_buf *)tmp;
#line 4067
  tmp___0 = malloc((size_t )8192);
#line 4067
  ob->buf = (char *)tmp___0;
#line 4068
  ob->capacity = (size_t )8192;
#line 4069
  ob->size = (size_t )0;
#line 4070
  *(ob->buf + 0) = (char )'\000';
#line 4071
  return (ob);
}
}
/* END FUNCTION-DEF ob_new LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF stack_reg_pos LOC=UNKNOWN */
__inline static int stack_reg_pos(struct jit *jit , int r ) 
{ 
  struct jit_func_info *info ;
  struct jit_func_info *tmp ;
  jit_value addr ;
  int arg_id ;
  struct jit_inp_arg *a ;
  struct jit_func_info *tmp___0 ;
  long tmp___1 ;

  {
#line 1830
  tmp = jit_current_func_info(jit);
#line 1830
  info = tmp;
#line 1831
  if (((r >> 1) & 0x03) == 0) {
#line 1833
    addr = info->allocai_mem;
#line 1834
    if ((r & 0x01) == 0) {
#line 1835
      return ((int )(- (addr + (jit_value )((((r >> 4) & 0xfffffff) + 1) * (int )sizeof(void *)))));
    } else {
#line 1837
      return ((int )(- (addr + (jit_value )(((info->gp_reg_count + ((r >> 4) & 0xfffffff)) + 1) * (int )sizeof(void *)))));
    }
  }
#line 1840
  if (((r >> 1) & 0x03) == 3) {
#line 1841
    arg_id = (r >> 4) & 0xfffffff;
#line 1842
    tmp___0 = jit_current_func_info(jit);
#line 1842
    a = tmp___0->args + arg_id;
#line 1843
    return (a->spill_pos);
  }
#line 1845
  tmp___1 = __builtin_expect(1L, 0L);
#line 1845
  if (tmp___1) {
#line 1845
    __assert_rtn((char const   *)"stack_reg_pos", (char const   *)"./jitter-Darwin-X86-64.c",
                 1845, (char const   *)"0");
  }
#line 1846
  return (0);
}
}
/* END FUNCTION-DEF stack_reg_pos LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF flw_analyze_op LOC=UNKNOWN */
__inline static int flw_analyze_op(struct jit *jit , jit_op *op , struct jit_func_info *func_info ,
                                   int changed , struct code_refs_cache *code_refs ) 
{ 
  int live_out_size ;
  int tmp ;
  int live_in_size ;
  int tmp___0 ;
  int i ;
  int i___0 ;
  int i___1 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 3886
  tmp = jit_set_size(op->live_out);
#line 3886
  live_out_size = tmp;
#line 3887
  tmp___0 = jit_set_size(op->live_in);
#line 3887
  live_in_size = tmp___0;
#line 3889
  if (op->jmp_addr) {
#line 3889
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) != 1448U) {
#line 3889
      if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) != 1424U) {
#line 3890
        jit_set_addall(op->live_out, (op->jmp_addr)->live_in);
      }
    }
  }
#line 3892
  if ((int )op->code == 385) {
#line 3894
    if (code_refs->size < 0) {
#line 3894
      initialize_code_refs(code_refs, func_info);
    }
#line 3895
    i = 0;
#line 3895
    while (i < code_refs->size) {
#line 3896
      jit_set_addall(op->live_out, ((*(code_refs->ops + i))->jmp_addr)->live_in);
#line 3895
      i ++;
    }
#line 3899
    goto skip;
  }
#line 3902
  if ((int )op->code == 386) {
#line 3902
    goto skip;
  }
#line 3904
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 424U) {
#line 3905
    op->live_out = jit_set_new();
#line 3906
    goto skip;
  } else
#line 3904
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1320U) {
#line 3905
    op->live_out = jit_set_new();
#line 3906
    goto skip;
  }
#line 3910
  if (op->next) {
#line 3910
    jit_set_addall(op->live_out, (op->next)->live_in);
  }
  skip: 
#line 3914
  jit_set_addall(op->live_in, op->live_out);
#line 3916
  i___0 = 0;
#line 3916
  while (i___0 < 3) {
#line 3917
    if ((((int )op->spec >> ((i___0 + 1) - 1) * 2) & 0x03) == 0x03) {
#line 3917
      jit_set_remove(op->live_in, (int )op->arg[i___0]);
    }
#line 3916
    i___0 ++;
  }
#line 3919
  i___1 = 0;
#line 3919
  while (i___1 < 3) {
#line 3920
    if ((((int )op->spec >> ((i___1 + 1) - 1) * 2) & 0x03) == 0x01) {
#line 3920
      jit_set_add(op->live_in, (int )op->arg[i___1]);
    }
#line 3919
    i___1 ++;
  }
#line 3922
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 128U) {
#line 3922
    flw_analyze_prolog(jit, op, func_info);
  }
#line 3924
  if (changed) {
#line 3924
    return (changed);
  }
#line 3925
  tmp___1 = jit_set_size(op->live_out);
#line 3925
  if (live_out_size != tmp___1) {
#line 3925
    return (1);
  }
#line 3926
  tmp___2 = jit_set_size(op->live_in);
#line 3926
  if (live_in_size != tmp___2) {
#line 3926
    return (1);
  }
#line 3928
  return (0);
}
}
/* END FUNCTION-DEF flw_analyze_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_get_label LOC=UNKNOWN */
jit_label *jit_get_label(struct jit *jit ) 
{ 
  jit_label *r ;
  void *tmp ;

  {
#line 5851
  tmp = malloc((size_t )sizeof(jit_label ));
#line 5851
  r = (jit_label *)tmp;
#line 5852
  jit_add_op(jit, (unsigned short)136, (unsigned char)2, (jit_value )r, (jit_value )0,
             (jit_value )0, (unsigned char)0, (struct jit_debug_info *)((void *)0));
#line 5853
  r->next = jit->labels;
#line 5854
  jit->labels = r;
#line 5855
  return (r);
}
}
/* END FUNCTION-DEF jit_get_label LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF valid_fsize LOC=UNKNOWN */
static int valid_fsize(int size ) 
{ 
  int tmp ;

  {
#line 5056
  if (size == 4) {
#line 5056
    tmp = 1;
  } else
#line 5056
  if (size == 8) {
#line 5056
    tmp = 1;
  } else {
#line 5056
    tmp = 0;
  }
#line 5056
  return (tmp);
}
}
/* END FUNCTION-DEF valid_fsize LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF color_flip LOC=UNKNOWN */
__inline static void color_flip(jit_tree *h ) 
{ 


  {
#line 373
  h->color = ! h->color;
#line 374
  (h->left)->color = ! (h->left)->color;
#line 375
  (h->right)->color = ! (h->right)->color;
#line 376
  return;
}
}
/* END FUNCTION-DEF color_flip LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF node_min LOC=UNKNOWN */
__inline static jit_tree_key node_min(jit_tree *x ) 
{ 
  jit_tree_key tmp ;

  {
#line 465
  if ((unsigned long )x->left == (unsigned long )((void *)0)) {
#line 465
    return (x->key);
  } else {
#line 466
    tmp = node_min(x->left);
#line 466
    return (tmp);
  }
}
}
/* END FUNCTION-DEF node_min LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_op_delete LOC=UNKNOWN */
__inline static void jit_op_delete(jit_op *op ) 
{ 


  {
#line 896
  (op->prev)->next = op->next;
#line 897
  if (op->next) {
#line 897
    (op->next)->prev = op->prev;
  }
#line 898
  jit_free_op(op);
#line 899
  return;
}
}
/* END FUNCTION-DEF jit_op_delete LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_reg_in_use LOC=UNKNOWN */
int jit_reg_in_use(jit_op *op , int reg , int fp ) 
{ 
  jit_value virt_reg ;
  jit_hw_reg *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 5743
  tmp = rmap_is_associated(op->regmap, reg, fp, & virt_reg);
#line 5743
  if (tmp) {
#line 5743
    tmp___0 = jit_set_get(op->live_in, (int )virt_reg);
#line 5743
    if (tmp___0) {
#line 5744
      return (1);
    } else {
#line 5743
      tmp___1 = jit_set_get(op->live_out, (int )virt_reg);
#line 5743
      if (tmp___1) {
#line 5744
        return (1);
      } else {
#line 5745
        return (0);
      }
    }
  } else {
#line 5745
    return (0);
  }
}
}
/* END FUNCTION-DEF jit_reg_in_use LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_tree_walk LOC=UNKNOWN */
static void jit_tree_walk(jit_tree *h , void (*func)(jit_tree_key key , jit_tree_value value ,
                                                     void *thunk ) , void *thunk ) 
{ 


  {
#line 545
  if (! h) {
#line 545
    return;
  }
#line 546
  jit_tree_walk(h->left, func, thunk);
#line 547
  (*func)(h->key, h->value, thunk);
#line 548
  jit_tree_walk(h->right, func, thunk);
#line 549
  return;
}
}
/* END FUNCTION-DEF jit_tree_walk LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF join_muli_addr LOC=UNKNOWN */
static int join_muli_addr(jit_op *op , jit_op *nextop ) 
{ 
  int tmp ;
  jit_value add_reg ;
  jit_value tmp___0 ;
  int tmp___1 ;

  {
#line 2265
  tmp = is_suitable_mul(op);
#line 2265
  if (tmp) {
#line 2265
    if (nextop->arg[1] == nextop->arg[2]) {
#line 2265
      return (0);
    }
  } else {
#line 2265
    return (0);
  }
#line 2267
  if (nextop->arg[1] == op->arg[0]) {
#line 2267
    tmp___0 = nextop->arg[2];
  } else {
#line 2267
    tmp___0 = nextop->arg[1];
  }
#line 2267
  add_reg = tmp___0;
#line 2269
  nextop->code = (unsigned short)2065;
#line 2270
  nextop->spec = (unsigned char )(((0x01 << 4) | (0x01 << 2)) | 0x03);
#line 2272
  nextop->arg[1] = add_reg;
#line 2273
  nextop->arg[2] = op->arg[1];
#line 2274
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 576U) {
#line 2274
    tmp___1 = shift_index((int )op->arg[2]);
#line 2274
    nextop->arg_size = (unsigned char )tmp___1;
  } else {
#line 2274
    nextop->arg_size = (unsigned char )op->arg[2];
  }
#line 2276
  make_nop(op);
#line 2277
  return (1);
}
}
/* END FUNCTION-DEF join_muli_addr LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_exec_mem_free LOC=UNKNOWN */
static void jit_exec_mem_free(struct jit_exec_mem *mem ) 
{ 


  {
#line 315
  munmap(mem->data, mem->size);
#line 316
  free((void *)mem);
#line 317
  return;
}
}
/* END FUNCTION-DEF jit_exec_mem_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_change_sign LOC=UNKNOWN */
static void emit_sse_change_sign(struct jit *jit , jit_op *op , int reg ) 
{ 
  unsigned char *tmp ;

  {
#line 1524
  tmp = emit_sse_get_sign_mask();
#line 1524
  sse_alu_pd_reg_safeimm(jit, op, 87, reg, (double *)tmp);
#line 1525
  return;
}
}
/* END FUNCTION-DEF emit_sse_change_sign LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_add_op LOC=UNKNOWN */
struct jit_op *jit_add_op(struct jit *jit , unsigned short code , unsigned char spec ,
                          jit_value arg1 , jit_value arg2 , jit_value arg3 , unsigned char arg_size ,
                          struct jit_debug_info *debug_info ) 
{ 
  struct jit_op *r ;
  struct jit_op *tmp ;

  {
#line 5789
  tmp = jit_op_new(code, spec, arg1, arg2, arg3, arg_size);
#line 5789
  r = tmp;
#line 5790
  r->debug_info = debug_info;
#line 5791
  jit_op_append(jit->last_op, r);
#line 5792
  jit->last_op = r;
#line 5794
  return (r);
}
}
/* END FUNCTION-DEF jit_add_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_ldx_op LOC=UNKNOWN */
static void emit_ldx_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                        jit_value a3 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  long tmp___6 ;
  unsigned char *tmp___7 ;
  x86_imm_buf imb ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  unsigned char *tmp___33 ;
  int tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  long tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___55 ;
  int tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___76 ;
  int tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  long tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___101 ;
  int tmp___102 ;
  int tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  long tmp___107 ;
  unsigned char *tmp___108 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  unsigned char *tmp___116 ;
  unsigned char *tmp___117 ;
  unsigned char *tmp___118 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___119 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  unsigned char *tmp___122 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  unsigned char *tmp___125 ;
  x86_imm_buf imb___10 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char *tmp___128 ;
  unsigned char *tmp___129 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___130 ;
  int tmp___131 ;
  unsigned char *tmp___132 ;
  unsigned char *tmp___133 ;
  unsigned char *tmp___134 ;
  unsigned char *tmp___135 ;
  long tmp___136 ;
  unsigned char *tmp___137 ;
  unsigned char *tmp___138 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  unsigned char *tmp___141 ;
  unsigned char *tmp___142 ;
  x86_imm_buf imb___11 ;
  unsigned char *tmp___143 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  unsigned char *tmp___146 ;
  unsigned char *tmp___147 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;
  x86_imm_buf imb___12 ;
  unsigned char *tmp___150 ;
  unsigned char *tmp___151 ;
  unsigned char *tmp___152 ;
  unsigned char *tmp___153 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___154 ;
  int tmp___155 ;
  int tmp___156 ;
  unsigned char *tmp___157 ;
  unsigned char *tmp___158 ;
  unsigned char *tmp___159 ;
  unsigned char *tmp___160 ;
  x86_imm_buf imb___13 ;
  unsigned char *tmp___161 ;
  unsigned char *tmp___162 ;
  unsigned char *tmp___163 ;
  unsigned char *tmp___164 ;
  unsigned char *tmp___165 ;
  unsigned char *tmp___166 ;
  unsigned char *tmp___167 ;
  unsigned char *tmp___168 ;
  unsigned char *tmp___169 ;
  unsigned char *tmp___170 ;
  x86_imm_buf imb___14 ;
  unsigned char *tmp___171 ;
  unsigned char *tmp___172 ;
  unsigned char *tmp___173 ;
  unsigned char *tmp___174 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___175 ;
  int tmp___176 ;
  int tmp___177 ;
  unsigned char *tmp___178 ;
  unsigned char *tmp___179 ;
  unsigned char *tmp___180 ;
  unsigned char *tmp___181 ;
  long tmp___182 ;
  unsigned char *tmp___183 ;
  unsigned char *tmp___184 ;
  x86_imm_buf imb___15 ;
  unsigned char *tmp___185 ;
  unsigned char *tmp___186 ;
  unsigned char *tmp___187 ;
  unsigned char *tmp___188 ;
  unsigned char *tmp___189 ;
  unsigned char *tmp___190 ;
  unsigned char *tmp___191 ;
  unsigned char *tmp___192 ;
  unsigned char *tmp___193 ;
  unsigned char *tmp___194 ;
  x86_imm_buf imb___16 ;
  unsigned char *tmp___195 ;
  unsigned char *tmp___196 ;
  unsigned char *tmp___197 ;
  unsigned char *tmp___198 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___199 ;
  int tmp___200 ;
  int tmp___201 ;
  int tmp___202 ;
  unsigned char *tmp___203 ;
  int tmp___204 ;
  unsigned char *tmp___205 ;
  unsigned char *tmp___206 ;
  unsigned char *tmp___207 ;
  long tmp___208 ;
  unsigned char *tmp___209 ;
  unsigned char *tmp___210 ;
  x86_imm_buf imb___17 ;
  unsigned char *tmp___211 ;
  unsigned char *tmp___212 ;
  unsigned char *tmp___213 ;
  unsigned char *tmp___214 ;
  unsigned char *tmp___215 ;
  unsigned char *tmp___216 ;
  unsigned char *tmp___217 ;
  unsigned char *tmp___218 ;
  unsigned char *tmp___219 ;
  unsigned char *tmp___220 ;
  x86_imm_buf imb___18 ;
  unsigned char *tmp___221 ;
  unsigned char *tmp___222 ;
  unsigned char *tmp___223 ;
  unsigned char *tmp___224 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___225 ;
  int tmp___226 ;
  int tmp___227 ;
  unsigned char *tmp___228 ;
  unsigned char *tmp___229 ;
  unsigned char *tmp___230 ;
  unsigned char *tmp___231 ;
  long tmp___232 ;
  unsigned char *tmp___233 ;
  unsigned char *tmp___234 ;
  x86_imm_buf imb___19 ;
  unsigned char *tmp___235 ;
  unsigned char *tmp___236 ;
  unsigned char *tmp___237 ;
  unsigned char *tmp___238 ;
  unsigned char *tmp___239 ;
  unsigned char *tmp___240 ;
  unsigned char *tmp___241 ;
  unsigned char *tmp___242 ;
  unsigned char *tmp___243 ;
  unsigned char *tmp___244 ;
  x86_imm_buf imb___20 ;
  unsigned char *tmp___245 ;
  unsigned char *tmp___246 ;
  unsigned char *tmp___247 ;
  unsigned char *tmp___248 ;
  long tmp___249 ;

  {
#line 3384
  if ((int )op->arg_size == (int )sizeof(void *)) {
#line 3385
    if ((int )op->code & 0x02) {
#line 3385
      while (1) {
#line 3385
        if ((int )op->arg_size == 2) {
#line 3385
          tmp = jit->ip;
#line 3385
          (jit->ip) ++;
#line 3385
          *tmp = (unsigned char)102;
        }
#line 3385
        while (1) {
#line 3385
          if ((int )op->arg_size > 4) {
#line 3385
            tmp___0 = 8;
          } else {
#line 3385
            tmp___0 = 0;
          }
#line 3385
          if (a1 > 7L) {
#line 3385
            tmp___1 = 4;
          } else {
#line 3385
            tmp___1 = 0;
          }
#line 3385
          if (a2 > 7L) {
#line 3385
            tmp___2 = 1;
          } else {
#line 3385
            tmp___2 = 0;
          }
#line 3385
          _amd64_rex_bits = (unsigned char )((tmp___0 | tmp___1) | tmp___2);
#line 3385
          if ((int )_amd64_rex_bits != 0) {
#line 3385
            tmp___3 = jit->ip;
#line 3385
            (jit->ip) ++;
#line 3385
            *tmp___3 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          } else
#line 3385
          if ((int )op->arg_size == 1) {
#line 3385
            tmp___3 = jit->ip;
#line 3385
            (jit->ip) ++;
#line 3385
            *tmp___3 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
          }
#line 3385
          break;
        }
#line 3385
        switch ((int )op->arg_size) {
        case 1: 
#line 3385
        tmp___4 = jit->ip;
#line 3385
        (jit->ip) ++;
#line 3385
        *tmp___4 = (unsigned char)138;
#line 3385
        break;
        case 8: 
        case 4: 
        case 2: 
#line 3385
        tmp___5 = jit->ip;
#line 3385
        (jit->ip) ++;
#line 3385
        *tmp___5 = (unsigned char)139;
#line 3385
        break;
        default: 
#line 3385
        tmp___6 = __builtin_expect(1L, 0L);
#line 3385
        if (tmp___6) {
#line 3385
          __assert_rtn((char const   *)"emit_ldx_op", (char const   *)"./jitter-Darwin-X86-64.c",
                       3385, (char const   *)"0");
        }
        }
#line 3385
        while (1) {
#line 3385
          if (a2 == 16L) {
#line 3385
            while (1) {
#line 3385
              tmp___7 = jit->ip;
#line 3385
              (jit->ip) ++;
#line 3385
              *tmp___7 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
#line 3385
              break;
            }
#line 3385
            while (1) {
#line 3385
              imb.val = (int )a3;
#line 3385
              tmp___8 = jit->ip;
#line 3385
              (jit->ip) ++;
#line 3385
              *tmp___8 = imb.b[0];
#line 3385
              tmp___9 = jit->ip;
#line 3385
              (jit->ip) ++;
#line 3385
              *tmp___9 = imb.b[1];
#line 3385
              tmp___10 = jit->ip;
#line 3385
              (jit->ip) ++;
#line 3385
              *tmp___10 = imb.b[2];
#line 3385
              tmp___11 = jit->ip;
#line 3385
              (jit->ip) ++;
#line 3385
              *tmp___11 = imb.b[3];
#line 3385
              break;
            }
          } else {
#line 3385
            while (1) {
#line 3385
              if ((a2 & 7L) == 4L) {
#line 3385
                if (a3 == 0L) {
#line 3385
                  while (1) {
#line 3385
                    tmp___12 = jit->ip;
#line 3385
                    (jit->ip) ++;
#line 3385
                    *tmp___12 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3385
                    break;
                  }
#line 3385
                  while (1) {
#line 3385
                    tmp___13 = jit->ip;
#line 3385
                    (jit->ip) ++;
#line 3385
                    *tmp___13 = (unsigned char )((4 << 3) | 4);
#line 3385
                    break;
                  }
                } else
#line 3385
                if (a3 >= -128L) {
#line 3385
                  if (a3 <= 127L) {
#line 3385
                    while (1) {
#line 3385
                      tmp___14 = jit->ip;
#line 3385
                      (jit->ip) ++;
#line 3385
                      *tmp___14 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3385
                      break;
                    }
#line 3385
                    while (1) {
#line 3385
                      tmp___15 = jit->ip;
#line 3385
                      (jit->ip) ++;
#line 3385
                      *tmp___15 = (unsigned char )((4 << 3) | 4);
#line 3385
                      break;
                    }
#line 3385
                    while (1) {
#line 3385
                      *(jit->ip) = (unsigned char )(a3 & 255L);
#line 3385
                      (jit->ip) ++;
#line 3385
                      break;
                    }
                  } else {
#line 3385
                    goto _L;
                  }
                } else {
                  _L: /* CIL Label */ 
#line 3385
                  while (1) {
#line 3385
                    tmp___16 = jit->ip;
#line 3385
                    (jit->ip) ++;
#line 3385
                    *tmp___16 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3385
                    break;
                  }
#line 3385
                  while (1) {
#line 3385
                    tmp___17 = jit->ip;
#line 3385
                    (jit->ip) ++;
#line 3385
                    *tmp___17 = (unsigned char )((4 << 3) | 4);
#line 3385
                    break;
                  }
#line 3385
                  while (1) {
#line 3385
                    imb___0.val = (int )a3;
#line 3385
                    tmp___18 = jit->ip;
#line 3385
                    (jit->ip) ++;
#line 3385
                    *tmp___18 = imb___0.b[0];
#line 3385
                    tmp___19 = jit->ip;
#line 3385
                    (jit->ip) ++;
#line 3385
                    *tmp___19 = imb___0.b[1];
#line 3385
                    tmp___20 = jit->ip;
#line 3385
                    (jit->ip) ++;
#line 3385
                    *tmp___20 = imb___0.b[2];
#line 3385
                    tmp___21 = jit->ip;
#line 3385
                    (jit->ip) ++;
#line 3385
                    *tmp___21 = imb___0.b[3];
#line 3385
                    break;
                  }
                }
#line 3385
                break;
              }
#line 3385
              if (a3 == 0L) {
#line 3385
                if ((a2 & 7L) != 5L) {
#line 3385
                  while (1) {
#line 3385
                    tmp___22 = jit->ip;
#line 3385
                    (jit->ip) ++;
#line 3385
                    *tmp___22 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 3385
                    break;
                  }
#line 3385
                  break;
                }
              }
#line 3385
              if (a3 >= -128L) {
#line 3385
                if (a3 <= 127L) {
#line 3385
                  while (1) {
#line 3385
                    tmp___23 = jit->ip;
#line 3385
                    (jit->ip) ++;
#line 3385
                    *tmp___23 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 3385
                    break;
                  }
#line 3385
                  while (1) {
#line 3385
                    *(jit->ip) = (unsigned char )(a3 & 255L);
#line 3385
                    (jit->ip) ++;
#line 3385
                    break;
                  }
                } else {
#line 3385
                  goto _L___0;
                }
              } else {
                _L___0: /* CIL Label */ 
#line 3385
                while (1) {
#line 3385
                  tmp___24 = jit->ip;
#line 3385
                  (jit->ip) ++;
#line 3385
                  *tmp___24 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 3385
                  break;
                }
#line 3385
                while (1) {
#line 3385
                  imb___1.val = (int )a3;
#line 3385
                  tmp___25 = jit->ip;
#line 3385
                  (jit->ip) ++;
#line 3385
                  *tmp___25 = imb___1.b[0];
#line 3385
                  tmp___26 = jit->ip;
#line 3385
                  (jit->ip) ++;
#line 3385
                  *tmp___26 = imb___1.b[1];
#line 3385
                  tmp___27 = jit->ip;
#line 3385
                  (jit->ip) ++;
#line 3385
                  *tmp___27 = imb___1.b[2];
#line 3385
                  tmp___28 = jit->ip;
#line 3385
                  (jit->ip) ++;
#line 3385
                  *tmp___28 = imb___1.b[3];
#line 3385
                  break;
                }
              }
#line 3385
              break;
            }
          }
#line 3385
          break;
        }
#line 3385
        break;
      }
    } else {
#line 3386
      while (1) {
#line 3386
        while (1) {
#line 3386
          if ((int )op->arg_size > 4) {
#line 3386
            tmp___29 = 8;
          } else {
#line 3386
            tmp___29 = 0;
          }
#line 3386
          if (a1 > 7L) {
#line 3386
            tmp___30 = 4;
          } else {
#line 3386
            tmp___30 = 0;
          }
#line 3386
          if (a3 > 7L) {
#line 3386
            tmp___31 = 2;
          } else {
#line 3386
            tmp___31 = 0;
          }
#line 3386
          if (a2 > 7L) {
#line 3386
            tmp___32 = 1;
          } else {
#line 3386
            tmp___32 = 0;
          }
#line 3386
          _amd64_rex_bits___0 = (unsigned char )(((tmp___29 | tmp___30) | tmp___31) | tmp___32);
#line 3386
          if ((int )_amd64_rex_bits___0 != 0) {
#line 3386
            tmp___33 = jit->ip;
#line 3386
            (jit->ip) ++;
#line 3386
            *tmp___33 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
          } else
#line 3386
          if ((int )op->arg_size == 1) {
#line 3386
            tmp___33 = jit->ip;
#line 3386
            (jit->ip) ++;
#line 3386
            *tmp___33 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
          }
#line 3386
          break;
        }
#line 3386
        while (1) {
#line 3386
          if ((int )op->arg_size == 8) {
#line 3386
            tmp___34 = 4;
          } else {
#line 3386
            tmp___34 = (int )op->arg_size;
          }
#line 3386
          switch (tmp___34) {
          case 1: 
#line 3386
          tmp___35 = jit->ip;
#line 3386
          (jit->ip) ++;
#line 3386
          *tmp___35 = (unsigned char)138;
#line 3386
          break;
          case 2: 
#line 3386
          tmp___36 = jit->ip;
#line 3386
          (jit->ip) ++;
#line 3386
          *tmp___36 = (unsigned char)102;
          case 4: 
#line 3386
          tmp___37 = jit->ip;
#line 3386
          (jit->ip) ++;
#line 3386
          *tmp___37 = (unsigned char)139;
#line 3386
          break;
          default: 
#line 3386
          tmp___38 = __builtin_expect(1L, 0L);
#line 3386
          if (tmp___38) {
#line 3386
            __assert_rtn((char const   *)"emit_ldx_op", (char const   *)"./jitter-Darwin-X86-64.c",
                         3386, (char const   *)"0");
          }
          }
#line 3386
          while (1) {
#line 3386
            if ((a2 & 7L) == -1L) {
#line 3386
              while (1) {
#line 3386
                tmp___39 = jit->ip;
#line 3386
                (jit->ip) ++;
#line 3386
                *tmp___39 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3386
                break;
              }
#line 3386
              while (1) {
#line 3386
                tmp___40 = jit->ip;
#line 3386
                (jit->ip) ++;
#line 3386
                *tmp___40 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
#line 3386
                break;
              }
#line 3386
              while (1) {
#line 3386
                imb___2.val = 0;
#line 3386
                tmp___41 = jit->ip;
#line 3386
                (jit->ip) ++;
#line 3386
                *tmp___41 = imb___2.b[0];
#line 3386
                tmp___42 = jit->ip;
#line 3386
                (jit->ip) ++;
#line 3386
                *tmp___42 = imb___2.b[1];
#line 3386
                tmp___43 = jit->ip;
#line 3386
                (jit->ip) ++;
#line 3386
                *tmp___43 = imb___2.b[2];
#line 3386
                tmp___44 = jit->ip;
#line 3386
                (jit->ip) ++;
#line 3386
                *tmp___44 = imb___2.b[3];
#line 3386
                break;
              }
            } else
#line 3386
            if ((a2 & 7L) != 5L) {
#line 3386
              while (1) {
#line 3386
                tmp___45 = jit->ip;
#line 3386
                (jit->ip) ++;
#line 3386
                *tmp___45 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3386
                break;
              }
#line 3386
              while (1) {
#line 3386
                tmp___46 = jit->ip;
#line 3386
                (jit->ip) ++;
#line 3386
                *tmp___46 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
#line 3386
                break;
              }
            } else {
#line 3386
              while (1) {
#line 3386
                tmp___47 = jit->ip;
#line 3386
                (jit->ip) ++;
#line 3386
                *tmp___47 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3386
                break;
              }
#line 3386
              while (1) {
#line 3386
                tmp___48 = jit->ip;
#line 3386
                (jit->ip) ++;
#line 3386
                *tmp___48 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
#line 3386
                break;
              }
#line 3386
              while (1) {
#line 3386
                *(jit->ip) = (unsigned char)0;
#line 3386
                (jit->ip) ++;
#line 3386
                break;
              }
            }
#line 3386
            break;
          }
#line 3386
          break;
        }
#line 3386
        break;
      }
    }
#line 3387
    return;
  }
#line 3390
  switch ((int )op->code) {
  case 274: 
#line 3391
  while (1) {
#line 3391
    if ((int )op->arg_size == 4) {
#line 3391
      while (1) {
#line 3391
        while (1) {
#line 3391
          if (a1 > 7L) {
#line 3391
            tmp___55 = 4;
          } else {
#line 3391
            tmp___55 = 0;
          }
#line 3391
          if (a2 > 7L) {
#line 3391
            tmp___56 = 1;
          } else {
#line 3391
            tmp___56 = 0;
          }
#line 3391
          _amd64_rex_bits___1 = (unsigned char )((8 | tmp___55) | tmp___56);
#line 3391
          if ((int )_amd64_rex_bits___1 != 0) {
#line 3391
            tmp___57 = jit->ip;
#line 3391
            (jit->ip) ++;
#line 3391
            *tmp___57 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
          }
#line 3391
          break;
        }
#line 3391
        tmp___58 = jit->ip;
#line 3391
        (jit->ip) ++;
#line 3391
        *tmp___58 = (unsigned char)99;
#line 3391
        while (1) {
#line 3391
          if ((a2 & 7L) == 4L) {
#line 3391
            if (a3 == 0L) {
#line 3391
              while (1) {
#line 3391
                tmp___59 = jit->ip;
#line 3391
                (jit->ip) ++;
#line 3391
                *tmp___59 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3391
                break;
              }
#line 3391
              while (1) {
#line 3391
                tmp___60 = jit->ip;
#line 3391
                (jit->ip) ++;
#line 3391
                *tmp___60 = (unsigned char )((4 << 3) | 4);
#line 3391
                break;
              }
            } else
#line 3391
            if (a3 >= -128L) {
#line 3391
              if (a3 <= 127L) {
#line 3391
                while (1) {
#line 3391
                  tmp___61 = jit->ip;
#line 3391
                  (jit->ip) ++;
#line 3391
                  *tmp___61 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3391
                  break;
                }
#line 3391
                while (1) {
#line 3391
                  tmp___62 = jit->ip;
#line 3391
                  (jit->ip) ++;
#line 3391
                  *tmp___62 = (unsigned char )((4 << 3) | 4);
#line 3391
                  break;
                }
#line 3391
                while (1) {
#line 3391
                  *(jit->ip) = (unsigned char )(a3 & 255L);
#line 3391
                  (jit->ip) ++;
#line 3391
                  break;
                }
              } else {
#line 3391
                goto _L___1;
              }
            } else {
              _L___1: /* CIL Label */ 
#line 3391
              while (1) {
#line 3391
                tmp___63 = jit->ip;
#line 3391
                (jit->ip) ++;
#line 3391
                *tmp___63 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3391
                break;
              }
#line 3391
              while (1) {
#line 3391
                tmp___64 = jit->ip;
#line 3391
                (jit->ip) ++;
#line 3391
                *tmp___64 = (unsigned char )((4 << 3) | 4);
#line 3391
                break;
              }
#line 3391
              while (1) {
#line 3391
                imb___4.val = (int )a3;
#line 3391
                tmp___65 = jit->ip;
#line 3391
                (jit->ip) ++;
#line 3391
                *tmp___65 = imb___4.b[0];
#line 3391
                tmp___66 = jit->ip;
#line 3391
                (jit->ip) ++;
#line 3391
                *tmp___66 = imb___4.b[1];
#line 3391
                tmp___67 = jit->ip;
#line 3391
                (jit->ip) ++;
#line 3391
                *tmp___67 = imb___4.b[2];
#line 3391
                tmp___68 = jit->ip;
#line 3391
                (jit->ip) ++;
#line 3391
                *tmp___68 = imb___4.b[3];
#line 3391
                break;
              }
            }
#line 3391
            break;
          }
#line 3391
          if (a3 == 0L) {
#line 3391
            if ((a2 & 7L) != 5L) {
#line 3391
              while (1) {
#line 3391
                tmp___69 = jit->ip;
#line 3391
                (jit->ip) ++;
#line 3391
                *tmp___69 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 3391
                break;
              }
#line 3391
              break;
            }
          }
#line 3391
          if (a3 >= -128L) {
#line 3391
            if (a3 <= 127L) {
#line 3391
              while (1) {
#line 3391
                tmp___70 = jit->ip;
#line 3391
                (jit->ip) ++;
#line 3391
                *tmp___70 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 3391
                break;
              }
#line 3391
              while (1) {
#line 3391
                *(jit->ip) = (unsigned char )(a3 & 255L);
#line 3391
                (jit->ip) ++;
#line 3391
                break;
              }
            } else {
#line 3391
              goto _L___2;
            }
          } else {
            _L___2: /* CIL Label */ 
#line 3391
            while (1) {
#line 3391
              tmp___71 = jit->ip;
#line 3391
              (jit->ip) ++;
#line 3391
              *tmp___71 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 3391
              break;
            }
#line 3391
            while (1) {
#line 3391
              imb___5.val = (int )a3;
#line 3391
              tmp___72 = jit->ip;
#line 3391
              (jit->ip) ++;
#line 3391
              *tmp___72 = imb___5.b[0];
#line 3391
              tmp___73 = jit->ip;
#line 3391
              (jit->ip) ++;
#line 3391
              *tmp___73 = imb___5.b[1];
#line 3391
              tmp___74 = jit->ip;
#line 3391
              (jit->ip) ++;
#line 3391
              *tmp___74 = imb___5.b[2];
#line 3391
              tmp___75 = jit->ip;
#line 3391
              (jit->ip) ++;
#line 3391
              *tmp___75 = imb___5.b[3];
#line 3391
              break;
            }
          }
#line 3391
          break;
        }
#line 3391
        break;
      }
#line 3391
      break;
    }
#line 3391
    while (1) {
#line 3391
      if (a1 > 7L) {
#line 3391
        tmp___76 = 4;
      } else {
#line 3391
        tmp___76 = 0;
      }
#line 3391
      if (a2 > 7L) {
#line 3391
        tmp___77 = 1;
      } else {
#line 3391
        tmp___77 = 0;
      }
#line 3391
      _amd64_rex_bits___2 = (unsigned char )((8 | tmp___76) | tmp___77);
#line 3391
      if ((int )_amd64_rex_bits___2 != 0) {
#line 3391
        tmp___78 = jit->ip;
#line 3391
        (jit->ip) ++;
#line 3391
        *tmp___78 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
      }
#line 3391
      break;
    }
#line 3391
    tmp___79 = jit->ip;
#line 3391
    (jit->ip) ++;
#line 3391
    *tmp___79 = (unsigned char)15;
#line 3391
    switch ((int )op->arg_size) {
    case 1: 
#line 3391
    tmp___80 = jit->ip;
#line 3391
    (jit->ip) ++;
#line 3391
    *tmp___80 = (unsigned char)190;
#line 3391
    break;
    case 2: 
#line 3391
    tmp___81 = jit->ip;
#line 3391
    (jit->ip) ++;
#line 3391
    *tmp___81 = (unsigned char)191;
#line 3391
    break;
    default: 
#line 3391
    tmp___82 = __builtin_expect(1L, 0L);
#line 3391
    if (tmp___82) {
#line 3391
      __assert_rtn((char const   *)"emit_ldx_op", (char const   *)"./jitter-Darwin-X86-64.c",
                   3391, (char const   *)"0");
    }
    }
#line 3391
    while (1) {
#line 3391
      if ((a2 & 7L) == 4L) {
#line 3391
        if (a3 == 0L) {
#line 3391
          while (1) {
#line 3391
            tmp___83 = jit->ip;
#line 3391
            (jit->ip) ++;
#line 3391
            *tmp___83 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3391
            break;
          }
#line 3391
          while (1) {
#line 3391
            tmp___84 = jit->ip;
#line 3391
            (jit->ip) ++;
#line 3391
            *tmp___84 = (unsigned char )((4 << 3) | 4);
#line 3391
            break;
          }
        } else
#line 3391
        if (a3 >= -128L) {
#line 3391
          if (a3 <= 127L) {
#line 3391
            while (1) {
#line 3391
              tmp___85 = jit->ip;
#line 3391
              (jit->ip) ++;
#line 3391
              *tmp___85 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3391
              break;
            }
#line 3391
            while (1) {
#line 3391
              tmp___86 = jit->ip;
#line 3391
              (jit->ip) ++;
#line 3391
              *tmp___86 = (unsigned char )((4 << 3) | 4);
#line 3391
              break;
            }
#line 3391
            while (1) {
#line 3391
              *(jit->ip) = (unsigned char )(a3 & 255L);
#line 3391
              (jit->ip) ++;
#line 3391
              break;
            }
          } else {
#line 3391
            goto _L___3;
          }
        } else {
          _L___3: /* CIL Label */ 
#line 3391
          while (1) {
#line 3391
            tmp___87 = jit->ip;
#line 3391
            (jit->ip) ++;
#line 3391
            *tmp___87 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3391
            break;
          }
#line 3391
          while (1) {
#line 3391
            tmp___88 = jit->ip;
#line 3391
            (jit->ip) ++;
#line 3391
            *tmp___88 = (unsigned char )((4 << 3) | 4);
#line 3391
            break;
          }
#line 3391
          while (1) {
#line 3391
            imb___6.val = (int )a3;
#line 3391
            tmp___89 = jit->ip;
#line 3391
            (jit->ip) ++;
#line 3391
            *tmp___89 = imb___6.b[0];
#line 3391
            tmp___90 = jit->ip;
#line 3391
            (jit->ip) ++;
#line 3391
            *tmp___90 = imb___6.b[1];
#line 3391
            tmp___91 = jit->ip;
#line 3391
            (jit->ip) ++;
#line 3391
            *tmp___91 = imb___6.b[2];
#line 3391
            tmp___92 = jit->ip;
#line 3391
            (jit->ip) ++;
#line 3391
            *tmp___92 = imb___6.b[3];
#line 3391
            break;
          }
        }
#line 3391
        break;
      }
#line 3391
      if (a3 == 0L) {
#line 3391
        if ((a2 & 7L) != 5L) {
#line 3391
          while (1) {
#line 3391
            tmp___93 = jit->ip;
#line 3391
            (jit->ip) ++;
#line 3391
            *tmp___93 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 3391
            break;
          }
#line 3391
          break;
        }
      }
#line 3391
      if (a3 >= -128L) {
#line 3391
        if (a3 <= 127L) {
#line 3391
          while (1) {
#line 3391
            tmp___94 = jit->ip;
#line 3391
            (jit->ip) ++;
#line 3391
            *tmp___94 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 3391
            break;
          }
#line 3391
          while (1) {
#line 3391
            *(jit->ip) = (unsigned char )(a3 & 255L);
#line 3391
            (jit->ip) ++;
#line 3391
            break;
          }
        } else {
#line 3391
          goto _L___4;
        }
      } else {
        _L___4: /* CIL Label */ 
#line 3391
        while (1) {
#line 3391
          tmp___95 = jit->ip;
#line 3391
          (jit->ip) ++;
#line 3391
          *tmp___95 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 3391
          break;
        }
#line 3391
        while (1) {
#line 3391
          imb___7.val = (int )a3;
#line 3391
          tmp___96 = jit->ip;
#line 3391
          (jit->ip) ++;
#line 3391
          *tmp___96 = imb___7.b[0];
#line 3391
          tmp___97 = jit->ip;
#line 3391
          (jit->ip) ++;
#line 3391
          *tmp___97 = imb___7.b[1];
#line 3391
          tmp___98 = jit->ip;
#line 3391
          (jit->ip) ++;
#line 3391
          *tmp___98 = imb___7.b[2];
#line 3391
          tmp___99 = jit->ip;
#line 3391
          (jit->ip) ++;
#line 3391
          *tmp___99 = imb___7.b[3];
#line 3391
          break;
        }
      }
#line 3391
      break;
    }
#line 3391
    break;
  }
#line 3391
  break;
  case 278: 
#line 3392
  while (1) {
#line 3392
    if ((int )op->arg_size == 8) {
#line 3392
      goto _L___7;
    } else
#line 3392
    if ((int )op->arg_size == 4) {
      _L___7: /* CIL Label */ 
#line 3392
      while (1) {
#line 3392
        if ((int )op->arg_size == 2) {
#line 3392
          tmp___100 = jit->ip;
#line 3392
          (jit->ip) ++;
#line 3392
          *tmp___100 = (unsigned char)102;
        }
#line 3392
        while (1) {
#line 3392
          if ((int )op->arg_size > 4) {
#line 3392
            tmp___101 = 8;
          } else {
#line 3392
            tmp___101 = 0;
          }
#line 3392
          if (a1 > 7L) {
#line 3392
            tmp___102 = 4;
          } else {
#line 3392
            tmp___102 = 0;
          }
#line 3392
          if (a2 > 7L) {
#line 3392
            tmp___103 = 1;
          } else {
#line 3392
            tmp___103 = 0;
          }
#line 3392
          _amd64_rex_bits___3 = (unsigned char )((tmp___101 | tmp___102) | tmp___103);
#line 3392
          if ((int )_amd64_rex_bits___3 != 0) {
#line 3392
            tmp___104 = jit->ip;
#line 3392
            (jit->ip) ++;
#line 3392
            *tmp___104 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
          } else
#line 3392
          if ((int )op->arg_size == 1) {
#line 3392
            tmp___104 = jit->ip;
#line 3392
            (jit->ip) ++;
#line 3392
            *tmp___104 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
          }
#line 3392
          break;
        }
#line 3392
        switch ((int )op->arg_size) {
        case 1: 
#line 3392
        tmp___105 = jit->ip;
#line 3392
        (jit->ip) ++;
#line 3392
        *tmp___105 = (unsigned char)138;
#line 3392
        break;
        case 8: 
        case 4: 
        case 2: 
#line 3392
        tmp___106 = jit->ip;
#line 3392
        (jit->ip) ++;
#line 3392
        *tmp___106 = (unsigned char)139;
#line 3392
        break;
        default: 
#line 3392
        tmp___107 = __builtin_expect(1L, 0L);
#line 3392
        if (tmp___107) {
#line 3392
          __assert_rtn((char const   *)"emit_ldx_op", (char const   *)"./jitter-Darwin-X86-64.c",
                       3392, (char const   *)"0");
        }
        }
#line 3392
        while (1) {
#line 3392
          if (a2 == 16L) {
#line 3392
            while (1) {
#line 3392
              tmp___108 = jit->ip;
#line 3392
              (jit->ip) ++;
#line 3392
              *tmp___108 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
#line 3392
              break;
            }
#line 3392
            while (1) {
#line 3392
              imb___8.val = (int )a3;
#line 3392
              tmp___109 = jit->ip;
#line 3392
              (jit->ip) ++;
#line 3392
              *tmp___109 = imb___8.b[0];
#line 3392
              tmp___110 = jit->ip;
#line 3392
              (jit->ip) ++;
#line 3392
              *tmp___110 = imb___8.b[1];
#line 3392
              tmp___111 = jit->ip;
#line 3392
              (jit->ip) ++;
#line 3392
              *tmp___111 = imb___8.b[2];
#line 3392
              tmp___112 = jit->ip;
#line 3392
              (jit->ip) ++;
#line 3392
              *tmp___112 = imb___8.b[3];
#line 3392
              break;
            }
          } else {
#line 3392
            while (1) {
#line 3392
              if ((a2 & 7L) == 4L) {
#line 3392
                if (a3 == 0L) {
#line 3392
                  while (1) {
#line 3392
                    tmp___113 = jit->ip;
#line 3392
                    (jit->ip) ++;
#line 3392
                    *tmp___113 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3392
                    break;
                  }
#line 3392
                  while (1) {
#line 3392
                    tmp___114 = jit->ip;
#line 3392
                    (jit->ip) ++;
#line 3392
                    *tmp___114 = (unsigned char )((4 << 3) | 4);
#line 3392
                    break;
                  }
                } else
#line 3392
                if (a3 >= -128L) {
#line 3392
                  if (a3 <= 127L) {
#line 3392
                    while (1) {
#line 3392
                      tmp___115 = jit->ip;
#line 3392
                      (jit->ip) ++;
#line 3392
                      *tmp___115 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3392
                      break;
                    }
#line 3392
                    while (1) {
#line 3392
                      tmp___116 = jit->ip;
#line 3392
                      (jit->ip) ++;
#line 3392
                      *tmp___116 = (unsigned char )((4 << 3) | 4);
#line 3392
                      break;
                    }
#line 3392
                    while (1) {
#line 3392
                      *(jit->ip) = (unsigned char )(a3 & 255L);
#line 3392
                      (jit->ip) ++;
#line 3392
                      break;
                    }
                  } else {
#line 3392
                    goto _L___5;
                  }
                } else {
                  _L___5: /* CIL Label */ 
#line 3392
                  while (1) {
#line 3392
                    tmp___117 = jit->ip;
#line 3392
                    (jit->ip) ++;
#line 3392
                    *tmp___117 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3392
                    break;
                  }
#line 3392
                  while (1) {
#line 3392
                    tmp___118 = jit->ip;
#line 3392
                    (jit->ip) ++;
#line 3392
                    *tmp___118 = (unsigned char )((4 << 3) | 4);
#line 3392
                    break;
                  }
#line 3392
                  while (1) {
#line 3392
                    imb___9.val = (int )a3;
#line 3392
                    tmp___119 = jit->ip;
#line 3392
                    (jit->ip) ++;
#line 3392
                    *tmp___119 = imb___9.b[0];
#line 3392
                    tmp___120 = jit->ip;
#line 3392
                    (jit->ip) ++;
#line 3392
                    *tmp___120 = imb___9.b[1];
#line 3392
                    tmp___121 = jit->ip;
#line 3392
                    (jit->ip) ++;
#line 3392
                    *tmp___121 = imb___9.b[2];
#line 3392
                    tmp___122 = jit->ip;
#line 3392
                    (jit->ip) ++;
#line 3392
                    *tmp___122 = imb___9.b[3];
#line 3392
                    break;
                  }
                }
#line 3392
                break;
              }
#line 3392
              if (a3 == 0L) {
#line 3392
                if ((a2 & 7L) != 5L) {
#line 3392
                  while (1) {
#line 3392
                    tmp___123 = jit->ip;
#line 3392
                    (jit->ip) ++;
#line 3392
                    *tmp___123 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 3392
                    break;
                  }
#line 3392
                  break;
                }
              }
#line 3392
              if (a3 >= -128L) {
#line 3392
                if (a3 <= 127L) {
#line 3392
                  while (1) {
#line 3392
                    tmp___124 = jit->ip;
#line 3392
                    (jit->ip) ++;
#line 3392
                    *tmp___124 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 3392
                    break;
                  }
#line 3392
                  while (1) {
#line 3392
                    *(jit->ip) = (unsigned char )(a3 & 255L);
#line 3392
                    (jit->ip) ++;
#line 3392
                    break;
                  }
                } else {
#line 3392
                  goto _L___6;
                }
              } else {
                _L___6: /* CIL Label */ 
#line 3392
                while (1) {
#line 3392
                  tmp___125 = jit->ip;
#line 3392
                  (jit->ip) ++;
#line 3392
                  *tmp___125 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 3392
                  break;
                }
#line 3392
                while (1) {
#line 3392
                  imb___10.val = (int )a3;
#line 3392
                  tmp___126 = jit->ip;
#line 3392
                  (jit->ip) ++;
#line 3392
                  *tmp___126 = imb___10.b[0];
#line 3392
                  tmp___127 = jit->ip;
#line 3392
                  (jit->ip) ++;
#line 3392
                  *tmp___127 = imb___10.b[1];
#line 3392
                  tmp___128 = jit->ip;
#line 3392
                  (jit->ip) ++;
#line 3392
                  *tmp___128 = imb___10.b[2];
#line 3392
                  tmp___129 = jit->ip;
#line 3392
                  (jit->ip) ++;
#line 3392
                  *tmp___129 = imb___10.b[3];
#line 3392
                  break;
                }
              }
#line 3392
              break;
            }
          }
#line 3392
          break;
        }
#line 3392
        break;
      }
#line 3392
      break;
    }
#line 3392
    while (1) {
#line 3392
      if (a1 > 7L) {
#line 3392
        tmp___130 = 4;
      } else {
#line 3392
        tmp___130 = 0;
      }
#line 3392
      if (a2 > 7L) {
#line 3392
        tmp___131 = 1;
      } else {
#line 3392
        tmp___131 = 0;
      }
#line 3392
      _amd64_rex_bits___4 = (unsigned char )((8 | tmp___130) | tmp___131);
#line 3392
      if ((int )_amd64_rex_bits___4 != 0) {
#line 3392
        tmp___132 = jit->ip;
#line 3392
        (jit->ip) ++;
#line 3392
        *tmp___132 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
      }
#line 3392
      break;
    }
#line 3392
    tmp___133 = jit->ip;
#line 3392
    (jit->ip) ++;
#line 3392
    *tmp___133 = (unsigned char)15;
#line 3392
    switch ((int )op->arg_size) {
    case 1: 
#line 3392
    tmp___134 = jit->ip;
#line 3392
    (jit->ip) ++;
#line 3392
    *tmp___134 = (unsigned char)182;
#line 3392
    break;
    case 2: 
#line 3392
    tmp___135 = jit->ip;
#line 3392
    (jit->ip) ++;
#line 3392
    *tmp___135 = (unsigned char)183;
#line 3392
    break;
    default: 
#line 3392
    tmp___136 = __builtin_expect(1L, 0L);
#line 3392
    if (tmp___136) {
#line 3392
      __assert_rtn((char const   *)"emit_ldx_op", (char const   *)"./jitter-Darwin-X86-64.c",
                   3392, (char const   *)"0");
    }
    }
#line 3392
    while (1) {
#line 3392
      if ((a2 & 7L) == 4L) {
#line 3392
        if (a3 == 0L) {
#line 3392
          while (1) {
#line 3392
            tmp___137 = jit->ip;
#line 3392
            (jit->ip) ++;
#line 3392
            *tmp___137 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3392
            break;
          }
#line 3392
          while (1) {
#line 3392
            tmp___138 = jit->ip;
#line 3392
            (jit->ip) ++;
#line 3392
            *tmp___138 = (unsigned char )((4 << 3) | 4);
#line 3392
            break;
          }
        } else
#line 3392
        if (a3 >= -128L) {
#line 3392
          if (a3 <= 127L) {
#line 3392
            while (1) {
#line 3392
              tmp___139 = jit->ip;
#line 3392
              (jit->ip) ++;
#line 3392
              *tmp___139 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3392
              break;
            }
#line 3392
            while (1) {
#line 3392
              tmp___140 = jit->ip;
#line 3392
              (jit->ip) ++;
#line 3392
              *tmp___140 = (unsigned char )((4 << 3) | 4);
#line 3392
              break;
            }
#line 3392
            while (1) {
#line 3392
              *(jit->ip) = (unsigned char )(a3 & 255L);
#line 3392
              (jit->ip) ++;
#line 3392
              break;
            }
          } else {
#line 3392
            goto _L___8;
          }
        } else {
          _L___8: /* CIL Label */ 
#line 3392
          while (1) {
#line 3392
            tmp___141 = jit->ip;
#line 3392
            (jit->ip) ++;
#line 3392
            *tmp___141 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3392
            break;
          }
#line 3392
          while (1) {
#line 3392
            tmp___142 = jit->ip;
#line 3392
            (jit->ip) ++;
#line 3392
            *tmp___142 = (unsigned char )((4 << 3) | 4);
#line 3392
            break;
          }
#line 3392
          while (1) {
#line 3392
            imb___11.val = (int )a3;
#line 3392
            tmp___143 = jit->ip;
#line 3392
            (jit->ip) ++;
#line 3392
            *tmp___143 = imb___11.b[0];
#line 3392
            tmp___144 = jit->ip;
#line 3392
            (jit->ip) ++;
#line 3392
            *tmp___144 = imb___11.b[1];
#line 3392
            tmp___145 = jit->ip;
#line 3392
            (jit->ip) ++;
#line 3392
            *tmp___145 = imb___11.b[2];
#line 3392
            tmp___146 = jit->ip;
#line 3392
            (jit->ip) ++;
#line 3392
            *tmp___146 = imb___11.b[3];
#line 3392
            break;
          }
        }
#line 3392
        break;
      }
#line 3392
      if (a3 == 0L) {
#line 3392
        if ((a2 & 7L) != 5L) {
#line 3392
          while (1) {
#line 3392
            tmp___147 = jit->ip;
#line 3392
            (jit->ip) ++;
#line 3392
            *tmp___147 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
#line 3392
            break;
          }
#line 3392
          break;
        }
      }
#line 3392
      if (a3 >= -128L) {
#line 3392
        if (a3 <= 127L) {
#line 3392
          while (1) {
#line 3392
            tmp___148 = jit->ip;
#line 3392
            (jit->ip) ++;
#line 3392
            *tmp___148 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 3392
            break;
          }
#line 3392
          while (1) {
#line 3392
            *(jit->ip) = (unsigned char )(a3 & 255L);
#line 3392
            (jit->ip) ++;
#line 3392
            break;
          }
        } else {
#line 3392
          goto _L___9;
        }
      } else {
        _L___9: /* CIL Label */ 
#line 3392
        while (1) {
#line 3392
          tmp___149 = jit->ip;
#line 3392
          (jit->ip) ++;
#line 3392
          *tmp___149 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
#line 3392
          break;
        }
#line 3392
        while (1) {
#line 3392
          imb___12.val = (int )a3;
#line 3392
          tmp___150 = jit->ip;
#line 3392
          (jit->ip) ++;
#line 3392
          *tmp___150 = imb___12.b[0];
#line 3392
          tmp___151 = jit->ip;
#line 3392
          (jit->ip) ++;
#line 3392
          *tmp___151 = imb___12.b[1];
#line 3392
          tmp___152 = jit->ip;
#line 3392
          (jit->ip) ++;
#line 3392
          *tmp___152 = imb___12.b[2];
#line 3392
          tmp___153 = jit->ip;
#line 3392
          (jit->ip) ++;
#line 3392
          *tmp___153 = imb___12.b[3];
#line 3392
          break;
        }
      }
#line 3392
      break;
    }
#line 3392
    break;
  }
#line 3392
  break;
  case 273: 
#line 3393
  while (1) {
#line 3393
    if ((int )op->arg_size == 4) {
#line 3393
      while (1) {
#line 3393
        while (1) {
#line 3393
          if (a1 > 7L) {
#line 3393
            tmp___154 = 4;
          } else {
#line 3393
            tmp___154 = 0;
          }
#line 3393
          if (a3 > 7L) {
#line 3393
            tmp___155 = 2;
          } else {
#line 3393
            tmp___155 = 0;
          }
#line 3393
          if (a2 > 7L) {
#line 3393
            tmp___156 = 1;
          } else {
#line 3393
            tmp___156 = 0;
          }
#line 3393
          _amd64_rex_bits___5 = (unsigned char )(((8 | tmp___154) | tmp___155) | tmp___156);
#line 3393
          if ((int )_amd64_rex_bits___5 != 0) {
#line 3393
            tmp___157 = jit->ip;
#line 3393
            (jit->ip) ++;
#line 3393
            *tmp___157 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
          }
#line 3393
          break;
        }
#line 3393
        tmp___158 = jit->ip;
#line 3393
        (jit->ip) ++;
#line 3393
        *tmp___158 = (unsigned char)99;
#line 3393
        while (1) {
#line 3393
          if ((a2 & 7L) == -1L) {
#line 3393
            while (1) {
#line 3393
              tmp___159 = jit->ip;
#line 3393
              (jit->ip) ++;
#line 3393
              *tmp___159 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3393
              break;
            }
#line 3393
            while (1) {
#line 3393
              tmp___160 = jit->ip;
#line 3393
              (jit->ip) ++;
#line 3393
              *tmp___160 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
#line 3393
              break;
            }
#line 3393
            while (1) {
#line 3393
              imb___13.val = 0;
#line 3393
              tmp___161 = jit->ip;
#line 3393
              (jit->ip) ++;
#line 3393
              *tmp___161 = imb___13.b[0];
#line 3393
              tmp___162 = jit->ip;
#line 3393
              (jit->ip) ++;
#line 3393
              *tmp___162 = imb___13.b[1];
#line 3393
              tmp___163 = jit->ip;
#line 3393
              (jit->ip) ++;
#line 3393
              *tmp___163 = imb___13.b[2];
#line 3393
              tmp___164 = jit->ip;
#line 3393
              (jit->ip) ++;
#line 3393
              *tmp___164 = imb___13.b[3];
#line 3393
              break;
            }
          } else
#line 3393
          if ((a2 & 7L) != 5L) {
#line 3393
            while (1) {
#line 3393
              tmp___165 = jit->ip;
#line 3393
              (jit->ip) ++;
#line 3393
              *tmp___165 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3393
              break;
            }
#line 3393
            while (1) {
#line 3393
              tmp___166 = jit->ip;
#line 3393
              (jit->ip) ++;
#line 3393
              *tmp___166 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
#line 3393
              break;
            }
          } else {
#line 3393
            while (1) {
#line 3393
              tmp___167 = jit->ip;
#line 3393
              (jit->ip) ++;
#line 3393
              *tmp___167 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3393
              break;
            }
#line 3393
            while (1) {
#line 3393
              tmp___168 = jit->ip;
#line 3393
              (jit->ip) ++;
#line 3393
              *tmp___168 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
#line 3393
              break;
            }
#line 3393
            while (1) {
#line 3393
              *(jit->ip) = (unsigned char)0;
#line 3393
              (jit->ip) ++;
#line 3393
              break;
            }
          }
#line 3393
          break;
        }
#line 3393
        break;
      }
#line 3393
      break;
    }
#line 3393
    while (1) {
#line 3393
      if (a1 > 7L) {
#line 3393
        tmp___175 = 4;
      } else {
#line 3393
        tmp___175 = 0;
      }
#line 3393
      if (a3 > 7L) {
#line 3393
        tmp___176 = 2;
      } else {
#line 3393
        tmp___176 = 0;
      }
#line 3393
      if (a2 > 7L) {
#line 3393
        tmp___177 = 1;
      } else {
#line 3393
        tmp___177 = 0;
      }
#line 3393
      _amd64_rex_bits___6 = (unsigned char )(((8 | tmp___175) | tmp___176) | tmp___177);
#line 3393
      if ((int )_amd64_rex_bits___6 != 0) {
#line 3393
        tmp___178 = jit->ip;
#line 3393
        (jit->ip) ++;
#line 3393
        *tmp___178 = (unsigned char )(0x40 | (int )_amd64_rex_bits___6);
      }
#line 3393
      break;
    }
#line 3393
    tmp___179 = jit->ip;
#line 3393
    (jit->ip) ++;
#line 3393
    *tmp___179 = (unsigned char)15;
#line 3393
    switch ((int )op->arg_size) {
    case 1: 
#line 3393
    tmp___180 = jit->ip;
#line 3393
    (jit->ip) ++;
#line 3393
    *tmp___180 = (unsigned char)190;
#line 3393
    break;
    case 2: 
#line 3393
    tmp___181 = jit->ip;
#line 3393
    (jit->ip) ++;
#line 3393
    *tmp___181 = (unsigned char)191;
#line 3393
    break;
    default: 
#line 3393
    tmp___182 = __builtin_expect(1L, 0L);
#line 3393
    if (tmp___182) {
#line 3393
      __assert_rtn((char const   *)"emit_ldx_op", (char const   *)"./jitter-Darwin-X86-64.c",
                   3393, (char const   *)"0");
    }
    }
#line 3393
    while (1) {
#line 3393
      if ((a2 & 7L) == -1L) {
#line 3393
        while (1) {
#line 3393
          tmp___183 = jit->ip;
#line 3393
          (jit->ip) ++;
#line 3393
          *tmp___183 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3393
          break;
        }
#line 3393
        while (1) {
#line 3393
          tmp___184 = jit->ip;
#line 3393
          (jit->ip) ++;
#line 3393
          *tmp___184 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
#line 3393
          break;
        }
#line 3393
        while (1) {
#line 3393
          imb___15.val = 0;
#line 3393
          tmp___185 = jit->ip;
#line 3393
          (jit->ip) ++;
#line 3393
          *tmp___185 = imb___15.b[0];
#line 3393
          tmp___186 = jit->ip;
#line 3393
          (jit->ip) ++;
#line 3393
          *tmp___186 = imb___15.b[1];
#line 3393
          tmp___187 = jit->ip;
#line 3393
          (jit->ip) ++;
#line 3393
          *tmp___187 = imb___15.b[2];
#line 3393
          tmp___188 = jit->ip;
#line 3393
          (jit->ip) ++;
#line 3393
          *tmp___188 = imb___15.b[3];
#line 3393
          break;
        }
      } else
#line 3393
      if ((a2 & 7L) != 5L) {
#line 3393
        while (1) {
#line 3393
          tmp___189 = jit->ip;
#line 3393
          (jit->ip) ++;
#line 3393
          *tmp___189 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3393
          break;
        }
#line 3393
        while (1) {
#line 3393
          tmp___190 = jit->ip;
#line 3393
          (jit->ip) ++;
#line 3393
          *tmp___190 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
#line 3393
          break;
        }
      } else {
#line 3393
        while (1) {
#line 3393
          tmp___191 = jit->ip;
#line 3393
          (jit->ip) ++;
#line 3393
          *tmp___191 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3393
          break;
        }
#line 3393
        while (1) {
#line 3393
          tmp___192 = jit->ip;
#line 3393
          (jit->ip) ++;
#line 3393
          *tmp___192 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
#line 3393
          break;
        }
#line 3393
        while (1) {
#line 3393
          *(jit->ip) = (unsigned char)0;
#line 3393
          (jit->ip) ++;
#line 3393
          break;
        }
      }
#line 3393
      break;
    }
#line 3393
    break;
  }
#line 3393
  break;
  case 277: 
#line 3394
  while (1) {
#line 3394
    if ((int )op->arg_size == 8) {
#line 3394
      goto _L___10;
    } else
#line 3394
    if ((int )op->arg_size == 4) {
      _L___10: /* CIL Label */ 
#line 3394
      while (1) {
#line 3394
        while (1) {
#line 3394
          if ((int )op->arg_size > 4) {
#line 3394
            tmp___199 = 8;
          } else {
#line 3394
            tmp___199 = 0;
          }
#line 3394
          if (a1 > 7L) {
#line 3394
            tmp___200 = 4;
          } else {
#line 3394
            tmp___200 = 0;
          }
#line 3394
          if (a3 > 7L) {
#line 3394
            tmp___201 = 2;
          } else {
#line 3394
            tmp___201 = 0;
          }
#line 3394
          if (a2 > 7L) {
#line 3394
            tmp___202 = 1;
          } else {
#line 3394
            tmp___202 = 0;
          }
#line 3394
          _amd64_rex_bits___7 = (unsigned char )(((tmp___199 | tmp___200) | tmp___201) | tmp___202);
#line 3394
          if ((int )_amd64_rex_bits___7 != 0) {
#line 3394
            tmp___203 = jit->ip;
#line 3394
            (jit->ip) ++;
#line 3394
            *tmp___203 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
          } else
#line 3394
          if ((int )op->arg_size == 1) {
#line 3394
            tmp___203 = jit->ip;
#line 3394
            (jit->ip) ++;
#line 3394
            *tmp___203 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
          }
#line 3394
          break;
        }
#line 3394
        while (1) {
#line 3394
          if ((int )op->arg_size == 8) {
#line 3394
            tmp___204 = 4;
          } else {
#line 3394
            tmp___204 = (int )op->arg_size;
          }
#line 3394
          switch (tmp___204) {
          case 1: 
#line 3394
          tmp___205 = jit->ip;
#line 3394
          (jit->ip) ++;
#line 3394
          *tmp___205 = (unsigned char)138;
#line 3394
          break;
          case 2: 
#line 3394
          tmp___206 = jit->ip;
#line 3394
          (jit->ip) ++;
#line 3394
          *tmp___206 = (unsigned char)102;
          case 4: 
#line 3394
          tmp___207 = jit->ip;
#line 3394
          (jit->ip) ++;
#line 3394
          *tmp___207 = (unsigned char)139;
#line 3394
          break;
          default: 
#line 3394
          tmp___208 = __builtin_expect(1L, 0L);
#line 3394
          if (tmp___208) {
#line 3394
            __assert_rtn((char const   *)"emit_ldx_op", (char const   *)"./jitter-Darwin-X86-64.c",
                         3394, (char const   *)"0");
          }
          }
#line 3394
          while (1) {
#line 3394
            if ((a2 & 7L) == -1L) {
#line 3394
              while (1) {
#line 3394
                tmp___209 = jit->ip;
#line 3394
                (jit->ip) ++;
#line 3394
                *tmp___209 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3394
                break;
              }
#line 3394
              while (1) {
#line 3394
                tmp___210 = jit->ip;
#line 3394
                (jit->ip) ++;
#line 3394
                *tmp___210 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
#line 3394
                break;
              }
#line 3394
              while (1) {
#line 3394
                imb___17.val = 0;
#line 3394
                tmp___211 = jit->ip;
#line 3394
                (jit->ip) ++;
#line 3394
                *tmp___211 = imb___17.b[0];
#line 3394
                tmp___212 = jit->ip;
#line 3394
                (jit->ip) ++;
#line 3394
                *tmp___212 = imb___17.b[1];
#line 3394
                tmp___213 = jit->ip;
#line 3394
                (jit->ip) ++;
#line 3394
                *tmp___213 = imb___17.b[2];
#line 3394
                tmp___214 = jit->ip;
#line 3394
                (jit->ip) ++;
#line 3394
                *tmp___214 = imb___17.b[3];
#line 3394
                break;
              }
            } else
#line 3394
            if ((a2 & 7L) != 5L) {
#line 3394
              while (1) {
#line 3394
                tmp___215 = jit->ip;
#line 3394
                (jit->ip) ++;
#line 3394
                *tmp___215 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3394
                break;
              }
#line 3394
              while (1) {
#line 3394
                tmp___216 = jit->ip;
#line 3394
                (jit->ip) ++;
#line 3394
                *tmp___216 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
#line 3394
                break;
              }
            } else {
#line 3394
              while (1) {
#line 3394
                tmp___217 = jit->ip;
#line 3394
                (jit->ip) ++;
#line 3394
                *tmp___217 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3394
                break;
              }
#line 3394
              while (1) {
#line 3394
                tmp___218 = jit->ip;
#line 3394
                (jit->ip) ++;
#line 3394
                *tmp___218 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
#line 3394
                break;
              }
#line 3394
              while (1) {
#line 3394
                *(jit->ip) = (unsigned char)0;
#line 3394
                (jit->ip) ++;
#line 3394
                break;
              }
            }
#line 3394
            break;
          }
#line 3394
          break;
        }
#line 3394
        break;
      }
#line 3394
      break;
    }
#line 3394
    while (1) {
#line 3394
      if (a1 > 7L) {
#line 3394
        tmp___225 = 4;
      } else {
#line 3394
        tmp___225 = 0;
      }
#line 3394
      if (a3 > 7L) {
#line 3394
        tmp___226 = 2;
      } else {
#line 3394
        tmp___226 = 0;
      }
#line 3394
      if (a2 > 7L) {
#line 3394
        tmp___227 = 1;
      } else {
#line 3394
        tmp___227 = 0;
      }
#line 3394
      _amd64_rex_bits___8 = (unsigned char )(((8 | tmp___225) | tmp___226) | tmp___227);
#line 3394
      if ((int )_amd64_rex_bits___8 != 0) {
#line 3394
        tmp___228 = jit->ip;
#line 3394
        (jit->ip) ++;
#line 3394
        *tmp___228 = (unsigned char )(0x40 | (int )_amd64_rex_bits___8);
      }
#line 3394
      break;
    }
#line 3394
    tmp___229 = jit->ip;
#line 3394
    (jit->ip) ++;
#line 3394
    *tmp___229 = (unsigned char)15;
#line 3394
    switch ((int )op->arg_size) {
    case 1: 
#line 3394
    tmp___230 = jit->ip;
#line 3394
    (jit->ip) ++;
#line 3394
    *tmp___230 = (unsigned char)182;
#line 3394
    break;
    case 2: 
#line 3394
    tmp___231 = jit->ip;
#line 3394
    (jit->ip) ++;
#line 3394
    *tmp___231 = (unsigned char)183;
#line 3394
    break;
    default: 
#line 3394
    tmp___232 = __builtin_expect(1L, 0L);
#line 3394
    if (tmp___232) {
#line 3394
      __assert_rtn((char const   *)"emit_ldx_op", (char const   *)"./jitter-Darwin-X86-64.c",
                   3394, (char const   *)"0");
    }
    }
#line 3394
    while (1) {
#line 3394
      if ((a2 & 7L) == -1L) {
#line 3394
        while (1) {
#line 3394
          tmp___233 = jit->ip;
#line 3394
          (jit->ip) ++;
#line 3394
          *tmp___233 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3394
          break;
        }
#line 3394
        while (1) {
#line 3394
          tmp___234 = jit->ip;
#line 3394
          (jit->ip) ++;
#line 3394
          *tmp___234 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
#line 3394
          break;
        }
#line 3394
        while (1) {
#line 3394
          imb___19.val = 0;
#line 3394
          tmp___235 = jit->ip;
#line 3394
          (jit->ip) ++;
#line 3394
          *tmp___235 = imb___19.b[0];
#line 3394
          tmp___236 = jit->ip;
#line 3394
          (jit->ip) ++;
#line 3394
          *tmp___236 = imb___19.b[1];
#line 3394
          tmp___237 = jit->ip;
#line 3394
          (jit->ip) ++;
#line 3394
          *tmp___237 = imb___19.b[2];
#line 3394
          tmp___238 = jit->ip;
#line 3394
          (jit->ip) ++;
#line 3394
          *tmp___238 = imb___19.b[3];
#line 3394
          break;
        }
      } else
#line 3394
      if ((a2 & 7L) != 5L) {
#line 3394
        while (1) {
#line 3394
          tmp___239 = jit->ip;
#line 3394
          (jit->ip) ++;
#line 3394
          *tmp___239 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
#line 3394
          break;
        }
#line 3394
        while (1) {
#line 3394
          tmp___240 = jit->ip;
#line 3394
          (jit->ip) ++;
#line 3394
          *tmp___240 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
#line 3394
          break;
        }
      } else {
#line 3394
        while (1) {
#line 3394
          tmp___241 = jit->ip;
#line 3394
          (jit->ip) ++;
#line 3394
          *tmp___241 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
#line 3394
          break;
        }
#line 3394
        while (1) {
#line 3394
          tmp___242 = jit->ip;
#line 3394
          (jit->ip) ++;
#line 3394
          *tmp___242 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
#line 3394
          break;
        }
#line 3394
        while (1) {
#line 3394
          *(jit->ip) = (unsigned char)0;
#line 3394
          (jit->ip) ++;
#line 3394
          break;
        }
      }
#line 3394
      break;
    }
#line 3394
    break;
  }
#line 3394
  break;
  default: 
#line 3395
  tmp___249 = __builtin_expect(1L, 0L);
#line 3395
  if (tmp___249) {
#line 3395
    __assert_rtn((char const   *)"emit_ldx_op", (char const   *)"./jitter-Darwin-X86-64.c",
                 3395, (char const   *)"0");
  }
  }
#line 3397
  return;
}
}
/* END FUNCTION-DEF emit_ldx_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF check_data_alignment LOC=UNKNOWN */
static int check_data_alignment(jit_op *op , char *msg_buf ) 
{ 
  int tmp ;
  jit_op *prev ;
  int tmp___0 ;

  {
#line 5137
  tmp = jit_op_is_data_op(op);
#line 5137
  if (tmp) {
#line 5137
    return (0);
  } else
#line 5137
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1440U) {
#line 5137
    return (0);
  }
#line 5138
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 136U) {
#line 5138
    return (0);
  } else
#line 5138
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 144U) {
#line 5138
    return (0);
  }
#line 5139
  prev = op->prev;
#line 5140
  while (prev) {
#line 5141
    if ((unsigned int )((jit_opcode )((int )prev->code & 0xfff8)) == 136U) {
#line 5142
      prev = prev->prev;
    } else
#line 5141
    if ((unsigned int )((jit_opcode )((int )prev->code & 0xfff8)) == 144U) {
#line 5142
      prev = prev->prev;
    } else {
#line 5143
      break;
    }
  }
#line 5145
  tmp___0 = jit_op_is_data_op(prev);
#line 5145
  if (tmp___0) {
#line 5146
    append_msg(msg_buf, "instruction follows unaligned data block");
#line 5147
    return (16);
  }
#line 5149
  return (0);
}
}
/* END FUNCTION-DEF check_data_alignment LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_push_caller_saved_regs LOC=UNKNOWN */
static int emit_push_caller_saved_regs(struct jit *jit , jit_op *op ) 
{ 
  int gp_count ;
  int fp_count ;
  struct jit_reg_allocator *al ;
  jit_hw_reg *active_regs[32] ;
  int stack_offset ;
  int stack_space ;
  int tmp ;
  int tmp___0 ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  int i ;
  int tmp___17 ;

  {
#line 2831
  al = jit->reg_al;
#line 2834
  while (op) {
#line 2835
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 416U) {
#line 2835
      break;
    }
#line 2836
    op = op->next;
  }
#line 2839
  stack_offset = 0;
#line 2840
  tmp = list_caller_saved_regs(jit, op, al->gp_regs, al->gp_reg_cnt, 0, al->ret_reg,
                               active_regs, & gp_count);
#line 2840
  stack_space = tmp;
#line 2841
  tmp___0 = list_caller_saved_regs(jit, op, al->fp_regs, al->fp_reg_cnt, 1, al->fpret_reg,
                                   active_regs + gp_count, & fp_count);
#line 2841
  stack_space += tmp___0;
#line 2843
  if (stack_space) {
#line 2843
    while (1) {
#line 2843
      if ((jit_value )stack_space >= -128L) {
#line 2843
        if ((jit_value )stack_space <= 127L) {
#line 2843
          while (1) {
#line 2843
            _amd64_rex_bits = (unsigned char)8;
#line 2843
            if ((int )_amd64_rex_bits != 0) {
#line 2843
              tmp___1 = jit->ip;
#line 2843
              (jit->ip) ++;
#line 2843
              *tmp___1 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
            }
#line 2843
            break;
          }
#line 2843
          tmp___2 = jit->ip;
#line 2843
          (jit->ip) ++;
#line 2843
          *tmp___2 = (unsigned char)131;
#line 2843
          while (1) {
#line 2843
            while (1) {
#line 2843
              tmp___3 = jit->ip;
#line 2843
              (jit->ip) ++;
#line 2843
              *tmp___3 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
#line 2843
              break;
            }
#line 2843
            break;
          }
#line 2843
          while (1) {
#line 2843
            *(jit->ip) = (unsigned char )(stack_space & 0xff);
#line 2843
            (jit->ip) ++;
#line 2843
            break;
          }
        } else {
#line 2843
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
#line 2843
        while (1) {
#line 2843
          _amd64_rex_bits___1 = (unsigned char)8;
#line 2843
          if ((int )_amd64_rex_bits___1 != 0) {
#line 2843
            tmp___10 = jit->ip;
#line 2843
            (jit->ip) ++;
#line 2843
            *tmp___10 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
          }
#line 2843
          break;
        }
#line 2843
        tmp___11 = jit->ip;
#line 2843
        (jit->ip) ++;
#line 2843
        *tmp___11 = (unsigned char)129;
#line 2843
        while (1) {
#line 2843
          while (1) {
#line 2843
            tmp___12 = jit->ip;
#line 2843
            (jit->ip) ++;
#line 2843
            *tmp___12 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
#line 2843
            break;
          }
#line 2843
          break;
        }
#line 2843
        while (1) {
#line 2843
          imb___0.val = stack_space;
#line 2843
          tmp___13 = jit->ip;
#line 2843
          (jit->ip) ++;
#line 2843
          *tmp___13 = imb___0.b[0];
#line 2843
          tmp___14 = jit->ip;
#line 2843
          (jit->ip) ++;
#line 2843
          *tmp___14 = imb___0.b[1];
#line 2843
          tmp___15 = jit->ip;
#line 2843
          (jit->ip) ++;
#line 2843
          *tmp___15 = imb___0.b[2];
#line 2843
          tmp___16 = jit->ip;
#line 2843
          (jit->ip) ++;
#line 2843
          *tmp___16 = imb___0.b[3];
#line 2843
          break;
        }
      }
#line 2843
      break;
    }
  }
#line 2844
  i = 0;
#line 2844
  while (i < gp_count + fp_count) {
#line 2845
    tmp___17 = emit_push_reg(jit, active_regs[i], stack_offset);
#line 2845
    stack_offset += tmp___17;
#line 2844
    i ++;
  }
#line 2847
  return (stack_space / (int )sizeof(void *));
}
}
/* END FUNCTION-DEF emit_push_caller_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_dump_ops_compilable LOC=UNKNOWN */
static void jit_dump_ops_compilable(struct jit *jit , jit_tree *labels ) 
{ 
  jit_op *op ;
  jit_op *tmp ;

  {
#line 4723
  tmp = jit_op_first(jit->ops);
#line 4723
  op = tmp;
#line 4723
  while ((unsigned long )op != (unsigned long )((void *)0)) {
#line 4724
    print_op_compilable(& jit_disasm_compilable, op, labels);
#line 4725
    printf((char const   */* __restrict  */)"\n");
#line 4723
    op = op->next;
  }
#line 4727
  return;
}
}
/* END FUNCTION-DEF jit_dump_ops_compilable LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_init LOC=UNKNOWN */
struct jit *jit_init(void) 
{ 
  struct jit *r ;
  void *tmp ;

  {
#line 5818
  tmp = malloc((size_t )sizeof(struct jit ));
#line 5818
  r = (struct jit *)tmp;
#line 5820
  r->ops = jit_op_new((unsigned short)8, (unsigned char)0, (jit_value )0, (jit_value )0,
                      (jit_value )0, (unsigned char)0);
#line 5821
  r->last_op = r->ops;
#line 5822
  r->optimizations = 0U;
#line 5824
  r->buf = (unsigned char *)((void *)0);
#line 5825
  r->mmaped_buf = (struct jit_exec_mem *)0;
#line 5826
  r->labels = (jit_label *)((void *)0);
#line 5827
  r->reg_al = jit_reg_allocator_create();
#line 5828
  jit_enable_optimization(r, 13);
#line 5830
  return (r);
}
}
/* END FUNCTION-DEF jit_init LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_branch_overflow_op LOC=UNKNOWN */
static void emit_branch_overflow_op(struct jit *jit , struct jit_op *op , int alu_op ,
                                    int imm , int negation ) 
{ 
  unsigned char _amd64_rex_bits ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  x86_imm_buf imb ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___17 ;
  int tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___22 ;
  int offset ;
  int tmp___23 ;
  size_t tmp___24 ;
  int tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___33 ;
  int offset___0 ;
  int tmp___34 ;
  size_t tmp___35 ;
  int tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;

  {
#line 3335
  if (imm) {
#line 3335
    while (1) {
#line 3335
      if (op->r_arg[2] >= -128L) {
#line 3335
        if (op->r_arg[2] <= 127L) {
#line 3335
          while (1) {
#line 3335
            if (op->r_arg[1] > 7L) {
#line 3335
              tmp = 1;
            } else {
#line 3335
              tmp = 0;
            }
#line 3335
            _amd64_rex_bits = (unsigned char )(8 | tmp);
#line 3335
            if ((int )_amd64_rex_bits != 0) {
#line 3335
              tmp___0 = jit->ip;
#line 3335
              (jit->ip) ++;
#line 3335
              *tmp___0 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
            }
#line 3335
            break;
          }
#line 3335
          tmp___1 = jit->ip;
#line 3335
          (jit->ip) ++;
#line 3335
          *tmp___1 = (unsigned char)131;
#line 3335
          while (1) {
#line 3335
            while (1) {
#line 3335
              tmp___2 = jit->ip;
#line 3335
              (jit->ip) ++;
#line 3335
              *tmp___2 = (unsigned char )((long )((3 << 6) | ((alu_op & 0x07) << 3)) | (op->r_arg[1] & 7L));
#line 3335
              break;
            }
#line 3335
            break;
          }
#line 3335
          while (1) {
#line 3335
            *(jit->ip) = (unsigned char )(op->r_arg[2] & 255L);
#line 3335
            (jit->ip) ++;
#line 3335
            break;
          }
        } else {
#line 3335
          goto _L;
        }
      } else
      _L: /* CIL Label */ 
#line 3335
      if (op->r_arg[1] == 0L) {
#line 3335
        while (1) {
#line 3335
          _amd64_rex_bits___0 = (unsigned char)8;
#line 3335
          if ((int )_amd64_rex_bits___0 != 0) {
#line 3335
            tmp___3 = jit->ip;
#line 3335
            (jit->ip) ++;
#line 3335
            *tmp___3 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
          }
#line 3335
          break;
        }
#line 3335
        tmp___4 = jit->ip;
#line 3335
        (jit->ip) ++;
#line 3335
        *tmp___4 = (unsigned char )(((int )((unsigned char )alu_op) << 3) + 5);
#line 3335
        while (1) {
#line 3335
          imb.val = (int )op->r_arg[2];
#line 3335
          tmp___5 = jit->ip;
#line 3335
          (jit->ip) ++;
#line 3335
          *tmp___5 = imb.b[0];
#line 3335
          tmp___6 = jit->ip;
#line 3335
          (jit->ip) ++;
#line 3335
          *tmp___6 = imb.b[1];
#line 3335
          tmp___7 = jit->ip;
#line 3335
          (jit->ip) ++;
#line 3335
          *tmp___7 = imb.b[2];
#line 3335
          tmp___8 = jit->ip;
#line 3335
          (jit->ip) ++;
#line 3335
          *tmp___8 = imb.b[3];
#line 3335
          break;
        }
      } else {
#line 3335
        while (1) {
#line 3335
          if (op->r_arg[1] > 7L) {
#line 3335
            tmp___9 = 1;
          } else {
#line 3335
            tmp___9 = 0;
          }
#line 3335
          _amd64_rex_bits___1 = (unsigned char )(8 | tmp___9);
#line 3335
          if ((int )_amd64_rex_bits___1 != 0) {
#line 3335
            tmp___10 = jit->ip;
#line 3335
            (jit->ip) ++;
#line 3335
            *tmp___10 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
          }
#line 3335
          break;
        }
#line 3335
        tmp___11 = jit->ip;
#line 3335
        (jit->ip) ++;
#line 3335
        *tmp___11 = (unsigned char)129;
#line 3335
        while (1) {
#line 3335
          while (1) {
#line 3335
            tmp___12 = jit->ip;
#line 3335
            (jit->ip) ++;
#line 3335
            *tmp___12 = (unsigned char )((long )((3 << 6) | ((alu_op & 0x07) << 3)) | (op->r_arg[1] & 7L));
#line 3335
            break;
          }
#line 3335
          break;
        }
#line 3335
        while (1) {
#line 3335
          imb___0.val = (int )op->r_arg[2];
#line 3335
          tmp___13 = jit->ip;
#line 3335
          (jit->ip) ++;
#line 3335
          *tmp___13 = imb___0.b[0];
#line 3335
          tmp___14 = jit->ip;
#line 3335
          (jit->ip) ++;
#line 3335
          *tmp___14 = imb___0.b[1];
#line 3335
          tmp___15 = jit->ip;
#line 3335
          (jit->ip) ++;
#line 3335
          *tmp___15 = imb___0.b[2];
#line 3335
          tmp___16 = jit->ip;
#line 3335
          (jit->ip) ++;
#line 3335
          *tmp___16 = imb___0.b[3];
#line 3335
          break;
        }
      }
#line 3335
      break;
    }
  } else {
#line 3336
    while (1) {
#line 3336
      while (1) {
#line 3336
        if (op->r_arg[1] > 7L) {
#line 3336
          tmp___17 = 4;
        } else {
#line 3336
          tmp___17 = 0;
        }
#line 3336
        if (op->r_arg[2] > 7L) {
#line 3336
          tmp___18 = 1;
        } else {
#line 3336
          tmp___18 = 0;
        }
#line 3336
        _amd64_rex_bits___2 = (unsigned char )((8 | tmp___17) | tmp___18);
#line 3336
        if ((int )_amd64_rex_bits___2 != 0) {
#line 3336
          tmp___19 = jit->ip;
#line 3336
          (jit->ip) ++;
#line 3336
          *tmp___19 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
        }
#line 3336
        break;
      }
#line 3336
      tmp___20 = jit->ip;
#line 3336
      (jit->ip) ++;
#line 3336
      *tmp___20 = (unsigned char )(((int )((unsigned char )alu_op) << 3) + 3);
#line 3336
      while (1) {
#line 3336
        while (1) {
#line 3336
          tmp___21 = jit->ip;
#line 3336
          (jit->ip) ++;
#line 3336
          *tmp___21 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[1] & 7L) << 3)) | (op->r_arg[2] & 7L));
#line 3336
          break;
        }
#line 3336
        break;
      }
#line 3336
      break;
    }
  }
#line 3338
  op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
#line 3340
  if (! negation) {
#line 3340
    while (1) {
#line 3340
      while (1) {
#line 3340
        _amd64_rex_bits___3 = (unsigned char)8;
#line 3340
        if ((int )_amd64_rex_bits___3 != 0) {
#line 3340
          tmp___22 = jit->ip;
#line 3340
          (jit->ip) ++;
#line 3340
          *tmp___22 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
        }
#line 3340
        break;
      }
#line 3340
      while (1) {
#line 3340
        tmp___25 = jit_is_label(jit, (void *)op->r_arg[0]);
#line 3340
        if (tmp___25) {
#line 3340
          tmp___24 = ((size_t )((jit_value )jit->buf) + ((jit_label *)op->r_arg[0])->pos) - (size_t )((jit_value )jit->ip);
        } else {
#line 3340
          tmp___24 = (size_t )op->r_arg[0];
        }
#line 3340
        offset = (int )(tmp___24 - 6UL);
#line 3340
        while (1) {
#line 3340
          tmp___26 = jit->ip;
#line 3340
          (jit->ip) ++;
#line 3340
          *tmp___26 = (unsigned char)15;
#line 3340
          tmp___28 = jit->ip;
#line 3340
          (jit->ip) ++;
#line 3340
          *tmp___28 = (unsigned char )((int const   )x86_cc_unsigned_map[10] + 16);
#line 3340
          while (1) {
#line 3340
            imb___1.val = offset;
#line 3340
            tmp___29 = jit->ip;
#line 3340
            (jit->ip) ++;
#line 3340
            *tmp___29 = imb___1.b[0];
#line 3340
            tmp___30 = jit->ip;
#line 3340
            (jit->ip) ++;
#line 3340
            *tmp___30 = imb___1.b[1];
#line 3340
            tmp___31 = jit->ip;
#line 3340
            (jit->ip) ++;
#line 3340
            *tmp___31 = imb___1.b[2];
#line 3340
            tmp___32 = jit->ip;
#line 3340
            (jit->ip) ++;
#line 3340
            *tmp___32 = imb___1.b[3];
#line 3340
            break;
          }
#line 3340
          break;
        }
#line 3340
        break;
      }
#line 3340
      break;
    }
  } else {
#line 3341
    while (1) {
#line 3341
      while (1) {
#line 3341
        _amd64_rex_bits___4 = (unsigned char)8;
#line 3341
        if ((int )_amd64_rex_bits___4 != 0) {
#line 3341
          tmp___33 = jit->ip;
#line 3341
          (jit->ip) ++;
#line 3341
          *tmp___33 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
        }
#line 3341
        break;
      }
#line 3341
      while (1) {
#line 3341
        tmp___36 = jit_is_label(jit, (void *)op->r_arg[0]);
#line 3341
        if (tmp___36) {
#line 3341
          tmp___35 = ((size_t )((jit_value )jit->buf) + ((jit_label *)op->r_arg[0])->pos) - (size_t )((jit_value )jit->ip);
        } else {
#line 3341
          tmp___35 = (size_t )op->r_arg[0];
        }
#line 3341
        offset___0 = (int )(tmp___35 - 6UL);
#line 3341
        while (1) {
#line 3341
          tmp___37 = jit->ip;
#line 3341
          (jit->ip) ++;
#line 3341
          *tmp___37 = (unsigned char)15;
#line 3341
          tmp___39 = jit->ip;
#line 3341
          (jit->ip) ++;
#line 3341
          *tmp___39 = (unsigned char )((int const   )x86_cc_unsigned_map[11] + 16);
#line 3341
          while (1) {
#line 3341
            imb___2.val = offset___0;
#line 3341
            tmp___40 = jit->ip;
#line 3341
            (jit->ip) ++;
#line 3341
            *tmp___40 = imb___2.b[0];
#line 3341
            tmp___41 = jit->ip;
#line 3341
            (jit->ip) ++;
#line 3341
            *tmp___41 = imb___2.b[1];
#line 3341
            tmp___42 = jit->ip;
#line 3341
            (jit->ip) ++;
#line 3341
            *tmp___42 = imb___2.b[2];
#line 3341
            tmp___43 = jit->ip;
#line 3341
            (jit->ip) ++;
#line 3341
            *tmp___43 = imb___2.b[3];
#line 3341
            break;
          }
#line 3341
          break;
        }
#line 3341
        break;
      }
#line 3341
      break;
    }
  }
#line 3342
  return;
}
}
/* END FUNCTION-DEF emit_branch_overflow_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isgraph LOC=UNKNOWN */
__inline int isgraph(int _c ) 
{ 
  int tmp ;

  {
#line 245 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  tmp = __istype(_c, 2048UL);
#line 245
  return (tmp);
}
}
/* END FUNCTION-DEF isgraph LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_tree_subset LOC=UNKNOWN */
static int jit_tree_subset(jit_tree *root , jit_tree *n ) 
{ 
  jit_tree *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 572
  if ((unsigned long )n == (unsigned long )((void *)0)) {
#line 572 "./jitter-Darwin-X86-64.c"
    return (1);
  }
#line 573
  tmp = jit_tree_search(root, n->key);
#line 573
  if (tmp) {
#line 573
    tmp___0 = jit_tree_subset(root, n->left);
#line 573
    if (tmp___0) {
#line 573
      tmp___1 = jit_tree_subset(root, n->right);
#line 573
      if (tmp___1) {
#line 573
        tmp___2 = 1;
      } else {
#line 573
        tmp___2 = 0;
      }
    } else {
#line 573
      tmp___2 = 0;
    }
  } else {
#line 573
    tmp___2 = 0;
  }
#line 573
  return (tmp___2);
}
}
/* END FUNCTION-DEF jit_tree_subset LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isalpha LOC=UNKNOWN */
__inline int isalpha(int _c ) 
{ 
  int tmp ;

  {
#line 220 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  tmp = __istype(_c, 256UL);
#line 220
  return (tmp);
}
}
/* END FUNCTION-DEF isalpha LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF ob_printf LOC=UNKNOWN */
static void ob_printf(struct output_buf *ob , char const   *fmt  , ...) 
{ 
  char str[8192] ;
  va_list___0 ap ;
  int len ;
  unsigned long long tmp ;
  int tmp___0 ;
  size_t tmp___1 ;
  unsigned long long tmp___2 ;

  {
#line 4093 "./jitter-Darwin-X86-64.c"
  __builtin_va_start(ap, fmt);
#line 4094
  tmp = __builtin_object_size((void *)(str), 1);
#line 4094
  tmp___0 = __builtin___vsnprintf_chk(str, 8192ULL, 0, tmp, fmt, ap);
#line 4094
  len = tmp___0;
#line 4095
  __builtin_va_end(ap);
#line 4097
  tmp___1 = strlen((char const   *)(str));
#line 4097
  len = (int )tmp___1;
#line 4098
  ob_assert_space(ob, len);
#line 4099
  tmp___2 = __builtin_object_size((void *)ob->buf, 1);
#line 4099
  __builtin___strcat_chk(ob->buf, (char const   *)(str), tmp___2);
#line 4100
  ob->size += (size_t )len;
#line 4101
  return;
}
}
/* END FUNCTION-DEF ob_printf LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF valid_size LOC=UNKNOWN */
static int valid_size(int size ) 
{ 


  {
#line 5043
  switch (size) {
  case 8: 
  case 4: 
  case 2: 
  case 1: 
#line 5048
  return (1);
  default: 
#line 5050
  return (0);
  }
}
}
/* END FUNCTION-DEF valid_size LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_set_equal LOC=UNKNOWN */
__inline static int jit_set_equal(jit_set *s1 , jit_set *s2 ) 
{ 
  int tmp ;

  {
#line 632
  tmp = jit_tree_equal(s1->root, s2->root);
#line 632
  return (tmp);
}
}
/* END FUNCTION-DEF jit_set_equal LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_tree_equal LOC=UNKNOWN */
static int jit_tree_equal(jit_tree *r1 , jit_tree *r2 ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 578
  tmp = jit_tree_subset(r1, r2);
#line 578
  if (tmp) {
#line 578
    tmp___0 = jit_tree_subset(r2, r1);
#line 578
    if (tmp___0) {
#line 578
      tmp___1 = 1;
    } else {
#line 578
      tmp___1 = 0;
    }
  } else {
#line 578
    tmp___1 = 0;
  }
#line 578
  return (tmp___1);
}
}
/* END FUNCTION-DEF jit_tree_equal LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isnumber LOC=UNKNOWN */
__inline int isnumber(int _c ) 
{ 
  int tmp ;

  {
#line 325 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  tmp = __istype(_c, 1024UL);
#line 325
  return (tmp);
}
}
/* END FUNCTION-DEF isnumber LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_tree_insert LOC=UNKNOWN */
static jit_tree *jit_tree_insert(jit_tree *root , jit_tree_key key , jit_tree_value value ,
                                 int *found ) 
{ 


  {
#line 426
  if (found) {
#line 426 "./jitter-Darwin-X86-64.c"
    *found = 0;
  }
#line 427
  root = node_insert(root, key, value, found);
#line 428
  root->color = 0;
#line 429
  return (root);
}
}
/* END FUNCTION-DEF jit_tree_insert LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_free LOC=UNKNOWN */
void jit_free(struct jit *jit ) 
{ 
  jit_op *tmp ;

  {
#line 6269
  jit_reg_allocator_free(jit->reg_al);
#line 6270
  tmp = jit_op_first(jit->ops);
#line 6270
  free_ops(tmp);
#line 6271
  free_labels(jit->labels);
#line 6272
  if (jit->buf) {
#line 6273
    if (jit->mmaped_buf) {
#line 6273
      jit_exec_mem_free(jit->mmaped_buf);
    } else {
#line 6274
      free((void *)jit->buf);
    }
  }
#line 6276
  free((void *)jit);
#line 6277
  return;
}
}
/* END FUNCTION-DEF jit_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF iscntrl LOC=UNKNOWN */
__inline int iscntrl(int _c ) 
{ 
  int tmp ;

  {
#line 232 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  tmp = __istype(_c, 512UL);
#line 232
  return (tmp);
}
}
/* END FUNCTION-DEF iscntrl LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_get_sign_mask LOC=UNKNOWN */
static unsigned char *emit_sse_get_sign_mask(void) 
{ 
  unsigned char *buf ;
  unsigned long long *bit_mask ;

  {
#line 1501 "./jitter-Darwin-X86-64.c"
  buf = bufx + 1;
#line 1502
  while ((long )buf % 16L) {
#line 1502
    buf ++;
  }
#line 1503
  bit_mask = (unsigned long long *)buf;
#line 1506
  *bit_mask = 1ULL << 63;
#line 1507
  return (buf);
}
}
/* END FUNCTION-DEF emit_sse_get_sign_mask LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF _cipher$_xtea_encipherBlock LOC=UNKNOWN */
void _cipher$_xtea_encipherBlock(unsigned int num_rounds , unsigned int *v , unsigned int *key ) 
{ 
  unsigned int v0 ;
  unsigned int v1 ;
  unsigned int delta ;
  unsigned int sum ;
  unsigned int i ;

  {
  v0 = v[0];
  v1 = v[1];
  delta = 2117564857;
  sum = 0;
  i = 0;
  while (i < num_rounds) {
    v0 += (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + key[sum & 3]);
    sum += delta;
    v1 += (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + key[(sum >> 11) & 3]);
    i ++;
  }
  v[0] = v0;
  v[1] = v1;
}
}
/* END FUNCTION-DEF _cipher$_xtea_encipherBlock LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF flw_analyze_prolog LOC=UNKNOWN */
__inline static void flw_analyze_prolog(struct jit *jit , jit_op *op , struct jit_func_info *func_info ) 
{ 
  int i ;

  {
#line 3851
  i = 0;
#line 3851
  while (i < func_info->general_arg_cnt + func_info->float_arg_cnt) {
#line 3852
    if ((unsigned int )(func_info->args + i)->type == 2U) {
#line 3853
      jit_set_remove(op->live_in, (1 | (3 << 1)) | ((i & 0xfffffff) << 4));
    } else {
#line 3855
      jit_set_remove(op->live_in, (3 << 1) | ((i & 0xfffffff) << 4));
    }
#line 3851
    i ++;
  }
#line 3858
  return;
}
}
/* END FUNCTION-DEF flw_analyze_prolog LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_op_last_fun LOC=UNKNOWN */
__inline static jit_op *jit_op_last_fun(jit_op *op ) 
{ 


  {
#line 873
  while (1) {
#line 873
    if ((unsigned long )op->next != (unsigned long )((void *)0)) {
#line 873
      if (! ((unsigned int )((jit_opcode )((int )(op->next)->code & 0xfff8)) != 128U)) {
#line 873
        break;
      }
    } else {
#line 873
      break;
    }
#line 873
    op = op->next;
  }
#line 874
  return (op);
}
}
/* END FUNCTION-DEF jit_op_last_fun LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_op_append LOC=UNKNOWN */
__inline static void jit_op_append(jit_op *op , jit_op *appended ) 
{ 


  {
#line 845
  appended->next = op->next;
#line 846
  if ((unsigned long )op->next != (unsigned long )((void *)0)) {
#line 846
    (op->next)->prev = appended;
  }
#line 847
  appended->prev = op;
#line 848
  op->next = appended;
#line 849
  return;
}
}
/* END FUNCTION-DEF jit_op_append LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF funcall_prepare LOC=UNKNOWN */
__inline static void funcall_prepare(struct jit *jit , jit_op *op , int count ) 
{ 
  void *tmp ;

  {
#line 918
  tmp = malloc((size_t )(sizeof(struct jit_out_arg ) * (unsigned long long )count));
#line 918
  jit->prepared_args.args = (struct jit_out_arg *)tmp;
#line 919
  jit->prepared_args.count = count;
#line 920
  jit->prepared_args.ready = 0;
#line 921
  jit->prepared_args.stack_size = 0;
#line 922
  jit->prepared_args.op = op;
#line 923
  jit->prepared_args.gp_args = 0;
#line 924
  jit->prepared_args.fp_args = 0;
#line 925
  jit->prepared_args.variadic = 0;
#line 926
  return;
}
}
/* END FUNCTION-DEF funcall_prepare LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_trace_callback LOC=UNKNOWN */
void jit_trace_callback(struct jit *jit , jit_op *op , int verbosity , int trace ) 
{ 


  {
#line 4917
  if (trace & 1) {
#line 4917
    jit_trace_op(jit, op->prev, verbosity);
  }
#line 4918
  if (trace & 2) {
#line 4918
    jit_trace_op(jit, op->next, verbosity);
  }
#line 4919
  return;
}
}
/* END FUNCTION-DEF jit_trace_callback LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF _OSSwapInt16 LOC=UNKNOWN */
__inline static __uint16_t _OSSwapInt16(__uint16_t _data ) 
{ 


  {
#line 50 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/libkern/i386/_OSByteOrder.h"
  return ((__uint16_t )(((int )_data << 8) | ((int )_data >> 8)));
}
}
/* END FUNCTION-DEF _OSSwapInt16 LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_optimize_join_addimm LOC=UNKNOWN */
int jit_optimize_join_addimm(struct jit *jit ) 
{ 
  int change ;
  jit_op *op ;
  jit_op *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 2342 "./jitter-Darwin-X86-64.c"
  change = 0;
#line 2343
  tmp = jit_op_first(jit->ops);
#line 2343
  op = tmp;
#line 2343
  while ((unsigned long )op != (unsigned long )((void *)0)) {
#line 2344
    tmp___0 = join_2ops(op, 513, 514, & join_addr_addi);
#line 2344
    change |= tmp___0;
#line 2345
    tmp___1 = join_2ops(op, 513, 538, & join_addr_addi);
#line 2345
    change |= tmp___1;
#line 2346
    tmp___2 = join_2ops(op, 514, 513, & join_addi_addr);
#line 2346
    change |= tmp___2;
#line 2347
    tmp___3 = join_2ops(op, 538, 513, & join_addi_addr);
#line 2347
    change |= tmp___3;
#line 2343
    op = op->next;
  }
#line 2349
  return (change);
}
}
/* END FUNCTION-DEF jit_optimize_join_addimm LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_exec_mem_new LOC=UNKNOWN */
static struct jit_exec_mem *jit_exec_mem_new(size_t size ) 
{ 
  struct jit_exec_mem *mem ;
  void *tmp ;

  {
#line 301
  tmp = malloc((size_t )sizeof(struct jit_exec_mem ));
#line 301
  mem = (struct jit_exec_mem *)tmp;
#line 302
  mem->size = size;
#line 303
  mem->data = mmap((void *)0, size, 7, 4098, -1, (off_t )0);
#line 304
  if ((unsigned long )mem->data == (unsigned long )((void *)-1)) {
#line 304
    perror((char const   *)"mmap");
  }
#line 305
  return (mem);
}
}
/* END FUNCTION-DEF jit_exec_mem_new LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_optimize_join_addmul LOC=UNKNOWN */
int jit_optimize_join_addmul(struct jit *jit ) 
{ 
  int change ;
  jit_op *op ;
  jit_op *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
#line 2282
  change = 0;
#line 2283
  tmp = jit_op_first(jit->ops);
#line 2283
  op = tmp;
#line 2283
  while ((unsigned long )op != (unsigned long )((void *)0)) {
#line 2284
    tmp___0 = join_2ops(op, 578, 514, & join_muli_addi);
#line 2284
    change |= tmp___0;
#line 2285
    tmp___1 = join_2ops(op, 666, 514, & join_muli_addi);
#line 2285
    change |= tmp___1;
#line 2286
    tmp___2 = join_2ops(op, 578, 513, & join_muli_addr);
#line 2286
    change |= tmp___2;
#line 2287
    tmp___3 = join_2ops(op, 666, 513, & join_muli_addr);
#line 2287
    change |= tmp___3;
#line 2288
    tmp___4 = join_2ops(op, 578, 642, & join_muli_ori);
#line 2288
    change |= tmp___4;
#line 2289
    tmp___5 = join_2ops(op, 666, 642, & join_muli_ori);
#line 2289
    change |= tmp___5;
#line 2283
    op = op->next;
  }
#line 2291
  return (change);
}
}
/* END FUNCTION-DEF jit_optimize_join_addmul LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_patch_external_calls LOC=UNKNOWN */
void jit_patch_external_calls(struct jit *jit ) 
{ 


  {
#line 2661
  return;
}
}
/* END FUNCTION-DEF jit_patch_external_calls LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_equal LOC=UNKNOWN */
static int rmap_equal(jit_op *op , jit_rmap *current , jit_rmap *target ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 1943
  tmp = rmap_subset(op, current->map, target->map);
#line 1943
  if (tmp) {
#line 1943
    tmp___0 = rmap_subset(op, target->map, current->map);
#line 1943
    if (tmp___0) {
#line 1943
      tmp___1 = 1;
    } else {
#line 1943
      tmp___1 = 0;
    }
  } else {
#line 1943
    tmp___1 = 0;
  }
#line 1943
  return (tmp___1);
}
}
/* END FUNCTION-DEF rmap_equal LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF shift_index LOC=UNKNOWN */
static int shift_index(int arg ) 
{ 
  long tmp ;

  {
#line 2199
  if (arg == 2) {
#line 2199
    return (1);
  }
#line 2200
  if (arg == 4) {
#line 2200
    return (2);
  }
#line 2201
  if (arg == 8) {
#line 2201
    return (3);
  }
#line 2202
  tmp = __builtin_expect(1L, 0L);
#line 2202
  if (tmp) {
#line 2202
    __assert_rtn((char const   *)"shift_index", (char const   *)"./jitter-Darwin-X86-64.c",
                 2202, (char const   *)"0");
  }
#line 2203
  return (0);
}
}
/* END FUNCTION-DEF shift_index LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_set_new LOC=UNKNOWN */
__inline static jit_set *jit_set_new(void) 
{ 
  jit_set *s ;
  void *tmp ;

  {
#line 592
  tmp = malloc((size_t )sizeof(jit_set ));
#line 592
  s = (jit_set *)tmp;
#line 593
  s->root = (jit_tree *)((void *)0);
#line 594
  return (s);
}
}
/* END FUNCTION-DEF jit_set_new LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_cond_op LOC=UNKNOWN */
static void emit_cond_op(struct jit *jit , struct jit_op *op , int amd64_cond , int imm ,
                         int sign ) 
{ 
  unsigned char _amd64_rex_bits ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  x86_imm_buf imb ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___17 ;
  int tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___22 ;
  int tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  amd64_imm_buf imb___1 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___38 ;
  unsigned char *tmp___39 ;
  long tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___45 ;
  int tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  int tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  amd64_imm_buf imb___3 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char _amd64_rex_bits___7 ;
  unsigned char *tmp___67 ;
  long tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___73 ;
  int tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  int tmp___78 ;
  unsigned char *tmp___79 ;

  {
#line 3300
  if (imm) {
#line 3300
    while (1) {
#line 3300
      if (op->r_arg[2] >= -128L) {
#line 3300
        if (op->r_arg[2] <= 127L) {
#line 3300
          while (1) {
#line 3300
            if (op->r_arg[1] > 7L) {
#line 3300
              tmp = 1;
            } else {
#line 3300
              tmp = 0;
            }
#line 3300
            _amd64_rex_bits = (unsigned char )(8 | tmp);
#line 3300
            if ((int )_amd64_rex_bits != 0) {
#line 3300
              tmp___0 = jit->ip;
#line 3300
              (jit->ip) ++;
#line 3300
              *tmp___0 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
            }
#line 3300
            break;
          }
#line 3300
          tmp___1 = jit->ip;
#line 3300
          (jit->ip) ++;
#line 3300
          *tmp___1 = (unsigned char)131;
#line 3300
          while (1) {
#line 3300
            while (1) {
#line 3300
              tmp___2 = jit->ip;
#line 3300
              (jit->ip) ++;
#line 3300
              *tmp___2 = (unsigned char )((long )((3 << 6) | (7 << 3)) | (op->r_arg[1] & 7L));
#line 3300
              break;
            }
#line 3300
            break;
          }
#line 3300
          while (1) {
#line 3300
            *(jit->ip) = (unsigned char )(op->r_arg[2] & 255L);
#line 3300
            (jit->ip) ++;
#line 3300
            break;
          }
        } else {
#line 3300
          goto _L;
        }
      } else
      _L: /* CIL Label */ 
#line 3300
      if (op->r_arg[1] == 0L) {
#line 3300
        while (1) {
#line 3300
          _amd64_rex_bits___0 = (unsigned char)8;
#line 3300
          if ((int )_amd64_rex_bits___0 != 0) {
#line 3300
            tmp___3 = jit->ip;
#line 3300
            (jit->ip) ++;
#line 3300
            *tmp___3 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
          }
#line 3300
          break;
        }
#line 3300
        tmp___4 = jit->ip;
#line 3300
        (jit->ip) ++;
#line 3300
        *tmp___4 = (unsigned char )((7 << 3) + 5);
#line 3300
        while (1) {
#line 3300
          imb.val = (int )op->r_arg[2];
#line 3300
          tmp___5 = jit->ip;
#line 3300
          (jit->ip) ++;
#line 3300
          *tmp___5 = imb.b[0];
#line 3300
          tmp___6 = jit->ip;
#line 3300
          (jit->ip) ++;
#line 3300
          *tmp___6 = imb.b[1];
#line 3300
          tmp___7 = jit->ip;
#line 3300
          (jit->ip) ++;
#line 3300
          *tmp___7 = imb.b[2];
#line 3300
          tmp___8 = jit->ip;
#line 3300
          (jit->ip) ++;
#line 3300
          *tmp___8 = imb.b[3];
#line 3300
          break;
        }
      } else {
#line 3300
        while (1) {
#line 3300
          if (op->r_arg[1] > 7L) {
#line 3300
            tmp___9 = 1;
          } else {
#line 3300
            tmp___9 = 0;
          }
#line 3300
          _amd64_rex_bits___1 = (unsigned char )(8 | tmp___9);
#line 3300
          if ((int )_amd64_rex_bits___1 != 0) {
#line 3300
            tmp___10 = jit->ip;
#line 3300
            (jit->ip) ++;
#line 3300
            *tmp___10 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
          }
#line 3300
          break;
        }
#line 3300
        tmp___11 = jit->ip;
#line 3300
        (jit->ip) ++;
#line 3300
        *tmp___11 = (unsigned char)129;
#line 3300
        while (1) {
#line 3300
          while (1) {
#line 3300
            tmp___12 = jit->ip;
#line 3300
            (jit->ip) ++;
#line 3300
            *tmp___12 = (unsigned char )((long )((3 << 6) | (7 << 3)) | (op->r_arg[1] & 7L));
#line 3300
            break;
          }
#line 3300
          break;
        }
#line 3300
        while (1) {
#line 3300
          imb___0.val = (int )op->r_arg[2];
#line 3300
          tmp___13 = jit->ip;
#line 3300
          (jit->ip) ++;
#line 3300
          *tmp___13 = imb___0.b[0];
#line 3300
          tmp___14 = jit->ip;
#line 3300
          (jit->ip) ++;
#line 3300
          *tmp___14 = imb___0.b[1];
#line 3300
          tmp___15 = jit->ip;
#line 3300
          (jit->ip) ++;
#line 3300
          *tmp___15 = imb___0.b[2];
#line 3300
          tmp___16 = jit->ip;
#line 3300
          (jit->ip) ++;
#line 3300
          *tmp___16 = imb___0.b[3];
#line 3300
          break;
        }
      }
#line 3300
      break;
    }
  } else {
#line 3301
    while (1) {
#line 3301
      while (1) {
#line 3301
        if (op->r_arg[1] > 7L) {
#line 3301
          tmp___17 = 4;
        } else {
#line 3301
          tmp___17 = 0;
        }
#line 3301
        if (op->r_arg[2] > 7L) {
#line 3301
          tmp___18 = 1;
        } else {
#line 3301
          tmp___18 = 0;
        }
#line 3301
        _amd64_rex_bits___2 = (unsigned char )((8 | tmp___17) | tmp___18);
#line 3301
        if ((int )_amd64_rex_bits___2 != 0) {
#line 3301
          tmp___19 = jit->ip;
#line 3301
          (jit->ip) ++;
#line 3301
          *tmp___19 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
        }
#line 3301
        break;
      }
#line 3301
      tmp___20 = jit->ip;
#line 3301
      (jit->ip) ++;
#line 3301
      *tmp___20 = (unsigned char )((7 << 3) + 3);
#line 3301
      while (1) {
#line 3301
        while (1) {
#line 3301
          tmp___21 = jit->ip;
#line 3301
          (jit->ip) ++;
#line 3301
          *tmp___21 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[1] & 7L) << 3)) | (op->r_arg[2] & 7L));
#line 3301
          break;
        }
#line 3301
        break;
      }
#line 3301
      break;
    }
  }
#line 3302
  if (op->r_arg[0] != 6L) {
#line 3302
    if (op->r_arg[0] != 7L) {
#line 3303
      while (1) {
#line 3303
        while (1) {
#line 3303
          if (sizeof(void *) > 4ULL) {
#line 3303
            tmp___22 = 8;
          } else {
#line 3303
            tmp___22 = 0;
          }
#line 3303
          if (op->r_arg[0] > 7L) {
#line 3303
            tmp___23 = 1;
          } else {
#line 3303
            tmp___23 = 0;
          }
#line 3303
          _amd64_rex_bits___3 = (unsigned char )(tmp___22 | tmp___23);
#line 3303
          if ((int )_amd64_rex_bits___3 != 0) {
#line 3303
            tmp___24 = jit->ip;
#line 3303
            (jit->ip) ++;
#line 3303
            *tmp___24 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
          } else
#line 3303
          if (sizeof(void *) == 1ULL) {
#line 3303
            tmp___24 = jit->ip;
#line 3303
            (jit->ip) ++;
#line 3303
            *tmp___24 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
          }
#line 3303
          break;
        }
#line 3303
        tmp___25 = jit->ip;
#line 3303
        (jit->ip) ++;
#line 3303
        *tmp___25 = (unsigned char )(184L + (op->r_arg[0] & 7L));
#line 3303
        if (sizeof(void *) == 8ULL) {
#line 3303
          while (1) {
#line 3303
            imb___1.val = (size_t )0;
#line 3303
            tmp___26 = jit->ip;
#line 3303
            (jit->ip) ++;
#line 3303
            *tmp___26 = imb___1.b[0];
#line 3303
            tmp___27 = jit->ip;
#line 3303
            (jit->ip) ++;
#line 3303
            *tmp___27 = imb___1.b[1];
#line 3303
            tmp___28 = jit->ip;
#line 3303
            (jit->ip) ++;
#line 3303
            *tmp___28 = imb___1.b[2];
#line 3303
            tmp___29 = jit->ip;
#line 3303
            (jit->ip) ++;
#line 3303
            *tmp___29 = imb___1.b[3];
#line 3303
            tmp___30 = jit->ip;
#line 3303
            (jit->ip) ++;
#line 3303
            *tmp___30 = imb___1.b[4];
#line 3303
            tmp___31 = jit->ip;
#line 3303
            (jit->ip) ++;
#line 3303
            *tmp___31 = imb___1.b[5];
#line 3303
            tmp___32 = jit->ip;
#line 3303
            (jit->ip) ++;
#line 3303
            *tmp___32 = imb___1.b[6];
#line 3303
            tmp___33 = jit->ip;
#line 3303
            (jit->ip) ++;
#line 3303
            *tmp___33 = imb___1.b[7];
#line 3303
            break;
          }
        } else {
#line 3303
          while (1) {
#line 3303
            imb___2.val = (int )((size_t )0);
#line 3303
            tmp___34 = jit->ip;
#line 3303
            (jit->ip) ++;
#line 3303
            *tmp___34 = imb___2.b[0];
#line 3303
            tmp___35 = jit->ip;
#line 3303
            (jit->ip) ++;
#line 3303
            *tmp___35 = imb___2.b[1];
#line 3303
            tmp___36 = jit->ip;
#line 3303
            (jit->ip) ++;
#line 3303
            *tmp___36 = imb___2.b[2];
#line 3303
            tmp___37 = jit->ip;
#line 3303
            (jit->ip) ++;
#line 3303
            *tmp___37 = imb___2.b[3];
#line 3303
            break;
          }
        }
#line 3303
        break;
      }
#line 3304
      while (1) {
#line 3304
        while (1) {
#line 3304
          if (op->r_arg[0] > 7L) {
#line 3304
            tmp___38 = 1;
          } else {
#line 3304
            tmp___38 = 0;
          }
#line 3304
          _amd64_rex_bits___4 = (unsigned char )tmp___38;
#line 3304
          if ((int )_amd64_rex_bits___4 != 0) {
#line 3304
            tmp___39 = jit->ip;
#line 3304
            (jit->ip) ++;
#line 3304
            *tmp___39 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
          } else {
#line 3304
            tmp___39 = jit->ip;
#line 3304
            (jit->ip) ++;
#line 3304
            *tmp___39 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
          }
#line 3304
          break;
        }
#line 3304
        while (1) {
#line 3304
          tmp___40 = __builtin_expect(0L, 0L);
#line 3304
          if (tmp___40) {
#line 3304
            __assert_rtn((char const   *)"emit_cond_op", (char const   *)"./jitter-Darwin-X86-64.c",
                         3304, (char const   *)"1");
          }
#line 3304
          tmp___41 = jit->ip;
#line 3304
          (jit->ip) ++;
#line 3304
          *tmp___41 = (unsigned char)15;
#line 3304
          if (sign) {
#line 3304
            tmp___42 = jit->ip;
#line 3304
            (jit->ip) ++;
#line 3304
            *tmp___42 = (unsigned char )((int const   )x86_cc_signed_map[amd64_cond] + 32);
          } else {
#line 3304
            tmp___43 = jit->ip;
#line 3304
            (jit->ip) ++;
#line 3304
            *tmp___43 = (unsigned char )((int const   )x86_cc_unsigned_map[amd64_cond] + 32);
          }
#line 3304
          while (1) {
#line 3304
            while (1) {
#line 3304
              tmp___44 = jit->ip;
#line 3304
              (jit->ip) ++;
#line 3304
              *tmp___44 = (unsigned char )((long )(3 << 6) | ((op->r_arg[0] & 7L) & 7L));
#line 3304
              break;
            }
#line 3304
            break;
          }
#line 3304
          break;
        }
#line 3304
        break;
      }
    } else {
#line 3302
      goto _L___0;
    }
  } else {
    _L___0: /* CIL Label */ 
#line 3306
    while (1) {
#line 3306
      while (1) {
#line 3306
        if ((int )sizeof(void *) > 4) {
#line 3306
          tmp___45 = 8;
        } else {
#line 3306
          tmp___45 = 0;
        }
#line 3306
        if (op->r_arg[0] > 7L) {
#line 3306
          tmp___46 = 1;
        } else {
#line 3306
          tmp___46 = 0;
        }
#line 3306
        _amd64_rex_bits___5 = (unsigned char )(tmp___45 | tmp___46);
#line 3306
        if ((int )_amd64_rex_bits___5 != 0) {
#line 3306
          tmp___47 = jit->ip;
#line 3306
          (jit->ip) ++;
#line 3306
          *tmp___47 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
        } else
#line 3306
        if ((int )sizeof(void *) == 1) {
#line 3306
          tmp___47 = jit->ip;
#line 3306
          (jit->ip) ++;
#line 3306
          *tmp___47 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
        }
#line 3306
        break;
      }
#line 3306
      while (1) {
#line 3306
        if ((int )sizeof(void *) == 8) {
#line 3306
          tmp___50 = 4;
        } else {
#line 3306
          tmp___50 = (int )sizeof(void *);
        }
#line 3306
        if (tmp___50 == 1) {
#line 3306
          tmp___48 = jit->ip;
#line 3306
          (jit->ip) ++;
#line 3306
          *tmp___48 = (unsigned char)134;
        } else {
#line 3306
          tmp___49 = jit->ip;
#line 3306
          (jit->ip) ++;
#line 3306
          *tmp___49 = (unsigned char)135;
        }
#line 3306
        while (1) {
#line 3306
          while (1) {
#line 3306
            tmp___51 = jit->ip;
#line 3306
            (jit->ip) ++;
#line 3306
            *tmp___51 = (unsigned char )((long )(3 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3));
#line 3306
            break;
          }
#line 3306
          break;
        }
#line 3306
        break;
      }
#line 3306
      break;
    }
#line 3307
    while (1) {
#line 3307
      while (1) {
#line 3307
        if (sizeof(void *) > 4ULL) {
#line 3307
          tmp___52 = 8;
        } else {
#line 3307
          tmp___52 = 0;
        }
#line 3307
        _amd64_rex_bits___6 = (unsigned char )tmp___52;
#line 3307
        if ((int )_amd64_rex_bits___6 != 0) {
#line 3307
          tmp___53 = jit->ip;
#line 3307
          (jit->ip) ++;
#line 3307
          *tmp___53 = (unsigned char )(0x40 | (int )_amd64_rex_bits___6);
        } else
#line 3307
        if (sizeof(void *) == 1ULL) {
#line 3307
          tmp___53 = jit->ip;
#line 3307
          (jit->ip) ++;
#line 3307
          *tmp___53 = (unsigned char )(0x40 | (int )_amd64_rex_bits___6);
        }
#line 3307
        break;
      }
#line 3307
      tmp___54 = jit->ip;
#line 3307
      (jit->ip) ++;
#line 3307
      *tmp___54 = (unsigned char)184;
#line 3307
      if (sizeof(void *) == 8ULL) {
#line 3307
        while (1) {
#line 3307
          imb___3.val = (size_t )0;
#line 3307
          tmp___55 = jit->ip;
#line 3307
          (jit->ip) ++;
#line 3307
          *tmp___55 = imb___3.b[0];
#line 3307
          tmp___56 = jit->ip;
#line 3307
          (jit->ip) ++;
#line 3307
          *tmp___56 = imb___3.b[1];
#line 3307
          tmp___57 = jit->ip;
#line 3307
          (jit->ip) ++;
#line 3307
          *tmp___57 = imb___3.b[2];
#line 3307
          tmp___58 = jit->ip;
#line 3307
          (jit->ip) ++;
#line 3307
          *tmp___58 = imb___3.b[3];
#line 3307
          tmp___59 = jit->ip;
#line 3307
          (jit->ip) ++;
#line 3307
          *tmp___59 = imb___3.b[4];
#line 3307
          tmp___60 = jit->ip;
#line 3307
          (jit->ip) ++;
#line 3307
          *tmp___60 = imb___3.b[5];
#line 3307
          tmp___61 = jit->ip;
#line 3307
          (jit->ip) ++;
#line 3307
          *tmp___61 = imb___3.b[6];
#line 3307
          tmp___62 = jit->ip;
#line 3307
          (jit->ip) ++;
#line 3307
          *tmp___62 = imb___3.b[7];
#line 3307
          break;
        }
      } else {
#line 3307
        while (1) {
#line 3307
          imb___4.val = (int )((size_t )0);
#line 3307
          tmp___63 = jit->ip;
#line 3307
          (jit->ip) ++;
#line 3307
          *tmp___63 = imb___4.b[0];
#line 3307
          tmp___64 = jit->ip;
#line 3307
          (jit->ip) ++;
#line 3307
          *tmp___64 = imb___4.b[1];
#line 3307
          tmp___65 = jit->ip;
#line 3307
          (jit->ip) ++;
#line 3307
          *tmp___65 = imb___4.b[2];
#line 3307
          tmp___66 = jit->ip;
#line 3307
          (jit->ip) ++;
#line 3307
          *tmp___66 = imb___4.b[3];
#line 3307
          break;
        }
      }
#line 3307
      break;
    }
#line 3308
    while (1) {
#line 3308
      while (1) {
#line 3308
        _amd64_rex_bits___7 = (unsigned char)0;
#line 3308
        if ((int )_amd64_rex_bits___7 != 0) {
#line 3308
          tmp___67 = jit->ip;
#line 3308
          (jit->ip) ++;
#line 3308
          *tmp___67 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
        } else {
#line 3308
          tmp___67 = jit->ip;
#line 3308
          (jit->ip) ++;
#line 3308
          *tmp___67 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
        }
#line 3308
        break;
      }
#line 3308
      while (1) {
#line 3308
        tmp___68 = __builtin_expect(0L, 0L);
#line 3308
        if (tmp___68) {
#line 3308
          __assert_rtn((char const   *)"emit_cond_op", (char const   *)"./jitter-Darwin-X86-64.c",
                       3308, (char const   *)"1");
        }
#line 3308
        tmp___69 = jit->ip;
#line 3308
        (jit->ip) ++;
#line 3308
        *tmp___69 = (unsigned char)15;
#line 3308
        if (sign) {
#line 3308
          tmp___70 = jit->ip;
#line 3308
          (jit->ip) ++;
#line 3308
          *tmp___70 = (unsigned char )((int const   )x86_cc_signed_map[amd64_cond] + 32);
        } else {
#line 3308
          tmp___71 = jit->ip;
#line 3308
          (jit->ip) ++;
#line 3308
          *tmp___71 = (unsigned char )((int const   )x86_cc_unsigned_map[amd64_cond] + 32);
        }
#line 3308
        while (1) {
#line 3308
          while (1) {
#line 3308
            tmp___72 = jit->ip;
#line 3308
            (jit->ip) ++;
#line 3308
            *tmp___72 = (unsigned char )(3 << 6);
#line 3308
            break;
          }
#line 3308
          break;
        }
#line 3308
        break;
      }
#line 3308
      break;
    }
#line 3309
    while (1) {
#line 3309
      while (1) {
#line 3309
        if ((int )sizeof(void *) > 4) {
#line 3309
          tmp___73 = 8;
        } else {
#line 3309
          tmp___73 = 0;
        }
#line 3309
        if (op->r_arg[0] > 7L) {
#line 3309
          tmp___74 = 1;
        } else {
#line 3309
          tmp___74 = 0;
        }
#line 3309
        _amd64_rex_bits___8 = (unsigned char )(tmp___73 | tmp___74);
#line 3309
        if ((int )_amd64_rex_bits___8 != 0) {
#line 3309
          tmp___75 = jit->ip;
#line 3309
          (jit->ip) ++;
#line 3309
          *tmp___75 = (unsigned char )(0x40 | (int )_amd64_rex_bits___8);
        } else
#line 3309
        if ((int )sizeof(void *) == 1) {
#line 3309
          tmp___75 = jit->ip;
#line 3309
          (jit->ip) ++;
#line 3309
          *tmp___75 = (unsigned char )(0x40 | (int )_amd64_rex_bits___8);
        }
#line 3309
        break;
      }
#line 3309
      while (1) {
#line 3309
        if ((int )sizeof(void *) == 8) {
#line 3309
          tmp___78 = 4;
        } else {
#line 3309
          tmp___78 = (int )sizeof(void *);
        }
#line 3309
        if (tmp___78 == 1) {
#line 3309
          tmp___76 = jit->ip;
#line 3309
          (jit->ip) ++;
#line 3309
          *tmp___76 = (unsigned char)134;
        } else {
#line 3309
          tmp___77 = jit->ip;
#line 3309
          (jit->ip) ++;
#line 3309
          *tmp___77 = (unsigned char)135;
        }
#line 3309
        while (1) {
#line 3309
          while (1) {
#line 3309
            tmp___79 = jit->ip;
#line 3309
            (jit->ip) ++;
#line 3309
            *tmp___79 = (unsigned char )((long )(3 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3));
#line 3309
            break;
          }
#line 3309
          break;
        }
#line 3309
        break;
      }
#line 3309
      break;
    }
  }
#line 3311
  return;
}
}
/* END FUNCTION-DEF emit_cond_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_prolog_op LOC=UNKNOWN */
static void emit_prolog_op(struct jit *jit , jit_op *op ) 
{ 
  struct jit_func_info *info ;
  struct jit_func_info *tmp ;
  int prolog ;
  struct jit_func_info *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  long tmp___8 ;
  unsigned char *tmp___9 ;
  int stack_mem ;
  int tmp___10 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  x86_imm_buf imb ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  int i ;
  struct jit_inp_arg a ;
  unsigned char *tmp___27 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___28 ;
  int tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char _amd64_rex_bits___6 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;

  {
#line 2534
  jit->current_func = op;
#line 2535
  tmp = jit_current_func_info(jit);
#line 2535
  info = tmp;
#line 2537
  tmp___0 = jit_current_func_info(jit);
#line 2537
  prolog = tmp___0->has_prolog;
#line 2539
  while ((jit_value )jit->ip % 16L) {
#line 2540
    while (1) {
#line 2540
      while (1) {
#line 2540
        tmp___1 = jit->ip;
#line 2540
        (jit->ip) ++;
#line 2540
        *tmp___1 = (unsigned char)144;
#line 2540
        break;
      }
#line 2540
      break;
    }
  }
#line 2542
  op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
#line 2543
  if (prolog) {
#line 2544
    while (1) {
#line 2544
      while (1) {
#line 2544
        _amd64_rex_bits = (unsigned char)0;
#line 2544
        if ((int )_amd64_rex_bits != 0) {
#line 2544
          tmp___2 = jit->ip;
#line 2544
          (jit->ip) ++;
#line 2544
          *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
        }
#line 2544
        break;
      }
#line 2544
      tmp___3 = jit->ip;
#line 2544
      (jit->ip) ++;
#line 2544
      *tmp___3 = (unsigned char)85;
#line 2544
      break;
    }
#line 2545
    while (1) {
#line 2545
      while (1) {
#line 2545
        _amd64_rex_bits___0 = (unsigned char)8;
#line 2545
        if ((int )_amd64_rex_bits___0 != 0) {
#line 2545
          tmp___5 = jit->ip;
#line 2545
          (jit->ip) ++;
#line 2545
          *tmp___5 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
        }
#line 2545
        break;
      }
#line 2545
      switch (8) {
      case 1: 
#line 2545
      tmp___6 = jit->ip;
#line 2545
      (jit->ip) ++;
#line 2545
      *tmp___6 = (unsigned char)138;
#line 2545
      break;
      case 8: 
      case 4: 
      case 2: 
#line 2545
      tmp___7 = jit->ip;
#line 2545
      (jit->ip) ++;
#line 2545
      *tmp___7 = (unsigned char)139;
#line 2545
      break;
      default: 
#line 2545
      tmp___8 = __builtin_expect(1L, 0L);
#line 2545
      if (tmp___8) {
#line 2545
        __assert_rtn((char const   *)"emit_prolog_op", (char const   *)"./jitter-Darwin-X86-64.c",
                     2545, (char const   *)"0");
      }
      }
#line 2545
      while (1) {
#line 2545
        while (1) {
#line 2545
          tmp___9 = jit->ip;
#line 2545
          (jit->ip) ++;
#line 2545
          *tmp___9 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
#line 2545
          break;
        }
#line 2545
        break;
      }
#line 2545
      break;
    }
  }
#line 2548
  tmp___10 = get_frame_size(jit, info);
#line 2548
  stack_mem = tmp___10;
#line 2550
  if (prolog) {
#line 2550
    while (1) {
#line 2550
      if ((jit_value )stack_mem >= -128L) {
#line 2550
        if ((jit_value )stack_mem <= 127L) {
#line 2550
          while (1) {
#line 2550
            _amd64_rex_bits___1 = (unsigned char)8;
#line 2550
            if ((int )_amd64_rex_bits___1 != 0) {
#line 2550
              tmp___11 = jit->ip;
#line 2550
              (jit->ip) ++;
#line 2550
              *tmp___11 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
            }
#line 2550
            break;
          }
#line 2550
          tmp___12 = jit->ip;
#line 2550
          (jit->ip) ++;
#line 2550
          *tmp___12 = (unsigned char)131;
#line 2550
          while (1) {
#line 2550
            while (1) {
#line 2550
              tmp___13 = jit->ip;
#line 2550
              (jit->ip) ++;
#line 2550
              *tmp___13 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
#line 2550
              break;
            }
#line 2550
            break;
          }
#line 2550
          while (1) {
#line 2550
            *(jit->ip) = (unsigned char )(stack_mem & 0xff);
#line 2550
            (jit->ip) ++;
#line 2550
            break;
          }
        } else {
#line 2550
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
#line 2550
        while (1) {
#line 2550
          _amd64_rex_bits___3 = (unsigned char)8;
#line 2550
          if ((int )_amd64_rex_bits___3 != 0) {
#line 2550
            tmp___20 = jit->ip;
#line 2550
            (jit->ip) ++;
#line 2550
            *tmp___20 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
          }
#line 2550
          break;
        }
#line 2550
        tmp___21 = jit->ip;
#line 2550
        (jit->ip) ++;
#line 2550
        *tmp___21 = (unsigned char)129;
#line 2550
        while (1) {
#line 2550
          while (1) {
#line 2550
            tmp___22 = jit->ip;
#line 2550
            (jit->ip) ++;
#line 2550
            *tmp___22 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
#line 2550
            break;
          }
#line 2550
          break;
        }
#line 2550
        while (1) {
#line 2550
          imb___0.val = stack_mem;
#line 2550
          tmp___23 = jit->ip;
#line 2550
          (jit->ip) ++;
#line 2550
          *tmp___23 = imb___0.b[0];
#line 2550
          tmp___24 = jit->ip;
#line 2550
          (jit->ip) ++;
#line 2550
          *tmp___24 = imb___0.b[1];
#line 2550
          tmp___25 = jit->ip;
#line 2550
          (jit->ip) ++;
#line 2550
          *tmp___25 = imb___0.b[2];
#line 2550
          tmp___26 = jit->ip;
#line 2550
          (jit->ip) ++;
#line 2550
          *tmp___26 = imb___0.b[3];
#line 2550
          break;
        }
      }
#line 2550
      break;
    }
  }
#line 2551
  jit->push_count = emit_push_callee_saved_regs(jit, op);
#line 2553
  i = 0;
#line 2553
  while (i < info->general_arg_cnt + info->float_arg_cnt) {
#line 2554
    a = *(info->args + i);
#line 2555
    if ((unsigned int )a.type == 2U) {
#line 2555
      if ((unsigned long long )a.size == sizeof(float )) {
#line 2556
        if (a.passed_by_reg) {
#line 2557
          while (1) {
#line 2557
            tmp___27 = jit->ip;
#line 2557
            (jit->ip) ++;
#line 2557
            *tmp___27 = (unsigned char)243;
#line 2557
            while (1) {
#line 2557
              if (a.location.reg > 7) {
#line 2557
                tmp___28 = 4;
              } else {
#line 2557
                tmp___28 = 0;
              }
#line 2557
              if (a.location.reg > 7) {
#line 2557
                tmp___29 = 1;
              } else {
#line 2557
                tmp___29 = 0;
              }
#line 2557
              _amd64_rex_bits___4 = (unsigned char )(tmp___28 | tmp___29);
#line 2557
              if ((int )_amd64_rex_bits___4 != 0) {
#line 2557
                tmp___30 = jit->ip;
#line 2557
                (jit->ip) ++;
#line 2557
                *tmp___30 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
              }
#line 2557
              break;
            }
#line 2557
            tmp___31 = jit->ip;
#line 2557
            (jit->ip) ++;
#line 2557
            *tmp___31 = (unsigned char)15;
#line 2557
            tmp___32 = jit->ip;
#line 2557
            (jit->ip) ++;
#line 2557
            *tmp___32 = (unsigned char)90;
#line 2557
            while (1) {
#line 2557
              while (1) {
#line 2557
                tmp___33 = jit->ip;
#line 2557
                (jit->ip) ++;
#line 2557
                *tmp___33 = (unsigned char )(((3 << 6) | ((a.location.reg & 0x07) << 3)) | (a.location.reg & 0x07));
#line 2557
                break;
              }
#line 2557
              break;
            }
#line 2557
            break;
          }
        } else {
#line 2559
          while (1) {
#line 2559
            tmp___34 = jit->ip;
#line 2559
            (jit->ip) ++;
#line 2559
            *tmp___34 = (unsigned char)243;
#line 2559
            while (1) {
#line 2559
              _amd64_rex_bits___5 = (unsigned char)4;
#line 2559
              if ((int )_amd64_rex_bits___5 != 0) {
#line 2559
                tmp___35 = jit->ip;
#line 2559
                (jit->ip) ++;
#line 2559
                *tmp___35 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
              }
#line 2559
              break;
            }
#line 2559
            tmp___36 = jit->ip;
#line 2559
            (jit->ip) ++;
#line 2559
            *tmp___36 = (unsigned char)15;
#line 2559
            tmp___37 = jit->ip;
#line 2559
            (jit->ip) ++;
#line 2559
            *tmp___37 = (unsigned char)90;
#line 2559
            while (1) {
#line 2559
              while (1) {
#line 2559
                if (0) {
#line 2559
                  if (a.spill_pos == 0) {
#line 2559
                    while (1) {
#line 2559
                      tmp___43 = jit->ip;
#line 2559
                      (jit->ip) ++;
#line 2559
                      *tmp___43 = (unsigned char )((7 << 3) | 4);
#line 2559
                      break;
                    }
#line 2559
                    while (1) {
#line 2559
                      tmp___44 = jit->ip;
#line 2559
                      (jit->ip) ++;
#line 2559
                      *tmp___44 = (unsigned char )((4 << 3) | 4);
#line 2559
                      break;
                    }
                  } else
#line 2559
                  if ((jit_value )a.spill_pos >= -128L) {
#line 2559
                    if ((jit_value )a.spill_pos <= 127L) {
#line 2559
                      while (1) {
#line 2559
                        tmp___45 = jit->ip;
#line 2559
                        (jit->ip) ++;
#line 2559
                        *tmp___45 = (unsigned char )(((1 << 6) | (7 << 3)) | 4);
#line 2559
                        break;
                      }
#line 2559
                      while (1) {
#line 2559
                        tmp___46 = jit->ip;
#line 2559
                        (jit->ip) ++;
#line 2559
                        *tmp___46 = (unsigned char )((4 << 3) | 4);
#line 2559
                        break;
                      }
#line 2559
                      while (1) {
#line 2559
                        *(jit->ip) = (unsigned char )(a.spill_pos & 0xff);
#line 2559
                        (jit->ip) ++;
#line 2559
                        break;
                      }
                    } else {
#line 2559
                      goto _L___0;
                    }
                  } else {
                    _L___0: /* CIL Label */ 
#line 2559
                    while (1) {
#line 2559
                      tmp___47 = jit->ip;
#line 2559
                      (jit->ip) ++;
#line 2559
                      *tmp___47 = (unsigned char )(((2 << 6) | (7 << 3)) | 4);
#line 2559
                      break;
                    }
#line 2559
                    while (1) {
#line 2559
                      tmp___48 = jit->ip;
#line 2559
                      (jit->ip) ++;
#line 2559
                      *tmp___48 = (unsigned char )((4 << 3) | 4);
#line 2559
                      break;
                    }
#line 2559
                    while (1) {
#line 2559
                      imb___2.val = a.spill_pos;
#line 2559
                      tmp___49 = jit->ip;
#line 2559
                      (jit->ip) ++;
#line 2559
                      *tmp___49 = imb___2.b[0];
#line 2559
                      tmp___50 = jit->ip;
#line 2559
                      (jit->ip) ++;
#line 2559
                      *tmp___50 = imb___2.b[1];
#line 2559
                      tmp___51 = jit->ip;
#line 2559
                      (jit->ip) ++;
#line 2559
                      *tmp___51 = imb___2.b[2];
#line 2559
                      tmp___52 = jit->ip;
#line 2559
                      (jit->ip) ++;
#line 2559
                      *tmp___52 = imb___2.b[3];
#line 2559
                      break;
                    }
                  }
#line 2559
                  break;
                }
#line 2559
                if (a.spill_pos == 0) {

                }
#line 2559
                if ((jit_value )a.spill_pos >= -128L) {
#line 2559
                  if ((jit_value )a.spill_pos <= 127L) {
#line 2559
                    while (1) {
#line 2559
                      tmp___54 = jit->ip;
#line 2559
                      (jit->ip) ++;
#line 2559
                      *tmp___54 = (unsigned char )(((1 << 6) | (7 << 3)) | 5);
#line 2559
                      break;
                    }
#line 2559
                    while (1) {
#line 2559
                      *(jit->ip) = (unsigned char )(a.spill_pos & 0xff);
#line 2559
                      (jit->ip) ++;
#line 2559
                      break;
                    }
                  } else {
#line 2559
                    goto _L___1;
                  }
                } else {
                  _L___1: /* CIL Label */ 
#line 2559
                  while (1) {
#line 2559
                    tmp___55 = jit->ip;
#line 2559
                    (jit->ip) ++;
#line 2559
                    *tmp___55 = (unsigned char )(((2 << 6) | (7 << 3)) | 5);
#line 2559
                    break;
                  }
#line 2559
                  while (1) {
#line 2559
                    imb___3.val = a.spill_pos;
#line 2559
                    tmp___56 = jit->ip;
#line 2559
                    (jit->ip) ++;
#line 2559
                    *tmp___56 = imb___3.b[0];
#line 2559
                    tmp___57 = jit->ip;
#line 2559
                    (jit->ip) ++;
#line 2559
                    *tmp___57 = imb___3.b[1];
#line 2559
                    tmp___58 = jit->ip;
#line 2559
                    (jit->ip) ++;
#line 2559
                    *tmp___58 = imb___3.b[2];
#line 2559
                    tmp___59 = jit->ip;
#line 2559
                    (jit->ip) ++;
#line 2559
                    *tmp___59 = imb___3.b[3];
#line 2559
                    break;
                  }
                }
#line 2559
                break;
              }
#line 2559
              break;
            }
#line 2559
            break;
          }
#line 2560
          while (1) {
#line 2560
            tmp___60 = jit->ip;
#line 2560
            (jit->ip) ++;
#line 2560
            *tmp___60 = (unsigned char)102;
#line 2560
            while (1) {
#line 2560
              _amd64_rex_bits___6 = (unsigned char)4;
#line 2560
              if ((int )_amd64_rex_bits___6 != 0) {
#line 2560
                tmp___61 = jit->ip;
#line 2560
                (jit->ip) ++;
#line 2560
                *tmp___61 = (unsigned char )(0x40 | (int )_amd64_rex_bits___6);
              }
#line 2560
              break;
            }
#line 2560
            tmp___62 = jit->ip;
#line 2560
            (jit->ip) ++;
#line 2560
            *tmp___62 = (unsigned char)15;
#line 2560
            tmp___63 = jit->ip;
#line 2560
            (jit->ip) ++;
#line 2560
            *tmp___63 = (unsigned char)19;
#line 2560
            while (1) {
#line 2560
              while (1) {
#line 2560
                if (0) {
#line 2560
                  if (a.spill_pos == 0) {
#line 2560
                    while (1) {
#line 2560
                      tmp___69 = jit->ip;
#line 2560
                      (jit->ip) ++;
#line 2560
                      *tmp___69 = (unsigned char )((7 << 3) | 4);
#line 2560
                      break;
                    }
#line 2560
                    while (1) {
#line 2560
                      tmp___70 = jit->ip;
#line 2560
                      (jit->ip) ++;
#line 2560
                      *tmp___70 = (unsigned char )((4 << 3) | 4);
#line 2560
                      break;
                    }
                  } else
#line 2560
                  if ((jit_value )a.spill_pos >= -128L) {
#line 2560
                    if ((jit_value )a.spill_pos <= 127L) {
#line 2560
                      while (1) {
#line 2560
                        tmp___71 = jit->ip;
#line 2560
                        (jit->ip) ++;
#line 2560
                        *tmp___71 = (unsigned char )(((1 << 6) | (7 << 3)) | 4);
#line 2560
                        break;
                      }
#line 2560
                      while (1) {
#line 2560
                        tmp___72 = jit->ip;
#line 2560
                        (jit->ip) ++;
#line 2560
                        *tmp___72 = (unsigned char )((4 << 3) | 4);
#line 2560
                        break;
                      }
#line 2560
                      while (1) {
#line 2560
                        *(jit->ip) = (unsigned char )(a.spill_pos & 0xff);
#line 2560
                        (jit->ip) ++;
#line 2560
                        break;
                      }
                    } else {
#line 2560
                      goto _L___2;
                    }
                  } else {
                    _L___2: /* CIL Label */ 
#line 2560
                    while (1) {
#line 2560
                      tmp___73 = jit->ip;
#line 2560
                      (jit->ip) ++;
#line 2560
                      *tmp___73 = (unsigned char )(((2 << 6) | (7 << 3)) | 4);
#line 2560
                      break;
                    }
#line 2560
                    while (1) {
#line 2560
                      tmp___74 = jit->ip;
#line 2560
                      (jit->ip) ++;
#line 2560
                      *tmp___74 = (unsigned char )((4 << 3) | 4);
#line 2560
                      break;
                    }
#line 2560
                    while (1) {
#line 2560
                      imb___5.val = a.spill_pos;
#line 2560
                      tmp___75 = jit->ip;
#line 2560
                      (jit->ip) ++;
#line 2560
                      *tmp___75 = imb___5.b[0];
#line 2560
                      tmp___76 = jit->ip;
#line 2560
                      (jit->ip) ++;
#line 2560
                      *tmp___76 = imb___5.b[1];
#line 2560
                      tmp___77 = jit->ip;
#line 2560
                      (jit->ip) ++;
#line 2560
                      *tmp___77 = imb___5.b[2];
#line 2560
                      tmp___78 = jit->ip;
#line 2560
                      (jit->ip) ++;
#line 2560
                      *tmp___78 = imb___5.b[3];
#line 2560
                      break;
                    }
                  }
#line 2560
                  break;
                }
#line 2560
                if (a.spill_pos == 0) {

                }
#line 2560
                if ((jit_value )a.spill_pos >= -128L) {
#line 2560
                  if ((jit_value )a.spill_pos <= 127L) {
#line 2560
                    while (1) {
#line 2560
                      tmp___80 = jit->ip;
#line 2560
                      (jit->ip) ++;
#line 2560
                      *tmp___80 = (unsigned char )(((1 << 6) | (7 << 3)) | 5);
#line 2560
                      break;
                    }
#line 2560
                    while (1) {
#line 2560
                      *(jit->ip) = (unsigned char )(a.spill_pos & 0xff);
#line 2560
                      (jit->ip) ++;
#line 2560
                      break;
                    }
                  } else {
#line 2560
                    goto _L___3;
                  }
                } else {
                  _L___3: /* CIL Label */ 
#line 2560
                  while (1) {
#line 2560
                    tmp___81 = jit->ip;
#line 2560
                    (jit->ip) ++;
#line 2560
                    *tmp___81 = (unsigned char )(((2 << 6) | (7 << 3)) | 5);
#line 2560
                    break;
                  }
#line 2560
                  while (1) {
#line 2560
                    imb___6.val = a.spill_pos;
#line 2560
                    tmp___82 = jit->ip;
#line 2560
                    (jit->ip) ++;
#line 2560
                    *tmp___82 = imb___6.b[0];
#line 2560
                    tmp___83 = jit->ip;
#line 2560
                    (jit->ip) ++;
#line 2560
                    *tmp___83 = imb___6.b[1];
#line 2560
                    tmp___84 = jit->ip;
#line 2560
                    (jit->ip) ++;
#line 2560
                    *tmp___84 = imb___6.b[2];
#line 2560
                    tmp___85 = jit->ip;
#line 2560
                    (jit->ip) ++;
#line 2560
                    *tmp___85 = imb___6.b[3];
#line 2560
                    break;
                  }
                }
#line 2560
                break;
              }
#line 2560
              break;
            }
#line 2560
            break;
          }
        }
      }
    }
#line 2553
    i ++;
  }
#line 2564
  return;
}
}
/* END FUNCTION-DEF emit_prolog_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF __isctype LOC=UNKNOWN */
__inline __darwin_ct_rune_t __isctype(__darwin_ct_rune_t _c , unsigned long _f ) 
{ 
  int tmp ;

  {
#line 169
  if (_c < 0) {
#line 169
    tmp = 0;
  } else
#line 169
  if (_c >= 1 << 8) {
#line 169
    tmp = 0;
  } else {
#line 169 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
    tmp = ! (! ((unsigned long )_DefaultRuneLocale.__runetype[_c] & _f));
  }
#line 169
  return (tmp);
}
}
/* END FUNCTION-DEF __isctype LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF compiler_based_debugger LOC=UNKNOWN */
static void compiler_based_debugger(struct jit *jit ) 
{ 
  char obj_file_name[12] ;
  int obj_file_fd ;
  int tmp ;
  char *cmd1_fmt ;
  char *cmd2_fmt ;
  size_t tmp___0 ;
  size_t tmp___1 ;
  size_t tmp___2 ;
  size_t tmp___3 ;
  size_t tmp___4 ;
  size_t tmp___5 ;
  size_t tmp___6 ;
  size_t tmp___7 ;
  size_t tmp___8 ;
  size_t tmp___9 ;
  size_t tmp___10 ;
  size_t tmp___11 ;
  unsigned long long tmp___12 ;
  FILE *f ;
  FILE *tmp___13 ;
  int size ;
  int i ;
  unsigned long long tmp___14 ;

  {
#line 4122 "./jitter-Darwin-X86-64.c"
  obj_file_name[0] = (char )'m';
#line 4122
  obj_file_name[1] = (char )'y';
#line 4122
  obj_file_name[2] = (char )'j';
#line 4122
  obj_file_name[3] = (char )'i';
#line 4122
  obj_file_name[4] = (char )'t';
#line 4122
  obj_file_name[5] = (char )'X';
#line 4122
  obj_file_name[6] = (char )'X';
#line 4122
  obj_file_name[7] = (char )'X';
#line 4122
  obj_file_name[8] = (char )'X';
#line 4122
  obj_file_name[9] = (char )'X';
#line 4122
  obj_file_name[10] = (char )'X';
#line 4122
  obj_file_name[11] = (char )'\000';
#line 4123
  tmp = mkstemp(obj_file_name);
#line 4123
  obj_file_fd = tmp;
#line 4124
  cmd1_fmt = "cc -x assembler -c -o %s -";
#line 4125
  cmd2_fmt = "otool -tvVj %s";
#line 4128
  tmp___0 = strlen((char const   *)cmd1_fmt);
#line 4128
  tmp___1 = strlen((char const   *)(obj_file_name));
#line 4128
  char cmd1[(tmp___0 + tmp___1) + 1UL] ;
#line 4129
  tmp___6 = strlen((char const   *)cmd2_fmt);
#line 4129
  tmp___7 = strlen((char const   *)(obj_file_name));
#line 4129
  char cmd2[(tmp___6 + tmp___7) + 1UL] ;
#line 4131
  tmp___12 = __builtin_object_size((void *)(cmd1), 1);
#line 4131
  __builtin___sprintf_chk(cmd1, 0, tmp___12, (char const   *)cmd1_fmt, obj_file_name);
#line 4133
  tmp___13 = popen((char const   *)(cmd1), (char const   *)"w");
#line 4133
  f = tmp___13;
#line 4135
  size = (int )(jit->ip - jit->buf);
#line 4136
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".text\n.align 4\n.globl main\n\nmain:\n");
#line 4137
  i = 0;
#line 4137
  while (i < size) {
#line 4138
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".byte 0x%x\n",
            (unsigned int )*(jit->buf + i));
#line 4137
    i ++;
  }
#line 4140
  pclose(f);
#line 4143
  tmp___14 = __builtin_object_size((void *)(cmd2), 1);
#line 4143
  __builtin___sprintf_chk(cmd2, 0, tmp___14, (char const   *)cmd2_fmt, obj_file_name);
#line 4144
  system((char const   *)(cmd2));
#line 4146
  close(obj_file_fd);
#line 4147
  unlink((char const   *)(obj_file_name));
#line 4148
  return;
}
}
/* END FUNCTION-DEF compiler_based_debugger LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_correct_long_imms LOC=UNKNOWN */
static void jit_correct_long_imms(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  int imm_arg ;
  int i ;
  jit_value value ;
  jit_op *newop ;
  struct jit_op *tmp___0 ;
  int tmp___1 ;

  {
#line 5881
  tmp = jit_op_first(jit->ops);
#line 5881
  op = tmp;
#line 5881
  while ((unsigned long )op != (unsigned long )((void *)0)) {
#line 5882
    if (! ((int )op->code & 0x02)) {
#line 5882
      goto __Cont;
    }
#line 5883
    if (op->fp) {
#line 5883
      goto __Cont;
    }
#line 5884
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 384U) {
#line 5884
      goto __Cont;
    }
#line 5886
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 416U) {
#line 5886
      goto __Cont;
    }
#line 5887
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 400U) {
#line 5887
      goto __Cont;
    }
#line 5888
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 256U) {
#line 5888
      goto __Cont;
    }
#line 5890
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 144U) {
#line 5890
      goto __Cont;
    }
#line 5891
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1920U) {
#line 5891
      goto __Cont;
    }
#line 5892
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1928U) {
#line 5892
      goto __Cont;
    }
#line 5893
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1424U) {
#line 5893
      goto __Cont;
    }
#line 5894
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1432U) {
#line 5894
      goto __Cont;
    }
#line 5895
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1456U) {
#line 5895
      goto __Cont;
    }
#line 5896
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1448U) {
#line 5896
      goto __Cont;
    }
#line 5897
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 4104U) {
#line 5897
      goto __Cont;
    }
#line 5898
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 4112U) {
#line 5898
      goto __Cont;
    }
#line 5899
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 128U) {
#line 5903
      goto __Cont;
    }
#line 5906
    i = 1;
#line 5906
    while (i < 4) {
#line 5907
      if ((((int )op->spec >> (i - 1) * 2) & 0x03) == 0x02) {
#line 5907
        imm_arg = i - 1;
      }
#line 5906
      i ++;
    }
#line 5908
    value = op->arg[imm_arg];
#line 5910
    tmp___1 = jit_imm_overflow(jit, op, value);
#line 5910
    if (tmp___1) {
#line 5912
      tmp___0 = jit_op_new((unsigned short)258, (unsigned char )((0x02 << 2) | 0x03),
                           (jit_value )(1 << 1), value, (jit_value )0, (unsigned char )((int )sizeof(void *)));
#line 5912
      newop = tmp___0;
#line 5913
      jit_op_prepend(op, newop);
#line 5914
      op->code = (unsigned short )((int )op->code & -4);
#line 5915
      op->code = (unsigned short )((int )op->code | 0x01);
#line 5917
      op->spec = (unsigned char )((int )op->spec & ~ (0x3 << 2 * imm_arg));
#line 5918
      op->spec = (unsigned char )((int )op->spec | (0x01 << 2 * imm_arg));
#line 5919
      op->arg[imm_arg] = (jit_value )(1 << 1);
    }
    __Cont: /* CIL Label */ 
#line 5881
    op = op->next;
  }
#line 5922
  return;
}
}
/* END FUNCTION-DEF jit_correct_long_imms LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_free LOC=UNKNOWN */
static void rmap_free(jit_rmap *regmap ) 
{ 


  {
#line 2062
  if (! regmap) {
#line 2062
    return;
  }
#line 2063
  jit_tree_free(regmap->map);
#line 2064
  free((void *)regmap);
#line 2065
  return;
}
}
/* END FUNCTION-DEF rmap_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF branch_adjustment LOC=UNKNOWN */
__inline static void branch_adjustment(struct jit *jit , jit_op *op ) 
{ 
  int tmp ;
  jit_rmap *cur_regmap ;
  jit_rmap *tgt_regmap ;
  jit_op *o ;
  struct jit_op *tmp___0 ;
  int tmp___1 ;
  jit_op *o2 ;
  struct jit_op *tmp___2 ;
  int tmp___3 ;

  {
#line 5656
  tmp = jit_op_is_cond_branch(op);
#line 5656
  if (! tmp) {
#line 5656
    return;
  }
#line 5657
  cur_regmap = op->regmap;
#line 5658
  tgt_regmap = (op->jmp_addr)->regmap;
#line 5660
  tmp___3 = rmap_equal(op, cur_regmap, tgt_regmap);
#line 5660
  if (! tmp___3) {
#line 5665
    switch ((unsigned int )((jit_opcode )((int )op->code & 0xfff8))) {
    case 928U: 
#line 5666
    op->code = (unsigned short )(936 | ((int )op->code & 0x7));
#line 5666
    break;
    case 912U: 
#line 5667
    op->code = (unsigned short )(904 | ((int )op->code & 0x7));
#line 5667
    break;
    case 920U: 
#line 5668
    op->code = (unsigned short )(896 | ((int )op->code & 0x7));
#line 5668
    break;
    case 936U: 
#line 5669
    op->code = (unsigned short )(928 | ((int )op->code & 0x7));
#line 5669
    break;
    case 896U: 
#line 5670
    op->code = (unsigned short )(920 | ((int )op->code & 0x7));
#line 5670
    break;
    case 904U: 
#line 5671
    op->code = (unsigned short )(912 | ((int )op->code & 0x7));
#line 5671
    break;
    case 960U: 
#line 5673
    op->code = (unsigned short )(976 | ((int )op->code & 0x7));
#line 5673
    break;
    case 968U: 
#line 5674
    op->code = (unsigned short )(984 | ((int )op->code & 0x7));
#line 5674
    break;
    case 976U: 
#line 5675
    op->code = (unsigned short )(960 | ((int )op->code & 0x7));
#line 5675
    break;
    case 984U: 
#line 5676
    op->code = (unsigned short )(968 | ((int )op->code & 0x7));
#line 5676
    break;
    case 1184U: 
#line 5678
    op->code = (unsigned short )(1192 | ((int )op->code & 0x7));
#line 5678
    break;
    case 1168U: 
#line 5679
    op->code = (unsigned short )(1160 | ((int )op->code & 0x7));
#line 5679
    break;
    case 1176U: 
#line 5680
    op->code = (unsigned short )(1152 | ((int )op->code & 0x7));
#line 5680
    break;
    case 1192U: 
#line 5681
    op->code = (unsigned short )(1184 | ((int )op->code & 0x7));
#line 5681
    break;
    case 1152U: 
#line 5682
    op->code = (unsigned short )(1176 | ((int )op->code & 0x7));
#line 5682
    break;
    case 1160U: 
#line 5683
    op->code = (unsigned short )(1168 | ((int )op->code & 0x7));
#line 5683
    break;
    default: 
#line 5684
    break;
    }
#line 5687
    tmp___0 = jit_op_new((unsigned short)386, (unsigned char)2, op->arg[0], (jit_value )0,
                         (jit_value )0, (unsigned char)0);
#line 5687
    o = tmp___0;
#line 5688
    o->r_arg[0] = op->r_arg[0];
#line 5690
    o->regmap = rmap_clone(op->regmap);
#line 5692
    o->live_in = jit_set_clone(op->live_in);
#line 5693
    o->live_out = jit_set_clone(op->live_out);
#line 5694
    o->jmp_addr = op->jmp_addr;
#line 5696
    tmp___1 = jit_is_label(jit, (void *)op->r_arg[0]);
#line 5696
    if (! tmp___1) {
#line 5697
      (op->jmp_addr)->arg[0] = (jit_value )o;
#line 5698
      (op->jmp_addr)->r_arg[0] = (jit_value )o;
    }
#line 5701
    jit_op_append(op, o);
#line 5703
    tmp___2 = jit_op_new((unsigned short)144, (unsigned char)2, (jit_value )op, (jit_value )0,
                         (jit_value )0, (unsigned char)0);
#line 5703
    o2 = tmp___2;
#line 5704
    o2->r_arg[0] = o2->arg[0];
#line 5705
    jit_op_append(o, o2);
#line 5707
    op->arg[0] = (jit_value )o2;
#line 5708
    op->r_arg[0] = (jit_value )o2;
#line 5709
    op->jmp_addr = o2;
  }
#line 5711
  return;
}
}
/* END FUNCTION-DEF branch_adjustment LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_save_all_regs LOC=UNKNOWN */
static void emit_save_all_regs(struct jit *jit , jit_op *op ) 
{ 
  struct jit_reg_allocator *al ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp ;
  unsigned char *tmp___0 ;
  int i ;
  jit_hw_reg *reg ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  int tmp___4 ;
  int i___0 ;
  jit_hw_reg *reg___0 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  x86_imm_buf imb ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  int tmp___48 ;
  int alignment ;
  int tmp___49 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char _amd64_rex_bits___6 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char _amd64_rex_bits___7 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;

  {
#line 2916
  al = jit->reg_al;
#line 2918
  while (1) {
#line 2918
    while (1) {
#line 2918
      _amd64_rex_bits = (unsigned char)8;
#line 2918
      if ((int )_amd64_rex_bits != 0) {
#line 2918
        tmp = jit->ip;
#line 2918
        (jit->ip) ++;
#line 2918
        *tmp = (unsigned char )(0x40 | (int )_amd64_rex_bits);
      }
#line 2918
      break;
    }
#line 2918
    while (1) {
#line 2918
      tmp___0 = jit->ip;
#line 2918
      (jit->ip) ++;
#line 2918
      *tmp___0 = (unsigned char)156;
#line 2918
      break;
    }
#line 2918
    break;
  }
#line 2920
  i = 0;
#line 2920
  while (i < al->gp_reg_cnt) {
#line 2921
    reg = al->gp_regs + i;
#line 2922
    if (! reg->callee_saved) {
#line 2922
      tmp___4 = is_active_register(al, reg, op);
#line 2922
      if (tmp___4) {
#line 2923
        while (1) {
#line 2923
          while (1) {
#line 2923
            if (reg->id > 7) {
#line 2923
              tmp___1 = 1;
            } else {
#line 2923
              tmp___1 = 0;
            }
#line 2923
            _amd64_rex_bits___0 = (unsigned char )tmp___1;
#line 2923
            if ((int )_amd64_rex_bits___0 != 0) {
#line 2923
              tmp___2 = jit->ip;
#line 2923
              (jit->ip) ++;
#line 2923
              *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
            }
#line 2923
            break;
          }
#line 2923
          tmp___3 = jit->ip;
#line 2923
          (jit->ip) ++;
#line 2923
          *tmp___3 = (unsigned char )(80 + (reg->id & 0x7));
#line 2923
          break;
        }
      }
    }
#line 2920
    i ++;
  }
#line 2926
  i___0 = 0;
#line 2926
  while (i___0 < al->fp_reg_cnt) {
#line 2927
    reg___0 = al->fp_regs + i___0;
#line 2928
    if (! reg___0->callee_saved) {
#line 2928
      tmp___48 = is_active_register(al, reg___0, op);
#line 2928
      if (tmp___48) {
#line 2929
        while (1) {
#line 2929
          while (1) {
#line 2929
            _amd64_rex_bits___1 = (unsigned char)8;
#line 2929
            if ((int )_amd64_rex_bits___1 != 0) {
#line 2929
              tmp___5 = jit->ip;
#line 2929
              (jit->ip) ++;
#line 2929
              *tmp___5 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
            }
#line 2929
            break;
          }
#line 2929
          tmp___6 = jit->ip;
#line 2929
          (jit->ip) ++;
#line 2929
          *tmp___6 = (unsigned char)131;
#line 2929
          while (1) {
#line 2929
            while (1) {
#line 2929
              tmp___7 = jit->ip;
#line 2929
              (jit->ip) ++;
#line 2929
              *tmp___7 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
#line 2929
              break;
            }
#line 2929
            break;
          }
#line 2929
          while (1) {
#line 2929
            *(jit->ip) = (unsigned char)8;
#line 2929
            (jit->ip) ++;
#line 2929
            break;
          }
#line 2929
          break;
        }
#line 2929
        while (1) {
#line 2929
          tmp___21 = jit->ip;
#line 2929
          (jit->ip) ++;
#line 2929
          *tmp___21 = (unsigned char)102;
#line 2929
          while (1) {
#line 2929
            if (reg___0->id > 7) {
#line 2929
              tmp___22 = 4;
            } else {
#line 2929
              tmp___22 = 0;
            }
#line 2929
            _amd64_rex_bits___4 = (unsigned char )tmp___22;
#line 2929
            if ((int )_amd64_rex_bits___4 != 0) {
#line 2929
              tmp___23 = jit->ip;
#line 2929
              (jit->ip) ++;
#line 2929
              *tmp___23 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
            }
#line 2929
            break;
          }
#line 2929
          tmp___24 = jit->ip;
#line 2929
          (jit->ip) ++;
#line 2929
          *tmp___24 = (unsigned char)15;
#line 2929
          tmp___25 = jit->ip;
#line 2929
          (jit->ip) ++;
#line 2929
          *tmp___25 = (unsigned char)19;
#line 2929
          while (1) {
#line 2929
            while (1) {
#line 2929
              while (1) {
#line 2929
                tmp___31 = jit->ip;
#line 2929
                (jit->ip) ++;
#line 2929
                *tmp___31 = (unsigned char )((((reg___0->id & 0x7) & 0x07) << 3) | 4);
#line 2929
                break;
              }
#line 2929
              while (1) {
#line 2929
                tmp___32 = jit->ip;
#line 2929
                (jit->ip) ++;
#line 2929
                *tmp___32 = (unsigned char )((4 << 3) | 4);
#line 2929
                break;
              }
#line 2929
              break;
#line 2929
              while (1) {
#line 2929
                tmp___41 = jit->ip;
#line 2929
                (jit->ip) ++;
#line 2929
                *tmp___41 = (unsigned char )((((reg___0->id & 0x7) & 0x07) << 3) | 4);
#line 2929
                break;
              }
#line 2929
              break;
#line 2929
              while (1) {
#line 2929
                tmp___42 = jit->ip;
#line 2929
                (jit->ip) ++;
#line 2929
                *tmp___42 = (unsigned char )(((1 << 6) | (((reg___0->id & 0x7) & 0x07) << 3)) | 4);
#line 2929
                break;
              }
#line 2929
              while (1) {
#line 2929
                *(jit->ip) = (unsigned char)0;
#line 2929
                (jit->ip) ++;
#line 2929
                break;
              }
#line 2929
              break;
            }
#line 2929
            break;
          }
#line 2929
          break;
        }
      }
    }
#line 2929
    while (1) {
#line 2929
      break;
    }
#line 2926
    i___0 ++;
  }
#line 2932
  tmp___49 = required_stack_space_for_regs(jit, op);
#line 2932
  alignment = tmp___49 % 16;
#line 2933
  if (alignment != 0) {
#line 2933
    while (1) {
#line 2933
      if ((jit_value )(16 - alignment) >= -128L) {
#line 2933
        if ((jit_value )(16 - alignment) <= 127L) {
#line 2933
          while (1) {
#line 2933
            _amd64_rex_bits___5 = (unsigned char)8;
#line 2933
            if ((int )_amd64_rex_bits___5 != 0) {
#line 2933
              tmp___50 = jit->ip;
#line 2933
              (jit->ip) ++;
#line 2933
              *tmp___50 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
            }
#line 2933
            break;
          }
#line 2933
          tmp___51 = jit->ip;
#line 2933
          (jit->ip) ++;
#line 2933
          *tmp___51 = (unsigned char)131;
#line 2933
          while (1) {
#line 2933
            while (1) {
#line 2933
              tmp___52 = jit->ip;
#line 2933
              (jit->ip) ++;
#line 2933
              *tmp___52 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
#line 2933
              break;
            }
#line 2933
            break;
          }
#line 2933
          while (1) {
#line 2933
            *(jit->ip) = (unsigned char )((16 - alignment) & 0xff);
#line 2933
            (jit->ip) ++;
#line 2933
            break;
          }
        } else {
#line 2933
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
#line 2933
        while (1) {
#line 2933
          _amd64_rex_bits___7 = (unsigned char)8;
#line 2933
          if ((int )_amd64_rex_bits___7 != 0) {
#line 2933
            tmp___59 = jit->ip;
#line 2933
            (jit->ip) ++;
#line 2933
            *tmp___59 = (unsigned char )(0x40 | (int )_amd64_rex_bits___7);
          }
#line 2933
          break;
        }
#line 2933
        tmp___60 = jit->ip;
#line 2933
        (jit->ip) ++;
#line 2933
        *tmp___60 = (unsigned char)129;
#line 2933
        while (1) {
#line 2933
          while (1) {
#line 2933
            tmp___61 = jit->ip;
#line 2933
            (jit->ip) ++;
#line 2933
            *tmp___61 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
#line 2933
            break;
          }
#line 2933
          break;
        }
#line 2933
        while (1) {
#line 2933
          imb___5.val = 16 - alignment;
#line 2933
          tmp___62 = jit->ip;
#line 2933
          (jit->ip) ++;
#line 2933
          *tmp___62 = imb___5.b[0];
#line 2933
          tmp___63 = jit->ip;
#line 2933
          (jit->ip) ++;
#line 2933
          *tmp___63 = imb___5.b[1];
#line 2933
          tmp___64 = jit->ip;
#line 2933
          (jit->ip) ++;
#line 2933
          *tmp___64 = imb___5.b[2];
#line 2933
          tmp___65 = jit->ip;
#line 2933
          (jit->ip) ++;
#line 2933
          *tmp___65 = imb___5.b[3];
#line 2933
          break;
        }
      }
#line 2933
      break;
    }
  }
#line 2934
  return;
}
}
/* END FUNCTION-DEF emit_save_all_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF force_assoc LOC=UNKNOWN */
static int force_assoc(jit_op *op , struct jit_reg_allocator *al ) 
{ 
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp ;

  {
#line 5432
  if (op->arg[1] == 0L) {
#line 5432
    tmp = al->gp_regs + op->arg[2];
  } else {
#line 5432
    tmp = al->fp_regs + op->arg[2];
  }
#line 5432
  hreg = tmp;
#line 5433
  rmap_assoc(op->regmap, op->arg[0], hreg);
#line 5435
  load_reg(op, hreg, op->arg[0]);
#line 5436
  return (1);
}
}
/* END FUNCTION-DEF force_assoc LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_current_func_info LOC=UNKNOWN */
__inline static struct jit_func_info *jit_current_func_info(struct jit *jit ) 
{ 


  {
#line 913
  return ((struct jit_func_info *)(jit->current_func)->arg[1]);
}
}
/* END FUNCTION-DEF jit_current_func_info LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF force_spill LOC=UNKNOWN */
static int force_spill(jit_op *op ) 
{ 
  jit_value reg ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp ;

  {
#line 5421
  reg = op->arg[0];
#line 5422
  tmp = rmap_get(op->regmap, reg);
#line 5422
  hreg = tmp;
#line 5423
  if (hreg) {
#line 5424
    unload_reg(op, hreg, reg);
#line 5425
    rmap_unassoc(op->regmap, reg);
  }
#line 5427
  return (1);
}
}
/* END FUNCTION-DEF force_spill LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF is_suitable_mul LOC=UNKNOWN */
__inline static int is_suitable_mul(jit_op *op ) 
{ 
  jit_value arg ;
  int tmp ;

  {
#line 2215
  arg = op->arg[2];
#line 2216
  if ((int )op->code == 578) {
#line 2216
    if (arg == 2L) {
#line 2216
      tmp = 1;
    } else
#line 2216
    if (arg == 4L) {
#line 2216
      tmp = 1;
    } else
#line 2216
    if (arg == 8L) {
#line 2216
      tmp = 1;
    } else {
#line 2216
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
#line 2216
  if ((int )op->code == 666) {
#line 2216
    if (arg == 1L) {
#line 2216
      tmp = 1;
    } else
#line 2216
    if (arg == 2L) {
#line 2216
      tmp = 1;
    } else
#line 2216
    if (arg == 3L) {
#line 2216
      tmp = 1;
    } else {
#line 2216
      tmp = 0;
    }
  } else {
#line 2216
    tmp = 0;
  }
#line 2216
  return (tmp);
}
}
/* END FUNCTION-DEF is_suitable_mul LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF __istype LOC=UNKNOWN */
__inline int __istype(__darwin_ct_rune_t _c , unsigned long _f ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
#line 158 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h"
  tmp___3 = isascii(_c);
#line 158
  if (tmp___3) {
#line 158
    tmp___2 = ! (! ((unsigned long )_DefaultRuneLocale.__runetype[_c] & _f));
  } else {
#line 158
    tmp___0 = __maskrune(_c, _f);
#line 158
    if (tmp___0) {
#line 158
      tmp___1 = 1;
    } else {
#line 158
      tmp___1 = 0;
    }
#line 158
    tmp___2 = tmp___1;
  }
#line 158
  return (tmp___2);
}
}
/* END FUNCTION-DEF __istype LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_op LOC=UNKNOWN */
int print_op(FILE *f , struct jit_disasm *disasm , struct jit_op *op , jit_tree *labels ,
             int verbosity ) 
{ 
  struct output_buf *linebuf ;
  struct output_buf *tmp ;
  jit_tree *lab ;
  jit_tree *tmp___0 ;
  long tmp___1 ;
  char *op_name ;
  char *tmp___2 ;
  int tmp___3 ;
  int i ;
  long tmp___4 ;
  int len ;
  size_t tmp___5 ;

  {
#line 4498 "./jitter-Darwin-X86-64.c"
  tmp = ob_new();
#line 4498
  linebuf = tmp;
#line 4500
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 136U) {
#line 4500
    goto _L;
  } else
#line 4500
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 144U) {
    _L: /* CIL Label */ 
#line 4501
    tmp___0 = jit_tree_search(labels, op->arg[0]);
#line 4501
    lab = tmp___0;
#line 4502
    if (lab) {
#line 4503
      if ((long )lab->value < 0L) {
#line 4503
        tmp___1 = - ((long )lab->value);
      } else {
#line 4503
        tmp___1 = (long )lab->value;
      }
#line 4503
      ob_printf(linebuf, (char const   *)disasm->label_template, tmp___1);
#line 4504
      ob_printf(linebuf, (char const   *)":");
    }
#line 4506
    goto print;
  }
#line 4509
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 1928U) {
#line 4510
    print_comment(linebuf, op);
#line 4511
    goto print;
  }
#line 4514
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 4112U) {
#line 4515
    ob_append(linebuf, disasm->indent_template);
#line 4516
    ob_append(linebuf, ".trace");
#line 4517
    goto print;
  }
#line 4521
  tmp___2 = jit_get_op_name(op);
#line 4521
  op_name = tmp___2;
#line 4522
  if ((int )*(op_name + 0) == 46) {
#line 4522
    if (verbosity & 0x100) {
#line 4523
      tmp___3 = print_load_op(disasm, linebuf, op);
#line 4523
      if (tmp___3) {
#line 4523
        goto print;
      }
    }
  }
#line 4526
  ob_append(linebuf, disasm->indent_template);
#line 4527
  if ((int )*(op_name + 0) == 46) {
#line 4528
    switch ((unsigned int )((jit_opcode )((int )op->code & 0xfff8))) {
    case 1440U: 
    case 1408U: 
#line 4531
    ob_printf(linebuf, (char const   *)"%s ", op_name);
#line 4532
    ob_pad(linebuf, 13);
#line 4533
    ob_printf(linebuf, (char const   *)disasm->generic_value_template, op->arg[0]);
#line 4534
    goto print;
    case 1416U: 
#line 4536
    ob_printf(linebuf, (char const   *)"%s ", op_name);
#line 4537
    ob_pad(linebuf, 13);
#line 4538
    i = 0;
#line 4538
    while ((jit_value )i < op->arg[0]) {
#line 4539
      ob_printf(linebuf, (char const   *)disasm->generic_value_template, (int )*((unsigned char *)op->addendum + i));
#line 4540
      ob_printf(linebuf, (char const   *)" ");
#line 4538
      i ++;
    }
#line 4542
    goto print;
    case 1432U: 
    case 1424U: 
#line 4546
    ob_printf(linebuf, (char const   *)"%s ", op_name);
#line 4547
    ob_pad(linebuf, 13);
#line 4548
    print_addr(disasm, linebuf, labels, op, 0);
#line 4549
    goto print;
    default: 
#line 4551
    goto print;
    }
  }
#line 4555
  print_full_op_name(linebuf, op);
#line 4557
  ob_pad(linebuf, 12);
#line 4559
  if ((int )op->arg_size == 1) {
#line 4559
    ob_append(linebuf, " (byte)");
  }
#line 4560
  if ((int )op->arg_size == 2) {
#line 4560
    ob_append(linebuf, " (word)");
  }
#line 4561
  if ((int )op->arg_size == 4) {
#line 4561
    ob_append(linebuf, " (dword)");
  }
#line 4562
  if ((int )op->arg_size == 8) {
#line 4562
    ob_append(linebuf, " (qword)");
  }
#line 4564
  switch ((unsigned int )((jit_opcode )((int )op->code & 0xfff8))) {
  case 392U: 
#line 4565
  break;
  case 1920U: 
#line 4567
  print_str(linebuf, (char *)op->arg[0]);
#line 4568
  if (! ((int )op->code & 0x02)) {
#line 4569
    ob_append(linebuf, ", ");
#line 4570
    print_arg(disasm, linebuf, op, 2);
  }
#line 4572
  break;
  case 1456U: 
  case 1448U: 
#line 4575
  ob_append(linebuf, " ");
#line 4576
  print_arg(disasm, linebuf, op, 1);
#line 4577
  ob_append(linebuf, ", ");
#line 4578
  print_addr(disasm, linebuf, labels, op, 1);
#line 4579
  break;
  case 152U: 
#line 4581
  switch (op->arg[0]) {
  case 0L: 
#line 4582
  ob_append(linebuf, " integer");
#line 4582
  break;
  case 1L: 
#line 4583
  ob_append(linebuf, " uns. integer");
#line 4583
  break;
  case 2L: 
#line 4584
  ob_append(linebuf, " float");
#line 4584
  break;
  case 3L: 
#line 4585
  ob_append(linebuf, " ptr");
#line 4585
  break;
  default: 
#line 4586
  tmp___4 = __builtin_expect(1L, 0L);
#line 4586
  if (tmp___4) {
#line 4586
    __assert_rtn((char const   *)"print_op", (char const   *)"./jitter-Darwin-X86-64.c",
                 4586, (char const   *)"0");
  }
  }
#line 4588
  ob_append(linebuf, ", ");
#line 4589
  print_arg(disasm, linebuf, op, 2);
#line 4590
  break;
  default: 
#line 4592
  print_args(disasm, linebuf, op, labels);
  }
  print: 
#line 4595
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"%s", linebuf->buf);
#line 4596
  tmp___5 = strlen((char const   *)linebuf->buf);
#line 4596
  len = (int )tmp___5;
#line 4597
  ob_free(linebuf);
#line 4598
  return (len);
}
}
/* END FUNCTION-DEF print_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF prepare_labels LOC=UNKNOWN */
static jit_tree *prepare_labels(struct jit *jit ) 
{ 
  long x ;
  jit_tree *n ;
  jit_op *op ;
  jit_op *tmp ;

  {
#line 4360
  x = 1L;
#line 4361
  n = (jit_tree *)((void *)0);
#line 4362
  tmp = jit_op_first(jit->ops);
#line 4362
  op = tmp;
#line 4362
  while ((unsigned long )op != (unsigned long )((void *)0)) {
#line 4363
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 144U) {
#line 4364
      n = jit_tree_insert(n, (long )op, (void *)x, (int *)((void *)0));
#line 4365
      n = jit_tree_insert(n, op->arg[0], (void *)(- x), (int *)((void *)0));
#line 4366
      x ++;
    }
#line 4368
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 136U) {
#line 4369
      n = jit_tree_insert(n, op->arg[0], (void *)x, (int *)((void *)0));
#line 4370
      x ++;
    }
#line 4362
    op = op->next;
  }
#line 4373
  return (n);
}
}
/* END FUNCTION-DEF prepare_labels LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_transfer_loop LOC=UNKNOWN */
static void emit_transfer_loop(struct jit *jit , jit_op *op ) 
{ 
  struct transfer_info *tinf ;
  jit_value loop ;
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  long tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  x86_imm_buf imb ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___42 ;
  int offset ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___53 ;
  int tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  long tmp___58 ;
  unsigned char *tmp___59 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___82 ;
  int tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  long tmp___87 ;
  unsigned char *tmp___88 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;

  {
#line 3481
  tinf = (struct transfer_info *)op->addendum;
#line 3482
  loop = (jit_value )tinf->loop_addr;
#line 3484
  while (1) {
#line 3484
    if (tinf->block_size == 2) {
#line 3484
      tmp = jit->ip;
#line 3484
      (jit->ip) ++;
#line 3484
      *tmp = (unsigned char)102;
    }
#line 3484
    while (1) {
#line 3484
      if (tinf->block_size > 4) {
#line 3484
        tmp___0 = 8;
      } else {
#line 3484
        tmp___0 = 0;
      }
#line 3484
      if (tinf->scrapreg > 7) {
#line 3484
        tmp___1 = 4;
      } else {
#line 3484
        tmp___1 = 0;
      }
#line 3484
      if (tinf->counterreg > 7) {
#line 3484
        tmp___2 = 2;
      } else {
#line 3484
        tmp___2 = 0;
      }
#line 3484
      if (tinf->destreg > 7) {
#line 3484
        tmp___3 = 1;
      } else {
#line 3484
        tmp___3 = 0;
      }
#line 3484
      _amd64_rex_bits = (unsigned char )(((tmp___0 | tmp___1) | tmp___2) | tmp___3);
#line 3484
      if ((int )_amd64_rex_bits != 0) {
#line 3484
        tmp___4 = jit->ip;
#line 3484
        (jit->ip) ++;
#line 3484
        *tmp___4 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
      } else
#line 3484
      if (tinf->block_size == 1) {
#line 3484
        tmp___4 = jit->ip;
#line 3484
        (jit->ip) ++;
#line 3484
        *tmp___4 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
      }
#line 3484
      break;
    }
#line 3484
    switch (tinf->block_size) {
    case 1: 
#line 3484
    tmp___5 = jit->ip;
#line 3484
    (jit->ip) ++;
#line 3484
    *tmp___5 = (unsigned char)136;
#line 3484
    break;
    case 8: 
    case 4: 
    case 2: 
#line 3484
    tmp___6 = jit->ip;
#line 3484
    (jit->ip) ++;
#line 3484
    *tmp___6 = (unsigned char)137;
#line 3484
    break;
    default: 
#line 3484
    tmp___7 = __builtin_expect(1L, 0L);
#line 3484
    if (tmp___7) {
#line 3484
      __assert_rtn((char const   *)"emit_transfer_loop", (char const   *)"./jitter-Darwin-X86-64.c",
                   3484, (char const   *)"0");
    }
    }
#line 3484
    while (1) {
#line 3484
      if ((tinf->destreg & 0x7) == -1) {
#line 3484
        while (1) {
#line 3484
          tmp___8 = jit->ip;
#line 3484
          (jit->ip) ++;
#line 3484
          *tmp___8 = (unsigned char )((((tinf->scrapreg & 0x7) & 0x07) << 3) | 4);
#line 3484
          break;
        }
#line 3484
        while (1) {
#line 3484
          tmp___9 = jit->ip;
#line 3484
          (jit->ip) ++;
#line 3484
          *tmp___9 = (unsigned char )((((tinf->counterreg & 0x7) & 0x07) << 3) | 5);
#line 3484
          break;
        }
#line 3484
        while (1) {
#line 3484
          imb.val = - tinf->block_size;
#line 3484
          tmp___10 = jit->ip;
#line 3484
          (jit->ip) ++;
#line 3484
          *tmp___10 = imb.b[0];
#line 3484
          tmp___11 = jit->ip;
#line 3484
          (jit->ip) ++;
#line 3484
          *tmp___11 = imb.b[1];
#line 3484
          tmp___12 = jit->ip;
#line 3484
          (jit->ip) ++;
#line 3484
          *tmp___12 = imb.b[2];
#line 3484
          tmp___13 = jit->ip;
#line 3484
          (jit->ip) ++;
#line 3484
          *tmp___13 = imb.b[3];
#line 3484
          break;
        }
      } else
#line 3484
      if (- tinf->block_size == 0) {
#line 3484
        if ((tinf->destreg & 0x7) != 5) {
#line 3484
          while (1) {
#line 3484
            tmp___14 = jit->ip;
#line 3484
            (jit->ip) ++;
#line 3484
            *tmp___14 = (unsigned char )((((tinf->scrapreg & 0x7) & 0x07) << 3) | 4);
#line 3484
            break;
          }
#line 3484
          while (1) {
#line 3484
            tmp___15 = jit->ip;
#line 3484
            (jit->ip) ++;
#line 3484
            *tmp___15 = (unsigned char )(((((tinf->counterreg & 0x7) & 0x7) & 0x07) << 3) | (((tinf->destreg & 0x7) & 0x7) & 0x07));
#line 3484
            break;
          }
        } else {
#line 3484
          goto _L___0;
        }
      } else
      _L___0: /* CIL Label */ 
#line 3484
      if ((jit_value )(- tinf->block_size) >= -128L) {
#line 3484
        if ((jit_value )(- tinf->block_size) <= 127L) {
#line 3484
          while (1) {
#line 3484
            tmp___16 = jit->ip;
#line 3484
            (jit->ip) ++;
#line 3484
            *tmp___16 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3484
            break;
          }
#line 3484
          while (1) {
#line 3484
            tmp___17 = jit->ip;
#line 3484
            (jit->ip) ++;
#line 3484
            *tmp___17 = (unsigned char )(((((tinf->counterreg & 0x7) & 0x7) & 0x07) << 3) | (((tinf->destreg & 0x7) & 0x7) & 0x07));
#line 3484
            break;
          }
#line 3484
          while (1) {
#line 3484
            *(jit->ip) = (unsigned char )(- tinf->block_size & 0xff);
#line 3484
            (jit->ip) ++;
#line 3484
            break;
          }
        } else {
#line 3484
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
#line 3484
        while (1) {
#line 3484
          tmp___18 = jit->ip;
#line 3484
          (jit->ip) ++;
#line 3484
          *tmp___18 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3484
          break;
        }
#line 3484
        while (1) {
#line 3484
          tmp___19 = jit->ip;
#line 3484
          (jit->ip) ++;
#line 3484
          *tmp___19 = (unsigned char )(((((tinf->counterreg & 0x7) & 0x7) & 0x07) << 3) | (((tinf->destreg & 0x7) & 0x7) & 0x07));
#line 3484
          break;
        }
#line 3484
        while (1) {
#line 3484
          imb___0.val = - tinf->block_size;
#line 3484
          tmp___20 = jit->ip;
#line 3484
          (jit->ip) ++;
#line 3484
          *tmp___20 = imb___0.b[0];
#line 3484
          tmp___21 = jit->ip;
#line 3484
          (jit->ip) ++;
#line 3484
          *tmp___21 = imb___0.b[1];
#line 3484
          tmp___22 = jit->ip;
#line 3484
          (jit->ip) ++;
#line 3484
          *tmp___22 = imb___0.b[2];
#line 3484
          tmp___23 = jit->ip;
#line 3484
          (jit->ip) ++;
#line 3484
          *tmp___23 = imb___0.b[3];
#line 3484
          break;
        }
      }
#line 3484
      break;
    }
#line 3484
    break;
  }
#line 3485
  while (1) {
#line 3485
    if ((jit_value )tinf->block_size >= -128L) {
#line 3485
      if ((jit_value )tinf->block_size <= 127L) {
#line 3485
        while (1) {
#line 3485
          if (tinf->counterreg > 7) {
#line 3485
            tmp___24 = 1;
          } else {
#line 3485
            tmp___24 = 0;
          }
#line 3485
          _amd64_rex_bits___0 = (unsigned char )(8 | tmp___24);
#line 3485
          if ((int )_amd64_rex_bits___0 != 0) {
#line 3485
            tmp___25 = jit->ip;
#line 3485
            (jit->ip) ++;
#line 3485
            *tmp___25 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
          }
#line 3485
          break;
        }
#line 3485
        tmp___26 = jit->ip;
#line 3485
        (jit->ip) ++;
#line 3485
        *tmp___26 = (unsigned char)131;
#line 3485
        while (1) {
#line 3485
          while (1) {
#line 3485
            tmp___27 = jit->ip;
#line 3485
            (jit->ip) ++;
#line 3485
            *tmp___27 = (unsigned char )(((3 << 6) | (5 << 3)) | (tinf->counterreg & 0x07));
#line 3485
            break;
          }
#line 3485
          break;
        }
#line 3485
        while (1) {
#line 3485
          *(jit->ip) = (unsigned char )(tinf->block_size & 0xff);
#line 3485
          (jit->ip) ++;
#line 3485
          break;
        }
      } else {
#line 3485
        goto _L___1;
      }
    } else
    _L___1: /* CIL Label */ 
#line 3485
    if (tinf->counterreg == 0) {
#line 3485
      while (1) {
#line 3485
        _amd64_rex_bits___1 = (unsigned char)8;
#line 3485
        if ((int )_amd64_rex_bits___1 != 0) {
#line 3485
          tmp___28 = jit->ip;
#line 3485
          (jit->ip) ++;
#line 3485
          *tmp___28 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
        }
#line 3485
        break;
      }
#line 3485
      tmp___29 = jit->ip;
#line 3485
      (jit->ip) ++;
#line 3485
      *tmp___29 = (unsigned char )((5 << 3) + 5);
#line 3485
      while (1) {
#line 3485
        imb___1.val = tinf->block_size;
#line 3485
        tmp___30 = jit->ip;
#line 3485
        (jit->ip) ++;
#line 3485
        *tmp___30 = imb___1.b[0];
#line 3485
        tmp___31 = jit->ip;
#line 3485
        (jit->ip) ++;
#line 3485
        *tmp___31 = imb___1.b[1];
#line 3485
        tmp___32 = jit->ip;
#line 3485
        (jit->ip) ++;
#line 3485
        *tmp___32 = imb___1.b[2];
#line 3485
        tmp___33 = jit->ip;
#line 3485
        (jit->ip) ++;
#line 3485
        *tmp___33 = imb___1.b[3];
#line 3485
        break;
      }
    } else {
#line 3485
      while (1) {
#line 3485
        if (tinf->counterreg > 7) {
#line 3485
          tmp___34 = 1;
        } else {
#line 3485
          tmp___34 = 0;
        }
#line 3485
        _amd64_rex_bits___2 = (unsigned char )(8 | tmp___34);
#line 3485
        if ((int )_amd64_rex_bits___2 != 0) {
#line 3485
          tmp___35 = jit->ip;
#line 3485
          (jit->ip) ++;
#line 3485
          *tmp___35 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
        }
#line 3485
        break;
      }
#line 3485
      tmp___36 = jit->ip;
#line 3485
      (jit->ip) ++;
#line 3485
      *tmp___36 = (unsigned char)129;
#line 3485
      while (1) {
#line 3485
        while (1) {
#line 3485
          tmp___37 = jit->ip;
#line 3485
          (jit->ip) ++;
#line 3485
          *tmp___37 = (unsigned char )(((3 << 6) | (5 << 3)) | (tinf->counterreg & 0x07));
#line 3485
          break;
        }
#line 3485
        break;
      }
#line 3485
      while (1) {
#line 3485
        imb___2.val = tinf->block_size;
#line 3485
        tmp___38 = jit->ip;
#line 3485
        (jit->ip) ++;
#line 3485
        *tmp___38 = imb___2.b[0];
#line 3485
        tmp___39 = jit->ip;
#line 3485
        (jit->ip) ++;
#line 3485
        *tmp___39 = imb___2.b[1];
#line 3485
        tmp___40 = jit->ip;
#line 3485
        (jit->ip) ++;
#line 3485
        *tmp___40 = imb___2.b[2];
#line 3485
        tmp___41 = jit->ip;
#line 3485
        (jit->ip) ++;
#line 3485
        *tmp___41 = imb___2.b[3];
#line 3485
        break;
      }
    }
#line 3485
    break;
  }
#line 3486
  while (1) {
#line 3486
    while (1) {
#line 3486
      _amd64_rex_bits___3 = (unsigned char)8;
#line 3486
      if ((int )_amd64_rex_bits___3 != 0) {
#line 3486
        tmp___42 = jit->ip;
#line 3486
        (jit->ip) ++;
#line 3486
        *tmp___42 = (unsigned char )(0x40 | (int )_amd64_rex_bits___3);
      }
#line 3486
      break;
    }
#line 3486
    while (1) {
#line 3486
      offset = (int )((loop - (jit_value )jit->ip) - 2L);
#line 3486
      if ((jit_value )offset >= -128L) {
#line 3486
        if ((jit_value )offset <= 127L) {
#line 3486
          while (1) {
#line 3486
            tmp___44 = jit->ip;
#line 3486
            (jit->ip) ++;
#line 3486
            *tmp___44 = (unsigned char )x86_cc_unsigned_map[1];
#line 3486
            while (1) {
#line 3486
              *(jit->ip) = (unsigned char )(offset & 0xff);
#line 3486
              (jit->ip) ++;
#line 3486
              break;
            }
#line 3486
            break;
          }
        } else {
#line 3486
          goto _L___2;
        }
      } else {
        _L___2: /* CIL Label */ 
#line 3486
        offset -= 4;
#line 3486
        while (1) {
#line 3486
          tmp___45 = jit->ip;
#line 3486
          (jit->ip) ++;
#line 3486
          *tmp___45 = (unsigned char)15;
#line 3486
          tmp___47 = jit->ip;
#line 3486
          (jit->ip) ++;
#line 3486
          *tmp___47 = (unsigned char )((int const   )x86_cc_unsigned_map[1] + 16);
#line 3486
          while (1) {
#line 3486
            imb___3.val = offset;
#line 3486
            tmp___48 = jit->ip;
#line 3486
            (jit->ip) ++;
#line 3486
            *tmp___48 = imb___3.b[0];
#line 3486
            tmp___49 = jit->ip;
#line 3486
            (jit->ip) ++;
#line 3486
            *tmp___49 = imb___3.b[1];
#line 3486
            tmp___50 = jit->ip;
#line 3486
            (jit->ip) ++;
#line 3486
            *tmp___50 = imb___3.b[2];
#line 3486
            tmp___51 = jit->ip;
#line 3486
            (jit->ip) ++;
#line 3486
            *tmp___51 = imb___3.b[3];
#line 3486
            break;
          }
#line 3486
          break;
        }
      }
#line 3486
      break;
    }
#line 3486
    break;
  }
#line 3488
  if (tinf->counter_in_use) {
#line 3488
    while (1) {
#line 3488
      if ((int )sizeof(void *) == 2) {
#line 3488
        tmp___52 = jit->ip;
#line 3488
        (jit->ip) ++;
#line 3488
        *tmp___52 = (unsigned char)102;
      }
#line 3488
      while (1) {
#line 3488
        if ((int )sizeof(void *) > 4) {
#line 3488
          tmp___53 = 8;
        } else {
#line 3488
          tmp___53 = 0;
        }
#line 3488
        if (tinf->counterreg > 7) {
#line 3488
          tmp___54 = 4;
        } else {
#line 3488
          tmp___54 = 0;
        }
#line 3488
        _amd64_rex_bits___4 = (unsigned char )(tmp___53 | tmp___54);
#line 3488
        if ((int )_amd64_rex_bits___4 != 0) {
#line 3488
          tmp___55 = jit->ip;
#line 3488
          (jit->ip) ++;
#line 3488
          *tmp___55 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
        } else
#line 3488
        if ((int )sizeof(void *) == 1) {
#line 3488
          tmp___55 = jit->ip;
#line 3488
          (jit->ip) ++;
#line 3488
          *tmp___55 = (unsigned char )(0x40 | (int )_amd64_rex_bits___4);
        }
#line 3488
        break;
      }
#line 3488
      switch ((int )sizeof(void *)) {
      case 1: 
#line 3488
      tmp___56 = jit->ip;
#line 3488
      (jit->ip) ++;
#line 3488
      *tmp___56 = (unsigned char)138;
#line 3488
      break;
      case 8: 
      case 4: 
      case 2: 
#line 3488
      tmp___57 = jit->ip;
#line 3488
      (jit->ip) ++;
#line 3488
      *tmp___57 = (unsigned char)139;
#line 3488
      break;
      default: 
#line 3488
      tmp___58 = __builtin_expect(1L, 0L);
#line 3488
      if (tmp___58) {
#line 3488
        __assert_rtn((char const   *)"emit_transfer_loop", (char const   *)"./jitter-Darwin-X86-64.c",
                     3488, (char const   *)"0");
      }
      }
#line 3488
      while (1) {
#line 3488
        while (1) {
#line 3488
          if (- ((int )sizeof(void *)) == 0) {
#line 3488
            while (1) {
#line 3488
              tmp___64 = jit->ip;
#line 3488
              (jit->ip) ++;
#line 3488
              *tmp___64 = (unsigned char )((((tinf->counterreg & 0x7) & 0x07) << 3) | 4);
#line 3488
              break;
            }
#line 3488
            while (1) {
#line 3488
              tmp___65 = jit->ip;
#line 3488
              (jit->ip) ++;
#line 3488
              *tmp___65 = (unsigned char )((4 << 3) | 4);
#line 3488
              break;
            }
          } else
#line 3488
          if ((jit_value )(- ((int )sizeof(void *))) >= -128L) {
#line 3488
            if ((jit_value )(- ((int )sizeof(void *))) <= 127L) {
#line 3488
              while (1) {
#line 3488
                tmp___66 = jit->ip;
#line 3488
                (jit->ip) ++;
#line 3488
                *tmp___66 = (unsigned char )(((1 << 6) | (((tinf->counterreg & 0x7) & 0x07) << 3)) | 4);
#line 3488
                break;
              }
#line 3488
              while (1) {
#line 3488
                tmp___67 = jit->ip;
#line 3488
                (jit->ip) ++;
#line 3488
                *tmp___67 = (unsigned char )((4 << 3) | 4);
#line 3488
                break;
              }
#line 3488
              while (1) {
#line 3488
                *(jit->ip) = (unsigned char )(- ((int )sizeof(void *)) & 0xff);
#line 3488
                (jit->ip) ++;
#line 3488
                break;
              }
            } else {
#line 3488
              goto _L___3;
            }
          } else {
            _L___3: /* CIL Label */ 
#line 3488
            while (1) {
#line 3488
              tmp___68 = jit->ip;
#line 3488
              (jit->ip) ++;
#line 3488
              *tmp___68 = (unsigned char )(((2 << 6) | (((tinf->counterreg & 0x7) & 0x07) << 3)) | 4);
#line 3488
              break;
            }
#line 3488
            while (1) {
#line 3488
              tmp___69 = jit->ip;
#line 3488
              (jit->ip) ++;
#line 3488
              *tmp___69 = (unsigned char )((4 << 3) | 4);
#line 3488
              break;
            }
#line 3488
            while (1) {
#line 3488
              imb___5.val = - ((int )sizeof(void *));
#line 3488
              tmp___70 = jit->ip;
#line 3488
              (jit->ip) ++;
#line 3488
              *tmp___70 = imb___5.b[0];
#line 3488
              tmp___71 = jit->ip;
#line 3488
              (jit->ip) ++;
#line 3488
              *tmp___71 = imb___5.b[1];
#line 3488
              tmp___72 = jit->ip;
#line 3488
              (jit->ip) ++;
#line 3488
              *tmp___72 = imb___5.b[2];
#line 3488
              tmp___73 = jit->ip;
#line 3488
              (jit->ip) ++;
#line 3488
              *tmp___73 = imb___5.b[3];
#line 3488
              break;
            }
          }
#line 3488
          break;
#line 3488
          if (- ((int )sizeof(void *)) == 0) {
#line 3488
            while (1) {
#line 3488
              tmp___74 = jit->ip;
#line 3488
              (jit->ip) ++;
#line 3488
              *tmp___74 = (unsigned char )((((tinf->counterreg & 0x7) & 0x07) << 3) | 4);
#line 3488
              break;
            }
#line 3488
            break;
          }
#line 3488
          if ((jit_value )(- ((int )sizeof(void *))) >= -128L) {
#line 3488
            if ((jit_value )(- ((int )sizeof(void *))) <= 127L) {
#line 3488
              while (1) {
#line 3488
                tmp___75 = jit->ip;
#line 3488
                (jit->ip) ++;
#line 3488
                *tmp___75 = (unsigned char )(((1 << 6) | (((tinf->counterreg & 0x7) & 0x07) << 3)) | 4);
#line 3488
                break;
              }
#line 3488
              while (1) {
#line 3488
                *(jit->ip) = (unsigned char )(- ((int )sizeof(void *)) & 0xff);
#line 3488
                (jit->ip) ++;
#line 3488
                break;
              }
            } else {
#line 3488
              goto _L___4;
            }
          } else {
            _L___4: /* CIL Label */ 
#line 3488
            while (1) {
#line 3488
              tmp___76 = jit->ip;
#line 3488
              (jit->ip) ++;
#line 3488
              *tmp___76 = (unsigned char )(((2 << 6) | (((tinf->counterreg & 0x7) & 0x07) << 3)) | 4);
#line 3488
              break;
            }
#line 3488
            while (1) {
#line 3488
              imb___6.val = - ((int )sizeof(void *));
#line 3488
              tmp___77 = jit->ip;
#line 3488
              (jit->ip) ++;
#line 3488
              *tmp___77 = imb___6.b[0];
#line 3488
              tmp___78 = jit->ip;
#line 3488
              (jit->ip) ++;
#line 3488
              *tmp___78 = imb___6.b[1];
#line 3488
              tmp___79 = jit->ip;
#line 3488
              (jit->ip) ++;
#line 3488
              *tmp___79 = imb___6.b[2];
#line 3488
              tmp___80 = jit->ip;
#line 3488
              (jit->ip) ++;
#line 3488
              *tmp___80 = imb___6.b[3];
#line 3488
              break;
            }
          }
#line 3488
          break;
        }
#line 3488
        break;
      }
#line 3488
      break;
    }
  }
#line 3489
  if (tinf->scrap_in_use) {
#line 3489
    while (1) {
#line 3489
      if ((int )sizeof(void *) == 2) {
#line 3489
        tmp___81 = jit->ip;
#line 3489
        (jit->ip) ++;
#line 3489
        *tmp___81 = (unsigned char)102;
      }
#line 3489
      while (1) {
#line 3489
        if ((int )sizeof(void *) > 4) {
#line 3489
          tmp___82 = 8;
        } else {
#line 3489
          tmp___82 = 0;
        }
#line 3489
        if (tinf->scrapreg > 7) {
#line 3489
          tmp___83 = 4;
        } else {
#line 3489
          tmp___83 = 0;
        }
#line 3489
        _amd64_rex_bits___5 = (unsigned char )(tmp___82 | tmp___83);
#line 3489
        if ((int )_amd64_rex_bits___5 != 0) {
#line 3489
          tmp___84 = jit->ip;
#line 3489
          (jit->ip) ++;
#line 3489
          *tmp___84 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
        } else
#line 3489
        if ((int )sizeof(void *) == 1) {
#line 3489
          tmp___84 = jit->ip;
#line 3489
          (jit->ip) ++;
#line 3489
          *tmp___84 = (unsigned char )(0x40 | (int )_amd64_rex_bits___5);
        }
#line 3489
        break;
      }
#line 3489
      switch ((int )sizeof(void *)) {
      case 1: 
#line 3489
      tmp___85 = jit->ip;
#line 3489
      (jit->ip) ++;
#line 3489
      *tmp___85 = (unsigned char)138;
#line 3489
      break;
      case 8: 
      case 4: 
      case 2: 
#line 3489
      tmp___86 = jit->ip;
#line 3489
      (jit->ip) ++;
#line 3489
      *tmp___86 = (unsigned char)139;
#line 3489
      break;
      default: 
#line 3489
      tmp___87 = __builtin_expect(1L, 0L);
#line 3489
      if (tmp___87) {
#line 3489
        __assert_rtn((char const   *)"emit_transfer_loop", (char const   *)"./jitter-Darwin-X86-64.c",
                     3489, (char const   *)"0");
      }
      }
#line 3489
      while (1) {
#line 3489
        while (1) {
#line 3489
          if (- ((int )sizeof(void *)) * 2 == 0) {
#line 3489
            while (1) {
#line 3489
              tmp___93 = jit->ip;
#line 3489
              (jit->ip) ++;
#line 3489
              *tmp___93 = (unsigned char )((((tinf->scrapreg & 0x7) & 0x07) << 3) | 4);
#line 3489
              break;
            }
#line 3489
            while (1) {
#line 3489
              tmp___94 = jit->ip;
#line 3489
              (jit->ip) ++;
#line 3489
              *tmp___94 = (unsigned char )((4 << 3) | 4);
#line 3489
              break;
            }
          } else
#line 3489
          if ((jit_value )(- ((int )sizeof(void *)) * 2) >= -128L) {
#line 3489
            if ((jit_value )(- ((int )sizeof(void *)) * 2) <= 127L) {
#line 3489
              while (1) {
#line 3489
                tmp___95 = jit->ip;
#line 3489
                (jit->ip) ++;
#line 3489
                *tmp___95 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3489
                break;
              }
#line 3489
              while (1) {
#line 3489
                tmp___96 = jit->ip;
#line 3489
                (jit->ip) ++;
#line 3489
                *tmp___96 = (unsigned char )((4 << 3) | 4);
#line 3489
                break;
              }
#line 3489
              while (1) {
#line 3489
                *(jit->ip) = (unsigned char )(- ((int )sizeof(void *)) * 2 & 0xff);
#line 3489
                (jit->ip) ++;
#line 3489
                break;
              }
            } else {
#line 3489
              goto _L___5;
            }
          } else {
            _L___5: /* CIL Label */ 
#line 3489
            while (1) {
#line 3489
              tmp___97 = jit->ip;
#line 3489
              (jit->ip) ++;
#line 3489
              *tmp___97 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3489
              break;
            }
#line 3489
            while (1) {
#line 3489
              tmp___98 = jit->ip;
#line 3489
              (jit->ip) ++;
#line 3489
              *tmp___98 = (unsigned char )((4 << 3) | 4);
#line 3489
              break;
            }
#line 3489
            while (1) {
#line 3489
              imb___8.val = - ((int )sizeof(void *)) * 2;
#line 3489
              tmp___99 = jit->ip;
#line 3489
              (jit->ip) ++;
#line 3489
              *tmp___99 = imb___8.b[0];
#line 3489
              tmp___100 = jit->ip;
#line 3489
              (jit->ip) ++;
#line 3489
              *tmp___100 = imb___8.b[1];
#line 3489
              tmp___101 = jit->ip;
#line 3489
              (jit->ip) ++;
#line 3489
              *tmp___101 = imb___8.b[2];
#line 3489
              tmp___102 = jit->ip;
#line 3489
              (jit->ip) ++;
#line 3489
              *tmp___102 = imb___8.b[3];
#line 3489
              break;
            }
          }
#line 3489
          break;
#line 3489
          if (- ((int )sizeof(void *)) * 2 == 0) {
#line 3489
            while (1) {
#line 3489
              tmp___103 = jit->ip;
#line 3489
              (jit->ip) ++;
#line 3489
              *tmp___103 = (unsigned char )((((tinf->scrapreg & 0x7) & 0x07) << 3) | 4);
#line 3489
              break;
            }
#line 3489
            break;
          }
#line 3489
          if ((jit_value )(- ((int )sizeof(void *)) * 2) >= -128L) {
#line 3489
            if ((jit_value )(- ((int )sizeof(void *)) * 2) <= 127L) {
#line 3489
              while (1) {
#line 3489
                tmp___104 = jit->ip;
#line 3489
                (jit->ip) ++;
#line 3489
                *tmp___104 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3489
                break;
              }
#line 3489
              while (1) {
#line 3489
                *(jit->ip) = (unsigned char )(- ((int )sizeof(void *)) * 2 & 0xff);
#line 3489
                (jit->ip) ++;
#line 3489
                break;
              }
            } else {
#line 3489
              goto _L___6;
            }
          } else {
            _L___6: /* CIL Label */ 
#line 3489
            while (1) {
#line 3489
              tmp___105 = jit->ip;
#line 3489
              (jit->ip) ++;
#line 3489
              *tmp___105 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 0x7) & 0x07) << 3)) | 4);
#line 3489
              break;
            }
#line 3489
            while (1) {
#line 3489
              imb___9.val = - ((int )sizeof(void *)) * 2;
#line 3489
              tmp___106 = jit->ip;
#line 3489
              (jit->ip) ++;
#line 3489
              *tmp___106 = imb___9.b[0];
#line 3489
              tmp___107 = jit->ip;
#line 3489
              (jit->ip) ++;
#line 3489
              *tmp___107 = imb___9.b[1];
#line 3489
              tmp___108 = jit->ip;
#line 3489
              (jit->ip) ++;
#line 3489
              *tmp___108 = imb___9.b[2];
#line 3489
              tmp___109 = jit->ip;
#line 3489
              (jit->ip) ++;
#line 3489
              *tmp___109 = imb___9.b[3];
#line 3489
              break;
            }
          }
#line 3489
          break;
        }
#line 3489
        break;
      }
#line 3489
      break;
    }
  }
#line 3490
  return;
}
}
/* END FUNCTION-DEF emit_transfer_loop LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_sync_aux LOC=UNKNOWN */
static void rmap_sync_aux(jit_tree *current , jit_tree *target , jit_op *op , int mode ) 
{ 
  int tmp ;
  int tmp___0 ;
  jit_tree *found ;
  jit_tree *tmp___1 ;
  int i ;
  jit_hw_reg *hreg ;
  long tmp___2 ;

  {
#line 1947
  if ((unsigned long )current == (unsigned long )((void *)0)) {
#line 1947
    return;
  }
#line 1950
  if (mode == 2) {
#line 1950
    tmp = jit_set_get(op->live_out, (int )current->key);
#line 1950
    if (! tmp) {
#line 1950
      goto skip;
    }
  }
#line 1953
  if (mode == 1) {
#line 1953
    tmp___0 = jit_set_get((op->jmp_addr)->live_in, (int )current->key);
#line 1953
    if (! tmp___0) {
#line 1953
      goto skip;
    }
  }
#line 1955
  tmp___1 = jit_tree_search(target, current->key);
#line 1955
  found = tmp___1;
#line 1956
  i = (int )current->key;
#line 1958
  if (! found) {
#line 1958
    goto _L;
  } else
#line 1958
  if ((unsigned long )current->value != (unsigned long )found->value) {
    _L: /* CIL Label */ 
#line 1959
    hreg = (jit_hw_reg *)current->value;
#line 1960
    switch (mode) {
    case 1: 
#line 1961
    unload_reg(op, hreg, (jit_value )i);
#line 1961
    break;
    case 2: 
#line 1962
    load_reg(op, hreg, (jit_value )i);
#line 1962
    break;
    default: 
#line 1963
    tmp___2 = __builtin_expect(1L, 0L);
#line 1963
    if (tmp___2) {
#line 1963
      __assert_rtn((char const   *)"rmap_sync_aux", (char const   *)"./jitter-Darwin-X86-64.c",
                   1963, (char const   *)"0");
    }
    }
  }
  skip: 
#line 1967
  rmap_sync_aux(current->left, target, op, mode);
#line 1968
  rmap_sync_aux(current->right, target, op, mode);
#line 1969
  return;
}
}
/* END FUNCTION-DEF rmap_sync_aux LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF delete_node LOC=UNKNOWN */
static jit_tree *delete_node(jit_tree *h , jit_tree_key key , int *found ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  jit_tree_key tmp___4 ;
  jit_tree *tmp___5 ;
  jit_tree *tmp___6 ;

  {
#line 486
  if ((unsigned long )h == (unsigned long )((void *)0)) {
#line 487
    if (found) {
#line 487
      *found = 0;
    }
#line 488
    return ((jit_tree *)((void *)0));
  }
#line 491
  if (key < h->key) {
#line 493
    tmp = is_red(h->left);
#line 493
    if (! tmp) {
#line 493
      if (h->left) {
#line 493
        tmp___0 = is_red((h->left)->left);
#line 493
        if (! tmp___0) {
#line 494
          h = move_red_left(h);
        }
      }
    }
#line 495
    h->left = delete_node(h->left, key, found);
  } else {
#line 497
    tmp___1 = is_red(h->left);
#line 497
    if (tmp___1) {
#line 497
      h = rotate_right(h);
    }
#line 498
    if (key == h->key) {
#line 498
      if ((unsigned long )h->right == (unsigned long )((void *)0)) {
#line 499
        free((void *)h);
#line 500
        if (found) {
#line 500
          *found = 1;
        }
#line 501
        return ((jit_tree *)((void *)0));
      }
    }
#line 505
    tmp___2 = is_red(h->right);
#line 505
    if (! tmp___2) {
#line 505
      if (h->right) {
#line 505
        tmp___3 = is_red((h->right)->left);
#line 505
        if (! tmp___3) {
#line 505
          h = move_red_right(h);
        }
      }
    }
#line 506
    if (key == h->key) {
#line 507
      tmp___4 = node_min(h->right);
#line 507
      tmp___5 = jit_tree_search(h->right, tmp___4);
#line 507
      h->value = tmp___5->value;
#line 508
      h->key = node_min(h->right);
#line 509
      h->right = delete_min(h->right);
#line 510
      if (found) {
#line 510
        *found = 1;
      }
    } else {
#line 512
      h->right = delete_node(h->right, key, found);
    }
  }
#line 514
  tmp___6 = fixup(h);
#line 514
  return (tmp___6);
}
}
/* END FUNCTION-DEF delete_node LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF node_new LOC=UNKNOWN */
__inline static jit_tree *node_new(jit_tree_key key , jit_tree_value value ) 
{ 
  jit_tree *res ;
  void *tmp ;

  {
#line 396
  tmp = malloc((size_t )sizeof(jit_tree ));
#line 396
  res = (jit_tree *)tmp;
#line 397
  res->key = key;
#line 398
  res->value = value;
#line 399
  res->color = 1;
#line 400
  res->left = (struct jit_tree *)((void *)0);
#line 401
  res->right = (struct jit_tree *)((void *)0);
#line 402
  return (res);
}
}
/* END FUNCTION-DEF node_new LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF __darwin_fd_isset LOC=UNKNOWN */
__inline int ( __attribute__((__always_inline__)) __darwin_fd_isset)(int _fd , struct fd_set  const  *_p ) 
{ 
  int tmp ;

  {
#line 75 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h"
  tmp = __darwin_check_fd_set(_fd, (void const   *)_p);
#line 75
  if (tmp) {
#line 76
    return (_p->fds_bits[(unsigned long long )((unsigned long )_fd) / (sizeof(__int32_t ) * 8ULL)] & (__int32_t )(1UL << (unsigned long long )((unsigned long )_fd) % (sizeof(__int32_t ) * 8ULL)));
  }
#line 79
  return (0);
}
}
/* END FUNCTION-DEF __darwin_fd_isset LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_fret_op LOC=UNKNOWN */
static void emit_fret_op(struct jit *jit , jit_op *op ) 
{ 
  jit_value arg ;
  jit_hw_reg *ret_reg ;
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  int tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  long tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  struct jit_func_info *tmp___22 ;
  unsigned char *tmp___23 ;

  {
#line 2633 "./jitter-Darwin-X86-64.c"
  arg = op->r_arg[0];
#line 2634
  ret_reg = (jit->reg_al)->fpret_reg;
#line 2635
  if ((unsigned long long )op->arg_size == sizeof(float )) {
#line 2636
    while (1) {
#line 2636
      tmp = jit->ip;
#line 2636
      (jit->ip) ++;
#line 2636
      *tmp = (unsigned char)242;
#line 2636
      while (1) {
#line 2636
        if (ret_reg->id > 7) {
#line 2636
          tmp___0 = 4;
        } else {
#line 2636
          tmp___0 = 0;
        }
#line 2636
        if (arg > 7L) {
#line 2636
          tmp___1 = 1;
        } else {
#line 2636
          tmp___1 = 0;
        }
#line 2636
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
#line 2636
        if ((int )_amd64_rex_bits != 0) {
#line 2636
          tmp___2 = jit->ip;
#line 2636
          (jit->ip) ++;
#line 2636
          *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
        }
#line 2636
        break;
      }
#line 2636
      tmp___3 = jit->ip;
#line 2636
      (jit->ip) ++;
#line 2636
      *tmp___3 = (unsigned char)15;
#line 2636
      tmp___4 = jit->ip;
#line 2636
      (jit->ip) ++;
#line 2636
      *tmp___4 = (unsigned char)90;
#line 2636
      while (1) {
#line 2636
        while (1) {
#line 2636
          tmp___5 = jit->ip;
#line 2636
          (jit->ip) ++;
#line 2636
          *tmp___5 = (unsigned char )((long )((3 << 6) | ((ret_reg->id & 0x07) << 3)) | (arg & 7L));
#line 2636
          break;
        }
#line 2636
        break;
      }
#line 2636
      break;
    }
  } else
#line 2638
  if ((jit_value )ret_reg->id != arg) {
#line 2638
    while (1) {
#line 2638
      tmp___6 = jit->ip;
#line 2638
      (jit->ip) ++;
#line 2638
      *tmp___6 = (unsigned char)242;
#line 2638
      while (1) {
#line 2638
        if (ret_reg->id > 7) {
#line 2638
          tmp___7 = 4;
        } else {
#line 2638
          tmp___7 = 0;
        }
#line 2638
        if (arg > 7L) {
#line 2638
          tmp___8 = 1;
        } else {
#line 2638
          tmp___8 = 0;
        }
#line 2638
        _amd64_rex_bits___0 = (unsigned char )(tmp___7 | tmp___8);
#line 2638
        if ((int )_amd64_rex_bits___0 != 0) {
#line 2638
          tmp___9 = jit->ip;
#line 2638
          (jit->ip) ++;
#line 2638
          *tmp___9 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
        }
#line 2638
        break;
      }
#line 2638
      tmp___10 = jit->ip;
#line 2638
      (jit->ip) ++;
#line 2638
      *tmp___10 = (unsigned char)15;
#line 2638
      tmp___11 = jit->ip;
#line 2638
      (jit->ip) ++;
#line 2638
      *tmp___11 = (unsigned char)16;
#line 2638
      while (1) {
#line 2638
        while (1) {
#line 2638
          tmp___12 = jit->ip;
#line 2638
          (jit->ip) ++;
#line 2638
          *tmp___12 = (unsigned char )((long )((3 << 6) | ((ret_reg->id & 0x07) << 3)) | (arg & 7L));
#line 2638
          break;
        }
#line 2638
        break;
      }
#line 2638
      break;
    }
  }
#line 2640
  tmp___13 = emit_pop_callee_saved_regs(jit);
#line 2640
  jit->push_count -= tmp___13;
#line 2641
  tmp___22 = jit_current_func_info(jit);
#line 2641
  if (tmp___22->has_prolog) {
#line 2642
    while (1) {
#line 2642
      while (1) {
#line 2642
        _amd64_rex_bits___1 = (unsigned char)8;
#line 2642
        if ((int )_amd64_rex_bits___1 != 0) {
#line 2642
          tmp___15 = jit->ip;
#line 2642
          (jit->ip) ++;
#line 2642
          *tmp___15 = (unsigned char )(0x40 | (int )_amd64_rex_bits___1);
        }
#line 2642
        break;
      }
#line 2642
      switch (8) {
      case 1: 
#line 2642
      tmp___16 = jit->ip;
#line 2642
      (jit->ip) ++;
#line 2642
      *tmp___16 = (unsigned char)138;
#line 2642
      break;
      case 8: 
      case 4: 
      case 2: 
#line 2642
      tmp___17 = jit->ip;
#line 2642
      (jit->ip) ++;
#line 2642
      *tmp___17 = (unsigned char)139;
#line 2642
      break;
      default: 
#line 2642
      tmp___18 = __builtin_expect(1L, 0L);
#line 2642
      if (tmp___18) {
#line 2642
        __assert_rtn((char const   *)"emit_fret_op", (char const   *)"./jitter-Darwin-X86-64.c",
                     2642, (char const   *)"0");
      }
      }
#line 2642
      while (1) {
#line 2642
        while (1) {
#line 2642
          tmp___19 = jit->ip;
#line 2642
          (jit->ip) ++;
#line 2642
          *tmp___19 = (unsigned char )(((3 << 6) | (4 << 3)) | 5);
#line 2642
          break;
        }
#line 2642
        break;
      }
#line 2642
      break;
    }
#line 2643
    while (1) {
#line 2643
      while (1) {
#line 2643
        _amd64_rex_bits___2 = (unsigned char)0;
#line 2643
        if ((int )_amd64_rex_bits___2 != 0) {
#line 2643
          tmp___20 = jit->ip;
#line 2643
          (jit->ip) ++;
#line 2643
          *tmp___20 = (unsigned char )(0x40 | (int )_amd64_rex_bits___2);
        }
#line 2643
        break;
      }
#line 2643
      tmp___21 = jit->ip;
#line 2643
      (jit->ip) ++;
#line 2643
      *tmp___21 = (unsigned char)93;
#line 2643
      break;
    }
  }
#line 2645
  while (1) {
#line 2645
    tmp___23 = jit->ip;
#line 2645
    (jit->ip) ++;
#line 2645
    *tmp___23 = (unsigned char)195;
#line 2645
    break;
  }
#line 2646
  return;
}
}
/* END FUNCTION-DEF emit_fret_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_exec_addr LOC=UNKNOWN */
static void *jit_exec_addr(struct jit_exec_mem *mem ) 
{ 


  {
#line 310
  return (mem->data);
}
}
/* END FUNCTION-DEF jit_exec_addr LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_arg_layout_create LOC=UNKNOWN */
static struct jit_arg_layout *jit_arg_layout_create(struct jit *jit , int arg_cnt ) 
{ 
  struct jit_arg_layout *layout ;
  void *tmp ;

  {
#line 1732
  tmp = malloc((size_t )(sizeof(struct jit_arg_layout ) + sizeof(struct jit_arg_layout_location ) * (unsigned long long )arg_cnt));
#line 1732
  layout = (struct jit_arg_layout *)tmp;
#line 1733
  layout->jit = jit;
#line 1734
  layout->arg_index = 0;
#line 1735
  layout->gp_index = 0;
#line 1736
  layout->fp_index = 0;
#line 1737
  layout->stack_index = 0;
#line 1738
  return (layout);
}
}
/* END FUNCTION-DEF jit_arg_layout_create LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_expand_patches_and_labels LOC=UNKNOWN */
void jit_expand_patches_and_labels(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
#line 5972
  tmp = jit_op_first(jit->ops);
#line 5972
  op = tmp;
#line 5972
  while ((unsigned long )op != (unsigned long )((void *)0)) {
#line 5973
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 144U) {
#line 5974
      ((jit_op *)op->arg[0])->jmp_addr = op;
    }
#line 5976
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 136U) {
#line 5977
      ((jit_label *)op->arg[0])->op = op;
    }
#line 5980
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) != 136U) {
#line 5980
      tmp___0 = jit_is_label(jit, (void *)op->arg[0]);
#line 5980
      if (tmp___0) {
#line 5981
        op->jmp_addr = ((jit_label *)op->arg[0])->op;
      }
    }
#line 5984
    if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) != 136U) {
#line 5984
      tmp___1 = jit_is_label(jit, (void *)op->arg[1]);
#line 5984
      if (tmp___1) {
#line 5985
        op->jmp_addr = ((jit_label *)op->arg[1])->op;
      }
    }
#line 5972
    op = op->next;
  }
#line 5988
  return;
}
}
/* END FUNCTION-DEF jit_expand_patches_and_labels LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF funcall_prepare_optional LOC=UNKNOWN */
__inline static void funcall_prepare_optional(struct jit *jit ) 
{ 


  {
#line 930
  jit->prepared_args.variadic = 1;
#line 931
  return;
}
}
/* END FUNCTION-DEF funcall_prepare_optional LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF free_labels LOC=UNKNOWN */
static void free_labels(jit_label *lab ) 
{ 


  {
#line 6252
  if ((unsigned long )lab == (unsigned long )((void *)0)) {
#line 6252
    return;
  }
#line 6253
  free_labels(lab->next);
#line 6254
  free((void *)lab);
#line 6255
  return;
}
}
/* END FUNCTION-DEF free_labels LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF join_muli_ori LOC=UNKNOWN */
static int join_muli_ori(jit_op *op , jit_op *nextop ) 
{ 
  int tmp ;
  int max ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
#line 2251
  tmp = is_suitable_mul(op);
#line 2251
  if (! tmp) {
#line 2251
    return (0);
  }
#line 2252
  if ((unsigned int )((jit_opcode )((int )op->code & 0xfff8)) == 576U) {
#line 2252
    max = (int )op->arg[2];
#line 2252
    tmp___1 = max;
  } else {
#line 2252
    tmp___0 = pow2((int )op->arg[2]);
#line 2252
    tmp___1 = tmp___0;
  }
#line 2252
  max = tmp___1;
#line 2254
  if (nextop->arg[2] > 0L) {
#line 2254
    if (nextop->arg[2] < (jit_value )max) {
#line 2254
      tmp___2 = make_addmuli(op, nextop);
#line 2254
      return (tmp___2);
    } else {
#line 2255
      return (0);
    }
  } else {
#line 2255
    return (0);
  }
}
}
/* END FUNCTION-DEF join_muli_ori LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF _OSSwapInt64 LOC=UNKNOWN */
__inline static __uint64_t _OSSwapInt64(__uint64_t _data ) 
{ 
  long tmp ;

  {
#line 74 "/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/libkern/i386/_OSByteOrder.h"
  tmp = __builtin_bswap64((long )_data);
#line 74
  return ((__uint64_t )tmp);
}
}
/* END FUNCTION-DEF _OSSwapInt64 LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_allocai LOC=UNKNOWN */
int jit_allocai(struct jit *jit , int size ) 
{ 
  jit_value real_size ;
  jit_value tmp ;
  struct jit_func_info *tmp___0 ;
  struct jit_func_info *tmp___1 ;

  {
#line 3559 "./jitter-Darwin-X86-64.c"
  tmp = jit_value_align((jit_value )size, (jit_value )16);
#line 3559
  real_size = tmp;
#line 3561
  jit_add_op(jit, (unsigned short)162, (unsigned char)2, real_size, (jit_value )0,
             (jit_value )0, (unsigned char)0, (struct jit_debug_info *)((void *)0));
#line 3562
  tmp___0 = jit_current_func_info(jit);
#line 3562
  tmp___0->allocai_mem += real_size;
#line 3564
  tmp___1 = jit_current_func_info(jit);
#line 3564
  return ((int )(- tmp___1->allocai_mem));
}
}
/* END FUNCTION-DEF jit_allocai LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_generate_code LOC=UNKNOWN */
void jit_generate_code(struct jit *jit ) 
{ 
  int change ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  struct jit_op *op ;
  unsigned long offset_1 ;
  unsigned char *tmp___2 ;
  int i ;
  unsigned char *tmp___3 ;
  int i___0 ;
  unsigned long offset_2 ;
  int code_size ;
  struct jit_exec_mem *exec_mem ;
  struct jit_exec_mem *tmp___4 ;
  void *mem ;
  void *tmp___5 ;
  unsigned long long tmp___6 ;
  long pos ;
  jit_op *op___0 ;
  jit_op *tmp___7 ;

  {
#line 6118
  jit_expand_patches_and_labels(jit);
#line 6120
  jit_correct_long_imms(jit);
#line 6122
  jit_correct_float_imms(jit);
#line 6124
  jit_prepare_reg_counts(jit);
#line 6125
  jit_prepare_arguments(jit);
#line 6126
  jit_prepare_spills_on_jmpr_targets(jit);
#line 6128
  if (jit->optimizations & 8U) {
#line 6129
    jit_dead_code_analysis(jit, 1);
  }
#line 6131
  jit_flw_analysis(jit);
#line 6134
  if (jit->optimizations & 2U) {
#line 6134
    jit_optimize_unused_assignments(jit);
  }
#line 6138
  change = 0;
#line 6139
  jit_optimize_st_ops(jit);
#line 6140
  if (jit->optimizations & 4U) {
#line 6141
    tmp = jit_optimize_join_addmul(jit);
#line 6141
    change |= tmp;
#line 6142
    tmp___0 = jit_optimize_join_addimm(jit);
#line 6142
    change |= tmp___0;
  }
#line 6145
  if (change) {
#line 6145
    jit_flw_analysis(jit);
  }
#line 6147
  jit_collect_statistics(jit);
#line 6148
  jit_assign_regs(jit);
#line 6151
  if (jit->optimizations & 1U) {
#line 6151
    jit_optimize_frame_ptr(jit);
  }
#line 6154
  jit->buf_capacity = 4096U;
#line 6155
  tmp___1 = malloc((size_t )jit->buf_capacity);
#line 6155
  jit->buf = (unsigned char *)tmp___1;
#line 6156
  jit->ip = jit->buf;
#line 6158
  op = jit->ops;
#line 6158
  while ((unsigned long )op != (unsigned long )((void *)0)) {
#line 6159
    if ((long )jit->buf_capacity - (jit->ip - jit->buf) < 1024L) {
#line 6159
      jit_buf_expand(jit);
    }
#line 6161
    offset_1 = (unsigned long )(jit->ip - jit->buf);
#line 6162
    switch ((unsigned int )((jit_opcode )((int )op->code & 0xfff8))) {
    case 1408U: 
#line 6163
    tmp___2 = jit->ip;
#line 6163
    (jit->ip) ++;
#line 6163
    *tmp___2 = (unsigned char )op->arg[0];
#line 6163
    break;
    case 1416U: 
#line 6165
    while ((long )jit->buf_capacity - (jit->ip - jit->buf) < op->arg[0]) {
#line 6166
      jit_buf_expand(jit);
    }
#line 6168
    i = 0;
#line 6168
    while ((jit_value )i < op->arg[0]) {
#line 6169
      tmp___3 = jit->ip;
#line 6169
      (jit->ip) ++;
#line 6169
      *tmp___3 = *((unsigned char *)op->addendum + i);
#line 6168
      i ++;
    }
#line 6170
    break;
    case 1432U: 
    case 1424U: 
#line 6173
    op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
#line 6174
    i___0 = 0;
#line 6174
    while ((unsigned long long )i___0 < sizeof(void *)) {
#line 6175
      *(jit->ip) = (unsigned char)0;
#line 6176
      (jit->ip) ++;
#line 6174
      i___0 ++;
    }
#line 6178
    break;
    case 4128U: 
    case 4120U: 
    case 1928U: 
    case 4104U: 
    case 4096U: 
#line 6184
    break;
    default: 
#line 6186
    jit_gen_op(jit, op);
    }
#line 6188
    offset_2 = (unsigned long )(jit->ip - jit->buf);
#line 6189
    op->code_offset = offset_1;
#line 6190
    op->code_length = offset_2 - offset_1;
#line 6158
    op = op->next;
  }
#line 6194
  code_size = (int )(jit->ip - jit->buf);
#line 6201
  tmp___4 = jit_exec_mem_new((size_t )jit->buf_capacity);
#line 6201
  exec_mem = tmp___4;
#line 6202
  tmp___5 = jit_exec_addr(exec_mem);
#line 6202
  mem = tmp___5;
#line 6204
  tmp___6 = __builtin_object_size(mem, 0);
#line 6204
  __builtin___memcpy_chk(mem, (void const   *)jit->buf, (unsigned long long )code_size,
                         tmp___6);
#line 6205
  free((void *)jit->buf);
#line 6208
  pos = jit->ip - jit->buf;
#line 6209
  jit->buf = (unsigned char *)mem;
#line 6210
  jit->ip = jit->buf + pos;
#line 6211
  jit->mmaped_buf = exec_mem;
#line 6213
  jit_patch_external_calls(jit);
#line 6214
  jit_patch_local_addrs(jit);
#line 6217
  tmp___7 = jit_op_first(jit->ops);
#line 6217
  op___0 = tmp___7;
#line 6217
  while ((unsigned long )op___0 != (unsigned long )((void *)0)) {
#line 6218
    if ((unsigned int )((jit_opcode )((int )op___0->code & 0xfff8)) == 128U) {
#line 6219
      *((void **)op___0->arg[0]) = (void *)(jit->buf + op___0->patch_addr);
    }
#line 6217
    op___0 = op___0->next;
  }
#line 6221
  jit_exec_mem_seal(exec_mem);
#line 6222
  return;
}
}
/* END FUNCTION-DEF jit_generate_code LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_op_is_cond_branch LOC=UNKNOWN */
static int jit_op_is_cond_branch(jit_op *op ) 
{ 
  jit_opcode code ;
  int tmp ;

  {
#line 994
  code = (jit_opcode )((int )op->code & 0xfff8);
#line 995
  if ((unsigned int )code == 896U) {
#line 995
    tmp = 1;
  } else
#line 995
  if ((unsigned int )code == 904U) {
#line 995
    tmp = 1;
  } else
#line 995
  if ((unsigned int )code == 912U) {
#line 995
    tmp = 1;
  } else
#line 995
  if ((unsigned int )code == 920U) {
#line 995
    tmp = 1;
  } else
#line 995
  if ((unsigned int )code == 928U) {
#line 995
    tmp = 1;
  } else
#line 995
  if ((unsigned int )code == 936U) {
#line 995
    tmp = 1;
  } else
#line 995
  if ((unsigned int )code == 1152U) {
#line 995
    tmp = 1;
  } else
#line 995
  if ((unsigned int )code == 1160U) {
#line 995
    tmp = 1;
  } else
#line 995
  if ((unsigned int )code == 1168U) {
#line 995
    tmp = 1;
  } else
#line 995
  if ((unsigned int )code == 1176U) {
#line 995
    tmp = 1;
  } else
#line 995
  if ((unsigned int )code == 1184U) {
#line 995
    tmp = 1;
  } else
#line 995
  if ((unsigned int )code == 1192U) {
#line 995
    tmp = 1;
  } else
#line 995
  if ((unsigned int )code == 960U) {
#line 995
    tmp = 1;
  } else
#line 995
  if ((unsigned int )code == 968U) {
#line 995
    tmp = 1;
  } else
#line 995
  if ((unsigned int )code == 976U) {
#line 995
    tmp = 1;
  } else
#line 995
  if ((unsigned int )code == 984U) {
#line 995
    tmp = 1;
  } else {
#line 995
    tmp = 0;
  }
#line 995
  return (tmp);
}
}
/* END FUNCTION-DEF jit_op_is_cond_branch LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_allocator_hints_free LOC=UNKNOWN */
void jit_allocator_hints_free(jit_tree *hints ) 
{ 
  int refs ;

  {
#line 5628
  if ((unsigned long )hints == (unsigned long )((void *)0)) {
#line 5628
    return;
  }
#line 5629
  jit_allocator_hints_free(hints->left);
#line 5630
  jit_allocator_hints_free(hints->right);
#line 5632
  (((struct jit_allocator_hint *)hints->value)->refs) --;
#line 5632
  refs = ((struct jit_allocator_hint *)hints->value)->refs;
#line 5633
  if (refs == 0) {
#line 5633
    free(hints->value);
  }
#line 5635
  free((void *)hints);
#line 5636
  return;
}
}
/* END FUNCTION-DEF jit_allocator_hints_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF _bit_pop LOC=UNKNOWN */
__inline static int _bit_pop(unsigned int x ) 
{ 


  {
#line 1395
  x = (x & 1431655765U) + ((x >> 1) & 1431655765U);
#line 1396
  x = (x & 858993459U) + ((x >> 2) & 858993459U);
#line 1397
  x = (x & 252645135U) + ((x >> 4) & 252645135U);
#line 1398
  x = (x & 16711935U) + ((x >> 8) & 16711935U);
#line 1399
  x = (x & 65535U) + ((x >> 16) & 65535U);
#line 1400
  return ((int )x);
}
}
/* END FUNCTION-DEF _bit_pop LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_ureg LOC=UNKNOWN */
static void emit_ureg(struct jit *jit , jit_value vreg , int hreg_id ) 
{ 
  int stack_pos ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___28 ;
  int tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  long tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;

  {
#line 2972
  tmp = stack_reg_pos(jit, (int )vreg);
#line 2972
  stack_pos = tmp;
#line 2974
  if ((vreg & 1L) == 1L) {
#line 2974
    while (1) {
#line 2974
      tmp___0 = jit->ip;
#line 2974
      (jit->ip) ++;
#line 2974
      *tmp___0 = (unsigned char)102;
#line 2974
      while (1) {
#line 2974
        if (hreg_id > 7) {
#line 2974
          tmp___1 = 4;
        } else {
#line 2974
          tmp___1 = 0;
        }
#line 2974
        _amd64_rex_bits = (unsigned char )tmp___1;
#line 2974
        if ((int )_amd64_rex_bits != 0) {
#line 2974
          tmp___2 = jit->ip;
#line 2974
          (jit->ip) ++;
#line 2974
          *tmp___2 = (unsigned char )(0x40 | (int )_amd64_rex_bits);
        }
#line 2974
        break;
      }
#line 2974
      tmp___3 = jit->ip;
#line 2974
      (jit->ip) ++;
#line 2974
      *tmp___3 = (unsigned char)15;
#line 2974
      tmp___4 = jit->ip;
#line 2974
      (jit->ip) ++;
#line 2974
      *tmp___4 = (unsigned char)19;
#line 2974
      while (1) {
#line 2974
        while (1) {
#line 2974
          if (0) {
#line 2974
            if (stack_pos == 0) {
#line 2974
              while (1) {
#line 2974
                tmp___10 = jit->ip;
#line 2974
                (jit->ip) ++;
#line 2974
                *tmp___10 = (unsigned char )((((hreg_id & 0x7) & 0x07) << 3) | 4);
#line 2974
                break;
              }
#line 2974
              while (1) {
#line 2974
                tmp___11 = jit->ip;
#line 2974
                (jit->ip) ++;
#line 2974
                *tmp___11 = (unsigned char )((4 << 3) | 4);
#line 2974
                break;
              }
            } else
#line 2974
            if ((jit_value )stack_pos >= -128L) {
#line 2974
              if ((jit_value )stack_pos <= 127L) {
#line 2974
                while (1) {
#line 2974
                  tmp___12 = jit->ip;
#line 2974
                  (jit->ip) ++;
#line 2974
                  *tmp___12 = (unsigned char )(((1 << 6) | (((hreg_id & 0x7) & 0x07) << 3)) | 4);
#line 2974
                  break;
                }
#line 2974
                while (1) {
#line 2974
                  tmp___13 = jit->ip;
#line 2974
                  (jit->ip) ++;
#line 2974
                  *tmp___13 = (unsigned char )((4 << 3) | 4);
#line 2974
                  break;
                }
#line 2974
                while (1) {
#line 2974
                  *(jit->ip) = (unsigned char )(stack_pos & 0xff);
#line 2974
                  (jit->ip) ++;
#line 2974
                  break;
                }
              } else {
#line 2974
                goto _L;
              }
            } else {
              _L: /* CIL Label */ 
#line 2974
              while (1) {
#line 2974
                tmp___14 = jit->ip;
#line 2974
                (jit->ip) ++;
#line 2974
                *tmp___14 = (unsigned char )(((2 << 6) | (((hreg_id & 0x7) & 0x07) << 3)) | 4);
#line 2974
                break;
              }
#line 2974
              while (1) {
#line 2974
                tmp___15 = jit->ip;
#line 2974
                (jit->ip) ++;
#line 2974
                *tmp___15 = (unsigned char )((4 << 3) | 4);
#line 2974
                break;
              }
#line 2974
              while (1) {
#line 2974
                imb___0.val = stack_pos;
#line 2974
                tmp___16 = jit->ip;
#line 2974
                (jit->ip) ++;
#line 2974
                *tmp___16 = imb___0.b[0];
#line 2974
                tmp___17 = jit->ip;
#line 2974
                (jit->ip) ++;
#line 2974
                *tmp___17 = imb___0.b[1];
#line 2974
                tmp___18 = jit->ip;
#line 2974
                (jit->ip) ++;
#line 2974
                *tmp___18 = imb___0.b[2];
#line 2974
                tmp___19 = jit->ip;
#line 2974
                (jit->ip) ++;
#line 2974
                *tmp___19 = imb___0.b[3];
#line 2974
                break;
              }
            }
#line 2974
            break;
          }
#line 2974
          if (stack_pos == 0) {

          }
#line 2974
          if ((jit_value )stack_pos >= -128L) {
#line 2974
            if ((jit_value )stack_pos <= 127L) {
#line 2974
              while (1) {
#line 2974
                tmp___21 = jit->ip;
#line 2974
                (jit->ip) ++;
#line 2974
                *tmp___21 = (unsigned char )(((1 << 6) | (((hreg_id & 0x7) & 0x07) << 3)) | 5);
#line 2974
                break;
              }
#line 2974
              while (1) {
#line 2974
                *(jit->ip) = (unsigned char )(stack_pos & 0xff);
#line 2974
                (jit->ip) ++;
#line 2974
                break;
              }
            } else {
#line 2974
              goto _L___0;
            }
          } else {
            _L___0: /* CIL Label */ 
#line 2974
            while (1) {
#line 2974
              tmp___22 = jit->ip;
#line 2974
              (jit->ip) ++;
#line 2974
              *tmp___22 = (unsigned char )(((2 << 6) | (((hreg_id & 0x7) & 0x07) << 3)) | 5);
#line 2974
              break;
            }
#line 2974
            while (1) {
#line 2974
              imb___1.val = stack_pos;
#line 2974
              tmp___23 = jit->ip;
#line 2974
              (jit->ip) ++;
#line 2974
              *tmp___23 = imb___1.b[0];
#line 2974
              tmp___24 = jit->ip;
#line 2974
              (jit->ip) ++;
#line 2974
              *tmp___24 = imb___1.b[1];
#line 2974
              tmp___25 = jit->ip;
#line 2974
              (jit->ip) ++;
#line 2974
              *tmp___25 = imb___1.b[2];
#line 2974
              tmp___26 = jit->ip;
#line 2974
              (jit->ip) ++;
#line 2974
              *tmp___26 = imb___1.b[3];
#line 2974
              break;
            }
          }
#line 2974
          break;
        }
#line 2974
        break;
      }
#line 2974
      break;
    }
  } else {
#line 2975
    while (1) {
#line 2975
      if ((int )sizeof(void *) == 2) {
#line 2975
        tmp___27 = jit->ip;
#line 2975
        (jit->ip) ++;
#line 2975
        *tmp___27 = (unsigned char)102;
      }
#line 2975
      while (1) {
#line 2975
        if ((int )sizeof(void *) > 4) {
#line 2975
          tmp___28 = 8;
        } else {
#line 2975
          tmp___28 = 0;
        }
#line 2975
        if (hreg_id > 7) {
#line 2975
          tmp___29 = 4;
        } else {
#line 2975
          tmp___29 = 0;
        }
#line 2975
        _amd64_rex_bits___0 = (unsigned char )(tmp___28 | tmp___29);
#line 2975
        if ((int )_amd64_rex_bits___0 != 0) {
#line 2975
          tmp___30 = jit->ip;
#line 2975
          (jit->ip) ++;
#line 2975
          *tmp___30 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
        } else
#line 2975
        if ((int )sizeof(void *) == 1) {
#line 2975
          tmp___30 = jit->ip;
#line 2975
          (jit->ip) ++;
#line 2975
          *tmp___30 = (unsigned char )(0x40 | (int )_amd64_rex_bits___0);
        }
#line 2975
        break;
      }
#line 2975
      switch ((int )sizeof(void *)) {
      case 1: 
#line 2975
      tmp___31 = jit->ip;
#line 2975
      (jit->ip) ++;
#line 2975
      *tmp___31 = (unsigned char)136;
#line 2975
      break;
      case 8: 
      case 4: 
      case 2: 
#line 2975
      tmp___32 = jit->ip;
#line 2975
      (jit->ip) ++;
#line 2975
      *tmp___32 = (unsigned char)137;
#line 2975
      break;
      default: 
#line 2975
      tmp___33 = __builtin_expect(1L, 0L);
#line 2975
      if (tmp___33) {
#line 2975
        __assert_rtn((char const   *)"emit_ureg", (char const   *)"./jitter-Darwin-X86-64.c",
                     2975, (char const   *)"0");
      }
      }
#line 2975
      while (1) {
#line 2975
        if (0) {
#line 2975
          if (stack_pos == 0) {
#line 2975
            while (1) {
#line 2975
              tmp___34 = jit->ip;
#line 2975
              (jit->ip) ++;
#line 2975
              *tmp___34 = (unsigned char )((((hreg_id & 0x7) & 0x07) << 3) | 4);
#line 2975
              break;
            }
#line 2975
            while (1) {
#line 2975
              tmp___35 = jit->ip;
#line 2975
              (jit->ip) ++;
#line 2975
              *tmp___35 = (unsigned char )((4 << 3) | 4);
#line 2975
              break;
            }
          } else
#line 2975
          if ((jit_value )stack_pos >= -128L) {
#line 2975
            if ((jit_value )stack_pos <= 127L) {
#line 2975
              while (1) {
#line 2975
                tmp___36 = jit->ip;
#line 2975
                (jit->ip) ++;
#line 2975
                *tmp___36 = (unsigned char )(((1 << 6) | (((hreg_id & 0x7) & 0x07) << 3)) | 4);
#line 2975
                break;
              }
#line 2975
              while (1) {
#line 2975
                tmp___37 = jit->ip;
#line 2975
                (jit->ip) ++;
#line 2975
                *tmp___37 = (unsigned char )((4 << 3) | 4);
#line 2975
                break;
              }
#line 2975
              while (1) {
#line 2975
                *(jit->ip) = (unsigned char )(stack_pos & 0xff);
#line 2975
                (jit->ip) ++;
#line 2975
                break;
              }
            } else {
#line 2975
              goto _L___1;
            }
          } else {
            _L___1: /* CIL Label */ 
#line 2975
            while (1) {
#line 2975
              tmp___38 = jit->ip;
#line 2975
              (jit->ip) ++;
#line 2975
              *tmp___38 = (unsigned char )(((2 << 6) | (((hreg_id & 0x7) & 0x07) << 3)) | 4);
#line 2975
              break;
            }
#line 2975
            while (1) {
#line 2975
              tmp___39 = jit->ip;
#line 2975
              (jit->ip) ++;
#line 2975
              *tmp___39 = (unsigned char )((4 << 3) | 4);
#line 2975
              break;
            }
#line 2975
            while (1) {
#line 2975
              imb___2.val = stack_pos;
#line 2975
              tmp___40 = jit->ip;
#line 2975
              (jit->ip) ++;
#line 2975
              *tmp___40 = imb___2.b[0];
#line 2975
              tmp___41 = jit->ip;
#line 2975
              (jit->ip) ++;
#line 2975
              *tmp___41 = imb___2.b[1];
#line 2975
              tmp___42 = jit->ip;
#line 2975
              (jit->ip) ++;
#line 2975
              *tmp___42 = imb___2.b[2];
#line 2975
              tmp___43 = jit->ip;
#line 2975
              (jit->ip) ++;
#line 2975
              *tmp___43 = imb___2.b[3];
#line 2975
              break;
            }
          }
#line 2975
          break;
        }
#line 2975
        if (stack_pos == 0) {

        }
#line 2975
        if ((jit_value )stack_pos >= -128L) {
#line 2975
          if ((jit_value )stack_pos <= 127L) {
#line 2975
            while (1) {
#line 2975
              tmp___45 = jit->ip;
#line 2975
              (jit->ip) ++;
#line 2975
              *tmp___45 = (unsigned char )(((1 << 6) | (((hreg_id & 0x7) & 0x07) << 3)) | 5);
#line 2975
              break;
            }
#line 2975
            while (1) {
#line 2975
              *(jit->ip) = (unsigned char )(stack_pos & 0xff);
#line 2975
              (jit->ip) ++;
#line 2975
              break;
            }
          } else {
#line 2975
            goto _L___2;
          }
        } else {
          _L___2: /* CIL Label */ 
#line 2975
          while (1) {
#line 2975
            tmp___46 = jit->ip;
#line 2975
            (jit->ip) ++;
#line 2975
            *tmp___46 = (unsigned char )(((2 << 6) | (((hreg_id & 0x7) & 0x07) << 3)) | 5);
#line 2975
            break;
          }
#line 2975
          while (1) {
#line 2975
            imb___3.val = stack_pos;
#line 2975
            tmp___47 = jit->ip;
#line 2975
            (jit->ip) ++;
#line 2975
            *tmp___47 = imb___3.b[0];
#line 2975
            tmp___48 = jit->ip;
#line 2975
            (jit->ip) ++;
#line 2975
            *tmp___48 = imb___3.b[1];
#line 2975
            tmp___49 = jit->ip;
#line 2975
            (jit->ip) ++;
#line 2975
            *tmp___49 = imb___3.b[2];
#line 2975
            tmp___50 = jit->ip;
#line 2975
            (jit->ip) ++;
#line 2975
            *tmp___50 = imb___3.b[3];
#line 2975
            break;
          }
        }
#line 2975
        break;
      }
#line 2975
      break;
    }
  }
#line 2976
  return;
}
}
/* END FUNCTION-DEF emit_ureg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF open_disasm LOC=UNKNOWN */
static FILE *open_disasm(void) 
{ 
  int fds[2] ;
  pid_t child ;
  pid_t tmp ;
  char *path ;
  FILE *f ;
  FILE *tmp___0 ;

  {
#line 4778
  pipe((int *)(fds));
#line 4780
  tmp = fork();
#line 4780
  child = tmp;
#line 4781
  if (child == 0) {
#line 4782
    close(fds[1]);
#line 4783
    dup2(fds[0], 0);
#line 4787
    path = "./myjit-disasm";
#line 4788
    execlp((char const   *)path, (char const   *)path, (void *)0);
#line 4790
    path = "myjit-disasm";
#line 4791
    execlp((char const   *)path, (char const   *)path, (void *)0);
#line 4793
    path = getenv((char const   *)"MYJIT_DISASM");
#line 4794
    if (path) {
#line 4794
      execlp((char const   *)path, (char const   *)path, (void *)0);
    }
#line 4796
    printf((char const   */* __restrict  */)"myjit-disasm not found\n\n");
#line 4797
    printf((char const   */* __restrict  */)"In order to list myjit operations along with the machine code, the MyJIT disassembler has to be present in the current directory or its path has to be specified in the MYJIT_DISASM environment variable.\nThe disassembler\'s source code can be found in the \"disasm/\" directory.\n\n");
#line 4798
    exit(1);
  }
#line 4802
  close(fds[0]);
#line 4803
  tmp___0 = fdopen(fds[1], (char const   *)"w");
#line 4803
  f = tmp___0;
#line 4804
  return (f);
}
}
/* END FUNCTION-DEF open_disasm LOC=UNKNOWN */
