/* Generated by CIL v. 1.7.3 */
/* print_CIL_Input is false */

#pragma clang assume_nonnull begin
#pragma clang assume_nonnull end
#pragma clang assume_nonnull begin
#pragma clang assume_nonnull end
#pragma clang assume_nonnull begin
#pragma clang assume_nonnull end
struct _2_init_tigress_1_opaque_NodeStruct ;
struct __darwin_x86_thread_full_state64 ;
struct __sFILEX ;
struct _opaque_pthread_t ;
struct fssearchblock ;
struct jit ;
struct jit_debug_info ;
struct jit_func_info ;
struct jit_rmap ;
struct jit_set ;
struct jit_tree ;
struct pthread_override_s ;
struct searchstate ;
enum __anonenum_AMD64_REX_Bits_69261688 ;
enum __anonenum_X86_CC_467256102 ;
struct __anonstruct__RuneCharClass_1021650748 ;
union __anonunion_amd64_imm_buf_340631928 ;
union __anonunion_value_178427841 ;
struct __darwin_i386_avx_state ;
struct __darwin_i386_exception_state ;
struct __darwin_i386_float_state ;
struct __darwin_mcontext_avx64 ;
struct __darwin_x86_debug_state32 ;
struct __darwin_ymm_reg ;
struct clockinfo ;
struct jit_label ;
struct jit_tree ;
struct output_buf ;
enum __anonenum_X86_SSE_CmpCode_848838535 ;
enum __anonenum_idtype_t_558242672 ;
union _3_fib_$node ;
struct __darwin_i386_thread_state ;
struct __darwin_mcontext64_full ;
struct _opaque_pthread_rwlock_t ;
struct _opaque_pthread_rwlockattr_t ;
struct jit_op ;
struct rusage_info_v0 ;
struct rusage_info_v3 ;
struct sched_param ;
enum __anonenum_X86_Shift_Opcode_820104407 ;
struct __anonstruct_jit_hw_reg_312769258 ;
struct __anonstruct_w_S_422959016 ;
struct __anonstruct_w_T_422959015 ;
struct __darwin_mcontext64 ;
struct __darwin_mcontext_avx512_32 ;
struct __darwin_mcontext_avx512_64_full ;
struct __darwin_mcontext_avx64_full ;
struct __sbuf ;
struct __x86_pagein_state ;
struct _opaque_pthread_condattr_t ;
struct accessx_descriptor ;
struct jit_out_arg ;
struct rusage_info_v1 ;
struct timezone ;
union wait ;
enum JIT_OPCODE ;
enum __anonenum_788482901 ;
enum __anonenum_X86_ALU_Opcode_144447433 ;
struct __anonstruct__RuneLocale_110080762 ;
struct __anonstruct__RuneRange_1000210131 ;
struct __anonstruct_ldiv_t_748949161 ;
struct __anonstruct_lldiv_t_86583852 ;
union __anonunion___mbstate_t_250061491 ;
union __anonunion_location_1021650749 ;
union __anonunion_x86_imm_buf_549773081 ;
struct __darwin_fp_status ;
struct __darwin_mcontext32 ;
struct __darwin_mcontext_avx32 ;
struct __darwin_mmst_reg ;
struct __darwin_sigaltstack ;
struct __darwin_zmm_reg ;
union __sigaction_u ;
struct _opaque_pthread_mutexattr_t ;
struct _opaque_pthread_once_t ;
struct jit_func_info ;
struct rlimit ;
struct sigevent ;
struct timespec ;
enum __anonenum_X86_Prefix_200431650 ;
enum __anonenum_clockid_t_447627989 ;
struct __anonstruct__RuneEntry_453100079 ;
struct __anonstruct_div_t_773697287 ;
struct __darwin_fp_control ;
struct __darwin_i386_avx512_state ;
struct __darwin_mcontext_avx512_64 ;
struct __darwin_opmask_reg ;
struct __darwin_pthread_handler_rec ;
struct __darwin_ucontext ;
struct __darwin_x86_avx_state64 ;
struct __darwin_x86_debug_state64 ;
struct __darwin_x86_exception_state64 ;
struct __darwin_x86_float_state64 ;
struct __siginfo ;
struct _opaque_pthread_mutex_t ;
struct fd_set ;
struct jit_allocator_hint ;
struct jit_set ;
enum __anonenum_X86_FP_Opcode_1068131184 ;
enum jit_amd64_gp_regs ;
enum jit_x86_fp_regs ;
struct __sFILE ;
struct copy_target ;
struct itimerval ;
struct jit_inp_arg ;
struct jit_prepared_args ;
union jit_proc_value_alias ;
struct rusage ;
struct rusage_info_v4 ;
struct sigvec ;
struct timeval ;
struct timeval64 ;
enum __anonenum_X86_SSE_Opcode_853888746 ;
enum jit_amd64_fp_regs ;
enum jit_inp_type ;
struct __darwin_x86_avx512_state64 ;
struct __darwin_x86_cpmu_state64 ;
struct __darwin_x86_thread_state64 ;
struct __darwin_xmm_reg ;
struct _opaque_pthread_cond_t ;
struct jit ;
struct jit_reg_allocator ;
struct tm ;
enum __anonenum_321777801 ;
enum __anonenum_342172182 ;
enum jit_warning ;
enum jit_x86_gp_regs ;
struct __sigaction ;
struct _opaque_pthread_attr_t ;
struct code_refs_cache ;
struct jit_debug_info ;
struct jit_disasm ;
struct jit_rmap ;
struct proc_rlimit_control_wakeupmon ;
struct rusage_info_v2 ;
struct sigaction ;
struct sigstack ;
union sigval ;
struct transfer_info ;
typedef struct __anonstruct__RuneLocale_110080762 _RuneLocale;
typedef unsigned int u_int;
extern long mrand48(void)  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
__inline extern int isdigit(int _c ) ;
enum jit_x86_gp_regs {
    X86_EAX = 0,
    X86_ECX = 1,
    X86_EDX = 2,
    X86_EBX = 3,
    X86_ESP = 4,
    X86_EBP = 5,
    X86_ESI = 6,
    X86_EDI = 7,
    X86_NREG = 8
} ;
typedef long __darwin_ssize_t;
typedef unsigned long long __uint64_t;
typedef __uint64_t __darwin_ino64_t;
typedef __darwin_ino64_t __darwin_ino_t;
typedef __darwin_ino_t ino_t;
enum __anonenum_342172182 {
    X86_FP_C0 = 256,
    X86_FP_C1 = 512,
    X86_FP_C2 = 1024,
    X86_FP_C3 = 16384,
    X86_FP_CC_MASK = 17664
} ;
typedef struct __sFILE FILE;
extern int putc(int  , FILE * ) ;
struct _opaque_pthread_cond_t {
   long __sig ;
   char __opaque[40] ;
};
typedef struct _opaque_pthread_cond_t __darwin_pthread_cond_t;
typedef __darwin_pthread_cond_t pthread_cond_t;
struct _opaque_pthread_mutex_t {
   long __sig ;
   char __opaque[56] ;
};
typedef struct _opaque_pthread_mutex_t __darwin_pthread_mutex_t;
typedef __darwin_pthread_mutex_t pthread_mutex_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_timedwait_relative_np(pthread_cond_t * ,
                                                                                                                                              pthread_mutex_t * ,
                                                                                                                                              struct timespec  const  * _Nullable   ) ;
typedef int __int32_t;
typedef __int32_t __darwin_blksize_t;
typedef __darwin_blksize_t blksize_t;
struct _opaque_pthread_attr_t {
   long __sig ;
   char __opaque[56] ;
};
typedef struct _opaque_pthread_attr_t __darwin_pthread_attr_t;
typedef __darwin_pthread_attr_t pthread_attr_t;
typedef unsigned int qos_class_t;
extern int __attribute__((__availability__(ios,introduced=8.0), __availability__(macos,introduced=10.10)))  pthread_attr_get_qos_class_np(pthread_attr_t * __restrict  __attr ,
                                                                                                                                          qos_class_t * _Nullable __restrict  __qos_class ,
                                                                                                                                          int * _Nullable __restrict  __relative_priority ) ;
typedef int int32_t;
typedef int32_t daddr_t;
typedef unsigned int __uint32_t;
typedef __uint32_t in_addr_t;
__inline extern int ( __attribute__((__always_inline__)) __darwin_fd_isset)(int _fd ,
                                                                            struct fd_set  const  *_p ) ;
extern  __attribute__((__noreturn__)) void __attribute__((__availability__(macos,introduced=10.4),
__availability__(ios,introduced=2.0)))  pthread_exit(void * _Nullable   ) ;
void jit_patch_external_calls(struct jit *jit ) ;
extern char *ctermid(char * ) ;
struct _2_init_tigress_1_opaque_NodeStruct {
   struct _2_init_tigress_1_opaque_NodeStruct *next ;
   int data ;
   struct _2_init_tigress_1_opaque_NodeStruct *prev ;
};
struct _2_init_tigress_1_opaque_NodeStruct *_2_init_tigress_1_opaque_ptr_2  =    (struct _2_init_tigress_1_opaque_NodeStruct *)0;
extern int fputs(char const   * __restrict   , FILE * __restrict   )  __asm__("_fputs")  ;
extern void arc4random_addrandom(unsigned char * , int  )  __attribute__((__availability__(watchos,deprecated=3.0,message="use arc4random_stir"),
__availability__(watchos,introduced=1.0), __availability__(tvos,deprecated=10.0,message="use arc4random_stir"),
__availability__(tvos,introduced=2.0), __availability__(ios,deprecated=10.0,message="use arc4random_stir"),
__availability__(ios,introduced=2.0), __availability__(macosx,deprecated=10.12,message="use arc4random_stir"),
__availability__(macosx,introduced=10.0))) ;
typedef __int32_t __darwin_suseconds_t;
typedef long __darwin_time_t;
struct timeval {
   __darwin_time_t tv_sec ;
   __darwin_suseconds_t tv_usec ;
};
struct rusage {
   struct timeval ru_utime ;
   struct timeval ru_stime ;
   long ru_maxrss ;
   long ru_ixrss ;
   long ru_idrss ;
   long ru_isrss ;
   long ru_minflt ;
   long ru_majflt ;
   long ru_nswap ;
   long ru_inblock ;
   long ru_oublock ;
   long ru_msgsnd ;
   long ru_msgrcv ;
   long ru_nsignals ;
   long ru_nvcsw ;
   long ru_nivcsw ;
};
extern void funlockfile(FILE * ) ;
extern int setiopolicy_np(int  , int  , int  )  __attribute__((__availability__(macosx,introduced=10.5))) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setstackaddr(pthread_attr_t * ,
                                                                                                                                     void * ) ;
extern int __attribute__((__availability__(ios,introduced=8.0), __availability__(macos,introduced=10.10)))  pthread_attr_set_qos_class_np(pthread_attr_t *__attr ,
                                                                                                                                          qos_class_t __qos_class ,
                                                                                                                                          int __relative_priority ) ;
extern int setitimer(int  , struct itimerval  const  * __restrict   , struct itimerval * __restrict   ) ;
extern void __attribute__((__deprecated__, __availability__(watchos,unavailable),
__availability__(tvos,unavailable)))  *brk(void const   * ) ;
static struct output_buf *ob_new(void) ;
extern int optreset ;
typedef unsigned long long u_int64_t;
extern FILE *tmpfile(void) ;
extern int getloadavg(double * , int  ) ;
typedef int __darwin_ct_rune_t;
extern unsigned long ___runetype(__darwin_ct_rune_t  ) ;
extern char *getpass(char const   * ) ;
typedef struct jit_tree jit_tree;
typedef long jit_value;
typedef jit_value jit_tree_key;
typedef void *jit_tree_value;
__inline static jit_tree *node_new(jit_tree_key key , jit_tree_value value ) ;
typedef __uint32_t __darwin_wctype_t;
enum __anonenum_AMD64_REX_Bits_69261688 {
    AMD64_REX_B = 1,
    AMD64_REX_X = 2,
    AMD64_REX_R = 4,
    AMD64_REX_W = 8
} ;
__inline extern int isphonogram(int _c ) ;
typedef unsigned char __uint8_t;
struct jit_rmap {
   jit_tree *map ;
};
typedef __builtin_va_list __darwin_va_list;
typedef __darwin_va_list va_list;
extern int ( /* format attribute */  vsprintf)(char * __restrict   , char const   * __restrict   ,
                                               va_list  )  __attribute__((__availability__(swift,unavailable,message="Use vsnprintf instead."))) ;
extern int fileno(FILE * ) ;
extern int ( /* format attribute */  vprintf)(char const   * __restrict   , va_list  ) ;
typedef __uint32_t __darwin_gid_t;
typedef __darwin_gid_t gid_t;
extern int getgroups(int  , gid_t * ) ;
__inline extern int isideogram(int _c ) ;
extern char *strtok_r(char *__str , char const   *__sep , char **__lasts ) ;
typedef struct _opaque_pthread_t *__darwin_pthread_t;
typedef __darwin_pthread_t pthread_t;
extern pthread_t __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  pthread_self(void) ;
int jit_optimize_join_addmul(struct jit *jit ) ;
extern int strcasecmp(char const   * , char const   * ) ;
struct __darwin_fp_control {
   unsigned short __invalid : 1 ;
   unsigned short __denorm : 1 ;
   unsigned short __zdiv : 1 ;
   unsigned short __ovrfl : 1 ;
   unsigned short __undfl : 1 ;
   unsigned short __precis : 1 ;
   unsigned short  : 2 ;
   unsigned short __pc : 2 ;
   unsigned short __rc : 2 ;
   unsigned short  : 1 ;
   unsigned short  : 3 ;
};
struct __darwin_fp_status {
   unsigned short __invalid : 1 ;
   unsigned short __denorm : 1 ;
   unsigned short __zdiv : 1 ;
   unsigned short __ovrfl : 1 ;
   unsigned short __undfl : 1 ;
   unsigned short __precis : 1 ;
   unsigned short __stkflt : 1 ;
   unsigned short __errsumm : 1 ;
   unsigned short __c0 : 1 ;
   unsigned short __c1 : 1 ;
   unsigned short __c2 : 1 ;
   unsigned short __tos : 3 ;
   unsigned short __c3 : 1 ;
   unsigned short __busy : 1 ;
};
struct __darwin_mmst_reg {
   char __mmst_reg[10] ;
   char __mmst_rsrv[6] ;
};
struct __darwin_xmm_reg {
   char __xmm_reg[16] ;
};
typedef unsigned short __uint16_t;
struct __darwin_i386_avx_state {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   char __fpu_rsrv4[224] ;
   int __fpu_reserved1 ;
   char __avx_reserved1[64] ;
   struct __darwin_xmm_reg __fpu_ymmh0 ;
   struct __darwin_xmm_reg __fpu_ymmh1 ;
   struct __darwin_xmm_reg __fpu_ymmh2 ;
   struct __darwin_xmm_reg __fpu_ymmh3 ;
   struct __darwin_xmm_reg __fpu_ymmh4 ;
   struct __darwin_xmm_reg __fpu_ymmh5 ;
   struct __darwin_xmm_reg __fpu_ymmh6 ;
   struct __darwin_xmm_reg __fpu_ymmh7 ;
};
int _4_fib___freq  =    0;
typedef __int32_t __darwin_pid_t;
typedef __darwin_pid_t pid_t;
extern pid_t setpgrp(void)  __asm__("_setpgrp")  ;
typedef struct __anonstruct_jit_hw_reg_312769258 jit_hw_reg;
typedef struct jit_op jit_op;
static int is_active_register(struct jit_reg_allocator *al , jit_hw_reg *reg , jit_op *op ) ;
extern int mkstempsat_np(int dfd , char *path , int slen )  __attribute__((__availability__(watchos,introduced=4.0),
__availability__(tvos,introduced=11.0), __availability__(ios,introduced=11.0), __availability__(macosx,introduced=10.13))) ;
typedef struct fd_set fd_set;
extern char *ptsname(int  ) ;
struct _opaque_pthread_condattr_t {
   long __sig ;
   char __opaque[8] ;
};
typedef struct _opaque_pthread_condattr_t __darwin_pthread_condattr_t;
typedef __darwin_pthread_condattr_t pthread_condattr_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_condattr_getpshared(pthread_condattr_t const   * __restrict   ,
                                                                                                                                       int * __restrict   ) ;
__inline static void jump_adjustment(struct jit *jit , jit_op *op ) ;
static int jit_tree_equal(jit_tree *r1 , jit_tree *r2 ) ;
extern int rand_r(unsigned int * )  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
typedef int32_t int_fast32_t;
typedef long long __int64_t;
typedef __int64_t __darwin_off_t;
typedef __darwin_off_t fpos_t;
extern int daemon(int  , int  )  __asm__("_daemon$1050") __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable), __availability__(macosx,introduced=10.0,deprecated=10.5,message="Use posix_spawn APIs instead."))) ;
typedef __darwin_time_t time_t;
extern time_t time(time_t * ) ;
__inline extern int isrune(int _c ) ;
typedef int32_t segsz_t;
extern int getopt(int  , char * const  * , char const   * )  __asm__("_getopt")  ;
typedef __int32_t fd_mask;
extern int __srget(FILE * ) ;
extern pid_t getsid(pid_t  ) ;
__inline extern int tolower(int _c ) ;
typedef unsigned long __darwin_size_t;
typedef __darwin_size_t size_t;
extern void *( __attribute__((__warn_unused_result__)) malloc)(size_t size )  __attribute__((__alloc_size__(1))) ;
extern  __attribute__((__noreturn__)) void _exit(int  ) ;
extern int fchdir(int  ) ;
__inline static int is_suitable_mul(jit_op *op ) ;
typedef long long int64_t;
typedef int64_t register_t;
typedef union __anonunion_amd64_imm_buf_340631928 amd64_imm_buf;
extern int adjtime(struct timeval  const  * , struct timeval * ) ;
extern pid_t tcgetpgrp(int  ) ;
typedef long __darwin_ptrdiff_t;
extern int getw(FILE * ) ;
void jit_allocator_hints_free(jit_tree *hints ) ;
typedef enum jit_amd64_gp_regs AMD64_Reg_No;
extern char *realpath(char const   * __restrict   , char * __restrict   )  __asm__("_realpath$DARWIN_EXTSN")  ;
typedef __uint32_t __darwin_uid_t;
typedef __darwin_uid_t uid_t;
extern int chown(char const   * , uid_t  , gid_t  ) ;
int jit_optimize_join_addimm(struct jit *jit ) ;
static int emit_push_caller_saved_regs(struct jit *jit , jit_op *op ) ;
enum JIT_OPCODE {
    JIT_CALL = 0,
    JIT_BMS = 8,
    JIT_RENAMEREG = 16,
    JIT_FST = 24,
    JIT_SUB = 32,
    JIT_FORCE_ASSOC = 40,
    JIT_ADDX = 48,
    JIT_REF_DATA = 56,
    JIT_FMOV = 64,
    JIT_RET = 72,
    JIT_SUBX = 80,
    JIT_EXT = 88,
    JIT_FRET = 96,
    JIT_ADD = 104,
    JIT_BLE = 112,
    JIT_FPUTARG = 120,
    JIT_MARK = 128,
    JIT_PATCH = 136,
    JIT_EQ = 144,
    JIT_COMMENT = 152,
    JIT_LD = 160,
    JIT_ROUND = 168,
    JIT_AND = 176,
    JIT_X86_STXI = 184,
    JIT_FBGT = 192,
    JIT_XOR = 200,
    JIT_RETVAL = 208,
    JIT_NE = 216,
    JIT_HMUL = 224,
    JIT_FSTX = 232,
    JIT_TRANSFER_ADDS = 240,
    JIT_TRANSFER = 248,
    JIT_ST = 256,
    JIT_TRANSFER_AND = 264,
    JIT_LE = 272,
    JIT_TRANSFER_CPY = 280,
    JIT_FDIV = 288,
    JIT_TOUCH = 296,
    JIT_BMC = 304,
    JIT_X86_ADDMUL = 312,
    JIT_MSG = 320,
    JIT_BNOSUB = 328,
    JIT_TRANSFER_SUB = 336,
    JIT_BGT = 344,
    JIT_DATA_BYTE = 352,
    JIT_TRACE = 360,
    JIT_NOT = 368,
    JIT_FSUB = 376,
    JIT_FBGE = 384,
    JIT_SUBC = 392,
    JIT_OR = 400,
    JIT_MOD = 408,
    JIT_SYNCREG = 416,
    JIT_RSB = 424,
    JIT_LREG = 432,
    JIT_X86_ADDIMM = 440,
    JIT_PUTARG = 448,
    JIT_LABEL = 456,
    JIT_TRANSFER_ADD = 464,
    JIT_TRUNC = 472,
    JIT_BLT = 480,
    JIT_DATA_REF_DATA = 488,
    JIT_CODESTART = 496,
    JIT_FBNE = 504,
    JIT_STX = 512,
    JIT_DATA_REF_CODE = 520,
    JIT_NOP = 528,
    JIT_PROLOG = 536,
    JIT_LSH = 544,
    JIT_MUL = 552,
    JIT_MEMCPY = 560,
    JIT_BNOADD = 568,
    JIT_NEG = 576,
    JIT_BGE = 584,
    JIT_MEMSET = 592,
    JIT_FRSB = 600,
    JIT_BNE = 608,
    JIT_FMUL = 616,
    JIT_UREG = 624,
    JIT_TRANSFER_SUBS = 632,
    JIT_FLD = 640,
    JIT_X86_STI = 648,
    JIT_FNEG = 656,
    JIT_BOSUB = 664,
    JIT_ADDC = 672,
    JIT_FADD = 680,
    JIT_LT = 688,
    JIT_FRETVAL = 696,
    JIT_FULL_SPILL = 704,
    JIT_GT = 712,
    JIT_RSH = 720,
    JIT_GETARG = 728,
    JIT_FLOOR = 736,
    JIT_FBLE = 744,
    JIT_FLDX = 752,
    JIT_CODE_ALIGN = 760,
    JIT_BOADD = 768,
    JIT_PREPARE = 776,
    JIT_DECL_ARG = 784,
    JIT_TRANSFER_XOR = 792,
    JIT_CEIL = 800,
    JIT_JMP = 808,
    JIT_FBEQ = 816,
    JIT_FBLT = 824,
    JIT_REF_CODE = 832,
    JIT_MOV = 840,
    JIT_BEQ = 848,
    JIT_FORCE_SPILL = 856,
    JIT_DIV = 864,
    JIT_LDX = 872,
    JIT_DATA_BYTES = 880,
    JIT_ALLOCA = 888,
    JIT_TRANSFER_OR = 896,
    JIT_GE = 904
} ;
void fib(int n ) ;
__inline static void make_nop(jit_op *op ) ;
static jit_hw_reg *make_free_reg(struct jit_reg_allocator *al , jit_op *op , jit_value for_reg ) ;
__inline extern int ( __attribute__((__always_inline__)) __darwin_check_fd_set)(int _a ,
                                                                                void const   *_b ) ;
typedef struct __anonstruct_lldiv_t_86583852 lldiv_t;
static void emit_funcall(struct jit *jit , struct jit_op *op , int imm ) ;
__inline static struct jit_func_info *jit_current_func_info(struct jit *jit ) ;
struct jit_disasm {
   char *indent_template ;
   char *reg_template ;
   char *freg_template ;
   char *arg_template ;
   char *farg_template ;
   char *reg_fp_template ;
   char *reg_out_template ;
   char *reg_imm_template ;
   char *reg_fimm_template ;
   char *reg_unknown_template ;
   char *label_template ;
   char *label_forward_template ;
   char *generic_addr_template ;
   char *generic_value_template ;
};
struct jit_disasm jit_disasm_compilable ;
extern int ffs(int  ) ;
typedef __uint32_t __darwin_useconds_t;
typedef __darwin_useconds_t useconds_t;
extern useconds_t ualarm(useconds_t  , useconds_t  ) ;
extern int searchfs(char const   * , struct fssearchblock * , unsigned long * , unsigned int  ,
                    unsigned int  , struct searchstate * )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
struct transfer_info {
   int sourcereg ;
   int destreg ;
   int scrapreg ;
   int scrap_in_use ;
   int counterreg ;
   int counter_in_use ;
   int block_size ;
   unsigned char *loop_addr ;
};
void x86_cc_unsigned_map_i$nit(void) ;
static void emit_sse_branch(struct jit *jit , jit_op *op , long a1 , long a2 , long a3 ,
                            int x86_cond ) ;
typedef __int64_t __darwin_blkcnt_t;
__inline extern int isspace(int _c ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_signal(pthread_cond_t * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_getconcurrency(void) ;
static void emit_ldx_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                        jit_value a3 ) ;
static void emit_sse_div_op(struct jit *jit , long a1 , long a2 , long a3 ) ;
extern pid_t getpid(void) ;
static int join_addi_addr(jit_op *op , jit_op *nextop ) ;
__inline static void initialize_code_refs(struct code_refs_cache *code_refs , struct jit_func_info *func_info ) ;
static int jit_op_is_data_op(jit_op *op ) ;
typedef signed char __int8_t;
typedef int __darwin_wctrans_t;
extern int ( /* format attribute */  vsnprintf)(char * __restrict  __str , size_t __size ,
                                                char const   * __restrict  __format ,
                                                va_list  ) ;
extern double erand48(unsigned short * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_lock(pthread_mutex_t * ) ;
typedef unsigned int __darwin_natural_t;
typedef __darwin_natural_t __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
typedef __darwin_mach_port_t mach_port_t;
extern mach_port_t __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  pthread_mach_thread_np(pthread_t  ) ;
extern int nice(int  )  __asm__("_nice")  ;
extern int gethostname(char * , size_t  ) ;
enum __anonenum_idtype_t_558242672 {
    P_ALL = 0,
    P_PID = 1,
    P_PGID = 2
} ;
typedef __uint32_t __darwin_id_t;
typedef __darwin_id_t id_t;
typedef enum __anonenum_idtype_t_558242672 idtype_t;
typedef struct __siginfo siginfo_t;
extern int waitid(idtype_t  , id_t  , siginfo_t * , int  )  __asm__("_waitid")  ;
extern struct tm *getdate(char const   * ) ;
static void emit_transfer_loop(struct jit *jit , jit_op *op ) ;
typedef __uint16_t __darwin_mode_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getstacksize(pthread_attr_t const   * __restrict   ,
                                                                                                                                     size_t * __restrict   ) ;
extern void *memmem(void const   *__big , size_t __big_len , void const   *__little ,
                    size_t __little_len )  __attribute__((__availability__(macosx,introduced=10.7))) ;
extern int mlockall(int  ) ;
extern int setreuid(uid_t  , uid_t  )  __asm__("_setreuid")  ;
extern  __attribute__((__noreturn__)) void exit(int  ) ;
extern int putc_unlocked(int  , FILE * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_setschedparam(pthread_t  ,
                                                                                                                                 int  ,
                                                                                                                                 struct sched_param  const  * ) ;
extern int ( /* format attribute */  vscanf)(char const   * __restrict  __format ,
                                             va_list  ) ;
extern int __attribute__((__availability__(ios,introduced=8.0), __availability__(macos,introduced=10.10)))  pthread_get_qos_class_np(pthread_t __pthread ,
                                                                                                                                     qos_class_t * _Nullable __restrict  __qos_class ,
                                                                                                                                     int * _Nullable __restrict  __relative_priority ) ;
typedef struct jit_label jit_label;
static void free_labels(jit_label *lab ) ;
struct _opaque_pthread_t {
   long __sig ;
   struct __darwin_pthread_handler_rec *__cleanup_stack ;
   char __opaque[8176] ;
};
__inline static void mark_livecode(jit_op *op ) ;
extern int __mb_cur_max ;
extern int getiopolicy_np(int  , int  )  __attribute__((__availability__(macosx,introduced=10.5))) ;
static unsigned char bufx[32] ;
extern int __maskrune(__darwin_ct_rune_t  , unsigned long  ) ;
extern int getdtablesize(void) ;
extern int ffsctl(int  , unsigned long  , void * , unsigned int  )  __attribute__((__availability__(macosx,introduced=10.6))) ;
typedef __darwin_ssize_t ssize_t;
extern void swab(void const   * __restrict   , void * __restrict   , ssize_t  ) ;
__inline static jit_tree *rotate_right(jit_tree *h ) ;
__inline static void funcall_put_arg(struct jit *jit , jit_op *op ) ;
enum jit_warning {
    JIT_WARN_DEAD_CODE = 1,
    JIT_WARN_OP_WITHOUT_EFFECT = 2,
    JIT_WARN_INVALID_DATA_SIZE = 4,
    JIT_WARN_UNINITIALIZED_REG = 8,
    JIT_WARN_UNALIGNED_CODE = 16,
    JIT_WARN_INVALID_CODE_REFERENCE = 32,
    JIT_WARN_INVALID_DATA_REFERENCE = 64,
    JIT_WARN_MISSING_PATCH = 128,
    JIT_WARN_REGISTER_TYPE_MISMATCH = 256,
    JIT_WARN_ALL = 2147483647
} ;
extern void *memmove(void *__dst , void const   *__src , size_t __len ) ;
extern int cgetmatch(char const   * , char const   * ) ;
struct _opaque_pthread_mutexattr_t {
   long __sig ;
   char __opaque[8] ;
};
typedef struct _opaque_pthread_mutexattr_t __darwin_pthread_mutexattr_t;
typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;
extern int __attribute__((__availability__(tvos,introduced=11.3), __availability__(watchos,introduced=4.3),
__availability__(ios,introduced=11.3), __availability__(macos,introduced=10.13.4)))  pthread_mutexattr_getpolicy_np(pthread_mutexattr_t const   * __restrict   ,
                                                                                                                    int * __restrict   ) ;
typedef struct jit_set jit_set;
__inline static void jit_set_remove(jit_set *s , int value ) ;
static void jit_correct_long_imms(struct jit *jit ) ;
typedef unsigned char uint8_t;
typedef uint8_t uint_least8_t;
__inline static void jit_prepare_reg_counts(struct jit *jit ) ;
__inline extern int toupper(int _c ) ;
typedef long intmax_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setscope(pthread_attr_t * ,
                                                                                                                                 int  ) ;
enum __anonenum_788482901 {
    QOS_CLASS_USER_INTERACTIVE = 33,
    QOS_CLASS_USER_INITIATED = 25,
    QOS_CLASS_DEFAULT = 21,
    QOS_CLASS_UTILITY = 17,
    QOS_CLASS_BACKGROUND = 9,
    QOS_CLASS_UNSPECIFIED = 0
} ;
extern size_t fwrite(void const   * __restrict  __ptr , size_t __size , size_t __nitems ,
                     FILE * __restrict  __stream )  __asm__("_fwrite")  ;
extern char *fcvt(double  , int  , int * __restrict   , int * __restrict   ) ;
typedef __uint32_t __darwin_sigset_t;
typedef __darwin_sigset_t sigset_t;
extern int pselect(int  , fd_set * __restrict   , fd_set * __restrict   , fd_set * __restrict   ,
                   struct timespec  const  * __restrict   , sigset_t const   * __restrict   )  __asm__("_pselect$1050")  ;
typedef unsigned int uint32_t;
extern uint32_t arc4random_uniform(uint32_t __upper_bound )  __attribute__((__availability__(macosx,introduced=10.7))) ;
extern int __attribute__((__deprecated__))  rcmd(char ** , int  , char const   * ,
                                                 char const   * , char const   * ,
                                                 int * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getscope(pthread_attr_t const   * __restrict   ,
                                                                                                                                 int * __restrict   ) ;
extern char *asctime(struct tm  const  * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getschedpolicy(pthread_attr_t const   * __restrict   ,
                                                                                                                                       int * __restrict   ) ;
struct __darwin_x86_avx_state64 {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   struct __darwin_xmm_reg __fpu_xmm8 ;
   struct __darwin_xmm_reg __fpu_xmm9 ;
   struct __darwin_xmm_reg __fpu_xmm10 ;
   struct __darwin_xmm_reg __fpu_xmm11 ;
   struct __darwin_xmm_reg __fpu_xmm12 ;
   struct __darwin_xmm_reg __fpu_xmm13 ;
   struct __darwin_xmm_reg __fpu_xmm14 ;
   struct __darwin_xmm_reg __fpu_xmm15 ;
   char __fpu_rsrv4[96] ;
   int __fpu_reserved1 ;
   char __avx_reserved1[64] ;
   struct __darwin_xmm_reg __fpu_ymmh0 ;
   struct __darwin_xmm_reg __fpu_ymmh1 ;
   struct __darwin_xmm_reg __fpu_ymmh2 ;
   struct __darwin_xmm_reg __fpu_ymmh3 ;
   struct __darwin_xmm_reg __fpu_ymmh4 ;
   struct __darwin_xmm_reg __fpu_ymmh5 ;
   struct __darwin_xmm_reg __fpu_ymmh6 ;
   struct __darwin_xmm_reg __fpu_ymmh7 ;
   struct __darwin_xmm_reg __fpu_ymmh8 ;
   struct __darwin_xmm_reg __fpu_ymmh9 ;
   struct __darwin_xmm_reg __fpu_ymmh10 ;
   struct __darwin_xmm_reg __fpu_ymmh11 ;
   struct __darwin_xmm_reg __fpu_ymmh12 ;
   struct __darwin_xmm_reg __fpu_ymmh13 ;
   struct __darwin_xmm_reg __fpu_ymmh14 ;
   struct __darwin_xmm_reg __fpu_ymmh15 ;
};
extern int nanosleep(struct timespec  const  *__rqtp , struct timespec *__rmtp )  __asm__("_nanosleep")  ;
extern void bzero(void * , size_t  ) ;
extern int usleep(useconds_t  )  __asm__("_usleep")  ;
__inline extern int isblank(int _c ) ;
struct _opaque_pthread_once_t {
   long __sig ;
   char __opaque[8] ;
};
typedef struct _opaque_pthread_once_t __darwin_pthread_once_t;
typedef __darwin_pthread_once_t pthread_once_t;
static void emit_prolog_op(struct jit *jit , jit_op *op ) ;
extern void clearerr(FILE * ) ;
static jit_tree *prepare_labels(struct jit *jit ) ;
typedef struct _opaque_pthread_rwlock_t __darwin_pthread_rwlock_t;
extern time_t posix2time(time_t  ) ;
typedef __int32_t __darwin_dev_t;
typedef __darwin_dev_t dev_t;
typedef __darwin_mode_t mode_t;
extern char *devname(dev_t  , mode_t  ) ;
extern long long strtoll(char const   *__str , char **__endptr , int __base ) ;
__inline extern int isprint(int _c ) ;
struct __anonstruct_ldiv_t_748949161 {
   long quot ;
   long rem ;
};
extern qos_class_t __attribute__((__availability__(macos,introduced=10.10), __availability__(ios,introduced=8.0)))  qos_class_self(void) ;
char **_global_argv  =    (char **)0;
struct jit_disasm jit_disasm_general ;
extern int posix_memalign(void **__memptr , size_t __alignment , size_t __size )  __attribute__((__availability__(macosx,introduced=10.6))) ;
__inline extern int isascii(int _c ) ;
typedef enum JIT_OPCODE jit_opcode;
jit_opcode dummy_opcode ;
typedef unsigned long long uint64_t;
struct rusage_info_v1 {
   uint8_t ri_uuid[16] ;
   uint64_t ri_user_time ;
   uint64_t ri_system_time ;
   uint64_t ri_pkg_idle_wkups ;
   uint64_t ri_interrupt_wkups ;
   uint64_t ri_pageins ;
   uint64_t ri_wired_size ;
   uint64_t ri_resident_size ;
   uint64_t ri_phys_footprint ;
   uint64_t ri_proc_start_abstime ;
   uint64_t ri_proc_exit_abstime ;
   uint64_t ri_child_user_time ;
   uint64_t ri_child_system_time ;
   uint64_t ri_child_pkg_idle_wkups ;
   uint64_t ri_child_interrupt_wkups ;
   uint64_t ri_child_pageins ;
   uint64_t ri_child_elapsed_abstime ;
};
struct _opaque_pthread_rwlockattr_t {
   long __sig ;
   char __opaque[16] ;
};
typedef struct _opaque_pthread_rwlockattr_t __darwin_pthread_rwlockattr_t;
typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;
extern long random(void)  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
extern int getpeereid(int  , uid_t * , gid_t * ) ;
typedef unsigned short u_int16_t;
extern void flockfile(FILE * ) ;
extern int memcmp(void const   *__s1 , void const   *__s2 , size_t __n ) ;
static void emit_sse_fldx_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                             jit_value a3 ) ;
extern int putenv(char * )  __asm__("_putenv")  ;
struct sigvec {
   void (*sv_handler)(int  ) ;
   int sv_mask ;
   int sv_flags ;
};
static void emit_branch_op(struct jit *jit , struct jit_op *op , int cond , int imm ,
                           int sign ) ;
typedef unsigned long __darwin_pthread_key_t;
typedef __darwin_pthread_key_t pthread_key_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_key_create(pthread_key_t * ,
                                                                                                                              void (* _Nullable  )(void * ) ) ;
static int join_muli_addr(jit_op *op , jit_op *nextop ) ;
typedef struct pthread_override_s *pthread_override_t;
extern pthread_override_t __attribute__((__availability__(macos,introduced=10.10),
__availability__(ios,introduced=8.0)))  pthread_override_qos_class_start_np(pthread_t __pthread ,
                                                                            qos_class_t __qos_class ,
                                                                            int __relative_priority ) ;
__inline static jit_set *jit_set_clone(jit_set *s ) ;
extern int getsubopt(char ** , char * const  * , char ** ) ;
static void spill_ret_retreg(jit_op *op , jit_hw_reg *ret_reg ) ;
typedef struct __anonstruct__RuneEntry_453100079 _RuneEntry;
void jit_enable_optimization(struct jit *jit , int opt ) ;
struct timeval64 {
   __int64_t tv_sec ;
   __int64_t tv_usec ;
};
extern pid_t waitpid(pid_t  , int * , int  )  __asm__("_waitpid")  ;
extern char *strpbrk(char const   *__s , char const   *__charset ) ;
struct __darwin_i386_thread_state {
   unsigned int __eax ;
   unsigned int __ebx ;
   unsigned int __ecx ;
   unsigned int __edx ;
   unsigned int __edi ;
   unsigned int __esi ;
   unsigned int __ebp ;
   unsigned int __esp ;
   unsigned int __ss ;
   unsigned int __eflags ;
   unsigned int __eip ;
   unsigned int __cs ;
   unsigned int __ds ;
   unsigned int __es ;
   unsigned int __fs ;
   unsigned int __gs ;
};
extern void (*signal(int  , void (*)(int  ) ))(int  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getstackaddr(pthread_attr_t const   * __restrict   ,
                                                                                                                                     void * _Nullable  * _Nonnull __restrict   ) ;
typedef unsigned long uintptr_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_getprioceiling(pthread_mutex_t const   * __restrict   ,
                                                                                                                                        int * __restrict   ) ;
extern char *setstate(char const   * ) ;
static int assign_call(jit_op *op , struct jit_reg_allocator *al ) ;
struct __anonstruct__RuneRange_1000210131 {
   int __nranges ;
   _RuneEntry *__ranges ;
};
typedef struct __anonstruct__RuneCharClass_1021650748 _RuneCharClass;
typedef struct __anonstruct__RuneRange_1000210131 _RuneRange;
typedef int __darwin_wchar_t;
typedef __darwin_wchar_t __darwin_rune_t;
struct __anonstruct__RuneLocale_110080762 {
   char __magic[8] ;
   char __encoding[32] ;
   __darwin_rune_t (*__sgetrune)(char const   * , __darwin_size_t  , char const   ** ) ;
   int (*__sputrune)(__darwin_rune_t  , char * , __darwin_size_t  , char ** ) ;
   __darwin_rune_t __invalid_rune ;
   __uint32_t __runetype[1 << 8] ;
   __darwin_rune_t __maplower[1 << 8] ;
   __darwin_rune_t __mapupper[1 << 8] ;
   _RuneRange __runetype_ext ;
   _RuneRange __maplower_ext ;
   _RuneRange __mapupper_ext ;
   void *__variable ;
   int __variable_len ;
   int __ncharclasses ;
   _RuneCharClass *__charclasses ;
};
extern _RuneLocale _DefaultRuneLocale ;
extern void rewind(FILE * ) ;
extern struct tm *localtime(time_t const   * ) ;
static struct jit_op *jit_op_new(unsigned short code , unsigned char spec , long arg1 ,
                                 long arg2 , long arg3 , unsigned char arg_size ) ;
struct __darwin_i386_exception_state {
   __uint16_t __trapno ;
   __uint16_t __cpu ;
   __uint32_t __err ;
   __uint32_t __faultvaddr ;
};
struct __darwin_i386_float_state {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   char __fpu_rsrv4[224] ;
   int __fpu_reserved1 ;
};
struct __darwin_mcontext32 {
   struct __darwin_i386_exception_state __es ;
   struct __darwin_i386_thread_state __ss ;
   struct __darwin_i386_float_state __fs ;
};
__inline extern int digittoint(int _c ) ;
struct code_refs_cache {
   int size ;
   jit_op **ops ;
};
static void emit_sse_alu_op(struct jit *jit , jit_op *op , int sse_op ) ;
extern int cgetfirst(char ** , char ** ) ;
extern void __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  pthread_testcancel(void)  __asm__("_pthread_testcancel")  ;
extern size_t strxfrm(char *__s1 , char const   *__s2 , size_t __n ) ;
extern char *crypt(char const   * , char const   * ) ;
typedef long __darwin_intptr_t;
extern char *ctermid_r(char * ) ;
extern unsigned long long strtoull(char const   *__str , char **__endptr , int __base ) ;
void jit_disasm_compilable_i$nit(void) ;
struct _opaque_pthread_rwlock_t {
   long __sig ;
   char __opaque[192] ;
};
typedef __darwin_pthread_rwlock_t pthread_rwlock_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_init(pthread_rwlock_t * __restrict   ,
                                                                                                                               pthread_rwlockattr_t const   * _Nullable __restrict   )  __asm__("_pthread_rwlock_init")  ;
extern int execve(char const   *__file , char * const  *__argv , char * const  *__envp )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
extern char *getwd(char * ) ;
struct jit_allocator_hint {
   int last_pos ;
   int should_be_calleesaved ;
   int should_be_eax ;
   int refs ;
};
static void print_args(struct jit_disasm *disasm , struct output_buf *linebuf , jit_op *op ,
                       jit_tree *labels ) ;
extern int strcmp(char const   *__s1 , char const   *__s2 ) ;
extern char *index(char const   * , int  ) ;
static void emit_fret_op(struct jit *jit , jit_op *op ) ;
typedef __darwin_suseconds_t suseconds_t;
extern void __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  * _Nullable  pthread_getspecific(pthread_key_t  ) ;
void jit_regs_active(jit_op *op , jit_value *dest ) ;
struct __anonstruct__RuneEntry_453100079 {
   __darwin_rune_t __min ;
   __darwin_rune_t __max ;
   __darwin_rune_t __map ;
   __uint32_t *__types ;
};
__inline extern int iscntrl(int _c ) ;
static void associate_register_alias(struct jit_reg_allocator *al , jit_op *op , int i ) ;
typedef unsigned char __darwin_uuid_t[16];
extern size_t strcspn(char const   *__s , char const   *__charset ) ;
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
struct sigevent {
   int sigev_notify ;
   int sigev_signo ;
   union sigval sigev_value ;
   void (*sigev_notify_function)(union sigval  ) ;
   pthread_attr_t *sigev_notify_attributes ;
};
struct __darwin_x86_exception_state64 {
   __uint16_t __trapno ;
   __uint16_t __cpu ;
   __uint32_t __err ;
   __uint64_t __faultvaddr ;
};
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_unlock(pthread_mutex_t * ) ;
static void emit_rsb_op(struct jit *jit , struct jit_op *op , int imm ) ;
typedef union __anonunion___mbstate_t_250061491 __mbstate_t;
static jit_tree *delete_min(jit_tree *h ) ;
extern void *reallocf(void *__ptr , size_t __size )  __attribute__((__alloc_size__(2))) ;
void jit_collect_statistics(struct jit *jit ) ;
__inline extern int isalpha(int _c ) ;
extern int posix_openpt(int  ) ;
void megaInit(void) ;
static void emit_branch_overflow_op(struct jit *jit , struct jit_op *op , int alu_op ,
                                    int imm , int negation ) ;
typedef u_int64_t user_addr_t;
extern int optopt ;
extern int __attribute__((__availability__(ios,introduced=5.0), __availability__(macos,introduced=10.7)))  pthread_mutexattr_setpolicy_np(pthread_mutexattr_t * ,
                                                                                                                                          int  ) ;
extern char *strncpy(char *__dst , char const   *__src , size_t __n ) ;
typedef struct __anonstruct_div_t_773697287 div_t;
void jit_trace_op(struct jit *jit , jit_op *op , int verbosity ) ;
extern int execvP(char const   *__file , char const   *__searchpath , char * const  *__argv )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
enum __anonenum_X86_ALU_Opcode_144447433 {
    X86_ADD = 0,
    X86_OR = 1,
    X86_ADC = 2,
    X86_SBB = 3,
    X86_AND = 4,
    X86_SUB = 5,
    X86_XOR = 6,
    X86_CMP = 7,
    X86_NALU = 8
} ;
extern int profil(char * , size_t  , unsigned long  , unsigned int  ) ;
static void jit_tree_walk(jit_tree *h , void (*func)(jit_tree_key key , jit_tree_value value ,
                                                     void *thunk ) , void *thunk ) ;
extern int ( /* format attribute */  printf)(char const   * __restrict    , ...) ;
extern char const   *fmtcheck(char const   * , char const   * ) ;
static int check_data_alignment(jit_op *op , char *msg_buf ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_wrlock(pthread_rwlock_t * )  __asm__("_pthread_rwlock_wrlock")  ;
static void cleanup(struct jit *jit ) ;
static int valid_fsize(int size ) ;
__inline static jit_tree *move_red_right(jit_tree *h ) ;
extern int daylight ;
extern long lrand48(void)  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
extern void *setmode(char const   * )  __asm__("_setmode")  ;
static void sse_alu_pd_reg_safeimm(struct jit *jit , jit_op *op , int op_id , int reg ,
                                   double *imm ) ;
extern int setgid(gid_t  ) ;
extern int chroot(char const   * ) ;
typedef struct jit_rmap jit_rmap;
static void rmap_unassoc(jit_rmap *rmap , jit_value reg ) ;
typedef int32_t int_least32_t;
typedef uint64_t uint_fast64_t;
extern FILE *__stderrp ;
typedef struct jit_prepared_args jit_prepared_args;
extern int __attribute__((__availability__(ios,introduced=8.0), __availability__(macos,introduced=10.10)))  pthread_set_qos_class_self_np(qos_class_t __qos_class ,
                                                                                                                                          int __relative_priority ) ;
static jit_rmap *rmap_clone(jit_rmap *rmap ) ;
extern pid_t wait(int * )  __asm__("_wait")  ;
extern void sranddev(void) ;
extern void __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  pthread_yield_np(void) ;
typedef double jit_float;
extern char *initstate(unsigned int  , char * , size_t  ) ;
extern uint32_t arc4random(void) ;
extern int radixsort(unsigned char const   **__base , int __nel , unsigned char const   *__table ,
                     unsigned int __endbyte ) ;
extern int getattrlist(char const   * , void * , void * , size_t  , unsigned int  )  __asm__("_getattrlist")  ;
extern pid_t wait3(int * , int  , struct rusage * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlockattr_destroy(pthread_rwlockattr_t * ) ;
extern size_t strspn(char const   *__s , char const   *__charset ) ;
typedef unsigned char u_int8_t;
typedef unsigned short u_short;
__inline static jit_tree *fixup(jit_tree *h ) ;
__inline extern void ( __attribute__((__always_inline__)) __darwin_fd_clr)(int _fd ,
                                                                           struct fd_set * const  _p ) ;
static void jit_dump_ops_general(struct jit *jit , jit_tree *labels , int verbosity ) ;
typedef int64_t quad_t;
extern int getpriority(int  , id_t  ) ;
extern int strtofflags(char ** , unsigned long * , unsigned long * ) ;
static int force_assoc(jit_op *op , struct jit_reg_allocator *al ) ;
typedef __darwin_wchar_t wchar_t;
extern int renamex_np(char const   * , char const   * , unsigned int  )  __attribute__((__availability__(watchos,introduced=3.0),
__availability__(tvos,introduced=10.0), __availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12))) ;
extern int cgetclose(void) ;
__inline static void funcall_prepare(struct jit *jit , jit_op *op , int count ) ;
void DUMP_short(int block , struct jit *jit , struct jit_op *begin_ , struct jit_op *end_ ) ;
typedef __darwin_off_t off_t;
extern off_t ftello(FILE *__stream ) ;
__inline static jit_tree *jit_tree_clone(jit_tree *root ) ;
typedef unsigned short ushort;
extern int setpgid(pid_t  , pid_t  ) ;
extern int pipe(int * ) ;
struct __sbuf {
   unsigned char *_base ;
   int _size ;
};
struct __sFILE {
   unsigned char *_p ;
   int _r ;
   int _w ;
   short _flags ;
   short _file ;
   struct __sbuf _bf ;
   int _lbfsize ;
   void *_cookie ;
   int (* _Nullable  _close)(void * ) ;
   int (* _Nullable  _read)(void * , char * , int  ) ;
   fpos_t (* _Nullable  _seek)(void * , fpos_t  , int  ) ;
   int (* _Nullable  _write)(void * , char const   * , int  ) ;
   struct __sbuf _ub ;
   struct __sFILEX *_extra ;
   int _ur ;
   unsigned char _ubuf[3] ;
   unsigned char _nbuf[1] ;
   struct __sbuf _lb ;
   int _blksize ;
   fpos_t _offset ;
};
extern int atoi(char const   * ) ;
extern int ( /* format attribute */  fscanf)(FILE * __restrict   , char const   * __restrict   
                                             , ...) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_getprotocol(pthread_mutexattr_t const   * __restrict   ,
                                                                                                                                         int * __restrict   ) ;
extern int execl(char const   *__path , char const   *__arg0  , ...)  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
static int is_transfer_op(jit_op *op ) ;
static int is_spilled(jit_value arg_id , jit_op *prepare_op , int *reg ) ;
struct sigstack {
   char *ss_sp ;
   int ss_onstack ;
};
typedef int __darwin_wint_t;
typedef __darwin_wint_t wint_t;
extern int execle(char const   *__path , char const   *__arg0  , ...)  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
__inline static jit_hw_reg *rmap_is_associated_aux(jit_tree *n , int reg_id , int fp ,
                                                   jit_value *virt_reg ) ;
extern void lcong48(unsigned short * ) ;
extern int munlock(void const   * , size_t  ) ;
unsigned long _1_entropy  =    1205847982700084983UL;
struct timespec {
   __darwin_time_t tv_sec ;
   long tv_nsec ;
};
int _global_argc  =    0;
extern int acct(char const   * ) ;
enum jit_amd64_fp_regs {
    AMD64_XMM0 = 0,
    AMD64_XMM1 = 1,
    AMD64_XMM2 = 2,
    AMD64_XMM3 = 3,
    AMD64_XMM4 = 4,
    AMD64_XMM5 = 5,
    AMD64_XMM6 = 6,
    AMD64_XMM7 = 7,
    AMD64_XMM8 = 8,
    AMD64_XMM9 = 9,
    AMD64_XMM10 = 10,
    AMD64_XMM11 = 11,
    AMD64_XMM12 = 12,
    AMD64_XMM13 = 13,
    AMD64_XMM14 = 14,
    AMD64_XMM15 = 15,
    AMD64_XMM_NREG = 16
} ;
static int jit_tree_subset(jit_tree *root , jit_tree *n ) ;
extern int mkstemp(char * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_condattr_init(pthread_condattr_t * ) ;
union __anonunion_x86_imm_buf_549773081 {
   int val ;
   unsigned char b[4] ;
};
struct __darwin_x86_thread_state64 {
   __uint64_t __rax ;
   __uint64_t __rbx ;
   __uint64_t __rcx ;
   __uint64_t __rdx ;
   __uint64_t __rdi ;
   __uint64_t __rsi ;
   __uint64_t __rbp ;
   __uint64_t __rsp ;
   __uint64_t __r8 ;
   __uint64_t __r9 ;
   __uint64_t __r10 ;
   __uint64_t __r11 ;
   __uint64_t __r12 ;
   __uint64_t __r13 ;
   __uint64_t __r14 ;
   __uint64_t __r15 ;
   __uint64_t __rip ;
   __uint64_t __rflags ;
   __uint64_t __cs ;
   __uint64_t __fs ;
   __uint64_t __gs ;
};
struct __darwin_mcontext_avx64 {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_state64 __ss ;
   struct __darwin_x86_avx_state64 __fs ;
};
extern long a64l(char const   * ) ;
static int check_missing_patches(jit_op *op , char *msg_buf ) ;
static void emit_div_op(struct jit *jit , struct jit_op *op , int imm , int sign ,
                        int modulo ) ;
typedef enum jit_x86_fp_regs X86_XMM_Reg_No;
static void ob_pad(struct output_buf *ob , int size ) ;
extern int cgetnum(char * , char const   * , long * ) ;
static void print_rmap_callback(jit_tree_key key , jit_tree_value value , void *disasm ) ;
typedef signed char int8_t;
typedef int8_t int_fast8_t;
struct __darwin_pthread_handler_rec {
   void (*__routine)(void * ) ;
   void *__arg ;
   struct __darwin_pthread_handler_rec *__next ;
};
__inline static void print_addr(struct jit_disasm *disasm , struct output_buf *buf ,
                                jit_tree *labels , jit_op *op , int arg_pos ) ;
extern int mincore(void const   * , size_t  , char * ) ;
typedef unsigned short uint16_t;
typedef uint16_t uint_fast16_t;
extern int sched_yield(void) ;
extern int setenv(char const   *__name , char const   *__value , int __overwrite )  __asm__("_setenv")  ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_condattr_destroy(pthread_condattr_t * ) ;
void DUMP_byte(int block , struct jit *jit , struct jit_op *begin_ , struct jit_op *end_ ) ;
extern void setprogname(char const   * ) ;
struct jit *jit_init(void) ;
int jit_regs_active_count(jit_op *op ) ;
static void emit_mul_op(struct jit *jit , struct jit_op *op , int imm , int sign ,
                        int high_bytes ) ;
extern int ( /* format attribute */  sscanf)(char const   * __restrict   , char const   * __restrict   
                                             , ...) ;
void jit_patch_local_addrs(struct jit *jit ) ;
enum __anonenum_X86_Prefix_200431650 {
    X86_LOCK_PREFIX = 240,
    X86_REPNZ_PREFIX = 242,
    X86_REPZ_PREFIX = 243,
    X86_REP_PREFIX = 243,
    X86_CS_PREFIX = 46,
    X86_SS_PREFIX = 54,
    X86_DS_PREFIX = 62,
    X86_ES_PREFIX = 38,
    X86_FS_PREFIX = 100,
    X86_GS_PREFIX = 101,
    X86_UNLIKELY_PREFIX = 46,
    X86_LIKELY_PREFIX = 62,
    X86_OPERAND_PREFIX = 102,
    X86_ADDRESS_PREFIX = 103
} ;
extern int fpurge(FILE * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_unlock(pthread_rwlock_t * )  __asm__("_pthread_rwlock_unlock")  ;
extern char *strcasestr(char const   *__big , char const   *__little ) ;
extern int getchar(void) ;
__inline static jit_tree *move_red_left(jit_tree *h ) ;
extern int isatty(int  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_setprotocol(pthread_mutexattr_t * ,
                                                                                                                                         int  ) ;
extern int __swbuf(int  , FILE * ) ;
extern long atol(char const   * ) ;
static void emit_branch_mask_op(struct jit *jit , struct jit_op *op , int cond , int imm ) ;
static int jit_imm_overflow(struct jit *jit , jit_op *op , long value ) ;
extern size_t strlcpy(char *__dst , char const   *__source , size_t __size ) ;
extern int mkstemps(char * , int  ) ;
static void emit_msg_op(struct jit *jit , jit_op *op ) ;
extern pthread_t __attribute__((__nullable__, __availability__(macos,introduced=10.5),
__availability__(ios,introduced=2.0)))  pthread_from_mach_thread_np(mach_port_t  ) ;
extern int fseeko(FILE *__stream , off_t __offset , int __whence ) ;
extern int ftruncate(int  , off_t  ) ;
extern char *strcat(char *__s1 , char const   *__s2 ) ;
extern int setattrlist(char const   * , void * , void * , size_t  , unsigned int  )  __asm__("_setattrlist")  ;
__inline static int jit_set_get(jit_set *s , int value ) ;
extern void setusershell(void) ;
static void assign_regs_for_args(struct jit_reg_allocator *al , jit_op *op ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_main_np(void) ;
extern int optind ;
extern size_t strlcat(char *__dst , char const   *__source , size_t __size ) ;
extern int strncmp(char const   *__s1 , char const   *__s2 , size_t __n ) ;
extern int shm_open(char const   * , int   , ...) ;
extern void sync(void) ;
extern char *ecvt(double  , int  , int * __restrict   , int * __restrict   ) ;
extern void *( __attribute__((__warn_unused_result__)) realloc)(void *ptr , size_t size )  __attribute__((__alloc_size__(2))) ;
static jit_op *get_related_op(jit_op *op , int result_reg ) ;
__inline static void jit_prepare_arguments(struct jit *jit ) ;
extern int opterr ;
__inline static jit_value jit_proc_value(void (*f)(void) ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setguardsize(pthread_attr_t * ,
                                                                                                                                     size_t  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_setconcurrency(int  ) ;
extern void endusershell(void) ;
void jit_trace_callback(struct jit *jit , jit_op *op , int verbosity , int trace ) ;
static void associate_register(struct jit_reg_allocator *al , jit_op *op , int i ) ;
struct __anonstruct_w_S_422959016 {
   unsigned int w_Stopval : 8 ;
   unsigned int w_Stopsig : 8 ;
   unsigned int w_Filler : 16 ;
};
struct __darwin_x86_float_state64 {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   struct __darwin_xmm_reg __fpu_xmm8 ;
   struct __darwin_xmm_reg __fpu_xmm9 ;
   struct __darwin_xmm_reg __fpu_xmm10 ;
   struct __darwin_xmm_reg __fpu_xmm11 ;
   struct __darwin_xmm_reg __fpu_xmm12 ;
   struct __darwin_xmm_reg __fpu_xmm13 ;
   struct __darwin_xmm_reg __fpu_xmm14 ;
   struct __darwin_xmm_reg __fpu_xmm15 ;
   char __fpu_rsrv4[96] ;
   int __fpu_reserved1 ;
};
__inline static jit_tree_key node_min(jit_tree *x ) ;
unsigned long _1_alwaysZero  =    0;
static jit_op *print_combined_op(FILE *f , struct jit *jit , struct jit_op *op , jit_tree *labels ) ;
extern ssize_t pread(int __fd , void *__buf , size_t __nbyte , off_t __offset )  __asm__("_pread")  ;
union __anonunion_location_1021650749 {
   int reg ;
   int stack_pos ;
};
static jit_hw_reg *rmap_get(jit_rmap *rmap , jit_value reg ) ;
typedef struct __darwin_ucontext ucontext_t;
extern int futimes(int  , struct timeval  const  * ) ;
extern char const   *getprogname(void) ;
extern char *tzname[] ;
extern int execvp(char const   *__file , char * const  *__argv )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
__inline extern int islower(int _c ) ;
static void assign_regs(struct jit *jit , struct jit_op *op ) ;
struct rusage_info_v0 {
   uint8_t ri_uuid[16] ;
   uint64_t ri_user_time ;
   uint64_t ri_system_time ;
   uint64_t ri_pkg_idle_wkups ;
   uint64_t ri_interrupt_wkups ;
   uint64_t ri_pageins ;
   uint64_t ri_wired_size ;
   uint64_t ri_resident_size ;
   uint64_t ri_phys_footprint ;
   uint64_t ri_proc_start_abstime ;
   uint64_t ri_proc_exit_abstime ;
};
static jit_tree *node_insert(jit_tree *h , jit_tree_key key , jit_tree_value value ,
                             int *found ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getguardsize(pthread_attr_t const   * __restrict   ,
                                                                                                                                     size_t * __restrict   ) ;
struct proc_rlimit_control_wakeupmon {
   uint32_t wm_flags ;
   int32_t wm_rate ;
};
extern int atexit(void (* _Nonnull  )(void) ) ;
typedef u_int64_t u_quad_t;
extern int __attribute__((__availability__(watchos,introduced=6.0), __availability__(tvos,introduced=13.0),
__availability__(ios,introduced=13.0), __availability__(macosx,introduced=10.15)))  timespec_get(struct timespec *ts ,
                                                                                                 int base ) ;
extern int strncasecmp(char const   * , char const   * , size_t  ) ;
static int emit_push_callee_saved_regs(struct jit *jit , jit_op *op ) ;
static int join_muli_addi(jit_op *op , jit_op *nextop ) ;
struct __darwin_sigaltstack {
   void *ss_sp ;
   __darwin_size_t ss_size ;
   int ss_flags ;
};
struct __darwin_ucontext {
   int uc_onstack ;
   __darwin_sigset_t uc_sigmask ;
   struct __darwin_sigaltstack uc_stack ;
   struct __darwin_ucontext *uc_link ;
   __darwin_size_t uc_mcsize ;
   struct __darwin_mcontext64 *uc_mcontext ;
};
extern int __attribute__((__deprecated__))  iruserok(unsigned long  , int  , char const   * ,
                                                     char const   * ) ;
extern int ttyname_r(int  , char * , size_t  )  __asm__("_ttyname_r")  ;
__inline static void emit_set_fparg(struct jit *jit , struct jit_out_arg *arg ) ;
extern int setwgroups_np(int  , unsigned char * const   ) ;
__inline static void jit_flw_analysis(struct jit *jit ) ;
struct _2_init_tigress_1_opaque_NodeStruct *_2_init_tigress_1_opaque_list_1  =    (struct _2_init_tigress_1_opaque_NodeStruct *)0;
extern size_t strnlen(char const   *__s1 , size_t __n )  __attribute__((__availability__(macosx,introduced=10.7))) ;
struct __darwin_x86_debug_state32 {
   unsigned int __dr0 ;
   unsigned int __dr1 ;
   unsigned int __dr2 ;
   unsigned int __dr3 ;
   unsigned int __dr4 ;
   unsigned int __dr5 ;
   unsigned int __dr6 ;
   unsigned int __dr7 ;
};
typedef int32_t swblk_t;
extern int bcmp(void const   * , void const   * , size_t  ) ;
typedef unsigned int u_int32_t;
extern FILE *fopen(char const   * __restrict  __filename , char const   * __restrict  __mode )  __asm__("_fopen")  ;
static void emit_sse_fstx_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                             jit_value a3 ) ;
extern int truncate(char const   * , off_t  ) ;
extern int setsgroups_np(int  , unsigned char * const   ) ;
static int check_op_without_effect(jit_op *op , char *msg_buf ) ;
extern char *mkdtemp(char * ) ;
extern int mknod(char const   * , mode_t  , dev_t  ) ;
extern long timezone  __asm__("_timezone")  ;
extern int mlock(void const   * , size_t  ) ;
static void emit_trace_op(struct jit *jit , jit_op *op ) ;
struct rusage_info_v4 {
   uint8_t ri_uuid[16] ;
   uint64_t ri_user_time ;
   uint64_t ri_system_time ;
   uint64_t ri_pkg_idle_wkups ;
   uint64_t ri_interrupt_wkups ;
   uint64_t ri_pageins ;
   uint64_t ri_wired_size ;
   uint64_t ri_resident_size ;
   uint64_t ri_phys_footprint ;
   uint64_t ri_proc_start_abstime ;
   uint64_t ri_proc_exit_abstime ;
   uint64_t ri_child_user_time ;
   uint64_t ri_child_system_time ;
   uint64_t ri_child_pkg_idle_wkups ;
   uint64_t ri_child_interrupt_wkups ;
   uint64_t ri_child_pageins ;
   uint64_t ri_child_elapsed_abstime ;
   uint64_t ri_diskio_bytesread ;
   uint64_t ri_diskio_byteswritten ;
   uint64_t ri_cpu_time_qos_default ;
   uint64_t ri_cpu_time_qos_maintenance ;
   uint64_t ri_cpu_time_qos_background ;
   uint64_t ri_cpu_time_qos_utility ;
   uint64_t ri_cpu_time_qos_legacy ;
   uint64_t ri_cpu_time_qos_user_initiated ;
   uint64_t ri_cpu_time_qos_user_interactive ;
   uint64_t ri_billed_system_time ;
   uint64_t ri_serviced_system_time ;
   uint64_t ri_logical_writes ;
   uint64_t ri_lifetime_max_phys_footprint ;
   uint64_t ri_instructions ;
   uint64_t ri_cycles ;
   uint64_t ri_billed_energy ;
   uint64_t ri_serviced_energy ;
   uint64_t ri_interval_max_phys_footprint ;
   uint64_t ri_runnable_time ;
};
__inline static void jit_op_delete(jit_op *op ) ;
extern int fseek(FILE * , long  , int  ) ;
static void emit_get_arg_from_stack(struct jit *jit , int type , int size , int dreg ,
                                    int stack_reg , int stack_pos ) ;
extern double atof(char const   * ) ;
void print_full_op_name(struct output_buf *linebuf , jit_op *op ) ;
extern pid_t setsid(void) ;
extern int mergesort(void *__base , size_t __nel , size_t __width , int (* _Nonnull  __compar)(void const   * ,
                                                                                               void const   * ) ) ;
extern struct tm *gmtime(time_t const   * ) ;
void _cipher$_xtea_decipherBlock(unsigned int num_rounds , unsigned int *v , unsigned int *key ) ;
static void emit_sse_sub_op(struct jit *jit , jit_op *op , long a1 , long a2 , long a3 ) ;
typedef enum __anonenum_X86_CC_467256102 X86_CC;
extern char *strptime(char const   * __restrict   , char const   * __restrict   ,
                      struct tm * __restrict   )  __asm__("_strptime")  ;
extern mode_t getmode(void const   * , mode_t  ) ;
__inline extern int isalnum(int _c ) ;
extern int getchar_unlocked(void) ;
extern int setlinebuf(FILE * ) ;
typedef int64_t int_fast64_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_settype(pthread_mutexattr_t * ,
                                                                                                                                     int  ) ;
extern char *mkdtempat_np(int dfd , char *path )  __attribute__((__availability__(watchos,introduced=4.0),
__availability__(tvos,introduced=11.0), __availability__(ios,introduced=11.0), __availability__(macosx,introduced=10.13))) ;
extern int ( /* format attribute */  vasprintf)(char ** __restrict   , char const   * __restrict   ,
                                                va_list  ) ;
typedef struct __darwin_sigaltstack stack_t;
union __sigaction_u {
   void (*__sa_handler)(int  ) ;
   void (*__sa_sigaction)(int  , struct __siginfo * , void * ) ;
};
extern int __attribute__((__availability__(ios,introduced=8.0), __availability__(macos,introduced=10.10)))  pthread_override_qos_class_end_np(pthread_override_t __override ) ;
extern int getc(FILE * ) ;
extern time_t timegm(struct tm * const   ) ;
char *jit_get_op_name(struct jit_op *op ) ;
typedef unsigned long jit_unsigned_value;
extern FILE *fdopen(int  , char const   * )  __asm__("_fdopen")  ;
static void emit_sse_fst_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) ;
struct sigaction {
   union __sigaction_u __sigaction_u ;
   sigset_t sa_mask ;
   int sa_flags ;
};
extern int ungetc(int  , FILE * ) ;
extern off_t lseek(int  , off_t  , int  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_init(pthread_attr_t * ) ;
extern char *strcpy(char *__dst , char const   *__src ) ;
struct __darwin_opmask_reg {
   char __opmask_reg[8] ;
};
extern long fpathconf(int  , int  ) ;
static void emit_fretval_op(struct jit *jit , jit_op *op ) ;
struct itimerval {
   struct timeval it_interval ;
   struct timeval it_value ;
};
static void print_regs(jit_tree_key reg , jit_tree_value v , void *thunk ) ;
typedef uint16_t uint_least16_t;
extern uid_t getuid(void) ;
static int force_spill(jit_op *op ) ;
extern int __snprintf_chk(char * __restrict   , size_t  , int  , size_t  , char const   * __restrict   
                          , ...) ;
enum jit_inp_type {
    JIT_SIGNED_NUM = 0,
    JIT_UNSIGNED_NUM = 1,
    JIT_FLOAT_NUM = 2,
    JIT_PTR = 3
} ;
extern int fsync(int  )  __asm__("_fsync")  ;
static int is_cond_branch_op(jit_op *op ) ;
extern int __attribute__((__availability__(ios,introduced=3.2), __availability__(macos,introduced=10.6)))  pthread_threadid_np(pthread_t __attribute__((__nullable__))   ,
                                                                                                                               __uint64_t * _Nullable   ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_create_suspended_np(pthread_t __attribute__((__nullable__))  * _Nonnull   ,
                                                                                                                                       pthread_attr_t const   * _Nullable   ,
                                                                                                                                       void * _Nullable  (* _Nonnull  )(void * _Nullable   ) ,
                                                                                                                                       void * _Nullable   ) ;
enum __anonenum_X86_CC_467256102 {
    X86_CC_EQ = 0,
    X86_CC_E = 0,
    X86_CC_Z = 0,
    X86_CC_NE = 1,
    X86_CC_NZ = 1,
    X86_CC_LT = 2,
    X86_CC_B = 2,
    X86_CC_C = 2,
    X86_CC_NAE = 2,
    X86_CC_LE = 3,
    X86_CC_BE = 3,
    X86_CC_NA = 3,
    X86_CC_GT = 4,
    X86_CC_A = 4,
    X86_CC_NBE = 4,
    X86_CC_GE = 5,
    X86_CC_AE = 5,
    X86_CC_NB = 5,
    X86_CC_NC = 5,
    X86_CC_LZ = 6,
    X86_CC_S = 6,
    X86_CC_GEZ = 7,
    X86_CC_NS = 7,
    X86_CC_P = 8,
    X86_CC_PE = 8,
    X86_CC_NP = 9,
    X86_CC_PO = 9,
    X86_CC_O = 10,
    X86_CC_NO = 11,
    X86_NCC = 12
} ;
typedef enum jit_x86_gp_regs X86_Reg_No;
extern struct tm *gmtime_r(time_t const   * __restrict   , struct tm * __restrict   ) ;
extern char *strtok(char *__str , char const   *__sep ) ;
__inline static int jit_set_size(jit_set *s ) ;
typedef int64_t user_ssize_t;
extern int getc_unlocked(FILE * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_wait(pthread_cond_t * __restrict   ,
                                                                                                                             pthread_mutex_t * __restrict   )  __asm__("_pthread_cond_wait")  ;
static void append_msg(char *buf , char *format  , ...) ;
__inline static int GET_REG_POS(struct jit *jit , int r ) ;
typedef enum __anonenum_X86_ALU_Opcode_144447433 X86_ALU_Opcode;
extern int fls(int  )  __attribute__((__availability__(macosx,introduced=10.5))) ;
static int join_2ops(jit_op *op , int opcode1 , int opcode2 , int (*joinfn)(jit_op * ,
                                                                            jit_op * ) ) ;
void jit_init_arg_params(struct jit *jit , struct jit_func_info *info , int p , int *phys_reg ) ;
extern int remove(char const   * ) ;
extern char *gcvt(double  , int  , char * ) ;
typedef unsigned long __darwin_clock_t;
typedef __darwin_clock_t clock_t;
extern clock_t clock(void)  __asm__("_clock")  ;
typedef jit_value jit_reg;
extern int sradixsort(unsigned char const   **__base , int __nel , unsigned char const   *__table ,
                      unsigned int __endbyte ) ;
static void emit_get_arg(struct jit *jit , jit_op *op ) ;
static void emit_lreg(struct jit *jit , int hreg_id , jit_value vreg ) ;
__inline extern int isxdigit(int _c ) ;
extern int munlockall(void) ;
typedef int errno_t;
extern void tzsetwall(void) ;
extern int mblen(char const   *__s , size_t __n ) ;
struct jit_inp_arg {
   enum jit_inp_type type ;
   int size ;
   char passed_by_reg ;
   union __anonunion_location_1021650749 location ;
   int spill_pos ;
   int gp_pos ;
   int fp_pos ;
   int overflow ;
   int phys_reg ;
};
extern int setvbuf(FILE * __restrict   , char * __restrict   , int  , size_t  ) ;
extern char *jit_reg_allocator_get_hwreg_name(struct jit_reg_allocator *al , int reg ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_getschedparam(pthread_t  ,
                                                                                                                                 int * _Nullable __restrict   ,
                                                                                                                                 struct sched_param * _Nullable __restrict   ) ;
static void jit_dump_ops_combined(struct jit *jit , jit_tree *labels ) ;
struct __x86_pagein_state {
   int __pagein_error ;
};
typedef __darwin_blkcnt_t blkcnt_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setschedpolicy(pthread_attr_t * ,
                                                                                                                                       int  ) ;
extern unsigned int sleep(unsigned int  )  __asm__("_sleep")  ;
static void emit_sse_neg_op(struct jit *jit , jit_op *op , long a1 , long a2 ) ;
struct __darwin_x86_thread_full_state64 {
   struct __darwin_x86_thread_state64 __ss64 ;
   __uint64_t __ds ;
   __uint64_t __es ;
   __uint64_t __ss ;
   __uint64_t __gsbase ;
};
struct __darwin_mcontext_avx64_full {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_full_state64 __ss ;
   struct __darwin_x86_avx_state64 __fs ;
};
static int assign_jmp(jit_op *op , struct jit_reg_allocator *al ) ;
__inline static void emit_set_arg(struct jit *jit , struct jit_out_arg *arg ) ;
typedef void (*sig_t)(int  );
extern int rpmatch(char const   * )  __attribute__((__availability__(watchos,introduced=6.0),
__availability__(tvos,introduced=13.0), __availability__(ios,introduced=13.0), __availability__(macos,introduced=10.15))) ;
extern int issetugid(void) ;
__inline static int jit_set_equal(jit_set *s1 , jit_set *s2 ) ;
extern long sysconf(int  ) ;
extern int exchangedata(char const   * , char const   * , unsigned int  )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
__inline static void jit_correct_float_imms(struct jit *jit ) ;
__inline static jit_tree *rotate_left(jit_tree *h ) ;
extern int setdomainname(char const   * , int  ) ;
extern void *( __attribute__((__warn_unused_result__)) calloc)(size_t __count , size_t __size )  __attribute__((__alloc_size__(1,2))) ;
__inline static void jit_flw_initialize(struct jit *jit ) ;
__inline extern int isupper(int _c ) ;
char **_global_envp  =    (char **)0;
struct jit_reg_allocator *jit_reg_allocator_create(void) ;
static void sse_alu_sd_reg_safeimm(struct jit *jit , jit_op *op , int op_id , int reg ,
                                   double *imm ) ;
extern void arc4random_stir(void) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_init(pthread_mutexattr_t * ) ;
extern int unlink(char const   * ) ;
extern int ( /* format attribute */  vfprintf)(FILE * __restrict   , char const   * __restrict   ,
                                               va_list  ) ;
extern int setpriority(int  , id_t  , int  ) ;
extern void *valloc(size_t  )  __attribute__((__alloc_size__(1))) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getinheritsched(pthread_attr_t const   * __restrict   ,
                                                                                                                                        int * __restrict   ) ;
enum __anonenum_X86_SSE_CmpCode_848838535 {
    X86_SSE_CMP_EQ = 0,
    X86_SSE_CMP_LT = 1,
    X86_SSE_CMP_LE = 2,
    X86_SSE_CMP_UNORD = 3,
    X86_SSE_CMP_NEQ = 4,
    X86_SSE_CMP_NLT = 5,
    X86_SSE_CMP_NLE = 6,
    X86_SSE_CMP_ORD = 7
} ;
static void unload_reg(jit_op *op , jit_hw_reg *hreg , long virt_reg ) ;
jit_label *jit_get_label(struct jit *jit ) ;
extern int sched_get_priority_min(int  ) ;
struct __darwin_x86_cpmu_state64 {
   __uint64_t __ctrs[16] ;
};
extern void *alloca(size_t  ) ;
extern void free(void *ptr ) ;
extern void bcopy(void const   * , void * , size_t  ) ;
extern int rmdir(char const   * ) ;
extern int fgetattrlist(int  , void * , void * , size_t  , unsigned int  )  __attribute__((__availability__(macosx,introduced=10.6))) ;
void jit_optimize_frame_ptr(struct jit *jit ) ;
int main(int argc , char **argv , char **_formal_envp ) ;
extern void setbuf(FILE * __restrict   , char * __restrict   ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_destroy(pthread_mutexattr_t * )  __asm__("_pthread_mutexattr_destroy")  ;
extern int wctomb(char * , wchar_t  ) ;
extern int undelete(char const   * ) ;
__inline extern int toascii(int _c ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getstack(pthread_attr_t const   * __restrict   ,
                                                                                                                                 void * _Nullable  * _Nonnull __restrict   ,
                                                                                                                                 size_t * __restrict   ) ;
extern int __attribute__((__deprecated__))  rresvport_af(int * , int  ) ;
extern int unlockpt(int  ) ;
__inline static void jit_op_prepend(jit_op *op , jit_op *prepended ) ;
static void load_reg(struct jit_op *op , jit_hw_reg *hreg , long reg ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_kill(pthread_t  ,
                                                                                                                        int  ) ;
extern int ( /* format attribute */  vsscanf)(char const   * __restrict  __str , char const   * __restrict  __format ,
                                              va_list  ) ;
extern int strerror_r(int __errnum , char *__strerrbuf , size_t __buflen ) ;
void jit_optimize_unused_assignments(struct jit *jit ) ;
typedef quad_t *qaddr_t;
extern char *getlogin(void) ;
void dummy_opcode_i$nit(void) ;
static void ob_append(struct output_buf *ob , char *str ) ;
extern void srandom(unsigned int  ) ;
void print_comment(struct output_buf *linebuf , jit_op *op ) ;
static unsigned char x86_cc_signed_map[12] ;
enum __anonenum_clockid_t_447627989 {
    _CLOCK_REALTIME = 0,
    _CLOCK_MONOTONIC = 6,
    _CLOCK_MONOTONIC_RAW = 4,
    _CLOCK_MONOTONIC_RAW_APPROX = 5,
    _CLOCK_UPTIME_RAW = 8,
    _CLOCK_UPTIME_RAW_APPROX = 9,
    _CLOCK_PROCESS_CPUTIME_ID = 12,
    _CLOCK_THREAD_CPUTIME_ID = 16
} ;
typedef enum __anonenum_clockid_t_447627989 clockid_t;
extern __uint64_t __attribute__((__availability__(macosx,introduced=10.12), __availability__(ios,introduced=10.0),
__availability__(tvos,introduced=10.0), __availability__(watchos,introduced=3.0)))  clock_gettime_nsec_np(clockid_t __clock_id ) ;
extern ssize_t read(int  , void * , size_t  )  __asm__("_read")  ;
static void emit_cond_op(struct jit *jit , struct jit_op *op , int amd64_cond , int imm ,
                         int sign ) ;
extern double drand48(void) ;
extern int lockf(int  , int  , off_t  )  __asm__("_lockf")  ;
extern unsigned long long strtouq(char const   *__str , char **__endptr , int __base ) ;
extern ssize_t pwrite(int __fd , void const   *__buf , size_t __nbyte , off_t __offset )  __asm__("_pwrite")  ;
static void compiler_based_debugger(struct jit *jit ) ;
extern void *memset(void *__b , int __c , size_t __len ) ;
extern int ferror(FILE * ) ;
__inline static void jit_set_to_array(jit_set *s , jit_value *dest ) ;
static void copy_reg_to_array(jit_tree_key key , jit_tree_value value , void *target ) ;
struct rusage_info_v3 {
   uint8_t ri_uuid[16] ;
   uint64_t ri_user_time ;
   uint64_t ri_system_time ;
   uint64_t ri_pkg_idle_wkups ;
   uint64_t ri_interrupt_wkups ;
   uint64_t ri_pageins ;
   uint64_t ri_wired_size ;
   uint64_t ri_resident_size ;
   uint64_t ri_phys_footprint ;
   uint64_t ri_proc_start_abstime ;
   uint64_t ri_proc_exit_abstime ;
   uint64_t ri_child_user_time ;
   uint64_t ri_child_system_time ;
   uint64_t ri_child_pkg_idle_wkups ;
   uint64_t ri_child_interrupt_wkups ;
   uint64_t ri_child_pageins ;
   uint64_t ri_child_elapsed_abstime ;
   uint64_t ri_diskio_bytesread ;
   uint64_t ri_diskio_byteswritten ;
   uint64_t ri_cpu_time_qos_default ;
   uint64_t ri_cpu_time_qos_maintenance ;
   uint64_t ri_cpu_time_qos_background ;
   uint64_t ri_cpu_time_qos_utility ;
   uint64_t ri_cpu_time_qos_legacy ;
   uint64_t ri_cpu_time_qos_user_initiated ;
   uint64_t ri_cpu_time_qos_user_interactive ;
   uint64_t ri_billed_system_time ;
   uint64_t ri_serviced_system_time ;
};
extern void setbuffer(FILE * , char * , int  ) ;
extern int fsctl(char const   * , unsigned long  , void * , unsigned int  ) ;
extern char *strstr(char const   *__big , char const   *__little ) ;
extern int __attribute__((__deprecated__))  rcmd_af(char ** , int  , char const   * ,
                                                    char const   * , char const   * ,
                                                    int * , int  ) ;
extern int putchar_unlocked(int  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_broadcast(pthread_cond_t * ) ;
extern int execv(char const   *__path , char * const  *__argv )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
__inline static jit_op *jit_op_first(jit_op *op ) ;
typedef short int16_t;
typedef int16_t int_fast16_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_setprioceiling(pthread_mutexattr_t * ,
                                                                                                                                            int  ) ;
struct __darwin_ymm_reg {
   char __ymm_reg[32] ;
};
struct __darwin_i386_avx512_state {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   char __fpu_rsrv4[224] ;
   int __fpu_reserved1 ;
   char __avx_reserved1[64] ;
   struct __darwin_xmm_reg __fpu_ymmh0 ;
   struct __darwin_xmm_reg __fpu_ymmh1 ;
   struct __darwin_xmm_reg __fpu_ymmh2 ;
   struct __darwin_xmm_reg __fpu_ymmh3 ;
   struct __darwin_xmm_reg __fpu_ymmh4 ;
   struct __darwin_xmm_reg __fpu_ymmh5 ;
   struct __darwin_xmm_reg __fpu_ymmh6 ;
   struct __darwin_xmm_reg __fpu_ymmh7 ;
   struct __darwin_opmask_reg __fpu_k0 ;
   struct __darwin_opmask_reg __fpu_k1 ;
   struct __darwin_opmask_reg __fpu_k2 ;
   struct __darwin_opmask_reg __fpu_k3 ;
   struct __darwin_opmask_reg __fpu_k4 ;
   struct __darwin_opmask_reg __fpu_k5 ;
   struct __darwin_opmask_reg __fpu_k6 ;
   struct __darwin_opmask_reg __fpu_k7 ;
   struct __darwin_ymm_reg __fpu_zmmh0 ;
   struct __darwin_ymm_reg __fpu_zmmh1 ;
   struct __darwin_ymm_reg __fpu_zmmh2 ;
   struct __darwin_ymm_reg __fpu_zmmh3 ;
   struct __darwin_ymm_reg __fpu_zmmh4 ;
   struct __darwin_ymm_reg __fpu_zmmh5 ;
   struct __darwin_ymm_reg __fpu_zmmh6 ;
   struct __darwin_ymm_reg __fpu_zmmh7 ;
};
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_gettype(pthread_mutexattr_t const   * __restrict   ,
                                                                                                                                     int * __restrict   ) ;
extern int flsll(long long  )  __attribute__((__availability__(macosx,introduced=10.9))) ;
extern FILE *__stdinp ;
typedef unsigned int __darwin_fsfilcnt_t;
typedef __darwin_fsfilcnt_t fsfilcnt_t;
extern char *stpcpy(char *__dst , char const   *__src ) ;
struct copy_target {
   jit_value *target ;
   int index ;
};
__inline extern int isnumber(int _c ) ;
extern time_t mktime(struct tm * )  __asm__("_mktime")  ;
void rmap_free(jit_rmap *regmap ) ;
extern pid_t vfork(void)  __attribute__((__availability__(tvos,unavailable), __availability__(watchos,unavailable))) ;
extern void sethostid(long  ) ;
__inline static __uint16_t _OSSwapInt16(__uint16_t _data ) ;
extern int getlogin_r(char * , size_t  ) ;
static void free_ops(struct jit_op *op ) ;
typedef __uint16_t nlink_t;
void jit_debugging_disasm_i$nit(void) ;
struct __darwin_x86_debug_state64 {
   __uint64_t __dr0 ;
   __uint64_t __dr1 ;
   __uint64_t __dr2 ;
   __uint64_t __dr3 ;
   __uint64_t __dr4 ;
   __uint64_t __dr5 ;
   __uint64_t __dr6 ;
   __uint64_t __dr7 ;
};
struct __anonstruct__RuneCharClass_1021650748 {
   char __name[14] ;
   __uint32_t __mask ;
};
struct jit_op {
   unsigned short code ;
   unsigned char spec ;
   unsigned char arg_size ;
   unsigned char assigned ;
   unsigned char fp ;
   unsigned char in_use ;
   double flt_imm ;
   jit_value arg[3] ;
   jit_value r_arg[3] ;
   long patch_addr ;
   struct jit_op *jmp_addr ;
   struct jit_op *next ;
   struct jit_op *prev ;
   struct jit_set *live_in ;
   struct jit_set *live_out ;
   struct jit_rmap *regmap ;
   int normalized_pos ;
   struct jit_tree *allocator_hints ;
   struct jit_debug_info *debug_info ;
   unsigned long code_offset ;
   unsigned long code_length ;
   void *addendum ;
};
typedef int8_t int_least8_t;
extern int getwgroups_np(int * , unsigned char * ) ;
__inline static jit_tree *jit_tree_addall(jit_tree *target , jit_tree *n ) ;
extern size_t fread(void * __restrict  __ptr , size_t __size , size_t __nitems , FILE * __restrict  __stream ) ;
__inline static void jit_expand_patches_and_labels(struct jit *jit ) ;
static int emit_pop_reg(struct jit *jit , jit_hw_reg *r , int stack_offset ) ;
static void prepare_registers_for_call(struct jit_reg_allocator *al , jit_op *op ) ;
extern  __attribute__((__noreturn__)) void abort(void)  __attribute__((__cold__)) ;
__inline static jit_set *jit_set_new(void) ;
extern pid_t wait4(pid_t  , int * , int  , struct rusage * ) ;
extern int __attribute__((__deprecated__("Use of per-thread security contexts is error-prone and discouraged.")))  pthread_setugid_np(uid_t  ,
                                                                                                                                      gid_t  ) ;
static int required_stack_space_for_regs(struct jit *jit , jit_op *op ) ;
extern char __attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tempnam(3), it is highly recommended that you use mkstemp(3) instead."),
__availability__(swift,unavailable,message="Use mkstemp(3) instead.")))  *tempnam(char const   *__dir ,
                                                                                  char const   *__prefix )  __asm__("_tempnam")  ;
extern int mprotect(void * , size_t  , int  )  __asm__("_mprotect")  ;
__inline static void print_op_bytes(FILE *f , struct jit *jit , jit_op *op ) ;
__inline static void jit_set_addall(jit_set *target , jit_set *s ) ;
struct tm {
   int tm_sec ;
   int tm_min ;
   int tm_hour ;
   int tm_mday ;
   int tm_mon ;
   int tm_year ;
   int tm_wday ;
   int tm_yday ;
   int tm_isdst ;
   long tm_gmtoff ;
   char *tm_zone ;
};
struct sched_param {
   int sched_priority ;
   char __opaque[4] ;
};
extern ssize_t getline(char ** __restrict  __linep , size_t * __restrict  __linecapp ,
                       FILE * __restrict  __stream )  __attribute__((__availability__(macosx,introduced=10.7))) ;
extern int getsgroups_np(int * , unsigned char * ) ;
void jit_optimize_st_ops(struct jit *jit ) ;
typedef u_int64_t user_ulong_t;
static void emit_subx_op(struct jit *jit , struct jit_op *op , int x86_op , int imm ) ;
extern int getrusage(int  , struct rusage * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_sigmask(int  ,
                                                                                                                           sigset_t const   * _Nullable   ,
                                                                                                                           sigset_t * _Nullable   )  __asm__("_pthread_sigmask")  ;
struct jit_prepared_args {
   int count ;
   int ready ;
   int gp_args ;
   int fp_args ;
   int stack_size ;
   jit_op *op ;
   struct jit_out_arg *args ;
};
struct jit {
   unsigned char *buf ;
   unsigned int buf_capacity ;
   unsigned char *ip ;
   struct jit_op *ops ;
   struct jit_op *last_op ;
   struct jit_reg_allocator *reg_al ;
   struct jit_op *current_func ;
   jit_label *labels ;
   jit_prepared_args prepared_args ;
   int push_count ;
   unsigned int optimizations ;
   unsigned char mmaped_buf ;
};
__inline static int make_addmuli(jit_op *op , jit_op *nextop ) ;
extern int cgetent(char ** , char ** , char const   * ) ;
extern void tzset(void) ;
struct jit_debug_info *jit_debug_info_new(char const   *filename , char const   *function ,
                                          int lineno ) ;
static jit_tree *delete_node(jit_tree *h , jit_tree_key key , int *found ) ;
typedef __int32_t key_t;
extern char *gets(char * ) ;
void jit_disasm_general_i$nit(void) ;
void fac(int n ) ;
__inline static int _bit_pop(unsigned int x ) ;
typedef unsigned int __darwin_fsblkcnt_t;
typedef __darwin_fsblkcnt_t fsblkcnt_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_tryrdlock(pthread_rwlock_t * )  __asm__("_pthread_rwlock_tryrdlock")  ;
__inline extern __darwin_ct_rune_t __isctype(__darwin_ct_rune_t _c , unsigned long _f ) ;
static void report_warning(struct jit *jit , jit_op *op , char *desc ) ;
extern int mkostempsat_np(int dfd , char *path , int slen , int oflags )  __attribute__((__availability__(watchos,introduced=4.0),
__availability__(tvos,introduced=11.0), __availability__(ios,introduced=11.0), __availability__(macosx,introduced=10.13))) ;
extern int setegid(gid_t  ) ;
enum jit_amd64_gp_regs {
    AMD64_RAX = 0,
    AMD64_RCX = 1,
    AMD64_RDX = 2,
    AMD64_RBX = 3,
    AMD64_RSP = 4,
    AMD64_RBP = 5,
    AMD64_RSI = 6,
    AMD64_RDI = 7,
    AMD64_R8 = 8,
    AMD64_R9 = 9,
    AMD64_R10 = 10,
    AMD64_R11 = 11,
    AMD64_R12 = 12,
    AMD64_R13 = 13,
    AMD64_R14 = 14,
    AMD64_R15 = 15,
    AMD64_RIP = 16,
    AMD64_NREG = 17
} ;
extern long long atoll(char const   * ) ;
extern int unlinkat(int  , char const   * , int  )  __attribute__((__availability__(macosx,introduced=10.10))) ;
jit_hw_reg *jit_get_unused_reg_with_index(struct jit_reg_allocator *al , jit_op *op ,
                                          int fp , int index___0 ) ;
extern int getattrlistbulk(int  , void * , void * , size_t  , uint64_t  )  __attribute__((__availability__(macosx,introduced=10.10))) ;
typedef struct __anonstruct_ldiv_t_748949161 ldiv_t;
typedef __darwin_size_t rsize_t;
extern errno_t memset_s(void *__s , rsize_t __smax , int __c , rsize_t __n )  __attribute__((__availability__(macosx,introduced=10.9))) ;
__inline static jit_op *jit_op_last(jit_op *op ) ;
extern int sched_get_priority_max(int  ) ;
extern int __darwin_check_fd_set_overflow(int  , void const   * , int  )  __attribute__((__weak_import__)) ;
static int emit_push_reg(struct jit *jit , jit_hw_reg *r , int stack_offset ) ;
static int emit_pop_caller_saved_regs(struct jit *jit , jit_op *op ) ;
extern char *getenv(char const   * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_join(pthread_t  ,
                                                                                                                        void * _Nullable  * _Nullable   )  __asm__("_pthread_join")  ;
extern size_t strlen(char const   *__s ) ;
void jit_free(struct jit *jit ) ;
static int generic_pop_caller_saved_regs(struct jit *jit , jit_op *op , int reg_count ,
                                         jit_hw_reg *regs , int fp , jit_hw_reg *skip_reg ,
                                         int stack_offset ) ;
static int check_data_references(jit_op *op , char *msg_buf ) ;
extern __darwin_ct_rune_t ___tolower(__darwin_ct_rune_t  ) ;
typedef uint32_t uint_least32_t;
static FILE *open_disasm(void) ;
union jit_proc_value_alias {
   void (*ptr)() ;
   jit_value num ;
};
extern _RuneLocale *_CurrentRuneLocale ;
extern void *mmap(void * , size_t  , int  , int  , int  , off_t  )  __asm__("_mmap")  ;
static void rmap_assoc(jit_rmap *rmap , jit_value reg , jit_hw_reg *hreg ) ;
extern double difftime(time_t  , time_t  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_atfork(void (* _Nullable  )(void) ,
                                                                                                                          void (* _Nullable  )(void) ,
                                                                                                                          void (* _Nullable  )(void) ) ;
extern int ( /* format attribute */  sprintf)(char * __restrict   , char const   * __restrict   
                                              , ...)  __attribute__((__availability__(swift,unavailable,message="Use snprintf instead."))) ;
extern int renameatx_np(int  , char const   * , int  , char const   * , unsigned int  )  __attribute__((__availability__(watchos,introduced=3.0),
__availability__(tvos,introduced=10.0), __availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12))) ;
extern int nfssvc(int  , void * ) ;
static void emit_alu_op(struct jit *jit , struct jit_op *op , int x86_op , int imm ) ;
extern int abs(int  )  __attribute__((__const__)) ;
extern int mbtowc(wchar_t * __restrict   , char const   * __restrict   , size_t  ) ;
extern char *getcwd(char * , size_t  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_trylock(pthread_mutex_t * ) ;
extern void encrypt(char * , int  )  __asm__("_encrypt")  ;
extern long labs(long  )  __attribute__((__const__)) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setstacksize(pthread_attr_t * ,
                                                                                                                                     size_t  ) ;
static jit_tree *jit_tree_insert(jit_tree *root , jit_tree_key key , jit_tree_value value ,
                                 int *found ) ;
extern int lutimes(char const   * , struct timeval  const  * )  __attribute__((__availability__(macosx,introduced=10.5))) ;
typedef int64_t int_least64_t;
static int check_dead_code(jit_op *op , char *msg_buf ) ;
extern char *rindex(char const   * , int  ) ;
extern void memset_pattern4(void *__b , void const   *__pattern4 , size_t __len )  __attribute__((__availability__(macosx,introduced=10.5))) ;
typedef u_int64_t syscall_arg_t;
extern int __vsprintf_chk(char * __restrict   , int  , size_t  , char const   * __restrict   ,
                          va_list  ) ;
extern char *cgetcap(char * , char const   * , int  ) ;
extern int __attribute__((__availability__(tvos,unavailable), __availability__(watchos,unavailable),
__availability__(ios,unavailable), __availability__(macos,introduced=10.0), __availability__(swift,unavailable,message="Use posix_spawn APIs or NSTask instead.")))  system(char const   * )  __asm__("_system")  ;
jit_op *jit_add_prolog(struct jit *jit , void *func , struct jit_debug_info *debug_info ) ;
typedef enum __anonenum_X86_Prefix_200431650 X86_Prefix;
extern int mkostemp(char *path , int oflags )  __attribute__((__availability__(watchos,introduced=3.0),
__availability__(tvos,introduced=10.0), __availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12))) ;
extern int reboot(int  ) ;
extern float strtof(char const   * , char ** )  __asm__("_strtof")  ;
extern int utimes(char const   * , struct timeval  const  * ) ;
extern int mkpath_np(char const   *path , mode_t omode )  __attribute__((__availability__(macosx,introduced=10.8))) ;
static void insert_reg_op(int opcode , jit_op *op , jit_value r1 , jit_value r2 ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlockattr_setpshared(pthread_rwlockattr_t * ,
                                                                                                                                         int  ) ;
extern int faccessat(int  , char const   * , int  , int  )  __attribute__((__availability__(macosx,introduced=10.10))) ;
extern int fchown(int  , uid_t  , gid_t  ) ;
static void ob_printf(struct output_buf *ob , char const   *fmt  , ...) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_setprioceiling(pthread_mutex_t * __restrict   ,
                                                                                                                                        int  ,
                                                                                                                                        int * __restrict   ) ;
extern int pclose(FILE * )  __attribute__((__availability__(swift,unavailable,message="Use posix_spawn APIs or NSTask instead."))) ;
struct __darwin_zmm_reg {
   char __zmm_reg[64] ;
};
struct __darwin_x86_avx512_state64 {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   struct __darwin_xmm_reg __fpu_xmm8 ;
   struct __darwin_xmm_reg __fpu_xmm9 ;
   struct __darwin_xmm_reg __fpu_xmm10 ;
   struct __darwin_xmm_reg __fpu_xmm11 ;
   struct __darwin_xmm_reg __fpu_xmm12 ;
   struct __darwin_xmm_reg __fpu_xmm13 ;
   struct __darwin_xmm_reg __fpu_xmm14 ;
   struct __darwin_xmm_reg __fpu_xmm15 ;
   char __fpu_rsrv4[96] ;
   int __fpu_reserved1 ;
   char __avx_reserved1[64] ;
   struct __darwin_xmm_reg __fpu_ymmh0 ;
   struct __darwin_xmm_reg __fpu_ymmh1 ;
   struct __darwin_xmm_reg __fpu_ymmh2 ;
   struct __darwin_xmm_reg __fpu_ymmh3 ;
   struct __darwin_xmm_reg __fpu_ymmh4 ;
   struct __darwin_xmm_reg __fpu_ymmh5 ;
   struct __darwin_xmm_reg __fpu_ymmh6 ;
   struct __darwin_xmm_reg __fpu_ymmh7 ;
   struct __darwin_xmm_reg __fpu_ymmh8 ;
   struct __darwin_xmm_reg __fpu_ymmh9 ;
   struct __darwin_xmm_reg __fpu_ymmh10 ;
   struct __darwin_xmm_reg __fpu_ymmh11 ;
   struct __darwin_xmm_reg __fpu_ymmh12 ;
   struct __darwin_xmm_reg __fpu_ymmh13 ;
   struct __darwin_xmm_reg __fpu_ymmh14 ;
   struct __darwin_xmm_reg __fpu_ymmh15 ;
   struct __darwin_opmask_reg __fpu_k0 ;
   struct __darwin_opmask_reg __fpu_k1 ;
   struct __darwin_opmask_reg __fpu_k2 ;
   struct __darwin_opmask_reg __fpu_k3 ;
   struct __darwin_opmask_reg __fpu_k4 ;
   struct __darwin_opmask_reg __fpu_k5 ;
   struct __darwin_opmask_reg __fpu_k6 ;
   struct __darwin_opmask_reg __fpu_k7 ;
   struct __darwin_ymm_reg __fpu_zmmh0 ;
   struct __darwin_ymm_reg __fpu_zmmh1 ;
   struct __darwin_ymm_reg __fpu_zmmh2 ;
   struct __darwin_ymm_reg __fpu_zmmh3 ;
   struct __darwin_ymm_reg __fpu_zmmh4 ;
   struct __darwin_ymm_reg __fpu_zmmh5 ;
   struct __darwin_ymm_reg __fpu_zmmh6 ;
   struct __darwin_ymm_reg __fpu_zmmh7 ;
   struct __darwin_ymm_reg __fpu_zmmh8 ;
   struct __darwin_ymm_reg __fpu_zmmh9 ;
   struct __darwin_ymm_reg __fpu_zmmh10 ;
   struct __darwin_ymm_reg __fpu_zmmh11 ;
   struct __darwin_ymm_reg __fpu_zmmh12 ;
   struct __darwin_ymm_reg __fpu_zmmh13 ;
   struct __darwin_ymm_reg __fpu_zmmh14 ;
   struct __darwin_ymm_reg __fpu_zmmh15 ;
   struct __darwin_zmm_reg __fpu_zmm16 ;
   struct __darwin_zmm_reg __fpu_zmm17 ;
   struct __darwin_zmm_reg __fpu_zmm18 ;
   struct __darwin_zmm_reg __fpu_zmm19 ;
   struct __darwin_zmm_reg __fpu_zmm20 ;
   struct __darwin_zmm_reg __fpu_zmm21 ;
   struct __darwin_zmm_reg __fpu_zmm22 ;
   struct __darwin_zmm_reg __fpu_zmm23 ;
   struct __darwin_zmm_reg __fpu_zmm24 ;
   struct __darwin_zmm_reg __fpu_zmm25 ;
   struct __darwin_zmm_reg __fpu_zmm26 ;
   struct __darwin_zmm_reg __fpu_zmm27 ;
   struct __darwin_zmm_reg __fpu_zmm28 ;
   struct __darwin_zmm_reg __fpu_zmm29 ;
   struct __darwin_zmm_reg __fpu_zmm30 ;
   struct __darwin_zmm_reg __fpu_zmm31 ;
};
extern unsigned int alarm(unsigned int  ) ;
extern int cgetustr(char * , char const   * , char ** ) ;
extern void strmode(int __mode , char *__bp ) ;
extern int __sprintf_chk(char * __restrict   , int  , size_t  , char const   * __restrict   
                         , ...) ;
extern time_t timelocal(struct tm * const   ) ;
extern char *ctime_r(time_t const   * , char * ) ;
typedef u_int32_t fixpt_t;
extern int shm_unlink(char const   * ) ;
typedef uint64_t uint_least64_t;
void _cipher$_xtea_encipherBlock(unsigned int num_rounds , unsigned int *v , unsigned int *key ) ;
typedef unsigned char u_char;
extern void setkey(char const   * )  __asm__("_setkey")  ;
extern ssize_t getdelim(char ** __restrict  __linep , size_t * __restrict  __linecapp ,
                        int __delimiter , FILE * __restrict  __stream )  __attribute__((__availability__(macosx,introduced=10.7))) ;
extern int access(char const   * , int  ) ;
extern long gethostid(void) ;
extern int ftrylockfile(FILE * ) ;
void jit_trace(struct jit *jit , int verbosity ) ;
typedef __darwin_rune_t rune_t;
extern  __attribute__((__noreturn__)) void __assert_rtn(char const   * , char const   * ,
                                                        int  , char const   * )  __attribute__((__disable_tail_calls__,
__cold__)) ;
extern int fgetpos(FILE * __restrict   , fpos_t * ) ;
extern int getgrouplist(char const   * , int  , int * , int * ) ;
extern int fgetc(FILE * ) ;
union __anonunion_value_178427841 {
   long generic ;
   double fp ;
};
static void emit_shift_op(struct jit *jit , struct jit_op *op , int shift_op , int imm ) ;
extern int feof(FILE * ) ;
extern int putchar(int  ) ;
extern void srandomdev(void) ;
static void jit_dead_code_analysis(struct jit *jit , int remove_dead_code ) ;
extern int ( /* format attribute */  scanf)(char const   * __restrict    , ...) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_rdlock(pthread_rwlock_t * )  __asm__("_pthread_rwlock_rdlock")  ;
extern int fsync_volume_np(int  , int  )  __attribute__((__availability__(macosx,introduced=10.8))) ;
static void rmap_sync(jit_op *op , jit_rmap *current , jit_rmap *target , int mode ) ;
struct __darwin_mcontext64 {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_state64 __ss ;
   struct __darwin_x86_float_state64 __fs ;
};
extern int fflush(FILE * ) ;
extern int puts(char const   * ) ;
extern void *memcpy(void *__dst , void const   *__src , size_t __n ) ;
typedef __darwin_intptr_t intptr_t;
extern int chdir(char const   * ) ;
extern FILE *fmemopen(void * __restrict  __buf , size_t __size , char const   * __restrict  __mode )  __attribute__((__availability__(watchos,introduced=4.0),
__availability__(tvos,introduced=11.0), __availability__(ios,introduced=11.0), __availability__(macos,introduced=10.13))) ;
extern uid_t geteuid(void) ;
__inline static jit_rmap *rmap_init(void) ;
extern int __attribute__((__availability__(macosx,deprecated=10.12,message="syscall(2) is unsupported; please switch to a supported interface. For SYS_kdebug_trace use kdebug_signpost()."),
__availability__(ios,deprecated=10.0,message="syscall(2) is unsupported; please switch to a supported interface. For SYS_kdebug_trace use kdebug_signpost()."),
__availability__(tvos,unavailable), __availability__(watchos,unavailable)))  syscall(int  
                                                                                     , ...) ;
void init_tigress(void) ;
extern int __attribute__((__availability__(watchos,introduced=3.0), __availability__(tvos,introduced=10.0),
__availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12)))  clock_getres(clockid_t __clock_id ,
                                                                                                 struct timespec *__res ) ;
static void emit_sse_round(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) ;
struct __darwin_mcontext_avx512_64_full {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_full_state64 __ss ;
   struct __darwin_x86_avx512_state64 __fs ;
};
static double x0 ;
extern int minherit(void * , size_t  , int  ) ;
static unsigned char *emit_sse_get_sign_mask(void) ;
extern size_t __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  pthread_get_stacksize_np(pthread_t  ) ;
struct _2_init_tigress_1_opaque_NodeStruct *_2_init_tigress_1_opaque_ptr_1  =    (struct _2_init_tigress_1_opaque_NodeStruct *)0;
extern int __attribute__((__availability__(watchos,introduced=3.0), __availability__(tvos,introduced=10.0),
__availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12)))  clock_gettime(clockid_t __clock_id ,
                                                                                                  struct timespec *__tp ) ;
__inline static __uint32_t _OSSwapInt32(__uint32_t _data ) ;
void _cipher$_xtea_encipher(unsigned int block_no , unsigned int num_rounds , unsigned int *v ,
                            unsigned int *key , unsigned int size ) ;
typedef char __darwin_uuid_string_t[37];
typedef struct rusage_info_v4 rusage_info_current;
__inline static void funcall_fput_arg(struct jit *jit , jit_op *op ) ;
extern long long llabs(long long  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_destroy(pthread_rwlock_t * )  __asm__("_pthread_rwlock_destroy")  ;
jit_op *jit_data_bytes(struct jit *jit , jit_value count , unsigned char *data ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_condattr_setpshared(pthread_condattr_t * ,
                                                                                                                                       int  ) ;
extern int munmap(void * , size_t  )  __asm__("_munmap")  ;
static void emit_memset(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                        jit_value a3 , int block_size ) ;
extern char *strncat(char *__s1 , char const   *__s2 , size_t __n ) ;
extern int __attribute__((__availability__(ios,introduced=3.2), __availability__(macos,introduced=10.6)))  pthread_getname_np(pthread_t  ,
                                                                                                                              char * ,
                                                                                                                              size_t  ) ;
static char *platform_id(void) ;
void jit_check_code(struct jit *jit , int warnings ) ;
extern lldiv_t lldiv(long long  , long long  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_getpshared(pthread_mutexattr_t const   * __restrict   ,
                                                                                                                                        int * __restrict   ) ;
static int valid_size(int size ) ;
__inline static void branch_adjustment(struct jit *jit , jit_op *op ) ;
struct __darwin_mcontext64_full {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_full_state64 __ss ;
   struct __darwin_x86_float_state64 __fs ;
};
struct jit_debug_info {
   char const   *filename ;
   char const   *function ;
   int lineno ;
   int warnings ;
};
struct jit_op *jit_add_fop(struct jit *jit , unsigned short code , unsigned char spec ,
                           long arg1 , long arg2 , long arg3 , double flt_imm , unsigned char arg_size ,
                           struct jit_debug_info *debug_info ) ;
typedef enum __anonenum_X86_SSE_CmpCode_848838535 X86_SSE_CmpCode;
extern int cgetset(char const   * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_getprioceiling(pthread_mutexattr_t const   * __restrict   ,
                                                                                                                                            int * __restrict   ) ;
extern __darwin_ct_rune_t __toupper(__darwin_ct_rune_t  ) ;
__inline extern int ispunct(int _c ) ;
extern int symlinkat(char const   * , int  , char const   * )  __attribute__((__availability__(macosx,introduced=10.10))) ;
__inline static __uint64_t _OSSwapInt64(__uint64_t _data ) ;
extern int gettimeofday(struct timeval * __restrict   , void * __restrict   ) ;
extern char *devname_r(dev_t  , mode_t  , char *buf , int len ) ;
extern gid_t getgid(void) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_key_delete(pthread_key_t  ) ;
char const   *_4_fib___stringStore  =    "";
struct jit_reg_allocator {
   int gp_reg_cnt ;
   int fp_reg_cnt ;
   int fp_reg ;
   int gp_arg_reg_cnt ;
   int fp_arg_reg_cnt ;
   jit_hw_reg *ret_reg ;
   jit_hw_reg *fpret_reg ;
   jit_hw_reg *gp_regs ;
   jit_hw_reg *fp_regs ;
   jit_hw_reg **gp_arg_regs ;
   jit_hw_reg **fp_arg_regs ;
   struct jit_func_info *current_func_info ;
};
extern FILE *funopen(void const   * , int (* _Nullable  )(void * , char * , int  ) ,
                     int (* _Nullable  )(void * , char const   * , int  ) , fpos_t (* _Nullable  )(void * ,
                                                                                                   fpos_t  ,
                                                                                                   int  ) ,
                     int (* _Nullable  )(void * ) ) ;
static jit_hw_reg *rmap_is_associated(jit_rmap *rmap , int reg_id , int fp , jit_value *virt_reg ) ;
extern int cgetstr(char * , char const   * , char ** ) ;
typedef char *caddr_t;
enum __anonenum_321777801 {
    X86_FPCW_INVOPEX_MASK = 1,
    X86_FPCW_DENOPEX_MASK = 2,
    X86_FPCW_ZERODIV_MASK = 4,
    X86_FPCW_OVFEX_MASK = 8,
    X86_FPCW_UNDFEX_MASK = 16,
    X86_FPCW_PRECEX_MASK = 32,
    X86_FPCW_PRECC_MASK = 768,
    X86_FPCW_ROUNDC_MASK = 3072,
    X86_FPCW_PREC_SINGLE = 0,
    X86_FPCW_PREC_DOUBLE = 512,
    X86_FPCW_PREC_EXTENDED = 768,
    X86_FPCW_ROUND_NEAREST = 0,
    X86_FPCW_ROUND_DOWN = 1024,
    X86_FPCW_ROUND_UP = 2048,
    X86_FPCW_ROUND_TOZERO = 3072
} ;
extern size_t strftime(char * __restrict   , size_t  , char const   * __restrict   ,
                       struct tm  const  * __restrict   )  __asm__("_strftime")  ;
__inline extern int __wcwidth(__darwin_ct_rune_t _c ) ;
struct timezone {
   int tz_minuteswest ;
   int tz_dsttime ;
};
extern char *getbsize(int * , long * ) ;
extern pid_t getpgid(pid_t  ) ;
extern int setruid(uid_t  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_is_threaded_np(void) ;
static void emit_sse_floor(struct jit *jit , jit_value a1 , jit_value a2 , int floor ) ;
extern int renameat(int  , char const   * , int  , char const   * )  __attribute__((__availability__(macosx,introduced=10.10))) ;
extern pid_t getppid(void) ;
static int print_load_op(struct jit_disasm *disasm , struct output_buf *linebuf ,
                         jit_op *op ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlockattr_getpshared(pthread_rwlockattr_t const   * __restrict   ,
                                                                                                                                         int * __restrict   ) ;
static void rmap_sync_aux(jit_tree *current , jit_tree *target , jit_op *op , int mode ) ;
extern int mkstemp_dprotected_np(char *path , int dpclass , int dpflags )  __attribute__((__availability__(watchos,introduced=3.0),
__availability__(tvos,introduced=10.0), __availability__(ios,introduced=10.0), __availability__(macosx,unavailable))) ;
extern unsigned long strtoul(char const   *__str , char **__endptr , int __base ) ;
extern int strcoll(char const   *__s1 , char const   *__s2 ) ;
extern FILE *popen(char const   * , char const   * )  __asm__("_popen") __attribute__((__availability__(swift,unavailable,message="Use posix_spawn APIs or NSTask instead."))) ;
extern char *mktemp(char * ) ;
extern long nrand48(unsigned short * )  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
__inline static void print_str(struct output_buf *buf , char *str ) ;
static unsigned char x86_cc_unsigned_map[12] ;
static void print_reg_liveness_callback(jit_tree_key key , jit_tree_value value ,
                                        void *disasm ) ;
static int uses_hw_reg(struct jit_op *op , jit_value reg , int fp ) ;
static void jit_tree_free(jit_tree *h ) ;
static int rmap_equal(jit_op *op , jit_rmap *current , jit_rmap *target ) ;
typedef __uint32_t __darwin_socklen_t;
static void emit_ureg(struct jit *jit , jit_value vreg , int hreg_id ) ;
__inline static int jit_is_label(struct jit *jit , void *ptr ) ;
static void emit_restore_all_regs(struct jit *jit , jit_op *op ) ;
extern FILE *__stdoutp ;
typedef int sig_atomic_t;
static int generic_push_caller_saved_regs(struct jit *jit , jit_op *op , int reg_count ,
                                          jit_hw_reg *regs , int fp , jit_hw_reg *skip_reg ,
                                          int stack_offset ) ;
void jit_generate_code(struct jit *jit ) ;
__inline extern int ishexnumber(int _c ) ;
extern void memset_pattern8(void *__b , void const   *__pattern8 , size_t __len )  __attribute__((__availability__(macosx,introduced=10.5))) ;
extern  __attribute__((__noreturn__)) void _Exit(int  ) ;
extern ssize_t write(int __fd , void const   *__buf , size_t __nbyte )  __asm__("_write")  ;
typedef __darwin_uuid_t uuid_t;
extern int sethostname(char const   * , int  ) ;
extern void srand48(long  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4),
__availability__(swift,unavailable,message="Use lazily initialized globals instead")))  pthread_once(pthread_once_t * ,
                                                                                                     void (* _Nonnull  )(void) ) ;
extern char *strsignal(int __sig ) ;
union __anonunion_amd64_imm_buf_340631928 {
   size_t val ;
   unsigned char b[8] ;
};
__inline static void print_arg(struct jit_disasm *disasm , struct output_buf *buf ,
                               struct jit_op *op , int arg ) ;
extern int initgroups(char const   * , int  ) ;
extern char *ttyname(int  ) ;
extern int __attribute__((__deprecated__))  rresvport(int * ) ;
extern int const   sys_nerr ;
void x0_i$nit(void) ;
typedef unsigned long uintmax_t;
typedef enum __anonenum_AMD64_REX_Bits_69261688 AMD64_REX_Bits;
extern time_t time2posix(time_t  ) ;
extern int linkat(int  , char const   * , int  , char const   * , int  )  __attribute__((__availability__(macosx,introduced=10.10))) ;
typedef __darwin_ino64_t ino64_t;
typedef struct __darwin_fp_control __darwin_fp_control_t;
extern int fputc(int  , FILE * ) ;
void jit_message(struct jit *j , char *s ) ;
extern void psort(void *__base , size_t __nel , size_t __width , int (* _Nonnull  __compar)(void const   * ,
                                                                                            void const   * ) )  __attribute__((__availability__(macosx,introduced=10.6))) ;
extern int symlink(char const   * , char const   * ) ;
__inline static void jit_set_add(jit_set *s , int value ) ;
extern int setattrlistat(int  , char const   * , void * , void * , size_t  , uint32_t  )  __attribute__((__availability__(watchos,introduced=4.0),
__availability__(tvos,introduced=11.0), __availability__(ios,introduced=11.0), __availability__(macosx,introduced=10.13))) ;
struct accessx_descriptor {
   unsigned int ad_name_offset ;
   int ad_flags ;
   int ad_pad[2] ;
};
enum __anonenum_X86_SSE_Opcode_853888746 {
    X86_SSE_SQRT = 81,
    X86_SSE_RSQRT = 82,
    X86_SSE_RCP = 83,
    X86_SSE_ADD = 88,
    X86_SSE_DIV = 94,
    X86_SSE_MUL = 89,
    X86_SSE_SUB = 92,
    X86_SSE_MIN = 93,
    X86_SSE_MAX = 95,
    X86_SSE_COMP = 194,
    X86_SSE_AND = 84,
    X86_SSE_ANDN = 85,
    X86_SSE_OR = 86,
    X86_SSE_XOR = 87,
    X86_SSE_UNPCKL = 20,
    X86_SSE_UNPCKH = 21,
    X86_SSE_ADDSUB = 208,
    X86_SSE_HADD = 124,
    X86_SSE_HSUB = 125,
    X86_SSE_MOVSHDUP = 22,
    X86_SSE_MOVSLDUP = 18,
    X86_SSE_MOVDDUP = 18,
    X86_SSE_SHUF = 198,
    X86_SSE_COMI = 47,
    X86_SSE_PAND = 219,
    X86_SSE_POR = 235,
    X86_SSE_PXOR = 239,
    X86_SSE_PADDB = 252,
    X86_SSE_PADDW = 253,
    X86_SSE_PADDD = 254,
    X86_SSE_PADDQ = 212,
    X86_SSE_PSUBB = 248,
    X86_SSE_PSUBW = 249,
    X86_SSE_PSUBD = 250,
    X86_SSE_PSUBQ = 251,
    X86_SSE_PMAXSB = 60,
    X86_SSE_PMAXSW = 238,
    X86_SSE_PMAXSD = 61,
    X86_SSE_PMAXUB = 222,
    X86_SSE_PMAXUW = 62,
    X86_SSE_PMAXUD = 63,
    X86_SSE_PMINSB = 56,
    X86_SSE_PMINSW = 234,
    X86_SSE_PMINSD = 57,
    X86_SSE_PMINUB = 218,
    X86_SSE_PMINUW = 58,
    X86_SSE_PMINUD = 59,
    X86_SSE_PAVGB = 224,
    X86_SSE_PAVGW = 227,
    X86_SSE_PCMPEQB = 116,
    X86_SSE_PCMPEQW = 117,
    X86_SSE_PCMPEQD = 118,
    X86_SSE_PCMPEQQ = 41,
    X86_SSE_PCMPGTB = 100,
    X86_SSE_PCMPGTW = 101,
    X86_SSE_PCMPGTD = 102,
    X86_SSE_PCMPGTQ = 55,
    X86_SSE_PSADBW = 246,
    X86_SSE_PSHUFD = 112,
    X86_SSE_PUNPCKLBW = 96,
    X86_SSE_PUNPCKLWD = 97,
    X86_SSE_PUNPCKLDQ = 98,
    X86_SSE_PUNPCKLQDQ = 108,
    X86_SSE_PUNPCKHBW = 104,
    X86_SSE_PUNPCKHWD = 105,
    X86_SSE_PUNPCKHDQ = 106,
    X86_SSE_PUNPCKHQDQ = 109,
    X86_SSE_PACKSSWB = 99,
    X86_SSE_PACKSSDW = 107,
    X86_SSE_PACKUSWB = 103,
    X86_SSE_PACKUSDW = 43,
    X86_SSE_PADDUSB = 220,
    X86_SSE_PADDUSW = 221,
    X86_SSE_PSUBUSB = 216,
    X86_SSE_PSUBUSW = 217,
    X86_SSE_PADDSB = 236,
    X86_SSE_PADDSW = 237,
    X86_SSE_PSUBSB = 232,
    X86_SSE_PSUBSW = 233,
    X86_SSE_PMULLW = 213,
    X86_SSE_PMULLD = 64,
    X86_SSE_PMULHUW = 228,
    X86_SSE_PMULHW = 229,
    X86_SSE_PMULUDQ = 244,
    X86_SSE_PMOVMSKB = 215,
    X86_SSE_PSHIFTW = 113,
    X86_SSE_PSHIFTD = 114,
    X86_SSE_PSHIFTQ = 115,
    X86_SSE_SHR = 2,
    X86_SSE_SAR = 4,
    X86_SSE_SHL = 6,
    X86_SSE_PSRLW_REG = 209,
    X86_SSE_PSRAW_REG = 225,
    X86_SSE_PSLLW_REG = 241,
    X86_SSE_PSRLD_REG = 210,
    X86_SSE_PSRAD_REG = 226,
    X86_SSE_PSLLD_REG = 242,
    X86_SSE_PSRLQ_REG = 211,
    X86_SSE_PSLLQ_REG = 243,
    X86_SSE_PREFETCH = 24,
    X86_SSE_MOVNTPS = 43,
    X86_SSE_MOVHPD_REG_MEMBASE = 22,
    X86_SSE_MOVHPD_MEMBASE_REG = 23,
    X86_SSE_MOVSD_REG_MEMBASE = 16,
    X86_SSE_MOVSD_MEMBASE_REG = 17,
    X86_SSE_PINSRB = 32,
    X86_SSE_PINSRW = 196,
    X86_SSE_PINSRD = 34,
    X86_SSE_PEXTRB = 20,
    X86_SSE_PEXTRW = 197,
    X86_SSE_PEXTRD = 22
} ;
extern void qsort_r(void *__base , size_t __nel , size_t __width , void * , int (* _Nonnull  __compar)(void * ,
                                                                                                       void const   * ,
                                                                                                       void const   * ) ) ;
extern int getpagesize(void)  __attribute__((__const__)) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_setpshared(pthread_mutexattr_t * ,
                                                                                                                                        int  ) ;
__inline static int jit_op_is_cflow(jit_op *op ) ;
extern int add_profil(char * , size_t  , unsigned long  , unsigned int  )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
extern int ( /* format attribute */  dprintf)(int  , char const   * __restrict   
                                              , ...)  __attribute__((__availability__(macosx,introduced=10.7))) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setstack(pthread_attr_t * ,
                                                                                                                                 void * ,
                                                                                                                                 size_t  ) ;
static void emit_memcpy(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                        jit_value a3 ) ;
__inline static void jit_buf_expand(struct jit *jit ) ;
__inline static void jit_print_tree(jit_tree *h , int level ) ;
extern char *suboptarg ;
extern char *asctime_r(struct tm  const  * __restrict   , char * __restrict   ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setinheritsched(pthread_attr_t * ,
                                                                                                                                        int  ) ;
extern int rename(char const   *__old , char const   *__new ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_init(pthread_mutex_t * __restrict   ,
                                                                                                                              pthread_mutexattr_t const   * _Nullable __restrict   ) ;
extern int setregid(gid_t  , gid_t  )  __asm__("_setregid")  ;
void x86_cc_signed_map_i$nit(void) ;
static int assign_ret_reg(jit_op *op , jit_hw_reg *ret_reg ) ;
void jit_gen_op(struct jit *jit , struct jit_op *op ) ;
struct __siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   pid_t si_pid ;
   uid_t si_uid ;
   int si_status ;
   void *si_addr ;
   union sigval si_value ;
   long si_band ;
   unsigned long __pad[7] ;
};
static void rename_reg(jit_op *op , int r1 , int r2 ) ;
typedef int64_t user_off_t;
typedef uint8_t uint_fast8_t;
extern int ( /* format attribute */  __svfscanf)(FILE * , char const   * , va_list  ) ;
struct __sigaction {
   union __sigaction_u __sigaction_u ;
   void (*sa_tramp)(void * , int  , int  , siginfo_t * , void * ) ;
   sigset_t sa_mask ;
   int sa_flags ;
};
struct jit_tree {
   struct jit_tree *left ;
   struct jit_tree *right ;
   int color ;
   jit_tree_key key ;
   jit_tree_value value ;
};
__inline extern int isgraph(int _c ) ;
extern int putw(int  , FILE * ) ;
__inline extern void ( __attribute__((__always_inline__)) __darwin_fd_set)(int _fd ,
                                                                           struct fd_set * const  _p ) ;
__inline static int pow2(int arg ) ;
__inline static int is_red(jit_tree *n ) ;
static void jit_dump_ops_compilable(struct jit *jit , jit_tree *labels ) ;
extern int mkostemps(char *path , int slen , int oflags )  __attribute__((__availability__(watchos,introduced=3.0),
__availability__(tvos,introduced=10.0), __availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12))) ;
struct __darwin_mcontext_avx512_64 {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_state64 __ss ;
   struct __darwin_x86_avx512_state64 __fs ;
};
extern int ( /* format attribute */  fprintf)(FILE * __restrict   , char const   * __restrict   
                                              , ...) ;
static int jit_tree_size(jit_tree *h ) ;
extern long pathconf(char const   * , int  ) ;
__inline extern int ( __attribute__((__always_inline__)) __sputc)(int _c , FILE *_p ) ;
extern int close(int  )  __asm__("_close")  ;
static int check_code_references(jit_op *op , char *msg_buf ) ;
extern double strtod(char const   * , char ** )  __asm__("_strtod")  ;
static void emit_save_all_regs(struct jit *jit , jit_op *op ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_setcanceltype(int  ,
                                                                                                                                 int * _Nullable   )  __asm__("_pthread_setcanceltype")  ;
extern int unwhiteout(char const   * ) ;
extern int __attribute__((__availability__(watchos,introduced=3.1), __availability__(tvos,introduced=10.0.1),
__availability__(ios,introduced=10.1), __availability__(macosx,introduced=10.12.1)))  timingsafe_bcmp(void const   *__b1 ,
                                                                                                      void const   *__b2 ,
                                                                                                      size_t __len ) ;
extern int tcsetpgrp(int  , pid_t  ) ;
__inline extern int isspecial(int _c ) ;
extern long long strtoq(char const   *__str , char **__endptr , int __base ) ;
extern int __attribute__((__availability__(ios,introduced=3.2), __availability__(macos,introduced=10.6)))  pthread_setname_np(char const   * ) ;
struct jit_op *jit_add_op(struct jit *jit , unsigned short code , unsigned char spec ,
                          long arg1 , long arg2 , long arg3 , unsigned char arg_size ,
                          struct jit_debug_info *debug_info ) ;
extern int unsetenv(char const   * )  __asm__("_unsetenv")  ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_setspecific(pthread_key_t  ,
                                                                                                                               void const   * _Nullable   ) ;
extern int dup2(int  , int  ) ;
extern int link(char const   * , char const   * ) ;
extern int revoke(char const   * ) ;
extern int setgroups(int  , gid_t const   * ) ;
__inline static void emit_fppush_arg(struct jit *jit , struct jit_out_arg *arg ) ;
extern int lchown(char const   * , uid_t  , gid_t  )  __asm__("_lchown")  ;
typedef struct _2_init_tigress_1_opaque_NodeStruct *_2_init_tigress_1_opaque_StructureType;
extern int heapsort(void *__base , size_t __nel , size_t __width , int (* _Nonnull  __compar)(void const   * ,
                                                                                              void const   * ) ) ;
extern size_t wcstombs(char * __restrict   , wchar_t const   * __restrict   , size_t  ) ;
typedef __uint64_t rlim_t;
extern void memset_pattern16(void *__b , void const   *__pattern16 , size_t __len )  __attribute__((__availability__(macosx,introduced=10.5))) ;
__inline static int flw_analyze_op(struct jit *jit , jit_op *op , struct jit_func_info *func_info ,
                                   int changed , struct code_refs_cache *code_refs ) ;
extern size_t mbstowcs(wchar_t * __restrict   , char const   * __restrict   , size_t  ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_detach(pthread_t  ) ;
int print_op(FILE *f , struct jit_disasm *disasm , struct jit_op *op , jit_tree *labels ,
             int verbosity ) ;
extern int ptsname_r(int fildes , char *buffer , size_t buflen )  __attribute__((__availability__(watchos,introduced=4.3),
__availability__(tvos,introduced=11.3), __availability__(ios,introduced=11.3), __availability__(macos,introduced=10.13.4))) ;
typedef int __darwin_nl_item;
struct __darwin_mcontext_avx32 {
   struct __darwin_i386_exception_state __es ;
   struct __darwin_i386_thread_state __ss ;
   struct __darwin_i386_avx_state __fs ;
};
typedef __uint16_t in_port_t;
extern FILE *zopen(char const   * , char const   * , int  ) ;
__inline static jit_value jit_value_align(jit_value value , jit_value alignment ) ;
typedef struct __darwin_fp_status __darwin_fp_status_t;
extern char *strsep(char **__stringp , char const   *__delim ) ;
typedef int64_t user_time_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setschedparam(pthread_attr_t * __restrict   ,
                                                                                                                                      struct sched_param  const  * __restrict   ) ;
extern ssize_t readlinkat(int  , char const   * , char * , size_t  )  __attribute__((__availability__(macosx,introduced=10.10))) ;
struct jit_out_arg {
   union __anonunion_value_178427841 value ;
   int argpos ;
   char isreg ;
   char isfp ;
   char size ;
};
typedef enum __anonenum_X86_SSE_Opcode_853888746 X86_SSE_Opcode;
extern char *l64a(long  ) ;
extern pid_t fork(void)  __attribute__((__availability__(tvos,unavailable), __availability__(watchos,unavailable))) ;
struct rusage_info_v2 {
   uint8_t ri_uuid[16] ;
   uint64_t ri_user_time ;
   uint64_t ri_system_time ;
   uint64_t ri_pkg_idle_wkups ;
   uint64_t ri_interrupt_wkups ;
   uint64_t ri_pageins ;
   uint64_t ri_wired_size ;
   uint64_t ri_resident_size ;
   uint64_t ri_phys_footprint ;
   uint64_t ri_proc_start_abstime ;
   uint64_t ri_proc_exit_abstime ;
   uint64_t ri_child_user_time ;
   uint64_t ri_child_system_time ;
   uint64_t ri_child_pkg_idle_wkups ;
   uint64_t ri_child_interrupt_wkups ;
   uint64_t ri_child_pageins ;
   uint64_t ri_child_elapsed_abstime ;
   uint64_t ri_diskio_bytesread ;
   uint64_t ri_diskio_byteswritten ;
};
struct fd_set {
   __int32_t fds_bits[1024UL / (sizeof(__int32_t ) * 8UL)] ;
};
extern int setuid(uid_t  ) ;
struct __anonstruct_w_T_422959015 {
   unsigned int w_Termsig : 7 ;
   unsigned int w_Coredump : 1 ;
   unsigned int w_Retcode : 8 ;
   unsigned int w_Filler : 16 ;
};
union wait {
   int w_status ;
   struct __anonstruct_w_T_422959015 w_T ;
   struct __anonstruct_w_S_422959016 w_S ;
};
typedef unsigned int uint;
extern int ttyslot(void) ;
static void emit_sse_change_sign(struct jit *jit , jit_op *op , int reg ) ;
struct __anonstruct_lldiv_t_86583852 {
   long long quot ;
   long long rem ;
};
static void emit_transfer_init(struct jit *jit , jit_op *op , jit_value destreg ,
                               jit_value srcreg , jit_value cnt , int block_size ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getschedparam(pthread_attr_t const   * __restrict   ,
                                                                                                                                      struct sched_param * __restrict   ) ;
__inline static void jit_prepare_spills_on_jmpr_targets(struct jit *jit ) ;
extern int getdate_err ;
extern int ( /* format attribute */  asprintf)(char ** __restrict   , char const   * __restrict   
                                               , ...) ;
extern qos_class_t __attribute__((__availability__(macos,introduced=10.10), __availability__(ios,introduced=8.0)))  qos_class_main(void) ;
extern gid_t getegid(void) ;
__inline static void flw_analyze_prolog(struct jit *jit , jit_op *op , struct jit_func_info *func_info ) ;
extern struct tm *localtime_r(time_t const   * __restrict   , struct tm * __restrict   ) ;
void jit_reg_allocator_free(struct jit_reg_allocator *a ) ;
extern int pause(void)  __asm__("_pause")  ;
void x05_i$nit(void) ;
__inline static void jit_op_append(jit_op *op , jit_op *appended ) ;
extern int grantpt(int  ) ;
extern size_t confstr(int  , char * , size_t  )  __asm__("_confstr")  ;
static void emit_transfer_op(struct jit *jit , jit_op *op , int alu_op ) ;
static int spill_all_registers(jit_op *op , struct jit_reg_allocator *al ) ;
static int check_register_types(struct jit *jit , jit_op *op , char *msg_buf ) ;
extern int setlogin(char const   * ) ;
void jit_messager(struct jit *j , char *s , int i ) ;
jit_hw_reg *jit_get_unused_reg(struct jit_reg_allocator *al , jit_op *op , int fp ) ;
extern long jrand48(unsigned short * )  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
extern int ( /* format attribute */  vfscanf)(FILE * __restrict  __stream , char const   * __restrict  __format ,
                                              va_list  ) ;
extern int getitimer(int  , struct itimerval * ) ;
extern void srand(unsigned int  )  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_equal(pthread_t __attribute__((__nullable__))   ,
                                                                                                                         pthread_t __attribute__((__nullable__))   ) ;
static void mark_calleesaved_regs(jit_tree *hint , jit_op *op ) ;
extern int cgetnext(char ** , char ** ) ;
typedef struct jit_disasm jit_disasm;
extern int fclose(FILE * ) ;
extern char *strchr(char const   *__s , int __c ) ;
extern int msync(void * , size_t  , int  )  __asm__("_msync")  ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_destroy(pthread_mutex_t * ) ;
union _3_fib_$node {
   char _char ;
   unsigned int _unsigned_int ;
   unsigned char _unsigned_char ;
   long _long ;
   unsigned long _unsigned_long ;
   void *_void_star ;
   unsigned short _unsigned_short ;
   unsigned long long _unsigned_long_long ;
   signed char _signed_char ;
   long long _long_long ;
   int _int ;
   short _short ;
};
extern int setrgid(gid_t  ) ;
struct jit_label {
   long pos ;
   jit_op *op ;
   struct jit_label *next ;
};
extern void __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  *pthread_get_stackaddr_np(pthread_t  ) ;
extern int swapon(char const   * ) ;
extern FILE *open_memstream(char **__bufp , size_t *__sizep )  __attribute__((__availability__(watchos,introduced=4.0),
__availability__(tvos,introduced=11.0), __availability__(ios,introduced=11.0), __availability__(macos,introduced=10.13))) ;
extern int __vsnprintf_chk(char * __restrict   , size_t  , int  , size_t  , char const   * __restrict   ,
                           va_list  ) ;
typedef __darwin_ct_rune_t ct_rune_t;
void DUMP_int(int block , struct jit *jit , struct jit_op *begin_ , struct jit_op *end_ ) ;
extern int getrlimit(int  , struct rlimit * )  __asm__("_getrlimit")  ;
extern void qsort(void *__base , size_t __nel , size_t __width , int (* _Nonnull  __compar)(void const   * ,
                                                                                            void const   * ) ) ;
extern int dup(int  ) ;
static void sse_mov_reg_safeimm(struct jit *jit , jit_op *op , jit_value reg , double *imm ) ;
struct __darwin_mcontext_avx512_32 {
   struct __darwin_i386_exception_state __es ;
   struct __darwin_i386_thread_state __ss ;
   struct __darwin_i386_avx512_state __fs ;
};
extern long strtol(char const   *__str , char **__endptr , int __base ) ;
extern pid_t getpgrp(void) ;
typedef struct __darwin_mcontext64 *mcontext_t;
extern char *strerror(int __errnum )  __asm__("_strerror")  ;
extern int pthread_getugid_np(uid_t * , gid_t * ) ;
union __anonunion___mbstate_t_250061491 {
   char __mbstate8[128] ;
   long long _mbstateL ;
};
typedef int16_t int_least16_t;
extern ssize_t readlink(char const   * __restrict   , char * __restrict   , size_t  ) ;
static int assign_getarg(jit_op *op , struct jit_reg_allocator *al ) ;
extern int ffsll(long long  )  __attribute__((__availability__(macosx,introduced=10.9))) ;
extern int __attribute__((__deprecated__))  ruserok(char const   * , int  , char const   * ,
                                                    char const   * ) ;
extern int sync_volume_np(char const   * , int  )  __attribute__((__availability__(macosx,introduced=10.8))) ;
typedef enum __anonenum_X86_Shift_Opcode_820104407 X86_Shift_Opcode;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getdetachstate(pthread_attr_t const   * ,
                                                                                                                                       int * ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_setcancelstate(int  ,
                                                                                                                                  int * _Nullable   )  __asm__("_pthread_setcancelstate")  ;
extern long ftell(FILE * ) ;
static int emit_pop_callee_saved_regs(struct jit *jit ) ;
extern char *strrchr(char const   *__s , int __c ) ;
extern FILE *freopen(char const   * __restrict   , char const   * __restrict   , FILE * __restrict   )  __asm__("_freopen")  ;
extern int ffsl(long  )  __attribute__((__availability__(macosx,introduced=10.5))) ;
struct jit_func_info {
   int general_arg_cnt ;
   int float_arg_cnt ;
   long allocai_mem ;
   int arg_capacity ;
   struct jit_inp_arg *args ;
   int gp_reg_count ;
   int fp_reg_count ;
   int has_prolog ;
   struct jit_op *first_op ;
};
extern int gethostuuid(unsigned char * , struct timespec  const  * )  __attribute__((__availability__(macosx,introduced=10.5))) ;
int print_op_compilable(struct jit_disasm *disasm , struct jit_op *op , jit_tree *labels ) ;
static int join_addr_addi(jit_op *op , jit_op *nextop ) ;
struct __anonstruct_jit_hw_reg_312769258 {
   int id ;
   char *name ;
   char callee_saved ;
   char fp ;
   short priority ;
};
int jit_allocai(struct jit *jit , int size ) ;
extern unsigned short *seed48(unsigned short * ) ;
extern int ( /* format attribute */  vdprintf)(int  , char const   * __restrict   ,
                                               va_list  )  __attribute__((__availability__(macosx,introduced=10.7))) ;
enum __anonenum_X86_FP_Opcode_1068131184 {
    X86_FADD = 0,
    X86_FMUL = 1,
    X86_FCOM = 2,
    X86_FCOMP = 3,
    X86_FSUB = 4,
    X86_FSUBR = 5,
    X86_FDIV = 6,
    X86_FDIVR = 7,
    X86_NFP = 8
} ;
extern char *fgets(char * __restrict   , int  , FILE * ) ;
char const   *_3_fib_$strings  =    "fib(%i)=%i\n\000";
typedef int64_t user_long_t;
static void ob_assert_space(struct output_buf *ob , int len ) ;
extern char *strdup(char const   *__s1 ) ;
extern int seteuid(uid_t  ) ;
static int join_muli_ori(jit_op *op , jit_op *nextop ) ;
extern char const   * const  sys_errlist[] ;
__inline static void jit_set_free(jit_set *s ) ;
typedef u_int64_t user_size_t;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_signal_thread_np(pthread_cond_t * ,
                                                                                                                                         pthread_t __attribute__((__nullable__))   ) ;
struct output_buf {
   char *buf ;
   size_t size ;
   size_t capacity ;
};
extern long double strtold(char const   * , char ** ) ;
void jit_assign_regs(struct jit *jit ) ;
extern void *bsearch(void const   *__key , void const   *__base , size_t __nel , size_t __width ,
                     int (* _Nonnull  __compar)(void const   * , void const   * ) ) ;
extern div_t div(int  , int  )  __attribute__((__const__)) ;
typedef enum __anonenum_X86_FP_Opcode_1068131184 X86_FP_Opcode;
extern int getattrlistat(int  , char const   * , void * , void * , size_t  , unsigned long  )  __attribute__((__availability__(macosx,introduced=10.10))) ;
extern char *fgetln(FILE * , size_t * ) ;
extern int __attribute__((__availability__(watchos,unavailable), __availability__(tvos,unavailable),
__availability__(ios,unavailable), __availability__(macosx,introduced=10.12)))  clock_settime(clockid_t __clock_id ,
                                                                                              struct timespec  const  *__tp ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_init(pthread_cond_t * __restrict   ,
                                                                                                                             pthread_condattr_t const   * _Nullable __restrict   )  __asm__("_pthread_cond_init")  ;
static void emit_sub_op(struct jit *jit , struct jit_op *op , int imm ) ;
extern void __attribute__((__deprecated__, __availability__(watchos,unavailable),
__availability__(tvos,unavailable)))  *sbrk(int  ) ;
extern char *getusershell(void) ;
extern char *optarg ;
extern char *strnstr(char const   *__big , char const   *__little , size_t __len ) ;
extern char *ctime(time_t const   * ) ;
static int check_argument_sizes(jit_op *op , char *msg_buf ) ;
enum jit_x86_fp_regs {
    X86_XMM0 = 0,
    X86_XMM1 = 1,
    X86_XMM2 = 2,
    X86_XMM3 = 3,
    X86_XMM4 = 4,
    X86_XMM5 = 5,
    X86_XMM6 = 6,
    X86_XMM7 = 7,
    X86_XMM_NREG = 8
} ;
extern int ( /* format attribute */  snprintf)(char * __restrict  __str , size_t __size ,
                                               char const   * __restrict  __format 
                                               , ...) ;
extern int fsetattrlist(int  , void * , void * , size_t  , unsigned int  )  __attribute__((__availability__(macosx,introduced=10.6))) ;
static void emit_ld_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) ;
extern int fsetpos(FILE * , fpos_t const   * ) ;
static void sync_reg(jit_op *op , jit_hw_reg *hreg , jit_value virt_reg ) ;
extern char *stpncpy(char *__dst , char const   *__src , size_t __n )  __attribute__((__availability__(macosx,introduced=10.7))) ;
unsigned int _2_init_tigress__opaque_array[30]  = 
  {      258,      691,      3,      308, 
        425,      5,      278,      537, 
        5,      3,      187,      7, 
        33,      12,      57,      358, 
        670,      43,      448,      159, 
        85,      468,      292,      13, 
        143,      243,      80,      498, 
        369};
static void hints_refcount_inc(jit_tree *hints ) ;
struct _2_init_tigress_1_opaque_NodeStruct *_2_init_tigress_1_opaque_list_2  =    (struct _2_init_tigress_1_opaque_NodeStruct *)0;
typedef short __int16_t;
typedef void *rusage_info_t;
extern char __attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tmpnam(3), it is highly recommended that you use mkstemp(3) instead."),
__availability__(swift,unavailable,message="Use mkstemp(3) instead.")))  *tmpnam(char * ) ;
extern int accessx_np(struct accessx_descriptor  const  * , size_t  , int * , uid_t  ) ;
extern int getdomainname(char * , int  ) ;
extern void *( __attribute__((__warn_unused_result__)) aligned_alloc)(size_t __alignment ,
                                                                      size_t __size )  __attribute__((__availability__(watchos,introduced=6.0),
__availability__(tvos,introduced=13.0), __availability__(ios,introduced=13.0), __availability__(macosx,introduced=10.15),
__alloc_size__(2))) ;
typedef uint32_t uint_fast32_t;
static void ob_free(struct output_buf *ob ) ;
struct clockinfo {
   int hz ;
   int tick ;
   int tickadj ;
   int stathz ;
   int profhz ;
};
extern ldiv_t ldiv(long  , long  )  __attribute__((__const__)) ;
extern void arc4random_buf(void *__buf , size_t __nbytes )  __attribute__((__availability__(macosx,introduced=10.7))) ;
__inline static int emit_arguments(struct jit *jit ) ;
typedef unsigned long u_long;
extern void psort_r(void *__base , size_t __nel , size_t __width , void * , int (* _Nonnull  __compar)(void * ,
                                                                                                       void const   * ,
                                                                                                       void const   * ) )  __attribute__((__availability__(macosx,introduced=10.6))) ;
static struct jit_disasm jit_debugging_disasm ;
void bufx_i$nit(void) ;
static int shift_index(int arg ) ;
typedef __mbstate_t __darwin_mbstate_t;
int jit_reg_in_use(jit_op *op , int reg , int fp ) ;
enum __anonenum_X86_Shift_Opcode_820104407 {
    X86_SHLD = 0,
    X86_SHLR = 1,
    X86_ROL = 0,
    X86_ROR = 1,
    X86_RCL = 2,
    X86_RCR = 3,
    X86_SHL = 4,
    X86_SHR = 5,
    X86_SAR = 7,
    X86_NSHIFT = 8
} ;
extern int __attribute__((__deprecated__))  iruserok_sa(void const   * , int  , int  ,
                                                        char const   * , char const   * ) ;
__inline static void emit_push_arg(struct jit *jit , struct jit_out_arg *arg ) ;
typedef __builtin_va_list va_list___0;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlockattr_init(pthread_rwlockattr_t * ) ;
extern int select(int  , fd_set * __restrict   , fd_set * __restrict   , fd_set * __restrict   ,
                  struct timeval * __restrict   )  __asm__("_select$1050")  ;
extern int settimeofday(struct timeval  const  * , struct timezone  const  * ) ;
__inline extern int __istype(__darwin_ct_rune_t _c , unsigned long _f ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_trywrlock(pthread_rwlock_t * )  __asm__("_pthread_rwlock_trywrlock")  ;
static jit_hw_reg *rmap_spill_candidate(struct jit_reg_allocator *al , jit_op *op ,
                                        jit_value virtreg , int *spill , jit_value *reg_to_spill ,
                                        int callee_saved ) ;
typedef union __anonunion_x86_imm_buf_549773081 x86_imm_buf;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setdetachstate(pthread_attr_t * ,
                                                                                                                                       int  ) ;
__inline static void jit_free_op(struct jit_op *op ) ;
__inline static void analyze_function(struct jit *jit , jit_op *first_op , jit_op *last_op ) ;
extern int madvise(void * , size_t  , int  ) ;
extern int fchownat(int  , char const   * , uid_t  , gid_t  , int  )  __attribute__((__availability__(macosx,introduced=10.10))) ;
static jit_tree *jit_tree_search(jit_tree *h , jit_tree_key key ) ;
extern __darwin_ct_rune_t ___toupper(__darwin_ct_rune_t  ) ;
static int rmap_subset(jit_op *op , jit_tree *current , jit_tree *target ) ;
extern void *memccpy(void *__dst , void const   *__src , int __c , size_t __n ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_destroy(pthread_attr_t * ) ;
static int candidate_score(jit_op *op , jit_value virtreg , jit_hw_reg *hreg , int *spill ,
                           jit_value *associated_virtreg ) ;
extern int getdirentriesattr(int  , void * , void * , size_t  , unsigned int * , unsigned int * ,
                             unsigned int * , unsigned int  )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
extern int setrlimit(int  , struct rlimit  const  * )  __asm__("_setrlimit")  ;
extern void *memchr(void const   *__s , int __c , size_t __n ) ;
extern int mkpathat_np(int dfd , char const   *path , mode_t omode )  __attribute__((__availability__(watchos,introduced=3.0),
__availability__(tvos,introduced=10.0), __availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12))) ;
typedef __builtin_va_list __gnuc_va_list;
extern void perror(char const   * )  __attribute__((__cold__)) ;
__inline static void color_flip(jit_tree *h ) ;
void jit_get_reg_name(struct jit_disasm *disasm , char *r , int reg ) ;
extern int execlp(char const   *__file , char const   *__arg0  , ...)  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
extern int flsl(long  )  __attribute__((__availability__(macosx,introduced=10.5))) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_timedwait(pthread_cond_t * __restrict   ,
                                                                                                                                  pthread_mutex_t * __restrict   ,
                                                                                                                                  struct timespec  const  * _Nullable __restrict   )  __asm__("_pthread_cond_timedwait")  ;
extern char *strndup(char const   *__s1 , size_t __n )  __attribute__((__availability__(macosx,introduced=10.7))) ;
extern char *fflagstostr(unsigned long  ) ;
static void emit_sse_fld_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) ;
extern int rand(void)  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
static double x05 ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cancel(pthread_t  )  __asm__("_pthread_cancel")  ;
extern int posix_madvise(void * , size_t  , int  ) ;
extern __darwin_ct_rune_t __tolower(__darwin_ct_rune_t  ) ;
static int check_uninitialized_registers(jit_op *op , char *msg_buf ) ;
void jit_dump_ops(struct jit *jit , int verbosity ) ;
struct rlimit {
   rlim_t rlim_cur ;
   rlim_t rlim_max ;
};
typedef enum jit_amd64_fp_regs AMD64_XMM_Reg_No;
struct jit_set {
   jit_tree *root ;
};
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_create(pthread_t __attribute__((__nullable__))  * _Nonnull __restrict   ,
                                                                                                                          pthread_attr_t const   * _Nullable __restrict   ,
                                                                                                                          void * _Nullable  (* _Nonnull  )(void * _Nullable   ) ,
                                                                                                                          void * _Nullable __restrict   ) ;
void jit_disable_optimization(struct jit *jit , int opt ) ;
__inline static jit_tree *jit_tree_delete(jit_tree *root , jit_tree_key key , int *found ) ;
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_destroy(pthread_cond_t * ) ;
void _cipher$_xtea_decipher(unsigned int block_no , unsigned int num_rounds , unsigned int *v ,
                            unsigned int *key , unsigned int size ) ;
struct __anonstruct_div_t_773697287 {
   int quot ;
   int rem ;
};
static int candidate_score(jit_op *op , jit_value virtreg , jit_hw_reg *hreg , int *spill ,
                           jit_value *associated_virtreg ) 
{ 
  int score ;
  jit_value x ;
  int hw_associated ;
  jit_hw_reg *tmp ;
  int alive ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  jit_tree *hint_node ;
  jit_tree *tmp___3 ;
  int is_to_be_used ;
  struct jit_allocator_hint *hint ;
  int used_in_steps ;
  jit_tree *hint_node___0 ;
  jit_tree *tmp___4 ;
  struct jit_allocator_hint *hint___0 ;

  {
  score = 0;
  score -= (int )hreg->priority;
  tmp = rmap_is_associated(op->regmap, hreg->id, (int )hreg->fp, & x);
  hw_associated = (unsigned long )tmp != (unsigned long )((void *)0);
  alive = 0;
  if (hw_associated) {
    tmp___0 = jit_set_get(op->live_in, (int )x);
    if (tmp___0) {
      tmp___2 = 1;
    } else {
      tmp___1 = jit_set_get(op->live_out, (int )x);
      if (tmp___1) {
        tmp___2 = 1;
      } else {
        tmp___2 = 0;
      }
    }
    alive = tmp___2;
  }
  if (! alive) {
    score += 10000;
  }
  *spill = 0;
  if (hw_associated) {
    score -= 100000;
    *spill = 1;
    *associated_virtreg = x;
    tmp___3 = jit_tree_search(op->allocator_hints, x);
    hint_node = tmp___3;
    is_to_be_used = (unsigned long )hint_node != (unsigned long )((void *)0);
    if (! is_to_be_used) {
      score += 50000;
    } else {
      hint = (struct jit_allocator_hint *)hint_node->value;
      used_in_steps = - (hint->last_pos - op->normalized_pos);
      if (hw_associated) {
        if (used_in_steps == 0) {
          return ((-0x7FFFFFFF-1));
        } else {
          score += used_in_steps * 5;
        }
      } else {
        score += used_in_steps * 5;
      }
    }
  }
  tmp___4 = jit_tree_search(op->allocator_hints, virtreg);
  hint_node___0 = tmp___4;
  if (hint_node___0) {
    hint___0 = (struct jit_allocator_hint *)hint_node___0->value;
    if ((int )hreg->fp == 0) {
      if (hreg->id == 0) {
        score += hint___0->should_be_eax * 5;
      }
    }
    if (hreg->callee_saved) {
      score += (hint___0->should_be_calleesaved - 1) * 15;
    }
  }
  return (score);
}
}
__inline extern int isupper(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 32768UL);
  return (tmp);
}
}
static void emit_funcall(struct jit *jit , struct jit_op *op , int imm ) 
{ 
  int stack_correction ;
  int tmp ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  x86_imm_buf imb ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  int tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  x86_imm_buf imb___0 ;
  int tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  unsigned char *tmp___28 ;
  int tmp___29 ;
  unsigned char *tmp___30 ;
  int tmp___31 ;
  unsigned char *tmp___32 ;
  x86_imm_buf imb___1 ;
  int tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  unsigned char *tmp___40 ;
  x86_imm_buf imb___2 ;
  int tmp___41 ;
  jit_value tmp___42 ;
  int tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  amd64_imm_buf imb___3 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  int tmp___65 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  int tmp___82 ;

  {
  tmp = emit_arguments(jit);
  stack_correction = tmp;
  if (! imm) {
    tmp___0 = rmap_get(op->regmap, op->arg[0]);
    hreg = tmp___0;
    if (hreg) {
      while (1) {
        while (1) {
          if (hreg->id > 7) {
            tmp___1 = 1;
          } else {
            tmp___1 = 0;
          }
          _amd64_rex_bits = (unsigned char )tmp___1;
          if ((int )_amd64_rex_bits != 0) {
            tmp___2 = jit->ip;
            (jit->ip) ++;
            *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        tmp___3 = jit->ip;
        (jit->ip) ++;
        *tmp___3 = (unsigned char)255;
        while (1) {
          while (1) {
            tmp___4 = jit->ip;
            (jit->ip) ++;
            *tmp___4 = (unsigned char )(((3 << 6) | (2 << 3)) | ((hreg->id & 7) & 7));
            break;
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          _amd64_rex_bits___0 = (unsigned char)0;
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___5 = jit->ip;
            (jit->ip) ++;
            *tmp___5 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___6 = jit->ip;
        (jit->ip) ++;
        *tmp___6 = (unsigned char)255;
        while (1) {
          while (1) {
            if (0) {
              tmp___27 = GET_REG_POS(jit, (int )op->arg[0]);
              if (tmp___27 == 0) {
                while (1) {
                  tmp___13 = jit->ip;
                  (jit->ip) ++;
                  *tmp___13 = (unsigned char )((2 << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___14 = jit->ip;
                  (jit->ip) ++;
                  *tmp___14 = (unsigned char )((4 << 3) | 4);
                  break;
                }
              } else {
                tmp___25 = GET_REG_POS(jit, (int )op->arg[0]);
                if (tmp___25 >= -128) {
                  tmp___26 = GET_REG_POS(jit, (int )op->arg[0]);
                  if (tmp___26 <= 127) {
                    while (1) {
                      tmp___15 = jit->ip;
                      (jit->ip) ++;
                      *tmp___15 = (unsigned char )(((1 << 6) | (2 << 3)) | 4);
                      break;
                    }
                    while (1) {
                      tmp___16 = jit->ip;
                      (jit->ip) ++;
                      *tmp___16 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      tmp___17 = GET_REG_POS(jit, (int )op->arg[0]);
                      *(jit->ip) = (unsigned char )(tmp___17 & 255);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L;
                  }
                } else {
                  _L: /* CIL Label */ 
                  while (1) {
                    tmp___18 = jit->ip;
                    (jit->ip) ++;
                    *tmp___18 = (unsigned char )(((2 << 6) | (2 << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___19 = jit->ip;
                    (jit->ip) ++;
                    *tmp___19 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    tmp___20 = GET_REG_POS(jit, (int )op->arg[0]);
                    imb___0.val = tmp___20;
                    tmp___21 = jit->ip;
                    (jit->ip) ++;
                    *tmp___21 = imb___0.b[0];
                    tmp___22 = jit->ip;
                    (jit->ip) ++;
                    *tmp___22 = imb___0.b[1];
                    tmp___23 = jit->ip;
                    (jit->ip) ++;
                    *tmp___23 = imb___0.b[2];
                    tmp___24 = jit->ip;
                    (jit->ip) ++;
                    *tmp___24 = imb___0.b[3];
                    break;
                  }
                }
              }
              break;
            }
            tmp___29 = GET_REG_POS(jit, (int )op->arg[0]);
            if (tmp___29 == 0) {

            }
            tmp___38 = GET_REG_POS(jit, (int )op->arg[0]);
            if (tmp___38 >= -128) {
              tmp___39 = GET_REG_POS(jit, (int )op->arg[0]);
              if (tmp___39 <= 127) {
                while (1) {
                  tmp___30 = jit->ip;
                  (jit->ip) ++;
                  *tmp___30 = (unsigned char )(((1 << 6) | (2 << 3)) | 5);
                  break;
                }
                while (1) {
                  tmp___31 = GET_REG_POS(jit, (int )op->arg[0]);
                  *(jit->ip) = (unsigned char )(tmp___31 & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___0;
              }
            } else {
              _L___0: /* CIL Label */ 
              while (1) {
                tmp___32 = jit->ip;
                (jit->ip) ++;
                *tmp___32 = (unsigned char )(((2 << 6) | (2 << 3)) | 5);
                break;
              }
              while (1) {
                tmp___33 = GET_REG_POS(jit, (int )op->arg[0]);
                imb___1.val = tmp___33;
                tmp___34 = jit->ip;
                (jit->ip) ++;
                *tmp___34 = imb___1.b[0];
                tmp___35 = jit->ip;
                (jit->ip) ++;
                *tmp___35 = imb___1.b[1];
                tmp___36 = jit->ip;
                (jit->ip) ++;
                *tmp___36 = imb___1.b[2];
                tmp___37 = jit->ip;
                (jit->ip) ++;
                *tmp___37 = imb___1.b[3];
                break;
              }
            }
            break;
          }
          break;
        }
        break;
      }
    }
  } else {
    tmp___65 = jit_is_label(jit, (void *)op->arg[0]);
    if (tmp___65) {
      op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
      while (1) {
        while (1) {
          tmp___40 = jit->ip;
          (jit->ip) ++;
          *tmp___40 = (unsigned char)232;
          while (1) {
            tmp___43 = jit_is_label(jit, (void *)op->arg[0]);
            if (tmp___43) {
              tmp___42 = ((jit_value )jit->buf + ((jit_label *)op->arg[0])->pos) - (jit_value )jit->ip;
            } else {
              tmp___42 = op->arg[0];
            }
            imb___2.val = (int )(tmp___42 - 4L);
            tmp___44 = jit->ip;
            (jit->ip) ++;
            *tmp___44 = imb___2.b[0];
            tmp___45 = jit->ip;
            (jit->ip) ++;
            *tmp___45 = imb___2.b[1];
            tmp___46 = jit->ip;
            (jit->ip) ++;
            *tmp___46 = imb___2.b[2];
            tmp___47 = jit->ip;
            (jit->ip) ++;
            *tmp___47 = imb___2.b[3];
            break;
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)9;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___48 = jit->ip;
            (jit->ip) ++;
            *tmp___48 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___49 = jit->ip;
        (jit->ip) ++;
        *tmp___49 = (unsigned char)187;
        while (1) {
          imb___3.val = (size_t )op->arg[0];
          tmp___50 = jit->ip;
          (jit->ip) ++;
          *tmp___50 = imb___3.b[0];
          tmp___51 = jit->ip;
          (jit->ip) ++;
          *tmp___51 = imb___3.b[1];
          tmp___52 = jit->ip;
          (jit->ip) ++;
          *tmp___52 = imb___3.b[2];
          tmp___53 = jit->ip;
          (jit->ip) ++;
          *tmp___53 = imb___3.b[3];
          tmp___54 = jit->ip;
          (jit->ip) ++;
          *tmp___54 = imb___3.b[4];
          tmp___55 = jit->ip;
          (jit->ip) ++;
          *tmp___55 = imb___3.b[5];
          tmp___56 = jit->ip;
          (jit->ip) ++;
          *tmp___56 = imb___3.b[6];
          tmp___57 = jit->ip;
          (jit->ip) ++;
          *tmp___57 = imb___3.b[7];
          break;
        }
        break;
      }
      while (1) {
        while (1) {
          _amd64_rex_bits___2 = (unsigned char)1;
          if ((int )_amd64_rex_bits___2 != 0) {
            tmp___62 = jit->ip;
            (jit->ip) ++;
            *tmp___62 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
          }
          break;
        }
        tmp___63 = jit->ip;
        (jit->ip) ++;
        *tmp___63 = (unsigned char)255;
        while (1) {
          while (1) {
            tmp___64 = jit->ip;
            (jit->ip) ++;
            *tmp___64 = (unsigned char )(((3 << 6) | (2 << 3)) | 3);
            break;
          }
          break;
        }
        break;
      }
    }
  }
  stack_correction += jit->prepared_args.stack_size;
  if (stack_correction) {
    while (1) {
      if (stack_correction >= -128) {
        if (stack_correction <= 127) {
          while (1) {
            _amd64_rex_bits___3 = (unsigned char)8;
            if ((int )_amd64_rex_bits___3 != 0) {
              tmp___66 = jit->ip;
              (jit->ip) ++;
              *tmp___66 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
            }
            break;
          }
          tmp___67 = jit->ip;
          (jit->ip) ++;
          *tmp___67 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___68 = jit->ip;
              (jit->ip) ++;
              *tmp___68 = (unsigned char )((3 << 6) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(stack_correction & 255);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L___1;
        }
      } else {
        _L___1: /* CIL Label */ 
        while (1) {
          _amd64_rex_bits___5 = (unsigned char)8;
          if ((int )_amd64_rex_bits___5 != 0) {
            tmp___75 = jit->ip;
            (jit->ip) ++;
            *tmp___75 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
          }
          break;
        }
        tmp___76 = jit->ip;
        (jit->ip) ++;
        *tmp___76 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___77 = jit->ip;
            (jit->ip) ++;
            *tmp___77 = (unsigned char )((3 << 6) | 4);
            break;
          }
          break;
        }
        while (1) {
          imb___6.val = stack_correction;
          tmp___78 = jit->ip;
          (jit->ip) ++;
          *tmp___78 = imb___6.b[0];
          tmp___79 = jit->ip;
          (jit->ip) ++;
          *tmp___79 = imb___6.b[1];
          tmp___80 = jit->ip;
          (jit->ip) ++;
          *tmp___80 = imb___6.b[2];
          tmp___81 = jit->ip;
          (jit->ip) ++;
          *tmp___81 = imb___6.b[3];
          break;
        }
      }
      break;
    }
  }
  free((void *)jit->prepared_args.args);
  tmp___82 = emit_pop_caller_saved_regs(jit, op);
  jit->push_count -= tmp___82;
  return;
}
}
__inline static void jit_flw_analysis(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  jit_op *first ;
  jit_op *second ;

  {
  jit_flw_initialize(jit);
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while (op) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 536U) {
      first = op;
      while (1) {
        if ((unsigned long )op->next == (unsigned long )((void *)0)) {
          second = op;
          analyze_function(jit, first, second);
          break;
        } else
        if ((unsigned int )((jit_opcode )((int )(op->next)->code & 65528)) == 536U) {
          second = op;
          analyze_function(jit, first, second);
          break;
        }
        op = op->next;
      }
    }
    op = op->next;
  }
  return;
}
}
__inline extern int __wcwidth(__darwin_ct_rune_t _c ) 
{ 
  unsigned int _x ;
  int tmp ;
  int tmp___0 ;

  {
  if (_c == 0) {
    return (0);
  }
  tmp = __maskrune(_c, 3758358528UL);
  _x = (unsigned int )tmp;
  if (((long )_x & 3758096384L) != 0L) {
    return ((int )(((long )_x & 3758096384L) >> 30));
  }
  if (((long )_x & 262144L) != 0L) {
    tmp___0 = 1;
  } else {
    tmp___0 = -1;
  }
  return (tmp___0);
}
}
__inline extern int isdigit(int _c ) 
{ 
  __darwin_ct_rune_t tmp ;

  {
  tmp = __isctype(_c, 1024UL);
  return (tmp);
}
}
__inline static int jit_is_label(struct jit *jit , void *ptr ) 
{ 
  jit_label *lab ;

  {
  lab = jit->labels;
  while (1) {
    if ((unsigned long )lab == (unsigned long )((void *)0)) {
      return (0);
    }
    if ((unsigned long )lab == (unsigned long )ptr) {
      return (1);
    }
    lab = lab->next;
  }
}
}
__inline extern int ( __attribute__((__always_inline__)) __sputc)(int _c , FILE *_p ) 
{ 
  unsigned char *tmp ;
  unsigned char tmp___0 ;
  int tmp___1 ;

  {
  (_p->_w) --;
  if (_p->_w >= 0) {
    tmp = _p->_p;
    (_p->_p) ++;
    tmp___0 = (unsigned char )_c;
    *tmp = tmp___0;
    return ((int )tmp___0);
  } else
  if (_p->_w >= _p->_lbfsize) {
    if ((int )((char )_c) != 10) {
      tmp = _p->_p;
      (_p->_p) ++;
      tmp___0 = (unsigned char )_c;
      *tmp = tmp___0;
      return ((int )tmp___0);
    } else {
      tmp___1 = __swbuf(_c, _p);
      return (tmp___1);
    }
  } else {
    tmp___1 = __swbuf(_c, _p);
    return (tmp___1);
  }
}
}
static void rmap_sync_aux(jit_tree *current , jit_tree *target , jit_op *op , int mode ) 
{ 
  int tmp ;
  int tmp___0 ;
  jit_tree *found ;
  jit_tree *tmp___1 ;
  int i ;
  jit_hw_reg *hreg ;
  long tmp___2 ;

  {
  if ((unsigned long )current == (unsigned long )((void *)0)) {
    return;
  }
  if (mode == 2) {
    tmp = jit_set_get(op->live_out, (int )current->key);
    if (! tmp) {
      goto skip;
    }
  }
  if (mode == 1) {
    tmp___0 = jit_set_get((op->jmp_addr)->live_in, (int )current->key);
    if (! tmp___0) {
      goto skip;
    }
  }
  tmp___1 = jit_tree_search(target, current->key);
  found = tmp___1;
  i = (int )current->key;
  if (! found) {
    goto _L;
  } else
  if ((unsigned long )current->value != (unsigned long )found->value) {
    _L: /* CIL Label */ 
    hreg = (jit_hw_reg *)current->value;
    switch (mode) {
    case 1: 
    unload_reg(op, hreg, (long )i);
    break;
    case 2: 
    load_reg(op, hreg, (long )i);
    break;
    default: 
    tmp___2 = __builtin_expect(1L, 0L);
    if (tmp___2) {
      __assert_rtn("rmap_sync_aux", "./jitter-amd64.c", 4806, "0");
    }
    }
  }
  skip: 
  rmap_sync_aux(current->left, target, op, mode);
  rmap_sync_aux(current->right, target, op, mode);
  return;
}
}
int print_op(FILE *f , struct jit_disasm *disasm , struct jit_op *op , jit_tree *labels ,
             int verbosity ) 
{ 
  struct output_buf *linebuf ;
  struct output_buf *tmp ;
  jit_tree *lab ;
  jit_tree *tmp___0 ;
  long tmp___1 ;
  char *op_name ;
  char *tmp___2 ;
  int tmp___3 ;
  int i ;
  long tmp___4 ;
  int len ;
  size_t tmp___5 ;

  {
  tmp = ob_new();
  linebuf = tmp;
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 456U) {
    goto _L;
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 136U) {
    _L: /* CIL Label */ 
    tmp___0 = jit_tree_search(labels, op->arg[0]);
    lab = tmp___0;
    if (lab) {
      if ((long )lab->value < 0L) {
        tmp___1 = - ((long )lab->value);
      } else {
        tmp___1 = (long )lab->value;
      }
      ob_printf(linebuf, (char const   *)disasm->label_template, tmp___1);
      ob_printf(linebuf, ":");
    }
    goto print;
  }
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 152U) {
    print_comment(linebuf, op);
    goto print;
  }
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 360U) {
    ob_append(linebuf, disasm->indent_template);
    ob_append(linebuf, (char *)".trace");
    goto print;
  }
  tmp___2 = jit_get_op_name(op);
  op_name = tmp___2;
  if ((int )*(op_name + 0) == 46) {
    if (verbosity & 256) {
      tmp___3 = print_load_op(disasm, linebuf, op);
      if (tmp___3) {
        goto print;
      }
    }
  }
  ob_append(linebuf, disasm->indent_template);
  if ((int )*(op_name + 0) == 46) {
    switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
    case 760U: 
    case 352U: 
    ob_printf(linebuf, "%s ", op_name);
    ob_pad(linebuf, 13);
    ob_printf(linebuf, (char const   *)disasm->generic_value_template, op->arg[0]);
    goto print;
    case 880U: 
    ob_printf(linebuf, "%s ", op_name);
    ob_pad(linebuf, 13);
    i = 0;
    while ((jit_value )i < op->arg[0]) {
      ob_printf(linebuf, (char const   *)disasm->generic_value_template, (int )*((unsigned char *)op->addendum + i));
      ob_printf(linebuf, " ");
      i ++;
    }
    goto print;
    case 488U: 
    case 520U: 
    ob_printf(linebuf, "%s ", op_name);
    ob_pad(linebuf, 13);
    print_addr(disasm, linebuf, labels, op, 0);
    goto print;
    default: 
    goto print;
    }
  }
  print_full_op_name(linebuf, op);
  ob_pad(linebuf, 12);
  if ((int )op->arg_size == 1) {
    ob_append(linebuf, (char *)" (byte)");
  }
  if ((int )op->arg_size == 2) {
    ob_append(linebuf, (char *)" (word)");
  }
  if ((int )op->arg_size == 4) {
    ob_append(linebuf, (char *)" (dword)");
  }
  if ((int )op->arg_size == 8) {
    ob_append(linebuf, (char *)" (qword)");
  }
  switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
  case 776U: 
  break;
  case 320U: 
  print_str(linebuf, (char *)op->arg[0]);
  if (! ((int )op->code & 2)) {
    ob_append(linebuf, (char *)", ");
    print_arg(disasm, linebuf, op, 2);
  }
  break;
  case 56U: 
  case 832U: 
  ob_append(linebuf, (char *)" ");
  print_arg(disasm, linebuf, op, 1);
  ob_append(linebuf, (char *)", ");
  print_addr(disasm, linebuf, labels, op, 1);
  break;
  case 784U: 
  switch (op->arg[0]) {
  case 0L: 
  ob_append(linebuf, (char *)" integer");
  break;
  case 1L: 
  ob_append(linebuf, (char *)" uns. integer");
  break;
  case 2L: 
  ob_append(linebuf, (char *)" float");
  break;
  case 3L: 
  ob_append(linebuf, (char *)" ptr");
  break;
  default: 
  tmp___4 = __builtin_expect(1L, 0L);
  if (tmp___4) {
    __assert_rtn("print_op", "./jitter-amd64.c", 3877, "0");
  }
  }
  ob_append(linebuf, (char *)", ");
  print_arg(disasm, linebuf, op, 2);
  break;
  default: 
  print_args(disasm, linebuf, op, labels);
  }
  print: 
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"%s", linebuf->buf);
  tmp___5 = strlen((char const   *)linebuf->buf);
  len = (int )tmp___5;
  ob_free(linebuf);
  return (len);
}
}
__inline static void jit_set_remove(jit_set *s , int value ) 
{ 


  {
  s->root = jit_tree_delete(s->root, (jit_tree_key )value, (int *)((void *)0));
  return;
}
}
__inline static __uint64_t _OSSwapInt64(__uint64_t _data ) 
{ 
  long tmp ;

  {
  tmp = __builtin_bswap64((long )_data);
  return ((__uint64_t )tmp);
}
}
static void print_regs(jit_tree_key reg , jit_tree_value v , void *thunk ) 
{ 
  char buf[32] ;
  unsigned long tmp ;
  unsigned long tmp___0 ;

  {
  if (reg == (jit_tree_key )(2 << 1)) {
    return;
  }
  jit_get_reg_name(& jit_debugging_disasm, buf, (int )reg);
  tmp = __builtin_object_size(thunk, 1);
  __builtin___strcat_chk((char *)thunk, " ", tmp);
  tmp___0 = __builtin_object_size(thunk, 1);
  __builtin___strcat_chk((char *)thunk, (char const   *)(buf), tmp___0);
  return;
}
}
jit_op *jit_data_bytes(struct jit *jit , jit_value count , unsigned char *data ) 
{ 
  jit_op *op ;
  struct jit_op *tmp ;
  unsigned long tmp___0 ;

  {
  tmp = jit_add_op(jit, (unsigned short)882, (unsigned char)2, count, (jit_value )0,
                   (jit_value )0, (unsigned char)0, (struct jit_debug_info *)((void *)0));
  op = tmp;
  op->addendum = malloc((size_t )count);
  tmp___0 = __builtin_object_size(op->addendum, 0);
  __builtin___memcpy_chk(op->addendum, (void const   *)data, (unsigned long )count,
                         tmp___0);
  return (op);
}
}
__inline extern int ( __attribute__((__always_inline__)) __darwin_fd_isset)(int _fd ,
                                                                            struct fd_set  const  *_p ) 
{ 
  int tmp ;

  {
  tmp = __darwin_check_fd_set(_fd, (void const   *)_p);
  if (tmp) {
    return (_p->fds_bits[(unsigned long )_fd / (sizeof(__int32_t ) * 8UL)] & (__int32_t )(1UL << (unsigned long )_fd % (sizeof(__int32_t ) * 8UL)));
  }
  return (0);
}
}
static void emit_ld_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  long tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  x86_imm_buf imb ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  long tmp___19 ;
  unsigned char *tmp___20 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  long tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___64 ;
  int tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  long tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  long tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___88 ;
  int tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___109 ;
  int tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  long tmp___115 ;
  unsigned char *tmp___116 ;
  unsigned char *tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char *tmp___119 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___122 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  unsigned char *tmp___125 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char *tmp___128 ;
  x86_imm_buf imb___10 ;
  unsigned char *tmp___129 ;
  unsigned char *tmp___130 ;
  unsigned char *tmp___131 ;
  unsigned char *tmp___132 ;
  unsigned char *tmp___133 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___134 ;
  int tmp___135 ;
  int tmp___136 ;
  unsigned char *tmp___137 ;
  unsigned char *tmp___138 ;
  unsigned char *tmp___139 ;
  long tmp___140 ;
  unsigned char *tmp___141 ;
  x86_imm_buf imb___11 ;
  unsigned char *tmp___142 ;
  unsigned char *tmp___143 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  unsigned char *tmp___146 ;
  unsigned char *tmp___147 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;
  unsigned char *tmp___150 ;
  unsigned char *tmp___151 ;
  x86_imm_buf imb___12 ;
  unsigned char *tmp___152 ;
  unsigned char *tmp___153 ;
  unsigned char *tmp___154 ;
  unsigned char *tmp___155 ;
  unsigned char *tmp___156 ;
  unsigned char *tmp___157 ;
  unsigned char *tmp___158 ;
  x86_imm_buf imb___13 ;
  unsigned char *tmp___159 ;
  unsigned char *tmp___160 ;
  unsigned char *tmp___161 ;
  unsigned char *tmp___162 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___163 ;
  int tmp___164 ;
  unsigned char *tmp___165 ;
  unsigned char *tmp___166 ;
  unsigned char *tmp___167 ;
  unsigned char *tmp___168 ;
  long tmp___169 ;
  unsigned char *tmp___170 ;
  unsigned char *tmp___171 ;
  unsigned char *tmp___172 ;
  unsigned char *tmp___173 ;
  unsigned char *tmp___174 ;
  unsigned char *tmp___175 ;
  x86_imm_buf imb___14 ;
  unsigned char *tmp___176 ;
  unsigned char *tmp___177 ;
  unsigned char *tmp___178 ;
  unsigned char *tmp___179 ;
  unsigned char *tmp___180 ;
  unsigned char *tmp___181 ;
  unsigned char *tmp___182 ;
  x86_imm_buf imb___15 ;
  unsigned char *tmp___183 ;
  unsigned char *tmp___184 ;
  unsigned char *tmp___185 ;
  unsigned char *tmp___186 ;
  long tmp___187 ;

  {
  if ((unsigned long )op->arg_size == sizeof(void *)) {
    if ((int )op->code & 2) {
      while (1) {
        if ((int )op->arg_size == 2) {
          tmp = jit->ip;
          (jit->ip) ++;
          *tmp = (unsigned char)102;
        }
        while (1) {
          if ((int )op->arg_size > 4) {
            tmp___0 = 8;
          } else {
            tmp___0 = 0;
          }
          if (a1 > 7L) {
            tmp___1 = 4;
          } else {
            tmp___1 = 0;
          }
          _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
          if ((int )_amd64_rex_bits != 0) {
            tmp___2 = jit->ip;
            (jit->ip) ++;
            *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
          } else
          if ((int )op->arg_size == 1) {
            tmp___2 = jit->ip;
            (jit->ip) ++;
            *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        switch ((int )op->arg_size) {
        case 1: 
        tmp___3 = jit->ip;
        (jit->ip) ++;
        *tmp___3 = (unsigned char)138;
        break;
        case 8: 
        case 4: 
        case 2: 
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char)139;
        break;
        default: 
        tmp___5 = __builtin_expect(1L, 0L);
        if (tmp___5) {
          __assert_rtn("emit_ld_op", "./jitter-amd64.c", 2884, "0");
        }
        }
        while (1) {
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = (unsigned char )(((a1 & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___7 = jit->ip;
          (jit->ip) ++;
          *tmp___7 = (unsigned char )((4 << 3) | 5);
          break;
        }
        while (1) {
          imb.val = (int )a2;
          tmp___8 = jit->ip;
          (jit->ip) ++;
          *tmp___8 = imb.b[0];
          tmp___9 = jit->ip;
          (jit->ip) ++;
          *tmp___9 = imb.b[1];
          tmp___10 = jit->ip;
          (jit->ip) ++;
          *tmp___10 = imb.b[2];
          tmp___11 = jit->ip;
          (jit->ip) ++;
          *tmp___11 = imb.b[3];
          break;
        }
        break;
      }
    } else {
      while (1) {
        if ((int )op->arg_size == 2) {
          tmp___12 = jit->ip;
          (jit->ip) ++;
          *tmp___12 = (unsigned char)102;
        }
        while (1) {
          if ((int )op->arg_size > 4) {
            tmp___13 = 8;
          } else {
            tmp___13 = 0;
          }
          if (a1 > 7L) {
            tmp___14 = 4;
          } else {
            tmp___14 = 0;
          }
          if (a2 > 7L) {
            tmp___15 = 1;
          } else {
            tmp___15 = 0;
          }
          _amd64_rex_bits___0 = (unsigned char )((tmp___13 | tmp___14) | tmp___15);
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___16 = jit->ip;
            (jit->ip) ++;
            *tmp___16 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          } else
          if ((int )op->arg_size == 1) {
            tmp___16 = jit->ip;
            (jit->ip) ++;
            *tmp___16 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        switch ((int )op->arg_size) {
        case 1: 
        tmp___17 = jit->ip;
        (jit->ip) ++;
        *tmp___17 = (unsigned char)138;
        break;
        case 8: 
        case 4: 
        case 2: 
        tmp___18 = jit->ip;
        (jit->ip) ++;
        *tmp___18 = (unsigned char)139;
        break;
        default: 
        tmp___19 = __builtin_expect(1L, 0L);
        if (tmp___19) {
          __assert_rtn("emit_ld_op", "./jitter-amd64.c", 2885, "0");
        }
        }
        while (1) {
          if (a2 == 16L) {
            while (1) {
              tmp___20 = jit->ip;
              (jit->ip) ++;
              *tmp___20 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb___0.val = 0;
              tmp___21 = jit->ip;
              (jit->ip) ++;
              *tmp___21 = imb___0.b[0];
              tmp___22 = jit->ip;
              (jit->ip) ++;
              *tmp___22 = imb___0.b[1];
              tmp___23 = jit->ip;
              (jit->ip) ++;
              *tmp___23 = imb___0.b[2];
              tmp___24 = jit->ip;
              (jit->ip) ++;
              *tmp___24 = imb___0.b[3];
              break;
            }
          } else {
            while (1) {
              if ((a2 & 7L) == 4L) {
                while (1) {
                  tmp___25 = jit->ip;
                  (jit->ip) ++;
                  *tmp___25 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                  break;
                }
                while (1) {
                  tmp___26 = jit->ip;
                  (jit->ip) ++;
                  *tmp___26 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                break;
              }
              if ((a2 & 7L) != 5L) {
                while (1) {
                  tmp___35 = jit->ip;
                  (jit->ip) ++;
                  *tmp___35 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                  break;
                }
                break;
              }
              while (1) {
                tmp___36 = jit->ip;
                (jit->ip) ++;
                *tmp___36 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
              break;
            }
          }
          break;
        }
        break;
      }
    }
    return;
  }
  switch ((int )op->code) {
  case 162: 
  while (1) {
    if ((int )op->arg_size == 4) {
      while (1) {
        while (1) {
          if (a1 > 7L) {
            tmp___42 = 4;
          } else {
            tmp___42 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )(8 | tmp___42);
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___43 = jit->ip;
            (jit->ip) ++;
            *tmp___43 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___44 = jit->ip;
        (jit->ip) ++;
        *tmp___44 = (unsigned char)99;
        while (1) {
          tmp___45 = jit->ip;
          (jit->ip) ++;
          *tmp___45 = (unsigned char )(((a1 & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___46 = jit->ip;
          (jit->ip) ++;
          *tmp___46 = (unsigned char )((4 << 3) | 5);
          break;
        }
        while (1) {
          imb___3.val = (int )a2;
          tmp___47 = jit->ip;
          (jit->ip) ++;
          *tmp___47 = imb___3.b[0];
          tmp___48 = jit->ip;
          (jit->ip) ++;
          *tmp___48 = imb___3.b[1];
          tmp___49 = jit->ip;
          (jit->ip) ++;
          *tmp___49 = imb___3.b[2];
          tmp___50 = jit->ip;
          (jit->ip) ++;
          *tmp___50 = imb___3.b[3];
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      if (a1 > 7L) {
        tmp___51 = 4;
      } else {
        tmp___51 = 0;
      }
      _amd64_rex_bits___2 = (unsigned char )(8 | tmp___51);
      if ((int )_amd64_rex_bits___2 != 0) {
        tmp___52 = jit->ip;
        (jit->ip) ++;
        *tmp___52 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
      }
      break;
    }
    tmp___53 = jit->ip;
    (jit->ip) ++;
    *tmp___53 = (unsigned char)15;
    switch ((int )op->arg_size) {
    case 1: 
    tmp___54 = jit->ip;
    (jit->ip) ++;
    *tmp___54 = (unsigned char)190;
    break;
    case 2: 
    tmp___55 = jit->ip;
    (jit->ip) ++;
    *tmp___55 = (unsigned char)191;
    break;
    default: 
    tmp___56 = __builtin_expect(1L, 0L);
    if (tmp___56) {
      __assert_rtn("emit_ld_op", "./jitter-amd64.c", 2890, "0");
    }
    }
    while (1) {
      tmp___57 = jit->ip;
      (jit->ip) ++;
      *tmp___57 = (unsigned char )(((a1 & 7L) << 3) | 4L);
      break;
    }
    while (1) {
      tmp___58 = jit->ip;
      (jit->ip) ++;
      *tmp___58 = (unsigned char )((4 << 3) | 5);
      break;
    }
    while (1) {
      imb___4.val = (int )a2;
      tmp___59 = jit->ip;
      (jit->ip) ++;
      *tmp___59 = imb___4.b[0];
      tmp___60 = jit->ip;
      (jit->ip) ++;
      *tmp___60 = imb___4.b[1];
      tmp___61 = jit->ip;
      (jit->ip) ++;
      *tmp___61 = imb___4.b[2];
      tmp___62 = jit->ip;
      (jit->ip) ++;
      *tmp___62 = imb___4.b[3];
      break;
    }
    break;
  }
  break;
  case 166: 
  while (1) {
    if ((int )op->arg_size == 8) {
      goto _L;
    } else
    if ((int )op->arg_size == 4) {
      _L: /* CIL Label */ 
      while (1) {
        if ((int )op->arg_size == 2) {
          tmp___63 = jit->ip;
          (jit->ip) ++;
          *tmp___63 = (unsigned char)102;
        }
        while (1) {
          if ((int )op->arg_size > 4) {
            tmp___64 = 8;
          } else {
            tmp___64 = 0;
          }
          if (a1 > 7L) {
            tmp___65 = 4;
          } else {
            tmp___65 = 0;
          }
          _amd64_rex_bits___3 = (unsigned char )(tmp___64 | tmp___65);
          if ((int )_amd64_rex_bits___3 != 0) {
            tmp___66 = jit->ip;
            (jit->ip) ++;
            *tmp___66 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          } else
          if ((int )op->arg_size == 1) {
            tmp___66 = jit->ip;
            (jit->ip) ++;
            *tmp___66 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          }
          break;
        }
        switch ((int )op->arg_size) {
        case 1: 
        tmp___67 = jit->ip;
        (jit->ip) ++;
        *tmp___67 = (unsigned char)138;
        break;
        case 8: 
        case 4: 
        case 2: 
        tmp___68 = jit->ip;
        (jit->ip) ++;
        *tmp___68 = (unsigned char)139;
        break;
        default: 
        tmp___69 = __builtin_expect(1L, 0L);
        if (tmp___69) {
          __assert_rtn("emit_ld_op", "./jitter-amd64.c", 2891, "0");
        }
        }
        while (1) {
          tmp___70 = jit->ip;
          (jit->ip) ++;
          *tmp___70 = (unsigned char )(((a1 & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___71 = jit->ip;
          (jit->ip) ++;
          *tmp___71 = (unsigned char )((4 << 3) | 5);
          break;
        }
        while (1) {
          imb___5.val = (int )a2;
          tmp___72 = jit->ip;
          (jit->ip) ++;
          *tmp___72 = imb___5.b[0];
          tmp___73 = jit->ip;
          (jit->ip) ++;
          *tmp___73 = imb___5.b[1];
          tmp___74 = jit->ip;
          (jit->ip) ++;
          *tmp___74 = imb___5.b[2];
          tmp___75 = jit->ip;
          (jit->ip) ++;
          *tmp___75 = imb___5.b[3];
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      if (a1 > 7L) {
        tmp___76 = 4;
      } else {
        tmp___76 = 0;
      }
      _amd64_rex_bits___4 = (unsigned char )(8 | tmp___76);
      if ((int )_amd64_rex_bits___4 != 0) {
        tmp___77 = jit->ip;
        (jit->ip) ++;
        *tmp___77 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
      }
      break;
    }
    tmp___78 = jit->ip;
    (jit->ip) ++;
    *tmp___78 = (unsigned char)15;
    switch ((int )op->arg_size) {
    case 1: 
    tmp___79 = jit->ip;
    (jit->ip) ++;
    *tmp___79 = (unsigned char)182;
    break;
    case 2: 
    tmp___80 = jit->ip;
    (jit->ip) ++;
    *tmp___80 = (unsigned char)183;
    break;
    default: 
    tmp___81 = __builtin_expect(1L, 0L);
    if (tmp___81) {
      __assert_rtn("emit_ld_op", "./jitter-amd64.c", 2891, "0");
    }
    }
    while (1) {
      tmp___82 = jit->ip;
      (jit->ip) ++;
      *tmp___82 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
      break;
    }
    while (1) {
      tmp___83 = jit->ip;
      (jit->ip) ++;
      *tmp___83 = (unsigned char )((4 << 3) | 5);
      break;
    }
    while (1) {
      imb___6.val = (int )a2;
      tmp___84 = jit->ip;
      (jit->ip) ++;
      *tmp___84 = imb___6.b[0];
      tmp___85 = jit->ip;
      (jit->ip) ++;
      *tmp___85 = imb___6.b[1];
      tmp___86 = jit->ip;
      (jit->ip) ++;
      *tmp___86 = imb___6.b[2];
      tmp___87 = jit->ip;
      (jit->ip) ++;
      *tmp___87 = imb___6.b[3];
      break;
    }
    break;
  }
  break;
  case 161: 
  while (1) {
    if ((int )op->arg_size == 4) {
      while (1) {
        while (1) {
          if (a1 > 7L) {
            tmp___88 = 4;
          } else {
            tmp___88 = 0;
          }
          if (a2 > 7L) {
            tmp___89 = 1;
          } else {
            tmp___89 = 0;
          }
          _amd64_rex_bits___5 = (unsigned char )((8 | tmp___88) | tmp___89);
          if ((int )_amd64_rex_bits___5 != 0) {
            tmp___90 = jit->ip;
            (jit->ip) ++;
            *tmp___90 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
          }
          break;
        }
        tmp___91 = jit->ip;
        (jit->ip) ++;
        *tmp___91 = (unsigned char)99;
        while (1) {
          if ((a2 & 7L) == 4L) {
            while (1) {
              tmp___92 = jit->ip;
              (jit->ip) ++;
              *tmp___92 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___93 = jit->ip;
              (jit->ip) ++;
              *tmp___93 = (unsigned char )((4 << 3) | 4);
              break;
            }
            break;
          }
          if ((a2 & 7L) != 5L) {
            while (1) {
              tmp___102 = jit->ip;
              (jit->ip) ++;
              *tmp___102 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
              break;
            }
            break;
          }
          while (1) {
            tmp___103 = jit->ip;
            (jit->ip) ++;
            *tmp___103 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)0;
            (jit->ip) ++;
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      if (a1 > 7L) {
        tmp___109 = 4;
      } else {
        tmp___109 = 0;
      }
      if (a2 > 7L) {
        tmp___110 = 1;
      } else {
        tmp___110 = 0;
      }
      _amd64_rex_bits___6 = (unsigned char )((8 | tmp___109) | tmp___110);
      if ((int )_amd64_rex_bits___6 != 0) {
        tmp___111 = jit->ip;
        (jit->ip) ++;
        *tmp___111 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
      }
      break;
    }
    tmp___112 = jit->ip;
    (jit->ip) ++;
    *tmp___112 = (unsigned char)15;
    switch ((int )op->arg_size) {
    case 1: 
    tmp___113 = jit->ip;
    (jit->ip) ++;
    *tmp___113 = (unsigned char)190;
    break;
    case 2: 
    tmp___114 = jit->ip;
    (jit->ip) ++;
    *tmp___114 = (unsigned char)191;
    break;
    default: 
    tmp___115 = __builtin_expect(1L, 0L);
    if (tmp___115) {
      __assert_rtn("emit_ld_op", "./jitter-amd64.c", 2892, "0");
    }
    }
    while (1) {
      if ((a2 & 7L) == 4L) {
        while (1) {
          tmp___116 = jit->ip;
          (jit->ip) ++;
          *tmp___116 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___117 = jit->ip;
          (jit->ip) ++;
          *tmp___117 = (unsigned char )((4 << 3) | 4);
          break;
        }
        break;
      }
      if ((a2 & 7L) != 5L) {
        while (1) {
          tmp___126 = jit->ip;
          (jit->ip) ++;
          *tmp___126 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
          break;
        }
        break;
      }
      while (1) {
        tmp___127 = jit->ip;
        (jit->ip) ++;
        *tmp___127 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
        break;
      }
      while (1) {
        *(jit->ip) = (unsigned char)0;
        (jit->ip) ++;
        break;
      }
      break;
    }
    break;
  }
  break;
  case 165: 
  while (1) {
    if ((int )op->arg_size == 8) {
      goto _L___0;
    } else
    if ((int )op->arg_size == 4) {
      _L___0: /* CIL Label */ 
      while (1) {
        if ((int )op->arg_size == 2) {
          tmp___133 = jit->ip;
          (jit->ip) ++;
          *tmp___133 = (unsigned char)102;
        }
        while (1) {
          if ((int )op->arg_size > 4) {
            tmp___134 = 8;
          } else {
            tmp___134 = 0;
          }
          if (a1 > 7L) {
            tmp___135 = 4;
          } else {
            tmp___135 = 0;
          }
          if (a2 > 7L) {
            tmp___136 = 1;
          } else {
            tmp___136 = 0;
          }
          _amd64_rex_bits___7 = (unsigned char )((tmp___134 | tmp___135) | tmp___136);
          if ((int )_amd64_rex_bits___7 != 0) {
            tmp___137 = jit->ip;
            (jit->ip) ++;
            *tmp___137 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
          } else
          if ((int )op->arg_size == 1) {
            tmp___137 = jit->ip;
            (jit->ip) ++;
            *tmp___137 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
          }
          break;
        }
        switch ((int )op->arg_size) {
        case 1: 
        tmp___138 = jit->ip;
        (jit->ip) ++;
        *tmp___138 = (unsigned char)138;
        break;
        case 8: 
        case 4: 
        case 2: 
        tmp___139 = jit->ip;
        (jit->ip) ++;
        *tmp___139 = (unsigned char)139;
        break;
        default: 
        tmp___140 = __builtin_expect(1L, 0L);
        if (tmp___140) {
          __assert_rtn("emit_ld_op", "./jitter-amd64.c", 2893, "0");
        }
        }
        while (1) {
          if (a2 == 16L) {
            while (1) {
              tmp___141 = jit->ip;
              (jit->ip) ++;
              *tmp___141 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb___11.val = 0;
              tmp___142 = jit->ip;
              (jit->ip) ++;
              *tmp___142 = imb___11.b[0];
              tmp___143 = jit->ip;
              (jit->ip) ++;
              *tmp___143 = imb___11.b[1];
              tmp___144 = jit->ip;
              (jit->ip) ++;
              *tmp___144 = imb___11.b[2];
              tmp___145 = jit->ip;
              (jit->ip) ++;
              *tmp___145 = imb___11.b[3];
              break;
            }
          } else {
            while (1) {
              if ((a2 & 7L) == 4L) {
                while (1) {
                  tmp___146 = jit->ip;
                  (jit->ip) ++;
                  *tmp___146 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                  break;
                }
                while (1) {
                  tmp___147 = jit->ip;
                  (jit->ip) ++;
                  *tmp___147 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                break;
              }
              if ((a2 & 7L) != 5L) {
                while (1) {
                  tmp___156 = jit->ip;
                  (jit->ip) ++;
                  *tmp___156 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                  break;
                }
                break;
              }
              while (1) {
                tmp___157 = jit->ip;
                (jit->ip) ++;
                *tmp___157 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      if (a1 > 7L) {
        tmp___163 = 4;
      } else {
        tmp___163 = 0;
      }
      if (a2 > 7L) {
        tmp___164 = 1;
      } else {
        tmp___164 = 0;
      }
      _amd64_rex_bits___8 = (unsigned char )((8 | tmp___163) | tmp___164);
      if ((int )_amd64_rex_bits___8 != 0) {
        tmp___165 = jit->ip;
        (jit->ip) ++;
        *tmp___165 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
      }
      break;
    }
    tmp___166 = jit->ip;
    (jit->ip) ++;
    *tmp___166 = (unsigned char)15;
    switch ((int )op->arg_size) {
    case 1: 
    tmp___167 = jit->ip;
    (jit->ip) ++;
    *tmp___167 = (unsigned char)182;
    break;
    case 2: 
    tmp___168 = jit->ip;
    (jit->ip) ++;
    *tmp___168 = (unsigned char)183;
    break;
    default: 
    tmp___169 = __builtin_expect(1L, 0L);
    if (tmp___169) {
      __assert_rtn("emit_ld_op", "./jitter-amd64.c", 2893, "0");
    }
    }
    while (1) {
      if ((a2 & 7L) == 4L) {
        while (1) {
          tmp___170 = jit->ip;
          (jit->ip) ++;
          *tmp___170 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___171 = jit->ip;
          (jit->ip) ++;
          *tmp___171 = (unsigned char )((4 << 3) | 4);
          break;
        }
        break;
      }
      if ((a2 & 7L) != 5L) {
        while (1) {
          tmp___180 = jit->ip;
          (jit->ip) ++;
          *tmp___180 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
          break;
        }
        break;
      }
      while (1) {
        tmp___181 = jit->ip;
        (jit->ip) ++;
        *tmp___181 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
        break;
      }
      while (1) {
        *(jit->ip) = (unsigned char)0;
        (jit->ip) ++;
        break;
      }
      break;
    }
    break;
  }
  break;
  default: 
  tmp___187 = __builtin_expect(1L, 0L);
  if (tmp___187) {
    __assert_rtn("emit_ld_op", "./jitter-amd64.c", 2894, "0");
  }
  }
  return;
}
}
__inline static struct jit_func_info *jit_current_func_info(struct jit *jit ) 
{ 


  {
  return ((struct jit_func_info *)(jit->current_func)->arg[1]);
}
}
__inline static jit_tree_key node_min(jit_tree *x ) 
{ 
  jit_tree_key tmp ;

  {
  if ((unsigned long )x->left == (unsigned long )((void *)0)) {
    return (x->key);
  } else {
    tmp = node_min(x->left);
    return (tmp);
  }
}
}
__inline static void analyze_function(struct jit *jit , jit_op *first_op , jit_op *last_op ) 
{ 
  int changed ;
  struct code_refs_cache code_refs ;
  struct jit_func_info *func_info ;
  jit_op *op ;
  int tmp ;

  {
  code_refs.size = -1;
  code_refs.ops = (jit_op **)((void *)0);
  func_info = (struct jit_func_info *)first_op->arg[1];
  while (1) {
    changed = 0;
    op = last_op;
    while (1) {
      tmp = flw_analyze_op(jit, op, func_info, changed, & code_refs);
      changed |= tmp;
      if ((unsigned long )op == (unsigned long )first_op) {
        break;
      }
      op = op->prev;
    }
    if (! changed) {
      break;
    }
  }
  if (code_refs.ops) {
    free((void *)code_refs.ops);
  }
  return;
}
}
void jit_debugging_disasm_i$nit(void) 
{ 


  {
  jit_debugging_disasm.indent_template = (char *)"    ";
  jit_debugging_disasm.reg_template = (char *)"r%i";
  jit_debugging_disasm.freg_template = (char *)"fr%i";
  jit_debugging_disasm.arg_template = (char *)"arg%i";
  jit_debugging_disasm.farg_template = (char *)"farg%i";
  jit_debugging_disasm.reg_fp_template = (char *)"fp";
  jit_debugging_disasm.reg_out_template = (char *)"out";
  jit_debugging_disasm.reg_imm_template = (char *)"imm";
  jit_debugging_disasm.reg_fimm_template = (char *)"fimm";
  jit_debugging_disasm.reg_unknown_template = (char *)"(unknown reg.)";
  jit_debugging_disasm.label_template = (char *)"<label>";
  jit_debugging_disasm.label_forward_template = (char *)"<label>";
  jit_debugging_disasm.generic_addr_template = (char *)"<addr: 0x%lx>";
  jit_debugging_disasm.generic_value_template = (char *)"0x%lx";
}
}
__inline static void emit_push_arg(struct jit *jit , struct jit_out_arg *arg ) 
{ 
  int sreg ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  int tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  x86_imm_buf imb ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  unsigned char *tmp___16 ;
  int tmp___17 ;
  unsigned char *tmp___18 ;
  int tmp___19 ;
  unsigned char *tmp___20 ;
  x86_imm_buf imb___0 ;
  int tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  int tmp___31 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  amd64_imm_buf imb___1 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;

  {
  if (arg->isreg) {
    tmp___31 = is_spilled(arg->value.generic, jit->prepared_args.op, & sreg);
    if (tmp___31) {
      while (1) {
        while (1) {
          _amd64_rex_bits = (unsigned char)0;
          if ((int )_amd64_rex_bits != 0) {
            tmp = jit->ip;
            (jit->ip) ++;
            *tmp = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        tmp___0 = jit->ip;
        (jit->ip) ++;
        *tmp___0 = (unsigned char)255;
        while (1) {
          if (0) {
            tmp___15 = GET_REG_POS(jit, (int )arg->value.generic);
            if (tmp___15 == 0) {
              while (1) {
                tmp___1 = jit->ip;
                (jit->ip) ++;
                *tmp___1 = (unsigned char )((6 << 3) | 4);
                break;
              }
              while (1) {
                tmp___2 = jit->ip;
                (jit->ip) ++;
                *tmp___2 = (unsigned char )((4 << 3) | 4);
                break;
              }
            } else {
              tmp___13 = GET_REG_POS(jit, (int )arg->value.generic);
              if (tmp___13 >= -128) {
                tmp___14 = GET_REG_POS(jit, (int )arg->value.generic);
                if (tmp___14 <= 127) {
                  while (1) {
                    tmp___3 = jit->ip;
                    (jit->ip) ++;
                    *tmp___3 = (unsigned char )(((1 << 6) | (6 << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___4 = jit->ip;
                    (jit->ip) ++;
                    *tmp___4 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    tmp___5 = GET_REG_POS(jit, (int )arg->value.generic);
                    *(jit->ip) = (unsigned char )(tmp___5 & 255);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L;
                }
              } else {
                _L: /* CIL Label */ 
                while (1) {
                  tmp___6 = jit->ip;
                  (jit->ip) ++;
                  *tmp___6 = (unsigned char )(((2 << 6) | (6 << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___7 = jit->ip;
                  (jit->ip) ++;
                  *tmp___7 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___8 = GET_REG_POS(jit, (int )arg->value.generic);
                  imb.val = tmp___8;
                  tmp___9 = jit->ip;
                  (jit->ip) ++;
                  *tmp___9 = imb.b[0];
                  tmp___10 = jit->ip;
                  (jit->ip) ++;
                  *tmp___10 = imb.b[1];
                  tmp___11 = jit->ip;
                  (jit->ip) ++;
                  *tmp___11 = imb.b[2];
                  tmp___12 = jit->ip;
                  (jit->ip) ++;
                  *tmp___12 = imb.b[3];
                  break;
                }
              }
            }
            break;
          }
          tmp___17 = GET_REG_POS(jit, (int )arg->value.generic);
          if (tmp___17 == 0) {

          }
          tmp___26 = GET_REG_POS(jit, (int )arg->value.generic);
          if (tmp___26 >= -128) {
            tmp___27 = GET_REG_POS(jit, (int )arg->value.generic);
            if (tmp___27 <= 127) {
              while (1) {
                tmp___18 = jit->ip;
                (jit->ip) ++;
                *tmp___18 = (unsigned char )(((1 << 6) | (6 << 3)) | 5);
                break;
              }
              while (1) {
                tmp___19 = GET_REG_POS(jit, (int )arg->value.generic);
                *(jit->ip) = (unsigned char )(tmp___19 & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___0;
            }
          } else {
            _L___0: /* CIL Label */ 
            while (1) {
              tmp___20 = jit->ip;
              (jit->ip) ++;
              *tmp___20 = (unsigned char )(((2 << 6) | (6 << 3)) | 5);
              break;
            }
            while (1) {
              tmp___21 = GET_REG_POS(jit, (int )arg->value.generic);
              imb___0.val = tmp___21;
              tmp___22 = jit->ip;
              (jit->ip) ++;
              *tmp___22 = imb___0.b[0];
              tmp___23 = jit->ip;
              (jit->ip) ++;
              *tmp___23 = imb___0.b[1];
              tmp___24 = jit->ip;
              (jit->ip) ++;
              *tmp___24 = imb___0.b[2];
              tmp___25 = jit->ip;
              (jit->ip) ++;
              *tmp___25 = imb___0.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          if (sreg > 7) {
            tmp___28 = 1;
          } else {
            tmp___28 = 0;
          }
          _amd64_rex_bits___0 = (unsigned char )tmp___28;
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___29 = jit->ip;
            (jit->ip) ++;
            *tmp___29 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___30 = jit->ip;
        (jit->ip) ++;
        *tmp___30 = (unsigned char )(80 + (sreg & 7));
        break;
      }
    }
  } else {
    while (1) {
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___32 = 8;
        } else {
          tmp___32 = 0;
        }
        _amd64_rex_bits___1 = (unsigned char )tmp___32;
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___33 = jit->ip;
          (jit->ip) ++;
          *tmp___33 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___33 = jit->ip;
          (jit->ip) ++;
          *tmp___33 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      tmp___34 = jit->ip;
      (jit->ip) ++;
      *tmp___34 = (unsigned char)184;
      if (sizeof(void *) == 8UL) {
        while (1) {
          imb___1.val = (size_t )arg->value.generic;
          tmp___35 = jit->ip;
          (jit->ip) ++;
          *tmp___35 = imb___1.b[0];
          tmp___36 = jit->ip;
          (jit->ip) ++;
          *tmp___36 = imb___1.b[1];
          tmp___37 = jit->ip;
          (jit->ip) ++;
          *tmp___37 = imb___1.b[2];
          tmp___38 = jit->ip;
          (jit->ip) ++;
          *tmp___38 = imb___1.b[3];
          tmp___39 = jit->ip;
          (jit->ip) ++;
          *tmp___39 = imb___1.b[4];
          tmp___40 = jit->ip;
          (jit->ip) ++;
          *tmp___40 = imb___1.b[5];
          tmp___41 = jit->ip;
          (jit->ip) ++;
          *tmp___41 = imb___1.b[6];
          tmp___42 = jit->ip;
          (jit->ip) ++;
          *tmp___42 = imb___1.b[7];
          break;
        }
      } else {
        while (1) {
          imb___2.val = (int )((size_t )arg->value.generic);
          tmp___43 = jit->ip;
          (jit->ip) ++;
          *tmp___43 = imb___2.b[0];
          tmp___44 = jit->ip;
          (jit->ip) ++;
          *tmp___44 = imb___2.b[1];
          tmp___45 = jit->ip;
          (jit->ip) ++;
          *tmp___45 = imb___2.b[2];
          tmp___46 = jit->ip;
          (jit->ip) ++;
          *tmp___46 = imb___2.b[3];
          break;
        }
      }
      break;
    }
    while (1) {
      while (1) {
        _amd64_rex_bits___2 = (unsigned char)0;
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___47 = jit->ip;
          (jit->ip) ++;
          *tmp___47 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___48 = jit->ip;
      (jit->ip) ++;
      *tmp___48 = (unsigned char)80;
      break;
    }
  }
  return;
}
}
static int emit_push_reg(struct jit *jit , jit_hw_reg *r , int stack_offset ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  long tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  x86_imm_buf imb ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;

  {
  if (! r->fp) {
    stack_offset = (int )((unsigned long )stack_offset + sizeof(void *));
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp = jit->ip;
        (jit->ip) ++;
        *tmp = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___0 = 8;
        } else {
          tmp___0 = 0;
        }
        if (r->id > 7) {
          tmp___1 = 4;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)136;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)137;
      break;
      default: 
      tmp___5 = __builtin_expect(1L, 0L);
      if (tmp___5) {
        __assert_rtn("emit_push_reg", "./jitter-amd64.c", 2261, "0");
      }
      }
      while (1) {
        if (- stack_offset == 0) {
          while (1) {
            tmp___6 = jit->ip;
            (jit->ip) ++;
            *tmp___6 = (unsigned char )((((r->id & 7) & 7) << 3) | 4);
            break;
          }
          while (1) {
            tmp___7 = jit->ip;
            (jit->ip) ++;
            *tmp___7 = (unsigned char )((4 << 3) | 4);
            break;
          }
        } else
        if (- stack_offset >= -128) {
          if (- stack_offset <= 127) {
            while (1) {
              tmp___8 = jit->ip;
              (jit->ip) ++;
              *tmp___8 = (unsigned char )(((1 << 6) | (((r->id & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- stack_offset & 255);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L;
          }
        } else {
          _L: /* CIL Label */ 
          while (1) {
            tmp___10 = jit->ip;
            (jit->ip) ++;
            *tmp___10 = (unsigned char )(((2 << 6) | (((r->id & 7) & 7) << 3)) | 4);
            break;
          }
          while (1) {
            tmp___11 = jit->ip;
            (jit->ip) ++;
            *tmp___11 = (unsigned char )((4 << 3) | 4);
            break;
          }
          while (1) {
            imb.val = - stack_offset;
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = imb.b[0];
            tmp___13 = jit->ip;
            (jit->ip) ++;
            *tmp___13 = imb.b[1];
            tmp___14 = jit->ip;
            (jit->ip) ++;
            *tmp___14 = imb.b[2];
            tmp___15 = jit->ip;
            (jit->ip) ++;
            *tmp___15 = imb.b[3];
            break;
          }
        }
        break;
        if (- stack_offset == 0) {
          while (1) {
            tmp___16 = jit->ip;
            (jit->ip) ++;
            *tmp___16 = (unsigned char )((((r->id & 7) & 7) << 3) | 4);
            break;
          }
          break;
        }
        if (- stack_offset >= -128) {
          if (- stack_offset <= 127) {
            while (1) {
              tmp___17 = jit->ip;
              (jit->ip) ++;
              *tmp___17 = (unsigned char )(((1 << 6) | (((r->id & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- stack_offset & 255);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___0;
          }
        } else {
          _L___0: /* CIL Label */ 
          while (1) {
            tmp___18 = jit->ip;
            (jit->ip) ++;
            *tmp___18 = (unsigned char )(((2 << 6) | (((r->id & 7) & 7) << 3)) | 4);
            break;
          }
          while (1) {
            imb___0.val = - stack_offset;
            tmp___19 = jit->ip;
            (jit->ip) ++;
            *tmp___19 = imb___0.b[0];
            tmp___20 = jit->ip;
            (jit->ip) ++;
            *tmp___20 = imb___0.b[1];
            tmp___21 = jit->ip;
            (jit->ip) ++;
            *tmp___21 = imb___0.b[2];
            tmp___22 = jit->ip;
            (jit->ip) ++;
            *tmp___22 = imb___0.b[3];
            break;
          }
        }
        break;
      }
      break;
    }
  } else {
    stack_offset += 8;
    while (1) {
      tmp___23 = jit->ip;
      (jit->ip) ++;
      *tmp___23 = (unsigned char)102;
      while (1) {
        if (r->id > 7) {
          tmp___24 = 4;
        } else {
          tmp___24 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )tmp___24;
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___25 = jit->ip;
          (jit->ip) ++;
          *tmp___25 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      tmp___26 = jit->ip;
      (jit->ip) ++;
      *tmp___26 = (unsigned char)15;
      tmp___27 = jit->ip;
      (jit->ip) ++;
      *tmp___27 = (unsigned char)19;
      while (1) {
        while (1) {
          if (- stack_offset == 0) {
            while (1) {
              tmp___33 = jit->ip;
              (jit->ip) ++;
              *tmp___33 = (unsigned char )((((r->id & 7) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___34 = jit->ip;
              (jit->ip) ++;
              *tmp___34 = (unsigned char )((4 << 3) | 4);
              break;
            }
          } else
          if (- stack_offset >= -128) {
            if (- stack_offset <= 127) {
              while (1) {
                tmp___35 = jit->ip;
                (jit->ip) ++;
                *tmp___35 = (unsigned char )(((1 << 6) | (((r->id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___36 = jit->ip;
                (jit->ip) ++;
                *tmp___36 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- stack_offset & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___1;
            }
          } else {
            _L___1: /* CIL Label */ 
            while (1) {
              tmp___37 = jit->ip;
              (jit->ip) ++;
              *tmp___37 = (unsigned char )(((2 << 6) | (((r->id & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___38 = jit->ip;
              (jit->ip) ++;
              *tmp___38 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              imb___2.val = - stack_offset;
              tmp___39 = jit->ip;
              (jit->ip) ++;
              *tmp___39 = imb___2.b[0];
              tmp___40 = jit->ip;
              (jit->ip) ++;
              *tmp___40 = imb___2.b[1];
              tmp___41 = jit->ip;
              (jit->ip) ++;
              *tmp___41 = imb___2.b[2];
              tmp___42 = jit->ip;
              (jit->ip) ++;
              *tmp___42 = imb___2.b[3];
              break;
            }
          }
          break;
          if (- stack_offset == 0) {
            while (1) {
              tmp___43 = jit->ip;
              (jit->ip) ++;
              *tmp___43 = (unsigned char )((((r->id & 7) & 7) << 3) | 4);
              break;
            }
            break;
          }
          if (- stack_offset >= -128) {
            if (- stack_offset <= 127) {
              while (1) {
                tmp___44 = jit->ip;
                (jit->ip) ++;
                *tmp___44 = (unsigned char )(((1 << 6) | (((r->id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- stack_offset & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___2;
            }
          } else {
            _L___2: /* CIL Label */ 
            while (1) {
              tmp___45 = jit->ip;
              (jit->ip) ++;
              *tmp___45 = (unsigned char )(((2 << 6) | (((r->id & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              imb___3.val = - stack_offset;
              tmp___46 = jit->ip;
              (jit->ip) ++;
              *tmp___46 = imb___3.b[0];
              tmp___47 = jit->ip;
              (jit->ip) ++;
              *tmp___47 = imb___3.b[1];
              tmp___48 = jit->ip;
              (jit->ip) ++;
              *tmp___48 = imb___3.b[2];
              tmp___49 = jit->ip;
              (jit->ip) ++;
              *tmp___49 = imb___3.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  }
  return (stack_offset);
}
}
static void emit_sse_neg_op(struct jit *jit , jit_op *op , long a1 , long a2 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;

  {
  if (a1 != a2) {
    while (1) {
      tmp = jit->ip;
      (jit->ip) ++;
      *tmp = (unsigned char)242;
      while (1) {
        if (a1 > 7L) {
          tmp___0 = 4;
        } else {
          tmp___0 = 0;
        }
        if (a2 > 7L) {
          tmp___1 = 1;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)15;
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)16;
      while (1) {
        while (1) {
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  emit_sse_change_sign(jit, op, (int )a1);
  return;
}
}
static void insert_reg_op(int opcode , jit_op *op , jit_value r1 , jit_value r2 ) 
{ 
  jit_op *o ;
  struct jit_op *tmp ;

  {
  tmp = jit_op_new((unsigned short )opcode, (unsigned char )((2 << 2) | 2), r1, r2,
                   0L, (unsigned char)0);
  o = tmp;
  o->r_arg[0] = o->arg[0];
  o->r_arg[1] = o->arg[1];
  jit_op_prepend(op, o);
  return;
}
}
__inline extern int isalnum(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 1280UL);
  return (tmp);
}
}
__inline static void jit_buf_expand(struct jit *jit ) 
{ 
  long pos ;
  void *tmp ;

  {
  pos = jit->ip - jit->buf;
  jit->buf_capacity *= 2U;
  tmp = realloc((void *)jit->buf, (size_t )jit->buf_capacity);
  jit->buf = (unsigned char *)tmp;
  jit->ip = jit->buf + pos;
  return;
}
}
__inline static __uint16_t _OSSwapInt16(__uint16_t _data ) 
{ 


  {
  return ((__uint16_t )(((int )_data << 8) | ((int )_data >> 8)));
}
}
static int check_data_alignment(jit_op *op , char *msg_buf ) 
{ 
  int tmp ;
  jit_op *prev ;
  int tmp___0 ;

  {
  tmp = jit_op_is_data_op(op);
  if (tmp) {
    return (0);
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 760U) {
    return (0);
  }
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 456U) {
    return (0);
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 136U) {
    return (0);
  }
  prev = op->prev;
  while (prev) {
    if ((unsigned int )((jit_opcode )((int )prev->code & 65528)) == 456U) {
      prev = prev->prev;
    } else
    if ((unsigned int )((jit_opcode )((int )prev->code & 65528)) == 136U) {
      prev = prev->prev;
    } else {
      break;
    }
  }
  tmp___0 = jit_op_is_data_op(prev);
  if (tmp___0) {
    append_msg(msg_buf, (char *)"instruction follows unaligned data block");
    return (16);
  }
  return (0);
}
}
static void emit_memset(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                        jit_value a3 , int block_size ) 
{ 
  jit_hw_reg *counter ;
  jit_hw_reg *tmp ;
  int counterreg ;
  int i ;
  jit_hw_reg *r ;
  int counter_in_use ;
  int tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  long tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  jit_value loop ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  x86_imm_buf imb ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  int tmp___91 ;
  int tmp___92 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___93 ;
  int tmp___94 ;
  int tmp___95 ;
  int tmp___96 ;
  unsigned char *tmp___97 ;
  int tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char *tmp___101 ;
  long tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___115 ;
  unsigned char *tmp___116 ;
  unsigned char *tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___119 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  unsigned char *tmp___122 ;
  unsigned char _amd64_rex_bits___7 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___125 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char *tmp___128 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___129 ;
  unsigned char *tmp___130 ;
  unsigned char *tmp___131 ;
  unsigned char *tmp___132 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___133 ;
  unsigned char *tmp___134 ;
  unsigned char *tmp___135 ;
  unsigned char *tmp___136 ;
  unsigned char _amd64_rex_bits___9 ;
  unsigned char *tmp___137 ;
  int offset ;
  unsigned char *tmp___138 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  unsigned char *tmp___141 ;
  unsigned char *tmp___142 ;
  x86_imm_buf imb___10 ;
  unsigned char *tmp___143 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  unsigned char *tmp___146 ;
  unsigned char _amd64_rex_bits___10 ;
  int tmp___147 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;

  {
  tmp = jit_get_unused_reg_with_index(jit->reg_al, op, 0, 0);
  counter = tmp;
  counterreg = 0;
  if (counter) {
    counterreg = counter->id;
  } else {
    i = 0;
    while (i < (jit->reg_al)->gp_reg_cnt) {
      r = (jit->reg_al)->gp_regs + i;
      if ((jit_value )r->id != a1) {
        if ((jit_value )r->id != a2) {
          if (! ((int )op->code & 2)) {
            if ((jit_value )r->id != a3) {
              counterreg = r->id;
              break;
            }
          }
        }
      }
      i ++;
    }
  }
  tmp___0 = jit_reg_in_use(op, counterreg, 0);
  counter_in_use = tmp___0;
  if (counter_in_use) {
    while (1) {
      while (1) {
        if (counterreg > 7) {
          tmp___1 = 1;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )tmp___1;
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char )(80 + (counterreg & 7));
      break;
    }
  }
  while (1) {
    if (sizeof(void *) == 2UL) {
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)102;
    }
    while (1) {
      if (sizeof(void *) > 4UL) {
        tmp___5 = 8;
      } else {
        tmp___5 = 0;
      }
      if (counterreg > 7) {
        tmp___6 = 4;
      } else {
        tmp___6 = 0;
      }
      if (a2 > 7L) {
        tmp___7 = 1;
      } else {
        tmp___7 = 0;
      }
      _amd64_rex_bits___0 = (unsigned char )((tmp___5 | tmp___6) | tmp___7);
      if ((int )_amd64_rex_bits___0 != 0) {
        tmp___8 = jit->ip;
        (jit->ip) ++;
        *tmp___8 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
      } else
      if (sizeof(void *) == 1UL) {
        tmp___8 = jit->ip;
        (jit->ip) ++;
        *tmp___8 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
      }
      break;
    }
    switch (sizeof(void *)) {
    case 1UL: 
    tmp___9 = jit->ip;
    (jit->ip) ++;
    *tmp___9 = (unsigned char)138;
    break;
    case 8UL: 
    case 4UL: 
    case 2UL: 
    tmp___10 = jit->ip;
    (jit->ip) ++;
    *tmp___10 = (unsigned char)139;
    break;
    default: 
    tmp___11 = __builtin_expect(1L, 0L);
    if (tmp___11) {
      __assert_rtn("emit_memset", "./jitter-amd64.c", 3058, "0");
    }
    }
    while (1) {
      while (1) {
        tmp___12 = jit->ip;
        (jit->ip) ++;
        *tmp___12 = (unsigned char )((long )((3 << 6) | ((counterreg & 7) << 3)) | (a2 & 7L));
        break;
      }
      break;
    }
    break;
  }
  if (block_size == 2) {
    while (1) {
      while (1) {
        if (counterreg > 7) {
          tmp___13 = 1;
        } else {
          tmp___13 = 0;
        }
        _amd64_rex_bits___1 = (unsigned char )(8 | tmp___13);
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      while (1) {
        tmp___15 = jit->ip;
        (jit->ip) ++;
        *tmp___15 = (unsigned char)209;
        while (1) {
          while (1) {
            tmp___16 = jit->ip;
            (jit->ip) ++;
            *tmp___16 = (unsigned char )(((3 << 6) | (4 << 3)) | ((counterreg & 7) & 7));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  }
  if (block_size == 4) {
    while (1) {
      while (1) {
        if (counterreg > 7) {
          tmp___19 = 1;
        } else {
          tmp___19 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )(8 | tmp___19);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___20 = jit->ip;
          (jit->ip) ++;
          *tmp___20 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      while (1) {
        tmp___23 = jit->ip;
        (jit->ip) ++;
        *tmp___23 = (unsigned char)193;
        while (1) {
          while (1) {
            tmp___24 = jit->ip;
            (jit->ip) ++;
            *tmp___24 = (unsigned char )(((3 << 6) | (4 << 3)) | ((counterreg & 7) & 7));
            break;
          }
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)2;
          (jit->ip) ++;
          break;
        }
        break;
      }
      break;
    }
  }
  if (block_size == 8) {
    while (1) {
      while (1) {
        if (counterreg > 7) {
          tmp___25 = 1;
        } else {
          tmp___25 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )(8 | tmp___25);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___26 = jit->ip;
          (jit->ip) ++;
          *tmp___26 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      while (1) {
        tmp___29 = jit->ip;
        (jit->ip) ++;
        *tmp___29 = (unsigned char)193;
        while (1) {
          while (1) {
            tmp___30 = jit->ip;
            (jit->ip) ++;
            *tmp___30 = (unsigned char )(((3 << 6) | (4 << 3)) | ((counterreg & 7) & 7));
            break;
          }
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)3;
          (jit->ip) ++;
          break;
        }
        break;
      }
      break;
    }
  }
  loop = (jit_value )jit->ip;
  if ((int )op->code & 2) {
    while (1) {
      while (1) {
        if (block_size > 4) {
          tmp___31 = 8;
        } else {
          tmp___31 = 0;
        }
        if (counterreg > 7) {
          tmp___32 = 2;
        } else {
          tmp___32 = 0;
        }
        if (a1 > 7L) {
          tmp___33 = 1;
        } else {
          tmp___33 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )((tmp___31 | tmp___32) | tmp___33);
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___34 = jit->ip;
          (jit->ip) ++;
          *tmp___34 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        } else
        if (block_size == 1) {
          tmp___34 = jit->ip;
          (jit->ip) ++;
          *tmp___34 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      while (1) {
        if (block_size == 8) {
          tmp___92 = 4;
        } else {
          tmp___92 = block_size;
        }
        if (tmp___92 == 1) {
          tmp___35 = jit->ip;
          (jit->ip) ++;
          *tmp___35 = (unsigned char)198;
          while (1) {
            if ((a1 & 7L) == -1L) {
              while (1) {
                tmp___36 = jit->ip;
                (jit->ip) ++;
                *tmp___36 = (unsigned char)4;
                break;
              }
              while (1) {
                tmp___37 = jit->ip;
                (jit->ip) ++;
                *tmp___37 = (unsigned char )((((counterreg & 7) & 7) << 3) | 5);
                break;
              }
              while (1) {
                imb.val = - block_size;
                tmp___38 = jit->ip;
                (jit->ip) ++;
                *tmp___38 = imb.b[0];
                tmp___39 = jit->ip;
                (jit->ip) ++;
                *tmp___39 = imb.b[1];
                tmp___40 = jit->ip;
                (jit->ip) ++;
                *tmp___40 = imb.b[2];
                tmp___41 = jit->ip;
                (jit->ip) ++;
                *tmp___41 = imb.b[3];
                break;
              }
            } else
            if (- block_size == 0) {
              if ((a1 & 7L) != 5L) {
                while (1) {
                  tmp___42 = jit->ip;
                  (jit->ip) ++;
                  *tmp___42 = (unsigned char)4;
                  break;
                }
                while (1) {
                  tmp___43 = jit->ip;
                  (jit->ip) ++;
                  *tmp___43 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                  break;
                }
              } else {
                goto _L___0;
              }
            } else
            _L___0: /* CIL Label */ 
            if (- block_size >= -128) {
              if (- block_size <= 127) {
                while (1) {
                  tmp___44 = jit->ip;
                  (jit->ip) ++;
                  *tmp___44 = (unsigned char )((1 << 6) | 4);
                  break;
                }
                while (1) {
                  tmp___45 = jit->ip;
                  (jit->ip) ++;
                  *tmp___45 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(- block_size & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L;
              }
            } else {
              _L: /* CIL Label */ 
              while (1) {
                tmp___46 = jit->ip;
                (jit->ip) ++;
                *tmp___46 = (unsigned char )((2 << 6) | 4);
                break;
              }
              while (1) {
                tmp___47 = jit->ip;
                (jit->ip) ++;
                *tmp___47 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                break;
              }
              while (1) {
                imb___0.val = - block_size;
                tmp___48 = jit->ip;
                (jit->ip) ++;
                *tmp___48 = imb___0.b[0];
                tmp___49 = jit->ip;
                (jit->ip) ++;
                *tmp___49 = imb___0.b[1];
                tmp___50 = jit->ip;
                (jit->ip) ++;
                *tmp___50 = imb___0.b[2];
                tmp___51 = jit->ip;
                (jit->ip) ++;
                *tmp___51 = imb___0.b[3];
                break;
              }
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(a3 & 255L);
            (jit->ip) ++;
            break;
          }
        } else {
          if (block_size == 8) {
            tmp___91 = 4;
          } else {
            tmp___91 = block_size;
          }
          if (tmp___91 == 2) {
            tmp___52 = jit->ip;
            (jit->ip) ++;
            *tmp___52 = (unsigned char)102;
            tmp___53 = jit->ip;
            (jit->ip) ++;
            *tmp___53 = (unsigned char)199;
            while (1) {
              if ((a1 & 7L) == -1L) {
                while (1) {
                  tmp___54 = jit->ip;
                  (jit->ip) ++;
                  *tmp___54 = (unsigned char)4;
                  break;
                }
                while (1) {
                  tmp___55 = jit->ip;
                  (jit->ip) ++;
                  *tmp___55 = (unsigned char )((((counterreg & 7) & 7) << 3) | 5);
                  break;
                }
                while (1) {
                  imb___1.val = - block_size;
                  tmp___56 = jit->ip;
                  (jit->ip) ++;
                  *tmp___56 = imb___1.b[0];
                  tmp___57 = jit->ip;
                  (jit->ip) ++;
                  *tmp___57 = imb___1.b[1];
                  tmp___58 = jit->ip;
                  (jit->ip) ++;
                  *tmp___58 = imb___1.b[2];
                  tmp___59 = jit->ip;
                  (jit->ip) ++;
                  *tmp___59 = imb___1.b[3];
                  break;
                }
              } else
              if (- block_size == 0) {
                if ((a1 & 7L) != 5L) {
                  while (1) {
                    tmp___60 = jit->ip;
                    (jit->ip) ++;
                    *tmp___60 = (unsigned char)4;
                    break;
                  }
                  while (1) {
                    tmp___61 = jit->ip;
                    (jit->ip) ++;
                    *tmp___61 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                    break;
                  }
                } else {
                  goto _L___2;
                }
              } else
              _L___2: /* CIL Label */ 
              if (- block_size >= -128) {
                if (- block_size <= 127) {
                  while (1) {
                    tmp___62 = jit->ip;
                    (jit->ip) ++;
                    *tmp___62 = (unsigned char )((1 << 6) | 4);
                    break;
                  }
                  while (1) {
                    tmp___63 = jit->ip;
                    (jit->ip) ++;
                    *tmp___63 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(- block_size & 255);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___1;
                }
              } else {
                _L___1: /* CIL Label */ 
                while (1) {
                  tmp___64 = jit->ip;
                  (jit->ip) ++;
                  *tmp___64 = (unsigned char )((2 << 6) | 4);
                  break;
                }
                while (1) {
                  tmp___65 = jit->ip;
                  (jit->ip) ++;
                  *tmp___65 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                  break;
                }
                while (1) {
                  imb___2.val = - block_size;
                  tmp___66 = jit->ip;
                  (jit->ip) ++;
                  *tmp___66 = imb___2.b[0];
                  tmp___67 = jit->ip;
                  (jit->ip) ++;
                  *tmp___67 = imb___2.b[1];
                  tmp___68 = jit->ip;
                  (jit->ip) ++;
                  *tmp___68 = imb___2.b[2];
                  tmp___69 = jit->ip;
                  (jit->ip) ++;
                  *tmp___69 = imb___2.b[3];
                  break;
                }
              }
              break;
            }
            while (1) {
              *((short *)jit->ip) = (short )a3;
              jit->ip += 2;
              break;
            }
          } else {
            tmp___70 = jit->ip;
            (jit->ip) ++;
            *tmp___70 = (unsigned char)199;
            while (1) {
              if ((a1 & 7L) == -1L) {
                while (1) {
                  tmp___71 = jit->ip;
                  (jit->ip) ++;
                  *tmp___71 = (unsigned char)4;
                  break;
                }
                while (1) {
                  tmp___72 = jit->ip;
                  (jit->ip) ++;
                  *tmp___72 = (unsigned char )((((counterreg & 7) & 7) << 3) | 5);
                  break;
                }
                while (1) {
                  imb___3.val = - block_size;
                  tmp___73 = jit->ip;
                  (jit->ip) ++;
                  *tmp___73 = imb___3.b[0];
                  tmp___74 = jit->ip;
                  (jit->ip) ++;
                  *tmp___74 = imb___3.b[1];
                  tmp___75 = jit->ip;
                  (jit->ip) ++;
                  *tmp___75 = imb___3.b[2];
                  tmp___76 = jit->ip;
                  (jit->ip) ++;
                  *tmp___76 = imb___3.b[3];
                  break;
                }
              } else
              if (- block_size == 0) {
                if ((a1 & 7L) != 5L) {
                  while (1) {
                    tmp___77 = jit->ip;
                    (jit->ip) ++;
                    *tmp___77 = (unsigned char)4;
                    break;
                  }
                  while (1) {
                    tmp___78 = jit->ip;
                    (jit->ip) ++;
                    *tmp___78 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                    break;
                  }
                } else {
                  goto _L___4;
                }
              } else
              _L___4: /* CIL Label */ 
              if (- block_size >= -128) {
                if (- block_size <= 127) {
                  while (1) {
                    tmp___79 = jit->ip;
                    (jit->ip) ++;
                    *tmp___79 = (unsigned char )((1 << 6) | 4);
                    break;
                  }
                  while (1) {
                    tmp___80 = jit->ip;
                    (jit->ip) ++;
                    *tmp___80 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(- block_size & 255);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___3;
                }
              } else {
                _L___3: /* CIL Label */ 
                while (1) {
                  tmp___81 = jit->ip;
                  (jit->ip) ++;
                  *tmp___81 = (unsigned char )((2 << 6) | 4);
                  break;
                }
                while (1) {
                  tmp___82 = jit->ip;
                  (jit->ip) ++;
                  *tmp___82 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                  break;
                }
                while (1) {
                  imb___4.val = - block_size;
                  tmp___83 = jit->ip;
                  (jit->ip) ++;
                  *tmp___83 = imb___4.b[0];
                  tmp___84 = jit->ip;
                  (jit->ip) ++;
                  *tmp___84 = imb___4.b[1];
                  tmp___85 = jit->ip;
                  (jit->ip) ++;
                  *tmp___85 = imb___4.b[2];
                  tmp___86 = jit->ip;
                  (jit->ip) ++;
                  *tmp___86 = imb___4.b[3];
                  break;
                }
              }
              break;
            }
            while (1) {
              imb___5.val = (int )a3;
              tmp___87 = jit->ip;
              (jit->ip) ++;
              *tmp___87 = imb___5.b[0];
              tmp___88 = jit->ip;
              (jit->ip) ++;
              *tmp___88 = imb___5.b[1];
              tmp___89 = jit->ip;
              (jit->ip) ++;
              *tmp___89 = imb___5.b[2];
              tmp___90 = jit->ip;
              (jit->ip) ++;
              *tmp___90 = imb___5.b[3];
              break;
            }
          }
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      while (1) {
        if (block_size > 4) {
          tmp___93 = 8;
        } else {
          tmp___93 = 0;
        }
        if (a3 > 7L) {
          tmp___94 = 4;
        } else {
          tmp___94 = 0;
        }
        if (counterreg > 7) {
          tmp___95 = 2;
        } else {
          tmp___95 = 0;
        }
        if (a1 > 7L) {
          tmp___96 = 1;
        } else {
          tmp___96 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(((tmp___93 | tmp___94) | tmp___95) | tmp___96);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___97 = jit->ip;
          (jit->ip) ++;
          *tmp___97 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        } else
        if (block_size == 1) {
          tmp___97 = jit->ip;
          (jit->ip) ++;
          *tmp___97 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      while (1) {
        if (block_size == 8) {
          tmp___98 = 4;
        } else {
          tmp___98 = block_size;
        }
        switch (tmp___98) {
        case 1: 
        tmp___99 = jit->ip;
        (jit->ip) ++;
        *tmp___99 = (unsigned char)136;
        break;
        case 2: 
        tmp___100 = jit->ip;
        (jit->ip) ++;
        *tmp___100 = (unsigned char)102;
        case 4: 
        tmp___101 = jit->ip;
        (jit->ip) ++;
        *tmp___101 = (unsigned char)137;
        break;
        default: 
        tmp___102 = __builtin_expect(1L, 0L);
        if (tmp___102) {
          __assert_rtn("emit_memset", "./jitter-amd64.c", 3068, "0");
        }
        }
        while (1) {
          if ((a1 & 7L) == -1L) {
            while (1) {
              tmp___103 = jit->ip;
              (jit->ip) ++;
              *tmp___103 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___104 = jit->ip;
              (jit->ip) ++;
              *tmp___104 = (unsigned char )((((counterreg & 7) & 7) << 3) | 5);
              break;
            }
            while (1) {
              imb___6.val = - block_size;
              tmp___105 = jit->ip;
              (jit->ip) ++;
              *tmp___105 = imb___6.b[0];
              tmp___106 = jit->ip;
              (jit->ip) ++;
              *tmp___106 = imb___6.b[1];
              tmp___107 = jit->ip;
              (jit->ip) ++;
              *tmp___107 = imb___6.b[2];
              tmp___108 = jit->ip;
              (jit->ip) ++;
              *tmp___108 = imb___6.b[3];
              break;
            }
          } else
          if (- block_size == 0) {
            if ((a1 & 7L) != 5L) {
              while (1) {
                tmp___109 = jit->ip;
                (jit->ip) ++;
                *tmp___109 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___110 = jit->ip;
                (jit->ip) ++;
                *tmp___110 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                break;
              }
            } else {
              goto _L___6;
            }
          } else
          _L___6: /* CIL Label */ 
          if (- block_size >= -128) {
            if (- block_size <= 127) {
              while (1) {
                tmp___111 = jit->ip;
                (jit->ip) ++;
                *tmp___111 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
                break;
              }
              while (1) {
                tmp___112 = jit->ip;
                (jit->ip) ++;
                *tmp___112 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- block_size & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___5;
            }
          } else {
            _L___5: /* CIL Label */ 
            while (1) {
              tmp___113 = jit->ip;
              (jit->ip) ++;
              *tmp___113 = (unsigned char )(((long )(2 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___114 = jit->ip;
              (jit->ip) ++;
              *tmp___114 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
              break;
            }
            while (1) {
              imb___7.val = - block_size;
              tmp___115 = jit->ip;
              (jit->ip) ++;
              *tmp___115 = imb___7.b[0];
              tmp___116 = jit->ip;
              (jit->ip) ++;
              *tmp___116 = imb___7.b[1];
              tmp___117 = jit->ip;
              (jit->ip) ++;
              *tmp___117 = imb___7.b[2];
              tmp___118 = jit->ip;
              (jit->ip) ++;
              *tmp___118 = imb___7.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  }
  while (1) {
    if (block_size >= -128) {
      if (block_size <= 127) {
        while (1) {
          if (counterreg > 7) {
            tmp___119 = 1;
          } else {
            tmp___119 = 0;
          }
          _amd64_rex_bits___6 = (unsigned char )(8 | tmp___119);
          if ((int )_amd64_rex_bits___6 != 0) {
            tmp___120 = jit->ip;
            (jit->ip) ++;
            *tmp___120 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
          }
          break;
        }
        tmp___121 = jit->ip;
        (jit->ip) ++;
        *tmp___121 = (unsigned char)131;
        while (1) {
          while (1) {
            tmp___122 = jit->ip;
            (jit->ip) ++;
            *tmp___122 = (unsigned char )(((3 << 6) | (5 << 3)) | (counterreg & 7));
            break;
          }
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char )(block_size & 255);
          (jit->ip) ++;
          break;
        }
      } else {
        goto _L___7;
      }
    } else
    _L___7: /* CIL Label */ 
    if (counterreg == 0) {
      while (1) {
        _amd64_rex_bits___7 = (unsigned char)8;
        if ((int )_amd64_rex_bits___7 != 0) {
          tmp___123 = jit->ip;
          (jit->ip) ++;
          *tmp___123 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
        }
        break;
      }
      tmp___124 = jit->ip;
      (jit->ip) ++;
      *tmp___124 = (unsigned char )((5 << 3) + 5);
      while (1) {
        imb___8.val = block_size;
        tmp___125 = jit->ip;
        (jit->ip) ++;
        *tmp___125 = imb___8.b[0];
        tmp___126 = jit->ip;
        (jit->ip) ++;
        *tmp___126 = imb___8.b[1];
        tmp___127 = jit->ip;
        (jit->ip) ++;
        *tmp___127 = imb___8.b[2];
        tmp___128 = jit->ip;
        (jit->ip) ++;
        *tmp___128 = imb___8.b[3];
        break;
      }
    } else {
      while (1) {
        if (counterreg > 7) {
          tmp___129 = 1;
        } else {
          tmp___129 = 0;
        }
        _amd64_rex_bits___8 = (unsigned char )(8 | tmp___129);
        if ((int )_amd64_rex_bits___8 != 0) {
          tmp___130 = jit->ip;
          (jit->ip) ++;
          *tmp___130 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
        }
        break;
      }
      tmp___131 = jit->ip;
      (jit->ip) ++;
      *tmp___131 = (unsigned char)129;
      while (1) {
        while (1) {
          tmp___132 = jit->ip;
          (jit->ip) ++;
          *tmp___132 = (unsigned char )(((3 << 6) | (5 << 3)) | (counterreg & 7));
          break;
        }
        break;
      }
      while (1) {
        imb___9.val = block_size;
        tmp___133 = jit->ip;
        (jit->ip) ++;
        *tmp___133 = imb___9.b[0];
        tmp___134 = jit->ip;
        (jit->ip) ++;
        *tmp___134 = imb___9.b[1];
        tmp___135 = jit->ip;
        (jit->ip) ++;
        *tmp___135 = imb___9.b[2];
        tmp___136 = jit->ip;
        (jit->ip) ++;
        *tmp___136 = imb___9.b[3];
        break;
      }
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___9 = (unsigned char)8;
      if ((int )_amd64_rex_bits___9 != 0) {
        tmp___137 = jit->ip;
        (jit->ip) ++;
        *tmp___137 = (unsigned char )(64 | (int )_amd64_rex_bits___9);
      }
      break;
    }
    while (1) {
      offset = (int )((loop - (jit_value )jit->ip) - 2L);
      if (offset >= -128) {
        if (offset <= 127) {
          while (1) {
            tmp___139 = jit->ip;
            (jit->ip) ++;
            *tmp___139 = (unsigned char )x86_cc_unsigned_map[1];
            while (1) {
              *(jit->ip) = (unsigned char )(offset & 255);
              (jit->ip) ++;
              break;
            }
            break;
          }
        } else {
          goto _L___8;
        }
      } else {
        _L___8: /* CIL Label */ 
        offset -= 4;
        while (1) {
          tmp___140 = jit->ip;
          (jit->ip) ++;
          *tmp___140 = (unsigned char)15;
          tmp___142 = jit->ip;
          (jit->ip) ++;
          *tmp___142 = (unsigned char )((int const   )x86_cc_unsigned_map[1] + 16);
          while (1) {
            imb___10.val = offset;
            tmp___143 = jit->ip;
            (jit->ip) ++;
            *tmp___143 = imb___10.b[0];
            tmp___144 = jit->ip;
            (jit->ip) ++;
            *tmp___144 = imb___10.b[1];
            tmp___145 = jit->ip;
            (jit->ip) ++;
            *tmp___145 = imb___10.b[2];
            tmp___146 = jit->ip;
            (jit->ip) ++;
            *tmp___146 = imb___10.b[3];
            break;
          }
          break;
        }
      }
      break;
    }
    break;
  }
  if (counter_in_use) {
    while (1) {
      while (1) {
        if (counterreg > 7) {
          tmp___147 = 1;
        } else {
          tmp___147 = 0;
        }
        _amd64_rex_bits___10 = (unsigned char )tmp___147;
        if ((int )_amd64_rex_bits___10 != 0) {
          tmp___148 = jit->ip;
          (jit->ip) ++;
          *tmp___148 = (unsigned char )(64 | (int )_amd64_rex_bits___10);
        }
        break;
      }
      tmp___149 = jit->ip;
      (jit->ip) ++;
      *tmp___149 = (unsigned char )(88 + (counterreg & 7));
      break;
    }
  }
  return;
}
}
void jit_trace(struct jit *jit , int verbosity ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  jit_op *o ;
  struct jit_op *tmp___0 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp->next;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 536U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 352U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 520U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 488U) {
      goto __Cont;
    }
    tmp___0 = jit_op_new((unsigned short)360, (unsigned char)2, (long )verbosity,
                         0L, 0L, (unsigned char)0);
    o = tmp___0;
    o->r_arg[0] = o->arg[0];
    jit_op_prepend(op, o);
    __Cont: /* CIL Label */ 
    op = op->next;
  }
  return;
}
}
__inline static void funcall_put_arg(struct jit *jit , jit_op *op ) 
{ 
  int pos ;
  struct jit_out_arg *arg ;
  int tmp ;

  {
  pos = jit->prepared_args.ready;
  arg = jit->prepared_args.args + pos;
  arg->isreg = (char )(! ((int )op->code & 2));
  arg->isfp = (char)0;
  arg->value.generic = op->arg[0];
  tmp = jit->prepared_args.gp_args;
  (jit->prepared_args.gp_args) ++;
  arg->argpos = tmp;
  (jit->prepared_args.ready) ++;
  if (jit->prepared_args.gp_args > (jit->reg_al)->gp_arg_reg_cnt) {
    jit->prepared_args.stack_size = (int )((unsigned long )jit->prepared_args.stack_size + sizeof(void *));
  }
  return;
}
}
static int join_addi_addr(jit_op *op , jit_op *nextop ) 
{ 
  unsigned long tmp ;

  {
  if (op->arg[2] >= (-0x7FFFFFFF-1)) {
    if (! (op->arg[2] <= 2147483647L)) {
      return (0);
    }
  } else {
    return (0);
  }
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 32U) {
    op->arg[2] = - op->arg[2];
  }
  make_nop(op);
  nextop->code = (unsigned short)440;
  nextop->spec = (unsigned char )(((1 << 4) | (1 << 2)) | 3);
  if (nextop->arg[1] == nextop->arg[2]) {
    op->arg[2] *= 2L;
  }
  tmp = __builtin_object_size((void *)(& nextop->flt_imm), 0);
  __builtin___memcpy_chk((void *)(& nextop->flt_imm), (void const   *)(& op->arg[2]),
                         sizeof(jit_value ), tmp);
  if (nextop->arg[1] == op->arg[0]) {
    nextop->arg[1] = op->arg[1];
  }
  if (nextop->arg[2] == op->arg[0]) {
    nextop->arg[2] = op->arg[1];
  }
  return (1);
}
}
static void free_ops(struct jit_op *op ) 
{ 


  {
  if ((unsigned long )op == (unsigned long )((void *)0)) {
    return;
  }
  free_ops(op->next);
  if (op->addendum) {
    free(op->addendum);
  }
  jit_free_op(op);
  return;
}
}
static void emit_ldx_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                        jit_value a3 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  long tmp___6 ;
  unsigned char *tmp___7 ;
  x86_imm_buf imb ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  unsigned char *tmp___33 ;
  int tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  long tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___55 ;
  int tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___76 ;
  int tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  long tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___101 ;
  int tmp___102 ;
  int tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  long tmp___107 ;
  unsigned char *tmp___108 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  unsigned char *tmp___116 ;
  unsigned char *tmp___117 ;
  unsigned char *tmp___118 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___119 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  unsigned char *tmp___122 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  unsigned char *tmp___125 ;
  x86_imm_buf imb___10 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char *tmp___128 ;
  unsigned char *tmp___129 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___130 ;
  int tmp___131 ;
  unsigned char *tmp___132 ;
  unsigned char *tmp___133 ;
  unsigned char *tmp___134 ;
  unsigned char *tmp___135 ;
  long tmp___136 ;
  unsigned char *tmp___137 ;
  unsigned char *tmp___138 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  unsigned char *tmp___141 ;
  unsigned char *tmp___142 ;
  x86_imm_buf imb___11 ;
  unsigned char *tmp___143 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  unsigned char *tmp___146 ;
  unsigned char *tmp___147 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;
  x86_imm_buf imb___12 ;
  unsigned char *tmp___150 ;
  unsigned char *tmp___151 ;
  unsigned char *tmp___152 ;
  unsigned char *tmp___153 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___154 ;
  int tmp___155 ;
  int tmp___156 ;
  unsigned char *tmp___157 ;
  unsigned char *tmp___158 ;
  unsigned char *tmp___159 ;
  unsigned char *tmp___160 ;
  x86_imm_buf imb___13 ;
  unsigned char *tmp___161 ;
  unsigned char *tmp___162 ;
  unsigned char *tmp___163 ;
  unsigned char *tmp___164 ;
  unsigned char *tmp___165 ;
  unsigned char *tmp___166 ;
  unsigned char *tmp___167 ;
  unsigned char *tmp___168 ;
  unsigned char *tmp___169 ;
  unsigned char *tmp___170 ;
  x86_imm_buf imb___14 ;
  unsigned char *tmp___171 ;
  unsigned char *tmp___172 ;
  unsigned char *tmp___173 ;
  unsigned char *tmp___174 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___175 ;
  int tmp___176 ;
  int tmp___177 ;
  unsigned char *tmp___178 ;
  unsigned char *tmp___179 ;
  unsigned char *tmp___180 ;
  unsigned char *tmp___181 ;
  long tmp___182 ;
  unsigned char *tmp___183 ;
  unsigned char *tmp___184 ;
  x86_imm_buf imb___15 ;
  unsigned char *tmp___185 ;
  unsigned char *tmp___186 ;
  unsigned char *tmp___187 ;
  unsigned char *tmp___188 ;
  unsigned char *tmp___189 ;
  unsigned char *tmp___190 ;
  unsigned char *tmp___191 ;
  unsigned char *tmp___192 ;
  unsigned char *tmp___193 ;
  unsigned char *tmp___194 ;
  x86_imm_buf imb___16 ;
  unsigned char *tmp___195 ;
  unsigned char *tmp___196 ;
  unsigned char *tmp___197 ;
  unsigned char *tmp___198 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___199 ;
  int tmp___200 ;
  int tmp___201 ;
  int tmp___202 ;
  unsigned char *tmp___203 ;
  int tmp___204 ;
  unsigned char *tmp___205 ;
  unsigned char *tmp___206 ;
  unsigned char *tmp___207 ;
  long tmp___208 ;
  unsigned char *tmp___209 ;
  unsigned char *tmp___210 ;
  x86_imm_buf imb___17 ;
  unsigned char *tmp___211 ;
  unsigned char *tmp___212 ;
  unsigned char *tmp___213 ;
  unsigned char *tmp___214 ;
  unsigned char *tmp___215 ;
  unsigned char *tmp___216 ;
  unsigned char *tmp___217 ;
  unsigned char *tmp___218 ;
  unsigned char *tmp___219 ;
  unsigned char *tmp___220 ;
  x86_imm_buf imb___18 ;
  unsigned char *tmp___221 ;
  unsigned char *tmp___222 ;
  unsigned char *tmp___223 ;
  unsigned char *tmp___224 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___225 ;
  int tmp___226 ;
  int tmp___227 ;
  unsigned char *tmp___228 ;
  unsigned char *tmp___229 ;
  unsigned char *tmp___230 ;
  unsigned char *tmp___231 ;
  long tmp___232 ;
  unsigned char *tmp___233 ;
  unsigned char *tmp___234 ;
  x86_imm_buf imb___19 ;
  unsigned char *tmp___235 ;
  unsigned char *tmp___236 ;
  unsigned char *tmp___237 ;
  unsigned char *tmp___238 ;
  unsigned char *tmp___239 ;
  unsigned char *tmp___240 ;
  unsigned char *tmp___241 ;
  unsigned char *tmp___242 ;
  unsigned char *tmp___243 ;
  unsigned char *tmp___244 ;
  x86_imm_buf imb___20 ;
  unsigned char *tmp___245 ;
  unsigned char *tmp___246 ;
  unsigned char *tmp___247 ;
  unsigned char *tmp___248 ;
  long tmp___249 ;

  {
  if ((unsigned long )op->arg_size == sizeof(void *)) {
    if ((int )op->code & 2) {
      while (1) {
        if ((int )op->arg_size == 2) {
          tmp = jit->ip;
          (jit->ip) ++;
          *tmp = (unsigned char)102;
        }
        while (1) {
          if ((int )op->arg_size > 4) {
            tmp___0 = 8;
          } else {
            tmp___0 = 0;
          }
          if (a1 > 7L) {
            tmp___1 = 4;
          } else {
            tmp___1 = 0;
          }
          if (a2 > 7L) {
            tmp___2 = 1;
          } else {
            tmp___2 = 0;
          }
          _amd64_rex_bits = (unsigned char )((tmp___0 | tmp___1) | tmp___2);
          if ((int )_amd64_rex_bits != 0) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
          } else
          if ((int )op->arg_size == 1) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        switch ((int )op->arg_size) {
        case 1: 
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char)138;
        break;
        case 8: 
        case 4: 
        case 2: 
        tmp___5 = jit->ip;
        (jit->ip) ++;
        *tmp___5 = (unsigned char)139;
        break;
        default: 
        tmp___6 = __builtin_expect(1L, 0L);
        if (tmp___6) {
          __assert_rtn("emit_ldx_op", "./jitter-amd64.c", 2904, "0");
        }
        }
        while (1) {
          if (a2 == 16L) {
            while (1) {
              tmp___7 = jit->ip;
              (jit->ip) ++;
              *tmp___7 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb.val = (int )a3;
              tmp___8 = jit->ip;
              (jit->ip) ++;
              *tmp___8 = imb.b[0];
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = imb.b[1];
              tmp___10 = jit->ip;
              (jit->ip) ++;
              *tmp___10 = imb.b[2];
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = imb.b[3];
              break;
            }
          } else {
            while (1) {
              if ((a2 & 7L) == 4L) {
                if (a3 == 0L) {
                  while (1) {
                    tmp___12 = jit->ip;
                    (jit->ip) ++;
                    *tmp___12 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___13 = jit->ip;
                    (jit->ip) ++;
                    *tmp___13 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                } else
                if ((int )a3 >= -128) {
                  if ((int )a3 <= 127) {
                    while (1) {
                      tmp___14 = jit->ip;
                      (jit->ip) ++;
                      *tmp___14 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                      break;
                    }
                    while (1) {
                      tmp___15 = jit->ip;
                      (jit->ip) ++;
                      *tmp___15 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(a3 & 255L);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L;
                  }
                } else {
                  _L: /* CIL Label */ 
                  while (1) {
                    tmp___16 = jit->ip;
                    (jit->ip) ++;
                    *tmp___16 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___17 = jit->ip;
                    (jit->ip) ++;
                    *tmp___17 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    imb___0.val = (int )a3;
                    tmp___18 = jit->ip;
                    (jit->ip) ++;
                    *tmp___18 = imb___0.b[0];
                    tmp___19 = jit->ip;
                    (jit->ip) ++;
                    *tmp___19 = imb___0.b[1];
                    tmp___20 = jit->ip;
                    (jit->ip) ++;
                    *tmp___20 = imb___0.b[2];
                    tmp___21 = jit->ip;
                    (jit->ip) ++;
                    *tmp___21 = imb___0.b[3];
                    break;
                  }
                }
                break;
              }
              if (a3 == 0L) {
                if ((a2 & 7L) != 5L) {
                  while (1) {
                    tmp___22 = jit->ip;
                    (jit->ip) ++;
                    *tmp___22 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                    break;
                  }
                  break;
                }
              }
              if ((int )a3 >= -128) {
                if ((int )a3 <= 127) {
                  while (1) {
                    tmp___23 = jit->ip;
                    (jit->ip) ++;
                    *tmp___23 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(a3 & 255L);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___0;
                }
              } else {
                _L___0: /* CIL Label */ 
                while (1) {
                  tmp___24 = jit->ip;
                  (jit->ip) ++;
                  *tmp___24 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                  break;
                }
                while (1) {
                  imb___1.val = (int )a3;
                  tmp___25 = jit->ip;
                  (jit->ip) ++;
                  *tmp___25 = imb___1.b[0];
                  tmp___26 = jit->ip;
                  (jit->ip) ++;
                  *tmp___26 = imb___1.b[1];
                  tmp___27 = jit->ip;
                  (jit->ip) ++;
                  *tmp___27 = imb___1.b[2];
                  tmp___28 = jit->ip;
                  (jit->ip) ++;
                  *tmp___28 = imb___1.b[3];
                  break;
                }
              }
              break;
            }
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          if ((int )op->arg_size > 4) {
            tmp___29 = 8;
          } else {
            tmp___29 = 0;
          }
          if (a1 > 7L) {
            tmp___30 = 4;
          } else {
            tmp___30 = 0;
          }
          if (a3 > 7L) {
            tmp___31 = 2;
          } else {
            tmp___31 = 0;
          }
          if (a2 > 7L) {
            tmp___32 = 1;
          } else {
            tmp___32 = 0;
          }
          _amd64_rex_bits___0 = (unsigned char )(((tmp___29 | tmp___30) | tmp___31) | tmp___32);
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___33 = jit->ip;
            (jit->ip) ++;
            *tmp___33 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          } else
          if ((int )op->arg_size == 1) {
            tmp___33 = jit->ip;
            (jit->ip) ++;
            *tmp___33 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        while (1) {
          if ((int )op->arg_size == 8) {
            tmp___34 = 4;
          } else {
            tmp___34 = (int )op->arg_size;
          }
          switch (tmp___34) {
          case 1: 
          tmp___35 = jit->ip;
          (jit->ip) ++;
          *tmp___35 = (unsigned char)138;
          break;
          case 2: 
          tmp___36 = jit->ip;
          (jit->ip) ++;
          *tmp___36 = (unsigned char)102;
          case 4: 
          tmp___37 = jit->ip;
          (jit->ip) ++;
          *tmp___37 = (unsigned char)139;
          break;
          default: 
          tmp___38 = __builtin_expect(1L, 0L);
          if (tmp___38) {
            __assert_rtn("emit_ldx_op", "./jitter-amd64.c", 2905, "0");
          }
          }
          while (1) {
            if ((a2 & 7L) == -1L) {
              while (1) {
                tmp___39 = jit->ip;
                (jit->ip) ++;
                *tmp___39 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___40 = jit->ip;
                (jit->ip) ++;
                *tmp___40 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
                break;
              }
              while (1) {
                imb___2.val = 0;
                tmp___41 = jit->ip;
                (jit->ip) ++;
                *tmp___41 = imb___2.b[0];
                tmp___42 = jit->ip;
                (jit->ip) ++;
                *tmp___42 = imb___2.b[1];
                tmp___43 = jit->ip;
                (jit->ip) ++;
                *tmp___43 = imb___2.b[2];
                tmp___44 = jit->ip;
                (jit->ip) ++;
                *tmp___44 = imb___2.b[3];
                break;
              }
            } else
            if ((a2 & 7L) != 5L) {
              while (1) {
                tmp___45 = jit->ip;
                (jit->ip) ++;
                *tmp___45 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___46 = jit->ip;
                (jit->ip) ++;
                *tmp___46 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
                break;
              }
            } else {
              while (1) {
                tmp___47 = jit->ip;
                (jit->ip) ++;
                *tmp___47 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                break;
              }
              while (1) {
                tmp___48 = jit->ip;
                (jit->ip) ++;
                *tmp___48 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
            }
            break;
          }
          break;
        }
        break;
      }
    }
    return;
  }
  switch ((int )op->code) {
  case 874: 
  while (1) {
    if ((int )op->arg_size == 4) {
      while (1) {
        while (1) {
          if (a1 > 7L) {
            tmp___55 = 4;
          } else {
            tmp___55 = 0;
          }
          if (a2 > 7L) {
            tmp___56 = 1;
          } else {
            tmp___56 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )((8 | tmp___55) | tmp___56);
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___57 = jit->ip;
            (jit->ip) ++;
            *tmp___57 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___58 = jit->ip;
        (jit->ip) ++;
        *tmp___58 = (unsigned char)99;
        while (1) {
          if ((a2 & 7L) == 4L) {
            if (a3 == 0L) {
              while (1) {
                tmp___59 = jit->ip;
                (jit->ip) ++;
                *tmp___59 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___60 = jit->ip;
                (jit->ip) ++;
                *tmp___60 = (unsigned char )((4 << 3) | 4);
                break;
              }
            } else
            if ((int )a3 >= -128) {
              if ((int )a3 <= 127) {
                while (1) {
                  tmp___61 = jit->ip;
                  (jit->ip) ++;
                  *tmp___61 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                  break;
                }
                while (1) {
                  tmp___62 = jit->ip;
                  (jit->ip) ++;
                  *tmp___62 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(a3 & 255L);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___1;
              }
            } else {
              _L___1: /* CIL Label */ 
              while (1) {
                tmp___63 = jit->ip;
                (jit->ip) ++;
                *tmp___63 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                break;
              }
              while (1) {
                tmp___64 = jit->ip;
                (jit->ip) ++;
                *tmp___64 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                imb___4.val = (int )a3;
                tmp___65 = jit->ip;
                (jit->ip) ++;
                *tmp___65 = imb___4.b[0];
                tmp___66 = jit->ip;
                (jit->ip) ++;
                *tmp___66 = imb___4.b[1];
                tmp___67 = jit->ip;
                (jit->ip) ++;
                *tmp___67 = imb___4.b[2];
                tmp___68 = jit->ip;
                (jit->ip) ++;
                *tmp___68 = imb___4.b[3];
                break;
              }
            }
            break;
          }
          if (a3 == 0L) {
            if ((a2 & 7L) != 5L) {
              while (1) {
                tmp___69 = jit->ip;
                (jit->ip) ++;
                *tmp___69 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                break;
              }
              break;
            }
          }
          if ((int )a3 >= -128) {
            if ((int )a3 <= 127) {
              while (1) {
                tmp___70 = jit->ip;
                (jit->ip) ++;
                *tmp___70 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(a3 & 255L);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___2;
            }
          } else {
            _L___2: /* CIL Label */ 
            while (1) {
              tmp___71 = jit->ip;
              (jit->ip) ++;
              *tmp___71 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
              break;
            }
            while (1) {
              imb___5.val = (int )a3;
              tmp___72 = jit->ip;
              (jit->ip) ++;
              *tmp___72 = imb___5.b[0];
              tmp___73 = jit->ip;
              (jit->ip) ++;
              *tmp___73 = imb___5.b[1];
              tmp___74 = jit->ip;
              (jit->ip) ++;
              *tmp___74 = imb___5.b[2];
              tmp___75 = jit->ip;
              (jit->ip) ++;
              *tmp___75 = imb___5.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      if (a1 > 7L) {
        tmp___76 = 4;
      } else {
        tmp___76 = 0;
      }
      if (a2 > 7L) {
        tmp___77 = 1;
      } else {
        tmp___77 = 0;
      }
      _amd64_rex_bits___2 = (unsigned char )((8 | tmp___76) | tmp___77);
      if ((int )_amd64_rex_bits___2 != 0) {
        tmp___78 = jit->ip;
        (jit->ip) ++;
        *tmp___78 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
      }
      break;
    }
    tmp___79 = jit->ip;
    (jit->ip) ++;
    *tmp___79 = (unsigned char)15;
    switch ((int )op->arg_size) {
    case 1: 
    tmp___80 = jit->ip;
    (jit->ip) ++;
    *tmp___80 = (unsigned char)190;
    break;
    case 2: 
    tmp___81 = jit->ip;
    (jit->ip) ++;
    *tmp___81 = (unsigned char)191;
    break;
    default: 
    tmp___82 = __builtin_expect(1L, 0L);
    if (tmp___82) {
      __assert_rtn("emit_ldx_op", "./jitter-amd64.c", 2910, "0");
    }
    }
    while (1) {
      if ((a2 & 7L) == 4L) {
        if (a3 == 0L) {
          while (1) {
            tmp___83 = jit->ip;
            (jit->ip) ++;
            *tmp___83 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___84 = jit->ip;
            (jit->ip) ++;
            *tmp___84 = (unsigned char )((4 << 3) | 4);
            break;
          }
        } else
        if ((int )a3 >= -128) {
          if ((int )a3 <= 127) {
            while (1) {
              tmp___85 = jit->ip;
              (jit->ip) ++;
              *tmp___85 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___86 = jit->ip;
              (jit->ip) ++;
              *tmp___86 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(a3 & 255L);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___3;
          }
        } else {
          _L___3: /* CIL Label */ 
          while (1) {
            tmp___87 = jit->ip;
            (jit->ip) ++;
            *tmp___87 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            tmp___88 = jit->ip;
            (jit->ip) ++;
            *tmp___88 = (unsigned char )((4 << 3) | 4);
            break;
          }
          while (1) {
            imb___6.val = (int )a3;
            tmp___89 = jit->ip;
            (jit->ip) ++;
            *tmp___89 = imb___6.b[0];
            tmp___90 = jit->ip;
            (jit->ip) ++;
            *tmp___90 = imb___6.b[1];
            tmp___91 = jit->ip;
            (jit->ip) ++;
            *tmp___91 = imb___6.b[2];
            tmp___92 = jit->ip;
            (jit->ip) ++;
            *tmp___92 = imb___6.b[3];
            break;
          }
        }
        break;
      }
      if (a3 == 0L) {
        if ((a2 & 7L) != 5L) {
          while (1) {
            tmp___93 = jit->ip;
            (jit->ip) ++;
            *tmp___93 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
            break;
          }
          break;
        }
      }
      if ((int )a3 >= -128) {
        if ((int )a3 <= 127) {
          while (1) {
            tmp___94 = jit->ip;
            (jit->ip) ++;
            *tmp___94 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(a3 & 255L);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L___4;
        }
      } else {
        _L___4: /* CIL Label */ 
        while (1) {
          tmp___95 = jit->ip;
          (jit->ip) ++;
          *tmp___95 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
          break;
        }
        while (1) {
          imb___7.val = (int )a3;
          tmp___96 = jit->ip;
          (jit->ip) ++;
          *tmp___96 = imb___7.b[0];
          tmp___97 = jit->ip;
          (jit->ip) ++;
          *tmp___97 = imb___7.b[1];
          tmp___98 = jit->ip;
          (jit->ip) ++;
          *tmp___98 = imb___7.b[2];
          tmp___99 = jit->ip;
          (jit->ip) ++;
          *tmp___99 = imb___7.b[3];
          break;
        }
      }
      break;
    }
    break;
  }
  break;
  case 878: 
  while (1) {
    if ((int )op->arg_size == 8) {
      goto _L___7;
    } else
    if ((int )op->arg_size == 4) {
      _L___7: /* CIL Label */ 
      while (1) {
        if ((int )op->arg_size == 2) {
          tmp___100 = jit->ip;
          (jit->ip) ++;
          *tmp___100 = (unsigned char)102;
        }
        while (1) {
          if ((int )op->arg_size > 4) {
            tmp___101 = 8;
          } else {
            tmp___101 = 0;
          }
          if (a1 > 7L) {
            tmp___102 = 4;
          } else {
            tmp___102 = 0;
          }
          if (a2 > 7L) {
            tmp___103 = 1;
          } else {
            tmp___103 = 0;
          }
          _amd64_rex_bits___3 = (unsigned char )((tmp___101 | tmp___102) | tmp___103);
          if ((int )_amd64_rex_bits___3 != 0) {
            tmp___104 = jit->ip;
            (jit->ip) ++;
            *tmp___104 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          } else
          if ((int )op->arg_size == 1) {
            tmp___104 = jit->ip;
            (jit->ip) ++;
            *tmp___104 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          }
          break;
        }
        switch ((int )op->arg_size) {
        case 1: 
        tmp___105 = jit->ip;
        (jit->ip) ++;
        *tmp___105 = (unsigned char)138;
        break;
        case 8: 
        case 4: 
        case 2: 
        tmp___106 = jit->ip;
        (jit->ip) ++;
        *tmp___106 = (unsigned char)139;
        break;
        default: 
        tmp___107 = __builtin_expect(1L, 0L);
        if (tmp___107) {
          __assert_rtn("emit_ldx_op", "./jitter-amd64.c", 2911, "0");
        }
        }
        while (1) {
          if (a2 == 16L) {
            while (1) {
              tmp___108 = jit->ip;
              (jit->ip) ++;
              *tmp___108 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb___8.val = (int )a3;
              tmp___109 = jit->ip;
              (jit->ip) ++;
              *tmp___109 = imb___8.b[0];
              tmp___110 = jit->ip;
              (jit->ip) ++;
              *tmp___110 = imb___8.b[1];
              tmp___111 = jit->ip;
              (jit->ip) ++;
              *tmp___111 = imb___8.b[2];
              tmp___112 = jit->ip;
              (jit->ip) ++;
              *tmp___112 = imb___8.b[3];
              break;
            }
          } else {
            while (1) {
              if ((a2 & 7L) == 4L) {
                if (a3 == 0L) {
                  while (1) {
                    tmp___113 = jit->ip;
                    (jit->ip) ++;
                    *tmp___113 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___114 = jit->ip;
                    (jit->ip) ++;
                    *tmp___114 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                } else
                if ((int )a3 >= -128) {
                  if ((int )a3 <= 127) {
                    while (1) {
                      tmp___115 = jit->ip;
                      (jit->ip) ++;
                      *tmp___115 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                      break;
                    }
                    while (1) {
                      tmp___116 = jit->ip;
                      (jit->ip) ++;
                      *tmp___116 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(a3 & 255L);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L___5;
                  }
                } else {
                  _L___5: /* CIL Label */ 
                  while (1) {
                    tmp___117 = jit->ip;
                    (jit->ip) ++;
                    *tmp___117 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___118 = jit->ip;
                    (jit->ip) ++;
                    *tmp___118 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    imb___9.val = (int )a3;
                    tmp___119 = jit->ip;
                    (jit->ip) ++;
                    *tmp___119 = imb___9.b[0];
                    tmp___120 = jit->ip;
                    (jit->ip) ++;
                    *tmp___120 = imb___9.b[1];
                    tmp___121 = jit->ip;
                    (jit->ip) ++;
                    *tmp___121 = imb___9.b[2];
                    tmp___122 = jit->ip;
                    (jit->ip) ++;
                    *tmp___122 = imb___9.b[3];
                    break;
                  }
                }
                break;
              }
              if (a3 == 0L) {
                if ((a2 & 7L) != 5L) {
                  while (1) {
                    tmp___123 = jit->ip;
                    (jit->ip) ++;
                    *tmp___123 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                    break;
                  }
                  break;
                }
              }
              if ((int )a3 >= -128) {
                if ((int )a3 <= 127) {
                  while (1) {
                    tmp___124 = jit->ip;
                    (jit->ip) ++;
                    *tmp___124 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(a3 & 255L);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___6;
                }
              } else {
                _L___6: /* CIL Label */ 
                while (1) {
                  tmp___125 = jit->ip;
                  (jit->ip) ++;
                  *tmp___125 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                  break;
                }
                while (1) {
                  imb___10.val = (int )a3;
                  tmp___126 = jit->ip;
                  (jit->ip) ++;
                  *tmp___126 = imb___10.b[0];
                  tmp___127 = jit->ip;
                  (jit->ip) ++;
                  *tmp___127 = imb___10.b[1];
                  tmp___128 = jit->ip;
                  (jit->ip) ++;
                  *tmp___128 = imb___10.b[2];
                  tmp___129 = jit->ip;
                  (jit->ip) ++;
                  *tmp___129 = imb___10.b[3];
                  break;
                }
              }
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      if (a1 > 7L) {
        tmp___130 = 4;
      } else {
        tmp___130 = 0;
      }
      if (a2 > 7L) {
        tmp___131 = 1;
      } else {
        tmp___131 = 0;
      }
      _amd64_rex_bits___4 = (unsigned char )((8 | tmp___130) | tmp___131);
      if ((int )_amd64_rex_bits___4 != 0) {
        tmp___132 = jit->ip;
        (jit->ip) ++;
        *tmp___132 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
      }
      break;
    }
    tmp___133 = jit->ip;
    (jit->ip) ++;
    *tmp___133 = (unsigned char)15;
    switch ((int )op->arg_size) {
    case 1: 
    tmp___134 = jit->ip;
    (jit->ip) ++;
    *tmp___134 = (unsigned char)182;
    break;
    case 2: 
    tmp___135 = jit->ip;
    (jit->ip) ++;
    *tmp___135 = (unsigned char)183;
    break;
    default: 
    tmp___136 = __builtin_expect(1L, 0L);
    if (tmp___136) {
      __assert_rtn("emit_ldx_op", "./jitter-amd64.c", 2911, "0");
    }
    }
    while (1) {
      if ((a2 & 7L) == 4L) {
        if (a3 == 0L) {
          while (1) {
            tmp___137 = jit->ip;
            (jit->ip) ++;
            *tmp___137 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___138 = jit->ip;
            (jit->ip) ++;
            *tmp___138 = (unsigned char )((4 << 3) | 4);
            break;
          }
        } else
        if ((int )a3 >= -128) {
          if ((int )a3 <= 127) {
            while (1) {
              tmp___139 = jit->ip;
              (jit->ip) ++;
              *tmp___139 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___140 = jit->ip;
              (jit->ip) ++;
              *tmp___140 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(a3 & 255L);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___8;
          }
        } else {
          _L___8: /* CIL Label */ 
          while (1) {
            tmp___141 = jit->ip;
            (jit->ip) ++;
            *tmp___141 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            tmp___142 = jit->ip;
            (jit->ip) ++;
            *tmp___142 = (unsigned char )((4 << 3) | 4);
            break;
          }
          while (1) {
            imb___11.val = (int )a3;
            tmp___143 = jit->ip;
            (jit->ip) ++;
            *tmp___143 = imb___11.b[0];
            tmp___144 = jit->ip;
            (jit->ip) ++;
            *tmp___144 = imb___11.b[1];
            tmp___145 = jit->ip;
            (jit->ip) ++;
            *tmp___145 = imb___11.b[2];
            tmp___146 = jit->ip;
            (jit->ip) ++;
            *tmp___146 = imb___11.b[3];
            break;
          }
        }
        break;
      }
      if (a3 == 0L) {
        if ((a2 & 7L) != 5L) {
          while (1) {
            tmp___147 = jit->ip;
            (jit->ip) ++;
            *tmp___147 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
            break;
          }
          break;
        }
      }
      if ((int )a3 >= -128) {
        if ((int )a3 <= 127) {
          while (1) {
            tmp___148 = jit->ip;
            (jit->ip) ++;
            *tmp___148 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(a3 & 255L);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L___9;
        }
      } else {
        _L___9: /* CIL Label */ 
        while (1) {
          tmp___149 = jit->ip;
          (jit->ip) ++;
          *tmp___149 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
          break;
        }
        while (1) {
          imb___12.val = (int )a3;
          tmp___150 = jit->ip;
          (jit->ip) ++;
          *tmp___150 = imb___12.b[0];
          tmp___151 = jit->ip;
          (jit->ip) ++;
          *tmp___151 = imb___12.b[1];
          tmp___152 = jit->ip;
          (jit->ip) ++;
          *tmp___152 = imb___12.b[2];
          tmp___153 = jit->ip;
          (jit->ip) ++;
          *tmp___153 = imb___12.b[3];
          break;
        }
      }
      break;
    }
    break;
  }
  break;
  case 873: 
  while (1) {
    if ((int )op->arg_size == 4) {
      while (1) {
        while (1) {
          if (a1 > 7L) {
            tmp___154 = 4;
          } else {
            tmp___154 = 0;
          }
          if (a3 > 7L) {
            tmp___155 = 2;
          } else {
            tmp___155 = 0;
          }
          if (a2 > 7L) {
            tmp___156 = 1;
          } else {
            tmp___156 = 0;
          }
          _amd64_rex_bits___5 = (unsigned char )(((8 | tmp___154) | tmp___155) | tmp___156);
          if ((int )_amd64_rex_bits___5 != 0) {
            tmp___157 = jit->ip;
            (jit->ip) ++;
            *tmp___157 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
          }
          break;
        }
        tmp___158 = jit->ip;
        (jit->ip) ++;
        *tmp___158 = (unsigned char)99;
        while (1) {
          if ((a2 & 7L) == -1L) {
            while (1) {
              tmp___159 = jit->ip;
              (jit->ip) ++;
              *tmp___159 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___160 = jit->ip;
              (jit->ip) ++;
              *tmp___160 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb___13.val = 0;
              tmp___161 = jit->ip;
              (jit->ip) ++;
              *tmp___161 = imb___13.b[0];
              tmp___162 = jit->ip;
              (jit->ip) ++;
              *tmp___162 = imb___13.b[1];
              tmp___163 = jit->ip;
              (jit->ip) ++;
              *tmp___163 = imb___13.b[2];
              tmp___164 = jit->ip;
              (jit->ip) ++;
              *tmp___164 = imb___13.b[3];
              break;
            }
          } else
          if ((a2 & 7L) != 5L) {
            while (1) {
              tmp___165 = jit->ip;
              (jit->ip) ++;
              *tmp___165 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___166 = jit->ip;
              (jit->ip) ++;
              *tmp___166 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
              break;
            }
          } else {
            while (1) {
              tmp___167 = jit->ip;
              (jit->ip) ++;
              *tmp___167 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___168 = jit->ip;
              (jit->ip) ++;
              *tmp___168 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)0;
              (jit->ip) ++;
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      if (a1 > 7L) {
        tmp___175 = 4;
      } else {
        tmp___175 = 0;
      }
      if (a3 > 7L) {
        tmp___176 = 2;
      } else {
        tmp___176 = 0;
      }
      if (a2 > 7L) {
        tmp___177 = 1;
      } else {
        tmp___177 = 0;
      }
      _amd64_rex_bits___6 = (unsigned char )(((8 | tmp___175) | tmp___176) | tmp___177);
      if ((int )_amd64_rex_bits___6 != 0) {
        tmp___178 = jit->ip;
        (jit->ip) ++;
        *tmp___178 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
      }
      break;
    }
    tmp___179 = jit->ip;
    (jit->ip) ++;
    *tmp___179 = (unsigned char)15;
    switch ((int )op->arg_size) {
    case 1: 
    tmp___180 = jit->ip;
    (jit->ip) ++;
    *tmp___180 = (unsigned char)190;
    break;
    case 2: 
    tmp___181 = jit->ip;
    (jit->ip) ++;
    *tmp___181 = (unsigned char)191;
    break;
    default: 
    tmp___182 = __builtin_expect(1L, 0L);
    if (tmp___182) {
      __assert_rtn("emit_ldx_op", "./jitter-amd64.c", 2912, "0");
    }
    }
    while (1) {
      if ((a2 & 7L) == -1L) {
        while (1) {
          tmp___183 = jit->ip;
          (jit->ip) ++;
          *tmp___183 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___184 = jit->ip;
          (jit->ip) ++;
          *tmp___184 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
          break;
        }
        while (1) {
          imb___15.val = 0;
          tmp___185 = jit->ip;
          (jit->ip) ++;
          *tmp___185 = imb___15.b[0];
          tmp___186 = jit->ip;
          (jit->ip) ++;
          *tmp___186 = imb___15.b[1];
          tmp___187 = jit->ip;
          (jit->ip) ++;
          *tmp___187 = imb___15.b[2];
          tmp___188 = jit->ip;
          (jit->ip) ++;
          *tmp___188 = imb___15.b[3];
          break;
        }
      } else
      if ((a2 & 7L) != 5L) {
        while (1) {
          tmp___189 = jit->ip;
          (jit->ip) ++;
          *tmp___189 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___190 = jit->ip;
          (jit->ip) ++;
          *tmp___190 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
          break;
        }
      } else {
        while (1) {
          tmp___191 = jit->ip;
          (jit->ip) ++;
          *tmp___191 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
          break;
        }
        while (1) {
          tmp___192 = jit->ip;
          (jit->ip) ++;
          *tmp___192 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)0;
          (jit->ip) ++;
          break;
        }
      }
      break;
    }
    break;
  }
  break;
  case 877: 
  while (1) {
    if ((int )op->arg_size == 8) {
      goto _L___10;
    } else
    if ((int )op->arg_size == 4) {
      _L___10: /* CIL Label */ 
      while (1) {
        while (1) {
          if ((int )op->arg_size > 4) {
            tmp___199 = 8;
          } else {
            tmp___199 = 0;
          }
          if (a1 > 7L) {
            tmp___200 = 4;
          } else {
            tmp___200 = 0;
          }
          if (a3 > 7L) {
            tmp___201 = 2;
          } else {
            tmp___201 = 0;
          }
          if (a2 > 7L) {
            tmp___202 = 1;
          } else {
            tmp___202 = 0;
          }
          _amd64_rex_bits___7 = (unsigned char )(((tmp___199 | tmp___200) | tmp___201) | tmp___202);
          if ((int )_amd64_rex_bits___7 != 0) {
            tmp___203 = jit->ip;
            (jit->ip) ++;
            *tmp___203 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
          } else
          if ((int )op->arg_size == 1) {
            tmp___203 = jit->ip;
            (jit->ip) ++;
            *tmp___203 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
          }
          break;
        }
        while (1) {
          if ((int )op->arg_size == 8) {
            tmp___204 = 4;
          } else {
            tmp___204 = (int )op->arg_size;
          }
          switch (tmp___204) {
          case 1: 
          tmp___205 = jit->ip;
          (jit->ip) ++;
          *tmp___205 = (unsigned char)138;
          break;
          case 2: 
          tmp___206 = jit->ip;
          (jit->ip) ++;
          *tmp___206 = (unsigned char)102;
          case 4: 
          tmp___207 = jit->ip;
          (jit->ip) ++;
          *tmp___207 = (unsigned char)139;
          break;
          default: 
          tmp___208 = __builtin_expect(1L, 0L);
          if (tmp___208) {
            __assert_rtn("emit_ldx_op", "./jitter-amd64.c", 2913, "0");
          }
          }
          while (1) {
            if ((a2 & 7L) == -1L) {
              while (1) {
                tmp___209 = jit->ip;
                (jit->ip) ++;
                *tmp___209 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___210 = jit->ip;
                (jit->ip) ++;
                *tmp___210 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
                break;
              }
              while (1) {
                imb___17.val = 0;
                tmp___211 = jit->ip;
                (jit->ip) ++;
                *tmp___211 = imb___17.b[0];
                tmp___212 = jit->ip;
                (jit->ip) ++;
                *tmp___212 = imb___17.b[1];
                tmp___213 = jit->ip;
                (jit->ip) ++;
                *tmp___213 = imb___17.b[2];
                tmp___214 = jit->ip;
                (jit->ip) ++;
                *tmp___214 = imb___17.b[3];
                break;
              }
            } else
            if ((a2 & 7L) != 5L) {
              while (1) {
                tmp___215 = jit->ip;
                (jit->ip) ++;
                *tmp___215 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___216 = jit->ip;
                (jit->ip) ++;
                *tmp___216 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
                break;
              }
            } else {
              while (1) {
                tmp___217 = jit->ip;
                (jit->ip) ++;
                *tmp___217 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                break;
              }
              while (1) {
                tmp___218 = jit->ip;
                (jit->ip) ++;
                *tmp___218 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      if (a1 > 7L) {
        tmp___225 = 4;
      } else {
        tmp___225 = 0;
      }
      if (a3 > 7L) {
        tmp___226 = 2;
      } else {
        tmp___226 = 0;
      }
      if (a2 > 7L) {
        tmp___227 = 1;
      } else {
        tmp___227 = 0;
      }
      _amd64_rex_bits___8 = (unsigned char )(((8 | tmp___225) | tmp___226) | tmp___227);
      if ((int )_amd64_rex_bits___8 != 0) {
        tmp___228 = jit->ip;
        (jit->ip) ++;
        *tmp___228 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
      }
      break;
    }
    tmp___229 = jit->ip;
    (jit->ip) ++;
    *tmp___229 = (unsigned char)15;
    switch ((int )op->arg_size) {
    case 1: 
    tmp___230 = jit->ip;
    (jit->ip) ++;
    *tmp___230 = (unsigned char)182;
    break;
    case 2: 
    tmp___231 = jit->ip;
    (jit->ip) ++;
    *tmp___231 = (unsigned char)183;
    break;
    default: 
    tmp___232 = __builtin_expect(1L, 0L);
    if (tmp___232) {
      __assert_rtn("emit_ldx_op", "./jitter-amd64.c", 2913, "0");
    }
    }
    while (1) {
      if ((a2 & 7L) == -1L) {
        while (1) {
          tmp___233 = jit->ip;
          (jit->ip) ++;
          *tmp___233 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___234 = jit->ip;
          (jit->ip) ++;
          *tmp___234 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
          break;
        }
        while (1) {
          imb___19.val = 0;
          tmp___235 = jit->ip;
          (jit->ip) ++;
          *tmp___235 = imb___19.b[0];
          tmp___236 = jit->ip;
          (jit->ip) ++;
          *tmp___236 = imb___19.b[1];
          tmp___237 = jit->ip;
          (jit->ip) ++;
          *tmp___237 = imb___19.b[2];
          tmp___238 = jit->ip;
          (jit->ip) ++;
          *tmp___238 = imb___19.b[3];
          break;
        }
      } else
      if ((a2 & 7L) != 5L) {
        while (1) {
          tmp___239 = jit->ip;
          (jit->ip) ++;
          *tmp___239 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___240 = jit->ip;
          (jit->ip) ++;
          *tmp___240 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
          break;
        }
      } else {
        while (1) {
          tmp___241 = jit->ip;
          (jit->ip) ++;
          *tmp___241 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
          break;
        }
        while (1) {
          tmp___242 = jit->ip;
          (jit->ip) ++;
          *tmp___242 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)0;
          (jit->ip) ++;
          break;
        }
      }
      break;
    }
    break;
  }
  break;
  default: 
  tmp___249 = __builtin_expect(1L, 0L);
  if (tmp___249) {
    __assert_rtn("emit_ldx_op", "./jitter-amd64.c", 2914, "0");
  }
  }
  return;
}
}
__inline static void jit_op_append(jit_op *op , jit_op *appended ) 
{ 


  {
  appended->next = op->next;
  if ((unsigned long )op->next != (unsigned long )((void *)0)) {
    (op->next)->prev = appended;
  }
  appended->prev = op;
  op->next = appended;
  return;
}
}
static int assign_jmp(jit_op *op , struct jit_reg_allocator *al ) 
{ 
  jit_value reg ;
  int i ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp ;
  int tmp___0 ;
  int i___0 ;
  jit_hw_reg *hreg___0 ;
  jit_hw_reg *tmp___1 ;
  int tmp___2 ;

  {
  if ((int )op->code == 810) {
    return (0);
  }
  i = 0;
  while (i < al->gp_reg_cnt) {
    tmp = rmap_is_associated(op->regmap, (al->gp_regs + i)->id, 0, & reg);
    hreg = tmp;
    if (hreg) {
      tmp___0 = jit_set_get(op->live_out, (int )reg);
      if (tmp___0) {
        sync_reg(op, hreg, reg);
      }
    }
    i ++;
  }
  i___0 = 0;
  while (i___0 < al->fp_reg_cnt) {
    tmp___1 = rmap_is_associated(op->regmap, (al->fp_regs + i___0)->id, 1, & reg);
    hreg___0 = tmp___1;
    if (hreg___0) {
      tmp___2 = jit_set_get(op->live_out, (int )reg);
      if (tmp___2) {
        sync_reg(op, hreg___0, reg);
      }
    }
    i___0 ++;
  }
  return (0);
}
}
void jit_messager(struct jit *j , char *s , int i ) 
{ 
  struct jit_debug_info *tmp ;

  {
  tmp = jit_debug_info_new("head.c", "jit_messager", 23);
  jit_add_op(j, (unsigned short)321, (unsigned char )((1 << 2) | 2), (jit_value )s,
             (long )((i & 268435455) << 4), 0L, (unsigned char)0, tmp);
  return;
}
}
__inline static void initialize_code_refs(struct code_refs_cache *code_refs , struct jit_func_info *func_info ) 
{ 
  jit_op *op ;
  void *tmp ;
  int i ;
  int tmp___0 ;

  {
  op = (func_info->first_op)->next;
  code_refs->size = 0;
  while (1) {
    if (op) {
      if (! ((unsigned int )((jit_opcode )((int )op->code & 65528)) != 536U)) {
        break;
      }
    } else {
      break;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 832U) {
      (code_refs->size) ++;
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 520U) {
      (code_refs->size) ++;
    }
    op = op->next;
  }
  tmp = malloc(sizeof(jit_op *) * (unsigned long )code_refs->size);
  code_refs->ops = (jit_op **)tmp;
  op = (func_info->first_op)->next;
  i = 0;
  while (1) {
    if (op) {
      if (! ((unsigned int )((jit_opcode )((int )op->code & 65528)) != 536U)) {
        break;
      }
    } else {
      break;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 832U) {
      tmp___0 = i;
      i ++;
      *(code_refs->ops + tmp___0) = op;
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 520U) {
      tmp___0 = i;
      i ++;
      *(code_refs->ops + tmp___0) = op;
    }
    op = op->next;
  }
  return;
}
}
__inline extern int ( __attribute__((__always_inline__)) __darwin_check_fd_set)(int _a ,
                                                                                void const   *_b ) 
{ 
  int tmp ;

  {
  if ((uintptr_t )(& __darwin_check_fd_set_overflow) != 0UL) {
    tmp = __darwin_check_fd_set_overflow(_a, _b, 0);
    return (tmp);
  } else {
    return (1);
  }
}
}
__inline extern int isideogram(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 524288UL);
  return (tmp);
}
}
static char *platform_id(void) 
{ 


  {
  return ((char *)"amd64");
}
}
__inline extern int ispunct(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 8192UL);
  return (tmp);
}
}
__inline extern int toupper(int _c ) 
{ 
  __darwin_ct_rune_t tmp ;

  {
  tmp = __toupper(_c);
  return (tmp);
}
}
static int jit_tree_subset(jit_tree *root , jit_tree *n ) 
{ 
  jit_tree *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  if ((unsigned long )n == (unsigned long )((void *)0)) {
    return (1);
  }
  tmp = jit_tree_search(root, n->key);
  if (tmp) {
    tmp___0 = jit_tree_subset(root, n->left);
    if (tmp___0) {
      tmp___1 = jit_tree_subset(root, n->right);
      if (tmp___1) {
        tmp___2 = 1;
      } else {
        tmp___2 = 0;
      }
    } else {
      tmp___2 = 0;
    }
  } else {
    tmp___2 = 0;
  }
  return (tmp___2);
}
}
__inline static int jit_set_equal(jit_set *s1 , jit_set *s2 ) 
{ 
  int tmp ;

  {
  tmp = jit_tree_equal(s1->root, s2->root);
  return (tmp);
}
}
static void load_reg(struct jit_op *op , jit_hw_reg *hreg , long reg ) 
{ 


  {
  insert_reg_op(432, op, (jit_value )hreg->id, reg);
  return;
}
}
static void ob_free(struct output_buf *ob ) 
{ 


  {
  free((void *)ob->buf);
  free((void *)ob);
  return;
}
}
static void emit_sse_floor(struct jit *jit , jit_value a1 , jit_value a2 , int floor ) 
{ 
  int tmp_reg ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___15 ;
  int tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___22 ;
  int tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___29 ;
  int tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  x86_imm_buf imb ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___54 ;
  int tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char _amd64_rex_bits___9 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char _amd64_rex_bits___10 ;
  int tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char _amd64_rex_bits___11 ;
  int tmp___79 ;
  int tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char _amd64_rex_bits___12 ;
  int tmp___86 ;
  int tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;

  {
  if (a2 == 7L) {
    tmp = 0;
  } else {
    tmp = 7;
  }
  tmp_reg = tmp;
  while (1) {
    while (1) {
      tmp___0 = jit->ip;
      (jit->ip) ++;
      *tmp___0 = (unsigned char)102;
      while (1) {
        if (a2 > 7L) {
          tmp___1 = 4;
        } else {
          tmp___1 = 0;
        }
        if (a2 > 7L) {
          tmp___2 = 1;
        } else {
          tmp___2 = 0;
        }
        _amd64_rex_bits = (unsigned char )(tmp___1 | tmp___2);
        if ((int )_amd64_rex_bits != 0) {
          tmp___3 = jit->ip;
          (jit->ip) ++;
          *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)15;
      tmp___5 = jit->ip;
      (jit->ip) ++;
      *tmp___5 = (unsigned char)198;
      while (1) {
        while (1) {
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      *(jit->ip) = (unsigned char)0;
      (jit->ip) ++;
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      tmp___7 = jit->ip;
      (jit->ip) ++;
      *tmp___7 = (unsigned char)102;
      while (1) {
        if (tmp_reg > 7) {
          tmp___8 = 4;
        } else {
          tmp___8 = 0;
        }
        if (tmp_reg > 7) {
          tmp___9 = 1;
        } else {
          tmp___9 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(tmp___8 | tmp___9);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___10 = jit->ip;
          (jit->ip) ++;
          *tmp___10 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      tmp___11 = jit->ip;
      (jit->ip) ++;
      *tmp___11 = (unsigned char)15;
      tmp___12 = jit->ip;
      (jit->ip) ++;
      *tmp___12 = (unsigned char)198;
      while (1) {
        while (1) {
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = (unsigned char )(((3 << 6) | ((tmp_reg & 7) << 3)) | (tmp_reg & 7));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      *(jit->ip) = (unsigned char)0;
      (jit->ip) ++;
      break;
    }
    break;
  }
  while (1) {
    tmp___14 = jit->ip;
    (jit->ip) ++;
    *tmp___14 = (unsigned char)242;
    while (1) {
      if (a1 > 7L) {
        tmp___15 = 4;
      } else {
        tmp___15 = 0;
      }
      if (a2 > 7L) {
        tmp___16 = 1;
      } else {
        tmp___16 = 0;
      }
      _amd64_rex_bits___1 = (unsigned char )((8 | tmp___15) | tmp___16);
      if ((int )_amd64_rex_bits___1 != 0) {
        tmp___17 = jit->ip;
        (jit->ip) ++;
        *tmp___17 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
      }
      break;
    }
    tmp___18 = jit->ip;
    (jit->ip) ++;
    *tmp___18 = (unsigned char)15;
    tmp___19 = jit->ip;
    (jit->ip) ++;
    *tmp___19 = (unsigned char)44;
    while (1) {
      while (1) {
        tmp___20 = jit->ip;
        (jit->ip) ++;
        *tmp___20 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
        break;
      }
      break;
    }
    break;
  }
  while (1) {
    tmp___21 = jit->ip;
    (jit->ip) ++;
    *tmp___21 = (unsigned char)242;
    while (1) {
      if (tmp_reg > 7) {
        tmp___22 = 4;
      } else {
        tmp___22 = 0;
      }
      if (a1 > 7L) {
        tmp___23 = 1;
      } else {
        tmp___23 = 0;
      }
      _amd64_rex_bits___2 = (unsigned char )((8 | tmp___22) | tmp___23);
      if ((int )_amd64_rex_bits___2 != 0) {
        tmp___24 = jit->ip;
        (jit->ip) ++;
        *tmp___24 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
      }
      break;
    }
    tmp___25 = jit->ip;
    (jit->ip) ++;
    *tmp___25 = (unsigned char)15;
    tmp___26 = jit->ip;
    (jit->ip) ++;
    *tmp___26 = (unsigned char)42;
    while (1) {
      while (1) {
        tmp___27 = jit->ip;
        (jit->ip) ++;
        *tmp___27 = (unsigned char )((long )((3 << 6) | ((tmp_reg & 7) << 3)) | (a1 & 7L));
        break;
      }
      break;
    }
    break;
  }
  if (floor) {
    while (1) {
      tmp___28 = jit->ip;
      (jit->ip) ++;
      *tmp___28 = (unsigned char)102;
      while (1) {
        if (a2 > 7L) {
          tmp___29 = 4;
        } else {
          tmp___29 = 0;
        }
        if (tmp_reg > 7) {
          tmp___30 = 1;
        } else {
          tmp___30 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )(tmp___29 | tmp___30);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___31 = jit->ip;
          (jit->ip) ++;
          *tmp___31 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      tmp___32 = jit->ip;
      (jit->ip) ++;
      *tmp___32 = (unsigned char)15;
      tmp___33 = jit->ip;
      (jit->ip) ++;
      *tmp___33 = (unsigned char)47;
      while (1) {
        while (1) {
          tmp___34 = jit->ip;
          (jit->ip) ++;
          *tmp___34 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (long )(tmp_reg & 7));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (a1 > 7L) {
          tmp___35 = 1;
        } else {
          tmp___35 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )(8 | tmp___35);
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___36 = jit->ip;
          (jit->ip) ++;
          *tmp___36 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      tmp___37 = jit->ip;
      (jit->ip) ++;
      *tmp___37 = (unsigned char)131;
      while (1) {
        while (1) {
          tmp___38 = jit->ip;
          (jit->ip) ++;
          *tmp___38 = (unsigned char )((long )((3 << 6) | (3 << 3)) | (a1 & 7L));
          break;
        }
        break;
      }
      while (1) {
        *(jit->ip) = (unsigned char)0;
        (jit->ip) ++;
        break;
      }
      break;
    }
  } else {
    while (1) {
      tmp___53 = jit->ip;
      (jit->ip) ++;
      *tmp___53 = (unsigned char)102;
      while (1) {
        if (tmp_reg > 7) {
          tmp___54 = 4;
        } else {
          tmp___54 = 0;
        }
        if (a2 > 7L) {
          tmp___55 = 1;
        } else {
          tmp___55 = 0;
        }
        _amd64_rex_bits___7 = (unsigned char )(tmp___54 | tmp___55);
        if ((int )_amd64_rex_bits___7 != 0) {
          tmp___56 = jit->ip;
          (jit->ip) ++;
          *tmp___56 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
        }
        break;
      }
      tmp___57 = jit->ip;
      (jit->ip) ++;
      *tmp___57 = (unsigned char)15;
      tmp___58 = jit->ip;
      (jit->ip) ++;
      *tmp___58 = (unsigned char)47;
      while (1) {
        while (1) {
          tmp___59 = jit->ip;
          (jit->ip) ++;
          *tmp___59 = (unsigned char )((long )((3 << 6) | ((tmp_reg & 7) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (a1 > 7L) {
          tmp___60 = 1;
        } else {
          tmp___60 = 0;
        }
        _amd64_rex_bits___8 = (unsigned char )(8 | tmp___60);
        if ((int )_amd64_rex_bits___8 != 0) {
          tmp___61 = jit->ip;
          (jit->ip) ++;
          *tmp___61 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
        }
        break;
      }
      tmp___62 = jit->ip;
      (jit->ip) ++;
      *tmp___62 = (unsigned char)131;
      while (1) {
        while (1) {
          tmp___63 = jit->ip;
          (jit->ip) ++;
          *tmp___63 = (unsigned char )((long )((3 << 6) | (2 << 3)) | (a1 & 7L));
          break;
        }
        break;
      }
      while (1) {
        *(jit->ip) = (unsigned char)0;
        (jit->ip) ++;
        break;
      }
      break;
    }
  }
  while (1) {
    while (1) {
      tmp___78 = jit->ip;
      (jit->ip) ++;
      *tmp___78 = (unsigned char)102;
      while (1) {
        if (a2 > 7L) {
          tmp___79 = 4;
        } else {
          tmp___79 = 0;
        }
        if (a2 > 7L) {
          tmp___80 = 1;
        } else {
          tmp___80 = 0;
        }
        _amd64_rex_bits___11 = (unsigned char )(tmp___79 | tmp___80);
        if ((int )_amd64_rex_bits___11 != 0) {
          tmp___81 = jit->ip;
          (jit->ip) ++;
          *tmp___81 = (unsigned char )(64 | (int )_amd64_rex_bits___11);
        }
        break;
      }
      tmp___82 = jit->ip;
      (jit->ip) ++;
      *tmp___82 = (unsigned char)15;
      tmp___83 = jit->ip;
      (jit->ip) ++;
      *tmp___83 = (unsigned char)198;
      while (1) {
        while (1) {
          tmp___84 = jit->ip;
          (jit->ip) ++;
          *tmp___84 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      *(jit->ip) = (unsigned char)1;
      (jit->ip) ++;
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      tmp___85 = jit->ip;
      (jit->ip) ++;
      *tmp___85 = (unsigned char)102;
      while (1) {
        if (tmp_reg > 7) {
          tmp___86 = 4;
        } else {
          tmp___86 = 0;
        }
        if (tmp_reg > 7) {
          tmp___87 = 1;
        } else {
          tmp___87 = 0;
        }
        _amd64_rex_bits___12 = (unsigned char )(tmp___86 | tmp___87);
        if ((int )_amd64_rex_bits___12 != 0) {
          tmp___88 = jit->ip;
          (jit->ip) ++;
          *tmp___88 = (unsigned char )(64 | (int )_amd64_rex_bits___12);
        }
        break;
      }
      tmp___89 = jit->ip;
      (jit->ip) ++;
      *tmp___89 = (unsigned char)15;
      tmp___90 = jit->ip;
      (jit->ip) ++;
      *tmp___90 = (unsigned char)198;
      while (1) {
        while (1) {
          tmp___91 = jit->ip;
          (jit->ip) ++;
          *tmp___91 = (unsigned char )(((3 << 6) | ((tmp_reg & 7) << 3)) | (tmp_reg & 7));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      *(jit->ip) = (unsigned char)1;
      (jit->ip) ++;
      break;
    }
    break;
  }
  return;
}
}
__inline static void print_arg(struct jit_disasm *disasm , struct output_buf *buf ,
                               struct jit_op *op , int arg ) 
{ 
  long a ;
  char value[256] ;

  {
  a = op->arg[arg - 1];
  if ((((int )op->spec >> (arg - 1) * 2) & 3) == 2) {
    ob_printf(buf, (char const   *)disasm->generic_value_template, a);
  }
  if ((((int )op->spec >> (arg - 1) * 2) & 3) == 1) {
    jit_get_reg_name(disasm, value, (int )a);
    ob_append(buf, value);
  } else
  if ((((int )op->spec >> (arg - 1) * 2) & 3) == 3) {
    jit_get_reg_name(disasm, value, (int )a);
    ob_append(buf, value);
  }
  return;
}
}
__inline static void print_op_bytes(FILE *f , struct jit *jit , jit_op *op ) 
{ 
  int i ;

  {
  i = 0;
  while ((unsigned long )i < op->code_length) {
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)" %02x",
            (int )*(jit->buf + (op->code_offset + (unsigned long )i)));
    i ++;
  }
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"\n.nl\n");
  return;
}
}
static void emit_memcpy(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                        jit_value a3 ) 
{ 


  {
  emit_transfer_init(jit, op, a1, a2, a3, 1);
  emit_transfer_loop(jit, op);
  return;
}
}
__inline extern int isxdigit(int _c ) 
{ 
  __darwin_ct_rune_t tmp ;

  {
  tmp = __isctype(_c, 65536UL);
  return (tmp);
}
}
static int force_spill(jit_op *op ) 
{ 
  jit_value reg ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp ;

  {
  reg = op->arg[0];
  tmp = rmap_get(op->regmap, reg);
  hreg = tmp;
  if (hreg) {
    unload_reg(op, hreg, reg);
    rmap_unassoc(op->regmap, reg);
  }
  return (1);
}
}
static jit_tree *jit_tree_insert(jit_tree *root , jit_tree_key key , jit_tree_value value ,
                                 int *found ) 
{ 


  {
  if (found) {
    *found = 0;
  }
  root = node_insert(root, key, value, found);
  root->color = 0;
  return (root);
}
}
static int is_transfer_op(jit_op *op ) 
{ 
  jit_opcode code ;
  int tmp ;

  {
  code = (jit_opcode )((int )op->code & 65528);
  if ((unsigned int )code == 464U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 336U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 896U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 792U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 264U) {
    tmp = 1;
  } else {
    tmp = 0;
  }
  return (tmp);
}
}
static void free_labels(jit_label *lab ) 
{ 


  {
  if ((unsigned long )lab == (unsigned long )((void *)0)) {
    return;
  }
  free_labels(lab->next);
  free((void *)lab);
  return;
}
}
void jit_disasm_compilable_i$nit(void) 
{ 


  {
  jit_disasm_compilable.indent_template = (char *)"    ";
  jit_disasm_compilable.reg_template = (char *)"R(%i)";
  jit_disasm_compilable.freg_template = (char *)"FR(%i)";
  jit_disasm_compilable.arg_template = (char *)"arg(%i)";
  jit_disasm_compilable.farg_template = (char *)"farg(%i)";
  jit_disasm_compilable.reg_fp_template = (char *)"R_FP";
  jit_disasm_compilable.reg_out_template = (char *)"R_OUT";
  jit_disasm_compilable.reg_imm_template = (char *)"R_IMM";
  jit_disasm_compilable.reg_fimm_template = (char *)"FR_IMM";
  jit_disasm_compilable.reg_unknown_template = (char *)"(unknown reg.)";
  jit_disasm_compilable.label_template = (char *)"label_%03i";
  jit_disasm_compilable.label_forward_template = (char *)"/* label_%03i */ JIT_FORWARD";
  jit_disasm_compilable.generic_addr_template = (char *)"<addr: 0x%lx>";
  jit_disasm_compilable.generic_value_template = (char *)"%li";
}
}
__inline static void jit_flw_initialize(struct jit *jit ) 
{ 
  struct jit_func_info *func_info ;
  jit_op *op ;
  jit_op *tmp ;
  int i ;
  int arg_id ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while (op) {
    op->live_in = jit_set_new();
    op->live_out = jit_set_new();
    i = 0;
    while (i < 3) {
      if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 1) {
        jit_set_add(op->live_in, (int )op->arg[i]);
      }
      i ++;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 536U) {
      func_info = (struct jit_func_info *)op->arg[1];
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 728U) {
      arg_id = (int )op->arg[1];
      if ((unsigned int )(func_info->args + arg_id)->type != 2U) {
        jit_set_add(op->live_in, (3 << 1) | ((arg_id & 268435455) << 4));
      } else {
        jit_set_add(op->live_in, (1 | (3 << 1)) | ((arg_id & 268435455) << 4));
        if ((func_info->args + arg_id)->overflow) {
          jit_set_add(op->live_in, ((1 | (3 << 1)) | (1 << 3)) | ((arg_id & 268435455) << 4));
        }
      }
    }
    op = op->next;
  }
  return;
}
}
static void spill_ret_retreg(jit_op *op , jit_hw_reg *ret_reg ) 
{ 
  jit_value r ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp ;

  {
  if (ret_reg) {
    tmp = rmap_is_associated(op->regmap, ret_reg->id, (int )ret_reg->fp, & r);
    hreg = tmp;
    if (hreg) {
      rmap_unassoc(op->regmap, r);
    }
  }
  return;
}
}
__inline static void funcall_prepare(struct jit *jit , jit_op *op , int count ) 
{ 
  void *tmp ;

  {
  tmp = malloc(sizeof(struct jit_out_arg ) * (unsigned long )count);
  jit->prepared_args.args = (struct jit_out_arg *)tmp;
  jit->prepared_args.count = count;
  jit->prepared_args.ready = 0;
  jit->prepared_args.stack_size = 0;
  jit->prepared_args.op = op;
  jit->prepared_args.gp_args = 0;
  jit->prepared_args.fp_args = 0;
  return;
}
}
__inline static int jit_op_is_cflow(jit_op *op ) 
{ 
  int tmp ;

  {
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 0U) {
    goto _L;
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 808U) {
    _L: /* CIL Label */ 
    if ((int )op->code & 2) {
      return (1);
    }
  }
  tmp = is_cond_branch_op(op);
  if (tmp) {
    return (1);
  }
  return (0);
}
}
static void emit_get_arg(struct jit *jit , jit_op *op ) 
{ 
  struct jit_func_info *info ;
  struct jit_func_info *tmp ;
  int dreg ;
  int arg_id ;
  struct jit_inp_arg *arg ;
  int size ;
  int type ;
  int reg_id ;
  int tmp___0 ;
  int read_from_stack ;
  int stack_pos ;
  struct jit_func_info *tmp___1 ;
  jit_hw_reg *tmp___2 ;
  jit_hw_reg *arg_reg ;
  jit_hw_reg *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char _amd64_rex_bits ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  long tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___13 ;
  int tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___19 ;
  int tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  long tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  long tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___38 ;
  int tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  long tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___48 ;
  int tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___55 ;
  int tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;

  {
  tmp = jit_current_func_info(jit);
  info = tmp;
  dreg = (int )op->r_arg[0];
  arg_id = (int )op->r_arg[1];
  arg = info->args + arg_id;
  size = arg->size;
  type = (int )arg->type;
  if (type == 2) {
    tmp___0 = 1;
  } else {
    tmp___0 = 0;
  }
  reg_id = ((tmp___0 & 1) | (3 << 1)) | ((arg_id & 268435455) << 4);
  read_from_stack = 0;
  if (! arg->passed_by_reg) {
    read_from_stack = 1;
    stack_pos = arg->location.stack_pos;
    tmp___1 = jit_current_func_info(jit);
    if (! tmp___1->has_prolog) {
      stack_pos = (int )((unsigned long )stack_pos - sizeof(void *));
      stack_pos = (int )((unsigned long )stack_pos + (unsigned long )jit->push_count * sizeof(void *));
      emit_get_arg_from_stack(jit, type, size, dreg, 4, stack_pos);
      return;
    }
  }
  if (arg->passed_by_reg) {
    tmp___2 = rmap_get(op->regmap, (jit_value )reg_id);
    if ((unsigned long )tmp___2 == (unsigned long )((void *)0)) {
      read_from_stack = 1;
      stack_pos = arg->spill_pos;
    }
  }
  if (read_from_stack) {
    emit_get_arg_from_stack(jit, type, size, dreg, 5, stack_pos);
    return;
  }
  tmp___3 = rmap_get(op->regmap, (jit_value )reg_id);
  arg_reg = tmp___3;
  if (type != 2) {
    if ((unsigned long )size == sizeof(void *)) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp___4 = jit->ip;
          (jit->ip) ++;
          *tmp___4 = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___5 = 8;
          } else {
            tmp___5 = 0;
          }
          if (dreg > 7) {
            tmp___6 = 4;
          } else {
            tmp___6 = 0;
          }
          if (arg_reg->id > 7) {
            tmp___7 = 1;
          } else {
            tmp___7 = 0;
          }
          _amd64_rex_bits = (unsigned char )((tmp___5 | tmp___6) | tmp___7);
          if ((int )_amd64_rex_bits != 0) {
            tmp___8 = jit->ip;
            (jit->ip) ++;
            *tmp___8 = (unsigned char )(64 | (int )_amd64_rex_bits);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___8 = jit->ip;
            (jit->ip) ++;
            *tmp___8 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___9 = jit->ip;
        (jit->ip) ++;
        *tmp___9 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___10 = jit->ip;
        (jit->ip) ++;
        *tmp___10 = (unsigned char)139;
        break;
        default: 
        tmp___11 = __builtin_expect(1L, 0L);
        if (tmp___11) {
          __assert_rtn("emit_get_arg", "./jitter-amd64.c", 2550, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = (unsigned char )(((3 << 6) | ((dreg & 7) << 3)) | (arg_reg->id & 7));
            break;
          }
          break;
        }
        break;
      }
    } else
    if (type == 0) {
      while (1) {
        if (size == 4) {
          while (1) {
            while (1) {
              if (dreg > 7) {
                tmp___13 = 4;
              } else {
                tmp___13 = 0;
              }
              if (arg_reg->id > 7) {
                tmp___14 = 1;
              } else {
                tmp___14 = 0;
              }
              _amd64_rex_bits___0 = (unsigned char )((8 | tmp___13) | tmp___14);
              if ((int )_amd64_rex_bits___0 != 0) {
                tmp___15 = jit->ip;
                (jit->ip) ++;
                *tmp___15 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
              }
              break;
            }
            tmp___16 = jit->ip;
            (jit->ip) ++;
            *tmp___16 = (unsigned char)99;
            while (1) {
              while (1) {
                tmp___17 = jit->ip;
                (jit->ip) ++;
                *tmp___17 = (unsigned char )(((3 << 6) | (((dreg & 7) & 7) << 3)) | ((arg_reg->id & 7) & 7));
                break;
              }
              break;
            }
            break;
          }
          break;
        }
        if (size == 2) {
          tmp___18 = jit->ip;
          (jit->ip) ++;
          *tmp___18 = (unsigned char)102;
        }
        while (1) {
          if (dreg > 7) {
            tmp___19 = 4;
          } else {
            tmp___19 = 0;
          }
          if (arg_reg->id > 7) {
            tmp___20 = 1;
          } else {
            tmp___20 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )((8 | tmp___19) | tmp___20);
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___21 = jit->ip;
            (jit->ip) ++;
            *tmp___21 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        switch (size) {
        case 1: 
        tmp___22 = jit->ip;
        (jit->ip) ++;
        *tmp___22 = (unsigned char)15;
        tmp___23 = jit->ip;
        (jit->ip) ++;
        *tmp___23 = (unsigned char)190;
        break;
        case 2: 
        tmp___24 = jit->ip;
        (jit->ip) ++;
        *tmp___24 = (unsigned char)15;
        tmp___25 = jit->ip;
        (jit->ip) ++;
        *tmp___25 = (unsigned char)191;
        break;
        default: 
        tmp___26 = __builtin_expect(1L, 0L);
        if (tmp___26) {
          __assert_rtn("emit_get_arg", "./jitter-amd64.c", 2551, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___27 = jit->ip;
            (jit->ip) ++;
            *tmp___27 = (unsigned char )(((3 << 6) | ((dreg & 7) << 3)) | (arg_reg->id & 7));
            break;
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        if (size == 8) {
          goto _L;
        } else
        if (size == 4) {
          _L: /* CIL Label */ 
          while (1) {
            if (size == 2) {
              tmp___28 = jit->ip;
              (jit->ip) ++;
              *tmp___28 = (unsigned char)102;
            }
            while (1) {
              if (size > 4) {
                tmp___29 = 8;
              } else {
                tmp___29 = 0;
              }
              if (dreg > 7) {
                tmp___30 = 4;
              } else {
                tmp___30 = 0;
              }
              if (arg_reg->id > 7) {
                tmp___31 = 1;
              } else {
                tmp___31 = 0;
              }
              _amd64_rex_bits___2 = (unsigned char )((tmp___29 | tmp___30) | tmp___31);
              if ((int )_amd64_rex_bits___2 != 0) {
                tmp___32 = jit->ip;
                (jit->ip) ++;
                *tmp___32 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
              } else
              if (size == 1) {
                tmp___32 = jit->ip;
                (jit->ip) ++;
                *tmp___32 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
              }
              break;
            }
            switch (size) {
            case 1: 
            tmp___33 = jit->ip;
            (jit->ip) ++;
            *tmp___33 = (unsigned char)138;
            break;
            case 8: 
            case 4: 
            case 2: 
            tmp___34 = jit->ip;
            (jit->ip) ++;
            *tmp___34 = (unsigned char)139;
            break;
            default: 
            tmp___35 = __builtin_expect(1L, 0L);
            if (tmp___35) {
              __assert_rtn("emit_get_arg", "./jitter-amd64.c", 2552, "0");
            }
            }
            while (1) {
              while (1) {
                tmp___36 = jit->ip;
                (jit->ip) ++;
                *tmp___36 = (unsigned char )(((3 << 6) | ((dreg & 7) << 3)) | (arg_reg->id & 7));
                break;
              }
              break;
            }
            break;
          }
          break;
        }
        if (size == 2) {
          tmp___37 = jit->ip;
          (jit->ip) ++;
          *tmp___37 = (unsigned char)102;
        }
        while (1) {
          if (dreg > 7) {
            tmp___38 = 4;
          } else {
            tmp___38 = 0;
          }
          if (arg_reg->id > 7) {
            tmp___39 = 1;
          } else {
            tmp___39 = 0;
          }
          _amd64_rex_bits___3 = (unsigned char )((8 | tmp___38) | tmp___39);
          if ((int )_amd64_rex_bits___3 != 0) {
            tmp___40 = jit->ip;
            (jit->ip) ++;
            *tmp___40 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          }
          break;
        }
        switch (size) {
        case 1: 
        tmp___41 = jit->ip;
        (jit->ip) ++;
        *tmp___41 = (unsigned char)15;
        tmp___42 = jit->ip;
        (jit->ip) ++;
        *tmp___42 = (unsigned char)182;
        break;
        case 2: 
        tmp___43 = jit->ip;
        (jit->ip) ++;
        *tmp___43 = (unsigned char)15;
        tmp___44 = jit->ip;
        (jit->ip) ++;
        *tmp___44 = (unsigned char)183;
        break;
        default: 
        tmp___45 = __builtin_expect(1L, 0L);
        if (tmp___45) {
          __assert_rtn("emit_get_arg", "./jitter-amd64.c", 2552, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___46 = jit->ip;
            (jit->ip) ++;
            *tmp___46 = (unsigned char )(((3 << 6) | ((dreg & 7) << 3)) | (arg_reg->id & 7));
            break;
          }
          break;
        }
        break;
      }
    }
  } else
  if ((unsigned long )size == sizeof(float )) {
    while (1) {
      tmp___47 = jit->ip;
      (jit->ip) ++;
      *tmp___47 = (unsigned char)243;
      while (1) {
        if (dreg > 7) {
          tmp___48 = 4;
        } else {
          tmp___48 = 0;
        }
        if (arg_reg->id > 7) {
          tmp___49 = 1;
        } else {
          tmp___49 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )(tmp___48 | tmp___49);
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___50 = jit->ip;
          (jit->ip) ++;
          *tmp___50 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      tmp___51 = jit->ip;
      (jit->ip) ++;
      *tmp___51 = (unsigned char)15;
      tmp___52 = jit->ip;
      (jit->ip) ++;
      *tmp___52 = (unsigned char)90;
      while (1) {
        while (1) {
          tmp___53 = jit->ip;
          (jit->ip) ++;
          *tmp___53 = (unsigned char )(((3 << 6) | ((dreg & 7) << 3)) | (arg_reg->id & 7));
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      tmp___54 = jit->ip;
      (jit->ip) ++;
      *tmp___54 = (unsigned char)242;
      while (1) {
        if (dreg > 7) {
          tmp___55 = 4;
        } else {
          tmp___55 = 0;
        }
        if (arg_reg->id > 7) {
          tmp___56 = 1;
        } else {
          tmp___56 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(tmp___55 | tmp___56);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___57 = jit->ip;
          (jit->ip) ++;
          *tmp___57 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      tmp___58 = jit->ip;
      (jit->ip) ++;
      *tmp___58 = (unsigned char)15;
      tmp___59 = jit->ip;
      (jit->ip) ++;
      *tmp___59 = (unsigned char)16;
      while (1) {
        while (1) {
          tmp___60 = jit->ip;
          (jit->ip) ++;
          *tmp___60 = (unsigned char )(((3 << 6) | ((dreg & 7) << 3)) | (arg_reg->id & 7));
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
void jit_gen_op(struct jit *jit , struct jit_op *op ) 
{ 
  jit_value a1 ;
  jit_value a2 ;
  jit_value a3 ;
  int imm ;
  int sign ;
  int found ;
  unsigned char _amd64_rex_bits ;
  int tmp ;
  int tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  x86_imm_buf imb ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___47 ;
  int tmp___48 ;
  int tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  long tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___60 ;
  int tmp___61 ;
  int tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  long tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  int tmp___72 ;
  struct jit_op *target ;
  jit_value pa ;
  unsigned char rex_correction ;
  unsigned char *pos ;
  int disp ;
  int size ;
  long tmp___73 ;
  long tmp___74 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  long tmp___79 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char _amd64_rex_bits___6 ;
  unsigned char *tmp___84 ;
  int t ;
  int tmp___85 ;
  jit_value tmp___86 ;
  int tmp___87 ;
  unsigned char *tmp___88 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___94 ;
  int tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;
  long tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  amd64_imm_buf imb___6 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;
  unsigned char *tmp___111 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  unsigned char *tmp___116 ;
  unsigned char _amd64_rex_bits___9 ;
  int tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char *tmp___119 ;
  unsigned char *tmp___120 ;
  long tmp___121 ;
  unsigned char *tmp___122 ;
  unsigned char _amd64_rex_bits___10 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  struct jit_func_info *tmp___125 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char *tmp___128 ;
  unsigned char _amd64_rex_bits___11 ;
  int tmp___129 ;
  int tmp___130 ;
  unsigned char *tmp___131 ;
  unsigned char *tmp___132 ;
  amd64_imm_buf imb___8 ;
  unsigned char *tmp___133 ;
  unsigned char *tmp___134 ;
  unsigned char *tmp___135 ;
  unsigned char *tmp___136 ;
  unsigned char *tmp___137 ;
  unsigned char *tmp___138 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___141 ;
  unsigned char *tmp___142 ;
  unsigned char *tmp___143 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  unsigned char _amd64_rex_bits___12 ;
  int tmp___146 ;
  int tmp___147 ;
  int tmp___148 ;
  unsigned char *tmp___149 ;
  unsigned char *tmp___150 ;
  unsigned char *tmp___151 ;
  long tmp___152 ;
  unsigned char *tmp___153 ;
  unsigned char _amd64_rex_bits___13 ;
  int tmp___154 ;
  int tmp___155 ;
  unsigned char *tmp___156 ;
  unsigned char *tmp___157 ;
  unsigned char *tmp___158 ;
  unsigned char _amd64_rex_bits___14 ;
  int tmp___159 ;
  unsigned char *tmp___160 ;
  unsigned char *tmp___161 ;
  amd64_imm_buf imb___10 ;
  unsigned char *tmp___162 ;
  unsigned char *tmp___163 ;
  unsigned char *tmp___164 ;
  unsigned char *tmp___165 ;
  unsigned char *tmp___166 ;
  unsigned char *tmp___167 ;
  unsigned char *tmp___168 ;
  unsigned char *tmp___169 ;
  x86_imm_buf imb___11 ;
  unsigned char *tmp___170 ;
  unsigned char *tmp___171 ;
  unsigned char *tmp___172 ;
  unsigned char *tmp___173 ;
  int tmp___174 ;
  unsigned char *tmp___175 ;
  unsigned char _amd64_rex_bits___15 ;
  int tmp___176 ;
  int tmp___177 ;
  unsigned char *tmp___178 ;
  unsigned char *tmp___179 ;
  unsigned char *tmp___180 ;
  long tmp___181 ;
  unsigned char *tmp___182 ;
  unsigned char *tmp___183 ;
  x86_imm_buf imb___12 ;
  unsigned char *tmp___184 ;
  unsigned char *tmp___185 ;
  unsigned char *tmp___186 ;
  unsigned char *tmp___187 ;
  unsigned char *tmp___188 ;
  unsigned char _amd64_rex_bits___16 ;
  int tmp___189 ;
  int tmp___190 ;
  int tmp___191 ;
  unsigned char *tmp___192 ;
  unsigned char *tmp___193 ;
  unsigned char *tmp___194 ;
  long tmp___195 ;
  unsigned char *tmp___196 ;
  unsigned char *tmp___197 ;
  unsigned char *tmp___198 ;
  unsigned char *tmp___199 ;
  unsigned char *tmp___200 ;
  unsigned char *tmp___201 ;
  x86_imm_buf imb___13 ;
  unsigned char *tmp___202 ;
  unsigned char *tmp___203 ;
  unsigned char *tmp___204 ;
  unsigned char *tmp___205 ;
  unsigned char *tmp___206 ;
  unsigned char *tmp___207 ;
  unsigned char *tmp___208 ;
  x86_imm_buf imb___14 ;
  unsigned char *tmp___209 ;
  unsigned char *tmp___210 ;
  unsigned char *tmp___211 ;
  unsigned char *tmp___212 ;
  unsigned char *tmp___213 ;
  unsigned char _amd64_rex_bits___17 ;
  int tmp___214 ;
  int tmp___215 ;
  int tmp___216 ;
  unsigned char *tmp___217 ;
  unsigned char *tmp___218 ;
  unsigned char *tmp___219 ;
  long tmp___220 ;
  unsigned char *tmp___221 ;
  unsigned char *tmp___222 ;
  unsigned char *tmp___223 ;
  unsigned char *tmp___224 ;
  unsigned char *tmp___225 ;
  unsigned char *tmp___226 ;
  x86_imm_buf imb___15 ;
  unsigned char *tmp___227 ;
  unsigned char *tmp___228 ;
  unsigned char *tmp___229 ;
  unsigned char *tmp___230 ;
  unsigned char *tmp___231 ;
  unsigned char *tmp___232 ;
  unsigned char *tmp___233 ;
  x86_imm_buf imb___16 ;
  unsigned char *tmp___234 ;
  unsigned char *tmp___235 ;
  unsigned char *tmp___236 ;
  unsigned char *tmp___237 ;
  unsigned char _amd64_rex_bits___18 ;
  int tmp___238 ;
  int tmp___239 ;
  int tmp___240 ;
  int tmp___241 ;
  unsigned char *tmp___242 ;
  int tmp___243 ;
  unsigned char *tmp___244 ;
  unsigned char *tmp___245 ;
  unsigned char *tmp___246 ;
  long tmp___247 ;
  unsigned char *tmp___248 ;
  unsigned char *tmp___249 ;
  x86_imm_buf imb___17 ;
  unsigned char *tmp___250 ;
  unsigned char *tmp___251 ;
  unsigned char *tmp___252 ;
  unsigned char *tmp___253 ;
  unsigned char *tmp___254 ;
  unsigned char *tmp___255 ;
  unsigned char *tmp___256 ;
  unsigned char *tmp___257 ;
  unsigned char *tmp___258 ;
  unsigned char *tmp___259 ;
  x86_imm_buf imb___18 ;
  unsigned char *tmp___260 ;
  unsigned char *tmp___261 ;
  unsigned char *tmp___262 ;
  unsigned char *tmp___263 ;
  unsigned char *tmp___264 ;
  unsigned char _amd64_rex_bits___19 ;
  int tmp___265 ;
  int tmp___266 ;
  unsigned char *tmp___267 ;
  unsigned char *tmp___268 ;
  unsigned char *tmp___269 ;
  unsigned char *tmp___270 ;
  unsigned char *tmp___271 ;
  unsigned char _amd64_rex_bits___20 ;
  int tmp___272 ;
  int tmp___273 ;
  unsigned char *tmp___274 ;
  unsigned char *tmp___275 ;
  unsigned char *tmp___276 ;
  unsigned char *tmp___277 ;
  unsigned char *tmp___278 ;
  unsigned char _amd64_rex_bits___21 ;
  int tmp___279 ;
  int tmp___280 ;
  unsigned char *tmp___281 ;
  unsigned char *tmp___282 ;
  unsigned char *tmp___283 ;
  unsigned char *tmp___284 ;
  unsigned char *tmp___285 ;
  unsigned char _amd64_rex_bits___22 ;
  int tmp___286 ;
  int tmp___287 ;
  int tmp___288 ;
  unsigned char *tmp___289 ;
  unsigned char *tmp___290 ;
  unsigned char *tmp___291 ;
  long tmp___292 ;
  unsigned char *tmp___293 ;
  unsigned char _amd64_rex_bits___23 ;
  int tmp___294 ;
  unsigned char *tmp___295 ;
  unsigned char *tmp___296 ;
  unsigned char *tmp___297 ;
  unsigned char *tmp___298 ;
  x86_imm_buf imb___19 ;
  unsigned char *tmp___299 ;
  unsigned char *tmp___300 ;
  unsigned char *tmp___301 ;
  unsigned char *tmp___302 ;
  unsigned char *tmp___303 ;
  unsigned char *tmp___304 ;
  unsigned char *tmp___305 ;
  unsigned char *tmp___306 ;
  x86_imm_buf imb___20 ;
  unsigned char *tmp___307 ;
  unsigned char *tmp___308 ;
  unsigned char *tmp___309 ;
  unsigned char *tmp___310 ;
  unsigned char *tmp___311 ;
  unsigned char *tmp___312 ;
  unsigned char *tmp___313 ;
  x86_imm_buf imb___21 ;
  unsigned char *tmp___314 ;
  unsigned char *tmp___315 ;
  unsigned char *tmp___316 ;
  unsigned char *tmp___317 ;
  x86_imm_buf imb___22 ;
  unsigned char *tmp___318 ;
  unsigned char *tmp___319 ;
  unsigned char *tmp___320 ;
  unsigned char *tmp___321 ;
  unsigned char *tmp___322 ;
  unsigned char _amd64_rex_bits___24 ;
  int tmp___323 ;
  int tmp___324 ;
  int tmp___325 ;
  int tmp___326 ;
  unsigned char *tmp___327 ;
  int tmp___328 ;
  unsigned char *tmp___329 ;
  unsigned char *tmp___330 ;
  unsigned char *tmp___331 ;
  unsigned char *tmp___332 ;
  unsigned char *tmp___333 ;
  unsigned char *tmp___334 ;
  unsigned char *tmp___335 ;
  x86_imm_buf imb___23 ;
  unsigned char *tmp___336 ;
  unsigned char *tmp___337 ;
  unsigned char *tmp___338 ;
  unsigned char *tmp___339 ;
  unsigned char *tmp___340 ;
  unsigned char *tmp___341 ;
  unsigned char *tmp___342 ;
  x86_imm_buf imb___24 ;
  unsigned char *tmp___343 ;
  unsigned char *tmp___344 ;
  unsigned char *tmp___345 ;
  unsigned char *tmp___346 ;
  unsigned char *tmp___347 ;
  unsigned char *tmp___348 ;
  unsigned char *tmp___349 ;
  unsigned char *tmp___350 ;
  unsigned char *tmp___351 ;
  unsigned char *tmp___352 ;
  unsigned char *tmp___353 ;
  x86_imm_buf imb___25 ;
  unsigned char *tmp___354 ;
  unsigned char *tmp___355 ;
  unsigned char *tmp___356 ;
  unsigned char *tmp___357 ;
  unsigned char *tmp___358 ;
  unsigned char *tmp___359 ;
  unsigned char *tmp___360 ;
  x86_imm_buf imb___26 ;
  unsigned char *tmp___361 ;
  unsigned char *tmp___362 ;
  unsigned char *tmp___363 ;
  unsigned char *tmp___364 ;
  unsigned char *tmp___365 ;
  unsigned char *tmp___366 ;
  unsigned char *tmp___367 ;
  unsigned char *tmp___368 ;
  unsigned char *tmp___369 ;
  unsigned char *tmp___370 ;
  unsigned char *tmp___371 ;
  x86_imm_buf imb___27 ;
  unsigned char *tmp___372 ;
  unsigned char *tmp___373 ;
  unsigned char *tmp___374 ;
  unsigned char *tmp___375 ;
  unsigned char *tmp___376 ;
  unsigned char *tmp___377 ;
  unsigned char *tmp___378 ;
  x86_imm_buf imb___28 ;
  unsigned char *tmp___379 ;
  unsigned char *tmp___380 ;
  unsigned char *tmp___381 ;
  unsigned char *tmp___382 ;
  x86_imm_buf imb___29 ;
  unsigned char *tmp___383 ;
  unsigned char *tmp___384 ;
  unsigned char *tmp___385 ;
  unsigned char *tmp___386 ;
  unsigned char *tmp___387 ;
  unsigned char _amd64_rex_bits___25 ;
  int tmp___388 ;
  int tmp___389 ;
  int tmp___390 ;
  int tmp___391 ;
  unsigned char *tmp___392 ;
  int tmp___393 ;
  unsigned char *tmp___394 ;
  unsigned char *tmp___395 ;
  unsigned char *tmp___396 ;
  unsigned char *tmp___397 ;
  unsigned char *tmp___398 ;
  unsigned char *tmp___399 ;
  unsigned char *tmp___400 ;
  x86_imm_buf imb___30 ;
  unsigned char *tmp___401 ;
  unsigned char *tmp___402 ;
  unsigned char *tmp___403 ;
  unsigned char *tmp___404 ;
  unsigned char *tmp___405 ;
  unsigned char *tmp___406 ;
  unsigned char *tmp___407 ;
  x86_imm_buf imb___31 ;
  unsigned char *tmp___408 ;
  unsigned char *tmp___409 ;
  unsigned char *tmp___410 ;
  unsigned char *tmp___411 ;
  unsigned char *tmp___412 ;
  unsigned char *tmp___413 ;
  unsigned char *tmp___414 ;
  unsigned char *tmp___415 ;
  unsigned char *tmp___416 ;
  unsigned char *tmp___417 ;
  unsigned char *tmp___418 ;
  x86_imm_buf imb___32 ;
  unsigned char *tmp___419 ;
  unsigned char *tmp___420 ;
  unsigned char *tmp___421 ;
  unsigned char *tmp___422 ;
  unsigned char *tmp___423 ;
  unsigned char *tmp___424 ;
  unsigned char *tmp___425 ;
  x86_imm_buf imb___33 ;
  unsigned char *tmp___426 ;
  unsigned char *tmp___427 ;
  unsigned char *tmp___428 ;
  unsigned char *tmp___429 ;
  unsigned char *tmp___430 ;
  unsigned char *tmp___431 ;
  unsigned char *tmp___432 ;
  unsigned char *tmp___433 ;
  unsigned char *tmp___434 ;
  unsigned char *tmp___435 ;
  unsigned char *tmp___436 ;
  x86_imm_buf imb___34 ;
  unsigned char *tmp___437 ;
  unsigned char *tmp___438 ;
  unsigned char *tmp___439 ;
  unsigned char *tmp___440 ;
  unsigned char *tmp___441 ;
  unsigned char *tmp___442 ;
  unsigned char *tmp___443 ;
  x86_imm_buf imb___35 ;
  unsigned char *tmp___444 ;
  unsigned char *tmp___445 ;
  unsigned char *tmp___446 ;
  unsigned char *tmp___447 ;
  x86_imm_buf imb___36 ;
  unsigned char *tmp___448 ;
  unsigned char *tmp___449 ;
  unsigned char *tmp___450 ;
  unsigned char *tmp___451 ;
  unsigned char _amd64_rex_bits___26 ;
  int tmp___452 ;
  int tmp___453 ;
  int tmp___454 ;
  unsigned char *tmp___455 ;
  unsigned char *tmp___456 ;
  unsigned char *tmp___457 ;
  unsigned char *tmp___458 ;
  x86_imm_buf imb___37 ;
  unsigned char *tmp___459 ;
  unsigned char *tmp___460 ;
  unsigned char *tmp___461 ;
  unsigned char *tmp___462 ;
  unsigned char *tmp___463 ;
  unsigned char *tmp___464 ;
  unsigned char *tmp___465 ;
  unsigned char *tmp___466 ;
  unsigned char *tmp___467 ;
  unsigned char *tmp___468 ;
  x86_imm_buf imb___38 ;
  unsigned char *tmp___469 ;
  unsigned char *tmp___470 ;
  unsigned char *tmp___471 ;
  unsigned char *tmp___472 ;
  unsigned char *tmp___473 ;
  unsigned char *tmp___474 ;
  unsigned char *tmp___475 ;
  unsigned char *tmp___476 ;
  x86_imm_buf imb___39 ;
  unsigned char *tmp___477 ;
  unsigned char *tmp___478 ;
  unsigned char *tmp___479 ;
  unsigned char *tmp___480 ;
  unsigned char *tmp___481 ;
  unsigned char *tmp___482 ;
  unsigned char *tmp___483 ;
  unsigned char *tmp___484 ;
  unsigned char *tmp___485 ;
  unsigned char *tmp___486 ;
  x86_imm_buf imb___40 ;
  unsigned char *tmp___487 ;
  unsigned char *tmp___488 ;
  unsigned char *tmp___489 ;
  unsigned char *tmp___490 ;
  unsigned char *tmp___491 ;
  unsigned char *tmp___492 ;
  unsigned char *tmp___493 ;
  x86_imm_buf imb___41 ;
  unsigned char *tmp___494 ;
  unsigned char *tmp___495 ;
  unsigned char *tmp___496 ;
  unsigned char *tmp___497 ;
  unsigned char *tmp___498 ;
  unsigned char *tmp___499 ;
  unsigned char *tmp___500 ;
  unsigned char *tmp___501 ;
  unsigned char *tmp___502 ;
  unsigned char *tmp___503 ;
  x86_imm_buf imb___42 ;
  unsigned char *tmp___504 ;
  unsigned char *tmp___505 ;
  unsigned char *tmp___506 ;
  unsigned char *tmp___507 ;
  x86_imm_buf imb___43 ;
  unsigned char *tmp___508 ;
  unsigned char *tmp___509 ;
  unsigned char *tmp___510 ;
  unsigned char *tmp___511 ;
  int tmp___512 ;
  int tmp___513 ;
  unsigned char _amd64_rex_bits___27 ;
  int tmp___514 ;
  int tmp___515 ;
  int tmp___516 ;
  unsigned char *tmp___517 ;
  unsigned char *tmp___518 ;
  unsigned char *tmp___519 ;
  unsigned char *tmp___520 ;
  x86_imm_buf imb___44 ;
  unsigned char *tmp___521 ;
  unsigned char *tmp___522 ;
  unsigned char *tmp___523 ;
  unsigned char *tmp___524 ;
  unsigned char *tmp___525 ;
  unsigned char *tmp___526 ;
  unsigned char *tmp___527 ;
  unsigned char *tmp___528 ;
  unsigned char *tmp___529 ;
  unsigned char *tmp___530 ;
  x86_imm_buf imb___45 ;
  unsigned char *tmp___531 ;
  unsigned char *tmp___532 ;
  unsigned char *tmp___533 ;
  unsigned char *tmp___534 ;
  unsigned char _amd64_rex_bits___28 ;
  int tmp___535 ;
  int tmp___536 ;
  unsigned char *tmp___537 ;
  unsigned char *tmp___538 ;
  unsigned char *tmp___539 ;
  unsigned char *tmp___540 ;
  x86_imm_buf imb___46 ;
  unsigned char *tmp___541 ;
  unsigned char *tmp___542 ;
  unsigned char *tmp___543 ;
  unsigned char *tmp___544 ;
  unsigned char *tmp___545 ;
  unsigned char *tmp___546 ;
  unsigned char *tmp___547 ;
  unsigned char *tmp___548 ;
  unsigned char *tmp___549 ;
  unsigned char *tmp___550 ;
  x86_imm_buf imb___47 ;
  unsigned char *tmp___551 ;
  unsigned char *tmp___552 ;
  unsigned char *tmp___553 ;
  unsigned char *tmp___554 ;
  jit_value tmp___555 ;
  unsigned long tmp___556 ;
  unsigned char _amd64_rex_bits___29 ;
  int tmp___557 ;
  int tmp___558 ;
  int tmp___559 ;
  unsigned char *tmp___560 ;
  unsigned char *tmp___561 ;
  unsigned char *tmp___562 ;
  unsigned char *tmp___563 ;
  x86_imm_buf imb___48 ;
  unsigned char *tmp___564 ;
  unsigned char *tmp___565 ;
  unsigned char *tmp___566 ;
  unsigned char *tmp___567 ;
  unsigned char *tmp___568 ;
  unsigned char *tmp___569 ;
  unsigned char *tmp___570 ;
  unsigned char *tmp___571 ;
  unsigned char *tmp___572 ;
  unsigned char *tmp___573 ;
  x86_imm_buf imb___49 ;
  unsigned char *tmp___574 ;
  unsigned char *tmp___575 ;
  unsigned char *tmp___576 ;
  unsigned char *tmp___577 ;

  {
  a1 = op->r_arg[0];
  a2 = op->r_arg[1];
  a3 = op->r_arg[2];
  imm = (int )op->code & 2;
  sign = ! ((int )op->code & 4);
  found = 1;
  switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
  case 104U: 
  if (a1 != a2) {
    if (a1 != a3) {
      if (imm) {
        while (1) {
          while (1) {
            if (a1 > 7L) {
              tmp = 4;
            } else {
              tmp = 0;
            }
            if (a2 > 7L) {
              tmp___0 = 1;
            } else {
              tmp___0 = 0;
            }
            _amd64_rex_bits = (unsigned char )((8 | tmp) | tmp___0);
            if ((int )_amd64_rex_bits != 0) {
              tmp___1 = jit->ip;
              (jit->ip) ++;
              *tmp___1 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char)141;
          while (1) {
            if (a2 == 16L) {
              while (1) {
                tmp___3 = jit->ip;
                (jit->ip) ++;
                *tmp___3 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
                break;
              }
              while (1) {
                imb.val = (int )a3;
                tmp___4 = jit->ip;
                (jit->ip) ++;
                *tmp___4 = imb.b[0];
                tmp___5 = jit->ip;
                (jit->ip) ++;
                *tmp___5 = imb.b[1];
                tmp___6 = jit->ip;
                (jit->ip) ++;
                *tmp___6 = imb.b[2];
                tmp___7 = jit->ip;
                (jit->ip) ++;
                *tmp___7 = imb.b[3];
                break;
              }
            } else {
              while (1) {
                if ((a2 & 7L) == 4L) {
                  if (a3 == 0L) {
                    while (1) {
                      tmp___8 = jit->ip;
                      (jit->ip) ++;
                      *tmp___8 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                      break;
                    }
                    while (1) {
                      tmp___9 = jit->ip;
                      (jit->ip) ++;
                      *tmp___9 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                  } else
                  if ((int )a3 >= -128) {
                    if ((int )a3 <= 127) {
                      while (1) {
                        tmp___10 = jit->ip;
                        (jit->ip) ++;
                        *tmp___10 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                        break;
                      }
                      while (1) {
                        tmp___11 = jit->ip;
                        (jit->ip) ++;
                        *tmp___11 = (unsigned char )((4 << 3) | 4);
                        break;
                      }
                      while (1) {
                        *(jit->ip) = (unsigned char )(a3 & 255L);
                        (jit->ip) ++;
                        break;
                      }
                    } else {
                      goto _L;
                    }
                  } else {
                    _L: /* CIL Label */ 
                    while (1) {
                      tmp___12 = jit->ip;
                      (jit->ip) ++;
                      *tmp___12 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                      break;
                    }
                    while (1) {
                      tmp___13 = jit->ip;
                      (jit->ip) ++;
                      *tmp___13 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      imb___0.val = (int )a3;
                      tmp___14 = jit->ip;
                      (jit->ip) ++;
                      *tmp___14 = imb___0.b[0];
                      tmp___15 = jit->ip;
                      (jit->ip) ++;
                      *tmp___15 = imb___0.b[1];
                      tmp___16 = jit->ip;
                      (jit->ip) ++;
                      *tmp___16 = imb___0.b[2];
                      tmp___17 = jit->ip;
                      (jit->ip) ++;
                      *tmp___17 = imb___0.b[3];
                      break;
                    }
                  }
                  break;
                }
                if (a3 == 0L) {
                  if ((a2 & 7L) != 5L) {
                    while (1) {
                      tmp___18 = jit->ip;
                      (jit->ip) ++;
                      *tmp___18 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                      break;
                    }
                    break;
                  }
                }
                if ((int )a3 >= -128) {
                  if ((int )a3 <= 127) {
                    while (1) {
                      tmp___19 = jit->ip;
                      (jit->ip) ++;
                      *tmp___19 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(a3 & 255L);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L___0;
                  }
                } else {
                  _L___0: /* CIL Label */ 
                  while (1) {
                    tmp___20 = jit->ip;
                    (jit->ip) ++;
                    *tmp___20 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                    break;
                  }
                  while (1) {
                    imb___1.val = (int )a3;
                    tmp___21 = jit->ip;
                    (jit->ip) ++;
                    *tmp___21 = imb___1.b[0];
                    tmp___22 = jit->ip;
                    (jit->ip) ++;
                    *tmp___22 = imb___1.b[1];
                    tmp___23 = jit->ip;
                    (jit->ip) ++;
                    *tmp___23 = imb___1.b[2];
                    tmp___24 = jit->ip;
                    (jit->ip) ++;
                    *tmp___24 = imb___1.b[3];
                    break;
                  }
                }
                break;
              }
            }
            break;
          }
          break;
        }
      } else {
        while (1) {
          while (1) {
            if (a1 > 7L) {
              tmp___25 = 4;
            } else {
              tmp___25 = 0;
            }
            if (a3 > 7L) {
              tmp___26 = 2;
            } else {
              tmp___26 = 0;
            }
            if (a2 > 7L) {
              tmp___27 = 1;
            } else {
              tmp___27 = 0;
            }
            _amd64_rex_bits___0 = (unsigned char )(((8 | tmp___25) | tmp___26) | tmp___27);
            if ((int )_amd64_rex_bits___0 != 0) {
              tmp___28 = jit->ip;
              (jit->ip) ++;
              *tmp___28 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
            }
            break;
          }
          while (1) {
            tmp___29 = jit->ip;
            (jit->ip) ++;
            *tmp___29 = (unsigned char)141;
            while (1) {
              if (a2 == -1L) {
                while (1) {
                  tmp___30 = jit->ip;
                  (jit->ip) ++;
                  *tmp___30 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                  break;
                }
                while (1) {
                  tmp___31 = jit->ip;
                  (jit->ip) ++;
                  *tmp___31 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
                  break;
                }
                while (1) {
                  imb___2.val = 0;
                  tmp___32 = jit->ip;
                  (jit->ip) ++;
                  *tmp___32 = imb___2.b[0];
                  tmp___33 = jit->ip;
                  (jit->ip) ++;
                  *tmp___33 = imb___2.b[1];
                  tmp___34 = jit->ip;
                  (jit->ip) ++;
                  *tmp___34 = imb___2.b[2];
                  tmp___35 = jit->ip;
                  (jit->ip) ++;
                  *tmp___35 = imb___2.b[3];
                  break;
                }
              } else
              if (a2 != 5L) {
                while (1) {
                  tmp___36 = jit->ip;
                  (jit->ip) ++;
                  *tmp___36 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                  break;
                }
                while (1) {
                  tmp___37 = jit->ip;
                  (jit->ip) ++;
                  *tmp___37 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                  break;
                }
              } else {
                while (1) {
                  tmp___38 = jit->ip;
                  (jit->ip) ++;
                  *tmp___38 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                  break;
                }
                while (1) {
                  tmp___39 = jit->ip;
                  (jit->ip) ++;
                  *tmp___39 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char)0;
                  (jit->ip) ++;
                  break;
                }
              }
              break;
            }
            break;
          }
          break;
        }
      }
    } else {
      emit_alu_op(jit, op, 0, imm);
    }
  } else {
    emit_alu_op(jit, op, 0, imm);
  }
  break;
  case 672U: 
  emit_alu_op(jit, op, 0, imm);
  break;
  case 48U: 
  emit_alu_op(jit, op, 2, imm);
  break;
  case 32U: 
  emit_sub_op(jit, op, imm);
  break;
  case 392U: 
  emit_subx_op(jit, op, 5, imm);
  break;
  case 80U: 
  emit_subx_op(jit, op, 3, imm);
  break;
  case 424U: 
  emit_rsb_op(jit, op, imm);
  break;
  case 576U: 
  if (a1 != a2) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___46 = jit->ip;
        (jit->ip) ++;
        *tmp___46 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___47 = 8;
        } else {
          tmp___47 = 0;
        }
        if (a1 > 7L) {
          tmp___48 = 4;
        } else {
          tmp___48 = 0;
        }
        if (a2 > 7L) {
          tmp___49 = 1;
        } else {
          tmp___49 = 0;
        }
        _amd64_rex_bits___1 = (unsigned char )((tmp___47 | tmp___48) | tmp___49);
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___50 = jit->ip;
          (jit->ip) ++;
          *tmp___50 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___50 = jit->ip;
          (jit->ip) ++;
          *tmp___50 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___51 = jit->ip;
      (jit->ip) ++;
      *tmp___51 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___52 = jit->ip;
      (jit->ip) ++;
      *tmp___52 = (unsigned char)139;
      break;
      default: 
      tmp___53 = __builtin_expect(1L, 0L);
      if (tmp___53) {
        __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3134, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___54 = jit->ip;
          (jit->ip) ++;
          *tmp___54 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  while (1) {
    while (1) {
      if (a1 > 7L) {
        tmp___55 = 1;
      } else {
        tmp___55 = 0;
      }
      _amd64_rex_bits___2 = (unsigned char )(8 | tmp___55);
      if ((int )_amd64_rex_bits___2 != 0) {
        tmp___56 = jit->ip;
        (jit->ip) ++;
        *tmp___56 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
      }
      break;
    }
    while (1) {
      tmp___57 = jit->ip;
      (jit->ip) ++;
      *tmp___57 = (unsigned char)247;
      while (1) {
        while (1) {
          tmp___58 = jit->ip;
          (jit->ip) ++;
          *tmp___58 = (unsigned char )((long )((3 << 6) | (3 << 3)) | ((a1 & 7L) & 7L));
          break;
        }
        break;
      }
      break;
    }
    break;
  }
  break;
  case 400U: 
  emit_alu_op(jit, op, 1, imm);
  break;
  case 200U: 
  emit_alu_op(jit, op, 6, imm);
  break;
  case 176U: 
  emit_alu_op(jit, op, 4, imm);
  break;
  case 368U: 
  if (a1 != a2) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___59 = jit->ip;
        (jit->ip) ++;
        *tmp___59 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___60 = 8;
        } else {
          tmp___60 = 0;
        }
        if (a1 > 7L) {
          tmp___61 = 4;
        } else {
          tmp___61 = 0;
        }
        if (a2 > 7L) {
          tmp___62 = 1;
        } else {
          tmp___62 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )((tmp___60 | tmp___61) | tmp___62);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___63 = jit->ip;
          (jit->ip) ++;
          *tmp___63 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___63 = jit->ip;
          (jit->ip) ++;
          *tmp___63 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___64 = jit->ip;
      (jit->ip) ++;
      *tmp___64 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___65 = jit->ip;
      (jit->ip) ++;
      *tmp___65 = (unsigned char)139;
      break;
      default: 
      tmp___66 = __builtin_expect(1L, 0L);
      if (tmp___66) {
        __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3140, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___67 = jit->ip;
          (jit->ip) ++;
          *tmp___67 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  while (1) {
    while (1) {
      if (a1 > 7L) {
        tmp___68 = 1;
      } else {
        tmp___68 = 0;
      }
      _amd64_rex_bits___4 = (unsigned char )(8 | tmp___68);
      if ((int )_amd64_rex_bits___4 != 0) {
        tmp___69 = jit->ip;
        (jit->ip) ++;
        *tmp___69 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
      }
      break;
    }
    while (1) {
      tmp___70 = jit->ip;
      (jit->ip) ++;
      *tmp___70 = (unsigned char)247;
      while (1) {
        while (1) {
          tmp___71 = jit->ip;
          (jit->ip) ++;
          *tmp___71 = (unsigned char )((long )((3 << 6) | (2 << 3)) | ((a1 & 7L) & 7L));
          break;
        }
        break;
      }
      break;
    }
    break;
  }
  break;
  case 544U: 
  emit_shift_op(jit, op, 4, imm);
  break;
  case 720U: 
  if (sign) {
    tmp___72 = 7;
  } else {
    tmp___72 = 5;
  }
  emit_shift_op(jit, op, tmp___72, imm);
  break;
  case 688U: 
  emit_cond_op(jit, op, 2, imm, sign);
  break;
  case 272U: 
  emit_cond_op(jit, op, 3, imm, sign);
  break;
  case 712U: 
  emit_cond_op(jit, op, 4, imm, sign);
  break;
  case 904U: 
  emit_cond_op(jit, op, 5, imm, sign);
  break;
  case 144U: 
  emit_cond_op(jit, op, 0, imm, sign);
  break;
  case 216U: 
  emit_cond_op(jit, op, 1, imm, sign);
  break;
  case 480U: 
  emit_branch_op(jit, op, 2, imm, sign);
  break;
  case 112U: 
  emit_branch_op(jit, op, 3, imm, sign);
  break;
  case 344U: 
  emit_branch_op(jit, op, 4, imm, sign);
  break;
  case 584U: 
  emit_branch_op(jit, op, 5, imm, sign);
  break;
  case 848U: 
  emit_branch_op(jit, op, 0, imm, sign);
  break;
  case 608U: 
  emit_branch_op(jit, op, 1, imm, sign);
  break;
  case 8U: 
  emit_branch_mask_op(jit, op, 1, imm);
  break;
  case 304U: 
  emit_branch_mask_op(jit, op, 0, imm);
  break;
  case 768U: 
  emit_branch_overflow_op(jit, op, 0, imm, 0);
  break;
  case 664U: 
  emit_branch_overflow_op(jit, op, 5, imm, 0);
  break;
  case 568U: 
  emit_branch_overflow_op(jit, op, 0, imm, 1);
  break;
  case 328U: 
  emit_branch_overflow_op(jit, op, 5, imm, 1);
  break;
  case 552U: 
  emit_mul_op(jit, op, imm, sign, 0);
  break;
  case 224U: 
  emit_mul_op(jit, op, imm, sign, 1);
  break;
  case 864U: 
  emit_div_op(jit, op, imm, sign, 0);
  break;
  case 408U: 
  emit_div_op(jit, op, imm, sign, 1);
  break;
  case 0U: 
  emit_funcall(jit, op, imm);
  break;
  case 136U: 
  while (1) {
    target = (struct jit_op *)a1;
    if (! target->in_use) {
      break;
    }
    switch ((unsigned int )((jit_opcode )((int )target->code & 65528))) {
    case 56U: 
    case 832U: 
    target->arg[1] = (jit_value )jit->ip - (jit_value )jit->buf;
    break;
    case 488U: 
    case 520U: 
    target->arg[0] = (jit_value )jit->ip - (jit_value )jit->buf;
    break;
    default: 
    pa = target->patch_addr;
    while (1) {
      rex_correction = (unsigned char)0;
      if (((int )*(jit->buf + pa) & 240) == 64) {
        rex_correction = (unsigned char )((int )rex_correction + 1);
      }
      pos = ((jit->buf + pa) + 1) + (int )rex_correction;
      size = 0;
      switch ((int )*((jit->buf + pa) + (int )rex_correction)) {
      case 233: 
      case 232: 
      size ++;
      break;
      case 15: 
      if ((int )*pos >= 112) {
        if (! ((int )*pos <= 143)) {
          goto _L___1;
        }
      } else {
        _L___1: /* CIL Label */ 
        tmp___73 = __builtin_expect(1L, 0L);
        if (tmp___73) {
          __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3189, "0");
        }
      }
      size ++;
      pos ++;
      break;
      case 127: 
      case 126: 
      case 125: 
      case 124: 
      case 123: 
      case 122: 
      case 121: 
      case 120: 
      case 119: 
      case 118: 
      case 117: 
      case 116: 
      case 115: 
      case 114: 
      case 113: 
      case 112: 
      case 235: 
      case 226: 
      case 225: 
      case 224: 
      break;
      default: 
      tmp___74 = __builtin_expect(1L, 0L);
      if (tmp___74) {
        __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3189, "0");
      }
      }
      disp = (int )(jit->ip - pos);
      if (size) {
        while (1) {
          imb___4.val = disp - 4;
          tmp___75 = pos;
          pos ++;
          *tmp___75 = imb___4.b[0];
          tmp___76 = pos;
          pos ++;
          *tmp___76 = imb___4.b[1];
          tmp___77 = pos;
          pos ++;
          *tmp___77 = imb___4.b[2];
          tmp___78 = pos;
          pos ++;
          *tmp___78 = imb___4.b[3];
          break;
        }
      } else
      if (disp - 1 >= -128) {
        if (disp - 1 <= 127) {
          while (1) {
            *pos = (unsigned char )((disp - 1) & 255);
            pos ++;
            break;
          }
        } else {
          goto _L___2;
        }
      } else {
        _L___2: /* CIL Label */ 
        tmp___79 = __builtin_expect(1L, 0L);
        if (tmp___79) {
          __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3189, "0");
        }
      }
      break;
    }
    }
    break;
  }
  break;
  case 808U: 
  op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
  if ((int )op->code & 1) {
    while (1) {
      while (1) {
        if (a1 > 7L) {
          tmp___80 = 1;
        } else {
          tmp___80 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )tmp___80;
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___81 = jit->ip;
          (jit->ip) ++;
          *tmp___81 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      while (1) {
        tmp___82 = jit->ip;
        (jit->ip) ++;
        *tmp___82 = (unsigned char)255;
        while (1) {
          while (1) {
            tmp___83 = jit->ip;
            (jit->ip) ++;
            *tmp___83 = (unsigned char )((long )((3 << 6) | (4 << 3)) | ((a1 & 7L) & 7L));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      while (1) {
        _amd64_rex_bits___6 = (unsigned char)0;
        if ((int )_amd64_rex_bits___6 != 0) {
          tmp___84 = jit->ip;
          (jit->ip) ++;
          *tmp___84 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
        }
        break;
      }
      while (1) {
        tmp___87 = jit_is_label(jit, (void *)a1);
        if (tmp___87) {
          tmp___86 = ((jit_value )jit->buf + ((jit_label *)a1)->pos) - (jit_value )jit->ip;
        } else {
          tmp___86 = a1;
        }
        t = (int )(tmp___86 - 5L);
        while (1) {
          tmp___88 = jit->ip;
          (jit->ip) ++;
          *tmp___88 = (unsigned char)233;
          while (1) {
            imb___5.val = t;
            tmp___89 = jit->ip;
            (jit->ip) ++;
            *tmp___89 = imb___5.b[0];
            tmp___90 = jit->ip;
            (jit->ip) ++;
            *tmp___90 = imb___5.b[1];
            tmp___91 = jit->ip;
            (jit->ip) ++;
            *tmp___91 = imb___5.b[2];
            tmp___92 = jit->ip;
            (jit->ip) ++;
            *tmp___92 = imb___5.b[3];
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  }
  break;
  case 72U: 
  if (! imm) {
    if (a1 != 0L) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp___93 = jit->ip;
          (jit->ip) ++;
          *tmp___93 = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___94 = 8;
          } else {
            tmp___94 = 0;
          }
          if (a1 > 7L) {
            tmp___95 = 1;
          } else {
            tmp___95 = 0;
          }
          _amd64_rex_bits___7 = (unsigned char )(tmp___94 | tmp___95);
          if ((int )_amd64_rex_bits___7 != 0) {
            tmp___96 = jit->ip;
            (jit->ip) ++;
            *tmp___96 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___96 = jit->ip;
            (jit->ip) ++;
            *tmp___96 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___97 = jit->ip;
        (jit->ip) ++;
        *tmp___97 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___98 = jit->ip;
        (jit->ip) ++;
        *tmp___98 = (unsigned char)139;
        break;
        default: 
        tmp___99 = __builtin_expect(1L, 0L);
        if (tmp___99) {
          __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3201, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___100 = jit->ip;
            (jit->ip) ++;
            *tmp___100 = (unsigned char )((long )(3 << 6) | (a1 & 7L));
            break;
          }
          break;
        }
        break;
      }
    }
  }
  if (imm) {
    while (1) {
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___101 = 8;
        } else {
          tmp___101 = 0;
        }
        _amd64_rex_bits___8 = (unsigned char )tmp___101;
        if ((int )_amd64_rex_bits___8 != 0) {
          tmp___102 = jit->ip;
          (jit->ip) ++;
          *tmp___102 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___102 = jit->ip;
          (jit->ip) ++;
          *tmp___102 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
        }
        break;
      }
      tmp___103 = jit->ip;
      (jit->ip) ++;
      *tmp___103 = (unsigned char)184;
      if (sizeof(void *) == 8UL) {
        while (1) {
          imb___6.val = (size_t )a1;
          tmp___104 = jit->ip;
          (jit->ip) ++;
          *tmp___104 = imb___6.b[0];
          tmp___105 = jit->ip;
          (jit->ip) ++;
          *tmp___105 = imb___6.b[1];
          tmp___106 = jit->ip;
          (jit->ip) ++;
          *tmp___106 = imb___6.b[2];
          tmp___107 = jit->ip;
          (jit->ip) ++;
          *tmp___107 = imb___6.b[3];
          tmp___108 = jit->ip;
          (jit->ip) ++;
          *tmp___108 = imb___6.b[4];
          tmp___109 = jit->ip;
          (jit->ip) ++;
          *tmp___109 = imb___6.b[5];
          tmp___110 = jit->ip;
          (jit->ip) ++;
          *tmp___110 = imb___6.b[6];
          tmp___111 = jit->ip;
          (jit->ip) ++;
          *tmp___111 = imb___6.b[7];
          break;
        }
      } else {
        while (1) {
          imb___7.val = (int )((size_t )a1);
          tmp___112 = jit->ip;
          (jit->ip) ++;
          *tmp___112 = imb___7.b[0];
          tmp___113 = jit->ip;
          (jit->ip) ++;
          *tmp___113 = imb___7.b[1];
          tmp___114 = jit->ip;
          (jit->ip) ++;
          *tmp___114 = imb___7.b[2];
          tmp___115 = jit->ip;
          (jit->ip) ++;
          *tmp___115 = imb___7.b[3];
          break;
        }
      }
      break;
    }
  }
  emit_pop_callee_saved_regs(jit);
  tmp___125 = jit_current_func_info(jit);
  if (tmp___125->has_prolog) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___116 = jit->ip;
        (jit->ip) ++;
        *tmp___116 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___117 = 8;
        } else {
          tmp___117 = 0;
        }
        _amd64_rex_bits___9 = (unsigned char )tmp___117;
        if ((int )_amd64_rex_bits___9 != 0) {
          tmp___118 = jit->ip;
          (jit->ip) ++;
          *tmp___118 = (unsigned char )(64 | (int )_amd64_rex_bits___9);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___118 = jit->ip;
          (jit->ip) ++;
          *tmp___118 = (unsigned char )(64 | (int )_amd64_rex_bits___9);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___119 = jit->ip;
      (jit->ip) ++;
      *tmp___119 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___120 = jit->ip;
      (jit->ip) ++;
      *tmp___120 = (unsigned char)139;
      break;
      default: 
      tmp___121 = __builtin_expect(1L, 0L);
      if (tmp___121) {
        __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3205, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___122 = jit->ip;
          (jit->ip) ++;
          *tmp___122 = (unsigned char )(((3 << 6) | (4 << 3)) | 5);
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        _amd64_rex_bits___10 = (unsigned char)0;
        if ((int )_amd64_rex_bits___10 != 0) {
          tmp___123 = jit->ip;
          (jit->ip) ++;
          *tmp___123 = (unsigned char )(64 | (int )_amd64_rex_bits___10);
        }
        break;
      }
      tmp___124 = jit->ip;
      (jit->ip) ++;
      *tmp___124 = (unsigned char)93;
      break;
    }
  }
  while (1) {
    tmp___126 = jit->ip;
    (jit->ip) ++;
    *tmp___126 = (unsigned char)195;
    break;
  }
  break;
  case 448U: 
  funcall_put_arg(jit, op);
  break;
  case 120U: 
  funcall_fput_arg(jit, op);
  break;
  case 728U: 
  emit_get_arg(jit, op);
  break;
  case 320U: 
  emit_msg_op(jit, op);
  break;
  case 360U: 
  emit_trace_op(jit, op);
  while ((unsigned long )jit->ip % 16UL) {
    while (1) {
      while (1) {
        tmp___127 = jit->ip;
        (jit->ip) ++;
        *tmp___127 = (unsigned char)144;
        break;
      }
      break;
    }
  }
  break;
  case 160U: 
  emit_ld_op(jit, op, a1, a2);
  break;
  case 872U: 
  emit_ldx_op(jit, op, a1, a2, a3);
  break;
  case 24U: 
  emit_sse_fst_op(jit, op, a1, a2);
  break;
  case 232U: 
  emit_sse_fstx_op(jit, op, a1, a2, a3);
  break;
  case 640U: 
  emit_sse_fld_op(jit, op, a1, a2);
  break;
  case 752U: 
  emit_sse_fldx_op(jit, op, a1, a2, a3);
  break;
  case 560U: 
  emit_memcpy(jit, op, a1, a2, a3);
  break;
  case 592U: 
  emit_memset(jit, op, a1, a2, a3, (int )op->arg_size);
  break;
  case 248U: 
  emit_transfer_init(jit, op, a1, a2, a3, (int )op->arg_size);
  break;
  case 280U: 
  emit_transfer_loop(jit, (jit_op *)a1);
  break;
  case 792U: 
  emit_transfer_op(jit, op, 6);
  break;
  case 264U: 
  emit_transfer_op(jit, op, 4);
  break;
  case 896U: 
  emit_transfer_op(jit, op, 1);
  break;
  case 464U: 
  emit_transfer_op(jit, op, 0);
  break;
  case 336U: 
  emit_transfer_op(jit, op, 5);
  break;
  case 888U: 
  break;
  case 784U: 
  break;
  case 208U: 
  break;
  case 456U: 
  ((jit_label *)a1)->pos = (jit_value )jit->ip - (jit_value )jit->buf;
  break;
  case 760U: 
  while ((unsigned long )jit->ip % (unsigned long )op->arg[0]) {
    while (1) {
      while (1) {
        tmp___128 = jit->ip;
        (jit->ip) ++;
        *tmp___128 = (unsigned char)144;
        break;
      }
      break;
    }
  }
  break;
  case 56U: 
  case 832U: 
  op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
  while (1) {
    while (1) {
      if (sizeof(void *) > 4UL) {
        tmp___129 = 8;
      } else {
        tmp___129 = 0;
      }
      if (a1 > 7L) {
        tmp___130 = 1;
      } else {
        tmp___130 = 0;
      }
      _amd64_rex_bits___11 = (unsigned char )(tmp___129 | tmp___130);
      if ((int )_amd64_rex_bits___11 != 0) {
        tmp___131 = jit->ip;
        (jit->ip) ++;
        *tmp___131 = (unsigned char )(64 | (int )_amd64_rex_bits___11);
      } else
      if (sizeof(void *) == 1UL) {
        tmp___131 = jit->ip;
        (jit->ip) ++;
        *tmp___131 = (unsigned char )(64 | (int )_amd64_rex_bits___11);
      }
      break;
    }
    tmp___132 = jit->ip;
    (jit->ip) ++;
    *tmp___132 = (unsigned char )(184L + (a1 & 7L));
    if (sizeof(void *) == 8UL) {
      while (1) {
        imb___8.val = 0xdeadbeefcafebabeUL;
        tmp___133 = jit->ip;
        (jit->ip) ++;
        *tmp___133 = imb___8.b[0];
        tmp___134 = jit->ip;
        (jit->ip) ++;
        *tmp___134 = imb___8.b[1];
        tmp___135 = jit->ip;
        (jit->ip) ++;
        *tmp___135 = imb___8.b[2];
        tmp___136 = jit->ip;
        (jit->ip) ++;
        *tmp___136 = imb___8.b[3];
        tmp___137 = jit->ip;
        (jit->ip) ++;
        *tmp___137 = imb___8.b[4];
        tmp___138 = jit->ip;
        (jit->ip) ++;
        *tmp___138 = imb___8.b[5];
        tmp___139 = jit->ip;
        (jit->ip) ++;
        *tmp___139 = imb___8.b[6];
        tmp___140 = jit->ip;
        (jit->ip) ++;
        *tmp___140 = imb___8.b[7];
        break;
      }
    } else {
      while (1) {
        imb___9.val = -889275714;
        tmp___141 = jit->ip;
        (jit->ip) ++;
        *tmp___141 = imb___9.b[0];
        tmp___142 = jit->ip;
        (jit->ip) ++;
        *tmp___142 = imb___9.b[1];
        tmp___143 = jit->ip;
        (jit->ip) ++;
        *tmp___143 = imb___9.b[2];
        tmp___144 = jit->ip;
        (jit->ip) ++;
        *tmp___144 = imb___9.b[3];
        break;
      }
    }
    break;
  }
  break;
  case 352U: 
  break;
  case 704U: 
  break;
  default: 
  found = 0;
  }
  if (found) {
    return;
  }
  switch ((int )op->code) {
  case 841: 
  if (a1 != a2) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___145 = jit->ip;
        (jit->ip) ++;
        *tmp___145 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___146 = 8;
        } else {
          tmp___146 = 0;
        }
        if (a1 > 7L) {
          tmp___147 = 4;
        } else {
          tmp___147 = 0;
        }
        if (a2 > 7L) {
          tmp___148 = 1;
        } else {
          tmp___148 = 0;
        }
        _amd64_rex_bits___12 = (unsigned char )((tmp___146 | tmp___147) | tmp___148);
        if ((int )_amd64_rex_bits___12 != 0) {
          tmp___149 = jit->ip;
          (jit->ip) ++;
          *tmp___149 = (unsigned char )(64 | (int )_amd64_rex_bits___12);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___149 = jit->ip;
          (jit->ip) ++;
          *tmp___149 = (unsigned char )(64 | (int )_amd64_rex_bits___12);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___150 = jit->ip;
      (jit->ip) ++;
      *tmp___150 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___151 = jit->ip;
      (jit->ip) ++;
      *tmp___151 = (unsigned char)139;
      break;
      default: 
      tmp___152 = __builtin_expect(1L, 0L);
      if (tmp___152) {
        __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3264, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___153 = jit->ip;
          (jit->ip) ++;
          *tmp___153 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  break;
  case 842: 
  if (a2 == 0L) {
    while (1) {
      while (1) {
        if (a1 > 7L) {
          tmp___154 = 4;
        } else {
          tmp___154 = 0;
        }
        if (a1 > 7L) {
          tmp___155 = 1;
        } else {
          tmp___155 = 0;
        }
        _amd64_rex_bits___13 = (unsigned char )((8 | tmp___154) | tmp___155);
        if ((int )_amd64_rex_bits___13 != 0) {
          tmp___156 = jit->ip;
          (jit->ip) ++;
          *tmp___156 = (unsigned char )(64 | (int )_amd64_rex_bits___13);
        }
        break;
      }
      tmp___157 = jit->ip;
      (jit->ip) ++;
      *tmp___157 = (unsigned char )((6 << 3) + 3);
      while (1) {
        while (1) {
          tmp___158 = jit->ip;
          (jit->ip) ++;
          *tmp___158 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a1 & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      while (1) {
        if (a1 > 7L) {
          tmp___159 = 1;
        } else {
          tmp___159 = 0;
        }
        _amd64_rex_bits___14 = (unsigned char )(8 | tmp___159);
        if ((int )_amd64_rex_bits___14 != 0) {
          tmp___160 = jit->ip;
          (jit->ip) ++;
          *tmp___160 = (unsigned char )(64 | (int )_amd64_rex_bits___14);
        }
        break;
      }
      tmp___161 = jit->ip;
      (jit->ip) ++;
      *tmp___161 = (unsigned char )(184L + (a1 & 7L));
      while (1) {
        imb___10.val = (size_t )a2;
        tmp___162 = jit->ip;
        (jit->ip) ++;
        *tmp___162 = imb___10.b[0];
        tmp___163 = jit->ip;
        (jit->ip) ++;
        *tmp___163 = imb___10.b[1];
        tmp___164 = jit->ip;
        (jit->ip) ++;
        *tmp___164 = imb___10.b[2];
        tmp___165 = jit->ip;
        (jit->ip) ++;
        *tmp___165 = imb___10.b[3];
        tmp___166 = jit->ip;
        (jit->ip) ++;
        *tmp___166 = imb___10.b[4];
        tmp___167 = jit->ip;
        (jit->ip) ++;
        *tmp___167 = imb___10.b[5];
        tmp___168 = jit->ip;
        (jit->ip) ++;
        *tmp___168 = imb___10.b[6];
        tmp___169 = jit->ip;
        (jit->ip) ++;
        *tmp___169 = imb___10.b[7];
        break;
      }
      break;
    }
  }
  break;
  case 776: 
  funcall_prepare(jit, op, (int )(a1 + a2));
  tmp___174 = emit_push_caller_saved_regs(jit, op);
  jit->push_count += tmp___174;
  break;
  case 536: 
  emit_prolog_op(jit, op);
  break;
  case 258: 
  while (1) {
    if ((int )op->arg_size == 2) {
      tmp___175 = jit->ip;
      (jit->ip) ++;
      *tmp___175 = (unsigned char)102;
    }
    while (1) {
      if ((int )op->arg_size > 4) {
        tmp___176 = 8;
      } else {
        tmp___176 = 0;
      }
      if (a2 > 7L) {
        tmp___177 = 4;
      } else {
        tmp___177 = 0;
      }
      _amd64_rex_bits___15 = (unsigned char )(tmp___176 | tmp___177);
      if ((int )_amd64_rex_bits___15 != 0) {
        tmp___178 = jit->ip;
        (jit->ip) ++;
        *tmp___178 = (unsigned char )(64 | (int )_amd64_rex_bits___15);
      } else
      if ((int )op->arg_size == 1) {
        tmp___178 = jit->ip;
        (jit->ip) ++;
        *tmp___178 = (unsigned char )(64 | (int )_amd64_rex_bits___15);
      }
      break;
    }
    switch ((int )op->arg_size) {
    case 1: 
    tmp___179 = jit->ip;
    (jit->ip) ++;
    *tmp___179 = (unsigned char)136;
    break;
    case 8: 
    case 4: 
    case 2: 
    tmp___180 = jit->ip;
    (jit->ip) ++;
    *tmp___180 = (unsigned char)137;
    break;
    default: 
    tmp___181 = __builtin_expect(1L, 0L);
    if (tmp___181) {
      __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3275, "0");
    }
    }
    while (1) {
      tmp___182 = jit->ip;
      (jit->ip) ++;
      *tmp___182 = (unsigned char )(((a2 & 7L) << 3) | 4L);
      break;
    }
    while (1) {
      tmp___183 = jit->ip;
      (jit->ip) ++;
      *tmp___183 = (unsigned char )((4 << 3) | 5);
      break;
    }
    while (1) {
      imb___12.val = (int )a1;
      tmp___184 = jit->ip;
      (jit->ip) ++;
      *tmp___184 = imb___12.b[0];
      tmp___185 = jit->ip;
      (jit->ip) ++;
      *tmp___185 = imb___12.b[1];
      tmp___186 = jit->ip;
      (jit->ip) ++;
      *tmp___186 = imb___12.b[2];
      tmp___187 = jit->ip;
      (jit->ip) ++;
      *tmp___187 = imb___12.b[3];
      break;
    }
    break;
  }
  break;
  case 257: 
  while (1) {
    if ((int )op->arg_size == 2) {
      tmp___188 = jit->ip;
      (jit->ip) ++;
      *tmp___188 = (unsigned char)102;
    }
    while (1) {
      if ((int )op->arg_size > 4) {
        tmp___189 = 8;
      } else {
        tmp___189 = 0;
      }
      if (a2 > 7L) {
        tmp___190 = 4;
      } else {
        tmp___190 = 0;
      }
      if (a1 > 7L) {
        tmp___191 = 1;
      } else {
        tmp___191 = 0;
      }
      _amd64_rex_bits___16 = (unsigned char )((tmp___189 | tmp___190) | tmp___191);
      if ((int )_amd64_rex_bits___16 != 0) {
        tmp___192 = jit->ip;
        (jit->ip) ++;
        *tmp___192 = (unsigned char )(64 | (int )_amd64_rex_bits___16);
      } else
      if ((int )op->arg_size == 1) {
        tmp___192 = jit->ip;
        (jit->ip) ++;
        *tmp___192 = (unsigned char )(64 | (int )_amd64_rex_bits___16);
      }
      break;
    }
    switch ((int )op->arg_size) {
    case 1: 
    tmp___193 = jit->ip;
    (jit->ip) ++;
    *tmp___193 = (unsigned char)136;
    break;
    case 8: 
    case 4: 
    case 2: 
    tmp___194 = jit->ip;
    (jit->ip) ++;
    *tmp___194 = (unsigned char)137;
    break;
    default: 
    tmp___195 = __builtin_expect(1L, 0L);
    if (tmp___195) {
      __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3276, "0");
    }
    }
    while (1) {
      if ((a1 & 7L) == 4L) {
        while (1) {
          tmp___196 = jit->ip;
          (jit->ip) ++;
          *tmp___196 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___197 = jit->ip;
          (jit->ip) ++;
          *tmp___197 = (unsigned char )((4 << 3) | 4);
          break;
        }
        break;
      }
      if ((a1 & 7L) != 5L) {
        while (1) {
          tmp___206 = jit->ip;
          (jit->ip) ++;
          *tmp___206 = (unsigned char )((((a2 & 7L) & 7L) << 3) | ((a1 & 7L) & 7L));
          break;
        }
        break;
      }
      while (1) {
        tmp___207 = jit->ip;
        (jit->ip) ++;
        *tmp___207 = (unsigned char )(((long )(1 << 6) | (((a2 & 7L) & 7L) << 3)) | ((a1 & 7L) & 7L));
        break;
      }
      while (1) {
        *(jit->ip) = (unsigned char)0;
        (jit->ip) ++;
        break;
      }
      break;
    }
    break;
  }
  break;
  case 514: 
  while (1) {
    if ((int )op->arg_size == 2) {
      tmp___213 = jit->ip;
      (jit->ip) ++;
      *tmp___213 = (unsigned char)102;
    }
    while (1) {
      if ((int )op->arg_size > 4) {
        tmp___214 = 8;
      } else {
        tmp___214 = 0;
      }
      if (a3 > 7L) {
        tmp___215 = 4;
      } else {
        tmp___215 = 0;
      }
      if (a2 > 7L) {
        tmp___216 = 1;
      } else {
        tmp___216 = 0;
      }
      _amd64_rex_bits___17 = (unsigned char )((tmp___214 | tmp___215) | tmp___216);
      if ((int )_amd64_rex_bits___17 != 0) {
        tmp___217 = jit->ip;
        (jit->ip) ++;
        *tmp___217 = (unsigned char )(64 | (int )_amd64_rex_bits___17);
      } else
      if ((int )op->arg_size == 1) {
        tmp___217 = jit->ip;
        (jit->ip) ++;
        *tmp___217 = (unsigned char )(64 | (int )_amd64_rex_bits___17);
      }
      break;
    }
    switch ((int )op->arg_size) {
    case 1: 
    tmp___218 = jit->ip;
    (jit->ip) ++;
    *tmp___218 = (unsigned char)136;
    break;
    case 8: 
    case 4: 
    case 2: 
    tmp___219 = jit->ip;
    (jit->ip) ++;
    *tmp___219 = (unsigned char)137;
    break;
    default: 
    tmp___220 = __builtin_expect(1L, 0L);
    if (tmp___220) {
      __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3277, "0");
    }
    }
    while (1) {
      if ((a2 & 7L) == 4L) {
        if (a1 == 0L) {
          while (1) {
            tmp___221 = jit->ip;
            (jit->ip) ++;
            *tmp___221 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___222 = jit->ip;
            (jit->ip) ++;
            *tmp___222 = (unsigned char )((4 << 3) | 4);
            break;
          }
        } else
        if ((int )a1 >= -128) {
          if ((int )a1 <= 127) {
            while (1) {
              tmp___223 = jit->ip;
              (jit->ip) ++;
              *tmp___223 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___224 = jit->ip;
              (jit->ip) ++;
              *tmp___224 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(a1 & 255L);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___3;
          }
        } else {
          _L___3: /* CIL Label */ 
          while (1) {
            tmp___225 = jit->ip;
            (jit->ip) ++;
            *tmp___225 = (unsigned char )(((long )(2 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            tmp___226 = jit->ip;
            (jit->ip) ++;
            *tmp___226 = (unsigned char )((4 << 3) | 4);
            break;
          }
          while (1) {
            imb___15.val = (int )a1;
            tmp___227 = jit->ip;
            (jit->ip) ++;
            *tmp___227 = imb___15.b[0];
            tmp___228 = jit->ip;
            (jit->ip) ++;
            *tmp___228 = imb___15.b[1];
            tmp___229 = jit->ip;
            (jit->ip) ++;
            *tmp___229 = imb___15.b[2];
            tmp___230 = jit->ip;
            (jit->ip) ++;
            *tmp___230 = imb___15.b[3];
            break;
          }
        }
        break;
      }
      if (a1 == 0L) {
        if ((a2 & 7L) != 5L) {
          while (1) {
            tmp___231 = jit->ip;
            (jit->ip) ++;
            *tmp___231 = (unsigned char )((((a3 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
            break;
          }
          break;
        }
      }
      if ((int )a1 >= -128) {
        if ((int )a1 <= 127) {
          while (1) {
            tmp___232 = jit->ip;
            (jit->ip) ++;
            *tmp___232 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(a1 & 255L);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L___4;
        }
      } else {
        _L___4: /* CIL Label */ 
        while (1) {
          tmp___233 = jit->ip;
          (jit->ip) ++;
          *tmp___233 = (unsigned char )(((long )(2 << 6) | (((a3 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
          break;
        }
        while (1) {
          imb___16.val = (int )a1;
          tmp___234 = jit->ip;
          (jit->ip) ++;
          *tmp___234 = imb___16.b[0];
          tmp___235 = jit->ip;
          (jit->ip) ++;
          *tmp___235 = imb___16.b[1];
          tmp___236 = jit->ip;
          (jit->ip) ++;
          *tmp___236 = imb___16.b[2];
          tmp___237 = jit->ip;
          (jit->ip) ++;
          *tmp___237 = imb___16.b[3];
          break;
        }
      }
      break;
    }
    break;
  }
  break;
  case 513: 
  while (1) {
    while (1) {
      if ((int )op->arg_size > 4) {
        tmp___238 = 8;
      } else {
        tmp___238 = 0;
      }
      if (a3 > 7L) {
        tmp___239 = 4;
      } else {
        tmp___239 = 0;
      }
      if (a2 > 7L) {
        tmp___240 = 2;
      } else {
        tmp___240 = 0;
      }
      if (a1 > 7L) {
        tmp___241 = 1;
      } else {
        tmp___241 = 0;
      }
      _amd64_rex_bits___18 = (unsigned char )(((tmp___238 | tmp___239) | tmp___240) | tmp___241);
      if ((int )_amd64_rex_bits___18 != 0) {
        tmp___242 = jit->ip;
        (jit->ip) ++;
        *tmp___242 = (unsigned char )(64 | (int )_amd64_rex_bits___18);
      } else
      if ((int )op->arg_size == 1) {
        tmp___242 = jit->ip;
        (jit->ip) ++;
        *tmp___242 = (unsigned char )(64 | (int )_amd64_rex_bits___18);
      }
      break;
    }
    while (1) {
      if ((int )op->arg_size == 8) {
        tmp___243 = 4;
      } else {
        tmp___243 = (int )op->arg_size;
      }
      switch (tmp___243) {
      case 1: 
      tmp___244 = jit->ip;
      (jit->ip) ++;
      *tmp___244 = (unsigned char)136;
      break;
      case 2: 
      tmp___245 = jit->ip;
      (jit->ip) ++;
      *tmp___245 = (unsigned char)102;
      case 4: 
      tmp___246 = jit->ip;
      (jit->ip) ++;
      *tmp___246 = (unsigned char)137;
      break;
      default: 
      tmp___247 = __builtin_expect(1L, 0L);
      if (tmp___247) {
        __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3278, "0");
      }
      }
      while (1) {
        if ((a1 & 7L) == -1L) {
          while (1) {
            tmp___248 = jit->ip;
            (jit->ip) ++;
            *tmp___248 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___249 = jit->ip;
            (jit->ip) ++;
            *tmp___249 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 5L);
            break;
          }
          while (1) {
            imb___17.val = 0;
            tmp___250 = jit->ip;
            (jit->ip) ++;
            *tmp___250 = imb___17.b[0];
            tmp___251 = jit->ip;
            (jit->ip) ++;
            *tmp___251 = imb___17.b[1];
            tmp___252 = jit->ip;
            (jit->ip) ++;
            *tmp___252 = imb___17.b[2];
            tmp___253 = jit->ip;
            (jit->ip) ++;
            *tmp___253 = imb___17.b[3];
            break;
          }
        } else
        if ((a1 & 7L) != 5L) {
          while (1) {
            tmp___254 = jit->ip;
            (jit->ip) ++;
            *tmp___254 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___255 = jit->ip;
            (jit->ip) ++;
            *tmp___255 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
            break;
          }
        } else {
          while (1) {
            tmp___256 = jit->ip;
            (jit->ip) ++;
            *tmp___256 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            tmp___257 = jit->ip;
            (jit->ip) ++;
            *tmp___257 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)0;
            (jit->ip) ++;
            break;
          }
        }
        break;
      }
      break;
    }
    break;
  }
  break;
  case 65: 
  while (1) {
    tmp___264 = jit->ip;
    (jit->ip) ++;
    *tmp___264 = (unsigned char)242;
    while (1) {
      if (a1 > 7L) {
        tmp___265 = 4;
      } else {
        tmp___265 = 0;
      }
      if (a2 > 7L) {
        tmp___266 = 1;
      } else {
        tmp___266 = 0;
      }
      _amd64_rex_bits___19 = (unsigned char )(tmp___265 | tmp___266);
      if ((int )_amd64_rex_bits___19 != 0) {
        tmp___267 = jit->ip;
        (jit->ip) ++;
        *tmp___267 = (unsigned char )(64 | (int )_amd64_rex_bits___19);
      }
      break;
    }
    tmp___268 = jit->ip;
    (jit->ip) ++;
    *tmp___268 = (unsigned char)15;
    tmp___269 = jit->ip;
    (jit->ip) ++;
    *tmp___269 = (unsigned char)16;
    while (1) {
      while (1) {
        tmp___270 = jit->ip;
        (jit->ip) ++;
        *tmp___270 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
        break;
      }
      break;
    }
    break;
  }
  break;
  case 66: 
  sse_mov_reg_safeimm(jit, op, a1, & op->flt_imm);
  break;
  case 681: 
  emit_sse_alu_op(jit, op, 88);
  break;
  case 377: 
  emit_sse_sub_op(jit, op, a1, a2, a3);
  break;
  case 601: 
  emit_sse_sub_op(jit, op, a1, a3, a2);
  break;
  case 617: 
  emit_sse_alu_op(jit, op, 89);
  break;
  case 289: 
  emit_sse_div_op(jit, a1, a2, a3);
  break;
  case 657: 
  emit_sse_neg_op(jit, op, a1, a2);
  break;
  case 825: 
  emit_sse_branch(jit, op, a1, a2, a3, 2);
  break;
  case 193: 
  emit_sse_branch(jit, op, a1, a2, a3, 4);
  break;
  case 385: 
  emit_sse_branch(jit, op, a1, a2, a3, 5);
  break;
  case 745: 
  emit_sse_branch(jit, op, a1, a3, a2, 5);
  break;
  case 817: 
  emit_sse_branch(jit, op, a1, a3, a2, 0);
  break;
  case 505: 
  emit_sse_branch(jit, op, a1, a3, a2, 1);
  break;
  case 89: 
  while (1) {
    tmp___271 = jit->ip;
    (jit->ip) ++;
    *tmp___271 = (unsigned char)242;
    while (1) {
      if (a1 > 7L) {
        tmp___272 = 4;
      } else {
        tmp___272 = 0;
      }
      if (a2 > 7L) {
        tmp___273 = 1;
      } else {
        tmp___273 = 0;
      }
      _amd64_rex_bits___20 = (unsigned char )((8 | tmp___272) | tmp___273);
      if ((int )_amd64_rex_bits___20 != 0) {
        tmp___274 = jit->ip;
        (jit->ip) ++;
        *tmp___274 = (unsigned char )(64 | (int )_amd64_rex_bits___20);
      }
      break;
    }
    tmp___275 = jit->ip;
    (jit->ip) ++;
    *tmp___275 = (unsigned char)15;
    tmp___276 = jit->ip;
    (jit->ip) ++;
    *tmp___276 = (unsigned char)42;
    while (1) {
      while (1) {
        tmp___277 = jit->ip;
        (jit->ip) ++;
        *tmp___277 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
        break;
      }
      break;
    }
    break;
  }
  break;
  case 473: 
  while (1) {
    tmp___278 = jit->ip;
    (jit->ip) ++;
    *tmp___278 = (unsigned char)242;
    while (1) {
      if (a1 > 7L) {
        tmp___279 = 4;
      } else {
        tmp___279 = 0;
      }
      if (a2 > 7L) {
        tmp___280 = 1;
      } else {
        tmp___280 = 0;
      }
      _amd64_rex_bits___21 = (unsigned char )((8 | tmp___279) | tmp___280);
      if ((int )_amd64_rex_bits___21 != 0) {
        tmp___281 = jit->ip;
        (jit->ip) ++;
        *tmp___281 = (unsigned char )(64 | (int )_amd64_rex_bits___21);
      }
      break;
    }
    tmp___282 = jit->ip;
    (jit->ip) ++;
    *tmp___282 = (unsigned char)15;
    tmp___283 = jit->ip;
    (jit->ip) ++;
    *tmp___283 = (unsigned char)44;
    while (1) {
      while (1) {
        tmp___284 = jit->ip;
        (jit->ip) ++;
        *tmp___284 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
        break;
      }
      break;
    }
    break;
  }
  break;
  case 801: 
  emit_sse_floor(jit, a1, a2, 0);
  break;
  case 737: 
  emit_sse_floor(jit, a1, a2, 1);
  break;
  case 169: 
  emit_sse_round(jit, op, a1, a2);
  break;
  case 97: 
  emit_fret_op(jit, op);
  break;
  case 696: 
  emit_fretval_op(jit, op);
  break;
  case 624: 
  emit_ureg(jit, a1, (int )a2);
  break;
  case 432: 
  emit_lreg(jit, (int )a1, a2);
  break;
  case 416: 
  emit_ureg(jit, a1, (int )a2);
  break;
  case 16: 
  while (1) {
    if (sizeof(void *) == 2UL) {
      tmp___285 = jit->ip;
      (jit->ip) ++;
      *tmp___285 = (unsigned char)102;
    }
    while (1) {
      if (sizeof(void *) > 4UL) {
        tmp___286 = 8;
      } else {
        tmp___286 = 0;
      }
      if (a1 > 7L) {
        tmp___287 = 4;
      } else {
        tmp___287 = 0;
      }
      if (a2 > 7L) {
        tmp___288 = 1;
      } else {
        tmp___288 = 0;
      }
      _amd64_rex_bits___22 = (unsigned char )((tmp___286 | tmp___287) | tmp___288);
      if ((int )_amd64_rex_bits___22 != 0) {
        tmp___289 = jit->ip;
        (jit->ip) ++;
        *tmp___289 = (unsigned char )(64 | (int )_amd64_rex_bits___22);
      } else
      if (sizeof(void *) == 1UL) {
        tmp___289 = jit->ip;
        (jit->ip) ++;
        *tmp___289 = (unsigned char )(64 | (int )_amd64_rex_bits___22);
      }
      break;
    }
    switch (sizeof(void *)) {
    case 1UL: 
    tmp___290 = jit->ip;
    (jit->ip) ++;
    *tmp___290 = (unsigned char)138;
    break;
    case 8UL: 
    case 4UL: 
    case 2UL: 
    tmp___291 = jit->ip;
    (jit->ip) ++;
    *tmp___291 = (unsigned char)139;
    break;
    default: 
    tmp___292 = __builtin_expect(1L, 0L);
    if (tmp___292) {
      __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3310, "0");
    }
    }
    while (1) {
      while (1) {
        tmp___293 = jit->ip;
        (jit->ip) ++;
        *tmp___293 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
        break;
      }
      break;
    }
    break;
  }
  break;
  case 496: 
  break;
  case 528: 
  break;
  case 650: 
  while (1) {
    while (1) {
      if ((int )op->arg_size > 4) {
        tmp___294 = 8;
      } else {
        tmp___294 = 0;
      }
      _amd64_rex_bits___23 = (unsigned char )tmp___294;
      if ((int )_amd64_rex_bits___23 != 0) {
        tmp___295 = jit->ip;
        (jit->ip) ++;
        *tmp___295 = (unsigned char )(64 | (int )_amd64_rex_bits___23);
      } else
      if ((int )op->arg_size == 1) {
        tmp___295 = jit->ip;
        (jit->ip) ++;
        *tmp___295 = (unsigned char )(64 | (int )_amd64_rex_bits___23);
      }
      break;
    }
    if ((int )op->arg_size == 1) {
      tmp___296 = jit->ip;
      (jit->ip) ++;
      *tmp___296 = (unsigned char)198;
      while (1) {
        tmp___297 = jit->ip;
        (jit->ip) ++;
        *tmp___297 = (unsigned char)4;
        tmp___298 = jit->ip;
        (jit->ip) ++;
        *tmp___298 = (unsigned char)37;
        while (1) {
          imb___19.val = (int )a1;
          tmp___299 = jit->ip;
          (jit->ip) ++;
          *tmp___299 = imb___19.b[0];
          tmp___300 = jit->ip;
          (jit->ip) ++;
          *tmp___300 = imb___19.b[1];
          tmp___301 = jit->ip;
          (jit->ip) ++;
          *tmp___301 = imb___19.b[2];
          tmp___302 = jit->ip;
          (jit->ip) ++;
          *tmp___302 = imb___19.b[3];
          break;
        }
        break;
      }
      while (1) {
        *(jit->ip) = (unsigned char )(a2 & 255L);
        (jit->ip) ++;
        break;
      }
    } else
    if ((int )op->arg_size == 2) {
      tmp___303 = jit->ip;
      (jit->ip) ++;
      *tmp___303 = (unsigned char)102;
      tmp___304 = jit->ip;
      (jit->ip) ++;
      *tmp___304 = (unsigned char)199;
      while (1) {
        tmp___305 = jit->ip;
        (jit->ip) ++;
        *tmp___305 = (unsigned char)4;
        tmp___306 = jit->ip;
        (jit->ip) ++;
        *tmp___306 = (unsigned char)37;
        while (1) {
          imb___20.val = (int )a1;
          tmp___307 = jit->ip;
          (jit->ip) ++;
          *tmp___307 = imb___20.b[0];
          tmp___308 = jit->ip;
          (jit->ip) ++;
          *tmp___308 = imb___20.b[1];
          tmp___309 = jit->ip;
          (jit->ip) ++;
          *tmp___309 = imb___20.b[2];
          tmp___310 = jit->ip;
          (jit->ip) ++;
          *tmp___310 = imb___20.b[3];
          break;
        }
        break;
      }
      while (1) {
        *((short *)jit->ip) = (short )a2;
        jit->ip += 2;
        break;
      }
    } else {
      tmp___311 = jit->ip;
      (jit->ip) ++;
      *tmp___311 = (unsigned char)199;
      while (1) {
        tmp___312 = jit->ip;
        (jit->ip) ++;
        *tmp___312 = (unsigned char)4;
        tmp___313 = jit->ip;
        (jit->ip) ++;
        *tmp___313 = (unsigned char)37;
        while (1) {
          imb___21.val = (int )a1;
          tmp___314 = jit->ip;
          (jit->ip) ++;
          *tmp___314 = imb___21.b[0];
          tmp___315 = jit->ip;
          (jit->ip) ++;
          *tmp___315 = imb___21.b[1];
          tmp___316 = jit->ip;
          (jit->ip) ++;
          *tmp___316 = imb___21.b[2];
          tmp___317 = jit->ip;
          (jit->ip) ++;
          *tmp___317 = imb___21.b[3];
          break;
        }
        break;
      }
      while (1) {
        imb___22.val = (int )a2;
        tmp___318 = jit->ip;
        (jit->ip) ++;
        *tmp___318 = imb___22.b[0];
        tmp___319 = jit->ip;
        (jit->ip) ++;
        *tmp___319 = imb___22.b[1];
        tmp___320 = jit->ip;
        (jit->ip) ++;
        *tmp___320 = imb___22.b[2];
        tmp___321 = jit->ip;
        (jit->ip) ++;
        *tmp___321 = imb___22.b[3];
        break;
      }
    }
    break;
  }
  break;
  case 649: 
  while (1) {
    if ((int )op->arg_size == 2) {
      tmp___322 = jit->ip;
      (jit->ip) ++;
      *tmp___322 = (unsigned char)102;
    }
    while (1) {
      if ((int )op->arg_size == 1) {
        tmp___325 = 0;
      } else {
        tmp___325 = (int )op->arg_size;
      }
      if (tmp___325 > 4) {
        tmp___324 = 8;
      } else {
        tmp___324 = 0;
      }
      if (a1 > 7L) {
        tmp___326 = 1;
      } else {
        tmp___326 = 0;
      }
      _amd64_rex_bits___24 = (unsigned char )(tmp___324 | tmp___326);
      if ((int )_amd64_rex_bits___24 != 0) {
        tmp___327 = jit->ip;
        (jit->ip) ++;
        *tmp___327 = (unsigned char )(64 | (int )_amd64_rex_bits___24);
      } else {
        if ((int )op->arg_size == 1) {
          tmp___328 = 0;
        } else {
          tmp___328 = (int )op->arg_size;
        }
        if (tmp___328 == 1) {
          tmp___327 = jit->ip;
          (jit->ip) ++;
          *tmp___327 = (unsigned char )(64 | (int )_amd64_rex_bits___24);
        }
      }
      break;
    }
    if ((int )op->arg_size == 1) {
      tmp___329 = jit->ip;
      (jit->ip) ++;
      *tmp___329 = (unsigned char)198;
      while (1) {
        if ((a1 & 7L) == 4L) {
          while (1) {
            tmp___330 = jit->ip;
            (jit->ip) ++;
            *tmp___330 = (unsigned char)4;
            break;
          }
          while (1) {
            tmp___331 = jit->ip;
            (jit->ip) ++;
            *tmp___331 = (unsigned char )((4 << 3) | 4);
            break;
          }
          break;
        }
        if ((a1 & 7L) != 5L) {
          while (1) {
            tmp___340 = jit->ip;
            (jit->ip) ++;
            *tmp___340 = (unsigned char )((a1 & 7L) & 7L);
            break;
          }
          break;
        }
        while (1) {
          tmp___341 = jit->ip;
          (jit->ip) ++;
          *tmp___341 = (unsigned char )((long )(1 << 6) | ((a1 & 7L) & 7L));
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)0;
          (jit->ip) ++;
          break;
        }
        break;
      }
      while (1) {
        *(jit->ip) = (unsigned char )(a2 & 255L);
        (jit->ip) ++;
        break;
      }
    } else
    if ((int )op->arg_size == 2) {
      tmp___347 = jit->ip;
      (jit->ip) ++;
      *tmp___347 = (unsigned char)199;
      while (1) {
        if ((a1 & 7L) == 4L) {
          while (1) {
            tmp___348 = jit->ip;
            (jit->ip) ++;
            *tmp___348 = (unsigned char)4;
            break;
          }
          while (1) {
            tmp___349 = jit->ip;
            (jit->ip) ++;
            *tmp___349 = (unsigned char )((4 << 3) | 4);
            break;
          }
          break;
        }
        if ((a1 & 7L) != 5L) {
          while (1) {
            tmp___358 = jit->ip;
            (jit->ip) ++;
            *tmp___358 = (unsigned char )((a1 & 7L) & 7L);
            break;
          }
          break;
        }
        while (1) {
          tmp___359 = jit->ip;
          (jit->ip) ++;
          *tmp___359 = (unsigned char )((long )(1 << 6) | ((a1 & 7L) & 7L));
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)0;
          (jit->ip) ++;
          break;
        }
        break;
      }
      while (1) {
        *((short *)jit->ip) = (short )a2;
        jit->ip += 2;
        break;
      }
    } else {
      tmp___365 = jit->ip;
      (jit->ip) ++;
      *tmp___365 = (unsigned char)199;
      while (1) {
        if ((a1 & 7L) == 4L) {
          while (1) {
            tmp___366 = jit->ip;
            (jit->ip) ++;
            *tmp___366 = (unsigned char)4;
            break;
          }
          while (1) {
            tmp___367 = jit->ip;
            (jit->ip) ++;
            *tmp___367 = (unsigned char )((4 << 3) | 4);
            break;
          }
          break;
        }
        if ((a1 & 7L) != 5L) {
          while (1) {
            tmp___376 = jit->ip;
            (jit->ip) ++;
            *tmp___376 = (unsigned char )((a1 & 7L) & 7L);
            break;
          }
          break;
        }
        while (1) {
          tmp___377 = jit->ip;
          (jit->ip) ++;
          *tmp___377 = (unsigned char )((long )(1 << 6) | ((a1 & 7L) & 7L));
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)0;
          (jit->ip) ++;
          break;
        }
        break;
      }
      while (1) {
        imb___29.val = (int )a2;
        tmp___383 = jit->ip;
        (jit->ip) ++;
        *tmp___383 = imb___29.b[0];
        tmp___384 = jit->ip;
        (jit->ip) ++;
        *tmp___384 = imb___29.b[1];
        tmp___385 = jit->ip;
        (jit->ip) ++;
        *tmp___385 = imb___29.b[2];
        tmp___386 = jit->ip;
        (jit->ip) ++;
        *tmp___386 = imb___29.b[3];
        break;
      }
    }
    break;
  }
  break;
  case 186: 
  while (1) {
    if ((int )op->arg_size == 2) {
      tmp___387 = jit->ip;
      (jit->ip) ++;
      *tmp___387 = (unsigned char)102;
    }
    while (1) {
      if ((int )op->arg_size == 1) {
        tmp___390 = 0;
      } else {
        tmp___390 = (int )op->arg_size;
      }
      if (tmp___390 > 4) {
        tmp___389 = 8;
      } else {
        tmp___389 = 0;
      }
      if (a2 > 7L) {
        tmp___391 = 1;
      } else {
        tmp___391 = 0;
      }
      _amd64_rex_bits___25 = (unsigned char )(tmp___389 | tmp___391);
      if ((int )_amd64_rex_bits___25 != 0) {
        tmp___392 = jit->ip;
        (jit->ip) ++;
        *tmp___392 = (unsigned char )(64 | (int )_amd64_rex_bits___25);
      } else {
        if ((int )op->arg_size == 1) {
          tmp___393 = 0;
        } else {
          tmp___393 = (int )op->arg_size;
        }
        if (tmp___393 == 1) {
          tmp___392 = jit->ip;
          (jit->ip) ++;
          *tmp___392 = (unsigned char )(64 | (int )_amd64_rex_bits___25);
        }
      }
      break;
    }
    if ((int )op->arg_size == 1) {
      tmp___394 = jit->ip;
      (jit->ip) ++;
      *tmp___394 = (unsigned char)198;
      while (1) {
        if ((a2 & 7L) == 4L) {
          if (a1 == 0L) {
            while (1) {
              tmp___395 = jit->ip;
              (jit->ip) ++;
              *tmp___395 = (unsigned char)4;
              break;
            }
            while (1) {
              tmp___396 = jit->ip;
              (jit->ip) ++;
              *tmp___396 = (unsigned char )((4 << 3) | 4);
              break;
            }
          } else
          if ((int )a1 >= -128) {
            if ((int )a1 <= 127) {
              while (1) {
                tmp___397 = jit->ip;
                (jit->ip) ++;
                *tmp___397 = (unsigned char )((1 << 6) | 4);
                break;
              }
              while (1) {
                tmp___398 = jit->ip;
                (jit->ip) ++;
                *tmp___398 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(a1 & 255L);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___5;
            }
          } else {
            _L___5: /* CIL Label */ 
            while (1) {
              tmp___399 = jit->ip;
              (jit->ip) ++;
              *tmp___399 = (unsigned char )((2 << 6) | 4);
              break;
            }
            while (1) {
              tmp___400 = jit->ip;
              (jit->ip) ++;
              *tmp___400 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              imb___30.val = (int )a1;
              tmp___401 = jit->ip;
              (jit->ip) ++;
              *tmp___401 = imb___30.b[0];
              tmp___402 = jit->ip;
              (jit->ip) ++;
              *tmp___402 = imb___30.b[1];
              tmp___403 = jit->ip;
              (jit->ip) ++;
              *tmp___403 = imb___30.b[2];
              tmp___404 = jit->ip;
              (jit->ip) ++;
              *tmp___404 = imb___30.b[3];
              break;
            }
          }
          break;
        }
        if (a1 == 0L) {
          if ((a2 & 7L) != 5L) {
            while (1) {
              tmp___405 = jit->ip;
              (jit->ip) ++;
              *tmp___405 = (unsigned char )((a2 & 7L) & 7L);
              break;
            }
            break;
          }
        }
        if ((int )a1 >= -128) {
          if ((int )a1 <= 127) {
            while (1) {
              tmp___406 = jit->ip;
              (jit->ip) ++;
              *tmp___406 = (unsigned char )((long )(1 << 6) | ((a2 & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(a1 & 255L);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___6;
          }
        } else {
          _L___6: /* CIL Label */ 
          while (1) {
            tmp___407 = jit->ip;
            (jit->ip) ++;
            *tmp___407 = (unsigned char )((long )(2 << 6) | ((a2 & 7L) & 7L));
            break;
          }
          while (1) {
            imb___31.val = (int )a1;
            tmp___408 = jit->ip;
            (jit->ip) ++;
            *tmp___408 = imb___31.b[0];
            tmp___409 = jit->ip;
            (jit->ip) ++;
            *tmp___409 = imb___31.b[1];
            tmp___410 = jit->ip;
            (jit->ip) ++;
            *tmp___410 = imb___31.b[2];
            tmp___411 = jit->ip;
            (jit->ip) ++;
            *tmp___411 = imb___31.b[3];
            break;
          }
        }
        break;
      }
      while (1) {
        *(jit->ip) = (unsigned char )(a3 & 255L);
        (jit->ip) ++;
        break;
      }
    } else
    if ((int )op->arg_size == 2) {
      tmp___412 = jit->ip;
      (jit->ip) ++;
      *tmp___412 = (unsigned char)199;
      while (1) {
        if ((a2 & 7L) == 4L) {
          if (a1 == 0L) {
            while (1) {
              tmp___413 = jit->ip;
              (jit->ip) ++;
              *tmp___413 = (unsigned char)4;
              break;
            }
            while (1) {
              tmp___414 = jit->ip;
              (jit->ip) ++;
              *tmp___414 = (unsigned char )((4 << 3) | 4);
              break;
            }
          } else
          if ((int )a1 >= -128) {
            if ((int )a1 <= 127) {
              while (1) {
                tmp___415 = jit->ip;
                (jit->ip) ++;
                *tmp___415 = (unsigned char )((1 << 6) | 4);
                break;
              }
              while (1) {
                tmp___416 = jit->ip;
                (jit->ip) ++;
                *tmp___416 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(a1 & 255L);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___7;
            }
          } else {
            _L___7: /* CIL Label */ 
            while (1) {
              tmp___417 = jit->ip;
              (jit->ip) ++;
              *tmp___417 = (unsigned char )((2 << 6) | 4);
              break;
            }
            while (1) {
              tmp___418 = jit->ip;
              (jit->ip) ++;
              *tmp___418 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              imb___32.val = (int )a1;
              tmp___419 = jit->ip;
              (jit->ip) ++;
              *tmp___419 = imb___32.b[0];
              tmp___420 = jit->ip;
              (jit->ip) ++;
              *tmp___420 = imb___32.b[1];
              tmp___421 = jit->ip;
              (jit->ip) ++;
              *tmp___421 = imb___32.b[2];
              tmp___422 = jit->ip;
              (jit->ip) ++;
              *tmp___422 = imb___32.b[3];
              break;
            }
          }
          break;
        }
        if (a1 == 0L) {
          if ((a2 & 7L) != 5L) {
            while (1) {
              tmp___423 = jit->ip;
              (jit->ip) ++;
              *tmp___423 = (unsigned char )((a2 & 7L) & 7L);
              break;
            }
            break;
          }
        }
        if ((int )a1 >= -128) {
          if ((int )a1 <= 127) {
            while (1) {
              tmp___424 = jit->ip;
              (jit->ip) ++;
              *tmp___424 = (unsigned char )((long )(1 << 6) | ((a2 & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(a1 & 255L);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___8;
          }
        } else {
          _L___8: /* CIL Label */ 
          while (1) {
            tmp___425 = jit->ip;
            (jit->ip) ++;
            *tmp___425 = (unsigned char )((long )(2 << 6) | ((a2 & 7L) & 7L));
            break;
          }
          while (1) {
            imb___33.val = (int )a1;
            tmp___426 = jit->ip;
            (jit->ip) ++;
            *tmp___426 = imb___33.b[0];
            tmp___427 = jit->ip;
            (jit->ip) ++;
            *tmp___427 = imb___33.b[1];
            tmp___428 = jit->ip;
            (jit->ip) ++;
            *tmp___428 = imb___33.b[2];
            tmp___429 = jit->ip;
            (jit->ip) ++;
            *tmp___429 = imb___33.b[3];
            break;
          }
        }
        break;
      }
      while (1) {
        *((short *)jit->ip) = (short )a3;
        jit->ip += 2;
        break;
      }
    } else {
      tmp___430 = jit->ip;
      (jit->ip) ++;
      *tmp___430 = (unsigned char)199;
      while (1) {
        if ((a2 & 7L) == 4L) {
          if (a1 == 0L) {
            while (1) {
              tmp___431 = jit->ip;
              (jit->ip) ++;
              *tmp___431 = (unsigned char)4;
              break;
            }
            while (1) {
              tmp___432 = jit->ip;
              (jit->ip) ++;
              *tmp___432 = (unsigned char )((4 << 3) | 4);
              break;
            }
          } else
          if ((int )a1 >= -128) {
            if ((int )a1 <= 127) {
              while (1) {
                tmp___433 = jit->ip;
                (jit->ip) ++;
                *tmp___433 = (unsigned char )((1 << 6) | 4);
                break;
              }
              while (1) {
                tmp___434 = jit->ip;
                (jit->ip) ++;
                *tmp___434 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(a1 & 255L);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___9;
            }
          } else {
            _L___9: /* CIL Label */ 
            while (1) {
              tmp___435 = jit->ip;
              (jit->ip) ++;
              *tmp___435 = (unsigned char )((2 << 6) | 4);
              break;
            }
            while (1) {
              tmp___436 = jit->ip;
              (jit->ip) ++;
              *tmp___436 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              imb___34.val = (int )a1;
              tmp___437 = jit->ip;
              (jit->ip) ++;
              *tmp___437 = imb___34.b[0];
              tmp___438 = jit->ip;
              (jit->ip) ++;
              *tmp___438 = imb___34.b[1];
              tmp___439 = jit->ip;
              (jit->ip) ++;
              *tmp___439 = imb___34.b[2];
              tmp___440 = jit->ip;
              (jit->ip) ++;
              *tmp___440 = imb___34.b[3];
              break;
            }
          }
          break;
        }
        if (a1 == 0L) {
          if ((a2 & 7L) != 5L) {
            while (1) {
              tmp___441 = jit->ip;
              (jit->ip) ++;
              *tmp___441 = (unsigned char )((a2 & 7L) & 7L);
              break;
            }
            break;
          }
        }
        if ((int )a1 >= -128) {
          if ((int )a1 <= 127) {
            while (1) {
              tmp___442 = jit->ip;
              (jit->ip) ++;
              *tmp___442 = (unsigned char )((long )(1 << 6) | ((a2 & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(a1 & 255L);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___10;
          }
        } else {
          _L___10: /* CIL Label */ 
          while (1) {
            tmp___443 = jit->ip;
            (jit->ip) ++;
            *tmp___443 = (unsigned char )((long )(2 << 6) | ((a2 & 7L) & 7L));
            break;
          }
          while (1) {
            imb___35.val = (int )a1;
            tmp___444 = jit->ip;
            (jit->ip) ++;
            *tmp___444 = imb___35.b[0];
            tmp___445 = jit->ip;
            (jit->ip) ++;
            *tmp___445 = imb___35.b[1];
            tmp___446 = jit->ip;
            (jit->ip) ++;
            *tmp___446 = imb___35.b[2];
            tmp___447 = jit->ip;
            (jit->ip) ++;
            *tmp___447 = imb___35.b[3];
            break;
          }
        }
        break;
      }
      while (1) {
        imb___36.val = (int )a3;
        tmp___448 = jit->ip;
        (jit->ip) ++;
        *tmp___448 = imb___36.b[0];
        tmp___449 = jit->ip;
        (jit->ip) ++;
        *tmp___449 = imb___36.b[1];
        tmp___450 = jit->ip;
        (jit->ip) ++;
        *tmp___450 = imb___36.b[2];
        tmp___451 = jit->ip;
        (jit->ip) ++;
        *tmp___451 = imb___36.b[3];
        break;
      }
    }
    break;
  }
  break;
  case 185: 
  while (1) {
    while (1) {
      if ((int )op->arg_size > 4) {
        tmp___452 = 8;
      } else {
        tmp___452 = 0;
      }
      if (a2 > 7L) {
        tmp___453 = 2;
      } else {
        tmp___453 = 0;
      }
      if (a1 > 7L) {
        tmp___454 = 1;
      } else {
        tmp___454 = 0;
      }
      _amd64_rex_bits___26 = (unsigned char )((tmp___452 | tmp___453) | tmp___454);
      if ((int )_amd64_rex_bits___26 != 0) {
        tmp___455 = jit->ip;
        (jit->ip) ++;
        *tmp___455 = (unsigned char )(64 | (int )_amd64_rex_bits___26);
      } else
      if ((int )op->arg_size == 1) {
        tmp___455 = jit->ip;
        (jit->ip) ++;
        *tmp___455 = (unsigned char )(64 | (int )_amd64_rex_bits___26);
      }
      break;
    }
    while (1) {
      if ((int )op->arg_size == 8) {
        tmp___513 = 4;
      } else {
        tmp___513 = (int )op->arg_size;
      }
      if (tmp___513 == 1) {
        tmp___456 = jit->ip;
        (jit->ip) ++;
        *tmp___456 = (unsigned char)198;
        while (1) {
          if ((a1 & 7L) == -1L) {
            while (1) {
              tmp___457 = jit->ip;
              (jit->ip) ++;
              *tmp___457 = (unsigned char)4;
              break;
            }
            while (1) {
              tmp___458 = jit->ip;
              (jit->ip) ++;
              *tmp___458 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb___37.val = 0;
              tmp___459 = jit->ip;
              (jit->ip) ++;
              *tmp___459 = imb___37.b[0];
              tmp___460 = jit->ip;
              (jit->ip) ++;
              *tmp___460 = imb___37.b[1];
              tmp___461 = jit->ip;
              (jit->ip) ++;
              *tmp___461 = imb___37.b[2];
              tmp___462 = jit->ip;
              (jit->ip) ++;
              *tmp___462 = imb___37.b[3];
              break;
            }
          } else
          if ((a1 & 7L) != 5L) {
            while (1) {
              tmp___463 = jit->ip;
              (jit->ip) ++;
              *tmp___463 = (unsigned char)4;
              break;
            }
            while (1) {
              tmp___464 = jit->ip;
              (jit->ip) ++;
              *tmp___464 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
              break;
            }
          } else {
            while (1) {
              tmp___465 = jit->ip;
              (jit->ip) ++;
              *tmp___465 = (unsigned char )((1 << 6) | 4);
              break;
            }
            while (1) {
              tmp___466 = jit->ip;
              (jit->ip) ++;
              *tmp___466 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)0;
              (jit->ip) ++;
              break;
            }
          }
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char )(a3 & 255L);
          (jit->ip) ++;
          break;
        }
      } else {
        if ((int )op->arg_size == 8) {
          tmp___512 = 4;
        } else {
          tmp___512 = (int )op->arg_size;
        }
        if (tmp___512 == 2) {
          tmp___473 = jit->ip;
          (jit->ip) ++;
          *tmp___473 = (unsigned char)102;
          tmp___474 = jit->ip;
          (jit->ip) ++;
          *tmp___474 = (unsigned char)199;
          while (1) {
            if ((a1 & 7L) == -1L) {
              while (1) {
                tmp___475 = jit->ip;
                (jit->ip) ++;
                *tmp___475 = (unsigned char)4;
                break;
              }
              while (1) {
                tmp___476 = jit->ip;
                (jit->ip) ++;
                *tmp___476 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 5L);
                break;
              }
              while (1) {
                imb___39.val = 0;
                tmp___477 = jit->ip;
                (jit->ip) ++;
                *tmp___477 = imb___39.b[0];
                tmp___478 = jit->ip;
                (jit->ip) ++;
                *tmp___478 = imb___39.b[1];
                tmp___479 = jit->ip;
                (jit->ip) ++;
                *tmp___479 = imb___39.b[2];
                tmp___480 = jit->ip;
                (jit->ip) ++;
                *tmp___480 = imb___39.b[3];
                break;
              }
            } else
            if ((a1 & 7L) != 5L) {
              while (1) {
                tmp___481 = jit->ip;
                (jit->ip) ++;
                *tmp___481 = (unsigned char)4;
                break;
              }
              while (1) {
                tmp___482 = jit->ip;
                (jit->ip) ++;
                *tmp___482 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
                break;
              }
            } else {
              while (1) {
                tmp___483 = jit->ip;
                (jit->ip) ++;
                *tmp___483 = (unsigned char )((1 << 6) | 4);
                break;
              }
              while (1) {
                tmp___484 = jit->ip;
                (jit->ip) ++;
                *tmp___484 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
            }
            break;
          }
          while (1) {
            *((short *)jit->ip) = (short )a3;
            jit->ip += 2;
            break;
          }
        } else {
          tmp___491 = jit->ip;
          (jit->ip) ++;
          *tmp___491 = (unsigned char)199;
          while (1) {
            if ((a1 & 7L) == -1L) {
              while (1) {
                tmp___492 = jit->ip;
                (jit->ip) ++;
                *tmp___492 = (unsigned char)4;
                break;
              }
              while (1) {
                tmp___493 = jit->ip;
                (jit->ip) ++;
                *tmp___493 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 5L);
                break;
              }
              while (1) {
                imb___41.val = 0;
                tmp___494 = jit->ip;
                (jit->ip) ++;
                *tmp___494 = imb___41.b[0];
                tmp___495 = jit->ip;
                (jit->ip) ++;
                *tmp___495 = imb___41.b[1];
                tmp___496 = jit->ip;
                (jit->ip) ++;
                *tmp___496 = imb___41.b[2];
                tmp___497 = jit->ip;
                (jit->ip) ++;
                *tmp___497 = imb___41.b[3];
                break;
              }
            } else
            if ((a1 & 7L) != 5L) {
              while (1) {
                tmp___498 = jit->ip;
                (jit->ip) ++;
                *tmp___498 = (unsigned char)4;
                break;
              }
              while (1) {
                tmp___499 = jit->ip;
                (jit->ip) ++;
                *tmp___499 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
                break;
              }
            } else {
              while (1) {
                tmp___500 = jit->ip;
                (jit->ip) ++;
                *tmp___500 = (unsigned char )((1 << 6) | 4);
                break;
              }
              while (1) {
                tmp___501 = jit->ip;
                (jit->ip) ++;
                *tmp___501 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
            }
            break;
          }
          while (1) {
            imb___43.val = (int )a3;
            tmp___508 = jit->ip;
            (jit->ip) ++;
            *tmp___508 = imb___43.b[0];
            tmp___509 = jit->ip;
            (jit->ip) ++;
            *tmp___509 = imb___43.b[1];
            tmp___510 = jit->ip;
            (jit->ip) ++;
            *tmp___510 = imb___43.b[2];
            tmp___511 = jit->ip;
            (jit->ip) ++;
            *tmp___511 = imb___43.b[3];
            break;
          }
        }
      }
      break;
    }
    break;
  }
  break;
  case 313: 
  while (1) {
    while (1) {
      if (a1 > 7L) {
        tmp___514 = 4;
      } else {
        tmp___514 = 0;
      }
      if (a3 > 7L) {
        tmp___515 = 2;
      } else {
        tmp___515 = 0;
      }
      if (a2 > 7L) {
        tmp___516 = 1;
      } else {
        tmp___516 = 0;
      }
      _amd64_rex_bits___27 = (unsigned char )(((8 | tmp___514) | tmp___515) | tmp___516);
      if ((int )_amd64_rex_bits___27 != 0) {
        tmp___517 = jit->ip;
        (jit->ip) ++;
        *tmp___517 = (unsigned char )(64 | (int )_amd64_rex_bits___27);
      }
      break;
    }
    while (1) {
      tmp___518 = jit->ip;
      (jit->ip) ++;
      *tmp___518 = (unsigned char)141;
      while (1) {
        if (a2 == -1L) {
          while (1) {
            tmp___519 = jit->ip;
            (jit->ip) ++;
            *tmp___519 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___520 = jit->ip;
            (jit->ip) ++;
            *tmp___520 = (unsigned char )(((long )(((int )op->arg_size & 3) << 6) | (((a3 & 7L) & 7L) << 3)) | 5L);
            break;
          }
          while (1) {
            imb___44.val = 0;
            tmp___521 = jit->ip;
            (jit->ip) ++;
            *tmp___521 = imb___44.b[0];
            tmp___522 = jit->ip;
            (jit->ip) ++;
            *tmp___522 = imb___44.b[1];
            tmp___523 = jit->ip;
            (jit->ip) ++;
            *tmp___523 = imb___44.b[2];
            tmp___524 = jit->ip;
            (jit->ip) ++;
            *tmp___524 = imb___44.b[3];
            break;
          }
        } else
        if (a2 != 5L) {
          while (1) {
            tmp___525 = jit->ip;
            (jit->ip) ++;
            *tmp___525 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___526 = jit->ip;
            (jit->ip) ++;
            *tmp___526 = (unsigned char )(((long )(((int )op->arg_size & 3) << 6) | ((((a3 & 7L) & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
            break;
          }
        } else {
          while (1) {
            tmp___527 = jit->ip;
            (jit->ip) ++;
            *tmp___527 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            tmp___528 = jit->ip;
            (jit->ip) ++;
            *tmp___528 = (unsigned char )(((long )(((int )op->arg_size & 3) << 6) | ((((a3 & 7L) & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)0;
            (jit->ip) ++;
            break;
          }
        }
        break;
      }
      break;
    }
    break;
  }
  break;
  case 314: 
  while (1) {
    while (1) {
      if (a1 > 7L) {
        tmp___535 = 4;
      } else {
        tmp___535 = 0;
      }
      if (a2 > 7L) {
        tmp___536 = 2;
      } else {
        tmp___536 = 0;
      }
      _amd64_rex_bits___28 = (unsigned char )((8 | tmp___535) | tmp___536);
      if ((int )_amd64_rex_bits___28 != 0) {
        tmp___537 = jit->ip;
        (jit->ip) ++;
        *tmp___537 = (unsigned char )(64 | (int )_amd64_rex_bits___28);
      }
      break;
    }
    while (1) {
      tmp___538 = jit->ip;
      (jit->ip) ++;
      *tmp___538 = (unsigned char)141;
      while (1) {
        if (1) {
          while (1) {
            tmp___539 = jit->ip;
            (jit->ip) ++;
            *tmp___539 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___540 = jit->ip;
            (jit->ip) ++;
            *tmp___540 = (unsigned char )(((long )(((int )op->arg_size & 3) << 6) | (((a2 & 7L) & 7L) << 3)) | 5L);
            break;
          }
          while (1) {
            imb___46.val = (int )a3;
            tmp___541 = jit->ip;
            (jit->ip) ++;
            *tmp___541 = imb___46.b[0];
            tmp___542 = jit->ip;
            (jit->ip) ++;
            *tmp___542 = imb___46.b[1];
            tmp___543 = jit->ip;
            (jit->ip) ++;
            *tmp___543 = imb___46.b[2];
            tmp___544 = jit->ip;
            (jit->ip) ++;
            *tmp___544 = imb___46.b[3];
            break;
          }
        } else
        if (a3 == 0L) {
          while (1) {
            tmp___545 = jit->ip;
            (jit->ip) ++;
            *tmp___545 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___546 = jit->ip;
            (jit->ip) ++;
            *tmp___546 = (unsigned char )(((long )(((int )op->arg_size & 3) << 6) | ((((a2 & 7L) & 7L) & 7L) << 3)) | 7L);
            break;
          }
        } else
        _L___12: /* CIL Label */ 
        if ((int )a3 >= -128) {
          if ((int )a3 <= 127) {
            while (1) {
              tmp___547 = jit->ip;
              (jit->ip) ++;
              *tmp___547 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___548 = jit->ip;
              (jit->ip) ++;
              *tmp___548 = (unsigned char )(((long )(((int )op->arg_size & 3) << 6) | ((((a2 & 7L) & 7L) & 7L) << 3)) | 7L);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(a3 & 255L);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___11;
          }
        } else {
          _L___11: /* CIL Label */ 
          while (1) {
            tmp___549 = jit->ip;
            (jit->ip) ++;
            *tmp___549 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            tmp___550 = jit->ip;
            (jit->ip) ++;
            *tmp___550 = (unsigned char )(((long )(((int )op->arg_size & 3) << 6) | ((((a2 & 7L) & 7L) & 7L) << 3)) | 7L);
            break;
          }
          while (1) {
            imb___47.val = (int )a3;
            tmp___551 = jit->ip;
            (jit->ip) ++;
            *tmp___551 = imb___47.b[0];
            tmp___552 = jit->ip;
            (jit->ip) ++;
            *tmp___552 = imb___47.b[1];
            tmp___553 = jit->ip;
            (jit->ip) ++;
            *tmp___553 = imb___47.b[2];
            tmp___554 = jit->ip;
            (jit->ip) ++;
            *tmp___554 = imb___47.b[3];
            break;
          }
        }
        break;
      }
      break;
    }
    break;
  }
  break;
  case 440: 
  tmp___556 = __builtin_object_size((void *)(& tmp___555), 0);
  __builtin___memcpy_chk((void *)(& tmp___555), (void const   *)(& op->flt_imm), sizeof(jit_value ),
                         tmp___556);
  while (1) {
    while (1) {
      if (a1 > 7L) {
        tmp___557 = 4;
      } else {
        tmp___557 = 0;
      }
      if (a3 > 7L) {
        tmp___558 = 2;
      } else {
        tmp___558 = 0;
      }
      if (a2 > 7L) {
        tmp___559 = 1;
      } else {
        tmp___559 = 0;
      }
      _amd64_rex_bits___29 = (unsigned char )(((8 | tmp___557) | tmp___558) | tmp___559);
      if ((int )_amd64_rex_bits___29 != 0) {
        tmp___560 = jit->ip;
        (jit->ip) ++;
        *tmp___560 = (unsigned char )(64 | (int )_amd64_rex_bits___29);
      }
      break;
    }
    while (1) {
      tmp___561 = jit->ip;
      (jit->ip) ++;
      *tmp___561 = (unsigned char)141;
      while (1) {
        if (a2 == -1L) {
          while (1) {
            tmp___562 = jit->ip;
            (jit->ip) ++;
            *tmp___562 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___563 = jit->ip;
            (jit->ip) ++;
            *tmp___563 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
            break;
          }
          while (1) {
            imb___48.val = (int )tmp___555;
            tmp___564 = jit->ip;
            (jit->ip) ++;
            *tmp___564 = imb___48.b[0];
            tmp___565 = jit->ip;
            (jit->ip) ++;
            *tmp___565 = imb___48.b[1];
            tmp___566 = jit->ip;
            (jit->ip) ++;
            *tmp___566 = imb___48.b[2];
            tmp___567 = jit->ip;
            (jit->ip) ++;
            *tmp___567 = imb___48.b[3];
            break;
          }
        } else
        if (tmp___555 == 0L) {
          if (a2 != 5L) {
            while (1) {
              tmp___568 = jit->ip;
              (jit->ip) ++;
              *tmp___568 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___569 = jit->ip;
              (jit->ip) ++;
              *tmp___569 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
              break;
            }
          } else {
            goto _L___14;
          }
        } else
        _L___14: /* CIL Label */ 
        if ((int )tmp___555 >= -128) {
          if ((int )tmp___555 <= 127) {
            while (1) {
              tmp___570 = jit->ip;
              (jit->ip) ++;
              *tmp___570 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___571 = jit->ip;
              (jit->ip) ++;
              *tmp___571 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(tmp___555 & 255L);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___13;
          }
        } else {
          _L___13: /* CIL Label */ 
          while (1) {
            tmp___572 = jit->ip;
            (jit->ip) ++;
            *tmp___572 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            tmp___573 = jit->ip;
            (jit->ip) ++;
            *tmp___573 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
            break;
          }
          while (1) {
            imb___49.val = (int )tmp___555;
            tmp___574 = jit->ip;
            (jit->ip) ++;
            *tmp___574 = imb___49.b[0];
            tmp___575 = jit->ip;
            (jit->ip) ++;
            *tmp___575 = imb___49.b[1];
            tmp___576 = jit->ip;
            (jit->ip) ++;
            *tmp___576 = imb___49.b[2];
            tmp___577 = jit->ip;
            (jit->ip) ++;
            *tmp___577 = imb___49.b[3];
            break;
          }
        }
        break;
      }
      break;
    }
    break;
  }
  break;
  default: 
  printf((char const   */* __restrict  */)"common86: unknown operation (opcode: 0x%x)\n",
         (unsigned int )((jit_opcode )((int )op->code & 65528)) >> 3);
  }
  return;
}
}
__inline static jit_rmap *rmap_init(void) 
{ 
  jit_rmap *res ;
  void *tmp ;

  {
  tmp = malloc(sizeof(jit_rmap ));
  res = (jit_rmap *)tmp;
  res->map = (jit_tree *)((void *)0);
  return (res);
}
}
void jit_reg_allocator_free(struct jit_reg_allocator *a ) 
{ 


  {
  if (a->fp_regs) {
    free((void *)a->fp_regs);
  }
  free((void *)a->gp_regs);
  if (a->fp_arg_regs) {
    free((void *)a->fp_arg_regs);
  }
  if (a->gp_arg_regs) {
    free((void *)a->gp_arg_regs);
  }
  free((void *)a);
  return;
}
}
void jit_optimize_frame_ptr(struct jit *jit ) 
{ 
  struct jit_func_info *info ;
  int uses_frame_ptr ;
  jit_op *op ;
  jit_op *tmp ;

  {
  if (! (jit->optimizations & 1U)) {
    return;
  }
  info = (struct jit_func_info *)((void *)0);
  uses_frame_ptr = 0;
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while (1) {
    if (! op) {
      goto _L;
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 536U) {
      _L: /* CIL Label */ 
      if (info) {
        if (! uses_frame_ptr) {
          info->has_prolog = 0;
          uses_frame_ptr = 0;
        }
      }
      if (op) {
        info = (struct jit_func_info *)op->arg[1];
      }
    }
    if (! op) {
      break;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 888U) {
      uses_frame_ptr |= 1;
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 624U) {
      uses_frame_ptr |= 1;
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 432U) {
      uses_frame_ptr |= 1;
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 416U) {
      uses_frame_ptr |= 1;
    }
    op = op->next;
  }
  return;
}
}
static int check_data_references(jit_op *op , char *msg_buf ) 
{ 
  int tmp ;

  {
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 56U) {
    goto _L;
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 488U) {
    _L: /* CIL Label */ 
    tmp = jit_op_is_data_op(op->jmp_addr);
    if (! tmp) {
      append_msg(msg_buf, (char *)"invalid data reference");
      return (64);
    }
  }
  return (0);
}
}
static void print_args(struct jit_disasm *disasm , struct output_buf *linebuf , jit_op *op ,
                       jit_tree *labels ) 
{ 
  int i ;
  char const   *tmp ;
  int tmp___0 ;

  {
  i = 1;
  while (i <= 3) {
    if ((((int )op->spec >> (i - 1) * 2) & 3) == 0) {
      goto __Cont;
    }
    if (i == 1) {
      tmp = " ";
    } else {
      tmp = ", ";
    }
    ob_append(linebuf, (char *)tmp);
    if (i == 1) {
      tmp___0 = jit_op_is_cflow(op);
      if (tmp___0) {
        print_addr(disasm, linebuf, labels, op, 0);
      } else {
        print_arg(disasm, linebuf, op, i);
      }
    } else {
      print_arg(disasm, linebuf, op, i);
    }
    __Cont: /* CIL Label */ 
    i ++;
  }
  return;
}
}
void x0_i$nit(void) 
{ 


  {

}
}
__inline static __uint32_t _OSSwapInt32(__uint32_t _data ) 
{ 
  int tmp ;

  {
  tmp = __builtin_bswap32((int )_data);
  return ((__uint32_t )tmp);
}
}
static void mark_calleesaved_regs(jit_tree *hint , jit_op *op ) 
{ 
  struct jit_allocator_hint *h ;
  jit_value reg ;
  int tmp ;

  {
  if ((unsigned long )hint == (unsigned long )((void *)0)) {
    return;
  }
  h = (struct jit_allocator_hint *)hint->value;
  reg = hint->key;
  tmp = jit_set_get(op->live_out, (int )reg);
  if (tmp) {
    (h->should_be_calleesaved) ++;
  }
  mark_calleesaved_regs(hint->left, op);
  mark_calleesaved_regs(hint->right, op);
  return;
}
}
static int emit_pop_caller_saved_regs(struct jit *jit , jit_op *op ) 
{ 
  struct jit_reg_allocator *al ;
  int stack_offset ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  x86_imm_buf imb ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  int count ;

  {
  al = jit->reg_al;
  stack_offset = 0;
  stack_offset = generic_pop_caller_saved_regs(jit, op, al->fp_reg_cnt, al->fp_regs,
                                               1, al->fpret_reg, stack_offset);
  stack_offset = generic_pop_caller_saved_regs(jit, op, al->gp_reg_cnt, al->gp_regs,
                                               0, al->ret_reg, stack_offset);
  if (stack_offset) {
    while (1) {
      if (stack_offset >= -128) {
        if (stack_offset <= 127) {
          while (1) {
            _amd64_rex_bits = (unsigned char)8;
            if ((int )_amd64_rex_bits != 0) {
              tmp = jit->ip;
              (jit->ip) ++;
              *tmp = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___0 = jit->ip;
          (jit->ip) ++;
          *tmp___0 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___1 = jit->ip;
              (jit->ip) ++;
              *tmp___1 = (unsigned char )((3 << 6) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(stack_offset & 255);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)8;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___8 = jit->ip;
            (jit->ip) ++;
            *tmp___8 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___9 = jit->ip;
        (jit->ip) ++;
        *tmp___9 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___10 = jit->ip;
            (jit->ip) ++;
            *tmp___10 = (unsigned char )((3 << 6) | 4);
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = stack_offset;
          tmp___11 = jit->ip;
          (jit->ip) ++;
          *tmp___11 = imb___0.b[0];
          tmp___12 = jit->ip;
          (jit->ip) ++;
          *tmp___12 = imb___0.b[1];
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = imb___0.b[2];
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = imb___0.b[3];
          break;
        }
      }
      break;
    }
  }
  count = (int )((unsigned long )stack_offset / sizeof(void *));
  return (count);
}
}
void megaInit(void) 
{ 


  {
  bufx_i$nit();
  x86_cc_unsigned_map_i$nit();
  x86_cc_signed_map_i$nit();
  x0_i$nit();
  jit_disasm_compilable_i$nit();
  jit_debugging_disasm_i$nit();
  dummy_opcode_i$nit();
  x05_i$nit();
  jit_disasm_general_i$nit();
}
}
__inline static int is_red(jit_tree *n ) 
{ 


  {
  if ((unsigned long )n == (unsigned long )((void *)0)) {
    return (0);
  }
  return (n->color == 1);
}
}
static int valid_size(int size ) 
{ 


  {
  switch (size) {
  case 8: 
  case 4: 
  case 2: 
  case 1: 
  return (1);
  default: 
  return (0);
  }
}
}
static void emit_trace_op(struct jit *jit , jit_op *op ) 
{ 
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp ;
  unsigned char *tmp___0 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  long tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  x86_imm_buf imb ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char _amd64_rex_bits___6 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  int trace ;
  jit_opcode prev_code ;
  jit_opcode next_code ;
  unsigned char _amd64_rex_bits___7 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  amd64_imm_buf imb___3 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char _amd64_rex_bits___8 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  amd64_imm_buf imb___5 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char _amd64_rex_bits___9 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  amd64_imm_buf imb___7 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char _amd64_rex_bits___10 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  amd64_imm_buf imb___9 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  x86_imm_buf imb___10 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char _amd64_rex_bits___11 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  int _amd64_width_temp ;
  unsigned char _amd64_rex_bits___12 ;
  int tmp___98 ;
  int tmp___99 ;
  int tmp___100 ;
  unsigned char *tmp___101 ;
  int tmp___102 ;
  unsigned char *tmp___103 ;
  amd64_imm_buf imb___11 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;
  unsigned char *tmp___111 ;
  x86_imm_buf imb___12 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  int tmp___116 ;
  unsigned char _amd64_rex_bits___13 ;
  unsigned char *tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char *tmp___119 ;
  unsigned char _amd64_rex_bits___14 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  unsigned char *tmp___122 ;
  unsigned char *tmp___123 ;
  long tmp___124 ;
  unsigned char *tmp___125 ;
  unsigned char _amd64_rex_bits___15 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;

  {
  emit_save_all_regs(jit, op);
  while (1) {
    while (1) {
      _amd64_rex_bits = (unsigned char)0;
      if ((int )_amd64_rex_bits != 0) {
        tmp = jit->ip;
        (jit->ip) ++;
        *tmp = (unsigned char )(64 | (int )_amd64_rex_bits);
      }
      break;
    }
    tmp___0 = jit->ip;
    (jit->ip) ++;
    *tmp___0 = (unsigned char)83;
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___0 = (unsigned char)8;
      if ((int )_amd64_rex_bits___0 != 0) {
        tmp___1 = jit->ip;
        (jit->ip) ++;
        *tmp___1 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
      }
      break;
    }
    while (1) {
      switch (4) {
      case 1: 
      tmp___2 = jit->ip;
      (jit->ip) ++;
      *tmp___2 = (unsigned char)138;
      break;
      case 2: 
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)102;
      case 4: 
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)139;
      break;
      default: 
      tmp___5 = __builtin_expect(1L, 0L);
      if (tmp___5) {
        __assert_rtn("emit_trace_op", "./jitter-amd64.c", 2136, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = (unsigned char )(((3 << 6) | (3 << 3)) | 4);
          break;
        }
        break;
      }
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___1 = (unsigned char)8;
      if ((int )_amd64_rex_bits___1 != 0) {
        tmp___7 = jit->ip;
        (jit->ip) ++;
        *tmp___7 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
      }
      break;
    }
    tmp___8 = jit->ip;
    (jit->ip) ++;
    *tmp___8 = (unsigned char)131;
    while (1) {
      while (1) {
        tmp___9 = jit->ip;
        (jit->ip) ++;
        *tmp___9 = (unsigned char )(((3 << 6) | (4 << 3)) | 4);
        break;
      }
      break;
    }
    while (1) {
      *(jit->ip) = (unsigned char)240;
      (jit->ip) ++;
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___4 = (unsigned char)8;
      if ((int )_amd64_rex_bits___4 != 0) {
        tmp___23 = jit->ip;
        (jit->ip) ++;
        *tmp___23 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
      }
      break;
    }
    tmp___24 = jit->ip;
    (jit->ip) ++;
    *tmp___24 = (unsigned char)131;
    while (1) {
      while (1) {
        tmp___25 = jit->ip;
        (jit->ip) ++;
        *tmp___25 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
        break;
      }
      break;
    }
    while (1) {
      *(jit->ip) = (unsigned char)16;
      (jit->ip) ++;
      break;
    }
    break;
  }
  trace = 0;
  prev_code = (jit_opcode )((int )(op->prev)->code & 65528);
  next_code = (jit_opcode )((int )(op->next)->code & 65528);
  if ((unsigned int )prev_code == 536U) {
    trace |= 1;
  } else
  if ((unsigned int )prev_code == 456U) {
    trace |= 1;
  } else
  if ((unsigned int )prev_code == 136U) {
    trace |= 1;
  }
  if ((unsigned int )next_code != 536U) {
    if ((unsigned int )next_code != 456U) {
      if ((unsigned int )next_code != 136U) {
        trace |= 2;
      }
    }
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___7 = (unsigned char)8;
      if ((int )_amd64_rex_bits___7 != 0) {
        tmp___39 = jit->ip;
        (jit->ip) ++;
        *tmp___39 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
      }
      break;
    }
    tmp___40 = jit->ip;
    (jit->ip) ++;
    *tmp___40 = (unsigned char)191;
    while (1) {
      imb___3.val = (size_t )jit;
      tmp___41 = jit->ip;
      (jit->ip) ++;
      *tmp___41 = imb___3.b[0];
      tmp___42 = jit->ip;
      (jit->ip) ++;
      *tmp___42 = imb___3.b[1];
      tmp___43 = jit->ip;
      (jit->ip) ++;
      *tmp___43 = imb___3.b[2];
      tmp___44 = jit->ip;
      (jit->ip) ++;
      *tmp___44 = imb___3.b[3];
      tmp___45 = jit->ip;
      (jit->ip) ++;
      *tmp___45 = imb___3.b[4];
      tmp___46 = jit->ip;
      (jit->ip) ++;
      *tmp___46 = imb___3.b[5];
      tmp___47 = jit->ip;
      (jit->ip) ++;
      *tmp___47 = imb___3.b[6];
      tmp___48 = jit->ip;
      (jit->ip) ++;
      *tmp___48 = imb___3.b[7];
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___8 = (unsigned char)8;
      if ((int )_amd64_rex_bits___8 != 0) {
        tmp___53 = jit->ip;
        (jit->ip) ++;
        *tmp___53 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
      }
      break;
    }
    tmp___54 = jit->ip;
    (jit->ip) ++;
    *tmp___54 = (unsigned char)190;
    while (1) {
      imb___5.val = (size_t )op;
      tmp___55 = jit->ip;
      (jit->ip) ++;
      *tmp___55 = imb___5.b[0];
      tmp___56 = jit->ip;
      (jit->ip) ++;
      *tmp___56 = imb___5.b[1];
      tmp___57 = jit->ip;
      (jit->ip) ++;
      *tmp___57 = imb___5.b[2];
      tmp___58 = jit->ip;
      (jit->ip) ++;
      *tmp___58 = imb___5.b[3];
      tmp___59 = jit->ip;
      (jit->ip) ++;
      *tmp___59 = imb___5.b[4];
      tmp___60 = jit->ip;
      (jit->ip) ++;
      *tmp___60 = imb___5.b[5];
      tmp___61 = jit->ip;
      (jit->ip) ++;
      *tmp___61 = imb___5.b[6];
      tmp___62 = jit->ip;
      (jit->ip) ++;
      *tmp___62 = imb___5.b[7];
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___9 = (unsigned char)0;
      if ((int )_amd64_rex_bits___9 != 0) {
        tmp___67 = jit->ip;
        (jit->ip) ++;
        *tmp___67 = (unsigned char )(64 | (int )_amd64_rex_bits___9);
      }
      break;
    }
    tmp___68 = jit->ip;
    (jit->ip) ++;
    *tmp___68 = (unsigned char)186;
    while (1) {
      imb___8.val = (int )((size_t )op->r_arg[0]);
      tmp___77 = jit->ip;
      (jit->ip) ++;
      *tmp___77 = imb___8.b[0];
      tmp___78 = jit->ip;
      (jit->ip) ++;
      *tmp___78 = imb___8.b[1];
      tmp___79 = jit->ip;
      (jit->ip) ++;
      *tmp___79 = imb___8.b[2];
      tmp___80 = jit->ip;
      (jit->ip) ++;
      *tmp___80 = imb___8.b[3];
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___10 = (unsigned char)0;
      if ((int )_amd64_rex_bits___10 != 0) {
        tmp___81 = jit->ip;
        (jit->ip) ++;
        *tmp___81 = (unsigned char )(64 | (int )_amd64_rex_bits___10);
      }
      break;
    }
    tmp___82 = jit->ip;
    (jit->ip) ++;
    *tmp___82 = (unsigned char)185;
    while (1) {
      imb___10.val = (int )((size_t )trace);
      tmp___91 = jit->ip;
      (jit->ip) ++;
      *tmp___91 = imb___10.b[0];
      tmp___92 = jit->ip;
      (jit->ip) ++;
      *tmp___92 = imb___10.b[1];
      tmp___93 = jit->ip;
      (jit->ip) ++;
      *tmp___93 = imb___10.b[2];
      tmp___94 = jit->ip;
      (jit->ip) ++;
      *tmp___94 = imb___10.b[3];
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___11 = (unsigned char)8;
      if ((int )_amd64_rex_bits___11 != 0) {
        tmp___95 = jit->ip;
        (jit->ip) ++;
        *tmp___95 = (unsigned char )(64 | (int )_amd64_rex_bits___11);
      }
      break;
    }
    tmp___96 = jit->ip;
    (jit->ip) ++;
    *tmp___96 = (unsigned char )((6 << 3) + 3);
    while (1) {
      while (1) {
        tmp___97 = jit->ip;
        (jit->ip) ++;
        *tmp___97 = (unsigned char )(3 << 6);
        break;
      }
      break;
    }
    break;
  }
  while (1) {
    _amd64_width_temp = (size_t )(& jit_trace_callback) == (size_t )((int )((size_t )(& jit_trace_callback)));
    while (1) {
      while (1) {
        if (_amd64_width_temp) {
          tmp___100 = 4;
        } else {
          tmp___100 = 8;
        }
        if (tmp___100 > 4) {
          tmp___99 = 8;
        } else {
          tmp___99 = 0;
        }
        _amd64_rex_bits___12 = (unsigned char )(tmp___99 | 1);
        if ((int )_amd64_rex_bits___12 != 0) {
          tmp___101 = jit->ip;
          (jit->ip) ++;
          *tmp___101 = (unsigned char )(64 | (int )_amd64_rex_bits___12);
        } else {
          if (_amd64_width_temp) {
            tmp___102 = 4;
          } else {
            tmp___102 = 8;
          }
          if (tmp___102 == 1) {
            tmp___101 = jit->ip;
            (jit->ip) ++;
            *tmp___101 = (unsigned char )(64 | (int )_amd64_rex_bits___12);
          }
        }
        break;
      }
      tmp___103 = jit->ip;
      (jit->ip) ++;
      *tmp___103 = (unsigned char)184;
      if (_amd64_width_temp) {
        tmp___116 = 4;
      } else {
        tmp___116 = 8;
      }
      if (tmp___116 == 8) {
        while (1) {
          imb___11.val = (size_t )(& jit_trace_callback);
          tmp___104 = jit->ip;
          (jit->ip) ++;
          *tmp___104 = imb___11.b[0];
          tmp___105 = jit->ip;
          (jit->ip) ++;
          *tmp___105 = imb___11.b[1];
          tmp___106 = jit->ip;
          (jit->ip) ++;
          *tmp___106 = imb___11.b[2];
          tmp___107 = jit->ip;
          (jit->ip) ++;
          *tmp___107 = imb___11.b[3];
          tmp___108 = jit->ip;
          (jit->ip) ++;
          *tmp___108 = imb___11.b[4];
          tmp___109 = jit->ip;
          (jit->ip) ++;
          *tmp___109 = imb___11.b[5];
          tmp___110 = jit->ip;
          (jit->ip) ++;
          *tmp___110 = imb___11.b[6];
          tmp___111 = jit->ip;
          (jit->ip) ++;
          *tmp___111 = imb___11.b[7];
          break;
        }
      } else {
        while (1) {
          imb___12.val = (int )((size_t )(& jit_trace_callback));
          tmp___112 = jit->ip;
          (jit->ip) ++;
          *tmp___112 = imb___12.b[0];
          tmp___113 = jit->ip;
          (jit->ip) ++;
          *tmp___113 = imb___12.b[1];
          tmp___114 = jit->ip;
          (jit->ip) ++;
          *tmp___114 = imb___12.b[2];
          tmp___115 = jit->ip;
          (jit->ip) ++;
          *tmp___115 = imb___12.b[3];
          break;
        }
      }
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___13 = (unsigned char)1;
      if ((int )_amd64_rex_bits___13 != 0) {
        tmp___117 = jit->ip;
        (jit->ip) ++;
        *tmp___117 = (unsigned char )(64 | (int )_amd64_rex_bits___13);
      }
      break;
    }
    tmp___118 = jit->ip;
    (jit->ip) ++;
    *tmp___118 = (unsigned char)255;
    while (1) {
      while (1) {
        tmp___119 = jit->ip;
        (jit->ip) ++;
        *tmp___119 = (unsigned char )((3 << 6) | (2 << 3));
        break;
      }
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___14 = (unsigned char)8;
      if ((int )_amd64_rex_bits___14 != 0) {
        tmp___120 = jit->ip;
        (jit->ip) ++;
        *tmp___120 = (unsigned char )(64 | (int )_amd64_rex_bits___14);
      }
      break;
    }
    while (1) {
      switch (4) {
      case 1: 
      tmp___121 = jit->ip;
      (jit->ip) ++;
      *tmp___121 = (unsigned char)138;
      break;
      case 2: 
      tmp___122 = jit->ip;
      (jit->ip) ++;
      *tmp___122 = (unsigned char)102;
      case 4: 
      tmp___123 = jit->ip;
      (jit->ip) ++;
      *tmp___123 = (unsigned char)139;
      break;
      default: 
      tmp___124 = __builtin_expect(1L, 0L);
      if (tmp___124) {
        __assert_rtn("emit_trace_op", "./jitter-amd64.c", 2154, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___125 = jit->ip;
          (jit->ip) ++;
          *tmp___125 = (unsigned char )(((3 << 6) | (4 << 3)) | 3);
          break;
        }
        break;
      }
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___15 = (unsigned char)0;
      if ((int )_amd64_rex_bits___15 != 0) {
        tmp___126 = jit->ip;
        (jit->ip) ++;
        *tmp___126 = (unsigned char )(64 | (int )_amd64_rex_bits___15);
      }
      break;
    }
    tmp___127 = jit->ip;
    (jit->ip) ++;
    *tmp___127 = (unsigned char)91;
    break;
  }
  emit_restore_all_regs(jit, op);
  return;
}
}
static void emit_sse_fldx_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                             jit_value a3 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  jit_value tmp___1 ;
  int tmp___2 ;
  jit_value tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  x86_imm_buf imb ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___53 ;
  int tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___81 ;
  int tmp___82 ;
  int tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;

  {
  if ((unsigned long )op->arg_size == sizeof(float )) {
    if ((int )op->code & 2) {
      while (1) {
        tmp = jit->ip;
        (jit->ip) ++;
        *tmp = (unsigned char)243;
        while (1) {
          if (a1 > 7L) {
            tmp___0 = 4;
          } else {
            tmp___0 = 0;
          }
          if (a2 == 16L) {
            tmp___3 = (jit_value )0;
          } else {
            tmp___3 = a2;
          }
          if (tmp___3 > 7L) {
            tmp___2 = 1;
          } else {
            tmp___2 = 0;
          }
          _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___2);
          if ((int )_amd64_rex_bits != 0) {
            tmp___4 = jit->ip;
            (jit->ip) ++;
            *tmp___4 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        tmp___5 = jit->ip;
        (jit->ip) ++;
        *tmp___5 = (unsigned char)15;
        tmp___6 = jit->ip;
        (jit->ip) ++;
        *tmp___6 = (unsigned char)90;
        while (1) {
          if (a2 == 16L) {
            while (1) {
              tmp___7 = jit->ip;
              (jit->ip) ++;
              *tmp___7 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb.val = (int )a3;
              tmp___8 = jit->ip;
              (jit->ip) ++;
              *tmp___8 = imb.b[0];
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = imb.b[1];
              tmp___10 = jit->ip;
              (jit->ip) ++;
              *tmp___10 = imb.b[2];
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = imb.b[3];
              break;
            }
          } else {
            while (1) {
              if ((a2 & 7L) == 4L) {
                if (a3 == 0L) {
                  while (1) {
                    tmp___12 = jit->ip;
                    (jit->ip) ++;
                    *tmp___12 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___13 = jit->ip;
                    (jit->ip) ++;
                    *tmp___13 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                } else
                if ((int )a3 >= -128) {
                  if ((int )a3 <= 127) {
                    while (1) {
                      tmp___14 = jit->ip;
                      (jit->ip) ++;
                      *tmp___14 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                      break;
                    }
                    while (1) {
                      tmp___15 = jit->ip;
                      (jit->ip) ++;
                      *tmp___15 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(a3 & 255L);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L;
                  }
                } else {
                  _L: /* CIL Label */ 
                  while (1) {
                    tmp___16 = jit->ip;
                    (jit->ip) ++;
                    *tmp___16 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___17 = jit->ip;
                    (jit->ip) ++;
                    *tmp___17 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    imb___0.val = (int )a3;
                    tmp___18 = jit->ip;
                    (jit->ip) ++;
                    *tmp___18 = imb___0.b[0];
                    tmp___19 = jit->ip;
                    (jit->ip) ++;
                    *tmp___19 = imb___0.b[1];
                    tmp___20 = jit->ip;
                    (jit->ip) ++;
                    *tmp___20 = imb___0.b[2];
                    tmp___21 = jit->ip;
                    (jit->ip) ++;
                    *tmp___21 = imb___0.b[3];
                    break;
                  }
                }
                break;
              }
              if (a3 == 0L) {
                if ((a2 & 7L) != 5L) {
                  while (1) {
                    tmp___22 = jit->ip;
                    (jit->ip) ++;
                    *tmp___22 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                    break;
                  }
                  break;
                }
              }
              if ((int )a3 >= -128) {
                if ((int )a3 <= 127) {
                  while (1) {
                    tmp___23 = jit->ip;
                    (jit->ip) ++;
                    *tmp___23 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(a3 & 255L);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___0;
                }
              } else {
                _L___0: /* CIL Label */ 
                while (1) {
                  tmp___24 = jit->ip;
                  (jit->ip) ++;
                  *tmp___24 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                  break;
                }
                while (1) {
                  imb___1.val = (int )a3;
                  tmp___25 = jit->ip;
                  (jit->ip) ++;
                  *tmp___25 = imb___1.b[0];
                  tmp___26 = jit->ip;
                  (jit->ip) ++;
                  *tmp___26 = imb___1.b[1];
                  tmp___27 = jit->ip;
                  (jit->ip) ++;
                  *tmp___27 = imb___1.b[2];
                  tmp___28 = jit->ip;
                  (jit->ip) ++;
                  *tmp___28 = imb___1.b[3];
                  break;
                }
              }
              break;
            }
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        tmp___29 = jit->ip;
        (jit->ip) ++;
        *tmp___29 = (unsigned char)243;
        while (1) {
          if (a1 > 7L) {
            tmp___30 = 4;
          } else {
            tmp___30 = 0;
          }
          if (a3 > 7L) {
            tmp___31 = 2;
          } else {
            tmp___31 = 0;
          }
          if (a2 > 7L) {
            tmp___32 = 1;
          } else {
            tmp___32 = 0;
          }
          _amd64_rex_bits___0 = (unsigned char )(((8 | tmp___30) | tmp___31) | tmp___32);
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___33 = jit->ip;
            (jit->ip) ++;
            *tmp___33 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___34 = jit->ip;
        (jit->ip) ++;
        *tmp___34 = (unsigned char)15;
        tmp___35 = jit->ip;
        (jit->ip) ++;
        *tmp___35 = (unsigned char)90;
        while (1) {
          if (a2 == -1L) {
            while (1) {
              tmp___36 = jit->ip;
              (jit->ip) ++;
              *tmp___36 = (unsigned char )(((a1 & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___37 = jit->ip;
              (jit->ip) ++;
              *tmp___37 = (unsigned char )(((a3 & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb___2.val = 0;
              tmp___38 = jit->ip;
              (jit->ip) ++;
              *tmp___38 = imb___2.b[0];
              tmp___39 = jit->ip;
              (jit->ip) ++;
              *tmp___39 = imb___2.b[1];
              tmp___40 = jit->ip;
              (jit->ip) ++;
              *tmp___40 = imb___2.b[2];
              tmp___41 = jit->ip;
              (jit->ip) ++;
              *tmp___41 = imb___2.b[3];
              break;
            }
          } else
          if (a2 != 5L) {
            while (1) {
              tmp___42 = jit->ip;
              (jit->ip) ++;
              *tmp___42 = (unsigned char )(((a1 & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___43 = jit->ip;
              (jit->ip) ++;
              *tmp___43 = (unsigned char )((((a3 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
              break;
            }
          } else {
            while (1) {
              tmp___44 = jit->ip;
              (jit->ip) ++;
              *tmp___44 = (unsigned char )(((long )(1 << 6) | ((a1 & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___45 = jit->ip;
              (jit->ip) ++;
              *tmp___45 = (unsigned char )((((a3 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)0;
              (jit->ip) ++;
              break;
            }
          }
          break;
        }
        break;
      }
    }
  } else
  if ((int )op->code & 2) {
    while (1) {
      tmp___52 = jit->ip;
      (jit->ip) ++;
      *tmp___52 = (unsigned char)102;
      while (1) {
        if (a1 > 7L) {
          tmp___53 = 4;
        } else {
          tmp___53 = 0;
        }
        if (a2 > 7L) {
          tmp___54 = 1;
        } else {
          tmp___54 = 0;
        }
        _amd64_rex_bits___1 = (unsigned char )(tmp___53 | tmp___54);
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___55 = jit->ip;
          (jit->ip) ++;
          *tmp___55 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      tmp___56 = jit->ip;
      (jit->ip) ++;
      *tmp___56 = (unsigned char)15;
      tmp___57 = jit->ip;
      (jit->ip) ++;
      *tmp___57 = (unsigned char)18;
      while (1) {
        if (a2 == 16L) {
          while (1) {
            tmp___58 = jit->ip;
            (jit->ip) ++;
            *tmp___58 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
            break;
          }
          while (1) {
            imb___4.val = (int )a3;
            tmp___59 = jit->ip;
            (jit->ip) ++;
            *tmp___59 = imb___4.b[0];
            tmp___60 = jit->ip;
            (jit->ip) ++;
            *tmp___60 = imb___4.b[1];
            tmp___61 = jit->ip;
            (jit->ip) ++;
            *tmp___61 = imb___4.b[2];
            tmp___62 = jit->ip;
            (jit->ip) ++;
            *tmp___62 = imb___4.b[3];
            break;
          }
        } else {
          while (1) {
            if ((a2 & 7L) == 4L) {
              if (a3 == 0L) {
                while (1) {
                  tmp___63 = jit->ip;
                  (jit->ip) ++;
                  *tmp___63 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                  break;
                }
                while (1) {
                  tmp___64 = jit->ip;
                  (jit->ip) ++;
                  *tmp___64 = (unsigned char )((4 << 3) | 4);
                  break;
                }
              } else
              if ((int )a3 >= -128) {
                if ((int )a3 <= 127) {
                  while (1) {
                    tmp___65 = jit->ip;
                    (jit->ip) ++;
                    *tmp___65 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___66 = jit->ip;
                    (jit->ip) ++;
                    *tmp___66 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(a3 & 255L);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___1;
                }
              } else {
                _L___1: /* CIL Label */ 
                while (1) {
                  tmp___67 = jit->ip;
                  (jit->ip) ++;
                  *tmp___67 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                  break;
                }
                while (1) {
                  tmp___68 = jit->ip;
                  (jit->ip) ++;
                  *tmp___68 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  imb___5.val = (int )a3;
                  tmp___69 = jit->ip;
                  (jit->ip) ++;
                  *tmp___69 = imb___5.b[0];
                  tmp___70 = jit->ip;
                  (jit->ip) ++;
                  *tmp___70 = imb___5.b[1];
                  tmp___71 = jit->ip;
                  (jit->ip) ++;
                  *tmp___71 = imb___5.b[2];
                  tmp___72 = jit->ip;
                  (jit->ip) ++;
                  *tmp___72 = imb___5.b[3];
                  break;
                }
              }
              break;
            }
            if (a3 == 0L) {
              if ((a2 & 7L) != 5L) {
                while (1) {
                  tmp___73 = jit->ip;
                  (jit->ip) ++;
                  *tmp___73 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                  break;
                }
                break;
              }
            }
            if ((int )a3 >= -128) {
              if ((int )a3 <= 127) {
                while (1) {
                  tmp___74 = jit->ip;
                  (jit->ip) ++;
                  *tmp___74 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(a3 & 255L);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___2;
              }
            } else {
              _L___2: /* CIL Label */ 
              while (1) {
                tmp___75 = jit->ip;
                (jit->ip) ++;
                *tmp___75 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                break;
              }
              while (1) {
                imb___6.val = (int )a3;
                tmp___76 = jit->ip;
                (jit->ip) ++;
                *tmp___76 = imb___6.b[0];
                tmp___77 = jit->ip;
                (jit->ip) ++;
                *tmp___77 = imb___6.b[1];
                tmp___78 = jit->ip;
                (jit->ip) ++;
                *tmp___78 = imb___6.b[2];
                tmp___79 = jit->ip;
                (jit->ip) ++;
                *tmp___79 = imb___6.b[3];
                break;
              }
            }
            break;
          }
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      tmp___80 = jit->ip;
      (jit->ip) ++;
      *tmp___80 = (unsigned char)102;
      while (1) {
        if (a1 > 7L) {
          tmp___81 = 4;
        } else {
          tmp___81 = 0;
        }
        if (a3 > 7L) {
          tmp___82 = 2;
        } else {
          tmp___82 = 0;
        }
        if (a2 > 7L) {
          tmp___83 = 1;
        } else {
          tmp___83 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )(((8 | tmp___81) | tmp___82) | tmp___83);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___84 = jit->ip;
          (jit->ip) ++;
          *tmp___84 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___85 = jit->ip;
      (jit->ip) ++;
      *tmp___85 = (unsigned char)15;
      tmp___86 = jit->ip;
      (jit->ip) ++;
      *tmp___86 = (unsigned char)18;
      while (1) {
        if (a2 == -1L) {
          while (1) {
            tmp___87 = jit->ip;
            (jit->ip) ++;
            *tmp___87 = (unsigned char )(((a1 & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___88 = jit->ip;
            (jit->ip) ++;
            *tmp___88 = (unsigned char )(((a3 & 7L) << 3) | 5L);
            break;
          }
          while (1) {
            imb___7.val = 0;
            tmp___89 = jit->ip;
            (jit->ip) ++;
            *tmp___89 = imb___7.b[0];
            tmp___90 = jit->ip;
            (jit->ip) ++;
            *tmp___90 = imb___7.b[1];
            tmp___91 = jit->ip;
            (jit->ip) ++;
            *tmp___91 = imb___7.b[2];
            tmp___92 = jit->ip;
            (jit->ip) ++;
            *tmp___92 = imb___7.b[3];
            break;
          }
        } else
        if (a2 != 5L) {
          while (1) {
            tmp___93 = jit->ip;
            (jit->ip) ++;
            *tmp___93 = (unsigned char )(((a1 & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___94 = jit->ip;
            (jit->ip) ++;
            *tmp___94 = (unsigned char )((((a3 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
            break;
          }
        } else {
          while (1) {
            tmp___95 = jit->ip;
            (jit->ip) ++;
            *tmp___95 = (unsigned char )(((long )(1 << 6) | ((a1 & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            tmp___96 = jit->ip;
            (jit->ip) ++;
            *tmp___96 = (unsigned char )((((a3 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)0;
            (jit->ip) ++;
            break;
          }
        }
        break;
      }
      break;
    }
  }
  return;
}
}
jit_op *jit_add_prolog(struct jit *jit , void *func , struct jit_debug_info *debug_info ) 
{ 
  jit_op *op ;
  struct jit_op *tmp ;
  struct jit_func_info *info ;
  void *tmp___0 ;

  {
  tmp = jit_add_op(jit, (unsigned short)536, (unsigned char)2, (long )func, 0L, 0L,
                   (unsigned char)0, (struct jit_debug_info *)((void *)0));
  op = tmp;
  tmp___0 = malloc(sizeof(struct jit_func_info ));
  info = (struct jit_func_info *)tmp___0;
  op->arg[1] = (long )info;
  op->debug_info = debug_info;
  jit->current_func = op;
  info->first_op = op;
  info->allocai_mem = 0L;
  info->general_arg_cnt = 0;
  info->float_arg_cnt = 0;
  return (op);
}
}
static int print_load_op(struct jit_disasm *disasm , struct output_buf *linebuf ,
                         jit_op *op ) 
{ 
  char rbuf[256] ;
  char *tmp ;
  char *tmp___0 ;
  jit_value reg ;
  char *tmp___1 ;
  char *tmp___2 ;

  {
  switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
  case 432U: 
  ob_append(linebuf, disasm->indent_template);
  tmp = jit_get_op_name(op);
  ob_append(linebuf, tmp);
  ob_pad(linebuf, 13);
  jit_get_reg_name(disasm, rbuf, (int )op->arg[1]);
  ob_append(linebuf, rbuf);
  return (1);
  case 416U: 
  case 624U: 
  ob_append(linebuf, disasm->indent_template);
  tmp___0 = jit_get_op_name(op);
  ob_append(linebuf, tmp___0);
  ob_pad(linebuf, 13);
  jit_get_reg_name(disasm, rbuf, (int )op->arg[0]);
  ob_append(linebuf, rbuf);
  return (1);
  case 16U: 
  rmap_is_associated((op->prev)->regmap, (int )op->arg[1], 0, & reg);
  ob_append(linebuf, disasm->indent_template);
  tmp___1 = jit_get_op_name(op);
  ob_append(linebuf, tmp___1);
  ob_append(linebuf, (char *)" ");
  ob_pad(linebuf, 13);
  jit_get_reg_name(disasm, rbuf, (int )reg);
  ob_append(linebuf, rbuf);
  return (1);
  case 704U: 
  ob_append(linebuf, disasm->indent_template);
  tmp___2 = jit_get_op_name(op);
  ob_append(linebuf, tmp___2);
  return (1);
  default: 
  return (0);
  }
}
}
__inline static int pow2(int arg ) 
{ 
  int r ;
  int i ;

  {
  r = 1;
  i = 0;
  while (i < arg) {
    r *= 2;
    i ++;
  }
  return (r);
}
}
__inline static void funcall_fput_arg(struct jit *jit , jit_op *op ) 
{ 
  int pos ;
  struct jit_out_arg *arg ;
  int tmp ;

  {
  pos = jit->prepared_args.ready;
  arg = jit->prepared_args.args + pos;
  arg->isreg = (char )(! ((int )op->code & 2));
  arg->isfp = (char)1;
  arg->size = (char )op->arg_size;
  tmp = jit->prepared_args.fp_args;
  (jit->prepared_args.fp_args) ++;
  arg->argpos = tmp;
  if ((int )op->code & 2) {
    arg->value.fp = op->flt_imm;
  } else {
    arg->value.generic = op->arg[0];
  }
  (jit->prepared_args.ready) ++;
  if (jit->prepared_args.fp_args > (jit->reg_al)->fp_arg_reg_cnt) {
    jit->prepared_args.stack_size = (int )((unsigned long )jit->prepared_args.stack_size + sizeof(void *));
  }
  return;
}
}
static int jit_tree_size(jit_tree *h ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  if ((unsigned long )h == (unsigned long )((void *)0)) {
    return (0);
  }
  tmp = jit_tree_size(h->left);
  tmp___0 = jit_tree_size(h->right);
  return ((tmp + tmp___0) + 1);
}
}
static void emit_get_arg_from_stack(struct jit *jit , int type , int size , int dreg ,
                                    int stack_reg , int stack_pos ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  long tmp___6 ;
  unsigned char *tmp___7 ;
  x86_imm_buf imb ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___29 ;
  int tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___50 ;
  int tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  long tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___75 ;
  int tmp___76 ;
  int tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  long tmp___81 ;
  unsigned char *tmp___82 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;
  unsigned char *tmp___99 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___104 ;
  int tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  long tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  unsigned char *tmp___116 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char *tmp___119 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  unsigned char *tmp___122 ;
  unsigned char *tmp___123 ;
  x86_imm_buf imb___10 ;
  unsigned char *tmp___124 ;
  unsigned char *tmp___125 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char *tmp___128 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___129 ;
  int tmp___130 ;
  int tmp___131 ;
  int tmp___132 ;
  unsigned char *tmp___133 ;
  unsigned char *tmp___134 ;
  unsigned char *tmp___135 ;
  unsigned char *tmp___136 ;
  x86_imm_buf imb___11 ;
  unsigned char *tmp___137 ;
  unsigned char *tmp___138 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  unsigned char *tmp___141 ;
  unsigned char *tmp___142 ;
  unsigned char *tmp___143 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  unsigned char *tmp___146 ;
  x86_imm_buf imb___12 ;
  unsigned char *tmp___147 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;
  unsigned char *tmp___150 ;
  unsigned char *tmp___151 ;
  unsigned char *tmp___152 ;
  unsigned char *tmp___153 ;
  x86_imm_buf imb___13 ;
  unsigned char *tmp___154 ;
  unsigned char *tmp___155 ;
  unsigned char *tmp___156 ;
  unsigned char *tmp___157 ;
  unsigned char *tmp___158 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___159 ;
  int tmp___160 ;
  unsigned char *tmp___161 ;
  unsigned char *tmp___162 ;
  unsigned char *tmp___163 ;
  unsigned char *tmp___164 ;
  x86_imm_buf imb___14 ;
  unsigned char *tmp___165 ;
  unsigned char *tmp___166 ;
  unsigned char *tmp___167 ;
  unsigned char *tmp___168 ;
  unsigned char *tmp___169 ;
  unsigned char *tmp___170 ;
  unsigned char *tmp___171 ;
  unsigned char *tmp___172 ;
  unsigned char *tmp___173 ;
  unsigned char *tmp___174 ;
  x86_imm_buf imb___15 ;
  unsigned char *tmp___175 ;
  unsigned char *tmp___176 ;
  unsigned char *tmp___177 ;
  unsigned char *tmp___178 ;
  unsigned char *tmp___179 ;
  unsigned char *tmp___180 ;
  unsigned char *tmp___181 ;
  x86_imm_buf imb___16 ;
  unsigned char *tmp___182 ;
  unsigned char *tmp___183 ;
  unsigned char *tmp___184 ;
  unsigned char *tmp___185 ;

  {
  if (type != 2) {
    if ((unsigned long )size == sizeof(void *)) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp = jit->ip;
          (jit->ip) ++;
          *tmp = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___0 = 8;
          } else {
            tmp___0 = 0;
          }
          if (dreg > 7) {
            tmp___1 = 4;
          } else {
            tmp___1 = 0;
          }
          if (stack_reg > 7) {
            tmp___2 = 1;
          } else {
            tmp___2 = 0;
          }
          _amd64_rex_bits = (unsigned char )((tmp___0 | tmp___1) | tmp___2);
          if ((int )_amd64_rex_bits != 0) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___5 = jit->ip;
        (jit->ip) ++;
        *tmp___5 = (unsigned char)139;
        break;
        default: 
        tmp___6 = __builtin_expect(1L, 0L);
        if (tmp___6) {
          __assert_rtn("emit_get_arg_from_stack", "./jitter-amd64.c", 2499, "0");
        }
        }
        while (1) {
          if (stack_reg == 16) {
            while (1) {
              tmp___7 = jit->ip;
              (jit->ip) ++;
              *tmp___7 = (unsigned char )((((dreg & 7) & 7) << 3) | 5);
              break;
            }
            while (1) {
              imb.val = stack_pos;
              tmp___8 = jit->ip;
              (jit->ip) ++;
              *tmp___8 = imb.b[0];
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = imb.b[1];
              tmp___10 = jit->ip;
              (jit->ip) ++;
              *tmp___10 = imb.b[2];
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = imb.b[3];
              break;
            }
          } else {
            while (1) {
              if ((stack_reg & 7) == 4) {
                if (stack_pos == 0) {
                  while (1) {
                    tmp___12 = jit->ip;
                    (jit->ip) ++;
                    *tmp___12 = (unsigned char )((((dreg & 7) & 7) << 3) | 4);
                    break;
                  }
                  while (1) {
                    tmp___13 = jit->ip;
                    (jit->ip) ++;
                    *tmp___13 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                } else
                if (stack_pos >= -128) {
                  if (stack_pos <= 127) {
                    while (1) {
                      tmp___14 = jit->ip;
                      (jit->ip) ++;
                      *tmp___14 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                      break;
                    }
                    while (1) {
                      tmp___15 = jit->ip;
                      (jit->ip) ++;
                      *tmp___15 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(stack_pos & 255);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L;
                  }
                } else {
                  _L: /* CIL Label */ 
                  while (1) {
                    tmp___16 = jit->ip;
                    (jit->ip) ++;
                    *tmp___16 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___17 = jit->ip;
                    (jit->ip) ++;
                    *tmp___17 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    imb___0.val = stack_pos;
                    tmp___18 = jit->ip;
                    (jit->ip) ++;
                    *tmp___18 = imb___0.b[0];
                    tmp___19 = jit->ip;
                    (jit->ip) ++;
                    *tmp___19 = imb___0.b[1];
                    tmp___20 = jit->ip;
                    (jit->ip) ++;
                    *tmp___20 = imb___0.b[2];
                    tmp___21 = jit->ip;
                    (jit->ip) ++;
                    *tmp___21 = imb___0.b[3];
                    break;
                  }
                }
                break;
              }
              if (stack_pos == 0) {
                if ((stack_reg & 7) != 5) {
                  while (1) {
                    tmp___22 = jit->ip;
                    (jit->ip) ++;
                    *tmp___22 = (unsigned char )((((dreg & 7) & 7) << 3) | ((stack_reg & 7) & 7));
                    break;
                  }
                  break;
                }
              }
              if (stack_pos >= -128) {
                if (stack_pos <= 127) {
                  while (1) {
                    tmp___23 = jit->ip;
                    (jit->ip) ++;
                    *tmp___23 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(stack_pos & 255);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___0;
                }
              } else {
                _L___0: /* CIL Label */ 
                while (1) {
                  tmp___24 = jit->ip;
                  (jit->ip) ++;
                  *tmp___24 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                  break;
                }
                while (1) {
                  imb___1.val = stack_pos;
                  tmp___25 = jit->ip;
                  (jit->ip) ++;
                  *tmp___25 = imb___1.b[0];
                  tmp___26 = jit->ip;
                  (jit->ip) ++;
                  *tmp___26 = imb___1.b[1];
                  tmp___27 = jit->ip;
                  (jit->ip) ++;
                  *tmp___27 = imb___1.b[2];
                  tmp___28 = jit->ip;
                  (jit->ip) ++;
                  *tmp___28 = imb___1.b[3];
                  break;
                }
              }
              break;
            }
          }
          break;
        }
        break;
      }
    } else
    if (type == 0) {
      while (1) {
        if (size == 4) {
          while (1) {
            while (1) {
              if (dreg > 7) {
                tmp___29 = 4;
              } else {
                tmp___29 = 0;
              }
              if (stack_reg > 7) {
                tmp___30 = 1;
              } else {
                tmp___30 = 0;
              }
              _amd64_rex_bits___0 = (unsigned char )((8 | tmp___29) | tmp___30);
              if ((int )_amd64_rex_bits___0 != 0) {
                tmp___31 = jit->ip;
                (jit->ip) ++;
                *tmp___31 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
              }
              break;
            }
            tmp___32 = jit->ip;
            (jit->ip) ++;
            *tmp___32 = (unsigned char)99;
            while (1) {
              if ((stack_reg & 7) == 4) {
                if (stack_pos == 0) {
                  while (1) {
                    tmp___33 = jit->ip;
                    (jit->ip) ++;
                    *tmp___33 = (unsigned char )((((dreg & 7) & 7) << 3) | 4);
                    break;
                  }
                  while (1) {
                    tmp___34 = jit->ip;
                    (jit->ip) ++;
                    *tmp___34 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                } else
                if (stack_pos >= -128) {
                  if (stack_pos <= 127) {
                    while (1) {
                      tmp___35 = jit->ip;
                      (jit->ip) ++;
                      *tmp___35 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                      break;
                    }
                    while (1) {
                      tmp___36 = jit->ip;
                      (jit->ip) ++;
                      *tmp___36 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(stack_pos & 255);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L___1;
                  }
                } else {
                  _L___1: /* CIL Label */ 
                  while (1) {
                    tmp___37 = jit->ip;
                    (jit->ip) ++;
                    *tmp___37 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___38 = jit->ip;
                    (jit->ip) ++;
                    *tmp___38 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    imb___2.val = stack_pos;
                    tmp___39 = jit->ip;
                    (jit->ip) ++;
                    *tmp___39 = imb___2.b[0];
                    tmp___40 = jit->ip;
                    (jit->ip) ++;
                    *tmp___40 = imb___2.b[1];
                    tmp___41 = jit->ip;
                    (jit->ip) ++;
                    *tmp___41 = imb___2.b[2];
                    tmp___42 = jit->ip;
                    (jit->ip) ++;
                    *tmp___42 = imb___2.b[3];
                    break;
                  }
                }
                break;
              }
              if (stack_pos == 0) {
                if ((stack_reg & 7) != 5) {
                  while (1) {
                    tmp___43 = jit->ip;
                    (jit->ip) ++;
                    *tmp___43 = (unsigned char )((((dreg & 7) & 7) << 3) | ((stack_reg & 7) & 7));
                    break;
                  }
                  break;
                }
              }
              if (stack_pos >= -128) {
                if (stack_pos <= 127) {
                  while (1) {
                    tmp___44 = jit->ip;
                    (jit->ip) ++;
                    *tmp___44 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(stack_pos & 255);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___2;
                }
              } else {
                _L___2: /* CIL Label */ 
                while (1) {
                  tmp___45 = jit->ip;
                  (jit->ip) ++;
                  *tmp___45 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                  break;
                }
                while (1) {
                  imb___3.val = stack_pos;
                  tmp___46 = jit->ip;
                  (jit->ip) ++;
                  *tmp___46 = imb___3.b[0];
                  tmp___47 = jit->ip;
                  (jit->ip) ++;
                  *tmp___47 = imb___3.b[1];
                  tmp___48 = jit->ip;
                  (jit->ip) ++;
                  *tmp___48 = imb___3.b[2];
                  tmp___49 = jit->ip;
                  (jit->ip) ++;
                  *tmp___49 = imb___3.b[3];
                  break;
                }
              }
              break;
            }
            break;
          }
          break;
        }
        while (1) {
          if (dreg > 7) {
            tmp___50 = 4;
          } else {
            tmp___50 = 0;
          }
          if (stack_reg > 7) {
            tmp___51 = 1;
          } else {
            tmp___51 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )((8 | tmp___50) | tmp___51);
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___52 = jit->ip;
            (jit->ip) ++;
            *tmp___52 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___53 = jit->ip;
        (jit->ip) ++;
        *tmp___53 = (unsigned char)15;
        switch (size) {
        case 1: 
        tmp___54 = jit->ip;
        (jit->ip) ++;
        *tmp___54 = (unsigned char)190;
        break;
        case 2: 
        tmp___55 = jit->ip;
        (jit->ip) ++;
        *tmp___55 = (unsigned char)191;
        break;
        default: 
        tmp___56 = __builtin_expect(1L, 0L);
        if (tmp___56) {
          __assert_rtn("emit_get_arg_from_stack", "./jitter-amd64.c", 2501, "0");
        }
        }
        while (1) {
          if ((stack_reg & 7) == 4) {
            if (stack_pos == 0) {
              while (1) {
                tmp___57 = jit->ip;
                (jit->ip) ++;
                *tmp___57 = (unsigned char )((((dreg & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___58 = jit->ip;
                (jit->ip) ++;
                *tmp___58 = (unsigned char )((4 << 3) | 4);
                break;
              }
            } else
            if (stack_pos >= -128) {
              if (stack_pos <= 127) {
                while (1) {
                  tmp___59 = jit->ip;
                  (jit->ip) ++;
                  *tmp___59 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___60 = jit->ip;
                  (jit->ip) ++;
                  *tmp___60 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(stack_pos & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___3;
              }
            } else {
              _L___3: /* CIL Label */ 
              while (1) {
                tmp___61 = jit->ip;
                (jit->ip) ++;
                *tmp___61 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___62 = jit->ip;
                (jit->ip) ++;
                *tmp___62 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                imb___4.val = stack_pos;
                tmp___63 = jit->ip;
                (jit->ip) ++;
                *tmp___63 = imb___4.b[0];
                tmp___64 = jit->ip;
                (jit->ip) ++;
                *tmp___64 = imb___4.b[1];
                tmp___65 = jit->ip;
                (jit->ip) ++;
                *tmp___65 = imb___4.b[2];
                tmp___66 = jit->ip;
                (jit->ip) ++;
                *tmp___66 = imb___4.b[3];
                break;
              }
            }
            break;
          }
          if (stack_pos == 0) {
            if ((stack_reg & 7) != 5) {
              while (1) {
                tmp___67 = jit->ip;
                (jit->ip) ++;
                *tmp___67 = (unsigned char )((((dreg & 7) & 7) << 3) | ((stack_reg & 7) & 7));
                break;
              }
              break;
            }
          }
          if (stack_pos >= -128) {
            if (stack_pos <= 127) {
              while (1) {
                tmp___68 = jit->ip;
                (jit->ip) ++;
                *tmp___68 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(stack_pos & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___4;
            }
          } else {
            _L___4: /* CIL Label */ 
            while (1) {
              tmp___69 = jit->ip;
              (jit->ip) ++;
              *tmp___69 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
              break;
            }
            while (1) {
              imb___5.val = stack_pos;
              tmp___70 = jit->ip;
              (jit->ip) ++;
              *tmp___70 = imb___5.b[0];
              tmp___71 = jit->ip;
              (jit->ip) ++;
              *tmp___71 = imb___5.b[1];
              tmp___72 = jit->ip;
              (jit->ip) ++;
              *tmp___72 = imb___5.b[2];
              tmp___73 = jit->ip;
              (jit->ip) ++;
              *tmp___73 = imb___5.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        if (size == 8) {
          goto _L___7;
        } else
        if (size == 4) {
          _L___7: /* CIL Label */ 
          while (1) {
            if (size == 2) {
              tmp___74 = jit->ip;
              (jit->ip) ++;
              *tmp___74 = (unsigned char)102;
            }
            while (1) {
              if (size > 4) {
                tmp___75 = 8;
              } else {
                tmp___75 = 0;
              }
              if (dreg > 7) {
                tmp___76 = 4;
              } else {
                tmp___76 = 0;
              }
              if (stack_reg > 7) {
                tmp___77 = 1;
              } else {
                tmp___77 = 0;
              }
              _amd64_rex_bits___2 = (unsigned char )((tmp___75 | tmp___76) | tmp___77);
              if ((int )_amd64_rex_bits___2 != 0) {
                tmp___78 = jit->ip;
                (jit->ip) ++;
                *tmp___78 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
              } else
              if (size == 1) {
                tmp___78 = jit->ip;
                (jit->ip) ++;
                *tmp___78 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
              }
              break;
            }
            switch (size) {
            case 1: 
            tmp___79 = jit->ip;
            (jit->ip) ++;
            *tmp___79 = (unsigned char)138;
            break;
            case 8: 
            case 4: 
            case 2: 
            tmp___80 = jit->ip;
            (jit->ip) ++;
            *tmp___80 = (unsigned char)139;
            break;
            default: 
            tmp___81 = __builtin_expect(1L, 0L);
            if (tmp___81) {
              __assert_rtn("emit_get_arg_from_stack", "./jitter-amd64.c", 2502, "0");
            }
            }
            while (1) {
              if (stack_reg == 16) {
                while (1) {
                  tmp___82 = jit->ip;
                  (jit->ip) ++;
                  *tmp___82 = (unsigned char )((((dreg & 7) & 7) << 3) | 5);
                  break;
                }
                while (1) {
                  imb___6.val = stack_pos;
                  tmp___83 = jit->ip;
                  (jit->ip) ++;
                  *tmp___83 = imb___6.b[0];
                  tmp___84 = jit->ip;
                  (jit->ip) ++;
                  *tmp___84 = imb___6.b[1];
                  tmp___85 = jit->ip;
                  (jit->ip) ++;
                  *tmp___85 = imb___6.b[2];
                  tmp___86 = jit->ip;
                  (jit->ip) ++;
                  *tmp___86 = imb___6.b[3];
                  break;
                }
              } else {
                while (1) {
                  if ((stack_reg & 7) == 4) {
                    if (stack_pos == 0) {
                      while (1) {
                        tmp___87 = jit->ip;
                        (jit->ip) ++;
                        *tmp___87 = (unsigned char )((((dreg & 7) & 7) << 3) | 4);
                        break;
                      }
                      while (1) {
                        tmp___88 = jit->ip;
                        (jit->ip) ++;
                        *tmp___88 = (unsigned char )((4 << 3) | 4);
                        break;
                      }
                    } else
                    if (stack_pos >= -128) {
                      if (stack_pos <= 127) {
                        while (1) {
                          tmp___89 = jit->ip;
                          (jit->ip) ++;
                          *tmp___89 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                          break;
                        }
                        while (1) {
                          tmp___90 = jit->ip;
                          (jit->ip) ++;
                          *tmp___90 = (unsigned char )((4 << 3) | 4);
                          break;
                        }
                        while (1) {
                          *(jit->ip) = (unsigned char )(stack_pos & 255);
                          (jit->ip) ++;
                          break;
                        }
                      } else {
                        goto _L___5;
                      }
                    } else {
                      _L___5: /* CIL Label */ 
                      while (1) {
                        tmp___91 = jit->ip;
                        (jit->ip) ++;
                        *tmp___91 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                        break;
                      }
                      while (1) {
                        tmp___92 = jit->ip;
                        (jit->ip) ++;
                        *tmp___92 = (unsigned char )((4 << 3) | 4);
                        break;
                      }
                      while (1) {
                        imb___7.val = stack_pos;
                        tmp___93 = jit->ip;
                        (jit->ip) ++;
                        *tmp___93 = imb___7.b[0];
                        tmp___94 = jit->ip;
                        (jit->ip) ++;
                        *tmp___94 = imb___7.b[1];
                        tmp___95 = jit->ip;
                        (jit->ip) ++;
                        *tmp___95 = imb___7.b[2];
                        tmp___96 = jit->ip;
                        (jit->ip) ++;
                        *tmp___96 = imb___7.b[3];
                        break;
                      }
                    }
                    break;
                  }
                  if (stack_pos == 0) {
                    if ((stack_reg & 7) != 5) {
                      while (1) {
                        tmp___97 = jit->ip;
                        (jit->ip) ++;
                        *tmp___97 = (unsigned char )((((dreg & 7) & 7) << 3) | ((stack_reg & 7) & 7));
                        break;
                      }
                      break;
                    }
                  }
                  if (stack_pos >= -128) {
                    if (stack_pos <= 127) {
                      while (1) {
                        tmp___98 = jit->ip;
                        (jit->ip) ++;
                        *tmp___98 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                        break;
                      }
                      while (1) {
                        *(jit->ip) = (unsigned char )(stack_pos & 255);
                        (jit->ip) ++;
                        break;
                      }
                    } else {
                      goto _L___6;
                    }
                  } else {
                    _L___6: /* CIL Label */ 
                    while (1) {
                      tmp___99 = jit->ip;
                      (jit->ip) ++;
                      *tmp___99 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                      break;
                    }
                    while (1) {
                      imb___8.val = stack_pos;
                      tmp___100 = jit->ip;
                      (jit->ip) ++;
                      *tmp___100 = imb___8.b[0];
                      tmp___101 = jit->ip;
                      (jit->ip) ++;
                      *tmp___101 = imb___8.b[1];
                      tmp___102 = jit->ip;
                      (jit->ip) ++;
                      *tmp___102 = imb___8.b[2];
                      tmp___103 = jit->ip;
                      (jit->ip) ++;
                      *tmp___103 = imb___8.b[3];
                      break;
                    }
                  }
                  break;
                }
              }
              break;
            }
            break;
          }
          break;
        }
        while (1) {
          if (dreg > 7) {
            tmp___104 = 4;
          } else {
            tmp___104 = 0;
          }
          if (stack_reg > 7) {
            tmp___105 = 1;
          } else {
            tmp___105 = 0;
          }
          _amd64_rex_bits___3 = (unsigned char )((8 | tmp___104) | tmp___105);
          if ((int )_amd64_rex_bits___3 != 0) {
            tmp___106 = jit->ip;
            (jit->ip) ++;
            *tmp___106 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          }
          break;
        }
        tmp___107 = jit->ip;
        (jit->ip) ++;
        *tmp___107 = (unsigned char)15;
        switch (size) {
        case 1: 
        tmp___108 = jit->ip;
        (jit->ip) ++;
        *tmp___108 = (unsigned char)182;
        break;
        case 2: 
        tmp___109 = jit->ip;
        (jit->ip) ++;
        *tmp___109 = (unsigned char)183;
        break;
        default: 
        tmp___110 = __builtin_expect(1L, 0L);
        if (tmp___110) {
          __assert_rtn("emit_get_arg_from_stack", "./jitter-amd64.c", 2502, "0");
        }
        }
        while (1) {
          if ((stack_reg & 7) == 4) {
            if (stack_pos == 0) {
              while (1) {
                tmp___111 = jit->ip;
                (jit->ip) ++;
                *tmp___111 = (unsigned char )((((dreg & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___112 = jit->ip;
                (jit->ip) ++;
                *tmp___112 = (unsigned char )((4 << 3) | 4);
                break;
              }
            } else
            if (stack_pos >= -128) {
              if (stack_pos <= 127) {
                while (1) {
                  tmp___113 = jit->ip;
                  (jit->ip) ++;
                  *tmp___113 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___114 = jit->ip;
                  (jit->ip) ++;
                  *tmp___114 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(stack_pos & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___8;
              }
            } else {
              _L___8: /* CIL Label */ 
              while (1) {
                tmp___115 = jit->ip;
                (jit->ip) ++;
                *tmp___115 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___116 = jit->ip;
                (jit->ip) ++;
                *tmp___116 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                imb___9.val = stack_pos;
                tmp___117 = jit->ip;
                (jit->ip) ++;
                *tmp___117 = imb___9.b[0];
                tmp___118 = jit->ip;
                (jit->ip) ++;
                *tmp___118 = imb___9.b[1];
                tmp___119 = jit->ip;
                (jit->ip) ++;
                *tmp___119 = imb___9.b[2];
                tmp___120 = jit->ip;
                (jit->ip) ++;
                *tmp___120 = imb___9.b[3];
                break;
              }
            }
            break;
          }
          if (stack_pos == 0) {
            if ((stack_reg & 7) != 5) {
              while (1) {
                tmp___121 = jit->ip;
                (jit->ip) ++;
                *tmp___121 = (unsigned char )((((dreg & 7) & 7) << 3) | ((stack_reg & 7) & 7));
                break;
              }
              break;
            }
          }
          if (stack_pos >= -128) {
            if (stack_pos <= 127) {
              while (1) {
                tmp___122 = jit->ip;
                (jit->ip) ++;
                *tmp___122 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(stack_pos & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___9;
            }
          } else {
            _L___9: /* CIL Label */ 
            while (1) {
              tmp___123 = jit->ip;
              (jit->ip) ++;
              *tmp___123 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
              break;
            }
            while (1) {
              imb___10.val = stack_pos;
              tmp___124 = jit->ip;
              (jit->ip) ++;
              *tmp___124 = imb___10.b[0];
              tmp___125 = jit->ip;
              (jit->ip) ++;
              *tmp___125 = imb___10.b[1];
              tmp___126 = jit->ip;
              (jit->ip) ++;
              *tmp___126 = imb___10.b[2];
              tmp___127 = jit->ip;
              (jit->ip) ++;
              *tmp___127 = imb___10.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
    }
  } else
  if ((unsigned long )size == sizeof(float )) {
    while (1) {
      tmp___128 = jit->ip;
      (jit->ip) ++;
      *tmp___128 = (unsigned char)243;
      while (1) {
        if (dreg > 7) {
          tmp___129 = 4;
        } else {
          tmp___129 = 0;
        }
        if (stack_reg == 16) {
          tmp___132 = 0;
        } else {
          tmp___132 = stack_reg;
        }
        if (tmp___132 > 7) {
          tmp___131 = 1;
        } else {
          tmp___131 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )(tmp___129 | tmp___131);
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___133 = jit->ip;
          (jit->ip) ++;
          *tmp___133 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      tmp___134 = jit->ip;
      (jit->ip) ++;
      *tmp___134 = (unsigned char)15;
      tmp___135 = jit->ip;
      (jit->ip) ++;
      *tmp___135 = (unsigned char)90;
      while (1) {
        if (stack_reg == 16) {
          while (1) {
            tmp___136 = jit->ip;
            (jit->ip) ++;
            *tmp___136 = (unsigned char )((((dreg & 7) & 7) << 3) | 5);
            break;
          }
          while (1) {
            imb___11.val = stack_pos;
            tmp___137 = jit->ip;
            (jit->ip) ++;
            *tmp___137 = imb___11.b[0];
            tmp___138 = jit->ip;
            (jit->ip) ++;
            *tmp___138 = imb___11.b[1];
            tmp___139 = jit->ip;
            (jit->ip) ++;
            *tmp___139 = imb___11.b[2];
            tmp___140 = jit->ip;
            (jit->ip) ++;
            *tmp___140 = imb___11.b[3];
            break;
          }
        } else {
          while (1) {
            if ((stack_reg & 7) == 4) {
              if (stack_pos == 0) {
                while (1) {
                  tmp___141 = jit->ip;
                  (jit->ip) ++;
                  *tmp___141 = (unsigned char )((((dreg & 7) & 7) << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___142 = jit->ip;
                  (jit->ip) ++;
                  *tmp___142 = (unsigned char )((4 << 3) | 4);
                  break;
                }
              } else
              if (stack_pos >= -128) {
                if (stack_pos <= 127) {
                  while (1) {
                    tmp___143 = jit->ip;
                    (jit->ip) ++;
                    *tmp___143 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___144 = jit->ip;
                    (jit->ip) ++;
                    *tmp___144 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(stack_pos & 255);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___10;
                }
              } else {
                _L___10: /* CIL Label */ 
                while (1) {
                  tmp___145 = jit->ip;
                  (jit->ip) ++;
                  *tmp___145 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___146 = jit->ip;
                  (jit->ip) ++;
                  *tmp___146 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  imb___12.val = stack_pos;
                  tmp___147 = jit->ip;
                  (jit->ip) ++;
                  *tmp___147 = imb___12.b[0];
                  tmp___148 = jit->ip;
                  (jit->ip) ++;
                  *tmp___148 = imb___12.b[1];
                  tmp___149 = jit->ip;
                  (jit->ip) ++;
                  *tmp___149 = imb___12.b[2];
                  tmp___150 = jit->ip;
                  (jit->ip) ++;
                  *tmp___150 = imb___12.b[3];
                  break;
                }
              }
              break;
            }
            if (stack_pos == 0) {
              if ((stack_reg & 7) != 5) {
                while (1) {
                  tmp___151 = jit->ip;
                  (jit->ip) ++;
                  *tmp___151 = (unsigned char )((((dreg & 7) & 7) << 3) | ((stack_reg & 7) & 7));
                  break;
                }
                break;
              }
            }
            if (stack_pos >= -128) {
              if (stack_pos <= 127) {
                while (1) {
                  tmp___152 = jit->ip;
                  (jit->ip) ++;
                  *tmp___152 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(stack_pos & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___11;
              }
            } else {
              _L___11: /* CIL Label */ 
              while (1) {
                tmp___153 = jit->ip;
                (jit->ip) ++;
                *tmp___153 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                break;
              }
              while (1) {
                imb___13.val = stack_pos;
                tmp___154 = jit->ip;
                (jit->ip) ++;
                *tmp___154 = imb___13.b[0];
                tmp___155 = jit->ip;
                (jit->ip) ++;
                *tmp___155 = imb___13.b[1];
                tmp___156 = jit->ip;
                (jit->ip) ++;
                *tmp___156 = imb___13.b[2];
                tmp___157 = jit->ip;
                (jit->ip) ++;
                *tmp___157 = imb___13.b[3];
                break;
              }
            }
            break;
          }
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      tmp___158 = jit->ip;
      (jit->ip) ++;
      *tmp___158 = (unsigned char)102;
      while (1) {
        if (dreg > 7) {
          tmp___159 = 4;
        } else {
          tmp___159 = 0;
        }
        if (stack_reg > 7) {
          tmp___160 = 1;
        } else {
          tmp___160 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(tmp___159 | tmp___160);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___161 = jit->ip;
          (jit->ip) ++;
          *tmp___161 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      tmp___162 = jit->ip;
      (jit->ip) ++;
      *tmp___162 = (unsigned char)15;
      tmp___163 = jit->ip;
      (jit->ip) ++;
      *tmp___163 = (unsigned char)18;
      while (1) {
        if (stack_reg == 16) {
          while (1) {
            tmp___164 = jit->ip;
            (jit->ip) ++;
            *tmp___164 = (unsigned char )((((dreg & 7) & 7) << 3) | 5);
            break;
          }
          while (1) {
            imb___14.val = stack_pos;
            tmp___165 = jit->ip;
            (jit->ip) ++;
            *tmp___165 = imb___14.b[0];
            tmp___166 = jit->ip;
            (jit->ip) ++;
            *tmp___166 = imb___14.b[1];
            tmp___167 = jit->ip;
            (jit->ip) ++;
            *tmp___167 = imb___14.b[2];
            tmp___168 = jit->ip;
            (jit->ip) ++;
            *tmp___168 = imb___14.b[3];
            break;
          }
        } else {
          while (1) {
            if ((stack_reg & 7) == 4) {
              if (stack_pos == 0) {
                while (1) {
                  tmp___169 = jit->ip;
                  (jit->ip) ++;
                  *tmp___169 = (unsigned char )((((dreg & 7) & 7) << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___170 = jit->ip;
                  (jit->ip) ++;
                  *tmp___170 = (unsigned char )((4 << 3) | 4);
                  break;
                }
              } else
              if (stack_pos >= -128) {
                if (stack_pos <= 127) {
                  while (1) {
                    tmp___171 = jit->ip;
                    (jit->ip) ++;
                    *tmp___171 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___172 = jit->ip;
                    (jit->ip) ++;
                    *tmp___172 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(stack_pos & 255);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___12;
                }
              } else {
                _L___12: /* CIL Label */ 
                while (1) {
                  tmp___173 = jit->ip;
                  (jit->ip) ++;
                  *tmp___173 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___174 = jit->ip;
                  (jit->ip) ++;
                  *tmp___174 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  imb___15.val = stack_pos;
                  tmp___175 = jit->ip;
                  (jit->ip) ++;
                  *tmp___175 = imb___15.b[0];
                  tmp___176 = jit->ip;
                  (jit->ip) ++;
                  *tmp___176 = imb___15.b[1];
                  tmp___177 = jit->ip;
                  (jit->ip) ++;
                  *tmp___177 = imb___15.b[2];
                  tmp___178 = jit->ip;
                  (jit->ip) ++;
                  *tmp___178 = imb___15.b[3];
                  break;
                }
              }
              break;
            }
            if (stack_pos == 0) {
              if ((stack_reg & 7) != 5) {
                while (1) {
                  tmp___179 = jit->ip;
                  (jit->ip) ++;
                  *tmp___179 = (unsigned char )((((dreg & 7) & 7) << 3) | ((stack_reg & 7) & 7));
                  break;
                }
                break;
              }
            }
            if (stack_pos >= -128) {
              if (stack_pos <= 127) {
                while (1) {
                  tmp___180 = jit->ip;
                  (jit->ip) ++;
                  *tmp___180 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(stack_pos & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___13;
              }
            } else {
              _L___13: /* CIL Label */ 
              while (1) {
                tmp___181 = jit->ip;
                (jit->ip) ++;
                *tmp___181 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                break;
              }
              while (1) {
                imb___16.val = stack_pos;
                tmp___182 = jit->ip;
                (jit->ip) ++;
                *tmp___182 = imb___16.b[0];
                tmp___183 = jit->ip;
                (jit->ip) ++;
                *tmp___183 = imb___16.b[1];
                tmp___184 = jit->ip;
                (jit->ip) ++;
                *tmp___184 = imb___16.b[2];
                tmp___185 = jit->ip;
                (jit->ip) ++;
                *tmp___185 = imb___16.b[3];
                break;
              }
            }
            break;
          }
        }
        break;
      }
      break;
    }
  }
  return;
}
}
static void emit_prolog_op(struct jit *jit , jit_op *op ) 
{ 
  struct jit_func_info *info ;
  struct jit_func_info *tmp ;
  int prolog ;
  struct jit_func_info *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  long tmp___8 ;
  unsigned char *tmp___9 ;
  int stack_mem ;
  jit_value tmp___10 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  x86_imm_buf imb ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;

  {
  jit->current_func = op;
  tmp = jit_current_func_info(jit);
  info = tmp;
  tmp___0 = jit_current_func_info(jit);
  prolog = tmp___0->has_prolog;
  while ((jit_value )jit->ip % 16L) {
    while (1) {
      while (1) {
        tmp___1 = jit->ip;
        (jit->ip) ++;
        *tmp___1 = (unsigned char)144;
        break;
      }
      break;
    }
  }
  op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
  if (prolog) {
    while (1) {
      while (1) {
        _amd64_rex_bits = (unsigned char)0;
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)85;
      break;
    }
    while (1) {
      while (1) {
        _amd64_rex_bits___0 = (unsigned char)8;
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      switch (8) {
      case 1: 
      tmp___6 = jit->ip;
      (jit->ip) ++;
      *tmp___6 = (unsigned char)138;
      break;
      case 8: 
      case 4: 
      case 2: 
      tmp___7 = jit->ip;
      (jit->ip) ++;
      *tmp___7 = (unsigned char)139;
      break;
      default: 
      tmp___8 = __builtin_expect(1L, 0L);
      if (tmp___8) {
        __assert_rtn("emit_prolog_op", "./jitter-amd64.c", 2105, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___9 = jit->ip;
          (jit->ip) ++;
          *tmp___9 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
          break;
        }
        break;
      }
      break;
    }
  }
  stack_mem = (int )(((((unsigned long )info->allocai_mem + (unsigned long )info->gp_reg_count * sizeof(void *)) + (unsigned long )info->fp_reg_count * sizeof(jit_float )) + (unsigned long )info->general_arg_cnt * sizeof(void *)) + (unsigned long )info->float_arg_cnt * sizeof(jit_float ));
  tmp___10 = jit_value_align((jit_value )stack_mem, (jit_value )16);
  stack_mem = (int )tmp___10;
  if (prolog) {
    while (1) {
      if (stack_mem >= -128) {
        if (stack_mem <= 127) {
          while (1) {
            _amd64_rex_bits___1 = (unsigned char)8;
            if ((int )_amd64_rex_bits___1 != 0) {
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
            }
            break;
          }
          tmp___12 = jit->ip;
          (jit->ip) ++;
          *tmp___12 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___13 = jit->ip;
              (jit->ip) ++;
              *tmp___13 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(stack_mem & 255);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
        while (1) {
          _amd64_rex_bits___3 = (unsigned char)8;
          if ((int )_amd64_rex_bits___3 != 0) {
            tmp___20 = jit->ip;
            (jit->ip) ++;
            *tmp___20 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          }
          break;
        }
        tmp___21 = jit->ip;
        (jit->ip) ++;
        *tmp___21 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___22 = jit->ip;
            (jit->ip) ++;
            *tmp___22 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = stack_mem;
          tmp___23 = jit->ip;
          (jit->ip) ++;
          *tmp___23 = imb___0.b[0];
          tmp___24 = jit->ip;
          (jit->ip) ++;
          *tmp___24 = imb___0.b[1];
          tmp___25 = jit->ip;
          (jit->ip) ++;
          *tmp___25 = imb___0.b[2];
          tmp___26 = jit->ip;
          (jit->ip) ++;
          *tmp___26 = imb___0.b[3];
          break;
        }
      }
      break;
    }
  }
  jit->push_count = emit_push_callee_saved_regs(jit, op);
  return;
}
}
__inline static jit_set *jit_set_clone(jit_set *s ) 
{ 
  jit_set *clone ;
  jit_set *tmp ;

  {
  tmp = jit_set_new();
  clone = tmp;
  clone->root = jit_tree_clone(s->root);
  return (clone);
}
}
__inline static void jit_prepare_spills_on_jmpr_targets(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  jit_op *newop ;
  struct jit_op *tmp___0 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 832U) {
      tmp___0 = jit_op_new((unsigned short)706, (unsigned char)0, 0L, 0L, 0L, (unsigned char)0);
      newop = tmp___0;
      jit_op_prepend(op->jmp_addr, newop);
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 520U) {
      tmp___0 = jit_op_new((unsigned short)706, (unsigned char)0, 0L, 0L, 0L, (unsigned char)0);
      newop = tmp___0;
      jit_op_prepend(op->jmp_addr, newop);
    }
    op = op->next;
  }
  return;
}
}
__inline static void jit_expand_patches_and_labels(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 136U) {
      ((jit_op *)op->arg[0])->jmp_addr = op;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 456U) {
      ((jit_label *)op->arg[0])->op = op;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) != 456U) {
      tmp___0 = jit_is_label(jit, (void *)op->arg[0]);
      if (tmp___0) {
        op->jmp_addr = ((jit_label *)op->arg[0])->op;
      }
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) != 456U) {
      tmp___1 = jit_is_label(jit, (void *)op->arg[1]);
      if (tmp___1) {
        op->jmp_addr = ((jit_label *)op->arg[1])->op;
      }
    }
    op = op->next;
  }
  return;
}
}
void jit_get_reg_name(struct jit_disasm *disasm , char *r , int reg ) 
{ 
  unsigned long tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;
  unsigned long tmp___2 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;
  unsigned long tmp___5 ;
  unsigned long tmp___6 ;
  unsigned long tmp___7 ;

  {
  if (reg == 2 << 1) {
    tmp = __builtin_object_size((void *)r, 1);
    __builtin___strcpy_chk(r, (char const   *)disasm->reg_fp_template, tmp);
  } else
  if (reg == ((2 << 1) | (1 << 4))) {
    tmp___0 = __builtin_object_size((void *)r, 1);
    __builtin___strcpy_chk(r, (char const   *)disasm->reg_out_template, tmp___0);
  } else
  if (reg == 1 << 1) {
    tmp___1 = __builtin_object_size((void *)r, 1);
    __builtin___strcpy_chk(r, (char const   *)disasm->reg_imm_template, tmp___1);
  } else
  if (reg == (1 | (1 << 1))) {
    tmp___2 = __builtin_object_size((void *)r, 1);
    __builtin___strcpy_chk(r, (char const   *)disasm->reg_fimm_template, tmp___2);
  } else
  if (((reg >> 1) & 3) == 0) {
    if ((reg & 1) == 0) {
      tmp___3 = __builtin_object_size((void *)r, 1);
      __builtin___sprintf_chk(r, 0, tmp___3, (char const   *)disasm->reg_template,
                              (reg >> 4) & 268435455);
    } else {
      tmp___4 = __builtin_object_size((void *)r, 1);
      __builtin___sprintf_chk(r, 0, tmp___4, (char const   *)disasm->freg_template,
                              (reg >> 4) & 268435455);
    }
  } else
  if (((reg >> 1) & 3) == 3) {
    if ((reg & 1) == 0) {
      tmp___5 = __builtin_object_size((void *)r, 1);
      __builtin___sprintf_chk(r, 0, tmp___5, (char const   *)disasm->arg_template,
                              (reg >> 4) & 268435455);
    } else {
      tmp___6 = __builtin_object_size((void *)r, 1);
      __builtin___sprintf_chk(r, 0, tmp___6, (char const   *)disasm->farg_template,
                              (reg >> 4) & 268435455);
    }
  } else {
    tmp___7 = __builtin_object_size((void *)r, 1);
    __builtin___sprintf_chk(r, 0, tmp___7, "%s", disasm->reg_unknown_template);
  }
  return;
}
}
static void emit_transfer_init(struct jit *jit , jit_op *op , jit_value destreg ,
                               jit_value srcreg , jit_value cnt , int block_size ) 
{ 
  struct transfer_info *tinf ;
  void *tmp ;
  jit_hw_reg *scrap ;
  jit_hw_reg *tmp___0 ;
  int i ;
  jit_hw_reg *r ;
  jit_hw_reg *counter ;
  jit_hw_reg *tmp___1 ;
  int i___0 ;
  jit_hw_reg *r___0 ;
  jit_hw_reg *counter___0 ;
  jit_hw_reg *tmp___2 ;
  int tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char _amd64_rex_bits ;
  int tmp___5 ;
  int tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  long tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  x86_imm_buf imb ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___29 ;
  int tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  long tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___52 ;
  int tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  amd64_imm_buf imb___3 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  int shift ;
  long tmp___68 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___69 ;
  int tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___89 ;
  int tmp___90 ;
  int tmp___91 ;
  int tmp___92 ;
  unsigned char *tmp___93 ;
  int tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  long tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___115 ;
  int tmp___116 ;
  int tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char *tmp___119 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___122 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  unsigned char *tmp___125 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char *tmp___128 ;
  unsigned char *tmp___129 ;
  unsigned char *tmp___130 ;
  unsigned char *tmp___131 ;
  x86_imm_buf imb___10 ;
  unsigned char *tmp___132 ;
  unsigned char *tmp___133 ;
  unsigned char *tmp___134 ;
  unsigned char *tmp___135 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___136 ;
  int tmp___137 ;
  int tmp___138 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  unsigned char *tmp___141 ;
  unsigned char *tmp___142 ;
  long tmp___143 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  x86_imm_buf imb___11 ;
  unsigned char *tmp___146 ;
  unsigned char *tmp___147 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;
  unsigned char *tmp___150 ;
  unsigned char *tmp___151 ;
  unsigned char *tmp___152 ;
  unsigned char *tmp___153 ;
  unsigned char *tmp___154 ;
  unsigned char *tmp___155 ;
  x86_imm_buf imb___12 ;
  unsigned char *tmp___156 ;
  unsigned char *tmp___157 ;
  unsigned char *tmp___158 ;
  unsigned char *tmp___159 ;

  {
  tmp = malloc(sizeof(struct transfer_info ));
  tinf = (struct transfer_info *)tmp;
  tinf->sourcereg = (int )srcreg;
  tinf->destreg = (int )destreg;
  tinf->block_size = block_size;
  tmp___0 = jit_get_unused_reg_with_index(jit->reg_al, op, 0, 0);
  scrap = tmp___0;
  if (scrap) {
    tinf->scrapreg = scrap->id;
  } else {
    i = 0;
    while (i < (jit->reg_al)->gp_reg_cnt) {
      r = (jit->reg_al)->gp_regs + i;
      if ((jit_value )r->id != srcreg) {
        if ((jit_value )r->id != destreg) {
          if (! ((int )op->code & 2)) {
            if ((jit_value )r->id != cnt) {
              tinf->scrapreg = r->id;
              break;
            }
          }
        }
      }
      i ++;
    }
  }
  tinf->scrap_in_use = jit_reg_in_use(op, tinf->scrapreg, 0);
  if ((int )op->code & 2) {
    tmp___1 = jit_get_unused_reg_with_index(jit->reg_al, op, 0, 1);
    counter = tmp___1;
    if (counter) {
      tinf->counterreg = counter->id;
    } else {
      i___0 = 0;
      while (i___0 < (jit->reg_al)->gp_reg_cnt) {
        r___0 = (jit->reg_al)->gp_regs + i___0;
        if ((jit_value )r___0->id != srcreg) {
          if ((jit_value )r___0->id != destreg) {
            if (r___0->id != tinf->scrapreg) {
              tinf->counterreg = r___0->id;
              break;
            }
          }
        }
        i___0 ++;
      }
    }
    tinf->counter_in_use = jit_reg_in_use(op, tinf->counterreg, 0);
  } else {
    tmp___3 = jit_set_get(op->live_out, (int )op->arg[2]);
    if (tmp___3) {
      tmp___2 = jit_get_unused_reg_with_index(jit->reg_al, op, 0, 1);
      counter___0 = tmp___2;
      if (counter___0) {
        tinf->counterreg = counter___0->id;
      } else {
        tinf->counterreg = (int )cnt;
      }
      tinf->counter_in_use = jit_reg_in_use(op, tinf->counterreg, 0);
    } else {
      tinf->counterreg = (int )cnt;
      tinf->counter_in_use = 0;
    }
  }
  if (tinf->counter_in_use) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___5 = 8;
        } else {
          tmp___5 = 0;
        }
        if (tinf->counterreg > 7) {
          tmp___6 = 4;
        } else {
          tmp___6 = 0;
        }
        _amd64_rex_bits = (unsigned char )(tmp___5 | tmp___6);
        if ((int )_amd64_rex_bits != 0) {
          tmp___7 = jit->ip;
          (jit->ip) ++;
          *tmp___7 = (unsigned char )(64 | (int )_amd64_rex_bits);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___7 = jit->ip;
          (jit->ip) ++;
          *tmp___7 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___8 = jit->ip;
      (jit->ip) ++;
      *tmp___8 = (unsigned char)136;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___9 = jit->ip;
      (jit->ip) ++;
      *tmp___9 = (unsigned char)137;
      break;
      default: 
      tmp___10 = __builtin_expect(1L, 0L);
      if (tmp___10) {
        __assert_rtn("emit_transfer_init", "./jitter-amd64.c", 2975, "0");
      }
      }
      while (1) {
        if (- sizeof(void *) == 0UL) {
          while (1) {
            tmp___11 = jit->ip;
            (jit->ip) ++;
            *tmp___11 = (unsigned char )((((tinf->counterreg & 7) & 7) << 3) | 4);
            break;
          }
          while (1) {
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = (unsigned char )((4 << 3) | 4);
            break;
          }
        } else
        if ((int )(- sizeof(void *)) >= -128) {
          if ((int )(- sizeof(void *)) <= 127) {
            while (1) {
              tmp___13 = jit->ip;
              (jit->ip) ++;
              *tmp___13 = (unsigned char )(((1 << 6) | (((tinf->counterreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___14 = jit->ip;
              (jit->ip) ++;
              *tmp___14 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- sizeof(void *) & 255UL);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L;
          }
        } else {
          _L: /* CIL Label */ 
          while (1) {
            tmp___15 = jit->ip;
            (jit->ip) ++;
            *tmp___15 = (unsigned char )(((2 << 6) | (((tinf->counterreg & 7) & 7) << 3)) | 4);
            break;
          }
          while (1) {
            tmp___16 = jit->ip;
            (jit->ip) ++;
            *tmp___16 = (unsigned char )((4 << 3) | 4);
            break;
          }
          while (1) {
            imb.val = (int )(- sizeof(void *));
            tmp___17 = jit->ip;
            (jit->ip) ++;
            *tmp___17 = imb.b[0];
            tmp___18 = jit->ip;
            (jit->ip) ++;
            *tmp___18 = imb.b[1];
            tmp___19 = jit->ip;
            (jit->ip) ++;
            *tmp___19 = imb.b[2];
            tmp___20 = jit->ip;
            (jit->ip) ++;
            *tmp___20 = imb.b[3];
            break;
          }
        }
        break;
        if (- sizeof(void *) == 0UL) {
          while (1) {
            tmp___21 = jit->ip;
            (jit->ip) ++;
            *tmp___21 = (unsigned char )((((tinf->counterreg & 7) & 7) << 3) | 4);
            break;
          }
          break;
        }
        if ((int )(- sizeof(void *)) >= -128) {
          if ((int )(- sizeof(void *)) <= 127) {
            while (1) {
              tmp___22 = jit->ip;
              (jit->ip) ++;
              *tmp___22 = (unsigned char )(((1 << 6) | (((tinf->counterreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- sizeof(void *) & 255UL);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___0;
          }
        } else {
          _L___0: /* CIL Label */ 
          while (1) {
            tmp___23 = jit->ip;
            (jit->ip) ++;
            *tmp___23 = (unsigned char )(((2 << 6) | (((tinf->counterreg & 7) & 7) << 3)) | 4);
            break;
          }
          while (1) {
            imb___0.val = (int )(- sizeof(void *));
            tmp___24 = jit->ip;
            (jit->ip) ++;
            *tmp___24 = imb___0.b[0];
            tmp___25 = jit->ip;
            (jit->ip) ++;
            *tmp___25 = imb___0.b[1];
            tmp___26 = jit->ip;
            (jit->ip) ++;
            *tmp___26 = imb___0.b[2];
            tmp___27 = jit->ip;
            (jit->ip) ++;
            *tmp___27 = imb___0.b[3];
            break;
          }
        }
        break;
      }
      break;
    }
  }
  if (tinf->scrap_in_use) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___28 = jit->ip;
        (jit->ip) ++;
        *tmp___28 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___29 = 8;
        } else {
          tmp___29 = 0;
        }
        if (tinf->scrapreg > 7) {
          tmp___30 = 4;
        } else {
          tmp___30 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(tmp___29 | tmp___30);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___31 = jit->ip;
          (jit->ip) ++;
          *tmp___31 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___31 = jit->ip;
          (jit->ip) ++;
          *tmp___31 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___32 = jit->ip;
      (jit->ip) ++;
      *tmp___32 = (unsigned char)136;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___33 = jit->ip;
      (jit->ip) ++;
      *tmp___33 = (unsigned char)137;
      break;
      default: 
      tmp___34 = __builtin_expect(1L, 0L);
      if (tmp___34) {
        __assert_rtn("emit_transfer_init", "./jitter-amd64.c", 2976, "0");
      }
      }
      while (1) {
        if (- sizeof(void *) * 2UL == 0UL) {
          while (1) {
            tmp___35 = jit->ip;
            (jit->ip) ++;
            *tmp___35 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
            break;
          }
          while (1) {
            tmp___36 = jit->ip;
            (jit->ip) ++;
            *tmp___36 = (unsigned char )((4 << 3) | 4);
            break;
          }
        } else
        if ((int )(- sizeof(void *) * 2UL) >= -128) {
          if ((int )(- sizeof(void *) * 2UL) <= 127) {
            while (1) {
              tmp___37 = jit->ip;
              (jit->ip) ++;
              *tmp___37 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___38 = jit->ip;
              (jit->ip) ++;
              *tmp___38 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- sizeof(void *) * 2UL & 255UL);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___1;
          }
        } else {
          _L___1: /* CIL Label */ 
          while (1) {
            tmp___39 = jit->ip;
            (jit->ip) ++;
            *tmp___39 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
            break;
          }
          while (1) {
            tmp___40 = jit->ip;
            (jit->ip) ++;
            *tmp___40 = (unsigned char )((4 << 3) | 4);
            break;
          }
          while (1) {
            imb___1.val = (int )(- sizeof(void *) * 2UL);
            tmp___41 = jit->ip;
            (jit->ip) ++;
            *tmp___41 = imb___1.b[0];
            tmp___42 = jit->ip;
            (jit->ip) ++;
            *tmp___42 = imb___1.b[1];
            tmp___43 = jit->ip;
            (jit->ip) ++;
            *tmp___43 = imb___1.b[2];
            tmp___44 = jit->ip;
            (jit->ip) ++;
            *tmp___44 = imb___1.b[3];
            break;
          }
        }
        break;
        if (- sizeof(void *) * 2UL == 0UL) {
          while (1) {
            tmp___45 = jit->ip;
            (jit->ip) ++;
            *tmp___45 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
            break;
          }
          break;
        }
        if ((int )(- sizeof(void *) * 2UL) >= -128) {
          if ((int )(- sizeof(void *) * 2UL) <= 127) {
            while (1) {
              tmp___46 = jit->ip;
              (jit->ip) ++;
              *tmp___46 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- sizeof(void *) * 2UL & 255UL);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___2;
          }
        } else {
          _L___2: /* CIL Label */ 
          while (1) {
            tmp___47 = jit->ip;
            (jit->ip) ++;
            *tmp___47 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
            break;
          }
          while (1) {
            imb___2.val = (int )(- sizeof(void *) * 2UL);
            tmp___48 = jit->ip;
            (jit->ip) ++;
            *tmp___48 = imb___2.b[0];
            tmp___49 = jit->ip;
            (jit->ip) ++;
            *tmp___49 = imb___2.b[1];
            tmp___50 = jit->ip;
            (jit->ip) ++;
            *tmp___50 = imb___2.b[2];
            tmp___51 = jit->ip;
            (jit->ip) ++;
            *tmp___51 = imb___2.b[3];
            break;
          }
        }
        break;
      }
      break;
    }
  }
  if ((int )op->code & 2) {
    while (1) {
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___52 = 8;
        } else {
          tmp___52 = 0;
        }
        if (tinf->counterreg > 7) {
          tmp___53 = 1;
        } else {
          tmp___53 = 0;
        }
        _amd64_rex_bits___1 = (unsigned char )(tmp___52 | tmp___53);
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___54 = jit->ip;
          (jit->ip) ++;
          *tmp___54 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___54 = jit->ip;
          (jit->ip) ++;
          *tmp___54 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      tmp___55 = jit->ip;
      (jit->ip) ++;
      *tmp___55 = (unsigned char )(184 + (tinf->counterreg & 7));
      if (sizeof(void *) == 8UL) {
        while (1) {
          imb___3.val = (size_t )(cnt * (jit_value )block_size);
          tmp___56 = jit->ip;
          (jit->ip) ++;
          *tmp___56 = imb___3.b[0];
          tmp___57 = jit->ip;
          (jit->ip) ++;
          *tmp___57 = imb___3.b[1];
          tmp___58 = jit->ip;
          (jit->ip) ++;
          *tmp___58 = imb___3.b[2];
          tmp___59 = jit->ip;
          (jit->ip) ++;
          *tmp___59 = imb___3.b[3];
          tmp___60 = jit->ip;
          (jit->ip) ++;
          *tmp___60 = imb___3.b[4];
          tmp___61 = jit->ip;
          (jit->ip) ++;
          *tmp___61 = imb___3.b[5];
          tmp___62 = jit->ip;
          (jit->ip) ++;
          *tmp___62 = imb___3.b[6];
          tmp___63 = jit->ip;
          (jit->ip) ++;
          *tmp___63 = imb___3.b[7];
          break;
        }
      } else {
        while (1) {
          imb___4.val = (int )((size_t )(cnt * (jit_value )block_size));
          tmp___64 = jit->ip;
          (jit->ip) ++;
          *tmp___64 = imb___4.b[0];
          tmp___65 = jit->ip;
          (jit->ip) ++;
          *tmp___65 = imb___4.b[1];
          tmp___66 = jit->ip;
          (jit->ip) ++;
          *tmp___66 = imb___4.b[2];
          tmp___67 = jit->ip;
          (jit->ip) ++;
          *tmp___67 = imb___4.b[3];
          break;
        }
      }
      break;
    }
  } else
  if ((jit_value )tinf->counterreg != cnt) {
    goto _L___3;
  } else
  if (block_size > 1) {
    _L___3: /* CIL Label */ 
    if (block_size == 1) {
      shift = 0;
    } else
    if (block_size == 2) {
      shift = 1;
    } else
    if (block_size == 4) {
      shift = 2;
    } else
    if (block_size == 8) {
      shift = 3;
    } else {
      tmp___68 = __builtin_expect(1L, 0L);
      if (tmp___68) {
        __assert_rtn("emit_transfer_init", "./jitter-amd64.c", 2985, "0");
      }
    }
    while (1) {
      while (1) {
        if (tinf->counterreg > 7) {
          tmp___69 = 4;
        } else {
          tmp___69 = 0;
        }
        if (cnt > 7L) {
          tmp___70 = 2;
        } else {
          tmp___70 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )((8 | tmp___69) | tmp___70);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___71 = jit->ip;
          (jit->ip) ++;
          *tmp___71 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      while (1) {
        tmp___72 = jit->ip;
        (jit->ip) ++;
        *tmp___72 = (unsigned char)141;
        while (1) {
          while (1) {
            tmp___73 = jit->ip;
            (jit->ip) ++;
            *tmp___73 = (unsigned char )((((tinf->counterreg & 7) & 7) << 3) | 4);
            break;
          }
          while (1) {
            tmp___74 = jit->ip;
            (jit->ip) ++;
            *tmp___74 = (unsigned char )(((long )((shift & 3) << 6) | (((cnt & 7L) & 7L) << 3)) | 5L);
            break;
          }
          while (1) {
            imb___5.val = 0;
            tmp___75 = jit->ip;
            (jit->ip) ++;
            *tmp___75 = imb___5.b[0];
            tmp___76 = jit->ip;
            (jit->ip) ++;
            *tmp___76 = imb___5.b[1];
            tmp___77 = jit->ip;
            (jit->ip) ++;
            *tmp___77 = imb___5.b[2];
            tmp___78 = jit->ip;
            (jit->ip) ++;
            *tmp___78 = imb___5.b[3];
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  }
  tinf->loop_addr = jit->ip;
  op->addendum = (void *)tinf;
  if ((unsigned long )block_size == sizeof(void *)) {
    while (1) {
      while (1) {
        if (block_size > 4) {
          tmp___89 = 8;
        } else {
          tmp___89 = 0;
        }
        if (tinf->scrapreg > 7) {
          tmp___90 = 4;
        } else {
          tmp___90 = 0;
        }
        if (tinf->counterreg > 7) {
          tmp___91 = 2;
        } else {
          tmp___91 = 0;
        }
        if (srcreg > 7L) {
          tmp___92 = 1;
        } else {
          tmp___92 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )(((tmp___89 | tmp___90) | tmp___91) | tmp___92);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___93 = jit->ip;
          (jit->ip) ++;
          *tmp___93 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        } else
        if (block_size == 1) {
          tmp___93 = jit->ip;
          (jit->ip) ++;
          *tmp___93 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      while (1) {
        if (block_size == 8) {
          tmp___94 = 4;
        } else {
          tmp___94 = block_size;
        }
        switch (tmp___94) {
        case 1: 
        tmp___95 = jit->ip;
        (jit->ip) ++;
        *tmp___95 = (unsigned char)138;
        break;
        case 2: 
        tmp___96 = jit->ip;
        (jit->ip) ++;
        *tmp___96 = (unsigned char)102;
        case 4: 
        tmp___97 = jit->ip;
        (jit->ip) ++;
        *tmp___97 = (unsigned char)139;
        break;
        default: 
        tmp___98 = __builtin_expect(1L, 0L);
        if (tmp___98) {
          __assert_rtn("emit_transfer_init", "./jitter-amd64.c", 2994, "0");
        }
        }
        while (1) {
          if ((srcreg & 7L) == -1L) {
            while (1) {
              tmp___99 = jit->ip;
              (jit->ip) ++;
              *tmp___99 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___100 = jit->ip;
              (jit->ip) ++;
              *tmp___100 = (unsigned char )((((tinf->counterreg & 7) & 7) << 3) | 5);
              break;
            }
            while (1) {
              imb___7.val = - block_size;
              tmp___101 = jit->ip;
              (jit->ip) ++;
              *tmp___101 = imb___7.b[0];
              tmp___102 = jit->ip;
              (jit->ip) ++;
              *tmp___102 = imb___7.b[1];
              tmp___103 = jit->ip;
              (jit->ip) ++;
              *tmp___103 = imb___7.b[2];
              tmp___104 = jit->ip;
              (jit->ip) ++;
              *tmp___104 = imb___7.b[3];
              break;
            }
          } else
          if (- block_size == 0) {
            if ((srcreg & 7L) != 5L) {
              while (1) {
                tmp___105 = jit->ip;
                (jit->ip) ++;
                *tmp___105 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___106 = jit->ip;
                (jit->ip) ++;
                *tmp___106 = (unsigned char )((long )((((tinf->counterreg & 7) & 7) & 7) << 3) | (((srcreg & 7L) & 7L) & 7L));
                break;
              }
            } else {
              goto _L___5;
            }
          } else
          _L___5: /* CIL Label */ 
          if (- block_size >= -128) {
            if (- block_size <= 127) {
              while (1) {
                tmp___107 = jit->ip;
                (jit->ip) ++;
                *tmp___107 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___108 = jit->ip;
                (jit->ip) ++;
                *tmp___108 = (unsigned char )((long )((((tinf->counterreg & 7) & 7) & 7) << 3) | (((srcreg & 7L) & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- block_size & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___4;
            }
          } else {
            _L___4: /* CIL Label */ 
            while (1) {
              tmp___109 = jit->ip;
              (jit->ip) ++;
              *tmp___109 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___110 = jit->ip;
              (jit->ip) ++;
              *tmp___110 = (unsigned char )((long )((((tinf->counterreg & 7) & 7) & 7) << 3) | (((srcreg & 7L) & 7L) & 7L));
              break;
            }
            while (1) {
              imb___8.val = - block_size;
              tmp___111 = jit->ip;
              (jit->ip) ++;
              *tmp___111 = imb___8.b[0];
              tmp___112 = jit->ip;
              (jit->ip) ++;
              *tmp___112 = imb___8.b[1];
              tmp___113 = jit->ip;
              (jit->ip) ++;
              *tmp___113 = imb___8.b[2];
              tmp___114 = jit->ip;
              (jit->ip) ++;
              *tmp___114 = imb___8.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      if (block_size == 4) {
        while (1) {
          while (1) {
            if (tinf->scrapreg > 7) {
              tmp___115 = 4;
            } else {
              tmp___115 = 0;
            }
            if (tinf->counterreg > 7) {
              tmp___116 = 2;
            } else {
              tmp___116 = 0;
            }
            if (srcreg > 7L) {
              tmp___117 = 1;
            } else {
              tmp___117 = 0;
            }
            _amd64_rex_bits___4 = (unsigned char )(((8 | tmp___115) | tmp___116) | tmp___117);
            if ((int )_amd64_rex_bits___4 != 0) {
              tmp___118 = jit->ip;
              (jit->ip) ++;
              *tmp___118 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
            }
            break;
          }
          tmp___119 = jit->ip;
          (jit->ip) ++;
          *tmp___119 = (unsigned char)99;
          while (1) {
            if ((srcreg & 7L) == -1L) {
              while (1) {
                tmp___120 = jit->ip;
                (jit->ip) ++;
                *tmp___120 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___121 = jit->ip;
                (jit->ip) ++;
                *tmp___121 = (unsigned char )((((tinf->counterreg & 7) & 7) << 3) | 5);
                break;
              }
              while (1) {
                imb___9.val = - block_size;
                tmp___122 = jit->ip;
                (jit->ip) ++;
                *tmp___122 = imb___9.b[0];
                tmp___123 = jit->ip;
                (jit->ip) ++;
                *tmp___123 = imb___9.b[1];
                tmp___124 = jit->ip;
                (jit->ip) ++;
                *tmp___124 = imb___9.b[2];
                tmp___125 = jit->ip;
                (jit->ip) ++;
                *tmp___125 = imb___9.b[3];
                break;
              }
            } else
            if (- block_size == 0) {
              if ((srcreg & 7L) != 5L) {
                while (1) {
                  tmp___126 = jit->ip;
                  (jit->ip) ++;
                  *tmp___126 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___127 = jit->ip;
                  (jit->ip) ++;
                  *tmp___127 = (unsigned char )((long )((((tinf->counterreg & 7) & 7) & 7) << 3) | (((srcreg & 7L) & 7L) & 7L));
                  break;
                }
              } else {
                goto _L___7;
              }
            } else
            _L___7: /* CIL Label */ 
            if (- block_size >= -128) {
              if (- block_size <= 127) {
                while (1) {
                  tmp___128 = jit->ip;
                  (jit->ip) ++;
                  *tmp___128 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___129 = jit->ip;
                  (jit->ip) ++;
                  *tmp___129 = (unsigned char )((long )((((tinf->counterreg & 7) & 7) & 7) << 3) | (((srcreg & 7L) & 7L) & 7L));
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(- block_size & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___6;
              }
            } else {
              _L___6: /* CIL Label */ 
              while (1) {
                tmp___130 = jit->ip;
                (jit->ip) ++;
                *tmp___130 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___131 = jit->ip;
                (jit->ip) ++;
                *tmp___131 = (unsigned char )((long )((((tinf->counterreg & 7) & 7) & 7) << 3) | (((srcreg & 7L) & 7L) & 7L));
                break;
              }
              while (1) {
                imb___10.val = - block_size;
                tmp___132 = jit->ip;
                (jit->ip) ++;
                *tmp___132 = imb___10.b[0];
                tmp___133 = jit->ip;
                (jit->ip) ++;
                *tmp___133 = imb___10.b[1];
                tmp___134 = jit->ip;
                (jit->ip) ++;
                *tmp___134 = imb___10.b[2];
                tmp___135 = jit->ip;
                (jit->ip) ++;
                *tmp___135 = imb___10.b[3];
                break;
              }
            }
            break;
          }
          break;
        }
        break;
      }
      while (1) {
        if (tinf->scrapreg > 7) {
          tmp___136 = 4;
        } else {
          tmp___136 = 0;
        }
        if (tinf->counterreg > 7) {
          tmp___137 = 2;
        } else {
          tmp___137 = 0;
        }
        if (srcreg > 7L) {
          tmp___138 = 1;
        } else {
          tmp___138 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(((8 | tmp___136) | tmp___137) | tmp___138);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___139 = jit->ip;
          (jit->ip) ++;
          *tmp___139 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      tmp___140 = jit->ip;
      (jit->ip) ++;
      *tmp___140 = (unsigned char)15;
      switch (block_size) {
      case 1: 
      tmp___141 = jit->ip;
      (jit->ip) ++;
      *tmp___141 = (unsigned char)190;
      break;
      case 2: 
      tmp___142 = jit->ip;
      (jit->ip) ++;
      *tmp___142 = (unsigned char)191;
      break;
      default: 
      tmp___143 = __builtin_expect(1L, 0L);
      if (tmp___143) {
        __assert_rtn("emit_transfer_init", "./jitter-amd64.c", 2995, "0");
      }
      }
      while (1) {
        if ((srcreg & 7L) == -1L) {
          while (1) {
            tmp___144 = jit->ip;
            (jit->ip) ++;
            *tmp___144 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
            break;
          }
          while (1) {
            tmp___145 = jit->ip;
            (jit->ip) ++;
            *tmp___145 = (unsigned char )((((tinf->counterreg & 7) & 7) << 3) | 5);
            break;
          }
          while (1) {
            imb___11.val = - block_size;
            tmp___146 = jit->ip;
            (jit->ip) ++;
            *tmp___146 = imb___11.b[0];
            tmp___147 = jit->ip;
            (jit->ip) ++;
            *tmp___147 = imb___11.b[1];
            tmp___148 = jit->ip;
            (jit->ip) ++;
            *tmp___148 = imb___11.b[2];
            tmp___149 = jit->ip;
            (jit->ip) ++;
            *tmp___149 = imb___11.b[3];
            break;
          }
        } else
        if (- block_size == 0) {
          if ((srcreg & 7L) != 5L) {
            while (1) {
              tmp___150 = jit->ip;
              (jit->ip) ++;
              *tmp___150 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___151 = jit->ip;
              (jit->ip) ++;
              *tmp___151 = (unsigned char )((long )((((tinf->counterreg & 7) & 7) & 7) << 3) | (((srcreg & 7L) & 7L) & 7L));
              break;
            }
          } else {
            goto _L___9;
          }
        } else
        _L___9: /* CIL Label */ 
        if (- block_size >= -128) {
          if (- block_size <= 127) {
            while (1) {
              tmp___152 = jit->ip;
              (jit->ip) ++;
              *tmp___152 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___153 = jit->ip;
              (jit->ip) ++;
              *tmp___153 = (unsigned char )((long )((((tinf->counterreg & 7) & 7) & 7) << 3) | (((srcreg & 7L) & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- block_size & 255);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___8;
          }
        } else {
          _L___8: /* CIL Label */ 
          while (1) {
            tmp___154 = jit->ip;
            (jit->ip) ++;
            *tmp___154 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
            break;
          }
          while (1) {
            tmp___155 = jit->ip;
            (jit->ip) ++;
            *tmp___155 = (unsigned char )((long )((((tinf->counterreg & 7) & 7) & 7) << 3) | (((srcreg & 7L) & 7L) & 7L));
            break;
          }
          while (1) {
            imb___12.val = - block_size;
            tmp___156 = jit->ip;
            (jit->ip) ++;
            *tmp___156 = imb___12.b[0];
            tmp___157 = jit->ip;
            (jit->ip) ++;
            *tmp___157 = imb___12.b[1];
            tmp___158 = jit->ip;
            (jit->ip) ++;
            *tmp___158 = imb___12.b[2];
            tmp___159 = jit->ip;
            (jit->ip) ++;
            *tmp___159 = imb___12.b[3];
            break;
          }
        }
        break;
      }
      break;
    }
  }
  return;
}
}
static int generic_push_caller_saved_regs(struct jit *jit , jit_op *op , int reg_count ,
                                          jit_hw_reg *regs , int fp , jit_hw_reg *skip_reg ,
                                          int stack_offset ) 
{ 
  jit_value reg ;
  int skip_reg_id ;
  int tmp ;
  int i ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp___0 ;
  int tmp___1 ;

  {
  if (skip_reg) {
    tmp = skip_reg->id;
  } else {
    tmp = -1;
  }
  skip_reg_id = tmp;
  i = 0;
  while (i < reg_count) {
    if ((regs + i)->id == skip_reg_id) {
      goto __Cont;
    } else
    if ((regs + i)->callee_saved) {
      goto __Cont;
    }
    tmp___0 = rmap_is_associated(op->regmap, (regs + i)->id, fp, & reg);
    hreg = tmp___0;
    if (hreg) {
      tmp___1 = jit_set_get(op->live_in, (int )reg);
      if (tmp___1) {
        stack_offset = emit_push_reg(jit, hreg, stack_offset);
      }
    }
    __Cont: /* CIL Label */ 
    i ++;
  }
  return (stack_offset);
}
}
__inline static void jit_op_prepend(jit_op *op , jit_op *prepended ) 
{ 


  {
  prepended->prev = op->prev;
  if ((unsigned long )op->prev != (unsigned long )((void *)0)) {
    (op->prev)->next = prepended;
  }
  prepended->next = op;
  op->prev = prepended;
  return;
}
}
void jit_free(struct jit *jit ) 
{ 
  jit_op *tmp ;

  {
  jit_reg_allocator_free(jit->reg_al);
  tmp = jit_op_first(jit->ops);
  free_ops(tmp);
  free_labels(jit->labels);
  if (jit->buf) {
    if (jit->mmaped_buf) {
      munmap((void *)jit->buf, (size_t )jit->buf_capacity);
    } else {
      free((void *)jit->buf);
    }
  }
  free((void *)jit);
  return;
}
}
__inline static void emit_set_fparg(struct jit *jit , struct jit_out_arg *arg ) 
{ 
  int sreg ;
  int reg ;
  long value ;
  int pos ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___55 ;
  int tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___62 ;
  int tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  int tmp___68 ;
  float val ;
  unsigned int tmp___69 ;
  unsigned long tmp___70 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  amd64_imm_buf imb___5 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  amd64_imm_buf imb___7 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;

  {
  reg = (*((jit->reg_al)->fp_arg_regs + arg->argpos))->id;
  value = arg->value.generic;
  if (arg->isreg) {
    tmp___68 = is_spilled(value, jit->prepared_args.op, & sreg);
    if (tmp___68) {
      tmp = GET_REG_POS(jit, (int )value);
      pos = tmp;
      if ((unsigned long )arg->size == sizeof(float )) {
        while (1) {
          tmp___0 = jit->ip;
          (jit->ip) ++;
          *tmp___0 = (unsigned char)242;
          while (1) {
            if (reg > 7) {
              tmp___1 = 4;
            } else {
              tmp___1 = 0;
            }
            _amd64_rex_bits = (unsigned char )tmp___1;
            if ((int )_amd64_rex_bits != 0) {
              tmp___2 = jit->ip;
              (jit->ip) ++;
              *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___3 = jit->ip;
          (jit->ip) ++;
          *tmp___3 = (unsigned char)15;
          tmp___4 = jit->ip;
          (jit->ip) ++;
          *tmp___4 = (unsigned char)90;
          while (1) {
            while (1) {
              if (0) {
                if (pos == 0) {
                  while (1) {
                    tmp___10 = jit->ip;
                    (jit->ip) ++;
                    *tmp___10 = (unsigned char )((((reg & 7) & 7) << 3) | 4);
                    break;
                  }
                  while (1) {
                    tmp___11 = jit->ip;
                    (jit->ip) ++;
                    *tmp___11 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                } else
                if (pos >= -128) {
                  if (pos <= 127) {
                    while (1) {
                      tmp___12 = jit->ip;
                      (jit->ip) ++;
                      *tmp___12 = (unsigned char )(((1 << 6) | (((reg & 7) & 7) << 3)) | 4);
                      break;
                    }
                    while (1) {
                      tmp___13 = jit->ip;
                      (jit->ip) ++;
                      *tmp___13 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(pos & 255);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L;
                  }
                } else {
                  _L: /* CIL Label */ 
                  while (1) {
                    tmp___14 = jit->ip;
                    (jit->ip) ++;
                    *tmp___14 = (unsigned char )(((2 << 6) | (((reg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___15 = jit->ip;
                    (jit->ip) ++;
                    *tmp___15 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    imb___0.val = pos;
                    tmp___16 = jit->ip;
                    (jit->ip) ++;
                    *tmp___16 = imb___0.b[0];
                    tmp___17 = jit->ip;
                    (jit->ip) ++;
                    *tmp___17 = imb___0.b[1];
                    tmp___18 = jit->ip;
                    (jit->ip) ++;
                    *tmp___18 = imb___0.b[2];
                    tmp___19 = jit->ip;
                    (jit->ip) ++;
                    *tmp___19 = imb___0.b[3];
                    break;
                  }
                }
                break;
              }
              if (pos == 0) {

              }
              if (pos >= -128) {
                if (pos <= 127) {
                  while (1) {
                    tmp___21 = jit->ip;
                    (jit->ip) ++;
                    *tmp___21 = (unsigned char )(((1 << 6) | (((reg & 7) & 7) << 3)) | 5);
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(pos & 255);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___0;
                }
              } else {
                _L___0: /* CIL Label */ 
                while (1) {
                  tmp___22 = jit->ip;
                  (jit->ip) ++;
                  *tmp___22 = (unsigned char )(((2 << 6) | (((reg & 7) & 7) << 3)) | 5);
                  break;
                }
                while (1) {
                  imb___1.val = pos;
                  tmp___23 = jit->ip;
                  (jit->ip) ++;
                  *tmp___23 = imb___1.b[0];
                  tmp___24 = jit->ip;
                  (jit->ip) ++;
                  *tmp___24 = imb___1.b[1];
                  tmp___25 = jit->ip;
                  (jit->ip) ++;
                  *tmp___25 = imb___1.b[2];
                  tmp___26 = jit->ip;
                  (jit->ip) ++;
                  *tmp___26 = imb___1.b[3];
                  break;
                }
              }
              break;
            }
            break;
          }
          break;
        }
      } else {
        while (1) {
          tmp___27 = jit->ip;
          (jit->ip) ++;
          *tmp___27 = (unsigned char)102;
          while (1) {
            if (reg > 7) {
              tmp___28 = 4;
            } else {
              tmp___28 = 0;
            }
            _amd64_rex_bits___0 = (unsigned char )tmp___28;
            if ((int )_amd64_rex_bits___0 != 0) {
              tmp___29 = jit->ip;
              (jit->ip) ++;
              *tmp___29 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
            }
            break;
          }
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = (unsigned char)15;
          tmp___31 = jit->ip;
          (jit->ip) ++;
          *tmp___31 = (unsigned char)18;
          while (1) {
            while (1) {
              if (0) {
                if (pos == 0) {
                  while (1) {
                    tmp___37 = jit->ip;
                    (jit->ip) ++;
                    *tmp___37 = (unsigned char )((((reg & 7) & 7) << 3) | 4);
                    break;
                  }
                  while (1) {
                    tmp___38 = jit->ip;
                    (jit->ip) ++;
                    *tmp___38 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                } else
                if (pos >= -128) {
                  if (pos <= 127) {
                    while (1) {
                      tmp___39 = jit->ip;
                      (jit->ip) ++;
                      *tmp___39 = (unsigned char )(((1 << 6) | (((reg & 7) & 7) << 3)) | 4);
                      break;
                    }
                    while (1) {
                      tmp___40 = jit->ip;
                      (jit->ip) ++;
                      *tmp___40 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(pos & 255);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L___1;
                  }
                } else {
                  _L___1: /* CIL Label */ 
                  while (1) {
                    tmp___41 = jit->ip;
                    (jit->ip) ++;
                    *tmp___41 = (unsigned char )(((2 << 6) | (((reg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___42 = jit->ip;
                    (jit->ip) ++;
                    *tmp___42 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    imb___3.val = pos;
                    tmp___43 = jit->ip;
                    (jit->ip) ++;
                    *tmp___43 = imb___3.b[0];
                    tmp___44 = jit->ip;
                    (jit->ip) ++;
                    *tmp___44 = imb___3.b[1];
                    tmp___45 = jit->ip;
                    (jit->ip) ++;
                    *tmp___45 = imb___3.b[2];
                    tmp___46 = jit->ip;
                    (jit->ip) ++;
                    *tmp___46 = imb___3.b[3];
                    break;
                  }
                }
                break;
              }
              if (pos == 0) {

              }
              if (pos >= -128) {
                if (pos <= 127) {
                  while (1) {
                    tmp___48 = jit->ip;
                    (jit->ip) ++;
                    *tmp___48 = (unsigned char )(((1 << 6) | (((reg & 7) & 7) << 3)) | 5);
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(pos & 255);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___2;
                }
              } else {
                _L___2: /* CIL Label */ 
                while (1) {
                  tmp___49 = jit->ip;
                  (jit->ip) ++;
                  *tmp___49 = (unsigned char )(((2 << 6) | (((reg & 7) & 7) << 3)) | 5);
                  break;
                }
                while (1) {
                  imb___4.val = pos;
                  tmp___50 = jit->ip;
                  (jit->ip) ++;
                  *tmp___50 = imb___4.b[0];
                  tmp___51 = jit->ip;
                  (jit->ip) ++;
                  *tmp___51 = imb___4.b[1];
                  tmp___52 = jit->ip;
                  (jit->ip) ++;
                  *tmp___52 = imb___4.b[2];
                  tmp___53 = jit->ip;
                  (jit->ip) ++;
                  *tmp___53 = imb___4.b[3];
                  break;
                }
              }
              break;
            }
            break;
          }
          break;
        }
      }
    } else
    if ((unsigned long )arg->size == sizeof(float )) {
      while (1) {
        tmp___54 = jit->ip;
        (jit->ip) ++;
        *tmp___54 = (unsigned char)242;
        while (1) {
          if (reg > 7) {
            tmp___55 = 4;
          } else {
            tmp___55 = 0;
          }
          if (sreg > 7) {
            tmp___56 = 1;
          } else {
            tmp___56 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )(tmp___55 | tmp___56);
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___57 = jit->ip;
            (jit->ip) ++;
            *tmp___57 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___58 = jit->ip;
        (jit->ip) ++;
        *tmp___58 = (unsigned char)15;
        tmp___59 = jit->ip;
        (jit->ip) ++;
        *tmp___59 = (unsigned char)90;
        while (1) {
          while (1) {
            tmp___60 = jit->ip;
            (jit->ip) ++;
            *tmp___60 = (unsigned char )(((3 << 6) | ((reg & 7) << 3)) | (sreg & 7));
            break;
          }
          break;
        }
        break;
      }
    } else
    if (reg != sreg) {
      while (1) {
        tmp___61 = jit->ip;
        (jit->ip) ++;
        *tmp___61 = (unsigned char)242;
        while (1) {
          if (reg > 7) {
            tmp___62 = 4;
          } else {
            tmp___62 = 0;
          }
          if (sreg > 7) {
            tmp___63 = 1;
          } else {
            tmp___63 = 0;
          }
          _amd64_rex_bits___2 = (unsigned char )(tmp___62 | tmp___63);
          if ((int )_amd64_rex_bits___2 != 0) {
            tmp___64 = jit->ip;
            (jit->ip) ++;
            *tmp___64 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
          }
          break;
        }
        tmp___65 = jit->ip;
        (jit->ip) ++;
        *tmp___65 = (unsigned char)15;
        tmp___66 = jit->ip;
        (jit->ip) ++;
        *tmp___66 = (unsigned char)16;
        while (1) {
          while (1) {
            tmp___67 = jit->ip;
            (jit->ip) ++;
            *tmp___67 = (unsigned char )(((3 << 6) | ((reg & 7) << 3)) | (sreg & 7));
            break;
          }
          break;
        }
        break;
      }
    }
  } else
  if ((unsigned long )arg->size == sizeof(float )) {
    val = (float )arg->value.fp;
    tmp___70 = __builtin_object_size((void *)(& tmp___69), 0);
    __builtin___memcpy_chk((void *)(& tmp___69), (void const   *)(& val), sizeof(float ),
                           tmp___70);
    while (1) {
      while (1) {
        _amd64_rex_bits___3 = (unsigned char)0;
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___71 = jit->ip;
          (jit->ip) ++;
          *tmp___71 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      tmp___72 = jit->ip;
      (jit->ip) ++;
      *tmp___72 = (unsigned char)184;
      while (1) {
        imb___6.val = (int )((size_t )tmp___69);
        tmp___81 = jit->ip;
        (jit->ip) ++;
        *tmp___81 = imb___6.b[0];
        tmp___82 = jit->ip;
        (jit->ip) ++;
        *tmp___82 = imb___6.b[1];
        tmp___83 = jit->ip;
        (jit->ip) ++;
        *tmp___83 = imb___6.b[2];
        tmp___84 = jit->ip;
        (jit->ip) ++;
        *tmp___84 = imb___6.b[3];
        break;
      }
      break;
    }
    while (1) {
      tmp___85 = jit->ip;
      (jit->ip) ++;
      *tmp___85 = (unsigned char)102;
      while (1) {
        if (reg > 7) {
          tmp___86 = 4;
        } else {
          tmp___86 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )tmp___86;
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___87 = jit->ip;
          (jit->ip) ++;
          *tmp___87 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      tmp___88 = jit->ip;
      (jit->ip) ++;
      *tmp___88 = (unsigned char)15;
      tmp___89 = jit->ip;
      (jit->ip) ++;
      *tmp___89 = (unsigned char)110;
      while (1) {
        while (1) {
          tmp___90 = jit->ip;
          (jit->ip) ++;
          *tmp___90 = (unsigned char )((3 << 6) | ((reg & 7) << 3));
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      while (1) {
        _amd64_rex_bits___5 = (unsigned char)8;
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___91 = jit->ip;
          (jit->ip) ++;
          *tmp___91 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      tmp___92 = jit->ip;
      (jit->ip) ++;
      *tmp___92 = (unsigned char)184;
      while (1) {
        imb___7.val = (size_t )value;
        tmp___93 = jit->ip;
        (jit->ip) ++;
        *tmp___93 = imb___7.b[0];
        tmp___94 = jit->ip;
        (jit->ip) ++;
        *tmp___94 = imb___7.b[1];
        tmp___95 = jit->ip;
        (jit->ip) ++;
        *tmp___95 = imb___7.b[2];
        tmp___96 = jit->ip;
        (jit->ip) ++;
        *tmp___96 = imb___7.b[3];
        tmp___97 = jit->ip;
        (jit->ip) ++;
        *tmp___97 = imb___7.b[4];
        tmp___98 = jit->ip;
        (jit->ip) ++;
        *tmp___98 = imb___7.b[5];
        tmp___99 = jit->ip;
        (jit->ip) ++;
        *tmp___99 = imb___7.b[6];
        tmp___100 = jit->ip;
        (jit->ip) ++;
        *tmp___100 = imb___7.b[7];
        break;
      }
      break;
    }
    while (1) {
      tmp___105 = jit->ip;
      (jit->ip) ++;
      *tmp___105 = (unsigned char)102;
      while (1) {
        if (reg > 7) {
          tmp___106 = 4;
        } else {
          tmp___106 = 0;
        }
        _amd64_rex_bits___6 = (unsigned char )(8 | tmp___106);
        if ((int )_amd64_rex_bits___6 != 0) {
          tmp___107 = jit->ip;
          (jit->ip) ++;
          *tmp___107 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
        }
        break;
      }
      tmp___108 = jit->ip;
      (jit->ip) ++;
      *tmp___108 = (unsigned char)15;
      tmp___109 = jit->ip;
      (jit->ip) ++;
      *tmp___109 = (unsigned char)110;
      while (1) {
        while (1) {
          tmp___110 = jit->ip;
          (jit->ip) ++;
          *tmp___110 = (unsigned char )((3 << 6) | ((reg & 7) << 3));
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
__inline extern int isspace(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 16384UL);
  return (tmp);
}
}
static void jit_dump_ops_combined(struct jit *jit , jit_tree *labels ) 
{ 
  FILE *f ;
  FILE *tmp ;
  jit_op *op ;
  jit_op *tmp___0 ;

  {
  tmp = open_disasm();
  f = tmp;
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".addr=%lx\n",
          (unsigned long )jit->buf);
  tmp___0 = jit_op_first(jit->ops);
  op = tmp___0;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    op = print_combined_op(f, jit, op, labels);
    if (! op) {
      break;
    }
    op = op->next;
  }
  fclose(f);
  wait((int *)((void *)0));
  return;
}
}
static int join_muli_ori(jit_op *op , jit_op *nextop ) 
{ 
  int tmp ;
  int max ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  tmp = is_suitable_mul(op);
  if (! tmp) {
    return (0);
  }
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 552U) {
    max = (int )op->arg[2];
    tmp___1 = max;
  } else {
    tmp___0 = pow2((int )op->arg[2]);
    tmp___1 = tmp___0;
  }
  max = tmp___1;
  if (nextop->arg[2] > 0L) {
    if (nextop->arg[2] < (jit_value )max) {
      tmp___2 = make_addmuli(op, nextop);
      return (tmp___2);
    } else {
      return (0);
    }
  } else {
    return (0);
  }
}
}
__inline extern int tolower(int _c ) 
{ 
  __darwin_ct_rune_t tmp ;

  {
  tmp = __tolower(_c);
  return (tmp);
}
}
static void compiler_based_debugger(struct jit *jit ) 
{ 
  char obj_file_name[12] ;
  int obj_file_fd ;
  int tmp ;
  char *cmd1_fmt ;
  char *cmd2_fmt ;
  size_t tmp___0 ;
  size_t tmp___1 ;
  char *cmd1 ;
  unsigned long __lengthofcmd1 ;
  void *tmp___2 ;
  size_t tmp___3 ;
  size_t tmp___4 ;
  char *cmd2 ;
  unsigned long __lengthofcmd2 ;
  void *tmp___5 ;
  unsigned long tmp___6 ;
  FILE *f ;
  FILE *tmp___7 ;
  int size ;
  int i ;
  unsigned long tmp___8 ;

  {
  obj_file_name[0] = (char )'m';
  obj_file_name[1] = (char )'y';
  obj_file_name[2] = (char )'j';
  obj_file_name[3] = (char )'i';
  obj_file_name[4] = (char )'t';
  obj_file_name[5] = (char )'X';
  obj_file_name[6] = (char )'X';
  obj_file_name[7] = (char )'X';
  obj_file_name[8] = (char )'X';
  obj_file_name[9] = (char )'X';
  obj_file_name[10] = (char )'X';
  obj_file_name[11] = (char )'\000';
  tmp = mkstemp(obj_file_name);
  obj_file_fd = tmp;
  cmd1_fmt = (char *)"cc -x assembler -c -o %s -";
  cmd2_fmt = (char *)"otool -tvVj %s";
  tmp___0 = strlen((char const   *)cmd1_fmt);
  tmp___1 = strlen((char const   *)(obj_file_name));
  __lengthofcmd1 = (tmp___0 + tmp___1) + 1UL;
  tmp___2 = __builtin_alloca(sizeof(*cmd1) * __lengthofcmd1);
  cmd1 = (char *)tmp___2;
  tmp___3 = strlen((char const   *)cmd2_fmt);
  tmp___4 = strlen((char const   *)(obj_file_name));
  __lengthofcmd2 = (tmp___3 + tmp___4) + 1UL;
  tmp___5 = __builtin_alloca(sizeof(*cmd2) * __lengthofcmd2);
  cmd2 = (char *)tmp___5;
  tmp___6 = __builtin_object_size((void *)cmd1, 1);
  __builtin___sprintf_chk(cmd1, 0, tmp___6, (char const   *)cmd1_fmt, obj_file_name);
  tmp___7 = popen((char const   *)cmd1, "w");
  f = tmp___7;
  size = (int )(jit->ip - jit->buf);
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".text\n.align 4\n.globl main\n\nmain:\n");
  i = 0;
  while (i < size) {
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".byte 0x%x\n",
            (unsigned int )*(jit->buf + i));
    i ++;
  }
  pclose(f);
  tmp___8 = __builtin_object_size((void *)cmd2, 1);
  __builtin___sprintf_chk(cmd2, 0, tmp___8, (char const   *)cmd2_fmt, obj_file_name);
  system((char const   *)cmd2);
  close(obj_file_fd);
  unlink((char const   *)(obj_file_name));
  return;
}
}
static void copy_reg_to_array(jit_tree_key key , jit_tree_value value , void *target ) 
{ 
  struct copy_target *t ;

  {
  t = (struct copy_target *)target;
  *(t->target + t->index) = key;
  (t->index) ++;
  return;
}
}
__inline static void jit_set_add(jit_set *s , int value ) 
{ 


  {
  s->root = jit_tree_insert(s->root, (jit_tree_key )value, (void *)1, (int *)((void *)0));
  return;
}
}
__inline static jit_tree *jit_tree_clone(jit_tree *root ) 
{ 
  jit_tree *tmp ;

  {
  tmp = jit_tree_addall((jit_tree *)((void *)0), root);
  return (tmp);
}
}
static int check_register_types(struct jit *jit , jit_op *op , char *msg_buf ) 
{ 
  struct jit_func_info *info ;
  struct jit_func_info *tmp ;

  {
  switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
  case 728U: 
  tmp = jit_current_func_info(jit);
  info = tmp;
  if ((unsigned int )(info->args + op->arg[1])->type == 2U) {
    if (((int )op->spec & 3) != 1) {
      if (((int )op->spec & 3) != 3) {
        return (0);
      } else {
        goto _L;
      }
    } else
    _L: /* CIL Label */ 
    if ((op->arg[0] & 1L) == 1L) {
      return (0);
    }
  } else
  if (((int )op->spec & 3) != 1) {
    if (((int )op->spec & 3) != 3) {
      return (0);
    } else {
      goto _L___0;
    }
  } else
  _L___0: /* CIL Label */ 
  if ((op->arg[0] & 1L) == 0L) {
    return (0);
  }
  break;
  case 736U: 
  case 168U: 
  case 800U: 
  case 472U: 
  case 24U: 
  if (((int )op->spec & 3) != 1) {
    if (((int )op->spec & 3) != 3) {
      goto _L___2;
    } else {
      goto _L___3;
    }
  } else
  _L___3: /* CIL Label */ 
  if ((op->arg[0] & 1L) == 0L) {
    _L___2: /* CIL Label */ 
    if ((((int )op->spec >> 2) & 3) != 1) {
      if ((((int )op->spec >> 2) & 3) != 3) {
        return (0);
      } else {
        goto _L___1;
      }
    } else
    _L___1: /* CIL Label */ 
    if ((op->arg[1] & 1L) == 1L) {
      return (0);
    }
  }
  break;
  case 640U: 
  case 88U: 
  if (((int )op->spec & 3) != 1) {
    if (((int )op->spec & 3) != 3) {
      goto _L___5;
    } else {
      goto _L___6;
    }
  } else
  _L___6: /* CIL Label */ 
  if ((op->arg[0] & 1L) == 1L) {
    _L___5: /* CIL Label */ 
    if ((((int )op->spec >> 2) & 3) != 1) {
      if ((((int )op->spec >> 2) & 3) != 3) {
        return (0);
      } else {
        goto _L___4;
      }
    } else
    _L___4: /* CIL Label */ 
    if ((op->arg[1] & 1L) == 0L) {
      return (0);
    }
  }
  break;
  case 752U: 
  if (((int )op->spec & 3) != 1) {
    if (((int )op->spec & 3) != 3) {
      goto _L___10;
    } else {
      goto _L___11;
    }
  } else
  _L___11: /* CIL Label */ 
  if ((op->arg[0] & 1L) == 1L) {
    _L___10: /* CIL Label */ 
    if ((((int )op->spec >> 2) & 3) != 1) {
      if ((((int )op->spec >> 2) & 3) != 3) {
        goto _L___8;
      } else {
        goto _L___9;
      }
    } else
    _L___9: /* CIL Label */ 
    if ((op->arg[1] & 1L) == 0L) {
      _L___8: /* CIL Label */ 
      if ((((int )op->spec >> 4) & 3) != 1) {
        if ((((int )op->spec >> 4) & 3) != 3) {
          return (0);
        } else {
          goto _L___7;
        }
      } else
      _L___7: /* CIL Label */ 
      if ((op->arg[2] & 1L) == 0L) {
        return (0);
      }
    }
  }
  break;
  case 232U: 
  if (((int )op->spec & 3) != 1) {
    if (((int )op->spec & 3) != 3) {
      goto _L___15;
    } else {
      goto _L___16;
    }
  } else
  _L___16: /* CIL Label */ 
  if ((op->arg[0] & 1L) == 0L) {
    _L___15: /* CIL Label */ 
    if ((((int )op->spec >> 2) & 3) != 1) {
      if ((((int )op->spec >> 2) & 3) != 3) {
        goto _L___13;
      } else {
        goto _L___14;
      }
    } else
    _L___14: /* CIL Label */ 
    if ((op->arg[1] & 1L) == 0L) {
      _L___13: /* CIL Label */ 
      if ((((int )op->spec >> 4) & 3) != 1) {
        if ((((int )op->spec >> 4) & 3) != 3) {
          return (0);
        } else {
          goto _L___12;
        }
      } else
      _L___12: /* CIL Label */ 
      if ((op->arg[2] & 1L) == 1L) {
        return (0);
      }
    }
  }
  break;
  case 40U: 
  case 856U: 
  return (0);
  default: 
  if (! op->fp) {
    if (((int )op->spec & 3) != 1) {
      if (((int )op->spec & 3) != 3) {
        goto _L___20;
      } else {
        goto _L___21;
      }
    } else
    _L___21: /* CIL Label */ 
    if ((op->arg[0] & 1L) == 0L) {
      _L___20: /* CIL Label */ 
      if ((((int )op->spec >> 2) & 3) != 1) {
        if ((((int )op->spec >> 2) & 3) != 3) {
          goto _L___18;
        } else {
          goto _L___19;
        }
      } else
      _L___19: /* CIL Label */ 
      if ((op->arg[1] & 1L) == 0L) {
        _L___18: /* CIL Label */ 
        if ((((int )op->spec >> 4) & 3) != 1) {
          if ((((int )op->spec >> 4) & 3) != 3) {
            return (0);
          } else {
            goto _L___17;
          }
        } else
        _L___17: /* CIL Label */ 
        if ((op->arg[2] & 1L) == 0L) {
          return (0);
        }
      }
    }
  }
  if (op->fp) {
    if (((int )op->spec & 3) != 1) {
      if (((int )op->spec & 3) != 3) {
        goto _L___25;
      } else {
        goto _L___26;
      }
    } else
    _L___26: /* CIL Label */ 
    if ((op->arg[0] & 1L) == 1L) {
      _L___25: /* CIL Label */ 
      if ((((int )op->spec >> 2) & 3) != 1) {
        if ((((int )op->spec >> 2) & 3) != 3) {
          goto _L___23;
        } else {
          goto _L___24;
        }
      } else
      _L___24: /* CIL Label */ 
      if ((op->arg[1] & 1L) == 1L) {
        _L___23: /* CIL Label */ 
        if ((((int )op->spec >> 4) & 3) != 1) {
          if ((((int )op->spec >> 4) & 3) != 3) {
            return (0);
          } else {
            goto _L___22;
          }
        } else
        _L___22: /* CIL Label */ 
        if ((op->arg[2] & 1L) == 1L) {
          return (0);
        }
      }
    }
  }
  }
  append_msg(msg_buf, (char *)"register type mismatch");
  return (256);
}
}
static void emit_sse_branch(struct jit *jit , jit_op *op , long a1 , long a2 , long a3 ,
                            int x86_cond ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  int offset ;
  int tmp___6 ;
  long tmp___7 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  x86_imm_buf imb ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;

  {
  while (1) {
    tmp = jit->ip;
    (jit->ip) ++;
    *tmp = (unsigned char)102;
    while (1) {
      if (a2 > 7L) {
        tmp___0 = 4;
      } else {
        tmp___0 = 0;
      }
      if (a3 > 7L) {
        tmp___1 = 1;
      } else {
        tmp___1 = 0;
      }
      _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
      if ((int )_amd64_rex_bits != 0) {
        tmp___2 = jit->ip;
        (jit->ip) ++;
        *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
      }
      break;
    }
    tmp___3 = jit->ip;
    (jit->ip) ++;
    *tmp___3 = (unsigned char)15;
    tmp___4 = jit->ip;
    (jit->ip) ++;
    *tmp___4 = (unsigned char)47;
    while (1) {
      while (1) {
        tmp___5 = jit->ip;
        (jit->ip) ++;
        *tmp___5 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a3 & 7L));
        break;
      }
      break;
    }
    break;
  }
  op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
  while (1) {
    tmp___8 = jit_is_label(jit, (void *)a1);
    if (tmp___8) {
      tmp___7 = ((jit_value )jit->buf + ((jit_label *)a1)->pos) - (jit_value )jit->ip;
    } else {
      tmp___7 = a1;
    }
    offset = (int )(tmp___7 - 6L);
    while (1) {
      tmp___9 = jit->ip;
      (jit->ip) ++;
      *tmp___9 = (unsigned char)15;
      tmp___11 = jit->ip;
      (jit->ip) ++;
      *tmp___11 = (unsigned char )((int const   )x86_cc_unsigned_map[x86_cond] + 16);
      while (1) {
        imb.val = offset;
        tmp___12 = jit->ip;
        (jit->ip) ++;
        *tmp___12 = imb.b[0];
        tmp___13 = jit->ip;
        (jit->ip) ++;
        *tmp___13 = imb.b[1];
        tmp___14 = jit->ip;
        (jit->ip) ++;
        *tmp___14 = imb.b[2];
        tmp___15 = jit->ip;
        (jit->ip) ++;
        *tmp___15 = imb.b[3];
        break;
      }
      break;
    }
    break;
  }
  return;
}
}
static struct jit_op *jit_op_new(unsigned short code , unsigned char spec , long arg1 ,
                                 long arg2 , long arg3 , unsigned char arg_size ) 
{ 
  struct jit_op *r ;
  void *tmp ;

  {
  tmp = malloc(sizeof(struct jit_op ));
  r = (struct jit_op *)tmp;
  r->code = code;
  r->spec = spec;
  r->fp = (unsigned char)0;
  r->arg[0] = arg1;
  r->arg[1] = arg2;
  r->arg[2] = arg3;
  r->r_arg[0] = (jit_value )-1;
  r->r_arg[1] = (jit_value )-1;
  r->r_arg[2] = (jit_value )-1;
  r->assigned = (unsigned char)0;
  r->in_use = (unsigned char)1;
  r->arg_size = arg_size;
  r->next = (struct jit_op *)((void *)0);
  r->prev = (struct jit_op *)((void *)0);
  r->patch_addr = 0L;
  r->jmp_addr = (struct jit_op *)((void *)0);
  r->regmap = (struct jit_rmap *)((void *)0);
  r->live_in = (struct jit_set *)((void *)0);
  r->live_out = (struct jit_set *)((void *)0);
  r->allocator_hints = (struct jit_tree *)((void *)0);
  r->debug_info = (struct jit_debug_info *)((void *)0);
  r->addendum = (void *)0;
  return (r);
}
}
void rmap_free(jit_rmap *regmap ) 
{ 


  {
  if (! regmap) {
    return;
  }
  jit_tree_free(regmap->map);
  free((void *)regmap);
  return;
}
}
static jit_tree *jit_tree_search(jit_tree *h , jit_tree_key key ) 
{ 
  jit_tree *tmp ;
  jit_tree *tmp___0 ;

  {
  if ((unsigned long )h == (unsigned long )((void *)0)) {
    return (h);
  } else
  if (h->key == key) {
    return (h);
  }
  if (h->key > key) {
    tmp = jit_tree_search(h->left, key);
    return (tmp);
  }
  tmp___0 = jit_tree_search(h->right, key);
  return (tmp___0);
}
}
static int check_argument_sizes(jit_op *op , char *msg_buf ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
  case 512U: 
  case 256U: 
  case 872U: 
  case 160U: 
  tmp = valid_size((int )op->arg_size);
  if (tmp) {
    return (0);
  }
  break;
  case 696U: 
  case 96U: 
  case 120U: 
  case 232U: 
  case 24U: 
  case 752U: 
  case 640U: 
  tmp___0 = valid_fsize((int )op->arg_size);
  if (tmp___0) {
    return (0);
  }
  break;
  case 784U: 
  if (op->arg[0] == 0L) {
    goto _L;
  } else
  if (op->arg[0] == 1L) {
    _L: /* CIL Label */ 
    tmp___1 = valid_size((int )op->arg[1]);
    if (tmp___1) {
      return (0);
    }
  }
  if (op->arg[0] == 2L) {
    tmp___2 = valid_fsize((int )op->arg[1]);
    if (tmp___2) {
      return (0);
    }
  }
  if (op->arg[0] == 3L) {
    if ((unsigned long )op->arg[1] == sizeof(void *)) {
      return (0);
    }
  }
  break;
  default: 
  return (0);
  }
  append_msg(msg_buf, (char *)"invalid data size");
  return (4);
}
}
__inline static int emit_arguments(struct jit *jit ) 
{ 
  int stack_correction ;
  struct jit_out_arg *args ;
  int gp_pushed ;
  int tmp ;
  int fp_pushed ;
  int tmp___0 ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  struct jit_func_info *tmp___33 ;
  int x ;
  struct jit_out_arg *arg ;
  int fp_reg_arg_cnt ;
  int tmp___34 ;
  int _amd64_width_temp ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___35 ;
  int tmp___36 ;
  int tmp___37 ;
  unsigned char *tmp___38 ;
  int tmp___39 ;
  unsigned char *tmp___40 ;
  amd64_imm_buf imb___3 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  int tmp___53 ;
  unsigned char _amd64_rex_bits___6 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;

  {
  stack_correction = 0;
  args = jit->prepared_args.args;
  if (jit->prepared_args.gp_args - (jit->reg_al)->gp_arg_reg_cnt > 0) {
    tmp = jit->prepared_args.gp_args - (jit->reg_al)->gp_arg_reg_cnt;
  } else {
    tmp = 0;
  }
  gp_pushed = tmp;
  if (jit->prepared_args.fp_args - (jit->reg_al)->fp_arg_reg_cnt > 0) {
    tmp___0 = jit->prepared_args.fp_args - (jit->reg_al)->fp_arg_reg_cnt;
  } else {
    tmp___0 = 0;
  }
  fp_pushed = tmp___0;
  tmp___33 = jit_current_func_info(jit);
  if (tmp___33->has_prolog) {
    if (((jit->push_count + gp_pushed) + fp_pushed) % 2) {
      while (1) {
        while (1) {
          _amd64_rex_bits = (unsigned char)8;
          if ((int )_amd64_rex_bits != 0) {
            tmp___1 = jit->ip;
            (jit->ip) ++;
            *tmp___1 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        tmp___2 = jit->ip;
        (jit->ip) ++;
        *tmp___2 = (unsigned char)131;
        while (1) {
          while (1) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
            break;
          }
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)8;
          (jit->ip) ++;
          break;
        }
        break;
      }
      stack_correction = 8;
    }
  } else
  if (((jit->push_count + gp_pushed) + fp_pushed) % 2 == 0) {
    while (1) {
      while (1) {
        _amd64_rex_bits___2 = (unsigned char)8;
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___17 = jit->ip;
          (jit->ip) ++;
          *tmp___17 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___18 = jit->ip;
      (jit->ip) ++;
      *tmp___18 = (unsigned char)131;
      while (1) {
        while (1) {
          tmp___19 = jit->ip;
          (jit->ip) ++;
          *tmp___19 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
          break;
        }
        break;
      }
      while (1) {
        *(jit->ip) = (unsigned char)8;
        (jit->ip) ++;
        break;
      }
      break;
    }
    stack_correction = 8;
  }
  x = jit->prepared_args.count - 1;
  while (x >= 0) {
    arg = args + x;
    if (! arg->isfp) {
      if (arg->argpos < (jit->reg_al)->gp_arg_reg_cnt) {
        emit_set_arg(jit, arg);
      } else {
        emit_push_arg(jit, arg);
      }
    } else
    if (arg->argpos < (jit->reg_al)->fp_arg_reg_cnt) {
      emit_set_fparg(jit, arg);
    } else {
      emit_fppush_arg(jit, arg);
    }
    x --;
  }
  if (jit->prepared_args.fp_args < (jit->reg_al)->fp_arg_reg_cnt) {
    tmp___34 = jit->prepared_args.fp_args;
  } else {
    tmp___34 = (jit->reg_al)->fp_arg_reg_cnt;
  }
  fp_reg_arg_cnt = tmp___34;
  if (fp_reg_arg_cnt != 0) {
    while (1) {
      _amd64_width_temp = (size_t )fp_reg_arg_cnt == (size_t )((int )((size_t )fp_reg_arg_cnt));
      while (1) {
        while (1) {
          if (_amd64_width_temp) {
            tmp___37 = 4;
          } else {
            tmp___37 = 8;
          }
          if (tmp___37 > 4) {
            tmp___36 = 8;
          } else {
            tmp___36 = 0;
          }
          _amd64_rex_bits___5 = (unsigned char )tmp___36;
          if ((int )_amd64_rex_bits___5 != 0) {
            tmp___38 = jit->ip;
            (jit->ip) ++;
            *tmp___38 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
          } else {
            if (_amd64_width_temp) {
              tmp___39 = 4;
            } else {
              tmp___39 = 8;
            }
            if (tmp___39 == 1) {
              tmp___38 = jit->ip;
              (jit->ip) ++;
              *tmp___38 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
            }
          }
          break;
        }
        tmp___40 = jit->ip;
        (jit->ip) ++;
        *tmp___40 = (unsigned char)184;
        if (_amd64_width_temp) {
          tmp___53 = 4;
        } else {
          tmp___53 = 8;
        }
        if (tmp___53 == 8) {
          while (1) {
            imb___3.val = (size_t )fp_reg_arg_cnt;
            tmp___41 = jit->ip;
            (jit->ip) ++;
            *tmp___41 = imb___3.b[0];
            tmp___42 = jit->ip;
            (jit->ip) ++;
            *tmp___42 = imb___3.b[1];
            tmp___43 = jit->ip;
            (jit->ip) ++;
            *tmp___43 = imb___3.b[2];
            tmp___44 = jit->ip;
            (jit->ip) ++;
            *tmp___44 = imb___3.b[3];
            tmp___45 = jit->ip;
            (jit->ip) ++;
            *tmp___45 = imb___3.b[4];
            tmp___46 = jit->ip;
            (jit->ip) ++;
            *tmp___46 = imb___3.b[5];
            tmp___47 = jit->ip;
            (jit->ip) ++;
            *tmp___47 = imb___3.b[6];
            tmp___48 = jit->ip;
            (jit->ip) ++;
            *tmp___48 = imb___3.b[7];
            break;
          }
        } else {
          while (1) {
            imb___4.val = (int )((size_t )fp_reg_arg_cnt);
            tmp___49 = jit->ip;
            (jit->ip) ++;
            *tmp___49 = imb___4.b[0];
            tmp___50 = jit->ip;
            (jit->ip) ++;
            *tmp___50 = imb___4.b[1];
            tmp___51 = jit->ip;
            (jit->ip) ++;
            *tmp___51 = imb___4.b[2];
            tmp___52 = jit->ip;
            (jit->ip) ++;
            *tmp___52 = imb___4.b[3];
            break;
          }
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      while (1) {
        _amd64_rex_bits___6 = (unsigned char)0;
        if ((int )_amd64_rex_bits___6 != 0) {
          tmp___54 = jit->ip;
          (jit->ip) ++;
          *tmp___54 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
        }
        break;
      }
      tmp___55 = jit->ip;
      (jit->ip) ++;
      *tmp___55 = (unsigned char )((6 << 3) + 3);
      while (1) {
        while (1) {
          tmp___56 = jit->ip;
          (jit->ip) ++;
          *tmp___56 = (unsigned char )(3 << 6);
          break;
        }
        break;
      }
      break;
    }
  }
  return (stack_correction);
}
}
__inline static void emit_fppush_arg(struct jit *jit , struct jit_out_arg *arg ) 
{ 
  int sreg ;
  int pos ;
  struct jit_func_info *tmp ;
  struct jit_func_info *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  x86_imm_buf imb ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  int tmp___63 ;
  double b ;
  unsigned long tmp___64 ;
  unsigned long tmp___65 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  amd64_imm_buf imb___6 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char _amd64_rex_bits___6 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  x86_imm_buf imb___8 ;
  int tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  int tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;
  x86_imm_buf imb___9 ;
  int tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  int tmp___104 ;
  int tmp___105 ;
  int tmp___106 ;
  unsigned char *tmp___107 ;
  int tmp___108 ;
  unsigned char *tmp___109 ;
  int tmp___110 ;
  unsigned char *tmp___111 ;
  x86_imm_buf imb___10 ;
  int tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  unsigned char *tmp___116 ;
  int tmp___117 ;
  int tmp___118 ;
  unsigned char *tmp___119 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___120 ;
  unsigned char *tmp___121 ;
  unsigned char *tmp___122 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  int tmp___125 ;
  unsigned char _amd64_rex_bits___8 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char *tmp___128 ;
  unsigned char _amd64_rex_bits___9 ;
  unsigned char *tmp___129 ;
  unsigned char *tmp___130 ;
  x86_imm_buf imb___11 ;
  unsigned char *tmp___131 ;
  unsigned char *tmp___132 ;
  unsigned char *tmp___133 ;
  unsigned char *tmp___134 ;
  unsigned char _amd64_rex_bits___10 ;
  unsigned char *tmp___135 ;
  unsigned char *tmp___136 ;
  unsigned char *tmp___137 ;
  x86_imm_buf imb___12 ;
  unsigned char *tmp___138 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  unsigned char *tmp___141 ;
  unsigned char *tmp___142 ;
  unsigned char _amd64_rex_bits___11 ;
  unsigned char *tmp___143 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  unsigned char *tmp___146 ;
  x86_imm_buf imb___13 ;
  unsigned char *tmp___147 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;
  unsigned char *tmp___150 ;
  unsigned char *tmp___151 ;
  unsigned char *tmp___152 ;
  unsigned char *tmp___153 ;
  unsigned char *tmp___154 ;
  unsigned char *tmp___155 ;
  unsigned char *tmp___156 ;
  x86_imm_buf imb___14 ;
  unsigned char *tmp___157 ;
  unsigned char *tmp___158 ;
  unsigned char *tmp___159 ;
  unsigned char *tmp___160 ;
  unsigned char *tmp___161 ;
  unsigned char *tmp___162 ;
  unsigned char *tmp___163 ;
  x86_imm_buf imb___15 ;
  unsigned char *tmp___164 ;
  unsigned char *tmp___165 ;
  unsigned char *tmp___166 ;
  unsigned char *tmp___167 ;
  float b___0 ;
  unsigned long tmp___168 ;
  unsigned long tmp___169 ;
  unsigned char _amd64_rex_bits___12 ;
  unsigned char *tmp___170 ;
  unsigned char *tmp___171 ;
  amd64_imm_buf imb___16 ;
  unsigned char *tmp___172 ;
  unsigned char *tmp___173 ;
  unsigned char *tmp___174 ;
  unsigned char *tmp___175 ;
  unsigned char *tmp___176 ;
  unsigned char *tmp___177 ;
  unsigned char *tmp___178 ;
  unsigned char *tmp___179 ;
  x86_imm_buf imb___17 ;
  unsigned char *tmp___180 ;
  unsigned char *tmp___181 ;
  unsigned char *tmp___182 ;
  unsigned char *tmp___183 ;
  unsigned char _amd64_rex_bits___13 ;
  unsigned char *tmp___184 ;
  unsigned char *tmp___185 ;

  {
  if ((unsigned long )arg->size == sizeof(double )) {
    if (arg->isreg) {
      tmp___63 = is_spilled(arg->value.generic, jit->prepared_args.op, & sreg);
      if (tmp___63) {
        tmp = jit_current_func_info(jit);
        tmp___0 = jit_current_func_info(jit);
        pos = (int )(((unsigned long )(- tmp->gp_reg_count) * sizeof(void *) - (unsigned long )(((arg->value.generic >> 4) & 268435455L) + 1L) * sizeof(jit_float )) - (unsigned long )tmp___0->allocai_mem);
        while (1) {
          while (1) {
            _amd64_rex_bits = (unsigned char)0;
            if ((int )_amd64_rex_bits != 0) {
              tmp___1 = jit->ip;
              (jit->ip) ++;
              *tmp___1 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char)255;
          while (1) {
            if (0) {
              if (pos == 0) {
                while (1) {
                  tmp___3 = jit->ip;
                  (jit->ip) ++;
                  *tmp___3 = (unsigned char )((6 << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___4 = jit->ip;
                  (jit->ip) ++;
                  *tmp___4 = (unsigned char )((4 << 3) | 4);
                  break;
                }
              } else
              if (pos >= -128) {
                if (pos <= 127) {
                  while (1) {
                    tmp___5 = jit->ip;
                    (jit->ip) ++;
                    *tmp___5 = (unsigned char )(((1 << 6) | (6 << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___6 = jit->ip;
                    (jit->ip) ++;
                    *tmp___6 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(pos & 255);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L;
                }
              } else {
                _L: /* CIL Label */ 
                while (1) {
                  tmp___7 = jit->ip;
                  (jit->ip) ++;
                  *tmp___7 = (unsigned char )(((2 << 6) | (6 << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___8 = jit->ip;
                  (jit->ip) ++;
                  *tmp___8 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  imb.val = pos;
                  tmp___9 = jit->ip;
                  (jit->ip) ++;
                  *tmp___9 = imb.b[0];
                  tmp___10 = jit->ip;
                  (jit->ip) ++;
                  *tmp___10 = imb.b[1];
                  tmp___11 = jit->ip;
                  (jit->ip) ++;
                  *tmp___11 = imb.b[2];
                  tmp___12 = jit->ip;
                  (jit->ip) ++;
                  *tmp___12 = imb.b[3];
                  break;
                }
              }
              break;
            }
            if (pos == 0) {

            }
            if (pos >= -128) {
              if (pos <= 127) {
                while (1) {
                  tmp___14 = jit->ip;
                  (jit->ip) ++;
                  *tmp___14 = (unsigned char )(((1 << 6) | (6 << 3)) | 5);
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(pos & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___0;
              }
            } else {
              _L___0: /* CIL Label */ 
              while (1) {
                tmp___15 = jit->ip;
                (jit->ip) ++;
                *tmp___15 = (unsigned char )(((2 << 6) | (6 << 3)) | 5);
                break;
              }
              while (1) {
                imb___0.val = pos;
                tmp___16 = jit->ip;
                (jit->ip) ++;
                *tmp___16 = imb___0.b[0];
                tmp___17 = jit->ip;
                (jit->ip) ++;
                *tmp___17 = imb___0.b[1];
                tmp___18 = jit->ip;
                (jit->ip) ++;
                *tmp___18 = imb___0.b[2];
                tmp___19 = jit->ip;
                (jit->ip) ++;
                *tmp___19 = imb___0.b[3];
                break;
              }
            }
            break;
          }
          break;
        }
      } else {
        while (1) {
          while (1) {
            _amd64_rex_bits___0 = (unsigned char)8;
            if ((int )_amd64_rex_bits___0 != 0) {
              tmp___20 = jit->ip;
              (jit->ip) ++;
              *tmp___20 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
            }
            break;
          }
          tmp___21 = jit->ip;
          (jit->ip) ++;
          *tmp___21 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___22 = jit->ip;
              (jit->ip) ++;
              *tmp___22 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)8;
            (jit->ip) ++;
            break;
          }
          break;
        }
        while (1) {
          tmp___36 = jit->ip;
          (jit->ip) ++;
          *tmp___36 = (unsigned char)102;
          while (1) {
            if (sreg > 7) {
              tmp___37 = 4;
            } else {
              tmp___37 = 0;
            }
            _amd64_rex_bits___3 = (unsigned char )tmp___37;
            if ((int )_amd64_rex_bits___3 != 0) {
              tmp___38 = jit->ip;
              (jit->ip) ++;
              *tmp___38 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
            }
            break;
          }
          tmp___39 = jit->ip;
          (jit->ip) ++;
          *tmp___39 = (unsigned char)15;
          tmp___40 = jit->ip;
          (jit->ip) ++;
          *tmp___40 = (unsigned char)19;
          while (1) {
            while (1) {
              while (1) {
                tmp___46 = jit->ip;
                (jit->ip) ++;
                *tmp___46 = (unsigned char )((((sreg & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___47 = jit->ip;
                (jit->ip) ++;
                *tmp___47 = (unsigned char )((4 << 3) | 4);
                break;
              }
              break;
              while (1) {
                tmp___56 = jit->ip;
                (jit->ip) ++;
                *tmp___56 = (unsigned char )((((sreg & 7) & 7) << 3) | 4);
                break;
              }
              break;
              while (1) {
                tmp___57 = jit->ip;
                (jit->ip) ++;
                *tmp___57 = (unsigned char )(((1 << 6) | (((sreg & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
              break;
            }
            break;
          }
          break;
        }
      }
    } else {
      b = arg->value.fp;
      tmp___65 = __builtin_object_size((void *)(& tmp___64), 0);
      __builtin___memcpy_chk((void *)(& tmp___64), (void const   *)(& b), sizeof(double ),
                             tmp___65);
      while (1) {
        while (1) {
          _amd64_rex_bits___4 = (unsigned char)8;
          if ((int )_amd64_rex_bits___4 != 0) {
            tmp___66 = jit->ip;
            (jit->ip) ++;
            *tmp___66 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
          }
          break;
        }
        tmp___67 = jit->ip;
        (jit->ip) ++;
        *tmp___67 = (unsigned char)184;
        while (1) {
          imb___6.val = tmp___64;
          tmp___68 = jit->ip;
          (jit->ip) ++;
          *tmp___68 = imb___6.b[0];
          tmp___69 = jit->ip;
          (jit->ip) ++;
          *tmp___69 = imb___6.b[1];
          tmp___70 = jit->ip;
          (jit->ip) ++;
          *tmp___70 = imb___6.b[2];
          tmp___71 = jit->ip;
          (jit->ip) ++;
          *tmp___71 = imb___6.b[3];
          tmp___72 = jit->ip;
          (jit->ip) ++;
          *tmp___72 = imb___6.b[4];
          tmp___73 = jit->ip;
          (jit->ip) ++;
          *tmp___73 = imb___6.b[5];
          tmp___74 = jit->ip;
          (jit->ip) ++;
          *tmp___74 = imb___6.b[6];
          tmp___75 = jit->ip;
          (jit->ip) ++;
          *tmp___75 = imb___6.b[7];
          break;
        }
        break;
      }
      while (1) {
        while (1) {
          _amd64_rex_bits___5 = (unsigned char)0;
          if ((int )_amd64_rex_bits___5 != 0) {
            tmp___80 = jit->ip;
            (jit->ip) ++;
            *tmp___80 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
          }
          break;
        }
        tmp___81 = jit->ip;
        (jit->ip) ++;
        *tmp___81 = (unsigned char)80;
        break;
      }
    }
  } else
  if (arg->isreg) {
    tmp___125 = is_spilled(arg->value.generic, jit->prepared_args.op, & sreg);
    if (tmp___125) {
      while (1) {
        tmp___82 = jit->ip;
        (jit->ip) ++;
        *tmp___82 = (unsigned char)242;
        while (1) {
          _amd64_rex_bits___6 = (unsigned char)0;
          if ((int )_amd64_rex_bits___6 != 0) {
            tmp___83 = jit->ip;
            (jit->ip) ++;
            *tmp___83 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
          }
          break;
        }
        tmp___84 = jit->ip;
        (jit->ip) ++;
        *tmp___84 = (unsigned char)15;
        tmp___85 = jit->ip;
        (jit->ip) ++;
        *tmp___85 = (unsigned char)90;
        while (1) {
          while (1) {
            if (0) {
              tmp___106 = GET_REG_POS(jit, (int )arg->value.generic);
              if (tmp___106 == 0) {
                while (1) {
                  tmp___92 = jit->ip;
                  (jit->ip) ++;
                  *tmp___92 = (unsigned char)4;
                  break;
                }
                while (1) {
                  tmp___93 = jit->ip;
                  (jit->ip) ++;
                  *tmp___93 = (unsigned char )((4 << 3) | 4);
                  break;
                }
              } else {
                tmp___104 = GET_REG_POS(jit, (int )arg->value.generic);
                if (tmp___104 >= -128) {
                  tmp___105 = GET_REG_POS(jit, (int )arg->value.generic);
                  if (tmp___105 <= 127) {
                    while (1) {
                      tmp___94 = jit->ip;
                      (jit->ip) ++;
                      *tmp___94 = (unsigned char )((1 << 6) | 4);
                      break;
                    }
                    while (1) {
                      tmp___95 = jit->ip;
                      (jit->ip) ++;
                      *tmp___95 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      tmp___96 = GET_REG_POS(jit, (int )arg->value.generic);
                      *(jit->ip) = (unsigned char )(tmp___96 & 255);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L___1;
                  }
                } else {
                  _L___1: /* CIL Label */ 
                  while (1) {
                    tmp___97 = jit->ip;
                    (jit->ip) ++;
                    *tmp___97 = (unsigned char )((2 << 6) | 4);
                    break;
                  }
                  while (1) {
                    tmp___98 = jit->ip;
                    (jit->ip) ++;
                    *tmp___98 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    tmp___99 = GET_REG_POS(jit, (int )arg->value.generic);
                    imb___9.val = tmp___99;
                    tmp___100 = jit->ip;
                    (jit->ip) ++;
                    *tmp___100 = imb___9.b[0];
                    tmp___101 = jit->ip;
                    (jit->ip) ++;
                    *tmp___101 = imb___9.b[1];
                    tmp___102 = jit->ip;
                    (jit->ip) ++;
                    *tmp___102 = imb___9.b[2];
                    tmp___103 = jit->ip;
                    (jit->ip) ++;
                    *tmp___103 = imb___9.b[3];
                    break;
                  }
                }
              }
              break;
            }
            tmp___108 = GET_REG_POS(jit, (int )arg->value.generic);
            if (tmp___108 == 0) {

            }
            tmp___117 = GET_REG_POS(jit, (int )arg->value.generic);
            if (tmp___117 >= -128) {
              tmp___118 = GET_REG_POS(jit, (int )arg->value.generic);
              if (tmp___118 <= 127) {
                while (1) {
                  tmp___109 = jit->ip;
                  (jit->ip) ++;
                  *tmp___109 = (unsigned char )((1 << 6) | 5);
                  break;
                }
                while (1) {
                  tmp___110 = GET_REG_POS(jit, (int )arg->value.generic);
                  *(jit->ip) = (unsigned char )(tmp___110 & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___2;
              }
            } else {
              _L___2: /* CIL Label */ 
              while (1) {
                tmp___111 = jit->ip;
                (jit->ip) ++;
                *tmp___111 = (unsigned char )((2 << 6) | 5);
                break;
              }
              while (1) {
                tmp___112 = GET_REG_POS(jit, (int )arg->value.generic);
                imb___10.val = tmp___112;
                tmp___113 = jit->ip;
                (jit->ip) ++;
                *tmp___113 = imb___10.b[0];
                tmp___114 = jit->ip;
                (jit->ip) ++;
                *tmp___114 = imb___10.b[1];
                tmp___115 = jit->ip;
                (jit->ip) ++;
                *tmp___115 = imb___10.b[2];
                tmp___116 = jit->ip;
                (jit->ip) ++;
                *tmp___116 = imb___10.b[3];
                break;
              }
            }
            break;
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        tmp___119 = jit->ip;
        (jit->ip) ++;
        *tmp___119 = (unsigned char)242;
        while (1) {
          if (sreg > 7) {
            tmp___120 = 1;
          } else {
            tmp___120 = 0;
          }
          _amd64_rex_bits___7 = (unsigned char )tmp___120;
          if ((int )_amd64_rex_bits___7 != 0) {
            tmp___121 = jit->ip;
            (jit->ip) ++;
            *tmp___121 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
          }
          break;
        }
        tmp___122 = jit->ip;
        (jit->ip) ++;
        *tmp___122 = (unsigned char)15;
        tmp___123 = jit->ip;
        (jit->ip) ++;
        *tmp___123 = (unsigned char)90;
        while (1) {
          while (1) {
            tmp___124 = jit->ip;
            (jit->ip) ++;
            *tmp___124 = (unsigned char )((3 << 6) | (sreg & 7));
            break;
          }
          break;
        }
        break;
      }
    }
    while (1) {
      while (1) {
        _amd64_rex_bits___8 = (unsigned char)8;
        if ((int )_amd64_rex_bits___8 != 0) {
          tmp___126 = jit->ip;
          (jit->ip) ++;
          *tmp___126 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
        }
        break;
      }
      tmp___127 = jit->ip;
      (jit->ip) ++;
      *tmp___127 = (unsigned char)131;
      while (1) {
        while (1) {
          tmp___128 = jit->ip;
          (jit->ip) ++;
          *tmp___128 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
          break;
        }
        break;
      }
      while (1) {
        *(jit->ip) = (unsigned char)8;
        (jit->ip) ++;
        break;
      }
      break;
    }
    while (1) {
      tmp___142 = jit->ip;
      (jit->ip) ++;
      *tmp___142 = (unsigned char)102;
      while (1) {
        _amd64_rex_bits___11 = (unsigned char)0;
        if ((int )_amd64_rex_bits___11 != 0) {
          tmp___143 = jit->ip;
          (jit->ip) ++;
          *tmp___143 = (unsigned char )(64 | (int )_amd64_rex_bits___11);
        }
        break;
      }
      tmp___144 = jit->ip;
      (jit->ip) ++;
      *tmp___144 = (unsigned char)15;
      tmp___145 = jit->ip;
      (jit->ip) ++;
      *tmp___145 = (unsigned char)19;
      while (1) {
        while (1) {
          while (1) {
            tmp___151 = jit->ip;
            (jit->ip) ++;
            *tmp___151 = (unsigned char)4;
            break;
          }
          while (1) {
            tmp___152 = jit->ip;
            (jit->ip) ++;
            *tmp___152 = (unsigned char )((4 << 3) | 4);
            break;
          }
          break;
          while (1) {
            tmp___161 = jit->ip;
            (jit->ip) ++;
            *tmp___161 = (unsigned char)4;
            break;
          }
          break;
          while (1) {
            tmp___162 = jit->ip;
            (jit->ip) ++;
            *tmp___162 = (unsigned char )((1 << 6) | 4);
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)0;
            (jit->ip) ++;
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  } else {
    b___0 = (float )arg->value.fp;
    tmp___168 = 0UL;
    tmp___169 = __builtin_object_size((void *)(& tmp___168), 0);
    __builtin___memcpy_chk((void *)(& tmp___168), (void const   *)(& b___0), sizeof(float ),
                           tmp___169);
    while (1) {
      while (1) {
        _amd64_rex_bits___12 = (unsigned char)8;
        if ((int )_amd64_rex_bits___12 != 0) {
          tmp___170 = jit->ip;
          (jit->ip) ++;
          *tmp___170 = (unsigned char )(64 | (int )_amd64_rex_bits___12);
        }
        break;
      }
      tmp___171 = jit->ip;
      (jit->ip) ++;
      *tmp___171 = (unsigned char)184;
      while (1) {
        imb___16.val = tmp___168;
        tmp___172 = jit->ip;
        (jit->ip) ++;
        *tmp___172 = imb___16.b[0];
        tmp___173 = jit->ip;
        (jit->ip) ++;
        *tmp___173 = imb___16.b[1];
        tmp___174 = jit->ip;
        (jit->ip) ++;
        *tmp___174 = imb___16.b[2];
        tmp___175 = jit->ip;
        (jit->ip) ++;
        *tmp___175 = imb___16.b[3];
        tmp___176 = jit->ip;
        (jit->ip) ++;
        *tmp___176 = imb___16.b[4];
        tmp___177 = jit->ip;
        (jit->ip) ++;
        *tmp___177 = imb___16.b[5];
        tmp___178 = jit->ip;
        (jit->ip) ++;
        *tmp___178 = imb___16.b[6];
        tmp___179 = jit->ip;
        (jit->ip) ++;
        *tmp___179 = imb___16.b[7];
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        _amd64_rex_bits___13 = (unsigned char)0;
        if ((int )_amd64_rex_bits___13 != 0) {
          tmp___184 = jit->ip;
          (jit->ip) ++;
          *tmp___184 = (unsigned char )(64 | (int )_amd64_rex_bits___13);
        }
        break;
      }
      tmp___185 = jit->ip;
      (jit->ip) ++;
      *tmp___185 = (unsigned char)80;
      break;
    }
  }
  return;
}
}
static int emit_push_callee_saved_regs(struct jit *jit , jit_op *op ) 
{ 
  int stack_offset ;
  int i ;
  jit_hw_reg *r ;
  struct jit_op *o ;
  int tmp ;
  jit_value tmp___0 ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;

  {
  stack_offset = 0;
  i = 0;
  while (i < (jit->reg_al)->gp_reg_cnt) {
    r = (jit->reg_al)->gp_regs + i;
    if (r->callee_saved) {
      o = op->next;
      while ((unsigned long )o != (unsigned long )((void *)0)) {
        if ((unsigned int )((jit_opcode )((int )o->code & 65528)) == 536U) {
          break;
        }
        tmp = uses_hw_reg(o, (jit_value )r->id, 0);
        if (tmp) {
          stack_offset = emit_push_reg(jit, r, stack_offset);
          break;
        }
        o = o->next;
      }
    }
    i ++;
  }
  tmp___0 = jit_value_align((jit_value )stack_offset, (jit_value )16);
  stack_offset = (int )tmp___0;
  if (stack_offset) {
    while (1) {
      if (stack_offset >= -128) {
        if (stack_offset <= 127) {
          while (1) {
            _amd64_rex_bits = (unsigned char)8;
            if ((int )_amd64_rex_bits != 0) {
              tmp___1 = jit->ip;
              (jit->ip) ++;
              *tmp___1 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___3 = jit->ip;
              (jit->ip) ++;
              *tmp___3 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(stack_offset & 255);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)8;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___10 = jit->ip;
            (jit->ip) ++;
            *tmp___10 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___11 = jit->ip;
        (jit->ip) ++;
        *tmp___11 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = stack_offset;
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = imb___0.b[0];
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = imb___0.b[1];
          tmp___15 = jit->ip;
          (jit->ip) ++;
          *tmp___15 = imb___0.b[2];
          tmp___16 = jit->ip;
          (jit->ip) ++;
          *tmp___16 = imb___0.b[3];
          break;
        }
      }
      break;
    }
  }
  return ((int )((unsigned long )stack_offset / sizeof(void *)));
}
}
struct jit *jit_init(void) 
{ 
  struct jit *r ;
  void *tmp ;

  {
  tmp = malloc(sizeof(struct jit ));
  r = (struct jit *)tmp;
  r->ops = jit_op_new((unsigned short)496, (unsigned char)0, 0L, 0L, 0L, (unsigned char)0);
  r->last_op = r->ops;
  r->optimizations = 0U;
  r->buf = (unsigned char *)((void *)0);
  r->mmaped_buf = (unsigned char)0;
  r->labels = (jit_label *)((void *)0);
  r->reg_al = jit_reg_allocator_create();
  jit_enable_optimization(r, 13);
  return (r);
}
}
static void rmap_unassoc(jit_rmap *rmap , jit_value reg ) 
{ 


  {
  rmap->map = jit_tree_delete(rmap->map, reg, (int *)((void *)0));
  return;
}
}
static void assign_regs(struct jit *jit , struct jit_op *op ) 
{ 
  int i ;
  int skip ;
  struct jit_reg_allocator *al ;
  struct jit_func_info *info ;
  jit_reg virt_reg ;

  {
  skip = 0;
  al = jit->reg_al;
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 536U) {
    info = (struct jit_func_info *)op->arg[1];
    al->current_func_info = info;
    assign_regs_for_args(al, op);
  } else
  if (op->prev) {
    rmap_free(op->regmap);
    op->regmap = rmap_clone((op->prev)->regmap);
  }
  switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
  case 776U: 
  prepare_registers_for_call(al, op);
  break;
  case 448U: 
  skip = 1;
  break;
  case 120U: 
  skip = 1;
  break;
  case 208U: 
  skip = assign_ret_reg(op, al->ret_reg);
  break;
  case 696U: 
  skip = assign_ret_reg(op, al->fpret_reg);
  break;
  case 728U: 
  skip = assign_getarg(op, al);
  break;
  case 0U: 
  skip = assign_call(op, al);
  break;
  case 808U: 
  skip = assign_jmp(op, al);
  break;
  case 704U: 
  skip = spill_all_registers(op, al);
  break;
  case 856U: 
  skip = force_spill(op);
  break;
  case 40U: 
  skip = force_assoc(op, al);
  break;
  default: 
  break;
  }
  if (skip) {
    return;
  }
  i = 0;
  while (i < 3) {
    if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 1) {
      goto _L;
    } else
    if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 3) {
      _L: /* CIL Label */ 
      virt_reg = op->arg[i];
      if (((virt_reg >> 1) & 3L) == 2L) {
        associate_register_alias(al, op, i);
      } else {
        associate_register(al, op, i);
      }
    } else
    if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 2) {
      op->r_arg[i] = op->arg[i];
    }
    i ++;
  }
  return;
}
}
__inline static jit_tree *jit_tree_delete(jit_tree *root , jit_tree_key key , int *found ) 
{ 


  {
  root = delete_node(root, key, found);
  if (root) {
    root->color = 0;
  }
  return (root);
}
}
__inline static int make_addmuli(jit_op *op , jit_op *nextop ) 
{ 
  int tmp ;

  {
  nextop->code = (unsigned short)314;
  nextop->spec = (unsigned char )(((2 << 4) | (1 << 2)) | 3);
  nextop->arg[1] = op->arg[1];
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 552U) {
    tmp = shift_index((int )op->arg[2]);
    nextop->arg_size = (unsigned char )tmp;
  } else {
    nextop->arg_size = (unsigned char )op->arg[2];
  }
  make_nop(op);
  return (1);
}
}
__inline static void jit_set_free(jit_set *s ) 
{ 


  {
  jit_tree_free(s->root);
  free((void *)s);
  return;
}
}
void jit_optimize_unused_assignments(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  int tmp___0 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    if (((int )op->spec & 3) == 3) {
      if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 672U) {
        goto __Cont;
      } else
      if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 48U) {
        goto __Cont;
      } else
      if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 392U) {
        goto __Cont;
      } else
      if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 80U) {
        goto __Cont;
      }
      tmp___0 = jit_set_get(op->live_out, (int )op->arg[0]);
      if (! tmp___0) {
        op->code = (unsigned short)528;
        op->spec = (unsigned char)0;
      }
    }
    __Cont: /* CIL Label */ 
    op = op->next;
  }
  return;
}
}
static void emit_cond_op(struct jit *jit , struct jit_op *op , int amd64_cond , int imm ,
                         int sign ) 
{ 
  unsigned char _amd64_rex_bits ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  x86_imm_buf imb ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___17 ;
  int tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___22 ;
  int tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  amd64_imm_buf imb___1 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___38 ;
  unsigned char *tmp___39 ;
  long tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___45 ;
  int tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned long tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  amd64_imm_buf imb___3 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char _amd64_rex_bits___7 ;
  unsigned char *tmp___67 ;
  long tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___73 ;
  int tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned long tmp___78 ;
  unsigned char *tmp___79 ;

  {
  if (imm) {
    while (1) {
      if ((int )op->r_arg[2] >= -128) {
        if ((int )op->r_arg[2] <= 127) {
          while (1) {
            if (op->r_arg[1] > 7L) {
              tmp = 1;
            } else {
              tmp = 0;
            }
            _amd64_rex_bits = (unsigned char )(8 | tmp);
            if ((int )_amd64_rex_bits != 0) {
              tmp___0 = jit->ip;
              (jit->ip) ++;
              *tmp___0 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___1 = jit->ip;
          (jit->ip) ++;
          *tmp___1 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___2 = jit->ip;
              (jit->ip) ++;
              *tmp___2 = (unsigned char )((long )((3 << 6) | (7 << 3)) | (op->r_arg[1] & 7L));
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(op->r_arg[2] & 255L);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else
      _L: /* CIL Label */ 
      if (op->r_arg[1] == 0L) {
        while (1) {
          _amd64_rex_bits___0 = (unsigned char)8;
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char )((7 << 3) + 5);
        while (1) {
          imb.val = (int )op->r_arg[2];
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = imb.b[0];
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = imb.b[1];
          tmp___7 = jit->ip;
          (jit->ip) ++;
          *tmp___7 = imb.b[2];
          tmp___8 = jit->ip;
          (jit->ip) ++;
          *tmp___8 = imb.b[3];
          break;
        }
      } else {
        while (1) {
          if (op->r_arg[1] > 7L) {
            tmp___9 = 1;
          } else {
            tmp___9 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )(8 | tmp___9);
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___10 = jit->ip;
            (jit->ip) ++;
            *tmp___10 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___11 = jit->ip;
        (jit->ip) ++;
        *tmp___11 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = (unsigned char )((long )((3 << 6) | (7 << 3)) | (op->r_arg[1] & 7L));
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = (int )op->r_arg[2];
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = imb___0.b[0];
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = imb___0.b[1];
          tmp___15 = jit->ip;
          (jit->ip) ++;
          *tmp___15 = imb___0.b[2];
          tmp___16 = jit->ip;
          (jit->ip) ++;
          *tmp___16 = imb___0.b[3];
          break;
        }
      }
      break;
    }
  } else {
    while (1) {
      while (1) {
        if (op->r_arg[1] > 7L) {
          tmp___17 = 4;
        } else {
          tmp___17 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___18 = 1;
        } else {
          tmp___18 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )((8 | tmp___17) | tmp___18);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___19 = jit->ip;
          (jit->ip) ++;
          *tmp___19 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___20 = jit->ip;
      (jit->ip) ++;
      *tmp___20 = (unsigned char )((7 << 3) + 3);
      while (1) {
        while (1) {
          tmp___21 = jit->ip;
          (jit->ip) ++;
          *tmp___21 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[1] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  if (op->r_arg[0] != 6L) {
    if (op->r_arg[0] != 7L) {
      while (1) {
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___22 = 8;
          } else {
            tmp___22 = 0;
          }
          if (op->r_arg[0] > 7L) {
            tmp___23 = 1;
          } else {
            tmp___23 = 0;
          }
          _amd64_rex_bits___3 = (unsigned char )(tmp___22 | tmp___23);
          if ((int )_amd64_rex_bits___3 != 0) {
            tmp___24 = jit->ip;
            (jit->ip) ++;
            *tmp___24 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___24 = jit->ip;
            (jit->ip) ++;
            *tmp___24 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          }
          break;
        }
        tmp___25 = jit->ip;
        (jit->ip) ++;
        *tmp___25 = (unsigned char )(184L + (op->r_arg[0] & 7L));
        if (sizeof(void *) == 8UL) {
          while (1) {
            imb___1.val = (size_t )0;
            tmp___26 = jit->ip;
            (jit->ip) ++;
            *tmp___26 = imb___1.b[0];
            tmp___27 = jit->ip;
            (jit->ip) ++;
            *tmp___27 = imb___1.b[1];
            tmp___28 = jit->ip;
            (jit->ip) ++;
            *tmp___28 = imb___1.b[2];
            tmp___29 = jit->ip;
            (jit->ip) ++;
            *tmp___29 = imb___1.b[3];
            tmp___30 = jit->ip;
            (jit->ip) ++;
            *tmp___30 = imb___1.b[4];
            tmp___31 = jit->ip;
            (jit->ip) ++;
            *tmp___31 = imb___1.b[5];
            tmp___32 = jit->ip;
            (jit->ip) ++;
            *tmp___32 = imb___1.b[6];
            tmp___33 = jit->ip;
            (jit->ip) ++;
            *tmp___33 = imb___1.b[7];
            break;
          }
        } else {
          while (1) {
            imb___2.val = (int )((size_t )0);
            tmp___34 = jit->ip;
            (jit->ip) ++;
            *tmp___34 = imb___2.b[0];
            tmp___35 = jit->ip;
            (jit->ip) ++;
            *tmp___35 = imb___2.b[1];
            tmp___36 = jit->ip;
            (jit->ip) ++;
            *tmp___36 = imb___2.b[2];
            tmp___37 = jit->ip;
            (jit->ip) ++;
            *tmp___37 = imb___2.b[3];
            break;
          }
        }
        break;
      }
      while (1) {
        while (1) {
          if (op->r_arg[0] > 7L) {
            tmp___38 = 1;
          } else {
            tmp___38 = 0;
          }
          _amd64_rex_bits___4 = (unsigned char )tmp___38;
          if ((int )_amd64_rex_bits___4 != 0) {
            tmp___39 = jit->ip;
            (jit->ip) ++;
            *tmp___39 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
          } else {
            tmp___39 = jit->ip;
            (jit->ip) ++;
            *tmp___39 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
          }
          break;
        }
        while (1) {
          tmp___40 = __builtin_expect(0L, 0L);
          if (tmp___40) {
            __assert_rtn("emit_cond_op", "./jitter-amd64.c", 2823, "1");
          }
          tmp___41 = jit->ip;
          (jit->ip) ++;
          *tmp___41 = (unsigned char)15;
          if (sign) {
            tmp___42 = jit->ip;
            (jit->ip) ++;
            *tmp___42 = (unsigned char )((int const   )x86_cc_signed_map[amd64_cond] + 32);
          } else {
            tmp___43 = jit->ip;
            (jit->ip) ++;
            *tmp___43 = (unsigned char )((int const   )x86_cc_unsigned_map[amd64_cond] + 32);
          }
          while (1) {
            while (1) {
              tmp___44 = jit->ip;
              (jit->ip) ++;
              *tmp___44 = (unsigned char )((long )(3 << 6) | ((op->r_arg[0] & 7L) & 7L));
              break;
            }
            break;
          }
          break;
        }
        break;
      }
    } else {
      goto _L___0;
    }
  } else {
    _L___0: /* CIL Label */ 
    while (1) {
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___45 = 8;
        } else {
          tmp___45 = 0;
        }
        if (op->r_arg[0] > 7L) {
          tmp___46 = 1;
        } else {
          tmp___46 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(tmp___45 | tmp___46);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___47 = jit->ip;
          (jit->ip) ++;
          *tmp___47 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___47 = jit->ip;
          (jit->ip) ++;
          *tmp___47 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      while (1) {
        if (sizeof(void *) == 8UL) {
          tmp___50 = 4UL;
        } else {
          tmp___50 = sizeof(void *);
        }
        if (tmp___50 == 1UL) {
          tmp___48 = jit->ip;
          (jit->ip) ++;
          *tmp___48 = (unsigned char)134;
        } else {
          tmp___49 = jit->ip;
          (jit->ip) ++;
          *tmp___49 = (unsigned char)135;
        }
        while (1) {
          while (1) {
            tmp___51 = jit->ip;
            (jit->ip) ++;
            *tmp___51 = (unsigned char )((long )(3 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___52 = 8;
        } else {
          tmp___52 = 0;
        }
        _amd64_rex_bits___6 = (unsigned char )tmp___52;
        if ((int )_amd64_rex_bits___6 != 0) {
          tmp___53 = jit->ip;
          (jit->ip) ++;
          *tmp___53 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___53 = jit->ip;
          (jit->ip) ++;
          *tmp___53 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
        }
        break;
      }
      tmp___54 = jit->ip;
      (jit->ip) ++;
      *tmp___54 = (unsigned char)184;
      if (sizeof(void *) == 8UL) {
        while (1) {
          imb___3.val = (size_t )0;
          tmp___55 = jit->ip;
          (jit->ip) ++;
          *tmp___55 = imb___3.b[0];
          tmp___56 = jit->ip;
          (jit->ip) ++;
          *tmp___56 = imb___3.b[1];
          tmp___57 = jit->ip;
          (jit->ip) ++;
          *tmp___57 = imb___3.b[2];
          tmp___58 = jit->ip;
          (jit->ip) ++;
          *tmp___58 = imb___3.b[3];
          tmp___59 = jit->ip;
          (jit->ip) ++;
          *tmp___59 = imb___3.b[4];
          tmp___60 = jit->ip;
          (jit->ip) ++;
          *tmp___60 = imb___3.b[5];
          tmp___61 = jit->ip;
          (jit->ip) ++;
          *tmp___61 = imb___3.b[6];
          tmp___62 = jit->ip;
          (jit->ip) ++;
          *tmp___62 = imb___3.b[7];
          break;
        }
      } else {
        while (1) {
          imb___4.val = (int )((size_t )0);
          tmp___63 = jit->ip;
          (jit->ip) ++;
          *tmp___63 = imb___4.b[0];
          tmp___64 = jit->ip;
          (jit->ip) ++;
          *tmp___64 = imb___4.b[1];
          tmp___65 = jit->ip;
          (jit->ip) ++;
          *tmp___65 = imb___4.b[2];
          tmp___66 = jit->ip;
          (jit->ip) ++;
          *tmp___66 = imb___4.b[3];
          break;
        }
      }
      break;
    }
    while (1) {
      while (1) {
        _amd64_rex_bits___7 = (unsigned char)0;
        if ((int )_amd64_rex_bits___7 != 0) {
          tmp___67 = jit->ip;
          (jit->ip) ++;
          *tmp___67 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
        } else {
          tmp___67 = jit->ip;
          (jit->ip) ++;
          *tmp___67 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
        }
        break;
      }
      while (1) {
        tmp___68 = __builtin_expect(0L, 0L);
        if (tmp___68) {
          __assert_rtn("emit_cond_op", "./jitter-amd64.c", 2827, "1");
        }
        tmp___69 = jit->ip;
        (jit->ip) ++;
        *tmp___69 = (unsigned char)15;
        if (sign) {
          tmp___70 = jit->ip;
          (jit->ip) ++;
          *tmp___70 = (unsigned char )((int const   )x86_cc_signed_map[amd64_cond] + 32);
        } else {
          tmp___71 = jit->ip;
          (jit->ip) ++;
          *tmp___71 = (unsigned char )((int const   )x86_cc_unsigned_map[amd64_cond] + 32);
        }
        while (1) {
          while (1) {
            tmp___72 = jit->ip;
            (jit->ip) ++;
            *tmp___72 = (unsigned char )(3 << 6);
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___73 = 8;
        } else {
          tmp___73 = 0;
        }
        if (op->r_arg[0] > 7L) {
          tmp___74 = 1;
        } else {
          tmp___74 = 0;
        }
        _amd64_rex_bits___8 = (unsigned char )(tmp___73 | tmp___74);
        if ((int )_amd64_rex_bits___8 != 0) {
          tmp___75 = jit->ip;
          (jit->ip) ++;
          *tmp___75 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___75 = jit->ip;
          (jit->ip) ++;
          *tmp___75 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
        }
        break;
      }
      while (1) {
        if (sizeof(void *) == 8UL) {
          tmp___78 = 4UL;
        } else {
          tmp___78 = sizeof(void *);
        }
        if (tmp___78 == 1UL) {
          tmp___76 = jit->ip;
          (jit->ip) ++;
          *tmp___76 = (unsigned char)134;
        } else {
          tmp___77 = jit->ip;
          (jit->ip) ++;
          *tmp___77 = (unsigned char)135;
        }
        while (1) {
          while (1) {
            tmp___79 = jit->ip;
            (jit->ip) ++;
            *tmp___79 = (unsigned char )((long )(3 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
void x86_cc_signed_map_i$nit(void) 
{ 


  {
  x86_cc_signed_map[0] = (unsigned char const   )116;
  x86_cc_signed_map[1] = (unsigned char const   )117;
  x86_cc_signed_map[2] = (unsigned char const   )124;
  x86_cc_signed_map[3] = (unsigned char const   )126;
  x86_cc_signed_map[4] = (unsigned char const   )127;
  x86_cc_signed_map[5] = (unsigned char const   )125;
  x86_cc_signed_map[6] = (unsigned char const   )120;
  x86_cc_signed_map[7] = (unsigned char const   )121;
  x86_cc_signed_map[8] = (unsigned char const   )122;
  x86_cc_signed_map[9] = (unsigned char const   )123;
  x86_cc_signed_map[10] = (unsigned char const   )112;
  x86_cc_signed_map[11] = (unsigned char const   )113;
}
}
static void emit_sub_op(struct jit *jit , struct jit_op *op , int imm ) 
{ 
  unsigned char _amd64_rex_bits ;
  int tmp ;
  int tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  x86_imm_buf imb ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___43 ;
  int tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___48 ;
  int tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___58 ;
  int tmp___59 ;
  int tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  long tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___66 ;
  int tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;

  {
  if (imm) {
    if (op->r_arg[0] != op->r_arg[1]) {
      while (1) {
        while (1) {
          if (op->r_arg[0] > 7L) {
            tmp = 4;
          } else {
            tmp = 0;
          }
          if (op->r_arg[1] > 7L) {
            tmp___0 = 1;
          } else {
            tmp___0 = 0;
          }
          _amd64_rex_bits = (unsigned char )((8 | tmp) | tmp___0);
          if ((int )_amd64_rex_bits != 0) {
            tmp___1 = jit->ip;
            (jit->ip) ++;
            *tmp___1 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        tmp___2 = jit->ip;
        (jit->ip) ++;
        *tmp___2 = (unsigned char)141;
        while (1) {
          if (op->r_arg[1] == 16L) {
            while (1) {
              tmp___3 = jit->ip;
              (jit->ip) ++;
              *tmp___3 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb.val = (int )(- op->r_arg[2]);
              tmp___4 = jit->ip;
              (jit->ip) ++;
              *tmp___4 = imb.b[0];
              tmp___5 = jit->ip;
              (jit->ip) ++;
              *tmp___5 = imb.b[1];
              tmp___6 = jit->ip;
              (jit->ip) ++;
              *tmp___6 = imb.b[2];
              tmp___7 = jit->ip;
              (jit->ip) ++;
              *tmp___7 = imb.b[3];
              break;
            }
          } else {
            while (1) {
              if ((op->r_arg[1] & 7L) == 4L) {
                if (- op->r_arg[2] == 0L) {
                  while (1) {
                    tmp___8 = jit->ip;
                    (jit->ip) ++;
                    *tmp___8 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___9 = jit->ip;
                    (jit->ip) ++;
                    *tmp___9 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                } else
                if ((int )(- op->r_arg[2]) >= -128) {
                  if ((int )(- op->r_arg[2]) <= 127) {
                    while (1) {
                      tmp___10 = jit->ip;
                      (jit->ip) ++;
                      *tmp___10 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
                      break;
                    }
                    while (1) {
                      tmp___11 = jit->ip;
                      (jit->ip) ++;
                      *tmp___11 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(- op->r_arg[2] & 255L);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L;
                  }
                } else {
                  _L: /* CIL Label */ 
                  while (1) {
                    tmp___12 = jit->ip;
                    (jit->ip) ++;
                    *tmp___12 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___13 = jit->ip;
                    (jit->ip) ++;
                    *tmp___13 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    imb___0.val = (int )(- op->r_arg[2]);
                    tmp___14 = jit->ip;
                    (jit->ip) ++;
                    *tmp___14 = imb___0.b[0];
                    tmp___15 = jit->ip;
                    (jit->ip) ++;
                    *tmp___15 = imb___0.b[1];
                    tmp___16 = jit->ip;
                    (jit->ip) ++;
                    *tmp___16 = imb___0.b[2];
                    tmp___17 = jit->ip;
                    (jit->ip) ++;
                    *tmp___17 = imb___0.b[3];
                    break;
                  }
                }
                break;
              }
              if (- op->r_arg[2] == 0L) {
                if ((op->r_arg[1] & 7L) != 5L) {
                  while (1) {
                    tmp___18 = jit->ip;
                    (jit->ip) ++;
                    *tmp___18 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | ((op->r_arg[1] & 7L) & 7L));
                    break;
                  }
                  break;
                }
              }
              if ((int )(- op->r_arg[2]) >= -128) {
                if ((int )(- op->r_arg[2]) <= 127) {
                  while (1) {
                    tmp___19 = jit->ip;
                    (jit->ip) ++;
                    *tmp___19 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | ((op->r_arg[1] & 7L) & 7L));
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(- op->r_arg[2] & 255L);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___0;
                }
              } else {
                _L___0: /* CIL Label */ 
                while (1) {
                  tmp___20 = jit->ip;
                  (jit->ip) ++;
                  *tmp___20 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | ((op->r_arg[1] & 7L) & 7L));
                  break;
                }
                while (1) {
                  imb___1.val = (int )(- op->r_arg[2]);
                  tmp___21 = jit->ip;
                  (jit->ip) ++;
                  *tmp___21 = imb___1.b[0];
                  tmp___22 = jit->ip;
                  (jit->ip) ++;
                  *tmp___22 = imb___1.b[1];
                  tmp___23 = jit->ip;
                  (jit->ip) ++;
                  *tmp___23 = imb___1.b[2];
                  tmp___24 = jit->ip;
                  (jit->ip) ++;
                  *tmp___24 = imb___1.b[3];
                  break;
                }
              }
              break;
            }
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        if ((int )op->r_arg[2] >= -128) {
          if ((int )op->r_arg[2] <= 127) {
            while (1) {
              if (op->r_arg[0] > 7L) {
                tmp___25 = 1;
              } else {
                tmp___25 = 0;
              }
              _amd64_rex_bits___0 = (unsigned char )(8 | tmp___25);
              if ((int )_amd64_rex_bits___0 != 0) {
                tmp___26 = jit->ip;
                (jit->ip) ++;
                *tmp___26 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
              }
              break;
            }
            tmp___27 = jit->ip;
            (jit->ip) ++;
            *tmp___27 = (unsigned char)131;
            while (1) {
              while (1) {
                tmp___28 = jit->ip;
                (jit->ip) ++;
                *tmp___28 = (unsigned char )((long )((3 << 6) | (5 << 3)) | (op->r_arg[0] & 7L));
                break;
              }
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(op->r_arg[2] & 255L);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___1;
          }
        } else
        _L___1: /* CIL Label */ 
        if (op->r_arg[0] == 0L) {
          while (1) {
            _amd64_rex_bits___1 = (unsigned char)8;
            if ((int )_amd64_rex_bits___1 != 0) {
              tmp___29 = jit->ip;
              (jit->ip) ++;
              *tmp___29 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
            }
            break;
          }
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = (unsigned char )((5 << 3) + 5);
          while (1) {
            imb___2.val = (int )op->r_arg[2];
            tmp___31 = jit->ip;
            (jit->ip) ++;
            *tmp___31 = imb___2.b[0];
            tmp___32 = jit->ip;
            (jit->ip) ++;
            *tmp___32 = imb___2.b[1];
            tmp___33 = jit->ip;
            (jit->ip) ++;
            *tmp___33 = imb___2.b[2];
            tmp___34 = jit->ip;
            (jit->ip) ++;
            *tmp___34 = imb___2.b[3];
            break;
          }
        } else {
          while (1) {
            if (op->r_arg[0] > 7L) {
              tmp___35 = 1;
            } else {
              tmp___35 = 0;
            }
            _amd64_rex_bits___2 = (unsigned char )(8 | tmp___35);
            if ((int )_amd64_rex_bits___2 != 0) {
              tmp___36 = jit->ip;
              (jit->ip) ++;
              *tmp___36 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
            }
            break;
          }
          tmp___37 = jit->ip;
          (jit->ip) ++;
          *tmp___37 = (unsigned char)129;
          while (1) {
            while (1) {
              tmp___38 = jit->ip;
              (jit->ip) ++;
              *tmp___38 = (unsigned char )((long )((3 << 6) | (5 << 3)) | (op->r_arg[0] & 7L));
              break;
            }
            break;
          }
          while (1) {
            imb___3.val = (int )op->r_arg[2];
            tmp___39 = jit->ip;
            (jit->ip) ++;
            *tmp___39 = imb___3.b[0];
            tmp___40 = jit->ip;
            (jit->ip) ++;
            *tmp___40 = imb___3.b[1];
            tmp___41 = jit->ip;
            (jit->ip) ++;
            *tmp___41 = imb___3.b[2];
            tmp___42 = jit->ip;
            (jit->ip) ++;
            *tmp___42 = imb___3.b[3];
            break;
          }
        }
        break;
      }
    }
    return;
  }
  if (op->r_arg[0] == op->r_arg[1]) {
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___43 = 4;
        } else {
          tmp___43 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___44 = 1;
        } else {
          tmp___44 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )((8 | tmp___43) | tmp___44);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___45 = jit->ip;
          (jit->ip) ++;
          *tmp___45 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      tmp___46 = jit->ip;
      (jit->ip) ++;
      *tmp___46 = (unsigned char )((5 << 3) + 3);
      while (1) {
        while (1) {
          tmp___47 = jit->ip;
          (jit->ip) ++;
          *tmp___47 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else
  if (op->r_arg[0] == op->r_arg[2]) {
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___48 = 4;
        } else {
          tmp___48 = 0;
        }
        if (op->r_arg[1] > 7L) {
          tmp___49 = 1;
        } else {
          tmp___49 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )((8 | tmp___48) | tmp___49);
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___50 = jit->ip;
          (jit->ip) ++;
          *tmp___50 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      tmp___51 = jit->ip;
      (jit->ip) ++;
      *tmp___51 = (unsigned char )((5 << 3) + 3);
      while (1) {
        while (1) {
          tmp___52 = jit->ip;
          (jit->ip) ++;
          *tmp___52 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___53 = 1;
        } else {
          tmp___53 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(8 | tmp___53);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___54 = jit->ip;
          (jit->ip) ++;
          *tmp___54 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      while (1) {
        tmp___55 = jit->ip;
        (jit->ip) ++;
        *tmp___55 = (unsigned char)247;
        while (1) {
          while (1) {
            tmp___56 = jit->ip;
            (jit->ip) ++;
            *tmp___56 = (unsigned char )((long )((3 << 6) | (3 << 3)) | ((op->r_arg[0] & 7L) & 7L));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___57 = jit->ip;
        (jit->ip) ++;
        *tmp___57 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___58 = 8;
        } else {
          tmp___58 = 0;
        }
        if (op->r_arg[0] > 7L) {
          tmp___59 = 4;
        } else {
          tmp___59 = 0;
        }
        if (op->r_arg[1] > 7L) {
          tmp___60 = 1;
        } else {
          tmp___60 = 0;
        }
        _amd64_rex_bits___6 = (unsigned char )((tmp___58 | tmp___59) | tmp___60);
        if ((int )_amd64_rex_bits___6 != 0) {
          tmp___61 = jit->ip;
          (jit->ip) ++;
          *tmp___61 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___61 = jit->ip;
          (jit->ip) ++;
          *tmp___61 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___62 = jit->ip;
      (jit->ip) ++;
      *tmp___62 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___63 = jit->ip;
      (jit->ip) ++;
      *tmp___63 = (unsigned char)139;
      break;
      default: 
      tmp___64 = __builtin_expect(1L, 0L);
      if (tmp___64) {
        __assert_rtn("emit_sub_op", "./jitter-amd64.c", 2594, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___65 = jit->ip;
          (jit->ip) ++;
          *tmp___65 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___66 = 4;
        } else {
          tmp___66 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___67 = 1;
        } else {
          tmp___67 = 0;
        }
        _amd64_rex_bits___7 = (unsigned char )((8 | tmp___66) | tmp___67);
        if ((int )_amd64_rex_bits___7 != 0) {
          tmp___68 = jit->ip;
          (jit->ip) ++;
          *tmp___68 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
        }
        break;
      }
      tmp___69 = jit->ip;
      (jit->ip) ++;
      *tmp___69 = (unsigned char )((5 << 3) + 3);
      while (1) {
        while (1) {
          tmp___70 = jit->ip;
          (jit->ip) ++;
          *tmp___70 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
static void emit_mul_op(struct jit *jit , struct jit_op *op , int imm , int sign ,
                        int high_bytes ) 
{ 
  jit_value dest ;
  jit_value factor1 ;
  jit_value factor2 ;
  unsigned char _amd64_rex_bits ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  x86_imm_buf imb ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___48 ;
  int tmp___49 ;
  int tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  long tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___62 ;
  int tmp___63 ;
  int tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___84 ;
  int tmp___85 ;
  int tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  long tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___98 ;
  int tmp___99 ;
  int tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___115 ;
  unsigned char *tmp___116 ;
  unsigned char *tmp___117 ;
  unsigned char *tmp___118 ;
  int ax_in_use ;
  int tmp___119 ;
  int dx_in_use ;
  int tmp___120 ;
  unsigned char _amd64_rex_bits___8 ;
  unsigned char *tmp___121 ;
  unsigned char *tmp___122 ;
  unsigned char _amd64_rex_bits___9 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  unsigned char *tmp___125 ;
  unsigned char _amd64_rex_bits___10 ;
  int tmp___126 ;
  int tmp___127 ;
  unsigned char *tmp___128 ;
  unsigned char *tmp___129 ;
  unsigned char *tmp___130 ;
  long tmp___131 ;
  unsigned char *tmp___132 ;
  unsigned char _amd64_rex_bits___11 ;
  int tmp___133 ;
  unsigned char *tmp___134 ;
  unsigned char *tmp___135 ;
  amd64_imm_buf imb___7 ;
  unsigned char *tmp___136 ;
  unsigned char *tmp___137 ;
  unsigned char *tmp___138 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  unsigned char *tmp___141 ;
  unsigned char *tmp___142 ;
  unsigned char *tmp___143 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  unsigned char *tmp___146 ;
  unsigned char *tmp___147 ;
  unsigned char _amd64_rex_bits___12 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;
  unsigned char *tmp___150 ;
  int tmp___151 ;
  unsigned char _amd64_rex_bits___13 ;
  int tmp___152 ;
  unsigned char *tmp___153 ;
  unsigned char *tmp___154 ;
  unsigned char *tmp___155 ;
  int tmp___156 ;
  unsigned char _amd64_rex_bits___14 ;
  int tmp___157 ;
  unsigned char *tmp___158 ;
  unsigned char *tmp___159 ;
  unsigned char *tmp___160 ;
  int tmp___161 ;
  unsigned char *tmp___162 ;
  unsigned char _amd64_rex_bits___15 ;
  int tmp___163 ;
  int tmp___164 ;
  unsigned char *tmp___165 ;
  unsigned char *tmp___166 ;
  unsigned char *tmp___167 ;
  long tmp___168 ;
  unsigned char *tmp___169 ;
  unsigned char _amd64_rex_bits___16 ;
  int tmp___170 ;
  unsigned char *tmp___171 ;
  unsigned char *tmp___172 ;
  unsigned char *tmp___173 ;
  int tmp___174 ;
  unsigned char *tmp___175 ;
  unsigned char _amd64_rex_bits___17 ;
  int tmp___176 ;
  int tmp___177 ;
  unsigned char *tmp___178 ;
  unsigned char *tmp___179 ;
  unsigned char *tmp___180 ;
  long tmp___181 ;
  unsigned char *tmp___182 ;
  unsigned char *tmp___183 ;
  unsigned char _amd64_rex_bits___18 ;
  int tmp___184 ;
  int tmp___185 ;
  unsigned char *tmp___186 ;
  unsigned char *tmp___187 ;
  unsigned char *tmp___188 ;
  long tmp___189 ;
  unsigned char *tmp___190 ;
  unsigned char _amd64_rex_bits___19 ;
  unsigned char *tmp___191 ;
  unsigned char *tmp___192 ;
  unsigned char _amd64_rex_bits___20 ;
  unsigned char *tmp___193 ;
  unsigned char *tmp___194 ;

  {
  dest = op->r_arg[0];
  factor1 = op->r_arg[1];
  factor2 = op->r_arg[2];
  if (! high_bytes) {
    if (imm) {
      switch (factor2) {
      case 2L: 
      if (factor1 == dest) {
        while (1) {
          while (1) {
            if (dest > 7L) {
              tmp = 1;
            } else {
              tmp = 0;
            }
            _amd64_rex_bits = (unsigned char )(8 | tmp);
            if ((int )_amd64_rex_bits != 0) {
              tmp___0 = jit->ip;
              (jit->ip) ++;
              *tmp___0 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          while (1) {
            tmp___1 = jit->ip;
            (jit->ip) ++;
            *tmp___1 = (unsigned char)209;
            while (1) {
              while (1) {
                tmp___2 = jit->ip;
                (jit->ip) ++;
                *tmp___2 = (unsigned char )((long )((3 << 6) | (4 << 3)) | ((dest & 7L) & 7L));
                break;
              }
              break;
            }
            break;
          }
          break;
        }
      } else {
        while (1) {
          while (1) {
            if (dest > 7L) {
              tmp___5 = 4;
            } else {
              tmp___5 = 0;
            }
            if (factor1 > 7L) {
              tmp___6 = 2;
            } else {
              tmp___6 = 0;
            }
            if (factor1 > 7L) {
              tmp___7 = 1;
            } else {
              tmp___7 = 0;
            }
            _amd64_rex_bits___0 = (unsigned char )(((8 | tmp___5) | tmp___6) | tmp___7);
            if ((int )_amd64_rex_bits___0 != 0) {
              tmp___8 = jit->ip;
              (jit->ip) ++;
              *tmp___8 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
            }
            break;
          }
          while (1) {
            tmp___9 = jit->ip;
            (jit->ip) ++;
            *tmp___9 = (unsigned char)141;
            while (1) {
              if (factor1 == -1L) {
                while (1) {
                  tmp___10 = jit->ip;
                  (jit->ip) ++;
                  *tmp___10 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
                  break;
                }
                while (1) {
                  tmp___11 = jit->ip;
                  (jit->ip) ++;
                  *tmp___11 = (unsigned char )((((factor1 & 7L) & 7L) << 3) | 5L);
                  break;
                }
                while (1) {
                  imb.val = 0;
                  tmp___12 = jit->ip;
                  (jit->ip) ++;
                  *tmp___12 = imb.b[0];
                  tmp___13 = jit->ip;
                  (jit->ip) ++;
                  *tmp___13 = imb.b[1];
                  tmp___14 = jit->ip;
                  (jit->ip) ++;
                  *tmp___14 = imb.b[2];
                  tmp___15 = jit->ip;
                  (jit->ip) ++;
                  *tmp___15 = imb.b[3];
                  break;
                }
              } else
              if (factor1 != 5L) {
                while (1) {
                  tmp___16 = jit->ip;
                  (jit->ip) ++;
                  *tmp___16 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
                  break;
                }
                while (1) {
                  tmp___17 = jit->ip;
                  (jit->ip) ++;
                  *tmp___17 = (unsigned char )(((((factor1 & 7L) & 7L) & 7L) << 3) | ((factor1 & 7L) & 7L));
                  break;
                }
              } else {
                while (1) {
                  tmp___18 = jit->ip;
                  (jit->ip) ++;
                  *tmp___18 = (unsigned char )(((long )(1 << 6) | (((dest & 7L) & 7L) << 3)) | 4L);
                  break;
                }
                while (1) {
                  tmp___19 = jit->ip;
                  (jit->ip) ++;
                  *tmp___19 = (unsigned char )(((((factor1 & 7L) & 7L) & 7L) << 3) | ((factor1 & 7L) & 7L));
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char)0;
                  (jit->ip) ++;
                  break;
                }
              }
              break;
            }
            break;
          }
          break;
        }
      }
      return;
      case 3L: 
      while (1) {
        while (1) {
          if (dest > 7L) {
            tmp___26 = 4;
          } else {
            tmp___26 = 0;
          }
          if (factor1 > 7L) {
            tmp___27 = 2;
          } else {
            tmp___27 = 0;
          }
          if (factor1 > 7L) {
            tmp___28 = 1;
          } else {
            tmp___28 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )(((8 | tmp___26) | tmp___27) | tmp___28);
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___29 = jit->ip;
            (jit->ip) ++;
            *tmp___29 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        while (1) {
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = (unsigned char)141;
          while (1) {
            if (factor1 == -1L) {
              while (1) {
                tmp___31 = jit->ip;
                (jit->ip) ++;
                *tmp___31 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___32 = jit->ip;
                (jit->ip) ++;
                *tmp___32 = (unsigned char )(((long )(1 << 6) | (((factor1 & 7L) & 7L) << 3)) | 5L);
                break;
              }
              while (1) {
                imb___1.val = 0;
                tmp___33 = jit->ip;
                (jit->ip) ++;
                *tmp___33 = imb___1.b[0];
                tmp___34 = jit->ip;
                (jit->ip) ++;
                *tmp___34 = imb___1.b[1];
                tmp___35 = jit->ip;
                (jit->ip) ++;
                *tmp___35 = imb___1.b[2];
                tmp___36 = jit->ip;
                (jit->ip) ++;
                *tmp___36 = imb___1.b[3];
                break;
              }
            } else
            if (factor1 != 5L) {
              while (1) {
                tmp___37 = jit->ip;
                (jit->ip) ++;
                *tmp___37 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___38 = jit->ip;
                (jit->ip) ++;
                *tmp___38 = (unsigned char )(((long )(1 << 6) | ((((factor1 & 7L) & 7L) & 7L) << 3)) | ((factor1 & 7L) & 7L));
                break;
              }
            } else {
              while (1) {
                tmp___39 = jit->ip;
                (jit->ip) ++;
                *tmp___39 = (unsigned char )(((long )(1 << 6) | (((dest & 7L) & 7L) << 3)) | 4L);
                break;
              }
              while (1) {
                tmp___40 = jit->ip;
                (jit->ip) ++;
                *tmp___40 = (unsigned char )(((long )(1 << 6) | ((((factor1 & 7L) & 7L) & 7L) << 3)) | ((factor1 & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
            }
            break;
          }
          break;
        }
        break;
      }
      return;
      case 4L: 
      if (factor1 != dest) {
        while (1) {
          if (sizeof(void *) == 2UL) {
            tmp___47 = jit->ip;
            (jit->ip) ++;
            *tmp___47 = (unsigned char)102;
          }
          while (1) {
            if (sizeof(void *) > 4UL) {
              tmp___48 = 8;
            } else {
              tmp___48 = 0;
            }
            if (dest > 7L) {
              tmp___49 = 4;
            } else {
              tmp___49 = 0;
            }
            if (factor1 > 7L) {
              tmp___50 = 1;
            } else {
              tmp___50 = 0;
            }
            _amd64_rex_bits___2 = (unsigned char )((tmp___48 | tmp___49) | tmp___50);
            if ((int )_amd64_rex_bits___2 != 0) {
              tmp___51 = jit->ip;
              (jit->ip) ++;
              *tmp___51 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
            } else
            if (sizeof(void *) == 1UL) {
              tmp___51 = jit->ip;
              (jit->ip) ++;
              *tmp___51 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
            }
            break;
          }
          switch (sizeof(void *)) {
          case 1UL: 
          tmp___52 = jit->ip;
          (jit->ip) ++;
          *tmp___52 = (unsigned char)138;
          break;
          case 8UL: 
          case 4UL: 
          case 2UL: 
          tmp___53 = jit->ip;
          (jit->ip) ++;
          *tmp___53 = (unsigned char)139;
          break;
          default: 
          tmp___54 = __builtin_expect(1L, 0L);
          if (tmp___54) {
            __assert_rtn("emit_mul_op", "./jitter-amd64.c", 2660, "0");
          }
          }
          while (1) {
            while (1) {
              tmp___55 = jit->ip;
              (jit->ip) ++;
              *tmp___55 = (unsigned char )(((long )(3 << 6) | ((dest & 7L) << 3)) | (factor1 & 7L));
              break;
            }
            break;
          }
          break;
        }
      }
      while (1) {
        while (1) {
          if (dest > 7L) {
            tmp___56 = 1;
          } else {
            tmp___56 = 0;
          }
          _amd64_rex_bits___3 = (unsigned char )(8 | tmp___56);
          if ((int )_amd64_rex_bits___3 != 0) {
            tmp___57 = jit->ip;
            (jit->ip) ++;
            *tmp___57 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          }
          break;
        }
        while (1) {
          tmp___60 = jit->ip;
          (jit->ip) ++;
          *tmp___60 = (unsigned char)193;
          while (1) {
            while (1) {
              tmp___61 = jit->ip;
              (jit->ip) ++;
              *tmp___61 = (unsigned char )((long )((3 << 6) | (4 << 3)) | ((dest & 7L) & 7L));
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)2;
            (jit->ip) ++;
            break;
          }
          break;
        }
        break;
      }
      return;
      case 5L: 
      while (1) {
        while (1) {
          if (dest > 7L) {
            tmp___62 = 4;
          } else {
            tmp___62 = 0;
          }
          if (factor1 > 7L) {
            tmp___63 = 2;
          } else {
            tmp___63 = 0;
          }
          if (factor1 > 7L) {
            tmp___64 = 1;
          } else {
            tmp___64 = 0;
          }
          _amd64_rex_bits___4 = (unsigned char )(((8 | tmp___62) | tmp___63) | tmp___64);
          if ((int )_amd64_rex_bits___4 != 0) {
            tmp___65 = jit->ip;
            (jit->ip) ++;
            *tmp___65 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
          }
          break;
        }
        while (1) {
          tmp___66 = jit->ip;
          (jit->ip) ++;
          *tmp___66 = (unsigned char)141;
          while (1) {
            if (factor1 == -1L) {
              while (1) {
                tmp___67 = jit->ip;
                (jit->ip) ++;
                *tmp___67 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___68 = jit->ip;
                (jit->ip) ++;
                *tmp___68 = (unsigned char )(((long )(2 << 6) | (((factor1 & 7L) & 7L) << 3)) | 5L);
                break;
              }
              while (1) {
                imb___3.val = 0;
                tmp___69 = jit->ip;
                (jit->ip) ++;
                *tmp___69 = imb___3.b[0];
                tmp___70 = jit->ip;
                (jit->ip) ++;
                *tmp___70 = imb___3.b[1];
                tmp___71 = jit->ip;
                (jit->ip) ++;
                *tmp___71 = imb___3.b[2];
                tmp___72 = jit->ip;
                (jit->ip) ++;
                *tmp___72 = imb___3.b[3];
                break;
              }
            } else
            if (factor1 != 5L) {
              while (1) {
                tmp___73 = jit->ip;
                (jit->ip) ++;
                *tmp___73 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___74 = jit->ip;
                (jit->ip) ++;
                *tmp___74 = (unsigned char )(((long )(2 << 6) | ((((factor1 & 7L) & 7L) & 7L) << 3)) | ((factor1 & 7L) & 7L));
                break;
              }
            } else {
              while (1) {
                tmp___75 = jit->ip;
                (jit->ip) ++;
                *tmp___75 = (unsigned char )(((long )(1 << 6) | (((dest & 7L) & 7L) << 3)) | 4L);
                break;
              }
              while (1) {
                tmp___76 = jit->ip;
                (jit->ip) ++;
                *tmp___76 = (unsigned char )(((long )(2 << 6) | ((((factor1 & 7L) & 7L) & 7L) << 3)) | ((factor1 & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
            }
            break;
          }
          break;
        }
        break;
      }
      return;
      case 8L: 
      if (factor1 != dest) {
        while (1) {
          if (sizeof(void *) == 2UL) {
            tmp___83 = jit->ip;
            (jit->ip) ++;
            *tmp___83 = (unsigned char)102;
          }
          while (1) {
            if (sizeof(void *) > 4UL) {
              tmp___84 = 8;
            } else {
              tmp___84 = 0;
            }
            if (dest > 7L) {
              tmp___85 = 4;
            } else {
              tmp___85 = 0;
            }
            if (factor1 > 7L) {
              tmp___86 = 1;
            } else {
              tmp___86 = 0;
            }
            _amd64_rex_bits___5 = (unsigned char )((tmp___84 | tmp___85) | tmp___86);
            if ((int )_amd64_rex_bits___5 != 0) {
              tmp___87 = jit->ip;
              (jit->ip) ++;
              *tmp___87 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
            } else
            if (sizeof(void *) == 1UL) {
              tmp___87 = jit->ip;
              (jit->ip) ++;
              *tmp___87 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
            }
            break;
          }
          switch (sizeof(void *)) {
          case 1UL: 
          tmp___88 = jit->ip;
          (jit->ip) ++;
          *tmp___88 = (unsigned char)138;
          break;
          case 8UL: 
          case 4UL: 
          case 2UL: 
          tmp___89 = jit->ip;
          (jit->ip) ++;
          *tmp___89 = (unsigned char)139;
          break;
          default: 
          tmp___90 = __builtin_expect(1L, 0L);
          if (tmp___90) {
            __assert_rtn("emit_mul_op", "./jitter-amd64.c", 2665, "0");
          }
          }
          while (1) {
            while (1) {
              tmp___91 = jit->ip;
              (jit->ip) ++;
              *tmp___91 = (unsigned char )(((long )(3 << 6) | ((dest & 7L) << 3)) | (factor1 & 7L));
              break;
            }
            break;
          }
          break;
        }
      }
      while (1) {
        while (1) {
          if (dest > 7L) {
            tmp___92 = 1;
          } else {
            tmp___92 = 0;
          }
          _amd64_rex_bits___6 = (unsigned char )(8 | tmp___92);
          if ((int )_amd64_rex_bits___6 != 0) {
            tmp___93 = jit->ip;
            (jit->ip) ++;
            *tmp___93 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
          }
          break;
        }
        while (1) {
          tmp___96 = jit->ip;
          (jit->ip) ++;
          *tmp___96 = (unsigned char)193;
          while (1) {
            while (1) {
              tmp___97 = jit->ip;
              (jit->ip) ++;
              *tmp___97 = (unsigned char )((long )((3 << 6) | (4 << 3)) | ((dest & 7L) & 7L));
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)3;
            (jit->ip) ++;
            break;
          }
          break;
        }
        break;
      }
      return;
      case 9L: 
      while (1) {
        while (1) {
          if (dest > 7L) {
            tmp___98 = 4;
          } else {
            tmp___98 = 0;
          }
          if (factor1 > 7L) {
            tmp___99 = 2;
          } else {
            tmp___99 = 0;
          }
          if (factor1 > 7L) {
            tmp___100 = 1;
          } else {
            tmp___100 = 0;
          }
          _amd64_rex_bits___7 = (unsigned char )(((8 | tmp___98) | tmp___99) | tmp___100);
          if ((int )_amd64_rex_bits___7 != 0) {
            tmp___101 = jit->ip;
            (jit->ip) ++;
            *tmp___101 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
          }
          break;
        }
        while (1) {
          tmp___102 = jit->ip;
          (jit->ip) ++;
          *tmp___102 = (unsigned char)141;
          while (1) {
            if (factor1 == -1L) {
              while (1) {
                tmp___103 = jit->ip;
                (jit->ip) ++;
                *tmp___103 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___104 = jit->ip;
                (jit->ip) ++;
                *tmp___104 = (unsigned char )(((long )(3 << 6) | (((factor1 & 7L) & 7L) << 3)) | 5L);
                break;
              }
              while (1) {
                imb___5.val = 0;
                tmp___105 = jit->ip;
                (jit->ip) ++;
                *tmp___105 = imb___5.b[0];
                tmp___106 = jit->ip;
                (jit->ip) ++;
                *tmp___106 = imb___5.b[1];
                tmp___107 = jit->ip;
                (jit->ip) ++;
                *tmp___107 = imb___5.b[2];
                tmp___108 = jit->ip;
                (jit->ip) ++;
                *tmp___108 = imb___5.b[3];
                break;
              }
            } else
            if (factor1 != 5L) {
              while (1) {
                tmp___109 = jit->ip;
                (jit->ip) ++;
                *tmp___109 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___110 = jit->ip;
                (jit->ip) ++;
                *tmp___110 = (unsigned char )(((long )(3 << 6) | ((((factor1 & 7L) & 7L) & 7L) << 3)) | ((factor1 & 7L) & 7L));
                break;
              }
            } else {
              while (1) {
                tmp___111 = jit->ip;
                (jit->ip) ++;
                *tmp___111 = (unsigned char )(((long )(1 << 6) | (((dest & 7L) & 7L) << 3)) | 4L);
                break;
              }
              while (1) {
                tmp___112 = jit->ip;
                (jit->ip) ++;
                *tmp___112 = (unsigned char )(((long )(3 << 6) | ((((factor1 & 7L) & 7L) & 7L) << 3)) | ((factor1 & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
            }
            break;
          }
          break;
        }
        break;
      }
      return;
      }
    }
  }
  tmp___119 = jit_reg_in_use(op, 0, 0);
  ax_in_use = tmp___119;
  tmp___120 = jit_reg_in_use(op, 2, 0);
  dx_in_use = tmp___120;
  if (dest != 0L) {
    if (ax_in_use) {
      while (1) {
        while (1) {
          _amd64_rex_bits___8 = (unsigned char)0;
          if ((int )_amd64_rex_bits___8 != 0) {
            tmp___121 = jit->ip;
            (jit->ip) ++;
            *tmp___121 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
          }
          break;
        }
        tmp___122 = jit->ip;
        (jit->ip) ++;
        *tmp___122 = (unsigned char)80;
        break;
      }
    }
  }
  if (dest != 2L) {
    if (dx_in_use) {
      while (1) {
        while (1) {
          _amd64_rex_bits___9 = (unsigned char)0;
          if ((int )_amd64_rex_bits___9 != 0) {
            tmp___123 = jit->ip;
            (jit->ip) ++;
            *tmp___123 = (unsigned char )(64 | (int )_amd64_rex_bits___9);
          }
          break;
        }
        tmp___124 = jit->ip;
        (jit->ip) ++;
        *tmp___124 = (unsigned char)82;
        break;
      }
    }
  }
  if (imm) {
    if (factor1 != 0L) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp___125 = jit->ip;
          (jit->ip) ++;
          *tmp___125 = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___126 = 8;
          } else {
            tmp___126 = 0;
          }
          if (factor1 > 7L) {
            tmp___127 = 1;
          } else {
            tmp___127 = 0;
          }
          _amd64_rex_bits___10 = (unsigned char )(tmp___126 | tmp___127);
          if ((int )_amd64_rex_bits___10 != 0) {
            tmp___128 = jit->ip;
            (jit->ip) ++;
            *tmp___128 = (unsigned char )(64 | (int )_amd64_rex_bits___10);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___128 = jit->ip;
            (jit->ip) ++;
            *tmp___128 = (unsigned char )(64 | (int )_amd64_rex_bits___10);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___129 = jit->ip;
        (jit->ip) ++;
        *tmp___129 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___130 = jit->ip;
        (jit->ip) ++;
        *tmp___130 = (unsigned char)139;
        break;
        default: 
        tmp___131 = __builtin_expect(1L, 0L);
        if (tmp___131) {
          __assert_rtn("emit_mul_op", "./jitter-amd64.c", 2682, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___132 = jit->ip;
            (jit->ip) ++;
            *tmp___132 = (unsigned char )((long )(3 << 6) | (factor1 & 7L));
            break;
          }
          break;
        }
        break;
      }
    }
    while (1) {
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___133 = 8;
        } else {
          tmp___133 = 0;
        }
        _amd64_rex_bits___11 = (unsigned char )tmp___133;
        if ((int )_amd64_rex_bits___11 != 0) {
          tmp___134 = jit->ip;
          (jit->ip) ++;
          *tmp___134 = (unsigned char )(64 | (int )_amd64_rex_bits___11);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___134 = jit->ip;
          (jit->ip) ++;
          *tmp___134 = (unsigned char )(64 | (int )_amd64_rex_bits___11);
        }
        break;
      }
      tmp___135 = jit->ip;
      (jit->ip) ++;
      *tmp___135 = (unsigned char)186;
      if (sizeof(void *) == 8UL) {
        while (1) {
          imb___7.val = (size_t )factor2;
          tmp___136 = jit->ip;
          (jit->ip) ++;
          *tmp___136 = imb___7.b[0];
          tmp___137 = jit->ip;
          (jit->ip) ++;
          *tmp___137 = imb___7.b[1];
          tmp___138 = jit->ip;
          (jit->ip) ++;
          *tmp___138 = imb___7.b[2];
          tmp___139 = jit->ip;
          (jit->ip) ++;
          *tmp___139 = imb___7.b[3];
          tmp___140 = jit->ip;
          (jit->ip) ++;
          *tmp___140 = imb___7.b[4];
          tmp___141 = jit->ip;
          (jit->ip) ++;
          *tmp___141 = imb___7.b[5];
          tmp___142 = jit->ip;
          (jit->ip) ++;
          *tmp___142 = imb___7.b[6];
          tmp___143 = jit->ip;
          (jit->ip) ++;
          *tmp___143 = imb___7.b[7];
          break;
        }
      } else {
        while (1) {
          imb___8.val = (int )((size_t )factor2);
          tmp___144 = jit->ip;
          (jit->ip) ++;
          *tmp___144 = imb___8.b[0];
          tmp___145 = jit->ip;
          (jit->ip) ++;
          *tmp___145 = imb___8.b[1];
          tmp___146 = jit->ip;
          (jit->ip) ++;
          *tmp___146 = imb___8.b[2];
          tmp___147 = jit->ip;
          (jit->ip) ++;
          *tmp___147 = imb___8.b[3];
          break;
        }
      }
      break;
    }
    while (1) {
      while (1) {
        _amd64_rex_bits___12 = (unsigned char)8;
        if ((int )_amd64_rex_bits___12 != 0) {
          tmp___148 = jit->ip;
          (jit->ip) ++;
          *tmp___148 = (unsigned char )(64 | (int )_amd64_rex_bits___12);
        }
        break;
      }
      while (1) {
        tmp___149 = jit->ip;
        (jit->ip) ++;
        *tmp___149 = (unsigned char)247;
        while (1) {
          while (1) {
            tmp___150 = jit->ip;
            (jit->ip) ++;
            if (sign) {
              tmp___151 = 1;
            } else {
              tmp___151 = 0;
            }
            *tmp___150 = (unsigned char )(((3 << 6) | (((4 + tmp___151) & 7) << 3)) | 2);
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  } else
  if (factor1 == 0L) {
    while (1) {
      while (1) {
        if (factor2 > 7L) {
          tmp___152 = 1;
        } else {
          tmp___152 = 0;
        }
        _amd64_rex_bits___13 = (unsigned char )(8 | tmp___152);
        if ((int )_amd64_rex_bits___13 != 0) {
          tmp___153 = jit->ip;
          (jit->ip) ++;
          *tmp___153 = (unsigned char )(64 | (int )_amd64_rex_bits___13);
        }
        break;
      }
      while (1) {
        tmp___154 = jit->ip;
        (jit->ip) ++;
        *tmp___154 = (unsigned char)247;
        while (1) {
          while (1) {
            tmp___155 = jit->ip;
            (jit->ip) ++;
            if (sign) {
              tmp___156 = 1;
            } else {
              tmp___156 = 0;
            }
            *tmp___155 = (unsigned char )((long )((3 << 6) | (((4 + tmp___156) & 7) << 3)) | ((factor2 & 7L) & 7L));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  } else
  if (factor2 == 0L) {
    while (1) {
      while (1) {
        if (factor1 > 7L) {
          tmp___157 = 1;
        } else {
          tmp___157 = 0;
        }
        _amd64_rex_bits___14 = (unsigned char )(8 | tmp___157);
        if ((int )_amd64_rex_bits___14 != 0) {
          tmp___158 = jit->ip;
          (jit->ip) ++;
          *tmp___158 = (unsigned char )(64 | (int )_amd64_rex_bits___14);
        }
        break;
      }
      while (1) {
        tmp___159 = jit->ip;
        (jit->ip) ++;
        *tmp___159 = (unsigned char)247;
        while (1) {
          while (1) {
            tmp___160 = jit->ip;
            (jit->ip) ++;
            if (sign) {
              tmp___161 = 1;
            } else {
              tmp___161 = 0;
            }
            *tmp___160 = (unsigned char )((long )((3 << 6) | (((4 + tmp___161) & 7) << 3)) | ((factor1 & 7L) & 7L));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___162 = jit->ip;
        (jit->ip) ++;
        *tmp___162 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___163 = 8;
        } else {
          tmp___163 = 0;
        }
        if (factor1 > 7L) {
          tmp___164 = 1;
        } else {
          tmp___164 = 0;
        }
        _amd64_rex_bits___15 = (unsigned char )(tmp___163 | tmp___164);
        if ((int )_amd64_rex_bits___15 != 0) {
          tmp___165 = jit->ip;
          (jit->ip) ++;
          *tmp___165 = (unsigned char )(64 | (int )_amd64_rex_bits___15);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___165 = jit->ip;
          (jit->ip) ++;
          *tmp___165 = (unsigned char )(64 | (int )_amd64_rex_bits___15);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___166 = jit->ip;
      (jit->ip) ++;
      *tmp___166 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___167 = jit->ip;
      (jit->ip) ++;
      *tmp___167 = (unsigned char)139;
      break;
      default: 
      tmp___168 = __builtin_expect(1L, 0L);
      if (tmp___168) {
        __assert_rtn("emit_mul_op", "./jitter-amd64.c", 2689, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___169 = jit->ip;
          (jit->ip) ++;
          *tmp___169 = (unsigned char )((long )(3 << 6) | (factor1 & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (factor2 > 7L) {
          tmp___170 = 1;
        } else {
          tmp___170 = 0;
        }
        _amd64_rex_bits___16 = (unsigned char )(8 | tmp___170);
        if ((int )_amd64_rex_bits___16 != 0) {
          tmp___171 = jit->ip;
          (jit->ip) ++;
          *tmp___171 = (unsigned char )(64 | (int )_amd64_rex_bits___16);
        }
        break;
      }
      while (1) {
        tmp___172 = jit->ip;
        (jit->ip) ++;
        *tmp___172 = (unsigned char)247;
        while (1) {
          while (1) {
            tmp___173 = jit->ip;
            (jit->ip) ++;
            if (sign) {
              tmp___174 = 1;
            } else {
              tmp___174 = 0;
            }
            *tmp___173 = (unsigned char )((long )((3 << 6) | (((4 + tmp___174) & 7) << 3)) | ((factor2 & 7L) & 7L));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  }
  if (! high_bytes) {
    if (dest != 0L) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp___175 = jit->ip;
          (jit->ip) ++;
          *tmp___175 = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___176 = 8;
          } else {
            tmp___176 = 0;
          }
          if (dest > 7L) {
            tmp___177 = 4;
          } else {
            tmp___177 = 0;
          }
          _amd64_rex_bits___17 = (unsigned char )(tmp___176 | tmp___177);
          if ((int )_amd64_rex_bits___17 != 0) {
            tmp___178 = jit->ip;
            (jit->ip) ++;
            *tmp___178 = (unsigned char )(64 | (int )_amd64_rex_bits___17);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___178 = jit->ip;
            (jit->ip) ++;
            *tmp___178 = (unsigned char )(64 | (int )_amd64_rex_bits___17);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___179 = jit->ip;
        (jit->ip) ++;
        *tmp___179 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___180 = jit->ip;
        (jit->ip) ++;
        *tmp___180 = (unsigned char)139;
        break;
        default: 
        tmp___181 = __builtin_expect(1L, 0L);
        if (tmp___181) {
          __assert_rtn("emit_mul_op", "./jitter-amd64.c", 2695, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___182 = jit->ip;
            (jit->ip) ++;
            *tmp___182 = (unsigned char )((long )(3 << 6) | ((dest & 7L) << 3));
            break;
          }
          break;
        }
        break;
      }
    }
  } else
  if (dest != 2L) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___183 = jit->ip;
        (jit->ip) ++;
        *tmp___183 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___184 = 8;
        } else {
          tmp___184 = 0;
        }
        if (dest > 7L) {
          tmp___185 = 4;
        } else {
          tmp___185 = 0;
        }
        _amd64_rex_bits___18 = (unsigned char )(tmp___184 | tmp___185);
        if ((int )_amd64_rex_bits___18 != 0) {
          tmp___186 = jit->ip;
          (jit->ip) ++;
          *tmp___186 = (unsigned char )(64 | (int )_amd64_rex_bits___18);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___186 = jit->ip;
          (jit->ip) ++;
          *tmp___186 = (unsigned char )(64 | (int )_amd64_rex_bits___18);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___187 = jit->ip;
      (jit->ip) ++;
      *tmp___187 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___188 = jit->ip;
      (jit->ip) ++;
      *tmp___188 = (unsigned char)139;
      break;
      default: 
      tmp___189 = __builtin_expect(1L, 0L);
      if (tmp___189) {
        __assert_rtn("emit_mul_op", "./jitter-amd64.c", 2697, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___190 = jit->ip;
          (jit->ip) ++;
          *tmp___190 = (unsigned char )(((long )(3 << 6) | ((dest & 7L) << 3)) | 2L);
          break;
        }
        break;
      }
      break;
    }
  }
  if (dest != 2L) {
    if (dx_in_use) {
      while (1) {
        while (1) {
          _amd64_rex_bits___19 = (unsigned char)0;
          if ((int )_amd64_rex_bits___19 != 0) {
            tmp___191 = jit->ip;
            (jit->ip) ++;
            *tmp___191 = (unsigned char )(64 | (int )_amd64_rex_bits___19);
          }
          break;
        }
        tmp___192 = jit->ip;
        (jit->ip) ++;
        *tmp___192 = (unsigned char)90;
        break;
      }
    }
  }
  if (dest != 0L) {
    if (ax_in_use) {
      while (1) {
        while (1) {
          _amd64_rex_bits___20 = (unsigned char)0;
          if ((int )_amd64_rex_bits___20 != 0) {
            tmp___193 = jit->ip;
            (jit->ip) ++;
            *tmp___193 = (unsigned char )(64 | (int )_amd64_rex_bits___20);
          }
          break;
        }
        tmp___194 = jit->ip;
        (jit->ip) ++;
        *tmp___194 = (unsigned char)88;
        break;
      }
    }
  }
  return;
}
}
__inline static int jit_set_get(jit_set *s , int value ) 
{ 
  jit_tree *tmp ;

  {
  tmp = jit_tree_search(s->root, (jit_tree_key )value);
  return ((unsigned long )tmp != (unsigned long )((void *)0));
}
}
static void emit_save_all_regs(struct jit *jit , jit_op *op ) 
{ 
  struct jit_reg_allocator *al ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp ;
  unsigned char *tmp___0 ;
  int i ;
  jit_hw_reg *reg ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  int tmp___4 ;
  int i___0 ;
  jit_hw_reg *reg___0 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  x86_imm_buf imb ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  int tmp___48 ;
  int alignment ;
  int tmp___49 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char _amd64_rex_bits___6 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char _amd64_rex_bits___7 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;

  {
  al = jit->reg_al;
  while (1) {
    while (1) {
      _amd64_rex_bits = (unsigned char)8;
      if ((int )_amd64_rex_bits != 0) {
        tmp = jit->ip;
        (jit->ip) ++;
        *tmp = (unsigned char )(64 | (int )_amd64_rex_bits);
      }
      break;
    }
    while (1) {
      tmp___0 = jit->ip;
      (jit->ip) ++;
      *tmp___0 = (unsigned char)156;
      break;
    }
    break;
  }
  i = 0;
  while (i < al->gp_reg_cnt) {
    reg = al->gp_regs + i;
    if (! reg->callee_saved) {
      tmp___4 = is_active_register(al, reg, op);
      if (tmp___4) {
        while (1) {
          while (1) {
            if (reg->id > 7) {
              tmp___1 = 1;
            } else {
              tmp___1 = 0;
            }
            _amd64_rex_bits___0 = (unsigned char )tmp___1;
            if ((int )_amd64_rex_bits___0 != 0) {
              tmp___2 = jit->ip;
              (jit->ip) ++;
              *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
            }
            break;
          }
          tmp___3 = jit->ip;
          (jit->ip) ++;
          *tmp___3 = (unsigned char )(80 + (reg->id & 7));
          break;
        }
      }
    }
    i ++;
  }
  i___0 = 0;
  while (i___0 < al->fp_reg_cnt) {
    reg___0 = al->fp_regs + i___0;
    if (! reg___0->callee_saved) {
      tmp___48 = is_active_register(al, reg___0, op);
      if (tmp___48) {
        while (1) {
          while (1) {
            _amd64_rex_bits___1 = (unsigned char)8;
            if ((int )_amd64_rex_bits___1 != 0) {
              tmp___5 = jit->ip;
              (jit->ip) ++;
              *tmp___5 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
            }
            break;
          }
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___7 = jit->ip;
              (jit->ip) ++;
              *tmp___7 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)8;
            (jit->ip) ++;
            break;
          }
          break;
        }
        while (1) {
          tmp___21 = jit->ip;
          (jit->ip) ++;
          *tmp___21 = (unsigned char)102;
          while (1) {
            if (reg___0->id > 7) {
              tmp___22 = 4;
            } else {
              tmp___22 = 0;
            }
            _amd64_rex_bits___4 = (unsigned char )tmp___22;
            if ((int )_amd64_rex_bits___4 != 0) {
              tmp___23 = jit->ip;
              (jit->ip) ++;
              *tmp___23 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
            }
            break;
          }
          tmp___24 = jit->ip;
          (jit->ip) ++;
          *tmp___24 = (unsigned char)15;
          tmp___25 = jit->ip;
          (jit->ip) ++;
          *tmp___25 = (unsigned char)19;
          while (1) {
            while (1) {
              while (1) {
                tmp___31 = jit->ip;
                (jit->ip) ++;
                *tmp___31 = (unsigned char )((((reg___0->id & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___32 = jit->ip;
                (jit->ip) ++;
                *tmp___32 = (unsigned char )((4 << 3) | 4);
                break;
              }
              break;
              while (1) {
                tmp___41 = jit->ip;
                (jit->ip) ++;
                *tmp___41 = (unsigned char )((((reg___0->id & 7) & 7) << 3) | 4);
                break;
              }
              break;
              while (1) {
                tmp___42 = jit->ip;
                (jit->ip) ++;
                *tmp___42 = (unsigned char )(((1 << 6) | (((reg___0->id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
              break;
            }
            break;
          }
          break;
        }
      }
    }
    while (1) {
      break;
    }
    i___0 ++;
  }
  tmp___49 = required_stack_space_for_regs(jit, op);
  alignment = tmp___49 % 16;
  if (alignment != 0) {
    while (1) {
      if (16 - alignment >= -128) {
        if (16 - alignment <= 127) {
          while (1) {
            _amd64_rex_bits___5 = (unsigned char)8;
            if ((int )_amd64_rex_bits___5 != 0) {
              tmp___50 = jit->ip;
              (jit->ip) ++;
              *tmp___50 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
            }
            break;
          }
          tmp___51 = jit->ip;
          (jit->ip) ++;
          *tmp___51 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___52 = jit->ip;
              (jit->ip) ++;
              *tmp___52 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )((16 - alignment) & 255);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
        while (1) {
          _amd64_rex_bits___7 = (unsigned char)8;
          if ((int )_amd64_rex_bits___7 != 0) {
            tmp___59 = jit->ip;
            (jit->ip) ++;
            *tmp___59 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
          }
          break;
        }
        tmp___60 = jit->ip;
        (jit->ip) ++;
        *tmp___60 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___61 = jit->ip;
            (jit->ip) ++;
            *tmp___61 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
            break;
          }
          break;
        }
        while (1) {
          imb___5.val = 16 - alignment;
          tmp___62 = jit->ip;
          (jit->ip) ++;
          *tmp___62 = imb___5.b[0];
          tmp___63 = jit->ip;
          (jit->ip) ++;
          *tmp___63 = imb___5.b[1];
          tmp___64 = jit->ip;
          (jit->ip) ++;
          *tmp___64 = imb___5.b[2];
          tmp___65 = jit->ip;
          (jit->ip) ++;
          *tmp___65 = imb___5.b[3];
          break;
        }
      }
      break;
    }
  }
  return;
}
}
static void ob_append(struct output_buf *ob , char *str ) 
{ 
  int len ;
  size_t tmp ;
  unsigned long tmp___0 ;

  {
  tmp = strlen((char const   *)str);
  len = (int )tmp;
  ob_assert_space(ob, len);
  tmp___0 = __builtin_object_size((void *)ob->buf, 1);
  __builtin___strcat_chk(ob->buf, (char const   *)str, tmp___0);
  ob->size += (size_t )len;
  return;
}
}
void jit_check_code(struct jit *jit , int warnings ) 
{ 
  char buf[8192] ;
  jit_op *op ;
  jit_op *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
  jit_expand_patches_and_labels(jit);
  jit_dead_code_analysis(jit, 0);
  jit_prepare_reg_counts(jit);
  jit_prepare_arguments(jit);
  jit_flw_analysis(jit);
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while (op) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 536U) {
      jit->current_func = op;
    }
    if (! op->debug_info) {
      goto __Cont;
    }
    buf[0] = (char )'\000';
    if (warnings & 1) {
      tmp___0 = check_dead_code(op, buf);
      (op->debug_info)->warnings |= tmp___0;
    }
    if (warnings & 128) {
      tmp___1 = check_missing_patches(op, buf);
      (op->debug_info)->warnings |= tmp___1;
    }
    if (warnings & 2) {
      tmp___2 = check_op_without_effect(op, buf);
      (op->debug_info)->warnings |= tmp___2;
    }
    if (warnings & 8) {
      tmp___3 = check_uninitialized_registers(op, buf);
      (op->debug_info)->warnings |= tmp___3;
    }
    if (warnings & 4) {
      tmp___4 = check_argument_sizes(op, buf);
      (op->debug_info)->warnings |= tmp___4;
    }
    if (warnings & 256) {
      tmp___5 = check_register_types(jit, op, buf);
      (op->debug_info)->warnings |= tmp___5;
    }
    if (warnings & 16) {
      tmp___6 = check_data_alignment(op, buf);
      (op->debug_info)->warnings |= tmp___6;
    }
    if (warnings & 64) {
      tmp___7 = check_data_references(op, buf);
      (op->debug_info)->warnings |= tmp___7;
    }
    if (warnings & 32) {
      tmp___8 = check_code_references(op, buf);
      (op->debug_info)->warnings |= tmp___8;
    }
    if ((op->debug_info)->warnings) {
      report_warning(jit, op, buf);
    }
    __Cont: /* CIL Label */ 
    op = op->next;
  }
  cleanup(jit);
  return;
}
}
__inline static jit_tree *fixup(jit_tree *h ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  tmp = is_red(h->right);
  if (tmp) {
    h = rotate_left(h);
  }
  tmp___0 = is_red(h->left);
  if (tmp___0) {
    tmp___1 = is_red((h->left)->left);
    if (tmp___1) {
      h = rotate_right(h);
      color_flip(h);
    }
  }
  tmp___2 = is_red(h->left);
  if (tmp___2) {
    tmp___3 = is_red(h->right);
    if (tmp___3) {
      color_flip(h);
    }
  }
  return (h);
}
}
void jit_optimize_st_ops(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 256U) {
      if (op->prev) {
        if ((int )(op->prev)->code == 842) {
          if (op->arg[1] == (op->prev)->arg[0]) {
            if ((op->prev)->arg[1] >= (-0x7FFFFFFF-1)) {
              if ((op->prev)->arg[1] <= 2147483647L) {
                tmp___0 = jit_set_get(op->live_out, (int )op->arg[1]);
                if (! tmp___0) {
                  if (! ((int )op->code & 2)) {
                    op->code = (unsigned short)649;
                    op->spec = (unsigned char )((2 << 2) | 1);
                  } else {
                    op->code = (unsigned short)650;
                    op->spec = (unsigned char )((2 << 2) | 2);
                  }
                  op->arg[1] = (op->prev)->arg[1];
                  (op->prev)->code = (unsigned short)528;
                  (op->prev)->spec = (unsigned char)0;
                }
              }
            }
          }
        }
      }
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 512U) {
      if (op->prev) {
        if ((int )(op->prev)->code == 842) {
          if (op->arg[2] == (op->prev)->arg[0]) {
            if ((op->prev)->arg[1] >= (-0x7FFFFFFF-1)) {
              if ((op->prev)->arg[1] <= 2147483647L) {
                tmp___1 = jit_set_get(op->live_out, (int )op->arg[2]);
                if (! tmp___1) {
                  if (! ((int )op->code & 2)) {
                    op->code = (unsigned short)185;
                    op->spec = (unsigned char )(((2 << 4) | (1 << 2)) | 1);
                  } else {
                    op->code = (unsigned short)186;
                    op->spec = (unsigned char )(((2 << 4) | (1 << 2)) | 2);
                  }
                  op->arg[2] = (op->prev)->arg[1];
                  (op->prev)->code = (unsigned short)528;
                  (op->prev)->spec = (unsigned char)0;
                }
              }
            }
          }
        }
      }
    }
    op = op->next;
  }
  return;
}
}
static void emit_sse_fstx_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                             jit_value a3 ) 
{ 
  int live ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___15 ;
  int tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  x86_imm_buf imb ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___61 ;
  int tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___68 ;
  jit_value tmp___69 ;
  int tmp___70 ;
  jit_value tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___98 ;
  int tmp___99 ;
  int tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___116 ;
  unsigned char *tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char *tmp___119 ;

  {
  if ((unsigned long )op->arg_size == sizeof(float )) {
    tmp = jit_set_get(op->live_out, (int )op->arg[2]);
    live = tmp;
    if (live) {
      while (1) {
        while (1) {
          tmp___0 = jit->ip;
          (jit->ip) ++;
          *tmp___0 = (unsigned char)102;
          while (1) {
            if (a3 > 7L) {
              tmp___1 = 4;
            } else {
              tmp___1 = 0;
            }
            if (a3 > 7L) {
              tmp___2 = 1;
            } else {
              tmp___2 = 0;
            }
            _amd64_rex_bits = (unsigned char )(tmp___1 | tmp___2);
            if ((int )_amd64_rex_bits != 0) {
              tmp___3 = jit->ip;
              (jit->ip) ++;
              *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___4 = jit->ip;
          (jit->ip) ++;
          *tmp___4 = (unsigned char)15;
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char)198;
          while (1) {
            while (1) {
              tmp___6 = jit->ip;
              (jit->ip) ++;
              *tmp___6 = (unsigned char )(((long )(3 << 6) | ((a3 & 7L) << 3)) | (a3 & 7L));
              break;
            }
            break;
          }
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)0;
          (jit->ip) ++;
          break;
        }
        break;
      }
    }
    while (1) {
      tmp___7 = jit->ip;
      (jit->ip) ++;
      *tmp___7 = (unsigned char)242;
      while (1) {
        if (a3 > 7L) {
          tmp___8 = 4;
        } else {
          tmp___8 = 0;
        }
        if (a3 > 7L) {
          tmp___9 = 1;
        } else {
          tmp___9 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(tmp___8 | tmp___9);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___10 = jit->ip;
          (jit->ip) ++;
          *tmp___10 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      tmp___11 = jit->ip;
      (jit->ip) ++;
      *tmp___11 = (unsigned char)15;
      tmp___12 = jit->ip;
      (jit->ip) ++;
      *tmp___12 = (unsigned char)90;
      while (1) {
        while (1) {
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = (unsigned char )(((long )(3 << 6) | ((a3 & 7L) << 3)) | (a3 & 7L));
          break;
        }
        break;
      }
      break;
    }
    if ((int )op->code & 2) {
      while (1) {
        tmp___14 = jit->ip;
        (jit->ip) ++;
        *tmp___14 = (unsigned char)243;
        while (1) {
          if (a3 > 7L) {
            tmp___15 = 4;
          } else {
            tmp___15 = 0;
          }
          if (a2 > 7L) {
            tmp___16 = 1;
          } else {
            tmp___16 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )(tmp___15 | tmp___16);
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___17 = jit->ip;
            (jit->ip) ++;
            *tmp___17 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___18 = jit->ip;
        (jit->ip) ++;
        *tmp___18 = (unsigned char)15;
        tmp___19 = jit->ip;
        (jit->ip) ++;
        *tmp___19 = (unsigned char)17;
        while (1) {
          if ((a2 & 7L) == 4L) {
            if (a1 == 0L) {
              while (1) {
                tmp___20 = jit->ip;
                (jit->ip) ++;
                *tmp___20 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___21 = jit->ip;
                (jit->ip) ++;
                *tmp___21 = (unsigned char )((4 << 3) | 4);
                break;
              }
            } else
            if ((int )a1 >= -128) {
              if ((int )a1 <= 127) {
                while (1) {
                  tmp___22 = jit->ip;
                  (jit->ip) ++;
                  *tmp___22 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
                  break;
                }
                while (1) {
                  tmp___23 = jit->ip;
                  (jit->ip) ++;
                  *tmp___23 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(a1 & 255L);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L;
              }
            } else {
              _L: /* CIL Label */ 
              while (1) {
                tmp___24 = jit->ip;
                (jit->ip) ++;
                *tmp___24 = (unsigned char )(((long )(2 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
                break;
              }
              while (1) {
                tmp___25 = jit->ip;
                (jit->ip) ++;
                *tmp___25 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                imb.val = (int )a1;
                tmp___26 = jit->ip;
                (jit->ip) ++;
                *tmp___26 = imb.b[0];
                tmp___27 = jit->ip;
                (jit->ip) ++;
                *tmp___27 = imb.b[1];
                tmp___28 = jit->ip;
                (jit->ip) ++;
                *tmp___28 = imb.b[2];
                tmp___29 = jit->ip;
                (jit->ip) ++;
                *tmp___29 = imb.b[3];
                break;
              }
            }
            break;
          }
          if (a1 == 0L) {
            if ((a2 & 7L) != 5L) {
              while (1) {
                tmp___30 = jit->ip;
                (jit->ip) ++;
                *tmp___30 = (unsigned char )((((a3 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                break;
              }
              break;
            }
          }
          if ((int )a1 >= -128) {
            if ((int )a1 <= 127) {
              while (1) {
                tmp___31 = jit->ip;
                (jit->ip) ++;
                *tmp___31 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(a1 & 255L);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___0;
            }
          } else {
            _L___0: /* CIL Label */ 
            while (1) {
              tmp___32 = jit->ip;
              (jit->ip) ++;
              *tmp___32 = (unsigned char )(((long )(2 << 6) | (((a3 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
              break;
            }
            while (1) {
              imb___0.val = (int )a1;
              tmp___33 = jit->ip;
              (jit->ip) ++;
              *tmp___33 = imb___0.b[0];
              tmp___34 = jit->ip;
              (jit->ip) ++;
              *tmp___34 = imb___0.b[1];
              tmp___35 = jit->ip;
              (jit->ip) ++;
              *tmp___35 = imb___0.b[2];
              tmp___36 = jit->ip;
              (jit->ip) ++;
              *tmp___36 = imb___0.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        tmp___37 = jit->ip;
        (jit->ip) ++;
        *tmp___37 = (unsigned char)243;
        while (1) {
          if (a3 > 7L) {
            tmp___38 = 4;
          } else {
            tmp___38 = 0;
          }
          if (a2 > 7L) {
            tmp___39 = 2;
          } else {
            tmp___39 = 0;
          }
          if (a1 > 7L) {
            tmp___40 = 1;
          } else {
            tmp___40 = 0;
          }
          _amd64_rex_bits___2 = (unsigned char )(((8 | tmp___38) | tmp___39) | tmp___40);
          if ((int )_amd64_rex_bits___2 != 0) {
            tmp___41 = jit->ip;
            (jit->ip) ++;
            *tmp___41 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
          }
          break;
        }
        tmp___42 = jit->ip;
        (jit->ip) ++;
        *tmp___42 = (unsigned char)15;
        tmp___43 = jit->ip;
        (jit->ip) ++;
        *tmp___43 = (unsigned char)17;
        while (1) {
          if (a1 == -1L) {
            while (1) {
              tmp___44 = jit->ip;
              (jit->ip) ++;
              *tmp___44 = (unsigned char )(((a3 & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___45 = jit->ip;
              (jit->ip) ++;
              *tmp___45 = (unsigned char )(((a2 & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb___1.val = 0;
              tmp___46 = jit->ip;
              (jit->ip) ++;
              *tmp___46 = imb___1.b[0];
              tmp___47 = jit->ip;
              (jit->ip) ++;
              *tmp___47 = imb___1.b[1];
              tmp___48 = jit->ip;
              (jit->ip) ++;
              *tmp___48 = imb___1.b[2];
              tmp___49 = jit->ip;
              (jit->ip) ++;
              *tmp___49 = imb___1.b[3];
              break;
            }
          } else
          if (a1 != 5L) {
            while (1) {
              tmp___50 = jit->ip;
              (jit->ip) ++;
              *tmp___50 = (unsigned char )(((a3 & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___51 = jit->ip;
              (jit->ip) ++;
              *tmp___51 = (unsigned char )((((a2 & 7L) & 7L) << 3) | ((a1 & 7L) & 7L));
              break;
            }
          } else {
            while (1) {
              tmp___52 = jit->ip;
              (jit->ip) ++;
              *tmp___52 = (unsigned char )(((long )(1 << 6) | ((a3 & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___53 = jit->ip;
              (jit->ip) ++;
              *tmp___53 = (unsigned char )((((a2 & 7L) & 7L) << 3) | ((a1 & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)0;
              (jit->ip) ++;
              break;
            }
          }
          break;
        }
        break;
      }
    }
    if (live) {
      while (1) {
        while (1) {
          tmp___60 = jit->ip;
          (jit->ip) ++;
          *tmp___60 = (unsigned char)102;
          while (1) {
            if (a3 > 7L) {
              tmp___61 = 4;
            } else {
              tmp___61 = 0;
            }
            if (a3 > 7L) {
              tmp___62 = 1;
            } else {
              tmp___62 = 0;
            }
            _amd64_rex_bits___3 = (unsigned char )(tmp___61 | tmp___62);
            if ((int )_amd64_rex_bits___3 != 0) {
              tmp___63 = jit->ip;
              (jit->ip) ++;
              *tmp___63 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
            }
            break;
          }
          tmp___64 = jit->ip;
          (jit->ip) ++;
          *tmp___64 = (unsigned char)15;
          tmp___65 = jit->ip;
          (jit->ip) ++;
          *tmp___65 = (unsigned char)198;
          while (1) {
            while (1) {
              tmp___66 = jit->ip;
              (jit->ip) ++;
              *tmp___66 = (unsigned char )(((long )(3 << 6) | ((a3 & 7L) << 3)) | (a3 & 7L));
              break;
            }
            break;
          }
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)1;
          (jit->ip) ++;
          break;
        }
        break;
      }
    }
  } else
  if ((int )op->code & 2) {
    while (1) {
      tmp___67 = jit->ip;
      (jit->ip) ++;
      *tmp___67 = (unsigned char)102;
      while (1) {
        if (a3 > 7L) {
          tmp___68 = 4;
        } else {
          tmp___68 = 0;
        }
        if (a2 == 16L) {
          tmp___71 = (jit_value )0;
        } else {
          tmp___71 = a2;
        }
        if (tmp___71 > 7L) {
          tmp___70 = 1;
        } else {
          tmp___70 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )(tmp___68 | tmp___70);
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___72 = jit->ip;
          (jit->ip) ++;
          *tmp___72 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      tmp___73 = jit->ip;
      (jit->ip) ++;
      *tmp___73 = (unsigned char)15;
      tmp___74 = jit->ip;
      (jit->ip) ++;
      *tmp___74 = (unsigned char)19;
      while (1) {
        if (a2 == 16L) {
          while (1) {
            tmp___75 = jit->ip;
            (jit->ip) ++;
            *tmp___75 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
            break;
          }
          while (1) {
            imb___3.val = (int )a1;
            tmp___76 = jit->ip;
            (jit->ip) ++;
            *tmp___76 = imb___3.b[0];
            tmp___77 = jit->ip;
            (jit->ip) ++;
            *tmp___77 = imb___3.b[1];
            tmp___78 = jit->ip;
            (jit->ip) ++;
            *tmp___78 = imb___3.b[2];
            tmp___79 = jit->ip;
            (jit->ip) ++;
            *tmp___79 = imb___3.b[3];
            break;
          }
        } else {
          while (1) {
            if ((a2 & 7L) == 4L) {
              if (a1 == 0L) {
                while (1) {
                  tmp___80 = jit->ip;
                  (jit->ip) ++;
                  *tmp___80 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 4L);
                  break;
                }
                while (1) {
                  tmp___81 = jit->ip;
                  (jit->ip) ++;
                  *tmp___81 = (unsigned char )((4 << 3) | 4);
                  break;
                }
              } else
              if ((int )a1 >= -128) {
                if ((int )a1 <= 127) {
                  while (1) {
                    tmp___82 = jit->ip;
                    (jit->ip) ++;
                    *tmp___82 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___83 = jit->ip;
                    (jit->ip) ++;
                    *tmp___83 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(a1 & 255L);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___1;
                }
              } else {
                _L___1: /* CIL Label */ 
                while (1) {
                  tmp___84 = jit->ip;
                  (jit->ip) ++;
                  *tmp___84 = (unsigned char )(((long )(2 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
                  break;
                }
                while (1) {
                  tmp___85 = jit->ip;
                  (jit->ip) ++;
                  *tmp___85 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  imb___4.val = (int )a1;
                  tmp___86 = jit->ip;
                  (jit->ip) ++;
                  *tmp___86 = imb___4.b[0];
                  tmp___87 = jit->ip;
                  (jit->ip) ++;
                  *tmp___87 = imb___4.b[1];
                  tmp___88 = jit->ip;
                  (jit->ip) ++;
                  *tmp___88 = imb___4.b[2];
                  tmp___89 = jit->ip;
                  (jit->ip) ++;
                  *tmp___89 = imb___4.b[3];
                  break;
                }
              }
              break;
            }
            if (a1 == 0L) {
              if ((a2 & 7L) != 5L) {
                while (1) {
                  tmp___90 = jit->ip;
                  (jit->ip) ++;
                  *tmp___90 = (unsigned char )((((a3 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                  break;
                }
                break;
              }
            }
            if ((int )a1 >= -128) {
              if ((int )a1 <= 127) {
                while (1) {
                  tmp___91 = jit->ip;
                  (jit->ip) ++;
                  *tmp___91 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(a1 & 255L);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___2;
              }
            } else {
              _L___2: /* CIL Label */ 
              while (1) {
                tmp___92 = jit->ip;
                (jit->ip) ++;
                *tmp___92 = (unsigned char )(((long )(2 << 6) | (((a3 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                break;
              }
              while (1) {
                imb___5.val = (int )a1;
                tmp___93 = jit->ip;
                (jit->ip) ++;
                *tmp___93 = imb___5.b[0];
                tmp___94 = jit->ip;
                (jit->ip) ++;
                *tmp___94 = imb___5.b[1];
                tmp___95 = jit->ip;
                (jit->ip) ++;
                *tmp___95 = imb___5.b[2];
                tmp___96 = jit->ip;
                (jit->ip) ++;
                *tmp___96 = imb___5.b[3];
                break;
              }
            }
            break;
          }
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      tmp___97 = jit->ip;
      (jit->ip) ++;
      *tmp___97 = (unsigned char)102;
      while (1) {
        if (a3 > 7L) {
          tmp___98 = 4;
        } else {
          tmp___98 = 0;
        }
        if (a2 > 7L) {
          tmp___99 = 2;
        } else {
          tmp___99 = 0;
        }
        if (a1 > 7L) {
          tmp___100 = 1;
        } else {
          tmp___100 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(((8 | tmp___98) | tmp___99) | tmp___100);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___101 = jit->ip;
          (jit->ip) ++;
          *tmp___101 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      tmp___102 = jit->ip;
      (jit->ip) ++;
      *tmp___102 = (unsigned char)15;
      tmp___103 = jit->ip;
      (jit->ip) ++;
      *tmp___103 = (unsigned char)19;
      while (1) {
        if (a1 == -1L) {
          while (1) {
            tmp___104 = jit->ip;
            (jit->ip) ++;
            *tmp___104 = (unsigned char )(((a3 & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___105 = jit->ip;
            (jit->ip) ++;
            *tmp___105 = (unsigned char )(((a2 & 7L) << 3) | 5L);
            break;
          }
          while (1) {
            imb___6.val = 0;
            tmp___106 = jit->ip;
            (jit->ip) ++;
            *tmp___106 = imb___6.b[0];
            tmp___107 = jit->ip;
            (jit->ip) ++;
            *tmp___107 = imb___6.b[1];
            tmp___108 = jit->ip;
            (jit->ip) ++;
            *tmp___108 = imb___6.b[2];
            tmp___109 = jit->ip;
            (jit->ip) ++;
            *tmp___109 = imb___6.b[3];
            break;
          }
        } else
        if (a1 != 5L) {
          while (1) {
            tmp___110 = jit->ip;
            (jit->ip) ++;
            *tmp___110 = (unsigned char )(((a3 & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___111 = jit->ip;
            (jit->ip) ++;
            *tmp___111 = (unsigned char )((((a2 & 7L) & 7L) << 3) | ((a1 & 7L) & 7L));
            break;
          }
        } else {
          while (1) {
            tmp___112 = jit->ip;
            (jit->ip) ++;
            *tmp___112 = (unsigned char )(((long )(1 << 6) | ((a3 & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            tmp___113 = jit->ip;
            (jit->ip) ++;
            *tmp___113 = (unsigned char )((((a2 & 7L) & 7L) << 3) | ((a1 & 7L) & 7L));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)0;
            (jit->ip) ++;
            break;
          }
        }
        break;
      }
      break;
    }
  }
  return;
}
}
static void print_reg_liveness_callback(jit_tree_key key , jit_tree_value value ,
                                        void *disasm ) 
{ 
  char buf[256] ;

  {
  jit_get_reg_name((struct jit_disasm *)disasm, buf, (int )key);
  printf((char const   */* __restrict  */)"%s ", buf);
  return;
}
}
static void emit_div_op(struct jit *jit , struct jit_op *op , int imm , int sign ,
                        int modulo ) 
{ 
  jit_value dest ;
  jit_value dividend ;
  jit_value divisor ;
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  long tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  int tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  int tmp___15 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  int tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  int tmp___23 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  int tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  int tmp___31 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  x86_imm_buf imb ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char _amd64_rex_bits___7 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char _amd64_rex_bits___9 ;
  int tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char _amd64_rex_bits___10 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char _amd64_rex_bits___11 ;
  int tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  int ax_in_use ;
  int tmp___86 ;
  int dx_in_use ;
  int tmp___87 ;
  unsigned char _amd64_rex_bits___12 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char _amd64_rex_bits___13 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char _amd64_rex_bits___14 ;
  int tmp___93 ;
  int tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  long tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char _amd64_rex_bits___15 ;
  unsigned char *tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char _amd64_rex_bits___16 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char _amd64_rex_bits___17 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char _amd64_rex_bits___18 ;
  int tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  amd64_imm_buf imb___5 ;
  unsigned char *tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  unsigned char *tmp___116 ;
  unsigned char *tmp___117 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___118 ;
  unsigned char *tmp___119 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  unsigned char _amd64_rex_bits___19 ;
  unsigned char *tmp___122 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  int tmp___125 ;
  unsigned char _amd64_rex_bits___20 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char _amd64_rex_bits___21 ;
  int tmp___128 ;
  unsigned char *tmp___129 ;
  unsigned char *tmp___130 ;
  unsigned char *tmp___131 ;
  unsigned char _amd64_rex_bits___22 ;
  int tmp___132 ;
  int tmp___133 ;
  unsigned char *tmp___134 ;
  unsigned char *tmp___135 ;
  unsigned char *tmp___136 ;
  long tmp___137 ;
  unsigned char *tmp___138 ;
  unsigned char _amd64_rex_bits___23 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  unsigned char _amd64_rex_bits___24 ;
  unsigned char *tmp___141 ;
  unsigned char *tmp___142 ;
  unsigned char *tmp___143 ;
  unsigned char _amd64_rex_bits___25 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  unsigned char *tmp___146 ;
  int tmp___147 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;
  int tmp___150 ;
  unsigned char *tmp___151 ;
  unsigned char *tmp___152 ;
  int tmp___153 ;
  unsigned char *tmp___154 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___155 ;
  unsigned char *tmp___156 ;
  unsigned char *tmp___157 ;
  unsigned char *tmp___158 ;
  unsigned char *tmp___159 ;
  int tmp___160 ;
  unsigned char *tmp___161 ;
  int tmp___162 ;
  unsigned char *tmp___163 ;
  int tmp___164 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___165 ;
  unsigned char *tmp___166 ;
  unsigned char *tmp___167 ;
  unsigned char *tmp___168 ;
  unsigned char _amd64_rex_bits___26 ;
  unsigned char *tmp___169 ;
  unsigned char *tmp___170 ;
  unsigned char *tmp___171 ;
  unsigned char _amd64_rex_bits___27 ;
  unsigned char *tmp___172 ;
  unsigned char *tmp___173 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___174 ;
  unsigned char *tmp___175 ;
  unsigned char *tmp___176 ;
  unsigned char *tmp___177 ;
  unsigned char _amd64_rex_bits___28 ;
  unsigned char *tmp___178 ;
  unsigned char *tmp___179 ;
  unsigned char *tmp___180 ;
  x86_imm_buf imb___10 ;
  unsigned char *tmp___181 ;
  unsigned char *tmp___182 ;
  unsigned char *tmp___183 ;
  unsigned char *tmp___184 ;
  unsigned char _amd64_rex_bits___29 ;
  int tmp___185 ;
  unsigned char *tmp___186 ;
  unsigned char *tmp___187 ;
  unsigned char *tmp___188 ;
  int tmp___189 ;
  unsigned char *tmp___190 ;
  unsigned char _amd64_rex_bits___30 ;
  int tmp___191 ;
  int tmp___192 ;
  unsigned char *tmp___193 ;
  unsigned char *tmp___194 ;
  unsigned char *tmp___195 ;
  long tmp___196 ;
  unsigned char *tmp___197 ;
  unsigned char *tmp___198 ;
  unsigned char _amd64_rex_bits___31 ;
  int tmp___199 ;
  int tmp___200 ;
  unsigned char *tmp___201 ;
  unsigned char *tmp___202 ;
  unsigned char *tmp___203 ;
  long tmp___204 ;
  unsigned char *tmp___205 ;
  unsigned char _amd64_rex_bits___32 ;
  unsigned char *tmp___206 ;
  unsigned char *tmp___207 ;
  unsigned char _amd64_rex_bits___33 ;
  unsigned char *tmp___208 ;
  unsigned char *tmp___209 ;

  {
  dest = op->r_arg[0];
  dividend = op->r_arg[1];
  divisor = op->r_arg[2];
  if (imm) {
    if (divisor == 2L) {
      goto _L;
    } else
    if (divisor == 4L) {
      goto _L;
    } else
    if (divisor == 8L) {
      _L: /* CIL Label */ 
      if (dest != dividend) {
        while (1) {
          if (sizeof(void *) == 2UL) {
            tmp = jit->ip;
            (jit->ip) ++;
            *tmp = (unsigned char)102;
          }
          while (1) {
            if (sizeof(void *) > 4UL) {
              tmp___0 = 8;
            } else {
              tmp___0 = 0;
            }
            if (dest > 7L) {
              tmp___1 = 4;
            } else {
              tmp___1 = 0;
            }
            if (dividend > 7L) {
              tmp___2 = 1;
            } else {
              tmp___2 = 0;
            }
            _amd64_rex_bits = (unsigned char )((tmp___0 | tmp___1) | tmp___2);
            if ((int )_amd64_rex_bits != 0) {
              tmp___3 = jit->ip;
              (jit->ip) ++;
              *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
            } else
            if (sizeof(void *) == 1UL) {
              tmp___3 = jit->ip;
              (jit->ip) ++;
              *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          switch (sizeof(void *)) {
          case 1UL: 
          tmp___4 = jit->ip;
          (jit->ip) ++;
          *tmp___4 = (unsigned char)138;
          break;
          case 8UL: 
          case 4UL: 
          case 2UL: 
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char)139;
          break;
          default: 
          tmp___6 = __builtin_expect(1L, 0L);
          if (tmp___6) {
            __assert_rtn("emit_div_op", "./jitter-amd64.c", 2710, "0");
          }
          }
          while (1) {
            while (1) {
              tmp___7 = jit->ip;
              (jit->ip) ++;
              *tmp___7 = (unsigned char )(((long )(3 << 6) | ((dest & 7L) << 3)) | (dividend & 7L));
              break;
            }
            break;
          }
          break;
        }
      }
      if (! modulo) {
        switch (divisor) {
        case 2L: 
        while (1) {
          while (1) {
            if (dest > 7L) {
              tmp___8 = 1;
            } else {
              tmp___8 = 0;
            }
            _amd64_rex_bits___0 = (unsigned char )(8 | tmp___8);
            if ((int )_amd64_rex_bits___0 != 0) {
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
            }
            break;
          }
          while (1) {
            tmp___10 = jit->ip;
            (jit->ip) ++;
            *tmp___10 = (unsigned char)209;
            while (1) {
              while (1) {
                tmp___11 = jit->ip;
                (jit->ip) ++;
                if (sign) {
                  tmp___12 = 7;
                } else {
                  tmp___12 = 5;
                }
                *tmp___11 = (unsigned char )((long )((3 << 6) | ((tmp___12 & 7) << 3)) | ((dest & 7L) & 7L));
                break;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
        case 4L: 
        while (1) {
          while (1) {
            if (dest > 7L) {
              tmp___16 = 1;
            } else {
              tmp___16 = 0;
            }
            _amd64_rex_bits___1 = (unsigned char )(8 | tmp___16);
            if ((int )_amd64_rex_bits___1 != 0) {
              tmp___17 = jit->ip;
              (jit->ip) ++;
              *tmp___17 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
            }
            break;
          }
          while (1) {
            tmp___21 = jit->ip;
            (jit->ip) ++;
            *tmp___21 = (unsigned char)193;
            while (1) {
              while (1) {
                tmp___22 = jit->ip;
                (jit->ip) ++;
                if (sign) {
                  tmp___23 = 7;
                } else {
                  tmp___23 = 5;
                }
                *tmp___22 = (unsigned char )((long )((3 << 6) | ((tmp___23 & 7) << 3)) | ((dest & 7L) & 7L));
                break;
              }
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)2;
              (jit->ip) ++;
              break;
            }
            break;
          }
          break;
        }
        break;
        case 8L: 
        while (1) {
          while (1) {
            if (dest > 7L) {
              tmp___24 = 1;
            } else {
              tmp___24 = 0;
            }
            _amd64_rex_bits___2 = (unsigned char )(8 | tmp___24);
            if ((int )_amd64_rex_bits___2 != 0) {
              tmp___25 = jit->ip;
              (jit->ip) ++;
              *tmp___25 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
            }
            break;
          }
          while (1) {
            tmp___29 = jit->ip;
            (jit->ip) ++;
            *tmp___29 = (unsigned char)193;
            while (1) {
              while (1) {
                tmp___30 = jit->ip;
                (jit->ip) ++;
                if (sign) {
                  tmp___31 = 7;
                } else {
                  tmp___31 = 5;
                }
                *tmp___30 = (unsigned char )((long )((3 << 6) | ((tmp___31 & 7) << 3)) | ((dest & 7L) & 7L));
                break;
              }
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)3;
              (jit->ip) ++;
              break;
            }
            break;
          }
          break;
        }
        break;
        }
        return;
      }
      if (modulo) {
        if (! sign) {
          switch (divisor) {
          case 2L: 
          while (1) {
            while (1) {
              if (dest > 7L) {
                tmp___32 = 1;
              } else {
                tmp___32 = 0;
              }
              _amd64_rex_bits___3 = (unsigned char )(8 | tmp___32);
              if ((int )_amd64_rex_bits___3 != 0) {
                tmp___33 = jit->ip;
                (jit->ip) ++;
                *tmp___33 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
              }
              break;
            }
            tmp___34 = jit->ip;
            (jit->ip) ++;
            *tmp___34 = (unsigned char)131;
            while (1) {
              while (1) {
                tmp___35 = jit->ip;
                (jit->ip) ++;
                *tmp___35 = (unsigned char )((long )((3 << 6) | (4 << 3)) | (dest & 7L));
                break;
              }
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)1;
              (jit->ip) ++;
              break;
            }
            break;
          }
          break;
          case 4L: 
          while (1) {
            while (1) {
              if (dest > 7L) {
                tmp___50 = 1;
              } else {
                tmp___50 = 0;
              }
              _amd64_rex_bits___6 = (unsigned char )(8 | tmp___50);
              if ((int )_amd64_rex_bits___6 != 0) {
                tmp___51 = jit->ip;
                (jit->ip) ++;
                *tmp___51 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
              }
              break;
            }
            tmp___52 = jit->ip;
            (jit->ip) ++;
            *tmp___52 = (unsigned char)131;
            while (1) {
              while (1) {
                tmp___53 = jit->ip;
                (jit->ip) ++;
                *tmp___53 = (unsigned char )((long )((3 << 6) | (4 << 3)) | (dest & 7L));
                break;
              }
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)3;
              (jit->ip) ++;
              break;
            }
            break;
          }
          break;
          case 8L: 
          while (1) {
            while (1) {
              if (dest > 7L) {
                tmp___68 = 1;
              } else {
                tmp___68 = 0;
              }
              _amd64_rex_bits___9 = (unsigned char )(8 | tmp___68);
              if ((int )_amd64_rex_bits___9 != 0) {
                tmp___69 = jit->ip;
                (jit->ip) ++;
                *tmp___69 = (unsigned char )(64 | (int )_amd64_rex_bits___9);
              }
              break;
            }
            tmp___70 = jit->ip;
            (jit->ip) ++;
            *tmp___70 = (unsigned char)131;
            while (1) {
              while (1) {
                tmp___71 = jit->ip;
                (jit->ip) ++;
                *tmp___71 = (unsigned char )((long )((3 << 6) | (4 << 3)) | (dest & 7L));
                break;
              }
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)7;
              (jit->ip) ++;
              break;
            }
            break;
          }
          break;
          }
          return;
        }
      }
    }
  }
  tmp___86 = jit_reg_in_use(op, 0, 0);
  ax_in_use = tmp___86;
  tmp___87 = jit_reg_in_use(op, 2, 0);
  dx_in_use = tmp___87;
  if (dest != 0L) {
    if (ax_in_use) {
      while (1) {
        while (1) {
          _amd64_rex_bits___12 = (unsigned char)0;
          if ((int )_amd64_rex_bits___12 != 0) {
            tmp___88 = jit->ip;
            (jit->ip) ++;
            *tmp___88 = (unsigned char )(64 | (int )_amd64_rex_bits___12);
          }
          break;
        }
        tmp___89 = jit->ip;
        (jit->ip) ++;
        *tmp___89 = (unsigned char)80;
        break;
      }
    }
  }
  if (dest != 2L) {
    if (dx_in_use) {
      while (1) {
        while (1) {
          _amd64_rex_bits___13 = (unsigned char)0;
          if ((int )_amd64_rex_bits___13 != 0) {
            tmp___90 = jit->ip;
            (jit->ip) ++;
            *tmp___90 = (unsigned char )(64 | (int )_amd64_rex_bits___13);
          }
          break;
        }
        tmp___91 = jit->ip;
        (jit->ip) ++;
        *tmp___91 = (unsigned char)82;
        break;
      }
    }
  }
  if (imm) {
    if (dividend != 0L) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp___92 = jit->ip;
          (jit->ip) ++;
          *tmp___92 = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___93 = 8;
          } else {
            tmp___93 = 0;
          }
          if (dividend > 7L) {
            tmp___94 = 1;
          } else {
            tmp___94 = 0;
          }
          _amd64_rex_bits___14 = (unsigned char )(tmp___93 | tmp___94);
          if ((int )_amd64_rex_bits___14 != 0) {
            tmp___95 = jit->ip;
            (jit->ip) ++;
            *tmp___95 = (unsigned char )(64 | (int )_amd64_rex_bits___14);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___95 = jit->ip;
            (jit->ip) ++;
            *tmp___95 = (unsigned char )(64 | (int )_amd64_rex_bits___14);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___96 = jit->ip;
        (jit->ip) ++;
        *tmp___96 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___97 = jit->ip;
        (jit->ip) ++;
        *tmp___97 = (unsigned char)139;
        break;
        default: 
        tmp___98 = __builtin_expect(1L, 0L);
        if (tmp___98) {
          __assert_rtn("emit_div_op", "./jitter-amd64.c", 2736, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___99 = jit->ip;
            (jit->ip) ++;
            *tmp___99 = (unsigned char )((long )(3 << 6) | (dividend & 7L));
            break;
          }
          break;
        }
        break;
      }
    }
    if (sign) {
      while (1) {
        while (1) {
          _amd64_rex_bits___15 = (unsigned char)8;
          if ((int )_amd64_rex_bits___15 != 0) {
            tmp___100 = jit->ip;
            (jit->ip) ++;
            *tmp___100 = (unsigned char )(64 | (int )_amd64_rex_bits___15);
          }
          break;
        }
        while (1) {
          tmp___101 = jit->ip;
          (jit->ip) ++;
          *tmp___101 = (unsigned char)153;
          break;
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          _amd64_rex_bits___16 = (unsigned char)8;
          if ((int )_amd64_rex_bits___16 != 0) {
            tmp___102 = jit->ip;
            (jit->ip) ++;
            *tmp___102 = (unsigned char )(64 | (int )_amd64_rex_bits___16);
          }
          break;
        }
        tmp___103 = jit->ip;
        (jit->ip) ++;
        *tmp___103 = (unsigned char )((6 << 3) + 3);
        while (1) {
          while (1) {
            tmp___104 = jit->ip;
            (jit->ip) ++;
            *tmp___104 = (unsigned char )(((3 << 6) | (2 << 3)) | 2);
            break;
          }
          break;
        }
        break;
      }
    }
    if (dest != 3L) {
      while (1) {
        while (1) {
          _amd64_rex_bits___17 = (unsigned char)0;
          if ((int )_amd64_rex_bits___17 != 0) {
            tmp___105 = jit->ip;
            (jit->ip) ++;
            *tmp___105 = (unsigned char )(64 | (int )_amd64_rex_bits___17);
          }
          break;
        }
        tmp___106 = jit->ip;
        (jit->ip) ++;
        *tmp___106 = (unsigned char)83;
        break;
      }
    }
    while (1) {
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___107 = 8;
        } else {
          tmp___107 = 0;
        }
        _amd64_rex_bits___18 = (unsigned char )tmp___107;
        if ((int )_amd64_rex_bits___18 != 0) {
          tmp___108 = jit->ip;
          (jit->ip) ++;
          *tmp___108 = (unsigned char )(64 | (int )_amd64_rex_bits___18);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___108 = jit->ip;
          (jit->ip) ++;
          *tmp___108 = (unsigned char )(64 | (int )_amd64_rex_bits___18);
        }
        break;
      }
      tmp___109 = jit->ip;
      (jit->ip) ++;
      *tmp___109 = (unsigned char)187;
      if (sizeof(void *) == 8UL) {
        while (1) {
          imb___5.val = (size_t )divisor;
          tmp___110 = jit->ip;
          (jit->ip) ++;
          *tmp___110 = imb___5.b[0];
          tmp___111 = jit->ip;
          (jit->ip) ++;
          *tmp___111 = imb___5.b[1];
          tmp___112 = jit->ip;
          (jit->ip) ++;
          *tmp___112 = imb___5.b[2];
          tmp___113 = jit->ip;
          (jit->ip) ++;
          *tmp___113 = imb___5.b[3];
          tmp___114 = jit->ip;
          (jit->ip) ++;
          *tmp___114 = imb___5.b[4];
          tmp___115 = jit->ip;
          (jit->ip) ++;
          *tmp___115 = imb___5.b[5];
          tmp___116 = jit->ip;
          (jit->ip) ++;
          *tmp___116 = imb___5.b[6];
          tmp___117 = jit->ip;
          (jit->ip) ++;
          *tmp___117 = imb___5.b[7];
          break;
        }
      } else {
        while (1) {
          imb___6.val = (int )((size_t )divisor);
          tmp___118 = jit->ip;
          (jit->ip) ++;
          *tmp___118 = imb___6.b[0];
          tmp___119 = jit->ip;
          (jit->ip) ++;
          *tmp___119 = imb___6.b[1];
          tmp___120 = jit->ip;
          (jit->ip) ++;
          *tmp___120 = imb___6.b[2];
          tmp___121 = jit->ip;
          (jit->ip) ++;
          *tmp___121 = imb___6.b[3];
          break;
        }
      }
      break;
    }
    while (1) {
      while (1) {
        _amd64_rex_bits___19 = (unsigned char)8;
        if ((int )_amd64_rex_bits___19 != 0) {
          tmp___122 = jit->ip;
          (jit->ip) ++;
          *tmp___122 = (unsigned char )(64 | (int )_amd64_rex_bits___19);
        }
        break;
      }
      while (1) {
        tmp___123 = jit->ip;
        (jit->ip) ++;
        *tmp___123 = (unsigned char)247;
        while (1) {
          while (1) {
            tmp___124 = jit->ip;
            (jit->ip) ++;
            if (sign) {
              tmp___125 = 1;
            } else {
              tmp___125 = 0;
            }
            *tmp___124 = (unsigned char )(((3 << 6) | (((6 + tmp___125) & 7) << 3)) | 3);
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    if (dest != 3L) {
      while (1) {
        while (1) {
          _amd64_rex_bits___20 = (unsigned char)0;
          if ((int )_amd64_rex_bits___20 != 0) {
            tmp___126 = jit->ip;
            (jit->ip) ++;
            *tmp___126 = (unsigned char )(64 | (int )_amd64_rex_bits___20);
          }
          break;
        }
        tmp___127 = jit->ip;
        (jit->ip) ++;
        *tmp___127 = (unsigned char)91;
        break;
      }
    }
  } else {
    if (divisor == 0L) {
      goto _L___0;
    } else
    if (divisor == 2L) {
      _L___0: /* CIL Label */ 
      while (1) {
        while (1) {
          if (divisor > 7L) {
            tmp___128 = 1;
          } else {
            tmp___128 = 0;
          }
          _amd64_rex_bits___21 = (unsigned char )tmp___128;
          if ((int )_amd64_rex_bits___21 != 0) {
            tmp___129 = jit->ip;
            (jit->ip) ++;
            *tmp___129 = (unsigned char )(64 | (int )_amd64_rex_bits___21);
          }
          break;
        }
        tmp___130 = jit->ip;
        (jit->ip) ++;
        *tmp___130 = (unsigned char )(80L + (divisor & 7L));
        break;
      }
    }
    if (dividend != 0L) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp___131 = jit->ip;
          (jit->ip) ++;
          *tmp___131 = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___132 = 8;
          } else {
            tmp___132 = 0;
          }
          if (dividend > 7L) {
            tmp___133 = 1;
          } else {
            tmp___133 = 0;
          }
          _amd64_rex_bits___22 = (unsigned char )(tmp___132 | tmp___133);
          if ((int )_amd64_rex_bits___22 != 0) {
            tmp___134 = jit->ip;
            (jit->ip) ++;
            *tmp___134 = (unsigned char )(64 | (int )_amd64_rex_bits___22);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___134 = jit->ip;
            (jit->ip) ++;
            *tmp___134 = (unsigned char )(64 | (int )_amd64_rex_bits___22);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___135 = jit->ip;
        (jit->ip) ++;
        *tmp___135 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___136 = jit->ip;
        (jit->ip) ++;
        *tmp___136 = (unsigned char)139;
        break;
        default: 
        tmp___137 = __builtin_expect(1L, 0L);
        if (tmp___137) {
          __assert_rtn("emit_div_op", "./jitter-amd64.c", 2748, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___138 = jit->ip;
            (jit->ip) ++;
            *tmp___138 = (unsigned char )((long )(3 << 6) | (dividend & 7L));
            break;
          }
          break;
        }
        break;
      }
    }
    if (sign) {
      while (1) {
        while (1) {
          _amd64_rex_bits___23 = (unsigned char)8;
          if ((int )_amd64_rex_bits___23 != 0) {
            tmp___139 = jit->ip;
            (jit->ip) ++;
            *tmp___139 = (unsigned char )(64 | (int )_amd64_rex_bits___23);
          }
          break;
        }
        while (1) {
          tmp___140 = jit->ip;
          (jit->ip) ++;
          *tmp___140 = (unsigned char)153;
          break;
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          _amd64_rex_bits___24 = (unsigned char)8;
          if ((int )_amd64_rex_bits___24 != 0) {
            tmp___141 = jit->ip;
            (jit->ip) ++;
            *tmp___141 = (unsigned char )(64 | (int )_amd64_rex_bits___24);
          }
          break;
        }
        tmp___142 = jit->ip;
        (jit->ip) ++;
        *tmp___142 = (unsigned char )((6 << 3) + 3);
        while (1) {
          while (1) {
            tmp___143 = jit->ip;
            (jit->ip) ++;
            *tmp___143 = (unsigned char )(((3 << 6) | (2 << 3)) | 2);
            break;
          }
          break;
        }
        break;
      }
    }
    if (divisor == 0L) {
      goto _L___2;
    } else
    if (divisor == 2L) {
      _L___2: /* CIL Label */ 
      while (1) {
        while (1) {
          _amd64_rex_bits___25 = (unsigned char)8;
          if ((int )_amd64_rex_bits___25 != 0) {
            tmp___144 = jit->ip;
            (jit->ip) ++;
            *tmp___144 = (unsigned char )(64 | (int )_amd64_rex_bits___25);
          }
          break;
        }
        while (1) {
          tmp___145 = jit->ip;
          (jit->ip) ++;
          *tmp___145 = (unsigned char)247;
          while (1) {
            while (1) {
              tmp___146 = jit->ip;
              (jit->ip) ++;
              if (sign) {
                tmp___147 = 1;
              } else {
                tmp___147 = 0;
              }
              *tmp___146 = (unsigned char )((((6 + tmp___147) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___148 = jit->ip;
              (jit->ip) ++;
              *tmp___148 = (unsigned char )((4 << 3) | 4);
              break;
            }
            break;
            while (1) {
              tmp___159 = jit->ip;
              (jit->ip) ++;
              if (sign) {
                tmp___160 = 1;
              } else {
                tmp___160 = 0;
              }
              *tmp___159 = (unsigned char )((((6 + tmp___160) & 7) << 3) | 4);
              break;
            }
            break;
            while (1) {
              tmp___161 = jit->ip;
              (jit->ip) ++;
              if (sign) {
                tmp___162 = 1;
              } else {
                tmp___162 = 0;
              }
              *tmp___161 = (unsigned char )(((1 << 6) | (((6 + tmp___162) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)0;
              (jit->ip) ++;
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      while (1) {
        if ((int )sizeof(void *) >= -128) {
          if ((int )sizeof(void *) <= 127) {
            while (1) {
              _amd64_rex_bits___26 = (unsigned char)8;
              if ((int )_amd64_rex_bits___26 != 0) {
                tmp___169 = jit->ip;
                (jit->ip) ++;
                *tmp___169 = (unsigned char )(64 | (int )_amd64_rex_bits___26);
              }
              break;
            }
            tmp___170 = jit->ip;
            (jit->ip) ++;
            *tmp___170 = (unsigned char)131;
            while (1) {
              while (1) {
                tmp___171 = jit->ip;
                (jit->ip) ++;
                *tmp___171 = (unsigned char )((3 << 6) | 4);
                break;
              }
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(sizeof(void *) & 255UL);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___1;
          }
        } else {
          _L___1: /* CIL Label */ 
          while (1) {
            _amd64_rex_bits___28 = (unsigned char)8;
            if ((int )_amd64_rex_bits___28 != 0) {
              tmp___178 = jit->ip;
              (jit->ip) ++;
              *tmp___178 = (unsigned char )(64 | (int )_amd64_rex_bits___28);
            }
            break;
          }
          tmp___179 = jit->ip;
          (jit->ip) ++;
          *tmp___179 = (unsigned char)129;
          while (1) {
            while (1) {
              tmp___180 = jit->ip;
              (jit->ip) ++;
              *tmp___180 = (unsigned char )((3 << 6) | 4);
              break;
            }
            break;
          }
          while (1) {
            imb___10.val = (int )sizeof(void *);
            tmp___181 = jit->ip;
            (jit->ip) ++;
            *tmp___181 = imb___10.b[0];
            tmp___182 = jit->ip;
            (jit->ip) ++;
            *tmp___182 = imb___10.b[1];
            tmp___183 = jit->ip;
            (jit->ip) ++;
            *tmp___183 = imb___10.b[2];
            tmp___184 = jit->ip;
            (jit->ip) ++;
            *tmp___184 = imb___10.b[3];
            break;
          }
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          if (divisor > 7L) {
            tmp___185 = 1;
          } else {
            tmp___185 = 0;
          }
          _amd64_rex_bits___29 = (unsigned char )(8 | tmp___185);
          if ((int )_amd64_rex_bits___29 != 0) {
            tmp___186 = jit->ip;
            (jit->ip) ++;
            *tmp___186 = (unsigned char )(64 | (int )_amd64_rex_bits___29);
          }
          break;
        }
        while (1) {
          tmp___187 = jit->ip;
          (jit->ip) ++;
          *tmp___187 = (unsigned char)247;
          while (1) {
            while (1) {
              tmp___188 = jit->ip;
              (jit->ip) ++;
              if (sign) {
                tmp___189 = 1;
              } else {
                tmp___189 = 0;
              }
              *tmp___188 = (unsigned char )((long )((3 << 6) | (((6 + tmp___189) & 7) << 3)) | ((divisor & 7L) & 7L));
              break;
            }
            break;
          }
          break;
        }
        break;
      }
    }
  }
  if (! modulo) {
    if (dest != 0L) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp___190 = jit->ip;
          (jit->ip) ++;
          *tmp___190 = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___191 = 8;
          } else {
            tmp___191 = 0;
          }
          if (dest > 7L) {
            tmp___192 = 4;
          } else {
            tmp___192 = 0;
          }
          _amd64_rex_bits___30 = (unsigned char )(tmp___191 | tmp___192);
          if ((int )_amd64_rex_bits___30 != 0) {
            tmp___193 = jit->ip;
            (jit->ip) ++;
            *tmp___193 = (unsigned char )(64 | (int )_amd64_rex_bits___30);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___193 = jit->ip;
            (jit->ip) ++;
            *tmp___193 = (unsigned char )(64 | (int )_amd64_rex_bits___30);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___194 = jit->ip;
        (jit->ip) ++;
        *tmp___194 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___195 = jit->ip;
        (jit->ip) ++;
        *tmp___195 = (unsigned char)139;
        break;
        default: 
        tmp___196 = __builtin_expect(1L, 0L);
        if (tmp___196) {
          __assert_rtn("emit_div_op", "./jitter-amd64.c", 2762, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___197 = jit->ip;
            (jit->ip) ++;
            *tmp___197 = (unsigned char )((long )(3 << 6) | ((dest & 7L) << 3));
            break;
          }
          break;
        }
        break;
      }
    }
  } else
  if (dest != 2L) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___198 = jit->ip;
        (jit->ip) ++;
        *tmp___198 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___199 = 8;
        } else {
          tmp___199 = 0;
        }
        if (dest > 7L) {
          tmp___200 = 4;
        } else {
          tmp___200 = 0;
        }
        _amd64_rex_bits___31 = (unsigned char )(tmp___199 | tmp___200);
        if ((int )_amd64_rex_bits___31 != 0) {
          tmp___201 = jit->ip;
          (jit->ip) ++;
          *tmp___201 = (unsigned char )(64 | (int )_amd64_rex_bits___31);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___201 = jit->ip;
          (jit->ip) ++;
          *tmp___201 = (unsigned char )(64 | (int )_amd64_rex_bits___31);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___202 = jit->ip;
      (jit->ip) ++;
      *tmp___202 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___203 = jit->ip;
      (jit->ip) ++;
      *tmp___203 = (unsigned char)139;
      break;
      default: 
      tmp___204 = __builtin_expect(1L, 0L);
      if (tmp___204) {
        __assert_rtn("emit_div_op", "./jitter-amd64.c", 2764, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___205 = jit->ip;
          (jit->ip) ++;
          *tmp___205 = (unsigned char )(((long )(3 << 6) | ((dest & 7L) << 3)) | 2L);
          break;
        }
        break;
      }
      break;
    }
  }
  if (dest != 2L) {
    if (dx_in_use) {
      while (1) {
        while (1) {
          _amd64_rex_bits___32 = (unsigned char)0;
          if ((int )_amd64_rex_bits___32 != 0) {
            tmp___206 = jit->ip;
            (jit->ip) ++;
            *tmp___206 = (unsigned char )(64 | (int )_amd64_rex_bits___32);
          }
          break;
        }
        tmp___207 = jit->ip;
        (jit->ip) ++;
        *tmp___207 = (unsigned char)90;
        break;
      }
    }
  }
  if (dest != 0L) {
    if (ax_in_use) {
      while (1) {
        while (1) {
          _amd64_rex_bits___33 = (unsigned char)0;
          if ((int )_amd64_rex_bits___33 != 0) {
            tmp___208 = jit->ip;
            (jit->ip) ++;
            *tmp___208 = (unsigned char )(64 | (int )_amd64_rex_bits___33);
          }
          break;
        }
        tmp___209 = jit->ip;
        (jit->ip) ++;
        *tmp___209 = (unsigned char)88;
        break;
      }
    }
  }
  return;
}
}
__inline static void jit_op_delete(jit_op *op ) 
{ 


  {
  (op->prev)->next = op->next;
  if (op->next) {
    (op->next)->prev = op->prev;
  }
  jit_free_op(op);
  return;
}
}
__inline static void jit_set_to_array(jit_set *s , jit_value *dest ) 
{ 
  struct copy_target t ;

  {
  t.target = dest;
  t.index = 0;
  jit_tree_walk(s->root, & copy_reg_to_array, (void *)(& t));
  return;
}
}
static void rename_reg(jit_op *op , int r1 , int r2 ) 
{ 


  {
  insert_reg_op(16, op, (jit_value )r1, (jit_value )r2);
  return;
}
}
static void hints_refcount_inc(jit_tree *hints ) 
{ 


  {
  if ((unsigned long )hints == (unsigned long )((void *)0)) {
    return;
  }
  (((struct jit_allocator_hint *)hints->value)->refs) ++;
  hints_refcount_inc(hints->left);
  hints_refcount_inc(hints->right);
  return;
}
}
__inline static jit_tree *jit_tree_addall(jit_tree *target , jit_tree *n ) 
{ 


  {
  if ((unsigned long )n == (unsigned long )((void *)0)) {
    return (target);
  }
  target = jit_tree_addall(target, n->left);
  target = jit_tree_insert(target, n->key, n->value, (int *)((void *)0));
  target = jit_tree_addall(target, n->right);
  return (target);
}
}
void _cipher$_xtea_decipher(unsigned int block_no , unsigned int num_rounds , unsigned int *v ,
                            unsigned int *key , unsigned int size ) 
{ 
  unsigned int i ;

  {
  i = 0;
  while (i < size / 8) {
    _cipher$_xtea_decipherBlock(num_rounds, v, key);
    v += 2;
    i ++;
  }
}
}
void jit_init_arg_params(struct jit *jit , struct jit_func_info *info , int p , int *phys_reg ) 
{ 
  struct jit_inp_arg *a ;
  int pos ;
  struct jit_func_info *tmp ;
  int stack_pos ;
  int tmp___0 ;
  int pos___0 ;
  struct jit_func_info *tmp___1 ;
  int stack_pos___0 ;
  int tmp___2 ;

  {
  a = info->args + p;
  if ((unsigned int )a->type != 2U) {
    pos = a->gp_pos;
    if (pos < (jit->reg_al)->gp_arg_reg_cnt) {
      a->passed_by_reg = (char)1;
      a->location.reg = (*((jit->reg_al)->gp_arg_regs + pos))->id;
      tmp = jit_current_func_info(jit);
      a->spill_pos = (int )((unsigned long )(- ((p + info->gp_reg_count) + info->fp_reg_count)) * sizeof(void *) - (unsigned long )tmp->allocai_mem);
    } else {
      if (0 > a->fp_pos - (jit->reg_al)->fp_arg_reg_cnt) {
        tmp___0 = 0;
      } else {
        tmp___0 = a->fp_pos - (jit->reg_al)->fp_arg_reg_cnt;
      }
      stack_pos = (pos - (jit->reg_al)->gp_arg_reg_cnt) + tmp___0;
      a->location.stack_pos = 16 + stack_pos * 8;
      a->spill_pos = 16 + stack_pos * 8;
      a->passed_by_reg = (char)0;
    }
    a->overflow = 0;
    return;
  }
  pos___0 = a->fp_pos;
  if (pos___0 < (jit->reg_al)->fp_arg_reg_cnt) {
    a->passed_by_reg = (char)1;
    a->location.reg = (*((jit->reg_al)->fp_arg_regs + pos___0))->id;
    tmp___1 = jit_current_func_info(jit);
    a->spill_pos = (int )((unsigned long )(- ((p + info->gp_reg_count) + info->fp_reg_count)) * sizeof(void *) - (unsigned long )tmp___1->allocai_mem);
  } else {
    if (0 > a->gp_pos - (jit->reg_al)->gp_arg_reg_cnt) {
      tmp___2 = 0;
    } else {
      tmp___2 = a->gp_pos - (jit->reg_al)->gp_arg_reg_cnt;
    }
    stack_pos___0 = (pos___0 - (jit->reg_al)->fp_arg_reg_cnt) + tmp___2;
    a->location.stack_pos = 16 + stack_pos___0 * 8;
    a->spill_pos = 16 + stack_pos___0 * 8;
    a->passed_by_reg = (char)0;
  }
  a->overflow = 0;
  return;
}
}
static int emit_pop_reg(struct jit *jit , jit_hw_reg *r , int stack_offset ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  long tmp___5 ;
  unsigned char *tmp___6 ;
  x86_imm_buf imb ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;

  {
  if (! r->fp) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp = jit->ip;
        (jit->ip) ++;
        *tmp = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___0 = 8;
        } else {
          tmp___0 = 0;
        }
        if (r->id > 7) {
          tmp___1 = 4;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)139;
      break;
      default: 
      tmp___5 = __builtin_expect(1L, 0L);
      if (tmp___5) {
        __assert_rtn("emit_pop_reg", "./jitter-amd64.c", 2275, "0");
      }
      }
      while (1) {
        while (1) {
          if (stack_offset == 0) {
            while (1) {
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = (unsigned char )((((r->id & 7) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___12 = jit->ip;
              (jit->ip) ++;
              *tmp___12 = (unsigned char )((4 << 3) | 4);
              break;
            }
          } else
          if (stack_offset >= -128) {
            if (stack_offset <= 127) {
              while (1) {
                tmp___13 = jit->ip;
                (jit->ip) ++;
                *tmp___13 = (unsigned char )(((1 << 6) | (((r->id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___14 = jit->ip;
                (jit->ip) ++;
                *tmp___14 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(stack_offset & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L;
            }
          } else {
            _L: /* CIL Label */ 
            while (1) {
              tmp___15 = jit->ip;
              (jit->ip) ++;
              *tmp___15 = (unsigned char )(((2 << 6) | (((r->id & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___16 = jit->ip;
              (jit->ip) ++;
              *tmp___16 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              imb___0.val = stack_offset;
              tmp___17 = jit->ip;
              (jit->ip) ++;
              *tmp___17 = imb___0.b[0];
              tmp___18 = jit->ip;
              (jit->ip) ++;
              *tmp___18 = imb___0.b[1];
              tmp___19 = jit->ip;
              (jit->ip) ++;
              *tmp___19 = imb___0.b[2];
              tmp___20 = jit->ip;
              (jit->ip) ++;
              *tmp___20 = imb___0.b[3];
              break;
            }
          }
          break;
          if (stack_offset == 0) {
            while (1) {
              tmp___21 = jit->ip;
              (jit->ip) ++;
              *tmp___21 = (unsigned char )((((r->id & 7) & 7) << 3) | 4);
              break;
            }
            break;
          }
          if (stack_offset >= -128) {
            if (stack_offset <= 127) {
              while (1) {
                tmp___22 = jit->ip;
                (jit->ip) ++;
                *tmp___22 = (unsigned char )(((1 << 6) | (((r->id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(stack_offset & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___0;
            }
          } else {
            _L___0: /* CIL Label */ 
            while (1) {
              tmp___23 = jit->ip;
              (jit->ip) ++;
              *tmp___23 = (unsigned char )(((2 << 6) | (((r->id & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              imb___1.val = stack_offset;
              tmp___24 = jit->ip;
              (jit->ip) ++;
              *tmp___24 = imb___1.b[0];
              tmp___25 = jit->ip;
              (jit->ip) ++;
              *tmp___25 = imb___1.b[1];
              tmp___26 = jit->ip;
              (jit->ip) ++;
              *tmp___26 = imb___1.b[2];
              tmp___27 = jit->ip;
              (jit->ip) ++;
              *tmp___27 = imb___1.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
    stack_offset = (int )((unsigned long )stack_offset + sizeof(void *));
  } else {
    while (1) {
      tmp___28 = jit->ip;
      (jit->ip) ++;
      *tmp___28 = (unsigned char)102;
      while (1) {
        if (r->id > 7) {
          tmp___29 = 4;
        } else {
          tmp___29 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )tmp___29;
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      tmp___31 = jit->ip;
      (jit->ip) ++;
      *tmp___31 = (unsigned char)15;
      tmp___32 = jit->ip;
      (jit->ip) ++;
      *tmp___32 = (unsigned char)18;
      while (1) {
        while (1) {
          if (stack_offset == 0) {
            while (1) {
              tmp___38 = jit->ip;
              (jit->ip) ++;
              *tmp___38 = (unsigned char )((((r->id & 7) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___39 = jit->ip;
              (jit->ip) ++;
              *tmp___39 = (unsigned char )((4 << 3) | 4);
              break;
            }
          } else
          if (stack_offset >= -128) {
            if (stack_offset <= 127) {
              while (1) {
                tmp___40 = jit->ip;
                (jit->ip) ++;
                *tmp___40 = (unsigned char )(((1 << 6) | (((r->id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___41 = jit->ip;
                (jit->ip) ++;
                *tmp___41 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(stack_offset & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___1;
            }
          } else {
            _L___1: /* CIL Label */ 
            while (1) {
              tmp___42 = jit->ip;
              (jit->ip) ++;
              *tmp___42 = (unsigned char )(((2 << 6) | (((r->id & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___43 = jit->ip;
              (jit->ip) ++;
              *tmp___43 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              imb___3.val = stack_offset;
              tmp___44 = jit->ip;
              (jit->ip) ++;
              *tmp___44 = imb___3.b[0];
              tmp___45 = jit->ip;
              (jit->ip) ++;
              *tmp___45 = imb___3.b[1];
              tmp___46 = jit->ip;
              (jit->ip) ++;
              *tmp___46 = imb___3.b[2];
              tmp___47 = jit->ip;
              (jit->ip) ++;
              *tmp___47 = imb___3.b[3];
              break;
            }
          }
          break;
          if (stack_offset == 0) {
            while (1) {
              tmp___48 = jit->ip;
              (jit->ip) ++;
              *tmp___48 = (unsigned char )((((r->id & 7) & 7) << 3) | 4);
              break;
            }
            break;
          }
          if (stack_offset >= -128) {
            if (stack_offset <= 127) {
              while (1) {
                tmp___49 = jit->ip;
                (jit->ip) ++;
                *tmp___49 = (unsigned char )(((1 << 6) | (((r->id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(stack_offset & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___2;
            }
          } else {
            _L___2: /* CIL Label */ 
            while (1) {
              tmp___50 = jit->ip;
              (jit->ip) ++;
              *tmp___50 = (unsigned char )(((2 << 6) | (((r->id & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              imb___4.val = stack_offset;
              tmp___51 = jit->ip;
              (jit->ip) ++;
              *tmp___51 = imb___4.b[0];
              tmp___52 = jit->ip;
              (jit->ip) ++;
              *tmp___52 = imb___4.b[1];
              tmp___53 = jit->ip;
              (jit->ip) ++;
              *tmp___53 = imb___4.b[2];
              tmp___54 = jit->ip;
              (jit->ip) ++;
              *tmp___54 = imb___4.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
    stack_offset += 8;
  }
  return (stack_offset);
}
}
static int assign_getarg(jit_op *op , struct jit_reg_allocator *al ) 
{ 
  int arg_id ;
  struct jit_inp_arg *arg ;
  int reg_id ;
  int tmp ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp___0 ;
  int tmp___1 ;

  {
  arg_id = (int )op->arg[1];
  arg = (al->current_func_info)->args + arg_id;
  if ((unsigned int )arg->type == 2U) {
    tmp = 1;
  } else {
    tmp = 0;
  }
  reg_id = ((tmp & 1) | (3 << 1)) | ((arg_id & 268435455) << 4);
  tmp___1 = jit_set_get(op->live_out, reg_id);
  if (! tmp___1) {
    if ((unsigned int )arg->type != 2U) {
      if ((unsigned long )arg->size == sizeof(void *)) {
        goto _L;
      } else {
        goto _L___0;
      }
    } else
    _L___0: /* CIL Label */ 
    if ((unsigned int )arg->type == 2U) {
      if ((unsigned long )arg->size == sizeof(double )) {
        _L: /* CIL Label */ 
        tmp___0 = rmap_get(op->regmap, (jit_value )reg_id);
        hreg = tmp___0;
        if (hreg) {
          rmap_unassoc(op->regmap, (jit_value )reg_id);
          rmap_assoc(op->regmap, op->arg[0], hreg);
          op->r_arg[0] = (jit_value )hreg->id;
          op->r_arg[1] = op->arg[1];
          op->code = (unsigned short)528;
          return (1);
        }
      }
    }
  }
  return (0);
}
}
__inline static void jit_set_addall(jit_set *target , jit_set *s ) 
{ 


  {
  target->root = jit_tree_addall(target->root, s->root);
  return;
}
}
__inline static int GET_REG_POS(struct jit *jit , int r ) 
{ 
  struct jit_func_info *tmp ;
  struct jit_func_info *tmp___0 ;
  struct jit_func_info *tmp___1 ;
  struct jit_func_info *tmp___2 ;
  struct jit_func_info *tmp___3 ;
  struct jit_func_info *tmp___4 ;

  {
  if (((r >> 1) & 3) == 0) {
    if ((r & 1) == 0) {
      tmp = jit_current_func_info(jit);
      return ((int )(- ((unsigned long )(((r >> 4) & 268435455) + 1) * sizeof(void *)) - (unsigned long )tmp->allocai_mem));
    } else {
      tmp___0 = jit_current_func_info(jit);
      tmp___1 = jit_current_func_info(jit);
      return ((int )(((unsigned long )(- tmp___0->gp_reg_count) * sizeof(void *) - (unsigned long )(((r >> 4) & 268435455) + 1) * sizeof(jit_float )) - (unsigned long )tmp___1->allocai_mem));
    }
  } else {
    tmp___2 = jit_current_func_info(jit);
    tmp___3 = jit_current_func_info(jit);
    tmp___4 = jit_current_func_info(jit);
    return ((int )((unsigned long )(- ((((r >> 4) & 268435455) + tmp___2->gp_reg_count) + tmp___3->fp_reg_count)) * sizeof(void *) - (unsigned long )tmp___4->allocai_mem));
  }
}
}
static void emit_fret_op(struct jit *jit , jit_op *op ) 
{ 
  jit_value arg ;
  jit_hw_reg *ret_reg ;
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  int tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  long tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  struct jit_func_info *tmp___22 ;
  unsigned char *tmp___23 ;

  {
  arg = op->r_arg[0];
  ret_reg = (jit->reg_al)->fpret_reg;
  if ((unsigned long )op->arg_size == sizeof(float )) {
    while (1) {
      tmp = jit->ip;
      (jit->ip) ++;
      *tmp = (unsigned char)242;
      while (1) {
        if (ret_reg->id > 7) {
          tmp___0 = 4;
        } else {
          tmp___0 = 0;
        }
        if (arg > 7L) {
          tmp___1 = 1;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)15;
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)90;
      while (1) {
        while (1) {
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char )((long )((3 << 6) | ((ret_reg->id & 7) << 3)) | (arg & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else
  if ((jit_value )ret_reg->id != arg) {
    while (1) {
      tmp___6 = jit->ip;
      (jit->ip) ++;
      *tmp___6 = (unsigned char)242;
      while (1) {
        if (ret_reg->id > 7) {
          tmp___7 = 4;
        } else {
          tmp___7 = 0;
        }
        if (arg > 7L) {
          tmp___8 = 1;
        } else {
          tmp___8 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(tmp___7 | tmp___8);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___9 = jit->ip;
          (jit->ip) ++;
          *tmp___9 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      tmp___10 = jit->ip;
      (jit->ip) ++;
      *tmp___10 = (unsigned char)15;
      tmp___11 = jit->ip;
      (jit->ip) ++;
      *tmp___11 = (unsigned char)16;
      while (1) {
        while (1) {
          tmp___12 = jit->ip;
          (jit->ip) ++;
          *tmp___12 = (unsigned char )((long )((3 << 6) | ((ret_reg->id & 7) << 3)) | (arg & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  tmp___13 = emit_pop_callee_saved_regs(jit);
  jit->push_count -= tmp___13;
  tmp___22 = jit_current_func_info(jit);
  if (tmp___22->has_prolog) {
    while (1) {
      while (1) {
        _amd64_rex_bits___1 = (unsigned char)8;
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___15 = jit->ip;
          (jit->ip) ++;
          *tmp___15 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      switch (8) {
      case 1: 
      tmp___16 = jit->ip;
      (jit->ip) ++;
      *tmp___16 = (unsigned char)138;
      break;
      case 8: 
      case 4: 
      case 2: 
      tmp___17 = jit->ip;
      (jit->ip) ++;
      *tmp___17 = (unsigned char)139;
      break;
      default: 
      tmp___18 = __builtin_expect(1L, 0L);
      if (tmp___18) {
        __assert_rtn("emit_fret_op", "./jitter-amd64.c", 2171, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___19 = jit->ip;
          (jit->ip) ++;
          *tmp___19 = (unsigned char )(((3 << 6) | (4 << 3)) | 5);
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        _amd64_rex_bits___2 = (unsigned char)0;
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___20 = jit->ip;
          (jit->ip) ++;
          *tmp___20 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___21 = jit->ip;
      (jit->ip) ++;
      *tmp___21 = (unsigned char)93;
      break;
    }
  }
  while (1) {
    tmp___23 = jit->ip;
    (jit->ip) ++;
    *tmp___23 = (unsigned char)195;
    break;
  }
  return;
}
}
void bufx_i$nit(void) 
{ 
  int init_elems1 ;

  {
  init_elems1 = 0;
  while (init_elems1 < 32) {
    bufx[init_elems1] = (unsigned char)0;
    init_elems1 ++;
  }
}
}
__inline extern __darwin_ct_rune_t __isctype(__darwin_ct_rune_t _c , unsigned long _f ) 
{ 
  int tmp ;

  {
  if (_c < 0) {
    tmp = 0;
  } else
  if (_c >= 1 << 8) {
    tmp = 0;
  } else {
    tmp = ! (! ((unsigned long )_DefaultRuneLocale.__runetype[_c] & _f));
  }
  return (tmp);
}
}
__inline static jit_hw_reg *rmap_is_associated_aux(jit_tree *n , int reg_id , int fp ,
                                                   jit_value *virt_reg ) 
{ 
  jit_hw_reg *r ;
  jit_hw_reg *tmp ;

  {
  if ((unsigned long )n == (unsigned long )((void *)0)) {
    return ((jit_hw_reg *)((void *)0));
  }
  r = (jit_hw_reg *)n->value;
  if ((int )r->fp == fp) {
    if (r->id == reg_id) {
      if (virt_reg) {
        *virt_reg = n->key;
      }
      return (r);
    }
  }
  r = rmap_is_associated_aux(n->left, reg_id, fp, virt_reg);
  if (r) {
    return (r);
  } else {
    tmp = rmap_is_associated_aux(n->right, reg_id, fp, virt_reg);
    return (tmp);
  }
}
}
static int join_2ops(jit_op *op , int opcode1 , int opcode2 , int (*joinfn)(jit_op * ,
                                                                            jit_op * ) ) 
{ 
  jit_value result_reg ;
  jit_op *nextop ;
  jit_op *tmp ;
  int tmp___0 ;

  {
  if ((int )op->code == opcode1) {
    result_reg = op->arg[0];
    tmp = get_related_op(op, (int )result_reg);
    nextop = tmp;
    if (nextop) {
      if ((int )nextop->code == opcode2) {
        tmp___0 = (*joinfn)(op, nextop);
        return (tmp___0);
      }
    }
  }
  return (0);
}
}
static void emit_fretval_op(struct jit *jit , jit_op *op ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;

  {
  if ((unsigned long )op->arg_size == sizeof(float )) {
    while (1) {
      tmp = jit->ip;
      (jit->ip) ++;
      *tmp = (unsigned char)243;
      while (1) {
        _amd64_rex_bits = (unsigned char)0;
        if ((int )_amd64_rex_bits != 0) {
          tmp___0 = jit->ip;
          (jit->ip) ++;
          *tmp___0 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___1 = jit->ip;
      (jit->ip) ++;
      *tmp___1 = (unsigned char)15;
      tmp___2 = jit->ip;
      (jit->ip) ++;
      *tmp___2 = (unsigned char)90;
      while (1) {
        while (1) {
          tmp___3 = jit->ip;
          (jit->ip) ++;
          *tmp___3 = (unsigned char )(3 << 6);
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
static int force_assoc(jit_op *op , struct jit_reg_allocator *al ) 
{ 
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp ;

  {
  if (op->arg[1] == 0L) {
    tmp = al->gp_regs + op->arg[2];
  } else {
    tmp = al->fp_regs + op->arg[2];
  }
  hreg = tmp;
  rmap_assoc(op->regmap, op->arg[0], hreg);
  load_reg(op, hreg, op->arg[0]);
  return (1);
}
}
static void emit_sse_alu_op(struct jit *jit , jit_op *op , int sse_op ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___14 ;
  int tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___21 ;
  int tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;

  {
  if (op->r_arg[0] == op->r_arg[1]) {
    while (1) {
      tmp = jit->ip;
      (jit->ip) ++;
      *tmp = (unsigned char)242;
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___0 = 4;
        } else {
          tmp___0 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___1 = 1;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)15;
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char )sse_op;
      while (1) {
        while (1) {
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else
  if (op->r_arg[0] == op->r_arg[2]) {
    while (1) {
      tmp___6 = jit->ip;
      (jit->ip) ++;
      *tmp___6 = (unsigned char)242;
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___7 = 4;
        } else {
          tmp___7 = 0;
        }
        if (op->r_arg[1] > 7L) {
          tmp___8 = 1;
        } else {
          tmp___8 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(tmp___7 | tmp___8);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___9 = jit->ip;
          (jit->ip) ++;
          *tmp___9 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      tmp___10 = jit->ip;
      (jit->ip) ++;
      *tmp___10 = (unsigned char)15;
      tmp___11 = jit->ip;
      (jit->ip) ++;
      *tmp___11 = (unsigned char )sse_op;
      while (1) {
        while (1) {
          tmp___12 = jit->ip;
          (jit->ip) ++;
          *tmp___12 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      tmp___13 = jit->ip;
      (jit->ip) ++;
      *tmp___13 = (unsigned char)242;
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___14 = 4;
        } else {
          tmp___14 = 0;
        }
        if (op->r_arg[1] > 7L) {
          tmp___15 = 1;
        } else {
          tmp___15 = 0;
        }
        _amd64_rex_bits___1 = (unsigned char )(tmp___14 | tmp___15);
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___16 = jit->ip;
          (jit->ip) ++;
          *tmp___16 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      tmp___17 = jit->ip;
      (jit->ip) ++;
      *tmp___17 = (unsigned char)15;
      tmp___18 = jit->ip;
      (jit->ip) ++;
      *tmp___18 = (unsigned char)16;
      while (1) {
        while (1) {
          tmp___19 = jit->ip;
          (jit->ip) ++;
          *tmp___19 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      tmp___20 = jit->ip;
      (jit->ip) ++;
      *tmp___20 = (unsigned char)242;
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___21 = 4;
        } else {
          tmp___21 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___22 = 1;
        } else {
          tmp___22 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )(tmp___21 | tmp___22);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___23 = jit->ip;
          (jit->ip) ++;
          *tmp___23 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___24 = jit->ip;
      (jit->ip) ++;
      *tmp___24 = (unsigned char)15;
      tmp___25 = jit->ip;
      (jit->ip) ++;
      *tmp___25 = (unsigned char )sse_op;
      while (1) {
        while (1) {
          tmp___26 = jit->ip;
          (jit->ip) ++;
          *tmp___26 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
static int join_muli_addr(jit_op *op , jit_op *nextop ) 
{ 
  int tmp ;
  jit_value add_reg ;
  jit_value tmp___0 ;
  int tmp___1 ;

  {
  tmp = is_suitable_mul(op);
  if (tmp) {
    if (nextop->arg[1] == nextop->arg[2]) {
      return (0);
    }
  } else {
    return (0);
  }
  if (nextop->arg[1] == op->arg[0]) {
    tmp___0 = nextop->arg[2];
  } else {
    tmp___0 = nextop->arg[1];
  }
  add_reg = tmp___0;
  nextop->code = (unsigned short)313;
  nextop->spec = (unsigned char )(((1 << 4) | (1 << 2)) | 3);
  nextop->arg[1] = add_reg;
  nextop->arg[2] = op->arg[1];
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 552U) {
    tmp___1 = shift_index((int )op->arg[2]);
    nextop->arg_size = (unsigned char )tmp___1;
  } else {
    nextop->arg_size = (unsigned char )op->arg[2];
  }
  make_nop(op);
  return (1);
}
}
static void append_msg(char *buf , char *format  , ...) 
{ 
  va_list___0 ap ;
  unsigned long tmp ;
  size_t tmp___0 ;
  size_t tmp___1 ;
  size_t tmp___2 ;

  {
  tmp___0 = strlen((char const   *)buf);
  if (tmp___0) {
    tmp = __builtin_object_size((void *)buf, 1);
    __builtin___strcat_chk(buf, ", ", tmp);
  }
  __builtin_va_start(ap, format);
  tmp___2 = strlen((char const   *)buf);
  __builtin___vsprintf_chk(buf + tmp___2, 0, 18446744073709551615, (char const   *)format,
                           ap);
  __builtin_va_end(ap);
  return;
}
}
void jit_assign_regs(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  jit_op *op___0 ;
  jit_op *tmp___0 ;
  jit_op *op___1 ;
  jit_op *tmp___1 ;
  jit_op *op___2 ;
  jit_op *tmp___2 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    op->regmap = rmap_init();
    op = op->next;
  }
  tmp___0 = jit_op_first(jit->ops);
  op___0 = tmp___0;
  while ((unsigned long )op___0 != (unsigned long )((void *)0)) {
    assign_regs(jit, op___0);
    op___0 = op___0->next;
  }
  tmp___1 = jit_op_first(jit->ops);
  op___1 = tmp___1;
  while ((unsigned long )op___1 != (unsigned long )((void *)0)) {
    branch_adjustment(jit, op___1);
    op___1 = op___1->next;
  }
  tmp___2 = jit_op_first(jit->ops);
  op___2 = tmp___2;
  while ((unsigned long )op___2 != (unsigned long )((void *)0)) {
    jump_adjustment(jit, op___2);
    op___2 = op___2->next;
  }
  return;
}
}
static void jit_tree_walk(jit_tree *h , void (*func)(jit_tree_key key , jit_tree_value value ,
                                                     void *thunk ) , void *thunk ) 
{ 


  {
  if (! h) {
    return;
  }
  jit_tree_walk(h->left, func, thunk);
  (*func)(h->key, h->value, thunk);
  jit_tree_walk(h->right, func, thunk);
  return;
}
}
static int rmap_subset(jit_op *op , jit_tree *current , jit_tree *target ) 
{ 
  jit_set *tgt_livein ;
  int tmp ;
  jit_tree *found ;
  jit_tree *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  if ((unsigned long )current == (unsigned long )((void *)0)) {
    return (1);
  }
  tgt_livein = (op->jmp_addr)->live_in;
  tmp = jit_set_get(tgt_livein, (int )current->key);
  if (! tmp) {
    goto skip;
  }
  tmp___0 = jit_tree_search(target, current->key);
  found = tmp___0;
  if (! found) {
    return (0);
  } else
  if ((unsigned long )current->value != (unsigned long )found->value) {
    return (0);
  }
  skip: 
  tmp___1 = rmap_subset(op, current->left, target);
  if (tmp___1) {
    tmp___2 = rmap_subset(op, current->right, target);
    if (tmp___2) {
      tmp___3 = 1;
    } else {
      tmp___3 = 0;
    }
  } else {
    tmp___3 = 0;
  }
  return (tmp___3);
}
}
__inline static void make_nop(jit_op *op ) 
{ 


  {
  op->code = (unsigned short)528;
  op->spec = (unsigned char)0;
  return;
}
}
static int is_active_register(struct jit_reg_allocator *al , jit_hw_reg *reg , jit_op *op ) 
{ 
  jit_value vreg ;
  jit_hw_reg *hw ;
  jit_hw_reg *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  if ((unsigned long )op->next == (unsigned long )((void *)0)) {
    return (0);
  }
  if ((unsigned int )((jit_opcode )((int )(op->next)->code & 65528)) == 448U) {
    return (1);
  } else
  if ((unsigned int )((jit_opcode )((int )(op->next)->code & 65528)) == 120U) {
    return (1);
  } else
  if ((unsigned int )((jit_opcode )((int )(op->next)->code & 65528)) == 0U) {
    return (1);
  }
  if ((unsigned int )((jit_opcode )((int )(op->next)->code & 65528)) == 208U) {
    if ((unsigned long )reg == (unsigned long )al->ret_reg) {
      return (1);
    }
  }
  if ((unsigned long )(op->next)->regmap == (unsigned long )((void *)0)) {
    return (1);
  }
  if ((unsigned long )(op->prev)->regmap == (unsigned long )((void *)0)) {
    return (1);
  }
  tmp = rmap_is_associated(op->regmap, reg->id, (int )reg->fp, & vreg);
  hw = tmp;
  if (hw) {
    if (op->prev) {
      if ((op->prev)->live_in) {
        tmp___0 = jit_set_get((op->prev)->live_in, (int )vreg);
        if (tmp___0) {
          return (1);
        } else {
          goto _L;
        }
      } else
      _L: /* CIL Label */ 
      if ((op->prev)->live_out) {
        tmp___1 = jit_set_get((op->prev)->live_out, (int )vreg);
        if (tmp___1) {
          return (1);
        }
      }
    }
    if (op->next) {
      if ((op->next)->live_in) {
        tmp___2 = jit_set_get((op->next)->live_in, (int )vreg);
        if (tmp___2) {
          return (1);
        } else {
          goto _L___0;
        }
      } else
      _L___0: /* CIL Label */ 
      if ((op->next)->live_out) {
        tmp___3 = jit_set_get((op->next)->live_out, (int )vreg);
        if (tmp___3) {
          return (1);
        }
      }
    }
    return (0);
  }
  return (0);
}
}
static void emit_sse_sub_op(struct jit *jit , jit_op *op , long a1 , long a2 , long a3 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___14 ;
  int tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___21 ;
  int tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;

  {
  if (a1 == a2) {
    while (1) {
      tmp = jit->ip;
      (jit->ip) ++;
      *tmp = (unsigned char)242;
      while (1) {
        if (a1 > 7L) {
          tmp___0 = 4;
        } else {
          tmp___0 = 0;
        }
        if (a3 > 7L) {
          tmp___1 = 1;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)15;
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)92;
      while (1) {
        while (1) {
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a3 & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else
  if (a1 == a3) {
    while (1) {
      tmp___6 = jit->ip;
      (jit->ip) ++;
      *tmp___6 = (unsigned char)242;
      while (1) {
        if (a1 > 7L) {
          tmp___7 = 4;
        } else {
          tmp___7 = 0;
        }
        if (a2 > 7L) {
          tmp___8 = 1;
        } else {
          tmp___8 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(tmp___7 | tmp___8);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___9 = jit->ip;
          (jit->ip) ++;
          *tmp___9 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      tmp___10 = jit->ip;
      (jit->ip) ++;
      *tmp___10 = (unsigned char)15;
      tmp___11 = jit->ip;
      (jit->ip) ++;
      *tmp___11 = (unsigned char)92;
      while (1) {
        while (1) {
          tmp___12 = jit->ip;
          (jit->ip) ++;
          *tmp___12 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
    emit_sse_change_sign(jit, op, (int )a1);
  } else {
    while (1) {
      tmp___13 = jit->ip;
      (jit->ip) ++;
      *tmp___13 = (unsigned char)242;
      while (1) {
        if (a1 > 7L) {
          tmp___14 = 4;
        } else {
          tmp___14 = 0;
        }
        if (a2 > 7L) {
          tmp___15 = 1;
        } else {
          tmp___15 = 0;
        }
        _amd64_rex_bits___1 = (unsigned char )(tmp___14 | tmp___15);
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___16 = jit->ip;
          (jit->ip) ++;
          *tmp___16 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      tmp___17 = jit->ip;
      (jit->ip) ++;
      *tmp___17 = (unsigned char)15;
      tmp___18 = jit->ip;
      (jit->ip) ++;
      *tmp___18 = (unsigned char)16;
      while (1) {
        while (1) {
          tmp___19 = jit->ip;
          (jit->ip) ++;
          *tmp___19 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      tmp___20 = jit->ip;
      (jit->ip) ++;
      *tmp___20 = (unsigned char)242;
      while (1) {
        if (a1 > 7L) {
          tmp___21 = 4;
        } else {
          tmp___21 = 0;
        }
        if (a3 > 7L) {
          tmp___22 = 1;
        } else {
          tmp___22 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )(tmp___21 | tmp___22);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___23 = jit->ip;
          (jit->ip) ++;
          *tmp___23 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___24 = jit->ip;
      (jit->ip) ++;
      *tmp___24 = (unsigned char)15;
      tmp___25 = jit->ip;
      (jit->ip) ++;
      *tmp___25 = (unsigned char)92;
      while (1) {
        while (1) {
          tmp___26 = jit->ip;
          (jit->ip) ++;
          *tmp___26 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a3 & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
static jit_hw_reg *make_free_reg(struct jit_reg_allocator *al , jit_op *op , jit_value for_reg ) 
{ 
  int spill ;
  jit_value spill_candidate ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp ;
  int tmp___0 ;

  {
  spill = 0;
  spill_candidate = (jit_value )-1;
  tmp = rmap_spill_candidate(al, op, for_reg, & spill, & spill_candidate, 0);
  hreg = tmp;
  if (spill) {
    tmp___0 = jit_set_get(op->live_in, (int )spill_candidate);
    if (tmp___0) {
      unload_reg(op, hreg, spill_candidate);
    }
    rmap_unassoc(op->regmap, spill_candidate);
  }
  return (hreg);
}
}
__inline static jit_set *jit_set_new(void) 
{ 
  jit_set *s ;
  void *tmp ;

  {
  tmp = malloc(sizeof(jit_set ));
  s = (jit_set *)tmp;
  s->root = (jit_tree *)((void *)0);
  return (s);
}
}
static int shift_index(int arg ) 
{ 
  long tmp ;

  {
  if (arg == 2) {
    return (1);
  }
  if (arg == 4) {
    return (2);
  }
  if (arg == 8) {
    return (3);
  }
  tmp = __builtin_expect(1L, 0L);
  if (tmp) {
    __assert_rtn("shift_index", "./jitter-amd64.c", 1725, "0");
  }
  return (0);
}
}
__inline static void jump_adjustment(struct jit *jit , jit_op *op ) 
{ 
  jit_rmap *cur_regmap ;
  jit_rmap *tgt_regmap ;

  {
  if ((int )op->code == 810) {
    cur_regmap = op->regmap;
    tgt_regmap = (op->jmp_addr)->regmap;
    rmap_sync(op, cur_regmap, tgt_regmap, 1);
    rmap_sync(op, tgt_regmap, cur_regmap, 2);
  }
  return;
}
}
static void emit_sse_change_sign(struct jit *jit , jit_op *op , int reg ) 
{ 
  unsigned char *tmp ;

  {
  tmp = emit_sse_get_sign_mask();
  sse_alu_pd_reg_safeimm(jit, op, 87, reg, (double *)tmp);
  return;
}
}
static int uses_hw_reg(struct jit_op *op , jit_value reg , int fp ) 
{ 
  int i ;

  {
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 16U) {
    if (op->r_arg[0] == reg) {
      return (1);
    }
  }
  i = 0;
  while (i < 3) {
    if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 1) {
      goto _L;
    } else
    if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 3) {
      _L: /* CIL Label */ 
      if (fp) {
        if ((op->arg[i] & 1L) == 0L) {
          goto __Cont;
        }
      }
      if (! fp) {
        if ((op->arg[i] & 1L) == 1L) {
          goto __Cont;
        }
      }
      if (op->r_arg[i] == reg) {
        return (1);
      }
    }
    __Cont: /* CIL Label */ 
    i ++;
  }
  return (0);
}
}
__inline extern void ( __attribute__((__always_inline__)) __darwin_fd_set)(int _fd ,
                                                                           struct fd_set * const  _p ) 
{ 
  int tmp ;

  {
  tmp = __darwin_check_fd_set(_fd, (void const   *)_p);
  if (tmp) {
    _p->fds_bits[(unsigned long )_fd / (sizeof(__int32_t ) * 8UL)] |= (__int32_t )(1UL << (unsigned long )_fd % (sizeof(__int32_t ) * 8UL));
  }
  return;
}
}
static void sse_mov_reg_safeimm(struct jit *jit , jit_op *op , jit_value reg , double *imm ) 
{ 
  jit_hw_reg *r ;
  jit_hw_reg *tmp ;
  int _amd64_width_temp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  unsigned char *tmp___4 ;
  int tmp___5 ;
  unsigned char *tmp___6 ;
  amd64_imm_buf imb ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  int tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___21 ;
  int tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  int _amd64_width_temp___0 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___45 ;
  int tmp___46 ;
  int tmp___47 ;
  unsigned char *tmp___48 ;
  int tmp___49 ;
  unsigned char *tmp___50 ;
  amd64_imm_buf imb___3 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  int tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;

  {
  if ((jit_unsigned_value )imm > 4294967295UL) {
    tmp = jit_get_unused_reg(jit->reg_al, op, 0);
    r = tmp;
    if (r) {
      while (1) {
        _amd64_width_temp = (size_t )((jit_value )imm) == (size_t )((int )((size_t )((jit_value )imm)));
        while (1) {
          while (1) {
            if (_amd64_width_temp) {
              tmp___2 = 4;
            } else {
              tmp___2 = 8;
            }
            if (tmp___2 > 4) {
              tmp___1 = 8;
            } else {
              tmp___1 = 0;
            }
            if (r->id > 7) {
              tmp___3 = 1;
            } else {
              tmp___3 = 0;
            }
            _amd64_rex_bits = (unsigned char )(tmp___1 | tmp___3);
            if ((int )_amd64_rex_bits != 0) {
              tmp___4 = jit->ip;
              (jit->ip) ++;
              *tmp___4 = (unsigned char )(64 | (int )_amd64_rex_bits);
            } else {
              if (_amd64_width_temp) {
                tmp___5 = 4;
              } else {
                tmp___5 = 8;
              }
              if (tmp___5 == 1) {
                tmp___4 = jit->ip;
                (jit->ip) ++;
                *tmp___4 = (unsigned char )(64 | (int )_amd64_rex_bits);
              }
            }
            break;
          }
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = (unsigned char )(184 + (r->id & 7));
          if (_amd64_width_temp) {
            tmp___19 = 4;
          } else {
            tmp___19 = 8;
          }
          if (tmp___19 == 8) {
            while (1) {
              imb.val = (size_t )((jit_value )imm);
              tmp___7 = jit->ip;
              (jit->ip) ++;
              *tmp___7 = imb.b[0];
              tmp___8 = jit->ip;
              (jit->ip) ++;
              *tmp___8 = imb.b[1];
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = imb.b[2];
              tmp___10 = jit->ip;
              (jit->ip) ++;
              *tmp___10 = imb.b[3];
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = imb.b[4];
              tmp___12 = jit->ip;
              (jit->ip) ++;
              *tmp___12 = imb.b[5];
              tmp___13 = jit->ip;
              (jit->ip) ++;
              *tmp___13 = imb.b[6];
              tmp___14 = jit->ip;
              (jit->ip) ++;
              *tmp___14 = imb.b[7];
              break;
            }
          } else {
            while (1) {
              imb___0.val = (int )((size_t )((jit_value )imm));
              tmp___15 = jit->ip;
              (jit->ip) ++;
              *tmp___15 = imb___0.b[0];
              tmp___16 = jit->ip;
              (jit->ip) ++;
              *tmp___16 = imb___0.b[1];
              tmp___17 = jit->ip;
              (jit->ip) ++;
              *tmp___17 = imb___0.b[2];
              tmp___18 = jit->ip;
              (jit->ip) ++;
              *tmp___18 = imb___0.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      while (1) {
        tmp___20 = jit->ip;
        (jit->ip) ++;
        *tmp___20 = (unsigned char)242;
        while (1) {
          if (reg > 7L) {
            tmp___21 = 4;
          } else {
            tmp___21 = 0;
          }
          if (r->id > 7) {
            tmp___22 = 1;
          } else {
            tmp___22 = 0;
          }
          _amd64_rex_bits___0 = (unsigned char )(tmp___21 | tmp___22);
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___23 = jit->ip;
            (jit->ip) ++;
            *tmp___23 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___24 = jit->ip;
        (jit->ip) ++;
        *tmp___24 = (unsigned char)15;
        tmp___25 = jit->ip;
        (jit->ip) ++;
        *tmp___25 = (unsigned char)16;
        while (1) {
          if ((r->id & 7) == 4) {
            while (1) {
              tmp___26 = jit->ip;
              (jit->ip) ++;
              *tmp___26 = (unsigned char )((((reg & 7L) & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___27 = jit->ip;
              (jit->ip) ++;
              *tmp___27 = (unsigned char )((4 << 3) | 4);
              break;
            }
            break;
          }
          if ((r->id & 7) != 5) {
            while (1) {
              tmp___36 = jit->ip;
              (jit->ip) ++;
              *tmp___36 = (unsigned char )((((reg & 7L) & 7L) << 3) | (long )((r->id & 7) & 7));
              break;
            }
            break;
          }
          while (1) {
            tmp___37 = jit->ip;
            (jit->ip) ++;
            *tmp___37 = (unsigned char )(((long )(1 << 6) | (((reg & 7L) & 7L) << 3)) | (long )((r->id & 7) & 7));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)0;
            (jit->ip) ++;
            break;
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)0;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___43 = jit->ip;
            (jit->ip) ++;
            *tmp___43 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___44 = jit->ip;
        (jit->ip) ++;
        *tmp___44 = (unsigned char)80;
        break;
      }
      while (1) {
        _amd64_width_temp___0 = (size_t )((jit_value )imm) == (size_t )((int )((size_t )((jit_value )imm)));
        while (1) {
          while (1) {
            if (_amd64_width_temp___0) {
              tmp___47 = 4;
            } else {
              tmp___47 = 8;
            }
            if (tmp___47 > 4) {
              tmp___46 = 8;
            } else {
              tmp___46 = 0;
            }
            _amd64_rex_bits___2 = (unsigned char )tmp___46;
            if ((int )_amd64_rex_bits___2 != 0) {
              tmp___48 = jit->ip;
              (jit->ip) ++;
              *tmp___48 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
            } else {
              if (_amd64_width_temp___0) {
                tmp___49 = 4;
              } else {
                tmp___49 = 8;
              }
              if (tmp___49 == 1) {
                tmp___48 = jit->ip;
                (jit->ip) ++;
                *tmp___48 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
              }
            }
            break;
          }
          tmp___50 = jit->ip;
          (jit->ip) ++;
          *tmp___50 = (unsigned char)184;
          if (_amd64_width_temp___0) {
            tmp___63 = 4;
          } else {
            tmp___63 = 8;
          }
          if (tmp___63 == 8) {
            while (1) {
              imb___3.val = (size_t )((jit_value )imm);
              tmp___51 = jit->ip;
              (jit->ip) ++;
              *tmp___51 = imb___3.b[0];
              tmp___52 = jit->ip;
              (jit->ip) ++;
              *tmp___52 = imb___3.b[1];
              tmp___53 = jit->ip;
              (jit->ip) ++;
              *tmp___53 = imb___3.b[2];
              tmp___54 = jit->ip;
              (jit->ip) ++;
              *tmp___54 = imb___3.b[3];
              tmp___55 = jit->ip;
              (jit->ip) ++;
              *tmp___55 = imb___3.b[4];
              tmp___56 = jit->ip;
              (jit->ip) ++;
              *tmp___56 = imb___3.b[5];
              tmp___57 = jit->ip;
              (jit->ip) ++;
              *tmp___57 = imb___3.b[6];
              tmp___58 = jit->ip;
              (jit->ip) ++;
              *tmp___58 = imb___3.b[7];
              break;
            }
          } else {
            while (1) {
              imb___4.val = (int )((size_t )((jit_value )imm));
              tmp___59 = jit->ip;
              (jit->ip) ++;
              *tmp___59 = imb___4.b[0];
              tmp___60 = jit->ip;
              (jit->ip) ++;
              *tmp___60 = imb___4.b[1];
              tmp___61 = jit->ip;
              (jit->ip) ++;
              *tmp___61 = imb___4.b[2];
              tmp___62 = jit->ip;
              (jit->ip) ++;
              *tmp___62 = imb___4.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      while (1) {
        tmp___64 = jit->ip;
        (jit->ip) ++;
        *tmp___64 = (unsigned char)242;
        while (1) {
          if (reg > 7L) {
            tmp___65 = 4;
          } else {
            tmp___65 = 0;
          }
          _amd64_rex_bits___3 = (unsigned char )tmp___65;
          if ((int )_amd64_rex_bits___3 != 0) {
            tmp___66 = jit->ip;
            (jit->ip) ++;
            *tmp___66 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          }
          break;
        }
        tmp___67 = jit->ip;
        (jit->ip) ++;
        *tmp___67 = (unsigned char)15;
        tmp___68 = jit->ip;
        (jit->ip) ++;
        *tmp___68 = (unsigned char)16;
        while (1) {
          while (1) {
            tmp___79 = jit->ip;
            (jit->ip) ++;
            *tmp___79 = (unsigned char )(((reg & 7L) & 7L) << 3);
            break;
          }
          break;
          while (1) {
            tmp___80 = jit->ip;
            (jit->ip) ++;
            *tmp___80 = (unsigned char )((long )(1 << 6) | (((reg & 7L) & 7L) << 3));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)0;
            (jit->ip) ++;
            break;
          }
          break;
        }
        break;
      }
      while (1) {
        while (1) {
          _amd64_rex_bits___4 = (unsigned char)0;
          if ((int )_amd64_rex_bits___4 != 0) {
            tmp___86 = jit->ip;
            (jit->ip) ++;
            *tmp___86 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
          }
          break;
        }
        tmp___87 = jit->ip;
        (jit->ip) ++;
        *tmp___87 = (unsigned char)88;
        break;
      }
    }
  } else {
    while (1) {
      tmp___88 = jit->ip;
      (jit->ip) ++;
      *tmp___88 = (unsigned char)242;
      while (1) {
        if (reg > 7L) {
          tmp___89 = 4;
        } else {
          tmp___89 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )tmp___89;
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___90 = jit->ip;
          (jit->ip) ++;
          *tmp___90 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      tmp___91 = jit->ip;
      (jit->ip) ++;
      *tmp___91 = (unsigned char)15;
      tmp___92 = jit->ip;
      (jit->ip) ++;
      *tmp___92 = (unsigned char)16;
      while (1) {
        tmp___93 = jit->ip;
        (jit->ip) ++;
        *tmp___93 = (unsigned char )(((reg & 7L) << 3) | 4L);
        break;
      }
      while (1) {
        tmp___94 = jit->ip;
        (jit->ip) ++;
        *tmp___94 = (unsigned char )((4 << 3) | 5);
        break;
      }
      while (1) {
        imb___7.val = (int )((jit_value )imm);
        tmp___95 = jit->ip;
        (jit->ip) ++;
        *tmp___95 = imb___7.b[0];
        tmp___96 = jit->ip;
        (jit->ip) ++;
        *tmp___96 = imb___7.b[1];
        tmp___97 = jit->ip;
        (jit->ip) ++;
        *tmp___97 = imb___7.b[2];
        tmp___98 = jit->ip;
        (jit->ip) ++;
        *tmp___98 = imb___7.b[3];
        break;
      }
      break;
    }
  }
  return;
}
}
__inline static jit_op *jit_op_last(jit_op *op ) 
{ 


  {
  while ((unsigned long )op->next != (unsigned long )((void *)0)) {
    op = op->next;
  }
  return (op);
}
}
static int valid_fsize(int size ) 
{ 
  int tmp ;

  {
  if (size == 4) {
    tmp = 1;
  } else
  if (size == 8) {
    tmp = 1;
  } else {
    tmp = 0;
  }
  return (tmp);
}
}
__inline static void jit_print_tree(jit_tree *h , int level ) 
{ 
  int i ;

  {
  if ((unsigned long )h == (unsigned long )((void *)0)) {
    return;
  }
  i = 0;
  while (i < level) {
    printf((char const   */* __restrict  */)" ");
    i ++;
  }
  printf((char const   */* __restrict  */)"%i:%li\n", (int )h->key, (long )h->value);
  jit_print_tree(h->left, level + 1);
  jit_print_tree(h->right, level + 1);
  return;
}
}
static void emit_sse_round(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *branch1 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___6 ;
  int offset ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  x86_imm_buf imb ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *branch2 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___16 ;
  int t ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char rex_correction ;
  unsigned char *pos ;
  int disp ;
  int size ;
  long tmp___23 ;
  long tmp___24 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  long tmp___29 ;
  unsigned char rex_correction___0 ;
  unsigned char *pos___0 ;
  int disp___0 ;
  int size___0 ;
  long tmp___30 ;
  long tmp___31 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  long tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___38 ;
  int tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___45 ;
  int tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;

  {
  while (1) {
    while (1) {
      tmp = jit->ip;
      (jit->ip) ++;
      *tmp = (unsigned char)102;
      while (1) {
        if (a2 > 7L) {
          tmp___0 = 4;
        } else {
          tmp___0 = 0;
        }
        if (a2 > 7L) {
          tmp___1 = 1;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)15;
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)198;
      while (1) {
        while (1) {
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      *(jit->ip) = (unsigned char)0;
      (jit->ip) ++;
      break;
    }
    break;
  }
  sse_alu_pd_reg_safeimm(jit, op, 47, (int )a2, (double *)(& x0));
  branch1 = jit->ip;
  while (1) {
    while (1) {
      _amd64_rex_bits___0 = (unsigned char)8;
      if ((int )_amd64_rex_bits___0 != 0) {
        tmp___6 = jit->ip;
        (jit->ip) ++;
        *tmp___6 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
      }
      break;
    }
    while (1) {
      offset = -2;
      if (offset >= -128) {
        if (offset <= 127) {
          while (1) {
            tmp___8 = jit->ip;
            (jit->ip) ++;
            *tmp___8 = (unsigned char )x86_cc_unsigned_map[2];
            while (1) {
              *(jit->ip) = (unsigned char )(offset & 255);
              (jit->ip) ++;
              break;
            }
            break;
          }
        } else {
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
        offset -= 4;
        while (1) {
          tmp___9 = jit->ip;
          (jit->ip) ++;
          *tmp___9 = (unsigned char)15;
          tmp___11 = jit->ip;
          (jit->ip) ++;
          *tmp___11 = (unsigned char )((int const   )x86_cc_unsigned_map[2] + 16);
          while (1) {
            imb.val = offset;
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = imb.b[0];
            tmp___13 = jit->ip;
            (jit->ip) ++;
            *tmp___13 = imb.b[1];
            tmp___14 = jit->ip;
            (jit->ip) ++;
            *tmp___14 = imb.b[2];
            tmp___15 = jit->ip;
            (jit->ip) ++;
            *tmp___15 = imb.b[3];
            break;
          }
          break;
        }
      }
      break;
    }
    break;
  }
  sse_alu_sd_reg_safeimm(jit, op, 88, (int )a2, (double *)(& x05));
  branch2 = jit->ip;
  while (1) {
    while (1) {
      _amd64_rex_bits___1 = (unsigned char)0;
      if ((int )_amd64_rex_bits___1 != 0) {
        tmp___16 = jit->ip;
        (jit->ip) ++;
        *tmp___16 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
      }
      break;
    }
    while (1) {
      t = -2;
      if (t >= -128) {
        if (t <= 127) {
          while (1) {
            tmp___17 = jit->ip;
            (jit->ip) ++;
            *tmp___17 = (unsigned char)235;
            while (1) {
              *(jit->ip) = (unsigned char )(t & 255);
              (jit->ip) ++;
              break;
            }
            break;
          }
        } else {
          goto _L___0;
        }
      } else {
        _L___0: /* CIL Label */ 
        t -= 3;
        while (1) {
          tmp___18 = jit->ip;
          (jit->ip) ++;
          *tmp___18 = (unsigned char)233;
          while (1) {
            imb___0.val = t;
            tmp___19 = jit->ip;
            (jit->ip) ++;
            *tmp___19 = imb___0.b[0];
            tmp___20 = jit->ip;
            (jit->ip) ++;
            *tmp___20 = imb___0.b[1];
            tmp___21 = jit->ip;
            (jit->ip) ++;
            *tmp___21 = imb___0.b[2];
            tmp___22 = jit->ip;
            (jit->ip) ++;
            *tmp___22 = imb___0.b[3];
            break;
          }
          break;
        }
      }
      break;
    }
    break;
  }
  while (1) {
    rex_correction = (unsigned char)0;
    if (((int )*branch1 & 240) == 64) {
      rex_correction = (unsigned char )((int )rex_correction + 1);
    }
    pos = (branch1 + 1) + (int )rex_correction;
    size = 0;
    switch ((int )*(branch1 + (int )rex_correction)) {
    case 233: 
    case 232: 
    size ++;
    break;
    case 15: 
    if ((int )*pos >= 112) {
      if (! ((int )*pos <= 143)) {
        goto _L___1;
      }
    } else {
      _L___1: /* CIL Label */ 
      tmp___23 = __builtin_expect(1L, 0L);
      if (tmp___23) {
        __assert_rtn("emit_sse_round", "./jitter-amd64.c", 1473, "0");
      }
    }
    size ++;
    pos ++;
    break;
    case 127: 
    case 126: 
    case 125: 
    case 124: 
    case 123: 
    case 122: 
    case 121: 
    case 120: 
    case 119: 
    case 118: 
    case 117: 
    case 116: 
    case 115: 
    case 114: 
    case 113: 
    case 112: 
    case 235: 
    case 226: 
    case 225: 
    case 224: 
    break;
    default: 
    tmp___24 = __builtin_expect(1L, 0L);
    if (tmp___24) {
      __assert_rtn("emit_sse_round", "./jitter-amd64.c", 1473, "0");
    }
    }
    disp = (int )(jit->ip - pos);
    if (size) {
      while (1) {
        imb___1.val = disp - 4;
        tmp___25 = pos;
        pos ++;
        *tmp___25 = imb___1.b[0];
        tmp___26 = pos;
        pos ++;
        *tmp___26 = imb___1.b[1];
        tmp___27 = pos;
        pos ++;
        *tmp___27 = imb___1.b[2];
        tmp___28 = pos;
        pos ++;
        *tmp___28 = imb___1.b[3];
        break;
      }
    } else
    if (disp - 1 >= -128) {
      if (disp - 1 <= 127) {
        while (1) {
          *pos = (unsigned char )((disp - 1) & 255);
          pos ++;
          break;
        }
      } else {
        goto _L___2;
      }
    } else {
      _L___2: /* CIL Label */ 
      tmp___29 = __builtin_expect(1L, 0L);
      if (tmp___29) {
        __assert_rtn("emit_sse_round", "./jitter-amd64.c", 1473, "0");
      }
    }
    break;
  }
  sse_alu_sd_reg_safeimm(jit, op, 92, (int )a2, (double *)(& x05));
  while (1) {
    rex_correction___0 = (unsigned char)0;
    if (((int )*branch2 & 240) == 64) {
      rex_correction___0 = (unsigned char )((int )rex_correction___0 + 1);
    }
    pos___0 = (branch2 + 1) + (int )rex_correction___0;
    size___0 = 0;
    switch ((int )*(branch2 + (int )rex_correction___0)) {
    case 233: 
    case 232: 
    size___0 ++;
    break;
    case 15: 
    if ((int )*pos___0 >= 112) {
      if (! ((int )*pos___0 <= 143)) {
        goto _L___3;
      }
    } else {
      _L___3: /* CIL Label */ 
      tmp___30 = __builtin_expect(1L, 0L);
      if (tmp___30) {
        __assert_rtn("emit_sse_round", "./jitter-amd64.c", 1476, "0");
      }
    }
    size___0 ++;
    pos___0 ++;
    break;
    case 127: 
    case 126: 
    case 125: 
    case 124: 
    case 123: 
    case 122: 
    case 121: 
    case 120: 
    case 119: 
    case 118: 
    case 117: 
    case 116: 
    case 115: 
    case 114: 
    case 113: 
    case 112: 
    case 235: 
    case 226: 
    case 225: 
    case 224: 
    break;
    default: 
    tmp___31 = __builtin_expect(1L, 0L);
    if (tmp___31) {
      __assert_rtn("emit_sse_round", "./jitter-amd64.c", 1476, "0");
    }
    }
    disp___0 = (int )(jit->ip - pos___0);
    if (size___0) {
      while (1) {
        imb___2.val = disp___0 - 4;
        tmp___32 = pos___0;
        pos___0 ++;
        *tmp___32 = imb___2.b[0];
        tmp___33 = pos___0;
        pos___0 ++;
        *tmp___33 = imb___2.b[1];
        tmp___34 = pos___0;
        pos___0 ++;
        *tmp___34 = imb___2.b[2];
        tmp___35 = pos___0;
        pos___0 ++;
        *tmp___35 = imb___2.b[3];
        break;
      }
    } else
    if (disp___0 - 1 >= -128) {
      if (disp___0 - 1 <= 127) {
        while (1) {
          *pos___0 = (unsigned char )((disp___0 - 1) & 255);
          pos___0 ++;
          break;
        }
      } else {
        goto _L___4;
      }
    } else {
      _L___4: /* CIL Label */ 
      tmp___36 = __builtin_expect(1L, 0L);
      if (tmp___36) {
        __assert_rtn("emit_sse_round", "./jitter-amd64.c", 1476, "0");
      }
    }
    break;
  }
  while (1) {
    tmp___37 = jit->ip;
    (jit->ip) ++;
    *tmp___37 = (unsigned char)242;
    while (1) {
      if (a1 > 7L) {
        tmp___38 = 4;
      } else {
        tmp___38 = 0;
      }
      if (a2 > 7L) {
        tmp___39 = 1;
      } else {
        tmp___39 = 0;
      }
      _amd64_rex_bits___2 = (unsigned char )((8 | tmp___38) | tmp___39);
      if ((int )_amd64_rex_bits___2 != 0) {
        tmp___40 = jit->ip;
        (jit->ip) ++;
        *tmp___40 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
      }
      break;
    }
    tmp___41 = jit->ip;
    (jit->ip) ++;
    *tmp___41 = (unsigned char)15;
    tmp___42 = jit->ip;
    (jit->ip) ++;
    *tmp___42 = (unsigned char)44;
    while (1) {
      while (1) {
        tmp___43 = jit->ip;
        (jit->ip) ++;
        *tmp___43 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
        break;
      }
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      tmp___44 = jit->ip;
      (jit->ip) ++;
      *tmp___44 = (unsigned char)102;
      while (1) {
        if (a2 > 7L) {
          tmp___45 = 4;
        } else {
          tmp___45 = 0;
        }
        if (a2 > 7L) {
          tmp___46 = 1;
        } else {
          tmp___46 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )(tmp___45 | tmp___46);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___47 = jit->ip;
          (jit->ip) ++;
          *tmp___47 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      tmp___48 = jit->ip;
      (jit->ip) ++;
      *tmp___48 = (unsigned char)15;
      tmp___49 = jit->ip;
      (jit->ip) ++;
      *tmp___49 = (unsigned char)198;
      while (1) {
        while (1) {
          tmp___50 = jit->ip;
          (jit->ip) ++;
          *tmp___50 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      *(jit->ip) = (unsigned char)1;
      (jit->ip) ++;
      break;
    }
    break;
  }
  return;
}
}
__inline extern int digittoint(int _c ) 
{ 
  int tmp ;

  {
  tmp = __maskrune(_c, 15UL);
  return (tmp);
}
}
__inline static int is_suitable_mul(jit_op *op ) 
{ 
  jit_value arg ;
  int tmp ;

  {
  arg = op->arg[2];
  if ((int )op->code == 554) {
    if (arg == 2L) {
      tmp = 1;
    } else
    if (arg == 4L) {
      tmp = 1;
    } else
    if (arg == 8L) {
      tmp = 1;
    } else {
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
  if ((int )op->code == 546) {
    if (arg == 1L) {
      tmp = 1;
    } else
    if (arg == 2L) {
      tmp = 1;
    } else
    if (arg == 3L) {
      tmp = 1;
    } else {
      tmp = 0;
    }
  } else {
    tmp = 0;
  }
  return (tmp);
}
}
static void emit_restore_all_regs(struct jit *jit , jit_op *op ) 
{ 
  int alignment ;
  int tmp ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  x86_imm_buf imb ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  struct jit_reg_allocator *al ;
  int i ;
  jit_hw_reg *reg ;
  unsigned char *tmp___16 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  int tmp___59 ;
  int i___0 ;
  jit_hw_reg *reg___0 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  int tmp___63 ;
  unsigned char _amd64_rex_bits___7 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;

  {
  tmp = required_stack_space_for_regs(jit, op);
  alignment = tmp % 16;
  if (alignment != 0) {
    while (1) {
      if (16 - alignment >= -128) {
        if (16 - alignment <= 127) {
          while (1) {
            _amd64_rex_bits = (unsigned char)8;
            if ((int )_amd64_rex_bits != 0) {
              tmp___0 = jit->ip;
              (jit->ip) ++;
              *tmp___0 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___1 = jit->ip;
          (jit->ip) ++;
          *tmp___1 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___2 = jit->ip;
              (jit->ip) ++;
              *tmp___2 = (unsigned char )((3 << 6) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )((16 - alignment) & 255);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)8;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___9 = jit->ip;
            (jit->ip) ++;
            *tmp___9 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___10 = jit->ip;
        (jit->ip) ++;
        *tmp___10 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___11 = jit->ip;
            (jit->ip) ++;
            *tmp___11 = (unsigned char )((3 << 6) | 4);
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = 16 - alignment;
          tmp___12 = jit->ip;
          (jit->ip) ++;
          *tmp___12 = imb___0.b[0];
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = imb___0.b[1];
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = imb___0.b[2];
          tmp___15 = jit->ip;
          (jit->ip) ++;
          *tmp___15 = imb___0.b[3];
          break;
        }
      }
      break;
    }
  }
  al = jit->reg_al;
  i = al->fp_reg_cnt - 1;
  while (i >= 0) {
    reg = al->fp_regs + i;
    if (! reg->callee_saved) {
      tmp___59 = is_active_register(al, reg, op);
      if (tmp___59) {
        while (1) {
          tmp___16 = jit->ip;
          (jit->ip) ++;
          *tmp___16 = (unsigned char)102;
          while (1) {
            if (reg->id > 7) {
              tmp___17 = 4;
            } else {
              tmp___17 = 0;
            }
            _amd64_rex_bits___2 = (unsigned char )tmp___17;
            if ((int )_amd64_rex_bits___2 != 0) {
              tmp___18 = jit->ip;
              (jit->ip) ++;
              *tmp___18 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
            }
            break;
          }
          tmp___19 = jit->ip;
          (jit->ip) ++;
          *tmp___19 = (unsigned char)15;
          tmp___20 = jit->ip;
          (jit->ip) ++;
          *tmp___20 = (unsigned char)18;
          while (1) {
            while (1) {
              while (1) {
                tmp___26 = jit->ip;
                (jit->ip) ++;
                *tmp___26 = (unsigned char )((((reg->id & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___27 = jit->ip;
                (jit->ip) ++;
                *tmp___27 = (unsigned char )((4 << 3) | 4);
                break;
              }
              break;
              while (1) {
                tmp___36 = jit->ip;
                (jit->ip) ++;
                *tmp___36 = (unsigned char )((((reg->id & 7) & 7) << 3) | 4);
                break;
              }
              break;
              while (1) {
                tmp___37 = jit->ip;
                (jit->ip) ++;
                *tmp___37 = (unsigned char )(((1 << 6) | (((reg->id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
              break;
            }
            break;
          }
          break;
        }
        while (1) {
          while (1) {
            _amd64_rex_bits___3 = (unsigned char)8;
            if ((int )_amd64_rex_bits___3 != 0) {
              tmp___43 = jit->ip;
              (jit->ip) ++;
              *tmp___43 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
            }
            break;
          }
          tmp___44 = jit->ip;
          (jit->ip) ++;
          *tmp___44 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___45 = jit->ip;
              (jit->ip) ++;
              *tmp___45 = (unsigned char )((3 << 6) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)8;
            (jit->ip) ++;
            break;
          }
          break;
        }
      }
    }
    while (1) {
      break;
    }
    i --;
  }
  i___0 = al->gp_reg_cnt - 1;
  while (i___0 >= 0) {
    reg___0 = al->gp_regs + i___0;
    if (! reg___0->callee_saved) {
      tmp___63 = is_active_register(al, reg___0, op);
      if (tmp___63) {
        while (1) {
          while (1) {
            if (reg___0->id > 7) {
              tmp___60 = 1;
            } else {
              tmp___60 = 0;
            }
            _amd64_rex_bits___6 = (unsigned char )tmp___60;
            if ((int )_amd64_rex_bits___6 != 0) {
              tmp___61 = jit->ip;
              (jit->ip) ++;
              *tmp___61 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
            }
            break;
          }
          tmp___62 = jit->ip;
          (jit->ip) ++;
          *tmp___62 = (unsigned char )(88 + (reg___0->id & 7));
          break;
        }
      }
    }
    i___0 --;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___7 = (unsigned char)8;
      if ((int )_amd64_rex_bits___7 != 0) {
        tmp___64 = jit->ip;
        (jit->ip) ++;
        *tmp___64 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
      }
      break;
    }
    while (1) {
      tmp___65 = jit->ip;
      (jit->ip) ++;
      *tmp___65 = (unsigned char)157;
      break;
    }
    break;
  }
  return;
}
}
void jit_allocator_hints_free(jit_tree *hints ) 
{ 
  int refs ;

  {
  if ((unsigned long )hints == (unsigned long )((void *)0)) {
    return;
  }
  jit_allocator_hints_free(hints->left);
  jit_allocator_hints_free(hints->right);
  (((struct jit_allocator_hint *)hints->value)->refs) --;
  refs = ((struct jit_allocator_hint *)hints->value)->refs;
  if (refs == 0) {
    free(hints->value);
  }
  free((void *)hints);
  return;
}
}
__inline static void flw_analyze_prolog(struct jit *jit , jit_op *op , struct jit_func_info *func_info ) 
{ 
  int i ;

  {
  i = 0;
  while (i < func_info->general_arg_cnt + func_info->float_arg_cnt) {
    if ((unsigned int )(func_info->args + i)->type == 2U) {
      jit_set_remove(op->live_in, (1 | (3 << 1)) | ((i & 268435455) << 4));
    } else {
      jit_set_remove(op->live_in, (3 << 1) | ((i & 268435455) << 4));
    }
    i ++;
  }
  return;
}
}
void dummy_opcode_i$nit(void) 
{ 


  {

}
}
void jit_patch_external_calls(struct jit *jit ) 
{ 


  {
  return;
}
}
__inline extern int isgraph(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 2048UL);
  return (tmp);
}
}
int jit_allocai(struct jit *jit , int size ) 
{ 
  jit_value real_size ;
  jit_value tmp ;
  struct jit_func_info *tmp___0 ;
  struct jit_func_info *tmp___1 ;

  {
  tmp = jit_value_align((jit_value )size, (jit_value )16);
  real_size = tmp;
  jit_add_op(jit, (unsigned short)890, (unsigned char)2, real_size, (jit_value )0,
             (jit_value )0, (unsigned char)0, (struct jit_debug_info *)((void *)0));
  tmp___0 = jit_current_func_info(jit);
  tmp___0->allocai_mem += real_size;
  tmp___1 = jit_current_func_info(jit);
  return ((int )(- tmp___1->allocai_mem));
}
}
static jit_hw_reg *rmap_is_associated(jit_rmap *rmap , int reg_id , int fp , jit_value *virt_reg ) 
{ 
  jit_hw_reg *tmp ;

  {
  tmp = rmap_is_associated_aux(rmap->map, reg_id, fp, virt_reg);
  return (tmp);
}
}
__inline static void jit_free_op(struct jit_op *op ) 
{ 
  struct jit_func_info *info ;

  {
  if (op->live_in) {
    jit_set_free(op->live_in);
  }
  if (op->live_out) {
    jit_set_free(op->live_out);
  }
  rmap_free(op->regmap);
  jit_allocator_hints_free(op->allocator_hints);
  if (op->debug_info) {
    free((void *)op->debug_info);
  }
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 536U) {
    info = (struct jit_func_info *)op->arg[1];
    free((void *)info->args);
    free((void *)info);
  }
  free((void *)op);
  return;
}
}
static void sse_alu_pd_reg_safeimm(struct jit *jit , jit_op *op , int op_id , int reg ,
                                   double *imm ) 
{ 
  jit_hw_reg *r ;
  jit_hw_reg *tmp ;
  int _amd64_width_temp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  unsigned char *tmp___4 ;
  int tmp___5 ;
  unsigned char *tmp___6 ;
  amd64_imm_buf imb ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  int tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  int _amd64_width_temp___0 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  unsigned char *tmp___55 ;
  int tmp___56 ;
  unsigned char *tmp___57 ;
  amd64_imm_buf imb___4 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  int tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;

  {
  if ((jit_unsigned_value )imm > 4294967295UL) {
    tmp = jit_get_unused_reg(jit->reg_al, op, 0);
    r = tmp;
    if (r) {
      while (1) {
        _amd64_width_temp = (size_t )((long )imm) == (size_t )((int )((size_t )((long )imm)));
        while (1) {
          while (1) {
            if (_amd64_width_temp) {
              tmp___2 = 4;
            } else {
              tmp___2 = 8;
            }
            if (tmp___2 > 4) {
              tmp___1 = 8;
            } else {
              tmp___1 = 0;
            }
            if (r->id > 7) {
              tmp___3 = 1;
            } else {
              tmp___3 = 0;
            }
            _amd64_rex_bits = (unsigned char )(tmp___1 | tmp___3);
            if ((int )_amd64_rex_bits != 0) {
              tmp___4 = jit->ip;
              (jit->ip) ++;
              *tmp___4 = (unsigned char )(64 | (int )_amd64_rex_bits);
            } else {
              if (_amd64_width_temp) {
                tmp___5 = 4;
              } else {
                tmp___5 = 8;
              }
              if (tmp___5 == 1) {
                tmp___4 = jit->ip;
                (jit->ip) ++;
                *tmp___4 = (unsigned char )(64 | (int )_amd64_rex_bits);
              }
            }
            break;
          }
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = (unsigned char )(184 + (r->id & 7));
          if (_amd64_width_temp) {
            tmp___19 = 4;
          } else {
            tmp___19 = 8;
          }
          if (tmp___19 == 8) {
            while (1) {
              imb.val = (size_t )((long )imm);
              tmp___7 = jit->ip;
              (jit->ip) ++;
              *tmp___7 = imb.b[0];
              tmp___8 = jit->ip;
              (jit->ip) ++;
              *tmp___8 = imb.b[1];
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = imb.b[2];
              tmp___10 = jit->ip;
              (jit->ip) ++;
              *tmp___10 = imb.b[3];
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = imb.b[4];
              tmp___12 = jit->ip;
              (jit->ip) ++;
              *tmp___12 = imb.b[5];
              tmp___13 = jit->ip;
              (jit->ip) ++;
              *tmp___13 = imb.b[6];
              tmp___14 = jit->ip;
              (jit->ip) ++;
              *tmp___14 = imb.b[7];
              break;
            }
          } else {
            while (1) {
              imb___0.val = (int )((size_t )((long )imm));
              tmp___15 = jit->ip;
              (jit->ip) ++;
              *tmp___15 = imb___0.b[0];
              tmp___16 = jit->ip;
              (jit->ip) ++;
              *tmp___16 = imb___0.b[1];
              tmp___17 = jit->ip;
              (jit->ip) ++;
              *tmp___17 = imb___0.b[2];
              tmp___18 = jit->ip;
              (jit->ip) ++;
              *tmp___18 = imb___0.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      while (1) {
        tmp___20 = jit->ip;
        (jit->ip) ++;
        *tmp___20 = (unsigned char)102;
        while (1) {
          if (reg > 7) {
            tmp___21 = 4;
          } else {
            tmp___21 = 0;
          }
          if (r->id == 16) {
            tmp___24 = 0;
          } else {
            tmp___24 = r->id;
          }
          if (tmp___24 > 7) {
            tmp___23 = 1;
          } else {
            tmp___23 = 0;
          }
          _amd64_rex_bits___0 = (unsigned char )(tmp___21 | tmp___23);
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___25 = jit->ip;
            (jit->ip) ++;
            *tmp___25 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___26 = jit->ip;
        (jit->ip) ++;
        *tmp___26 = (unsigned char)15;
        tmp___27 = jit->ip;
        (jit->ip) ++;
        *tmp___27 = (unsigned char )op_id;
        while (1) {
          if (r->id == 16) {
            while (1) {
              tmp___28 = jit->ip;
              (jit->ip) ++;
              *tmp___28 = (unsigned char )((((reg & 7) & 7) << 3) | 5);
              break;
            }
            while (1) {
              imb___1.val = 0;
              tmp___29 = jit->ip;
              (jit->ip) ++;
              *tmp___29 = imb___1.b[0];
              tmp___30 = jit->ip;
              (jit->ip) ++;
              *tmp___30 = imb___1.b[1];
              tmp___31 = jit->ip;
              (jit->ip) ++;
              *tmp___31 = imb___1.b[2];
              tmp___32 = jit->ip;
              (jit->ip) ++;
              *tmp___32 = imb___1.b[3];
              break;
            }
          } else {
            while (1) {
              if ((r->id & 7) == 4) {
                while (1) {
                  tmp___33 = jit->ip;
                  (jit->ip) ++;
                  *tmp___33 = (unsigned char )((((reg & 7) & 7) << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___34 = jit->ip;
                  (jit->ip) ++;
                  *tmp___34 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                break;
              }
              if ((r->id & 7) != 5) {
                while (1) {
                  tmp___43 = jit->ip;
                  (jit->ip) ++;
                  *tmp___43 = (unsigned char )((((reg & 7) & 7) << 3) | ((r->id & 7) & 7));
                  break;
                }
                break;
              }
              while (1) {
                tmp___44 = jit->ip;
                (jit->ip) ++;
                *tmp___44 = (unsigned char )(((1 << 6) | (((reg & 7) & 7) << 3)) | ((r->id & 7) & 7));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
              break;
            }
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)0;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___50 = jit->ip;
            (jit->ip) ++;
            *tmp___50 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___51 = jit->ip;
        (jit->ip) ++;
        *tmp___51 = (unsigned char)80;
        break;
      }
      while (1) {
        _amd64_width_temp___0 = (size_t )((long )imm) == (size_t )((int )((size_t )((long )imm)));
        while (1) {
          while (1) {
            if (_amd64_width_temp___0) {
              tmp___54 = 4;
            } else {
              tmp___54 = 8;
            }
            if (tmp___54 > 4) {
              tmp___53 = 8;
            } else {
              tmp___53 = 0;
            }
            _amd64_rex_bits___2 = (unsigned char )tmp___53;
            if ((int )_amd64_rex_bits___2 != 0) {
              tmp___55 = jit->ip;
              (jit->ip) ++;
              *tmp___55 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
            } else {
              if (_amd64_width_temp___0) {
                tmp___56 = 4;
              } else {
                tmp___56 = 8;
              }
              if (tmp___56 == 1) {
                tmp___55 = jit->ip;
                (jit->ip) ++;
                *tmp___55 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
              }
            }
            break;
          }
          tmp___57 = jit->ip;
          (jit->ip) ++;
          *tmp___57 = (unsigned char)184;
          if (_amd64_width_temp___0) {
            tmp___70 = 4;
          } else {
            tmp___70 = 8;
          }
          if (tmp___70 == 8) {
            while (1) {
              imb___4.val = (size_t )((long )imm);
              tmp___58 = jit->ip;
              (jit->ip) ++;
              *tmp___58 = imb___4.b[0];
              tmp___59 = jit->ip;
              (jit->ip) ++;
              *tmp___59 = imb___4.b[1];
              tmp___60 = jit->ip;
              (jit->ip) ++;
              *tmp___60 = imb___4.b[2];
              tmp___61 = jit->ip;
              (jit->ip) ++;
              *tmp___61 = imb___4.b[3];
              tmp___62 = jit->ip;
              (jit->ip) ++;
              *tmp___62 = imb___4.b[4];
              tmp___63 = jit->ip;
              (jit->ip) ++;
              *tmp___63 = imb___4.b[5];
              tmp___64 = jit->ip;
              (jit->ip) ++;
              *tmp___64 = imb___4.b[6];
              tmp___65 = jit->ip;
              (jit->ip) ++;
              *tmp___65 = imb___4.b[7];
              break;
            }
          } else {
            while (1) {
              imb___5.val = (int )((size_t )((long )imm));
              tmp___66 = jit->ip;
              (jit->ip) ++;
              *tmp___66 = imb___5.b[0];
              tmp___67 = jit->ip;
              (jit->ip) ++;
              *tmp___67 = imb___5.b[1];
              tmp___68 = jit->ip;
              (jit->ip) ++;
              *tmp___68 = imb___5.b[2];
              tmp___69 = jit->ip;
              (jit->ip) ++;
              *tmp___69 = imb___5.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      while (1) {
        tmp___71 = jit->ip;
        (jit->ip) ++;
        *tmp___71 = (unsigned char)102;
        while (1) {
          if (reg > 7) {
            tmp___72 = 4;
          } else {
            tmp___72 = 0;
          }
          _amd64_rex_bits___3 = (unsigned char )tmp___72;
          if ((int )_amd64_rex_bits___3 != 0) {
            tmp___73 = jit->ip;
            (jit->ip) ++;
            *tmp___73 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          }
          break;
        }
        tmp___74 = jit->ip;
        (jit->ip) ++;
        *tmp___74 = (unsigned char)15;
        tmp___75 = jit->ip;
        (jit->ip) ++;
        *tmp___75 = (unsigned char )op_id;
        while (1) {
          while (1) {
            while (1) {
              tmp___91 = jit->ip;
              (jit->ip) ++;
              *tmp___91 = (unsigned char )(((reg & 7) & 7) << 3);
              break;
            }
            break;
            while (1) {
              tmp___92 = jit->ip;
              (jit->ip) ++;
              *tmp___92 = (unsigned char )((1 << 6) | (((reg & 7) & 7) << 3));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)0;
              (jit->ip) ++;
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      while (1) {
        while (1) {
          _amd64_rex_bits___4 = (unsigned char)0;
          if ((int )_amd64_rex_bits___4 != 0) {
            tmp___98 = jit->ip;
            (jit->ip) ++;
            *tmp___98 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
          }
          break;
        }
        tmp___99 = jit->ip;
        (jit->ip) ++;
        *tmp___99 = (unsigned char)88;
        break;
      }
    }
  } else {
    while (1) {
      tmp___100 = jit->ip;
      (jit->ip) ++;
      *tmp___100 = (unsigned char)102;
      while (1) {
        if (reg > 7) {
          tmp___101 = 4;
        } else {
          tmp___101 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(8 | tmp___101);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___102 = jit->ip;
          (jit->ip) ++;
          *tmp___102 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      tmp___103 = jit->ip;
      (jit->ip) ++;
      *tmp___103 = (unsigned char)15;
      tmp___104 = jit->ip;
      (jit->ip) ++;
      *tmp___104 = (unsigned char )op_id;
      while (1) {
        tmp___105 = jit->ip;
        (jit->ip) ++;
        *tmp___105 = (unsigned char )(((reg & 7) << 3) | 4);
        break;
      }
      while (1) {
        tmp___106 = jit->ip;
        (jit->ip) ++;
        *tmp___106 = (unsigned char )((4 << 3) | 5);
        break;
      }
      while (1) {
        imb___9.val = (int )((long )imm);
        tmp___107 = jit->ip;
        (jit->ip) ++;
        *tmp___107 = imb___9.b[0];
        tmp___108 = jit->ip;
        (jit->ip) ++;
        *tmp___108 = imb___9.b[1];
        tmp___109 = jit->ip;
        (jit->ip) ++;
        *tmp___109 = imb___9.b[2];
        tmp___110 = jit->ip;
        (jit->ip) ++;
        *tmp___110 = imb___9.b[3];
        break;
      }
      break;
    }
  }
  return;
}
}
static int check_code_references(jit_op *op , char *msg_buf ) 
{ 
  int tmp ;

  {
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 832U) {
    goto _L;
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 520U) {
    _L: /* CIL Label */ 
    tmp = jit_op_is_data_op(op->jmp_addr);
    if (tmp) {
      append_msg(msg_buf, (char *)"invalid code reference");
      return (32);
    }
  }
  return (0);
}
}
static jit_hw_reg *rmap_get(jit_rmap *rmap , jit_value reg ) 
{ 
  jit_tree *found ;
  jit_tree *tmp ;

  {
  tmp = jit_tree_search(rmap->map, reg);
  found = tmp;
  if (found) {
    return ((jit_hw_reg *)found->value);
  }
  return ((jit_hw_reg *)((void *)0));
}
}
void x86_cc_unsigned_map_i$nit(void) 
{ 


  {
  x86_cc_unsigned_map[0] = (unsigned char const   )116;
  x86_cc_unsigned_map[1] = (unsigned char const   )117;
  x86_cc_unsigned_map[2] = (unsigned char const   )114;
  x86_cc_unsigned_map[3] = (unsigned char const   )118;
  x86_cc_unsigned_map[4] = (unsigned char const   )119;
  x86_cc_unsigned_map[5] = (unsigned char const   )115;
  x86_cc_unsigned_map[6] = (unsigned char const   )120;
  x86_cc_unsigned_map[7] = (unsigned char const   )121;
  x86_cc_unsigned_map[8] = (unsigned char const   )122;
  x86_cc_unsigned_map[9] = (unsigned char const   )123;
  x86_cc_unsigned_map[10] = (unsigned char const   )112;
  x86_cc_unsigned_map[11] = (unsigned char const   )113;
}
}
struct jit_op *jit_add_op(struct jit *jit , unsigned short code , unsigned char spec ,
                          long arg1 , long arg2 , long arg3 , unsigned char arg_size ,
                          struct jit_debug_info *debug_info ) 
{ 
  struct jit_op *r ;
  struct jit_op *tmp ;

  {
  tmp = jit_op_new(code, spec, arg1, arg2, arg3, arg_size);
  r = tmp;
  r->debug_info = debug_info;
  jit_op_append(jit->last_op, r);
  jit->last_op = r;
  return (r);
}
}
static void emit_lreg(struct jit *jit , int hreg_id , jit_value vreg ) 
{ 
  int stack_pos ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___28 ;
  int tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  long tmp___33 ;
  unsigned char *tmp___34 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;

  {
  tmp = GET_REG_POS(jit, (int )vreg);
  stack_pos = tmp;
  if ((vreg & 1L) == 1L) {
    while (1) {
      tmp___0 = jit->ip;
      (jit->ip) ++;
      *tmp___0 = (unsigned char)102;
      while (1) {
        if (hreg_id > 7) {
          tmp___1 = 4;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )tmp___1;
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)15;
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)18;
      while (1) {
        while (1) {
          if (0) {
            if (stack_pos == 0) {
              while (1) {
                tmp___10 = jit->ip;
                (jit->ip) ++;
                *tmp___10 = (unsigned char )((((hreg_id & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___11 = jit->ip;
                (jit->ip) ++;
                *tmp___11 = (unsigned char )((4 << 3) | 4);
                break;
              }
            } else
            if (stack_pos >= -128) {
              if (stack_pos <= 127) {
                while (1) {
                  tmp___12 = jit->ip;
                  (jit->ip) ++;
                  *tmp___12 = (unsigned char )(((1 << 6) | (((hreg_id & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___13 = jit->ip;
                  (jit->ip) ++;
                  *tmp___13 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(stack_pos & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L;
              }
            } else {
              _L: /* CIL Label */ 
              while (1) {
                tmp___14 = jit->ip;
                (jit->ip) ++;
                *tmp___14 = (unsigned char )(((2 << 6) | (((hreg_id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___15 = jit->ip;
                (jit->ip) ++;
                *tmp___15 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                imb___0.val = stack_pos;
                tmp___16 = jit->ip;
                (jit->ip) ++;
                *tmp___16 = imb___0.b[0];
                tmp___17 = jit->ip;
                (jit->ip) ++;
                *tmp___17 = imb___0.b[1];
                tmp___18 = jit->ip;
                (jit->ip) ++;
                *tmp___18 = imb___0.b[2];
                tmp___19 = jit->ip;
                (jit->ip) ++;
                *tmp___19 = imb___0.b[3];
                break;
              }
            }
            break;
          }
          if (stack_pos == 0) {

          }
          if (stack_pos >= -128) {
            if (stack_pos <= 127) {
              while (1) {
                tmp___21 = jit->ip;
                (jit->ip) ++;
                *tmp___21 = (unsigned char )(((1 << 6) | (((hreg_id & 7) & 7) << 3)) | 5);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(stack_pos & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___0;
            }
          } else {
            _L___0: /* CIL Label */ 
            while (1) {
              tmp___22 = jit->ip;
              (jit->ip) ++;
              *tmp___22 = (unsigned char )(((2 << 6) | (((hreg_id & 7) & 7) << 3)) | 5);
              break;
            }
            while (1) {
              imb___1.val = stack_pos;
              tmp___23 = jit->ip;
              (jit->ip) ++;
              *tmp___23 = imb___1.b[0];
              tmp___24 = jit->ip;
              (jit->ip) ++;
              *tmp___24 = imb___1.b[1];
              tmp___25 = jit->ip;
              (jit->ip) ++;
              *tmp___25 = imb___1.b[2];
              tmp___26 = jit->ip;
              (jit->ip) ++;
              *tmp___26 = imb___1.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___27 = jit->ip;
        (jit->ip) ++;
        *tmp___27 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___28 = 8;
        } else {
          tmp___28 = 0;
        }
        if (hreg_id > 7) {
          tmp___29 = 4;
        } else {
          tmp___29 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(tmp___28 | tmp___29);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___31 = jit->ip;
      (jit->ip) ++;
      *tmp___31 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___32 = jit->ip;
      (jit->ip) ++;
      *tmp___32 = (unsigned char)139;
      break;
      default: 
      tmp___33 = __builtin_expect(1L, 0L);
      if (tmp___33) {
        __assert_rtn("emit_lreg", "./jitter-amd64.c", 2479, "0");
      }
      }
      while (1) {
        while (1) {
          if (0) {
            if (stack_pos == 0) {
              while (1) {
                tmp___39 = jit->ip;
                (jit->ip) ++;
                *tmp___39 = (unsigned char )((((hreg_id & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___40 = jit->ip;
                (jit->ip) ++;
                *tmp___40 = (unsigned char )((4 << 3) | 4);
                break;
              }
            } else
            if (stack_pos >= -128) {
              if (stack_pos <= 127) {
                while (1) {
                  tmp___41 = jit->ip;
                  (jit->ip) ++;
                  *tmp___41 = (unsigned char )(((1 << 6) | (((hreg_id & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___42 = jit->ip;
                  (jit->ip) ++;
                  *tmp___42 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(stack_pos & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___1;
              }
            } else {
              _L___1: /* CIL Label */ 
              while (1) {
                tmp___43 = jit->ip;
                (jit->ip) ++;
                *tmp___43 = (unsigned char )(((2 << 6) | (((hreg_id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___44 = jit->ip;
                (jit->ip) ++;
                *tmp___44 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                imb___3.val = stack_pos;
                tmp___45 = jit->ip;
                (jit->ip) ++;
                *tmp___45 = imb___3.b[0];
                tmp___46 = jit->ip;
                (jit->ip) ++;
                *tmp___46 = imb___3.b[1];
                tmp___47 = jit->ip;
                (jit->ip) ++;
                *tmp___47 = imb___3.b[2];
                tmp___48 = jit->ip;
                (jit->ip) ++;
                *tmp___48 = imb___3.b[3];
                break;
              }
            }
            break;
          }
          if (stack_pos == 0) {

          }
          if (stack_pos >= -128) {
            if (stack_pos <= 127) {
              while (1) {
                tmp___50 = jit->ip;
                (jit->ip) ++;
                *tmp___50 = (unsigned char )(((1 << 6) | (((hreg_id & 7) & 7) << 3)) | 5);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(stack_pos & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___2;
            }
          } else {
            _L___2: /* CIL Label */ 
            while (1) {
              tmp___51 = jit->ip;
              (jit->ip) ++;
              *tmp___51 = (unsigned char )(((2 << 6) | (((hreg_id & 7) & 7) << 3)) | 5);
              break;
            }
            while (1) {
              imb___4.val = stack_pos;
              tmp___52 = jit->ip;
              (jit->ip) ++;
              *tmp___52 = imb___4.b[0];
              tmp___53 = jit->ip;
              (jit->ip) ++;
              *tmp___53 = imb___4.b[1];
              tmp___54 = jit->ip;
              (jit->ip) ++;
              *tmp___54 = imb___4.b[2];
              tmp___55 = jit->ip;
              (jit->ip) ++;
              *tmp___55 = imb___4.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
__inline static jit_value jit_value_align(jit_value value , jit_value alignment ) 
{ 


  {
  return ((value + (alignment - 1L)) & - alignment);
}
}
__inline static void branch_adjustment(struct jit *jit , jit_op *op ) 
{ 
  int tmp ;
  jit_rmap *cur_regmap ;
  jit_rmap *tgt_regmap ;
  jit_op *o ;
  struct jit_op *tmp___0 ;
  int tmp___1 ;
  jit_op *o2 ;
  struct jit_op *tmp___2 ;
  int tmp___3 ;

  {
  tmp = is_cond_branch_op(op);
  if (! tmp) {
    return;
  }
  cur_regmap = op->regmap;
  tgt_regmap = (op->jmp_addr)->regmap;
  tmp___3 = rmap_equal(op, cur_regmap, tgt_regmap);
  if (! tmp___3) {
    switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
    case 848U: 
    op->code = (unsigned short )(608 | ((int )op->code & 7));
    break;
    case 344U: 
    op->code = (unsigned short )(112 | ((int )op->code & 7));
    break;
    case 584U: 
    op->code = (unsigned short )(480 | ((int )op->code & 7));
    break;
    case 608U: 
    op->code = (unsigned short )(848 | ((int )op->code & 7));
    break;
    case 480U: 
    op->code = (unsigned short )(584 | ((int )op->code & 7));
    break;
    case 112U: 
    op->code = (unsigned short )(344 | ((int )op->code & 7));
    break;
    case 768U: 
    op->code = (unsigned short )(568 | ((int )op->code & 7));
    break;
    case 664U: 
    op->code = (unsigned short )(328 | ((int )op->code & 7));
    break;
    case 568U: 
    op->code = (unsigned short )(768 | ((int )op->code & 7));
    break;
    case 328U: 
    op->code = (unsigned short )(664 | ((int )op->code & 7));
    break;
    case 816U: 
    op->code = (unsigned short )(504 | ((int )op->code & 7));
    break;
    case 192U: 
    op->code = (unsigned short )(744 | ((int )op->code & 7));
    break;
    case 384U: 
    op->code = (unsigned short )(824 | ((int )op->code & 7));
    break;
    case 504U: 
    op->code = (unsigned short )(816 | ((int )op->code & 7));
    break;
    case 824U: 
    op->code = (unsigned short )(384 | ((int )op->code & 7));
    break;
    case 744U: 
    op->code = (unsigned short )(192 | ((int )op->code & 7));
    break;
    default: 
    break;
    }
    tmp___0 = jit_op_new((unsigned short)810, (unsigned char)2, op->arg[0], 0L, 0L,
                         (unsigned char)0);
    o = tmp___0;
    o->r_arg[0] = op->r_arg[0];
    o->regmap = rmap_clone(op->regmap);
    o->live_in = jit_set_clone(op->live_in);
    o->live_out = jit_set_clone(op->live_out);
    o->jmp_addr = op->jmp_addr;
    tmp___1 = jit_is_label(jit, (void *)op->r_arg[0]);
    if (! tmp___1) {
      (op->jmp_addr)->arg[0] = (jit_value )o;
      (op->jmp_addr)->r_arg[0] = (jit_value )o;
    }
    jit_op_append(op, o);
    tmp___2 = jit_op_new((unsigned short)136, (unsigned char)2, (jit_value )op, 0L,
                         0L, (unsigned char)0);
    o2 = tmp___2;
    o2->r_arg[0] = o2->arg[0];
    jit_op_append(o, o2);
    op->arg[0] = (jit_value )o2;
    op->r_arg[0] = (jit_value )o2;
    op->jmp_addr = o2;
  }
  return;
}
}
static void emit_branch_overflow_op(struct jit *jit , struct jit_op *op , int alu_op ,
                                    int imm , int negation ) 
{ 
  unsigned char _amd64_rex_bits ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  x86_imm_buf imb ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___17 ;
  int tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___22 ;
  int offset ;
  int tmp___23 ;
  jit_value tmp___24 ;
  int tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___33 ;
  int offset___0 ;
  int tmp___34 ;
  jit_value tmp___35 ;
  int tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;

  {
  if (imm) {
    while (1) {
      if ((int )op->r_arg[2] >= -128) {
        if ((int )op->r_arg[2] <= 127) {
          while (1) {
            if (op->r_arg[1] > 7L) {
              tmp = 1;
            } else {
              tmp = 0;
            }
            _amd64_rex_bits = (unsigned char )(8 | tmp);
            if ((int )_amd64_rex_bits != 0) {
              tmp___0 = jit->ip;
              (jit->ip) ++;
              *tmp___0 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___1 = jit->ip;
          (jit->ip) ++;
          *tmp___1 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___2 = jit->ip;
              (jit->ip) ++;
              *tmp___2 = (unsigned char )((long )((3 << 6) | ((alu_op & 7) << 3)) | (op->r_arg[1] & 7L));
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(op->r_arg[2] & 255L);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else
      _L: /* CIL Label */ 
      if (op->r_arg[1] == 0L) {
        while (1) {
          _amd64_rex_bits___0 = (unsigned char)8;
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char )(((int )((unsigned char )alu_op) << 3) + 5);
        while (1) {
          imb.val = (int )op->r_arg[2];
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = imb.b[0];
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = imb.b[1];
          tmp___7 = jit->ip;
          (jit->ip) ++;
          *tmp___7 = imb.b[2];
          tmp___8 = jit->ip;
          (jit->ip) ++;
          *tmp___8 = imb.b[3];
          break;
        }
      } else {
        while (1) {
          if (op->r_arg[1] > 7L) {
            tmp___9 = 1;
          } else {
            tmp___9 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )(8 | tmp___9);
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___10 = jit->ip;
            (jit->ip) ++;
            *tmp___10 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___11 = jit->ip;
        (jit->ip) ++;
        *tmp___11 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = (unsigned char )((long )((3 << 6) | ((alu_op & 7) << 3)) | (op->r_arg[1] & 7L));
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = (int )op->r_arg[2];
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = imb___0.b[0];
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = imb___0.b[1];
          tmp___15 = jit->ip;
          (jit->ip) ++;
          *tmp___15 = imb___0.b[2];
          tmp___16 = jit->ip;
          (jit->ip) ++;
          *tmp___16 = imb___0.b[3];
          break;
        }
      }
      break;
    }
  } else {
    while (1) {
      while (1) {
        if (op->r_arg[1] > 7L) {
          tmp___17 = 4;
        } else {
          tmp___17 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___18 = 1;
        } else {
          tmp___18 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )((8 | tmp___17) | tmp___18);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___19 = jit->ip;
          (jit->ip) ++;
          *tmp___19 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___20 = jit->ip;
      (jit->ip) ++;
      *tmp___20 = (unsigned char )(((int )((unsigned char )alu_op) << 3) + 3);
      while (1) {
        while (1) {
          tmp___21 = jit->ip;
          (jit->ip) ++;
          *tmp___21 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[1] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
  if (! negation) {
    while (1) {
      while (1) {
        _amd64_rex_bits___3 = (unsigned char)8;
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___22 = jit->ip;
          (jit->ip) ++;
          *tmp___22 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      while (1) {
        tmp___25 = jit_is_label(jit, (void *)op->r_arg[0]);
        if (tmp___25) {
          tmp___24 = ((jit_value )jit->buf + ((jit_label *)op->r_arg[0])->pos) - (jit_value )jit->ip;
        } else {
          tmp___24 = op->r_arg[0];
        }
        offset = (int )(tmp___24 - 6L);
        while (1) {
          tmp___26 = jit->ip;
          (jit->ip) ++;
          *tmp___26 = (unsigned char)15;
          tmp___28 = jit->ip;
          (jit->ip) ++;
          *tmp___28 = (unsigned char )((int const   )x86_cc_unsigned_map[10] + 16);
          while (1) {
            imb___1.val = offset;
            tmp___29 = jit->ip;
            (jit->ip) ++;
            *tmp___29 = imb___1.b[0];
            tmp___30 = jit->ip;
            (jit->ip) ++;
            *tmp___30 = imb___1.b[1];
            tmp___31 = jit->ip;
            (jit->ip) ++;
            *tmp___31 = imb___1.b[2];
            tmp___32 = jit->ip;
            (jit->ip) ++;
            *tmp___32 = imb___1.b[3];
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      while (1) {
        _amd64_rex_bits___4 = (unsigned char)8;
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___33 = jit->ip;
          (jit->ip) ++;
          *tmp___33 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      while (1) {
        tmp___36 = jit_is_label(jit, (void *)op->r_arg[0]);
        if (tmp___36) {
          tmp___35 = ((jit_value )jit->buf + ((jit_label *)op->r_arg[0])->pos) - (jit_value )jit->ip;
        } else {
          tmp___35 = op->r_arg[0];
        }
        offset___0 = (int )(tmp___35 - 6L);
        while (1) {
          tmp___37 = jit->ip;
          (jit->ip) ++;
          *tmp___37 = (unsigned char)15;
          tmp___39 = jit->ip;
          (jit->ip) ++;
          *tmp___39 = (unsigned char )((int const   )x86_cc_unsigned_map[11] + 16);
          while (1) {
            imb___2.val = offset___0;
            tmp___40 = jit->ip;
            (jit->ip) ++;
            *tmp___40 = imb___2.b[0];
            tmp___41 = jit->ip;
            (jit->ip) ++;
            *tmp___41 = imb___2.b[1];
            tmp___42 = jit->ip;
            (jit->ip) ++;
            *tmp___42 = imb___2.b[2];
            tmp___43 = jit->ip;
            (jit->ip) ++;
            *tmp___43 = imb___2.b[3];
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
int jit_reg_in_use(jit_op *op , int reg , int fp ) 
{ 
  jit_value virt_reg ;
  jit_hw_reg *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = rmap_is_associated(op->regmap, reg, fp, & virt_reg);
  if (tmp) {
    tmp___0 = jit_set_get(op->live_in, (int )virt_reg);
    if (tmp___0) {
      return (1);
    } else {
      tmp___1 = jit_set_get(op->live_out, (int )virt_reg);
      if (tmp___1) {
        return (1);
      } else {
        return (0);
      }
    }
  } else {
    return (0);
  }
}
}
__inline static jit_tree *move_red_right(jit_tree *h ) 
{ 
  int tmp ;

  {
  color_flip(h);
  tmp = is_red((h->left)->left);
  if (tmp) {
    h = rotate_right(h);
    color_flip(h);
  }
  return (h);
}
}
void jit_collect_statistics(struct jit *jit ) 
{ 
  int i ;
  int j ;
  int ops_from_return ;
  jit_tree *last_hints ;
  jit_op *op ;
  jit_op *tmp ;
  jit_tree *new_hints ;
  jit_tree *tmp___0 ;
  jit_value regs[3] ;
  int found_regs ;
  int found ;
  jit_value reg ;
  int tmp___1 ;
  jit_value reg___0 ;
  jit_tree *hint ;
  jit_tree *tmp___2 ;
  struct jit_allocator_hint *new_hint ;
  void *tmp___3 ;
  unsigned long tmp___4 ;

  {
  ops_from_return = 0;
  last_hints = (jit_tree *)((void *)0);
  tmp = jit_op_last(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    tmp___0 = jit_tree_clone(last_hints);
    new_hints = tmp___0;
    op->normalized_pos = ops_from_return;
    found_regs = 0;
    i = 0;
    while (i < 3) {
      if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 1) {
        goto _L;
      } else
      if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 3) {
        _L: /* CIL Label */ 
        found = 0;
        reg = op->arg[i];
        j = 0;
        while (j < found_regs) {
          if (regs[j] == reg) {
            found = 1;
            break;
          }
          j ++;
        }
        if (! found) {
          tmp___1 = found_regs;
          found_regs ++;
          regs[tmp___1] = reg;
        }
      }
      i ++;
    }
    i = 0;
    while (i < found_regs) {
      reg___0 = regs[i];
      tmp___2 = jit_tree_search(new_hints, reg___0);
      hint = tmp___2;
      tmp___3 = malloc(sizeof(struct jit_allocator_hint ));
      new_hint = (struct jit_allocator_hint *)tmp___3;
      if (hint) {
        tmp___4 = __builtin_object_size((void *)new_hint, 0);
        __builtin___memcpy_chk((void *)new_hint, (void const   *)hint->value, sizeof(struct jit_allocator_hint ),
                               tmp___4);
      } else {
        new_hint->last_pos = 0;
        new_hint->should_be_calleesaved = 0;
        new_hint->should_be_eax = 0;
      }
      new_hint->refs = 0;
      new_hint->last_pos = ops_from_return;
      if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 208U) {
        (new_hint->should_be_eax) ++;
      } else
      if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 72U) {
        (new_hint->should_be_eax) ++;
      }
      new_hints = jit_tree_insert(new_hints, reg___0, (jit_tree_value )new_hint, (int *)((void *)0));
      i ++;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 0U) {
      mark_calleesaved_regs(new_hints, op);
    }
    hints_refcount_inc(new_hints);
    op->allocator_hints = new_hints;
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 536U) {
      last_hints = (jit_tree *)((void *)0);
      ops_from_return = 0;
    } else {
      last_hints = new_hints;
      ops_from_return ++;
    }
    op = op->prev;
  }
  return;
}
}
jit_label *jit_get_label(struct jit *jit ) 
{ 
  jit_label *r ;
  void *tmp ;

  {
  tmp = malloc(sizeof(jit_label ));
  r = (jit_label *)tmp;
  jit_add_op(jit, (unsigned short)456, (unsigned char)2, (long )r, 0L, 0L, (unsigned char)0,
             (struct jit_debug_info *)((void *)0));
  r->next = jit->labels;
  jit->labels = r;
  return (r);
}
}
static int rmap_equal(jit_op *op , jit_rmap *current , jit_rmap *target ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = rmap_subset(op, current->map, target->map);
  if (tmp) {
    tmp___0 = rmap_subset(op, target->map, current->map);
    if (tmp___0) {
      tmp___1 = 1;
    } else {
      tmp___1 = 0;
    }
  } else {
    tmp___1 = 0;
  }
  return (tmp___1);
}
}
__inline extern int isalpha(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 256UL);
  return (tmp);
}
}
static void ob_pad(struct output_buf *ob , int size ) 
{ 
  size_t tmp ;

  {
  while (1) {
    tmp = strlen((char const   *)ob->buf);
    if (! (tmp < (size_t )size)) {
      break;
    }
    ob_append(ob, (char *)" ");
  }
  return;
}
}
__inline static void jit_correct_float_imms(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  int imm_arg ;
  int i ;
  jit_op *newop ;
  struct jit_op *tmp___0 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    if (! ((int )op->code & 2)) {
      goto __Cont;
    }
    if (! op->fp) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 64U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 120U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 640U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 752U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 24U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 232U) {
      goto __Cont;
    }
    i = 1;
    while (i < 4) {
      if ((((int )op->spec >> (i - 1) * 2) & 3) == 2) {
        imm_arg = i - 1;
      }
      i ++;
    }
    tmp___0 = jit_op_new((unsigned short)66, (unsigned char )((2 << 2) | 3), (jit_value )(1 | (1 << 1)),
                         0L, 0L, (unsigned char)0);
    newop = tmp___0;
    newop->fp = (unsigned char)1;
    newop->flt_imm = op->flt_imm;
    jit_op_prepend(op, newop);
    op->code = (unsigned short )((int )op->code & -4);
    op->code = (unsigned short )((int )op->code | 1);
    op->spec = (unsigned char )((int )op->spec & ~ (3 << 2 * imm_arg));
    op->spec = (unsigned char )((int )op->spec | (1 << 2 * imm_arg));
    op->arg[imm_arg] = (jit_value )(1 | (1 << 1));
    __Cont: /* CIL Label */ 
    op = op->next;
  }
  return;
}
}
static int spill_all_registers(jit_op *op , struct jit_reg_allocator *al ) 
{ 
  jit_value reg ;
  int i ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp ;
  int tmp___0 ;
  int i___0 ;
  jit_hw_reg *hreg___0 ;
  jit_hw_reg *tmp___1 ;
  int tmp___2 ;

  {
  i = 0;
  while (i < al->gp_reg_cnt) {
    tmp = rmap_is_associated(op->regmap, (al->gp_regs + i)->id, 0, & reg);
    hreg = tmp;
    if (hreg) {
      tmp___0 = jit_set_get(op->live_out, (int )reg);
      if (tmp___0) {
        if (op->in_use) {
          unload_reg(op, hreg, reg);
        }
        rmap_unassoc(op->regmap, reg);
      }
    }
    i ++;
  }
  i___0 = 0;
  while (i___0 < al->fp_reg_cnt) {
    tmp___1 = rmap_is_associated(op->regmap, (al->fp_regs + i___0)->id, 1, & reg);
    hreg___0 = tmp___1;
    if (hreg___0) {
      tmp___2 = jit_set_get(op->live_out, (int )reg);
      if (tmp___2) {
        if (op->in_use) {
          unload_reg(op, hreg___0, reg);
        }
        rmap_unassoc(op->regmap, reg);
      }
    }
    i___0 ++;
  }
  return (1);
}
}
static int required_stack_space_for_regs(struct jit *jit , jit_op *op ) 
{ 
  struct jit_reg_allocator *al ;
  int space ;
  struct jit_func_info *tmp ;
  int i ;
  jit_hw_reg *reg ;
  int tmp___0 ;
  int i___0 ;
  jit_hw_reg *reg___0 ;
  int tmp___1 ;

  {
  al = jit->reg_al;
  space = (int )sizeof(void *);
  tmp = jit_current_func_info(jit);
  if (! tmp->has_prolog) {
    space = (int )((unsigned long )space + sizeof(void *));
  }
  i = 0;
  while (i < al->gp_reg_cnt) {
    reg = al->gp_regs + i;
    if (! reg->callee_saved) {
      tmp___0 = is_active_register(al, reg, op);
      if (tmp___0) {
        space = (int )((unsigned long )space + sizeof(void *));
      }
    }
    i ++;
  }
  i___0 = 0;
  while (i___0 < al->fp_reg_cnt) {
    reg___0 = al->fp_regs + i___0;
    if (! reg___0->callee_saved) {
      tmp___1 = is_active_register(al, reg___0, op);
      if (tmp___1) {
        space = (int )((unsigned long )space + sizeof(double ) * 2UL);
      }
    }
    i___0 ++;
  }
  return (space);
}
}
static jit_tree *delete_min(jit_tree *h ) 
{ 
  int tmp ;
  int tmp___0 ;
  jit_tree *tmp___1 ;

  {
  if ((unsigned long )h->left == (unsigned long )((void *)0)) {
    free((void *)h);
    return ((jit_tree *)((void *)0));
  }
  tmp = is_red(h->left);
  if (! tmp) {
    tmp___0 = is_red((h->left)->left);
    if (! tmp___0) {
      h = move_red_left(h);
    }
  }
  h->left = delete_min(h->left);
  tmp___1 = fixup(h);
  return (tmp___1);
}
}
jit_hw_reg *jit_get_unused_reg(struct jit_reg_allocator *al , jit_op *op , int fp ) 
{ 
  jit_hw_reg *tmp ;

  {
  tmp = jit_get_unused_reg_with_index(al, op, fp, 0);
  return (tmp);
}
}
static void emit_sse_fld_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___11 ;
  jit_value tmp___12 ;
  int tmp___13 ;
  jit_value tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___52 ;
  int tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;

  {
  if ((unsigned long )op->arg_size == sizeof(float )) {
    if ((int )op->code & 2) {
      while (1) {
        tmp = jit->ip;
        (jit->ip) ++;
        *tmp = (unsigned char)243;
        while (1) {
          if (a1 > 7L) {
            tmp___0 = 4;
          } else {
            tmp___0 = 0;
          }
          _amd64_rex_bits = (unsigned char )tmp___0;
          if ((int )_amd64_rex_bits != 0) {
            tmp___1 = jit->ip;
            (jit->ip) ++;
            *tmp___1 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        tmp___2 = jit->ip;
        (jit->ip) ++;
        *tmp___2 = (unsigned char)15;
        tmp___3 = jit->ip;
        (jit->ip) ++;
        *tmp___3 = (unsigned char)90;
        while (1) {
          tmp___4 = jit->ip;
          (jit->ip) ++;
          *tmp___4 = (unsigned char )(((a1 & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char )((4 << 3) | 5);
          break;
        }
        while (1) {
          imb.val = (int )a2;
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = imb.b[0];
          tmp___7 = jit->ip;
          (jit->ip) ++;
          *tmp___7 = imb.b[1];
          tmp___8 = jit->ip;
          (jit->ip) ++;
          *tmp___8 = imb.b[2];
          tmp___9 = jit->ip;
          (jit->ip) ++;
          *tmp___9 = imb.b[3];
          break;
        }
        break;
      }
    } else {
      while (1) {
        tmp___10 = jit->ip;
        (jit->ip) ++;
        *tmp___10 = (unsigned char)243;
        while (1) {
          if (a1 > 7L) {
            tmp___11 = 4;
          } else {
            tmp___11 = 0;
          }
          if (a2 == 16L) {
            tmp___14 = (jit_value )0;
          } else {
            tmp___14 = a2;
          }
          if (tmp___14 > 7L) {
            tmp___13 = 1;
          } else {
            tmp___13 = 0;
          }
          _amd64_rex_bits___0 = (unsigned char )(tmp___11 | tmp___13);
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___15 = jit->ip;
            (jit->ip) ++;
            *tmp___15 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___16 = jit->ip;
        (jit->ip) ++;
        *tmp___16 = (unsigned char)15;
        tmp___17 = jit->ip;
        (jit->ip) ++;
        *tmp___17 = (unsigned char)90;
        while (1) {
          if (a2 == 16L) {
            while (1) {
              tmp___18 = jit->ip;
              (jit->ip) ++;
              *tmp___18 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb___0.val = 0;
              tmp___19 = jit->ip;
              (jit->ip) ++;
              *tmp___19 = imb___0.b[0];
              tmp___20 = jit->ip;
              (jit->ip) ++;
              *tmp___20 = imb___0.b[1];
              tmp___21 = jit->ip;
              (jit->ip) ++;
              *tmp___21 = imb___0.b[2];
              tmp___22 = jit->ip;
              (jit->ip) ++;
              *tmp___22 = imb___0.b[3];
              break;
            }
          } else {
            while (1) {
              if ((a2 & 7L) == 4L) {
                while (1) {
                  tmp___23 = jit->ip;
                  (jit->ip) ++;
                  *tmp___23 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                  break;
                }
                while (1) {
                  tmp___24 = jit->ip;
                  (jit->ip) ++;
                  *tmp___24 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                break;
              }
              if ((a2 & 7L) != 5L) {
                while (1) {
                  tmp___33 = jit->ip;
                  (jit->ip) ++;
                  *tmp___33 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                  break;
                }
                break;
              }
              while (1) {
                tmp___34 = jit->ip;
                (jit->ip) ++;
                *tmp___34 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
              break;
            }
          }
          break;
        }
        break;
      }
    }
  } else
  if ((int )op->code & 2) {
    while (1) {
      tmp___40 = jit->ip;
      (jit->ip) ++;
      *tmp___40 = (unsigned char)242;
      while (1) {
        if (a1 > 7L) {
          tmp___41 = 4;
        } else {
          tmp___41 = 0;
        }
        _amd64_rex_bits___1 = (unsigned char )tmp___41;
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___42 = jit->ip;
          (jit->ip) ++;
          *tmp___42 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      tmp___43 = jit->ip;
      (jit->ip) ++;
      *tmp___43 = (unsigned char)15;
      tmp___44 = jit->ip;
      (jit->ip) ++;
      *tmp___44 = (unsigned char)16;
      while (1) {
        tmp___45 = jit->ip;
        (jit->ip) ++;
        *tmp___45 = (unsigned char )(((a1 & 7L) << 3) | 4L);
        break;
      }
      while (1) {
        tmp___46 = jit->ip;
        (jit->ip) ++;
        *tmp___46 = (unsigned char )((4 << 3) | 5);
        break;
      }
      while (1) {
        imb___3.val = (int )a2;
        tmp___47 = jit->ip;
        (jit->ip) ++;
        *tmp___47 = imb___3.b[0];
        tmp___48 = jit->ip;
        (jit->ip) ++;
        *tmp___48 = imb___3.b[1];
        tmp___49 = jit->ip;
        (jit->ip) ++;
        *tmp___49 = imb___3.b[2];
        tmp___50 = jit->ip;
        (jit->ip) ++;
        *tmp___50 = imb___3.b[3];
        break;
      }
      break;
    }
  } else {
    while (1) {
      tmp___51 = jit->ip;
      (jit->ip) ++;
      *tmp___51 = (unsigned char)102;
      while (1) {
        if (a1 > 7L) {
          tmp___52 = 4;
        } else {
          tmp___52 = 0;
        }
        if (a2 > 7L) {
          tmp___53 = 1;
        } else {
          tmp___53 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )(tmp___52 | tmp___53);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___54 = jit->ip;
          (jit->ip) ++;
          *tmp___54 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___55 = jit->ip;
      (jit->ip) ++;
      *tmp___55 = (unsigned char)15;
      tmp___56 = jit->ip;
      (jit->ip) ++;
      *tmp___56 = (unsigned char)18;
      while (1) {
        if (a2 == 16L) {
          while (1) {
            tmp___57 = jit->ip;
            (jit->ip) ++;
            *tmp___57 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
            break;
          }
          while (1) {
            imb___4.val = 0;
            tmp___58 = jit->ip;
            (jit->ip) ++;
            *tmp___58 = imb___4.b[0];
            tmp___59 = jit->ip;
            (jit->ip) ++;
            *tmp___59 = imb___4.b[1];
            tmp___60 = jit->ip;
            (jit->ip) ++;
            *tmp___60 = imb___4.b[2];
            tmp___61 = jit->ip;
            (jit->ip) ++;
            *tmp___61 = imb___4.b[3];
            break;
          }
        } else {
          while (1) {
            if ((a2 & 7L) == 4L) {
              while (1) {
                tmp___62 = jit->ip;
                (jit->ip) ++;
                *tmp___62 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___63 = jit->ip;
                (jit->ip) ++;
                *tmp___63 = (unsigned char )((4 << 3) | 4);
                break;
              }
              break;
            }
            if ((a2 & 7L) != 5L) {
              while (1) {
                tmp___72 = jit->ip;
                (jit->ip) ++;
                *tmp___72 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                break;
              }
              break;
            }
            while (1) {
              tmp___73 = jit->ip;
              (jit->ip) ++;
              *tmp___73 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)0;
              (jit->ip) ++;
              break;
            }
            break;
          }
        }
        break;
      }
      break;
    }
  }
  return;
}
}
static jit_tree *node_insert(jit_tree *h , jit_tree_key key , jit_tree_value value ,
                             int *found ) 
{ 
  jit_tree *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  jit_tree *tmp___2 ;

  {
  if ((unsigned long )h == (unsigned long )((void *)0)) {
    tmp = node_new(key, value);
    return (tmp);
  }
  tmp___0 = is_red(h->left);
  if (tmp___0) {
    tmp___1 = is_red(h->right);
    if (tmp___1) {
      color_flip(h);
    }
  }
  if (h->key == key) {
    h->value = value;
    if (found) {
      *found = 1;
    }
  } else
  if (h->key > key) {
    h->left = node_insert(h->left, key, value, found);
  } else {
    h->right = node_insert(h->right, key, value, found);
  }
  tmp___2 = fixup(h);
  return (tmp___2);
}
}
__inline extern int isnumber(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 1024UL);
  return (tmp);
}
}
static int assign_ret_reg(jit_op *op , jit_hw_reg *ret_reg ) 
{ 


  {
  rmap_assoc(op->regmap, op->arg[0], ret_reg);
  return (1);
}
}
static void emit_alu_op(struct jit *jit , struct jit_op *op , int x86_op , int imm ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  long tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  x86_imm_buf imb ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___26 ;
  int tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___31 ;
  int tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  long tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___45 ;
  int tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;

  {
  if (imm) {
    if (op->r_arg[0] != op->r_arg[1]) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp = jit->ip;
          (jit->ip) ++;
          *tmp = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___0 = 8;
          } else {
            tmp___0 = 0;
          }
          if (op->r_arg[0] > 7L) {
            tmp___1 = 4;
          } else {
            tmp___1 = 0;
          }
          if (op->r_arg[1] > 7L) {
            tmp___2 = 1;
          } else {
            tmp___2 = 0;
          }
          _amd64_rex_bits = (unsigned char )((tmp___0 | tmp___1) | tmp___2);
          if ((int )_amd64_rex_bits != 0) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___5 = jit->ip;
        (jit->ip) ++;
        *tmp___5 = (unsigned char)139;
        break;
        default: 
        tmp___6 = __builtin_expect(1L, 0L);
        if (tmp___6) {
          __assert_rtn("emit_alu_op", "./jitter-amd64.c", 2561, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___7 = jit->ip;
            (jit->ip) ++;
            *tmp___7 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
            break;
          }
          break;
        }
        break;
      }
    }
    while (1) {
      if ((int )op->r_arg[2] >= -128) {
        if ((int )op->r_arg[2] <= 127) {
          while (1) {
            if (op->r_arg[0] > 7L) {
              tmp___8 = 1;
            } else {
              tmp___8 = 0;
            }
            _amd64_rex_bits___0 = (unsigned char )(8 | tmp___8);
            if ((int )_amd64_rex_bits___0 != 0) {
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
            }
            break;
          }
          tmp___10 = jit->ip;
          (jit->ip) ++;
          *tmp___10 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = (unsigned char )((long )((3 << 6) | ((x86_op & 7) << 3)) | (op->r_arg[0] & 7L));
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(op->r_arg[2] & 255L);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else
      _L: /* CIL Label */ 
      if (op->r_arg[0] == 0L) {
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)8;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___13 = jit->ip;
        (jit->ip) ++;
        *tmp___13 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 5);
        while (1) {
          imb.val = (int )op->r_arg[2];
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = imb.b[0];
          tmp___15 = jit->ip;
          (jit->ip) ++;
          *tmp___15 = imb.b[1];
          tmp___16 = jit->ip;
          (jit->ip) ++;
          *tmp___16 = imb.b[2];
          tmp___17 = jit->ip;
          (jit->ip) ++;
          *tmp___17 = imb.b[3];
          break;
        }
      } else {
        while (1) {
          if (op->r_arg[0] > 7L) {
            tmp___18 = 1;
          } else {
            tmp___18 = 0;
          }
          _amd64_rex_bits___2 = (unsigned char )(8 | tmp___18);
          if ((int )_amd64_rex_bits___2 != 0) {
            tmp___19 = jit->ip;
            (jit->ip) ++;
            *tmp___19 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
          }
          break;
        }
        tmp___20 = jit->ip;
        (jit->ip) ++;
        *tmp___20 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___21 = jit->ip;
            (jit->ip) ++;
            *tmp___21 = (unsigned char )((long )((3 << 6) | ((x86_op & 7) << 3)) | (op->r_arg[0] & 7L));
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = (int )op->r_arg[2];
          tmp___22 = jit->ip;
          (jit->ip) ++;
          *tmp___22 = imb___0.b[0];
          tmp___23 = jit->ip;
          (jit->ip) ++;
          *tmp___23 = imb___0.b[1];
          tmp___24 = jit->ip;
          (jit->ip) ++;
          *tmp___24 = imb___0.b[2];
          tmp___25 = jit->ip;
          (jit->ip) ++;
          *tmp___25 = imb___0.b[3];
          break;
        }
      }
      break;
    }
  } else
  if (op->r_arg[0] == op->r_arg[1]) {
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___26 = 4;
        } else {
          tmp___26 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___27 = 1;
        } else {
          tmp___27 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )((8 | tmp___26) | tmp___27);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___28 = jit->ip;
          (jit->ip) ++;
          *tmp___28 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      tmp___29 = jit->ip;
      (jit->ip) ++;
      *tmp___29 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 3);
      while (1) {
        while (1) {
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else
  if (op->r_arg[0] == op->r_arg[2]) {
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___31 = 4;
        } else {
          tmp___31 = 0;
        }
        if (op->r_arg[1] > 7L) {
          tmp___32 = 1;
        } else {
          tmp___32 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )((8 | tmp___31) | tmp___32);
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___33 = jit->ip;
          (jit->ip) ++;
          *tmp___33 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      tmp___34 = jit->ip;
      (jit->ip) ++;
      *tmp___34 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 3);
      while (1) {
        while (1) {
          tmp___35 = jit->ip;
          (jit->ip) ++;
          *tmp___35 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___36 = jit->ip;
        (jit->ip) ++;
        *tmp___36 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___37 = 8;
        } else {
          tmp___37 = 0;
        }
        if (op->r_arg[0] > 7L) {
          tmp___38 = 4;
        } else {
          tmp___38 = 0;
        }
        if (op->r_arg[1] > 7L) {
          tmp___39 = 1;
        } else {
          tmp___39 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )((tmp___37 | tmp___38) | tmp___39);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___40 = jit->ip;
          (jit->ip) ++;
          *tmp___40 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___40 = jit->ip;
          (jit->ip) ++;
          *tmp___40 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___41 = jit->ip;
      (jit->ip) ++;
      *tmp___41 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___42 = jit->ip;
      (jit->ip) ++;
      *tmp___42 = (unsigned char)139;
      break;
      default: 
      tmp___43 = __builtin_expect(1L, 0L);
      if (tmp___43) {
        __assert_rtn("emit_alu_op", "./jitter-amd64.c", 2570, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___44 = jit->ip;
          (jit->ip) ++;
          *tmp___44 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___45 = 4;
        } else {
          tmp___45 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___46 = 1;
        } else {
          tmp___46 = 0;
        }
        _amd64_rex_bits___6 = (unsigned char )((8 | tmp___45) | tmp___46);
        if ((int )_amd64_rex_bits___6 != 0) {
          tmp___47 = jit->ip;
          (jit->ip) ++;
          *tmp___47 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
        }
        break;
      }
      tmp___48 = jit->ip;
      (jit->ip) ++;
      *tmp___48 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 3);
      while (1) {
        while (1) {
          tmp___49 = jit->ip;
          (jit->ip) ++;
          *tmp___49 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
void jit_trace_op(struct jit *jit , jit_op *op , int verbosity ) 
{ 
  jit_tree *labels ;
  jit_tree *tmp ;
  FILE *f ;
  FILE *tmp___0 ;

  {
  tmp = prepare_labels(jit);
  labels = tmp;
  if (verbosity & 1) {
    print_op(__stdoutp, & jit_disasm_general, op, labels, verbosity);
    printf((char const   */* __restrict  */)"\n");
  }
  if (verbosity & 4) {
    tmp___0 = open_disasm();
    f = tmp___0;
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"..addr=%lx\n",
            op->code_offset);
    print_combined_op(f, jit, op, labels);
    fclose(f);
    wait((int *)((void *)0));
  }
  jit_tree_free(labels);
  return;
}
}
static int emit_push_caller_saved_regs(struct jit *jit , jit_op *op ) 
{ 
  int stack_offset ;
  struct jit_reg_allocator *al ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  x86_imm_buf imb ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  int count ;

  {
  stack_offset = 0;
  al = jit->reg_al;
  while (op) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 0U) {
      break;
    }
    op = op->next;
  }
  stack_offset = generic_push_caller_saved_regs(jit, op, al->gp_reg_cnt, al->gp_regs,
                                                0, al->ret_reg, stack_offset);
  stack_offset = generic_push_caller_saved_regs(jit, op, al->fp_reg_cnt, al->fp_regs,
                                                1, al->fpret_reg, stack_offset);
  if (stack_offset) {
    while (1) {
      if (stack_offset >= -128) {
        if (stack_offset <= 127) {
          while (1) {
            _amd64_rex_bits = (unsigned char)8;
            if ((int )_amd64_rex_bits != 0) {
              tmp = jit->ip;
              (jit->ip) ++;
              *tmp = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___0 = jit->ip;
          (jit->ip) ++;
          *tmp___0 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___1 = jit->ip;
              (jit->ip) ++;
              *tmp___1 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(stack_offset & 255);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)8;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___8 = jit->ip;
            (jit->ip) ++;
            *tmp___8 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___9 = jit->ip;
        (jit->ip) ++;
        *tmp___9 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___10 = jit->ip;
            (jit->ip) ++;
            *tmp___10 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = stack_offset;
          tmp___11 = jit->ip;
          (jit->ip) ++;
          *tmp___11 = imb___0.b[0];
          tmp___12 = jit->ip;
          (jit->ip) ++;
          *tmp___12 = imb___0.b[1];
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = imb___0.b[2];
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = imb___0.b[3];
          break;
        }
      }
      break;
    }
  }
  count = (int )((unsigned long )stack_offset / sizeof(void *));
  return (count);
}
}
static void emit_sse_fst_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) 
{ 
  int live ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  x86_imm_buf imb ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___26 ;
  int tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___49 ;
  int tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___67 ;
  jit_value tmp___68 ;
  int tmp___69 ;
  jit_value tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;

  {
  if ((unsigned long )op->arg_size == sizeof(float )) {
    tmp = jit_set_get(op->live_out, (int )op->arg[1]);
    live = tmp;
    if (live) {
      while (1) {
        while (1) {
          tmp___0 = jit->ip;
          (jit->ip) ++;
          *tmp___0 = (unsigned char)102;
          while (1) {
            if (a2 > 7L) {
              tmp___1 = 4;
            } else {
              tmp___1 = 0;
            }
            if (a2 > 7L) {
              tmp___2 = 1;
            } else {
              tmp___2 = 0;
            }
            _amd64_rex_bits = (unsigned char )(tmp___1 | tmp___2);
            if ((int )_amd64_rex_bits != 0) {
              tmp___3 = jit->ip;
              (jit->ip) ++;
              *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___4 = jit->ip;
          (jit->ip) ++;
          *tmp___4 = (unsigned char)15;
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char)198;
          while (1) {
            while (1) {
              tmp___6 = jit->ip;
              (jit->ip) ++;
              *tmp___6 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
              break;
            }
            break;
          }
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)0;
          (jit->ip) ++;
          break;
        }
        break;
      }
    }
    while (1) {
      tmp___7 = jit->ip;
      (jit->ip) ++;
      *tmp___7 = (unsigned char)242;
      while (1) {
        if (a2 > 7L) {
          tmp___8 = 4;
        } else {
          tmp___8 = 0;
        }
        if (a2 > 7L) {
          tmp___9 = 1;
        } else {
          tmp___9 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(tmp___8 | tmp___9);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___10 = jit->ip;
          (jit->ip) ++;
          *tmp___10 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      tmp___11 = jit->ip;
      (jit->ip) ++;
      *tmp___11 = (unsigned char)15;
      tmp___12 = jit->ip;
      (jit->ip) ++;
      *tmp___12 = (unsigned char)90;
      while (1) {
        while (1) {
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
    if ((int )op->code & 2) {
      while (1) {
        tmp___14 = jit->ip;
        (jit->ip) ++;
        *tmp___14 = (unsigned char)243;
        while (1) {
          if (a2 > 7L) {
            tmp___15 = 4;
          } else {
            tmp___15 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )tmp___15;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___16 = jit->ip;
            (jit->ip) ++;
            *tmp___16 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___17 = jit->ip;
        (jit->ip) ++;
        *tmp___17 = (unsigned char)15;
        tmp___18 = jit->ip;
        (jit->ip) ++;
        *tmp___18 = (unsigned char)17;
        while (1) {
          tmp___19 = jit->ip;
          (jit->ip) ++;
          *tmp___19 = (unsigned char )(((a2 & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___20 = jit->ip;
          (jit->ip) ++;
          *tmp___20 = (unsigned char )((4 << 3) | 5);
          break;
        }
        while (1) {
          imb.val = (int )a1;
          tmp___21 = jit->ip;
          (jit->ip) ++;
          *tmp___21 = imb.b[0];
          tmp___22 = jit->ip;
          (jit->ip) ++;
          *tmp___22 = imb.b[1];
          tmp___23 = jit->ip;
          (jit->ip) ++;
          *tmp___23 = imb.b[2];
          tmp___24 = jit->ip;
          (jit->ip) ++;
          *tmp___24 = imb.b[3];
          break;
        }
        break;
      }
    } else {
      while (1) {
        tmp___25 = jit->ip;
        (jit->ip) ++;
        *tmp___25 = (unsigned char)243;
        while (1) {
          if (a2 > 7L) {
            tmp___26 = 4;
          } else {
            tmp___26 = 0;
          }
          if (a1 > 7L) {
            tmp___27 = 1;
          } else {
            tmp___27 = 0;
          }
          _amd64_rex_bits___2 = (unsigned char )(tmp___26 | tmp___27);
          if ((int )_amd64_rex_bits___2 != 0) {
            tmp___28 = jit->ip;
            (jit->ip) ++;
            *tmp___28 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
          }
          break;
        }
        tmp___29 = jit->ip;
        (jit->ip) ++;
        *tmp___29 = (unsigned char)15;
        tmp___30 = jit->ip;
        (jit->ip) ++;
        *tmp___30 = (unsigned char)17;
        while (1) {
          if ((a1 & 7L) == 4L) {
            while (1) {
              tmp___31 = jit->ip;
              (jit->ip) ++;
              *tmp___31 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___32 = jit->ip;
              (jit->ip) ++;
              *tmp___32 = (unsigned char )((4 << 3) | 4);
              break;
            }
            break;
          }
          if ((a1 & 7L) != 5L) {
            while (1) {
              tmp___41 = jit->ip;
              (jit->ip) ++;
              *tmp___41 = (unsigned char )((((a2 & 7L) & 7L) << 3) | ((a1 & 7L) & 7L));
              break;
            }
            break;
          }
          while (1) {
            tmp___42 = jit->ip;
            (jit->ip) ++;
            *tmp___42 = (unsigned char )(((long )(1 << 6) | (((a2 & 7L) & 7L) << 3)) | ((a1 & 7L) & 7L));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)0;
            (jit->ip) ++;
            break;
          }
          break;
        }
        break;
      }
    }
    if (live) {
      while (1) {
        while (1) {
          tmp___48 = jit->ip;
          (jit->ip) ++;
          *tmp___48 = (unsigned char)102;
          while (1) {
            if (a2 > 7L) {
              tmp___49 = 4;
            } else {
              tmp___49 = 0;
            }
            if (a2 > 7L) {
              tmp___50 = 1;
            } else {
              tmp___50 = 0;
            }
            _amd64_rex_bits___3 = (unsigned char )(tmp___49 | tmp___50);
            if ((int )_amd64_rex_bits___3 != 0) {
              tmp___51 = jit->ip;
              (jit->ip) ++;
              *tmp___51 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
            }
            break;
          }
          tmp___52 = jit->ip;
          (jit->ip) ++;
          *tmp___52 = (unsigned char)15;
          tmp___53 = jit->ip;
          (jit->ip) ++;
          *tmp___53 = (unsigned char)198;
          while (1) {
            while (1) {
              tmp___54 = jit->ip;
              (jit->ip) ++;
              *tmp___54 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
              break;
            }
            break;
          }
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)1;
          (jit->ip) ++;
          break;
        }
        break;
      }
    }
  } else
  if ((int )op->code & 2) {
    while (1) {
      tmp___55 = jit->ip;
      (jit->ip) ++;
      *tmp___55 = (unsigned char)102;
      while (1) {
        if (a2 > 7L) {
          tmp___56 = 4;
        } else {
          tmp___56 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )tmp___56;
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___57 = jit->ip;
          (jit->ip) ++;
          *tmp___57 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      tmp___58 = jit->ip;
      (jit->ip) ++;
      *tmp___58 = (unsigned char)15;
      tmp___59 = jit->ip;
      (jit->ip) ++;
      *tmp___59 = (unsigned char)19;
      while (1) {
        tmp___60 = jit->ip;
        (jit->ip) ++;
        *tmp___60 = (unsigned char )(((a2 & 7L) << 3) | 4L);
        break;
      }
      while (1) {
        tmp___61 = jit->ip;
        (jit->ip) ++;
        *tmp___61 = (unsigned char )((4 << 3) | 5);
        break;
      }
      while (1) {
        imb___2.val = (int )a1;
        tmp___62 = jit->ip;
        (jit->ip) ++;
        *tmp___62 = imb___2.b[0];
        tmp___63 = jit->ip;
        (jit->ip) ++;
        *tmp___63 = imb___2.b[1];
        tmp___64 = jit->ip;
        (jit->ip) ++;
        *tmp___64 = imb___2.b[2];
        tmp___65 = jit->ip;
        (jit->ip) ++;
        *tmp___65 = imb___2.b[3];
        break;
      }
      break;
    }
  } else {
    while (1) {
      tmp___66 = jit->ip;
      (jit->ip) ++;
      *tmp___66 = (unsigned char)102;
      while (1) {
        if (a2 > 7L) {
          tmp___67 = 4;
        } else {
          tmp___67 = 0;
        }
        if (a1 == 16L) {
          tmp___70 = (jit_value )0;
        } else {
          tmp___70 = a1;
        }
        if (tmp___70 > 7L) {
          tmp___69 = 1;
        } else {
          tmp___69 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(tmp___67 | tmp___69);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___71 = jit->ip;
          (jit->ip) ++;
          *tmp___71 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      tmp___72 = jit->ip;
      (jit->ip) ++;
      *tmp___72 = (unsigned char)15;
      tmp___73 = jit->ip;
      (jit->ip) ++;
      *tmp___73 = (unsigned char)19;
      while (1) {
        if (a1 == 16L) {
          while (1) {
            tmp___74 = jit->ip;
            (jit->ip) ++;
            *tmp___74 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 5L);
            break;
          }
          while (1) {
            imb___3.val = 0;
            tmp___75 = jit->ip;
            (jit->ip) ++;
            *tmp___75 = imb___3.b[0];
            tmp___76 = jit->ip;
            (jit->ip) ++;
            *tmp___76 = imb___3.b[1];
            tmp___77 = jit->ip;
            (jit->ip) ++;
            *tmp___77 = imb___3.b[2];
            tmp___78 = jit->ip;
            (jit->ip) ++;
            *tmp___78 = imb___3.b[3];
            break;
          }
        } else {
          while (1) {
            if ((a1 & 7L) == 4L) {
              while (1) {
                tmp___79 = jit->ip;
                (jit->ip) ++;
                *tmp___79 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___80 = jit->ip;
                (jit->ip) ++;
                *tmp___80 = (unsigned char )((4 << 3) | 4);
                break;
              }
              break;
            }
            if ((a1 & 7L) != 5L) {
              while (1) {
                tmp___89 = jit->ip;
                (jit->ip) ++;
                *tmp___89 = (unsigned char )((((a2 & 7L) & 7L) << 3) | ((a1 & 7L) & 7L));
                break;
              }
              break;
            }
            while (1) {
              tmp___90 = jit->ip;
              (jit->ip) ++;
              *tmp___90 = (unsigned char )(((long )(1 << 6) | (((a2 & 7L) & 7L) << 3)) | ((a1 & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)0;
              (jit->ip) ++;
              break;
            }
            break;
          }
        }
        break;
      }
      break;
    }
  }
  return;
}
}
static jit_hw_reg *rmap_spill_candidate(struct jit_reg_allocator *al , jit_op *op ,
                                        jit_value virtreg , int *spill , jit_value *reg_to_spill ,
                                        int callee_saved ) 
{ 
  jit_reg r ;
  jit_hw_reg *regs ;
  int reg_count ;
  jit_hw_reg *result ;
  int best_score ;
  int sp ;
  int i ;
  jit_value assoc ;
  int score ;
  int tmp ;

  {
  r = virtreg;
  result = (jit_hw_reg *)((void *)0);
  best_score = (-0x7FFFFFFF-1);
  if ((r & 1L) == 0L) {
    regs = al->gp_regs;
    reg_count = al->gp_reg_cnt;
  } else {
    regs = al->fp_regs;
    reg_count = al->fp_reg_cnt;
  }
  sp = 0;
  i = 0;
  while (i < reg_count) {
    if (callee_saved) {
      if (! (regs + i)->callee_saved) {
        goto __Cont;
      }
    }
    assoc = (jit_value )0;
    tmp = candidate_score(op, virtreg, regs + i, & sp, & assoc);
    score = tmp;
    if (score > best_score) {
      if (sp) {
        *reg_to_spill = assoc;
        *spill = sp;
      } else {
        *reg_to_spill = (jit_value )-1;
        *spill = 0;
      }
      result = regs + i;
      best_score = score;
    }
    __Cont: /* CIL Label */ 
    i ++;
  }
  return (result);
}
}
static int jit_tree_equal(jit_tree *r1 , jit_tree *r2 ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = jit_tree_subset(r1, r2);
  if (tmp) {
    tmp___0 = jit_tree_subset(r2, r1);
    if (tmp___0) {
      tmp___1 = 1;
    } else {
      tmp___1 = 0;
    }
  } else {
    tmp___1 = 0;
  }
  return (tmp___1);
}
}
static void emit_transfer_loop(struct jit *jit , jit_op *op ) 
{ 
  struct transfer_info *tinf ;
  jit_value loop ;
  unsigned char _amd64_rex_bits ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  int tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  long tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  x86_imm_buf imb ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___43 ;
  int offset ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___54 ;
  int tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  long tmp___59 ;
  unsigned char *tmp___60 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___83 ;
  int tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  long tmp___88 ;
  unsigned char *tmp___89 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;
  unsigned char *tmp___99 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;

  {
  tinf = (struct transfer_info *)op->addendum;
  loop = (jit_value )tinf->loop_addr;
  while (1) {
    while (1) {
      if (tinf->block_size > 4) {
        tmp = 8;
      } else {
        tmp = 0;
      }
      if (tinf->scrapreg > 7) {
        tmp___0 = 4;
      } else {
        tmp___0 = 0;
      }
      if (tinf->counterreg > 7) {
        tmp___1 = 2;
      } else {
        tmp___1 = 0;
      }
      if (tinf->destreg > 7) {
        tmp___2 = 1;
      } else {
        tmp___2 = 0;
      }
      _amd64_rex_bits = (unsigned char )(((tmp | tmp___0) | tmp___1) | tmp___2);
      if ((int )_amd64_rex_bits != 0) {
        tmp___3 = jit->ip;
        (jit->ip) ++;
        *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
      } else
      if (tinf->block_size == 1) {
        tmp___3 = jit->ip;
        (jit->ip) ++;
        *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
      }
      break;
    }
    while (1) {
      if (tinf->block_size == 8) {
        tmp___4 = 4;
      } else {
        tmp___4 = tinf->block_size;
      }
      switch (tmp___4) {
      case 1: 
      tmp___5 = jit->ip;
      (jit->ip) ++;
      *tmp___5 = (unsigned char)136;
      break;
      case 2: 
      tmp___6 = jit->ip;
      (jit->ip) ++;
      *tmp___6 = (unsigned char)102;
      case 4: 
      tmp___7 = jit->ip;
      (jit->ip) ++;
      *tmp___7 = (unsigned char)137;
      break;
      default: 
      tmp___8 = __builtin_expect(1L, 0L);
      if (tmp___8) {
        __assert_rtn("emit_transfer_loop", "./jitter-amd64.c", 3003, "0");
      }
      }
      while (1) {
        if ((tinf->destreg & 7) == -1) {
          while (1) {
            tmp___9 = jit->ip;
            (jit->ip) ++;
            *tmp___9 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
            break;
          }
          while (1) {
            tmp___10 = jit->ip;
            (jit->ip) ++;
            *tmp___10 = (unsigned char )((((tinf->counterreg & 7) & 7) << 3) | 5);
            break;
          }
          while (1) {
            imb.val = - tinf->block_size;
            tmp___11 = jit->ip;
            (jit->ip) ++;
            *tmp___11 = imb.b[0];
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = imb.b[1];
            tmp___13 = jit->ip;
            (jit->ip) ++;
            *tmp___13 = imb.b[2];
            tmp___14 = jit->ip;
            (jit->ip) ++;
            *tmp___14 = imb.b[3];
            break;
          }
        } else
        if (- tinf->block_size == 0) {
          if ((tinf->destreg & 7) != 5) {
            while (1) {
              tmp___15 = jit->ip;
              (jit->ip) ++;
              *tmp___15 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___16 = jit->ip;
              (jit->ip) ++;
              *tmp___16 = (unsigned char )(((((tinf->counterreg & 7) & 7) & 7) << 3) | (((tinf->destreg & 7) & 7) & 7));
              break;
            }
          } else {
            goto _L___0;
          }
        } else
        _L___0: /* CIL Label */ 
        if (- tinf->block_size >= -128) {
          if (- tinf->block_size <= 127) {
            while (1) {
              tmp___17 = jit->ip;
              (jit->ip) ++;
              *tmp___17 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___18 = jit->ip;
              (jit->ip) ++;
              *tmp___18 = (unsigned char )(((((tinf->counterreg & 7) & 7) & 7) << 3) | (((tinf->destreg & 7) & 7) & 7));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- tinf->block_size & 255);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L;
          }
        } else {
          _L: /* CIL Label */ 
          while (1) {
            tmp___19 = jit->ip;
            (jit->ip) ++;
            *tmp___19 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
            break;
          }
          while (1) {
            tmp___20 = jit->ip;
            (jit->ip) ++;
            *tmp___20 = (unsigned char )(((((tinf->counterreg & 7) & 7) & 7) << 3) | (((tinf->destreg & 7) & 7) & 7));
            break;
          }
          while (1) {
            imb___0.val = - tinf->block_size;
            tmp___21 = jit->ip;
            (jit->ip) ++;
            *tmp___21 = imb___0.b[0];
            tmp___22 = jit->ip;
            (jit->ip) ++;
            *tmp___22 = imb___0.b[1];
            tmp___23 = jit->ip;
            (jit->ip) ++;
            *tmp___23 = imb___0.b[2];
            tmp___24 = jit->ip;
            (jit->ip) ++;
            *tmp___24 = imb___0.b[3];
            break;
          }
        }
        break;
      }
      break;
    }
    break;
  }
  while (1) {
    if (tinf->block_size >= -128) {
      if (tinf->block_size <= 127) {
        while (1) {
          if (tinf->counterreg > 7) {
            tmp___25 = 1;
          } else {
            tmp___25 = 0;
          }
          _amd64_rex_bits___0 = (unsigned char )(8 | tmp___25);
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___26 = jit->ip;
            (jit->ip) ++;
            *tmp___26 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___27 = jit->ip;
        (jit->ip) ++;
        *tmp___27 = (unsigned char)131;
        while (1) {
          while (1) {
            tmp___28 = jit->ip;
            (jit->ip) ++;
            *tmp___28 = (unsigned char )(((3 << 6) | (5 << 3)) | (tinf->counterreg & 7));
            break;
          }
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char )(tinf->block_size & 255);
          (jit->ip) ++;
          break;
        }
      } else {
        goto _L___1;
      }
    } else
    _L___1: /* CIL Label */ 
    if (tinf->counterreg == 0) {
      while (1) {
        _amd64_rex_bits___1 = (unsigned char)8;
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___29 = jit->ip;
          (jit->ip) ++;
          *tmp___29 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      tmp___30 = jit->ip;
      (jit->ip) ++;
      *tmp___30 = (unsigned char )((5 << 3) + 5);
      while (1) {
        imb___1.val = tinf->block_size;
        tmp___31 = jit->ip;
        (jit->ip) ++;
        *tmp___31 = imb___1.b[0];
        tmp___32 = jit->ip;
        (jit->ip) ++;
        *tmp___32 = imb___1.b[1];
        tmp___33 = jit->ip;
        (jit->ip) ++;
        *tmp___33 = imb___1.b[2];
        tmp___34 = jit->ip;
        (jit->ip) ++;
        *tmp___34 = imb___1.b[3];
        break;
      }
    } else {
      while (1) {
        if (tinf->counterreg > 7) {
          tmp___35 = 1;
        } else {
          tmp___35 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )(8 | tmp___35);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___36 = jit->ip;
          (jit->ip) ++;
          *tmp___36 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___37 = jit->ip;
      (jit->ip) ++;
      *tmp___37 = (unsigned char)129;
      while (1) {
        while (1) {
          tmp___38 = jit->ip;
          (jit->ip) ++;
          *tmp___38 = (unsigned char )(((3 << 6) | (5 << 3)) | (tinf->counterreg & 7));
          break;
        }
        break;
      }
      while (1) {
        imb___2.val = tinf->block_size;
        tmp___39 = jit->ip;
        (jit->ip) ++;
        *tmp___39 = imb___2.b[0];
        tmp___40 = jit->ip;
        (jit->ip) ++;
        *tmp___40 = imb___2.b[1];
        tmp___41 = jit->ip;
        (jit->ip) ++;
        *tmp___41 = imb___2.b[2];
        tmp___42 = jit->ip;
        (jit->ip) ++;
        *tmp___42 = imb___2.b[3];
        break;
      }
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___3 = (unsigned char)8;
      if ((int )_amd64_rex_bits___3 != 0) {
        tmp___43 = jit->ip;
        (jit->ip) ++;
        *tmp___43 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
      }
      break;
    }
    while (1) {
      offset = (int )((loop - (jit_value )jit->ip) - 2L);
      if (offset >= -128) {
        if (offset <= 127) {
          while (1) {
            tmp___45 = jit->ip;
            (jit->ip) ++;
            *tmp___45 = (unsigned char )x86_cc_unsigned_map[1];
            while (1) {
              *(jit->ip) = (unsigned char )(offset & 255);
              (jit->ip) ++;
              break;
            }
            break;
          }
        } else {
          goto _L___2;
        }
      } else {
        _L___2: /* CIL Label */ 
        offset -= 4;
        while (1) {
          tmp___46 = jit->ip;
          (jit->ip) ++;
          *tmp___46 = (unsigned char)15;
          tmp___48 = jit->ip;
          (jit->ip) ++;
          *tmp___48 = (unsigned char )((int const   )x86_cc_unsigned_map[1] + 16);
          while (1) {
            imb___3.val = offset;
            tmp___49 = jit->ip;
            (jit->ip) ++;
            *tmp___49 = imb___3.b[0];
            tmp___50 = jit->ip;
            (jit->ip) ++;
            *tmp___50 = imb___3.b[1];
            tmp___51 = jit->ip;
            (jit->ip) ++;
            *tmp___51 = imb___3.b[2];
            tmp___52 = jit->ip;
            (jit->ip) ++;
            *tmp___52 = imb___3.b[3];
            break;
          }
          break;
        }
      }
      break;
    }
    break;
  }
  if (tinf->counter_in_use) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___53 = jit->ip;
        (jit->ip) ++;
        *tmp___53 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___54 = 8;
        } else {
          tmp___54 = 0;
        }
        if (tinf->counterreg > 7) {
          tmp___55 = 4;
        } else {
          tmp___55 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )(tmp___54 | tmp___55);
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___56 = jit->ip;
          (jit->ip) ++;
          *tmp___56 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___56 = jit->ip;
          (jit->ip) ++;
          *tmp___56 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___57 = jit->ip;
      (jit->ip) ++;
      *tmp___57 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___58 = jit->ip;
      (jit->ip) ++;
      *tmp___58 = (unsigned char)139;
      break;
      default: 
      tmp___59 = __builtin_expect(1L, 0L);
      if (tmp___59) {
        __assert_rtn("emit_transfer_loop", "./jitter-amd64.c", 3007, "0");
      }
      }
      while (1) {
        while (1) {
          if (- sizeof(void *) == 0UL) {
            while (1) {
              tmp___65 = jit->ip;
              (jit->ip) ++;
              *tmp___65 = (unsigned char )((((tinf->counterreg & 7) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___66 = jit->ip;
              (jit->ip) ++;
              *tmp___66 = (unsigned char )((4 << 3) | 4);
              break;
            }
          } else
          if ((int )(- sizeof(void *)) >= -128) {
            if ((int )(- sizeof(void *)) <= 127) {
              while (1) {
                tmp___67 = jit->ip;
                (jit->ip) ++;
                *tmp___67 = (unsigned char )(((1 << 6) | (((tinf->counterreg & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___68 = jit->ip;
                (jit->ip) ++;
                *tmp___68 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- sizeof(void *) & 255UL);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___3;
            }
          } else {
            _L___3: /* CIL Label */ 
            while (1) {
              tmp___69 = jit->ip;
              (jit->ip) ++;
              *tmp___69 = (unsigned char )(((2 << 6) | (((tinf->counterreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___70 = jit->ip;
              (jit->ip) ++;
              *tmp___70 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              imb___5.val = (int )(- sizeof(void *));
              tmp___71 = jit->ip;
              (jit->ip) ++;
              *tmp___71 = imb___5.b[0];
              tmp___72 = jit->ip;
              (jit->ip) ++;
              *tmp___72 = imb___5.b[1];
              tmp___73 = jit->ip;
              (jit->ip) ++;
              *tmp___73 = imb___5.b[2];
              tmp___74 = jit->ip;
              (jit->ip) ++;
              *tmp___74 = imb___5.b[3];
              break;
            }
          }
          break;
          if (- sizeof(void *) == 0UL) {
            while (1) {
              tmp___75 = jit->ip;
              (jit->ip) ++;
              *tmp___75 = (unsigned char )((((tinf->counterreg & 7) & 7) << 3) | 4);
              break;
            }
            break;
          }
          if ((int )(- sizeof(void *)) >= -128) {
            if ((int )(- sizeof(void *)) <= 127) {
              while (1) {
                tmp___76 = jit->ip;
                (jit->ip) ++;
                *tmp___76 = (unsigned char )(((1 << 6) | (((tinf->counterreg & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- sizeof(void *) & 255UL);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___4;
            }
          } else {
            _L___4: /* CIL Label */ 
            while (1) {
              tmp___77 = jit->ip;
              (jit->ip) ++;
              *tmp___77 = (unsigned char )(((2 << 6) | (((tinf->counterreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              imb___6.val = (int )(- sizeof(void *));
              tmp___78 = jit->ip;
              (jit->ip) ++;
              *tmp___78 = imb___6.b[0];
              tmp___79 = jit->ip;
              (jit->ip) ++;
              *tmp___79 = imb___6.b[1];
              tmp___80 = jit->ip;
              (jit->ip) ++;
              *tmp___80 = imb___6.b[2];
              tmp___81 = jit->ip;
              (jit->ip) ++;
              *tmp___81 = imb___6.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  }
  if (tinf->scrap_in_use) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___82 = jit->ip;
        (jit->ip) ++;
        *tmp___82 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___83 = 8;
        } else {
          tmp___83 = 0;
        }
        if (tinf->scrapreg > 7) {
          tmp___84 = 4;
        } else {
          tmp___84 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(tmp___83 | tmp___84);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___85 = jit->ip;
          (jit->ip) ++;
          *tmp___85 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___85 = jit->ip;
          (jit->ip) ++;
          *tmp___85 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___86 = jit->ip;
      (jit->ip) ++;
      *tmp___86 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___87 = jit->ip;
      (jit->ip) ++;
      *tmp___87 = (unsigned char)139;
      break;
      default: 
      tmp___88 = __builtin_expect(1L, 0L);
      if (tmp___88) {
        __assert_rtn("emit_transfer_loop", "./jitter-amd64.c", 3008, "0");
      }
      }
      while (1) {
        while (1) {
          if (- sizeof(void *) * 2UL == 0UL) {
            while (1) {
              tmp___94 = jit->ip;
              (jit->ip) ++;
              *tmp___94 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___95 = jit->ip;
              (jit->ip) ++;
              *tmp___95 = (unsigned char )((4 << 3) | 4);
              break;
            }
          } else
          if ((int )(- sizeof(void *) * 2UL) >= -128) {
            if ((int )(- sizeof(void *) * 2UL) <= 127) {
              while (1) {
                tmp___96 = jit->ip;
                (jit->ip) ++;
                *tmp___96 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___97 = jit->ip;
                (jit->ip) ++;
                *tmp___97 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- sizeof(void *) * 2UL & 255UL);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___5;
            }
          } else {
            _L___5: /* CIL Label */ 
            while (1) {
              tmp___98 = jit->ip;
              (jit->ip) ++;
              *tmp___98 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___99 = jit->ip;
              (jit->ip) ++;
              *tmp___99 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              imb___8.val = (int )(- sizeof(void *) * 2UL);
              tmp___100 = jit->ip;
              (jit->ip) ++;
              *tmp___100 = imb___8.b[0];
              tmp___101 = jit->ip;
              (jit->ip) ++;
              *tmp___101 = imb___8.b[1];
              tmp___102 = jit->ip;
              (jit->ip) ++;
              *tmp___102 = imb___8.b[2];
              tmp___103 = jit->ip;
              (jit->ip) ++;
              *tmp___103 = imb___8.b[3];
              break;
            }
          }
          break;
          if (- sizeof(void *) * 2UL == 0UL) {
            while (1) {
              tmp___104 = jit->ip;
              (jit->ip) ++;
              *tmp___104 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
              break;
            }
            break;
          }
          if ((int )(- sizeof(void *) * 2UL) >= -128) {
            if ((int )(- sizeof(void *) * 2UL) <= 127) {
              while (1) {
                tmp___105 = jit->ip;
                (jit->ip) ++;
                *tmp___105 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- sizeof(void *) * 2UL & 255UL);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___6;
            }
          } else {
            _L___6: /* CIL Label */ 
            while (1) {
              tmp___106 = jit->ip;
              (jit->ip) ++;
              *tmp___106 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              imb___9.val = (int )(- sizeof(void *) * 2UL);
              tmp___107 = jit->ip;
              (jit->ip) ++;
              *tmp___107 = imb___9.b[0];
              tmp___108 = jit->ip;
              (jit->ip) ++;
              *tmp___108 = imb___9.b[1];
              tmp___109 = jit->ip;
              (jit->ip) ++;
              *tmp___109 = imb___9.b[2];
              tmp___110 = jit->ip;
              (jit->ip) ++;
              *tmp___110 = imb___9.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
static int check_missing_patches(jit_op *op , char *msg_buf ) 
{ 
  int tmp ;

  {
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 0U) {
    goto _L___1;
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 808U) {
    _L___1: /* CIL Label */ 
    if ((int )op->code & 2) {
      goto _L;
    } else {
      goto _L___0;
    }
  } else {
    _L___0: /* CIL Label */ 
    tmp = is_cond_branch_op(op);
    if (tmp) {
      _L: /* CIL Label */ 
      if (op->arg[0] == (jit_value )((void *)0)) {
        if ((unsigned long )op->jmp_addr == (unsigned long )((void *)0)) {
          append_msg(msg_buf, (char *)"missing patch");
          return (128);
        }
      }
    }
  }
  return (0);
}
}
__inline extern int isspecial(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 1048576UL);
  return (tmp);
}
}
static int assign_call(jit_op *op , struct jit_reg_allocator *al ) 
{ 


  {
  spill_ret_retreg(op, al->ret_reg);
  spill_ret_retreg(op, al->fpret_reg);
  return (1);
}
}
__inline static int flw_analyze_op(struct jit *jit , jit_op *op , struct jit_func_info *func_info ,
                                   int changed , struct code_refs_cache *code_refs ) 
{ 
  int live_out_size ;
  int tmp ;
  int live_in_size ;
  int tmp___0 ;
  int i ;
  int i___0 ;
  int i___1 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  tmp = jit_set_size(op->live_out);
  live_out_size = tmp;
  tmp___0 = jit_set_size(op->live_in);
  live_in_size = tmp___0;
  if (op->jmp_addr) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) != 832U) {
      if ((unsigned int )((jit_opcode )((int )op->code & 65528)) != 520U) {
        jit_set_addall(op->live_out, (op->jmp_addr)->live_in);
      }
    }
  }
  if ((int )op->code == 809) {
    if (code_refs->size < 0) {
      initialize_code_refs(code_refs, func_info);
    }
    i = 0;
    while (i < code_refs->size) {
      jit_set_addall(op->live_out, ((*(code_refs->ops + i))->jmp_addr)->live_in);
      i ++;
    }
    goto skip;
  }
  if ((int )op->code == 810) {
    goto skip;
  }
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 72U) {
    op->live_out = jit_set_new();
    goto skip;
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 96U) {
    op->live_out = jit_set_new();
    goto skip;
  }
  if (op->next) {
    jit_set_addall(op->live_out, (op->next)->live_in);
  }
  skip: 
  jit_set_addall(op->live_in, op->live_out);
  i___0 = 0;
  while (i___0 < 3) {
    if ((((int )op->spec >> ((i___0 + 1) - 1) * 2) & 3) == 3) {
      jit_set_remove(op->live_in, (int )op->arg[i___0]);
    }
    i___0 ++;
  }
  i___1 = 0;
  while (i___1 < 3) {
    if ((((int )op->spec >> ((i___1 + 1) - 1) * 2) & 3) == 1) {
      jit_set_add(op->live_in, (int )op->arg[i___1]);
    }
    i___1 ++;
  }
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 536U) {
    flw_analyze_prolog(jit, op, func_info);
  }
  if (changed) {
    return (changed);
  }
  tmp___1 = jit_set_size(op->live_out);
  if (live_out_size != tmp___1) {
    return (1);
  }
  tmp___2 = jit_set_size(op->live_in);
  if (live_in_size != tmp___2) {
    return (1);
  }
  return (0);
}
}
static void emit_transfer_op(struct jit *jit , jit_op *op , int alu_op ) 
{ 
  jit_op *init_op ;
  struct transfer_info *tinf ;
  unsigned char _amd64_rex_bits ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___60 ;
  int tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  int tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  x86_imm_buf imb___5 ;
  int tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  int tmp___80 ;
  int tmp___81 ;
  int tmp___82 ;
  unsigned char *tmp___83 ;
  int tmp___84 ;
  unsigned char *tmp___85 ;
  int tmp___86 ;
  unsigned char *tmp___87 ;
  x86_imm_buf imb___6 ;
  int tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  int tmp___93 ;
  int tmp___94 ;

  {
  init_op = op->prev;
  while ((unsigned int )((jit_opcode )((int )init_op->code & 65528)) != 248U) {
    init_op = init_op->prev;
  }
  tinf = (struct transfer_info *)init_op->addendum;
  if (op->arg[1] == (jit_value )((2 << 1) | (1 << 4))) {
    while (1) {
      while (1) {
        if (tinf->scrapreg > 7) {
          tmp = 4;
        } else {
          tmp = 0;
        }
        if (tinf->counterreg > 7) {
          tmp___0 = 2;
        } else {
          tmp___0 = 0;
        }
        if (tinf->destreg > 7) {
          tmp___1 = 1;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )(((8 | tmp) | tmp___0) | tmp___1);
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      while (1) {
        tmp___3 = jit->ip;
        (jit->ip) ++;
        *tmp___3 = (unsigned char )(((int )((unsigned char )alu_op) << 3) + 3);
        while (1) {
          if ((tinf->destreg & 7) == -1) {
            while (1) {
              tmp___4 = jit->ip;
              (jit->ip) ++;
              *tmp___4 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___5 = jit->ip;
              (jit->ip) ++;
              *tmp___5 = (unsigned char )((((tinf->counterreg & 7) & 7) << 3) | 5);
              break;
            }
            while (1) {
              imb.val = - tinf->block_size;
              tmp___6 = jit->ip;
              (jit->ip) ++;
              *tmp___6 = imb.b[0];
              tmp___7 = jit->ip;
              (jit->ip) ++;
              *tmp___7 = imb.b[1];
              tmp___8 = jit->ip;
              (jit->ip) ++;
              *tmp___8 = imb.b[2];
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = imb.b[3];
              break;
            }
          } else
          if (- tinf->block_size == 0) {
            if ((tinf->destreg & 7) != 5) {
              while (1) {
                tmp___10 = jit->ip;
                (jit->ip) ++;
                *tmp___10 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___11 = jit->ip;
                (jit->ip) ++;
                *tmp___11 = (unsigned char )(((((tinf->counterreg & 7) & 7) & 7) << 3) | (((tinf->destreg & 7) & 7) & 7));
                break;
              }
            } else {
              goto _L___0;
            }
          } else
          _L___0: /* CIL Label */ 
          if (- tinf->block_size >= -128) {
            if (- tinf->block_size <= 127) {
              while (1) {
                tmp___12 = jit->ip;
                (jit->ip) ++;
                *tmp___12 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___13 = jit->ip;
                (jit->ip) ++;
                *tmp___13 = (unsigned char )(((((tinf->counterreg & 7) & 7) & 7) << 3) | (((tinf->destreg & 7) & 7) & 7));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- tinf->block_size & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L;
            }
          } else {
            _L: /* CIL Label */ 
            while (1) {
              tmp___14 = jit->ip;
              (jit->ip) ++;
              *tmp___14 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___15 = jit->ip;
              (jit->ip) ++;
              *tmp___15 = (unsigned char )(((((tinf->counterreg & 7) & 7) & 7) << 3) | (((tinf->destreg & 7) & 7) & 7));
              break;
            }
            while (1) {
              imb___0.val = - tinf->block_size;
              tmp___16 = jit->ip;
              (jit->ip) ++;
              *tmp___16 = imb___0.b[0];
              tmp___17 = jit->ip;
              (jit->ip) ++;
              *tmp___17 = imb___0.b[1];
              tmp___18 = jit->ip;
              (jit->ip) ++;
              *tmp___18 = imb___0.b[2];
              tmp___19 = jit->ip;
              (jit->ip) ++;
              *tmp___19 = imb___0.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  } else
  if (op->r_arg[1] != -1L) {
    if (op->r_arg[1] == (jit_value )tinf->counterreg) {
      if (tinf->counter_in_use) {
        while (1) {
          while (1) {
            if (tinf->scrapreg > 7) {
              tmp___20 = 4;
            } else {
              tmp___20 = 0;
            }
            _amd64_rex_bits___0 = (unsigned char )(8 | tmp___20);
            if ((int )_amd64_rex_bits___0 != 0) {
              tmp___21 = jit->ip;
              (jit->ip) ++;
              *tmp___21 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
            }
            break;
          }
          while (1) {
            tmp___22 = jit->ip;
            (jit->ip) ++;
            *tmp___22 = (unsigned char )(((int )((unsigned char )alu_op) << 3) + 3);
            while (1) {
              if (- sizeof(void *) == 0UL) {
                while (1) {
                  tmp___23 = jit->ip;
                  (jit->ip) ++;
                  *tmp___23 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___24 = jit->ip;
                  (jit->ip) ++;
                  *tmp___24 = (unsigned char )((4 << 3) | 4);
                  break;
                }
              } else
              if ((int )(- sizeof(void *)) >= -128) {
                if ((int )(- sizeof(void *)) <= 127) {
                  while (1) {
                    tmp___25 = jit->ip;
                    (jit->ip) ++;
                    *tmp___25 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___26 = jit->ip;
                    (jit->ip) ++;
                    *tmp___26 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(- sizeof(void *) & 255UL);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___1;
                }
              } else {
                _L___1: /* CIL Label */ 
                while (1) {
                  tmp___27 = jit->ip;
                  (jit->ip) ++;
                  *tmp___27 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___28 = jit->ip;
                  (jit->ip) ++;
                  *tmp___28 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  imb___1.val = (int )(- sizeof(void *));
                  tmp___29 = jit->ip;
                  (jit->ip) ++;
                  *tmp___29 = imb___1.b[0];
                  tmp___30 = jit->ip;
                  (jit->ip) ++;
                  *tmp___30 = imb___1.b[1];
                  tmp___31 = jit->ip;
                  (jit->ip) ++;
                  *tmp___31 = imb___1.b[2];
                  tmp___32 = jit->ip;
                  (jit->ip) ++;
                  *tmp___32 = imb___1.b[3];
                  break;
                }
              }
              break;
              if (- sizeof(void *) == 0UL) {
                while (1) {
                  tmp___33 = jit->ip;
                  (jit->ip) ++;
                  *tmp___33 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
                  break;
                }
                break;
              }
              if ((int )(- sizeof(void *)) >= -128) {
                if ((int )(- sizeof(void *)) <= 127) {
                  while (1) {
                    tmp___34 = jit->ip;
                    (jit->ip) ++;
                    *tmp___34 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(- sizeof(void *) & 255UL);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___2;
                }
              } else {
                _L___2: /* CIL Label */ 
                while (1) {
                  tmp___35 = jit->ip;
                  (jit->ip) ++;
                  *tmp___35 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  imb___2.val = (int )(- sizeof(void *));
                  tmp___36 = jit->ip;
                  (jit->ip) ++;
                  *tmp___36 = imb___2.b[0];
                  tmp___37 = jit->ip;
                  (jit->ip) ++;
                  *tmp___37 = imb___2.b[1];
                  tmp___38 = jit->ip;
                  (jit->ip) ++;
                  *tmp___38 = imb___2.b[2];
                  tmp___39 = jit->ip;
                  (jit->ip) ++;
                  *tmp___39 = imb___2.b[3];
                  break;
                }
              }
              break;
            }
            break;
          }
          break;
        }
      } else {
        goto _L___6;
      }
    } else
    _L___6: /* CIL Label */ 
    if (op->r_arg[1] == (jit_value )tinf->scrapreg) {
      if (tinf->scrap_in_use) {
        while (1) {
          while (1) {
            if (tinf->scrapreg > 7) {
              tmp___40 = 4;
            } else {
              tmp___40 = 0;
            }
            _amd64_rex_bits___1 = (unsigned char )(8 | tmp___40);
            if ((int )_amd64_rex_bits___1 != 0) {
              tmp___41 = jit->ip;
              (jit->ip) ++;
              *tmp___41 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
            }
            break;
          }
          while (1) {
            tmp___42 = jit->ip;
            (jit->ip) ++;
            *tmp___42 = (unsigned char )(((int )((unsigned char )alu_op) << 3) + 3);
            while (1) {
              if (- sizeof(void *) * 2UL == 0UL) {
                while (1) {
                  tmp___43 = jit->ip;
                  (jit->ip) ++;
                  *tmp___43 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___44 = jit->ip;
                  (jit->ip) ++;
                  *tmp___44 = (unsigned char )((4 << 3) | 4);
                  break;
                }
              } else
              if ((int )(- sizeof(void *) * 2UL) >= -128) {
                if ((int )(- sizeof(void *) * 2UL) <= 127) {
                  while (1) {
                    tmp___45 = jit->ip;
                    (jit->ip) ++;
                    *tmp___45 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___46 = jit->ip;
                    (jit->ip) ++;
                    *tmp___46 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(- sizeof(void *) * 2UL & 255UL);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___3;
                }
              } else {
                _L___3: /* CIL Label */ 
                while (1) {
                  tmp___47 = jit->ip;
                  (jit->ip) ++;
                  *tmp___47 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___48 = jit->ip;
                  (jit->ip) ++;
                  *tmp___48 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  imb___3.val = (int )(- sizeof(void *) * 2UL);
                  tmp___49 = jit->ip;
                  (jit->ip) ++;
                  *tmp___49 = imb___3.b[0];
                  tmp___50 = jit->ip;
                  (jit->ip) ++;
                  *tmp___50 = imb___3.b[1];
                  tmp___51 = jit->ip;
                  (jit->ip) ++;
                  *tmp___51 = imb___3.b[2];
                  tmp___52 = jit->ip;
                  (jit->ip) ++;
                  *tmp___52 = imb___3.b[3];
                  break;
                }
              }
              break;
              if (- sizeof(void *) * 2UL == 0UL) {
                while (1) {
                  tmp___53 = jit->ip;
                  (jit->ip) ++;
                  *tmp___53 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
                  break;
                }
                break;
              }
              if ((int )(- sizeof(void *) * 2UL) >= -128) {
                if ((int )(- sizeof(void *) * 2UL) <= 127) {
                  while (1) {
                    tmp___54 = jit->ip;
                    (jit->ip) ++;
                    *tmp___54 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(- sizeof(void *) * 2UL & 255UL);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___4;
                }
              } else {
                _L___4: /* CIL Label */ 
                while (1) {
                  tmp___55 = jit->ip;
                  (jit->ip) ++;
                  *tmp___55 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  imb___4.val = (int )(- sizeof(void *) * 2UL);
                  tmp___56 = jit->ip;
                  (jit->ip) ++;
                  *tmp___56 = imb___4.b[0];
                  tmp___57 = jit->ip;
                  (jit->ip) ++;
                  *tmp___57 = imb___4.b[1];
                  tmp___58 = jit->ip;
                  (jit->ip) ++;
                  *tmp___58 = imb___4.b[2];
                  tmp___59 = jit->ip;
                  (jit->ip) ++;
                  *tmp___59 = imb___4.b[3];
                  break;
                }
              }
              break;
            }
            break;
          }
          break;
        }
      } else {
        goto _L___5;
      }
    } else {
      _L___5: /* CIL Label */ 
      while (1) {
        while (1) {
          if (tinf->scrapreg > 7) {
            tmp___60 = 4;
          } else {
            tmp___60 = 0;
          }
          if (op->r_arg[1] > 7L) {
            tmp___61 = 1;
          } else {
            tmp___61 = 0;
          }
          _amd64_rex_bits___2 = (unsigned char )((8 | tmp___60) | tmp___61);
          if ((int )_amd64_rex_bits___2 != 0) {
            tmp___62 = jit->ip;
            (jit->ip) ++;
            *tmp___62 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
          }
          break;
        }
        tmp___63 = jit->ip;
        (jit->ip) ++;
        *tmp___63 = (unsigned char )(((int )((unsigned char )alu_op) << 3) + 3);
        while (1) {
          while (1) {
            tmp___64 = jit->ip;
            (jit->ip) ++;
            *tmp___64 = (unsigned char )((long )((3 << 6) | ((tinf->scrapreg & 7) << 3)) | (op->r_arg[1] & 7L));
            break;
          }
          break;
        }
        break;
      }
    }
  } else {
    while (1) {
      while (1) {
        if (tinf->scrapreg > 7) {
          tmp___65 = 4;
        } else {
          tmp___65 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )(8 | tmp___65);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___66 = jit->ip;
          (jit->ip) ++;
          *tmp___66 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      while (1) {
        tmp___67 = jit->ip;
        (jit->ip) ++;
        *tmp___67 = (unsigned char )(((int )((unsigned char )alu_op) << 3) + 3);
        while (1) {
          if (0) {
            tmp___82 = GET_REG_POS(jit, (int )op->arg[1]);
            if (tmp___82 == 0) {
              while (1) {
                tmp___68 = jit->ip;
                (jit->ip) ++;
                *tmp___68 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___69 = jit->ip;
                (jit->ip) ++;
                *tmp___69 = (unsigned char )((4 << 3) | 4);
                break;
              }
            } else {
              tmp___80 = GET_REG_POS(jit, (int )op->arg[1]);
              if (tmp___80 >= -128) {
                tmp___81 = GET_REG_POS(jit, (int )op->arg[1]);
                if (tmp___81 <= 127) {
                  while (1) {
                    tmp___70 = jit->ip;
                    (jit->ip) ++;
                    *tmp___70 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___71 = jit->ip;
                    (jit->ip) ++;
                    *tmp___71 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    tmp___72 = GET_REG_POS(jit, (int )op->arg[1]);
                    *(jit->ip) = (unsigned char )(tmp___72 & 255);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___7;
                }
              } else {
                _L___7: /* CIL Label */ 
                while (1) {
                  tmp___73 = jit->ip;
                  (jit->ip) ++;
                  *tmp___73 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___74 = jit->ip;
                  (jit->ip) ++;
                  *tmp___74 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___75 = GET_REG_POS(jit, (int )op->arg[1]);
                  imb___5.val = tmp___75;
                  tmp___76 = jit->ip;
                  (jit->ip) ++;
                  *tmp___76 = imb___5.b[0];
                  tmp___77 = jit->ip;
                  (jit->ip) ++;
                  *tmp___77 = imb___5.b[1];
                  tmp___78 = jit->ip;
                  (jit->ip) ++;
                  *tmp___78 = imb___5.b[2];
                  tmp___79 = jit->ip;
                  (jit->ip) ++;
                  *tmp___79 = imb___5.b[3];
                  break;
                }
              }
            }
            break;
          }
          tmp___84 = GET_REG_POS(jit, (int )op->arg[1]);
          if (tmp___84 == 0) {

          }
          tmp___93 = GET_REG_POS(jit, (int )op->arg[1]);
          if (tmp___93 >= -128) {
            tmp___94 = GET_REG_POS(jit, (int )op->arg[1]);
            if (tmp___94 <= 127) {
              while (1) {
                tmp___85 = jit->ip;
                (jit->ip) ++;
                *tmp___85 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 5);
                break;
              }
              while (1) {
                tmp___86 = GET_REG_POS(jit, (int )op->arg[1]);
                *(jit->ip) = (unsigned char )(tmp___86 & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___8;
            }
          } else {
            _L___8: /* CIL Label */ 
            while (1) {
              tmp___87 = jit->ip;
              (jit->ip) ++;
              *tmp___87 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 5);
              break;
            }
            while (1) {
              tmp___88 = GET_REG_POS(jit, (int )op->arg[1]);
              imb___6.val = tmp___88;
              tmp___89 = jit->ip;
              (jit->ip) ++;
              *tmp___89 = imb___6.b[0];
              tmp___90 = jit->ip;
              (jit->ip) ++;
              *tmp___90 = imb___6.b[1];
              tmp___91 = jit->ip;
              (jit->ip) ++;
              *tmp___91 = imb___6.b[2];
              tmp___92 = jit->ip;
              (jit->ip) ++;
              *tmp___92 = imb___6.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  }
  if (op->arg[0]) {
    emit_transfer_loop(jit, (jit_op *)op->arg[0]);
  }
  return;
}
}
static void ob_assert_space(struct output_buf *ob , int len ) 
{ 
  void *tmp ;

  {
  if ((ob->size + (size_t )len) + 2UL > ob->capacity) {
    ob->capacity += (size_t )(len + 8192);
    tmp = realloc((void *)ob->buf, ob->capacity);
    ob->buf = (char *)tmp;
  }
  return;
}
}
void fib(int n ) 
{ 
  char _3_fib_$locals[40] ;
  union _3_fib_$node _3_fib_$stack[1][32] ;
  union _3_fib_$node *_3_fib_$sp[1] ;
  void **_3_fib_$pc[1] ;
  void *_3_fib_$array[1][93] ;
  char const   * __restrict  __cil_tmp16 ;
  int __cil_tmp17 ;
  int __cil_tmp18 ;
  static struct jit *p19 ;
  static void (*_4_fib___foo)(int n ) ;
  int localSize21 ;
  unsigned int KEY_381859915_480606717_3394974385_3318748585[4]  = {381859915U, 480606717U,
                                                                    3394974385U, 3318748585U};
  struct jit_op *block_34_BEGIN23 ;
  struct jit_op *block_34_END24 ;
  struct jit_op *block_46_BEGIN25 ;
  struct jit_op *block_46_END26 ;
  struct jit_op *block_53_BEGIN27 ;
  struct jit_op *block_53_END28 ;
  struct jit_op *block_21_BEGIN29 ;
  struct jit_op *block_21_END30 ;
  struct jit_op *block_11_BEGIN31 ;
  struct jit_op *block_11_END32 ;
  struct jit_op *block_57_BEGIN33 ;
  struct jit_op *block_57_END34 ;
  struct jit_op *block_55_BEGIN35 ;
  struct jit_op *block_55_END36 ;
  struct jit_op *block_24_BEGIN37 ;
  struct jit_op *block_24_END38 ;
  struct jit_op *block_44_BEGIN39 ;
  struct jit_op *block_44_END40 ;
  struct jit_op *block_26_BEGIN41 ;
  struct jit_op *block_26_END42 ;
  struct jit_op *block_38_BEGIN43 ;
  struct jit_op *block_38_END44 ;
  struct jit_op *block_49_BEGIN45 ;
  struct jit_op *block_49_END46 ;
  struct jit_op *block_20_BEGIN47 ;
  struct jit_op *block_20_END48 ;
  struct jit_op *block_43_BEGIN49 ;
  struct jit_op *block_43_END50 ;
  struct jit_op *block_33_BEGIN51 ;
  struct jit_op *block_33_END52 ;
  struct jit_op *block_27_BEGIN53 ;
  struct jit_op *block_27_END54 ;
  struct jit_op *block_30_BEGIN55 ;
  struct jit_op *block_30_END56 ;
  struct jit_op *block_47_BEGIN57 ;
  struct jit_op *block_47_END58 ;
  struct jit_op *block_54_BEGIN59 ;
  struct jit_op *block_54_END60 ;
  struct jit_op *block_10_BEGIN61 ;
  struct jit_op *block_10_END62 ;
  struct jit_op *block_45_BEGIN63 ;
  struct jit_op *block_45_END64 ;
  struct jit_op *block_31_BEGIN65 ;
  struct jit_op *block_31_END66 ;
  struct jit_op *block_58_BEGIN67 ;
  struct jit_op *block_58_END68 ;
  struct jit_op *block_14_BEGIN69 ;
  struct jit_op *block_14_END70 ;
  struct jit_op *block_35_BEGIN71 ;
  struct jit_op *block_35_END72 ;
  struct jit_op *block_12_BEGIN73 ;
  struct jit_op *block_12_END74 ;
  struct jit_op *block_28_BEGIN75 ;
  struct jit_op *block_28_END76 ;
  struct jit_op *block_32_BEGIN77 ;
  struct jit_op *block_32_END78 ;
  struct jit_op *block_4_BEGIN79 ;
  struct jit_op *block_4_END80 ;
  struct jit_op *block_56_BEGIN81 ;
  struct jit_op *block_56_END82 ;
  struct jit_op *block_22_BEGIN83 ;
  struct jit_op *block_22_END84 ;
  struct jit_op *block_23_BEGIN85 ;
  struct jit_op *block_23_END86 ;
  struct jit_op *block_52_BEGIN87 ;
  struct jit_op *block_52_END88 ;
  struct jit_label *self89 ;
  struct jit_op *op90 ;
  struct jit_label *label91 ;
  struct jit_op *op92 ;
  struct jit_op *op93 ;
  struct jit_label *label94 ;
  struct jit_op *op95 ;
  struct jit_label *label96 ;
  struct jit_op *op97 ;
  struct jit_op *op98 ;
  struct jit_op *op99 ;
  struct jit_label *label100 ;
  struct jit_op *op101 ;
  struct jit_label *label102 ;
  struct jit_op *op103 ;
  struct jit_op *op104 ;
  struct jit_label *label105 ;
  struct jit_op *op106 ;
  struct jit_op *op107 ;
  struct jit_label *label108 ;
  struct jit_op *op109 ;
  struct jit_label *label110 ;
  struct jit_op *op111 ;
  struct jit_op *op112 ;
  struct jit_label *label113 ;
  struct jit_op *op114 ;
  struct jit_op *op115 ;
  struct jit_label *label116 ;
  struct jit_op *op117 ;
  struct jit_op *op118 ;
  struct jit_label *label119 ;
  struct jit_label *label120 ;
  struct jit_op *op121 ;
  struct jit_op *op122 ;
  struct jit_label *label123 ;
  struct jit_op *op124 ;
  struct jit_op *op125 ;
  struct jit_label *label126 ;
  struct jit_op *op127 ;
  struct jit_op *op128 ;
  struct jit_op *op129 ;
  struct jit_op *op130 ;
  struct jit_op *op131 ;
  struct jit_op *op132 ;
  struct jit_op *op133 ;
  struct jit_op *op134 ;
  struct jit_op *op135 ;
  struct jit_op *op136 ;
  struct jit_op *op137 ;
  struct jit_op *op138 ;
  struct jit_op *op139 ;
  struct jit_op *op140 ;
  struct jit_op *op141 ;
  struct jit_op *op142 ;
  struct jit_op *op143 ;
  struct jit_op *op144 ;
  struct jit_op *op145 ;
  struct jit_op *op146 ;
  struct jit_op *op147 ;
  struct jit_op *op148 ;
  struct jit_op *op149 ;
  struct jit_op *op150 ;
  struct jit_op *op151 ;
  struct jit_op *op152 ;
  struct jit_op *op153 ;
  struct jit_op *op154 ;
  struct jit_op *op155 ;
  struct jit_op *op156 ;
  struct jit_op *op157 ;
  struct jit_op *op158 ;
  struct jit_op *op159 ;
  struct jit_op *op160 ;
  struct jit_op *op161 ;
  struct jit_op *op162 ;
  struct jit_op *op163 ;
  struct jit_op *op164 ;
  struct jit_op *op165 ;
  struct jit_op *op166 ;
  struct jit_op *op167 ;
  struct jit_op *op168 ;
  struct jit_op *op169 ;
  struct jit_op *op170 ;
  struct jit_op *op171 ;
  struct jit_op *op172 ;
  struct jit_op *op173 ;
  struct jit_op *op174 ;
  struct jit_op *op175 ;
  struct jit_op *op176 ;
  struct jit_op *op177 ;
  struct jit_op *op178 ;
  struct jit_op *op179 ;
  struct jit_op *op180 ;
  struct jit_op *op181 ;
  struct jit_op *op182 ;
  struct jit_op *op183 ;
  struct jit_op *op184 ;
  struct jit_op *op185 ;
  struct jit_op *op186 ;
  struct jit_label *label187 ;
  struct jit_op *op188 ;
  struct jit_label *label189 ;
  struct jit_op *op190 ;
  struct jit_label *label191 ;
  struct jit_label *label192 ;
  struct jit_op *op193 ;
  struct jit_label *label194 ;
  struct jit_op *op195 ;
  struct jit_label *label196 ;
  struct jit_op *op197 ;
  struct jit_label *label198 ;
  struct jit_op *op199 ;
  struct jit_label *label200 ;
  struct jit_op *op201 ;
  struct jit_label *label202 ;
  struct jit_op *op203 ;
  struct jit_label *label204 ;
  struct jit_op *op205 ;
  struct jit_op *op206 ;
  struct jit_label *label207 ;
  struct jit_op *op208 ;
  struct jit_label *label209 ;
  struct jit_op *op210 ;
  struct jit_op *op211 ;
  struct jit_label *label212 ;
  struct jit_op *op213 ;
  struct jit_label *label214 ;
  struct jit_op *op215 ;
  struct jit_label *label216 ;
  struct jit_op *op217 ;
  struct jit_op *op218 ;
  struct jit_label *label219 ;
  struct jit_op *op220 ;
  struct jit_op *op221 ;
  struct jit_label *label222 ;
  struct jit_label *label223 ;
  struct jit_label *label224 ;
  struct jit_op *op225 ;
  struct jit_label *label226 ;
  struct jit_op *op227 ;
  struct jit_label *label228 ;
  struct jit_op *op229 ;
  struct jit_label *label230 ;
  struct jit_op *op231 ;
  struct jit_op *op232 ;
  struct jit_label *label233 ;
  struct jit_op *op234 ;
  struct jit_label *label235 ;
  struct jit_op *op236 ;
  struct jit_label *label237 ;
  struct jit_op *op238 ;
  struct jit_op *op239 ;
  struct jit_label *label240 ;
  struct jit_label *label241 ;
  struct jit_op *op242 ;
  struct jit_label *label243 ;
  struct jit_op *op244 ;
  struct jit_op *op245 ;
  struct jit_label *label246 ;
  struct jit_op *op247 ;
  struct jit_label *label248 ;
  struct jit_op *op249 ;
  struct jit_label *label250 ;
  struct jit_op *op251 ;
  struct jit_label *label252 ;
  struct jit_label *label253 ;
  struct jit_label *label254 ;
  struct jit_op *op255 ;
  struct jit_label *label256 ;
  struct jit_op *op257 ;
  struct jit_label *label258 ;
  struct jit_op *op259 ;
  struct jit_label *label260 ;
  struct jit_op *op261 ;
  struct jit_label *label262 ;
  struct jit_op *op263 ;
  struct jit_op *op264 ;
  struct jit_label *label265 ;
  struct jit_op *op266 ;
  struct jit_op *op267 ;
  struct jit_label *label268 ;
  struct jit_op *op269 ;
  struct jit_op *op270 ;
  struct jit_label *label271 ;
  struct jit_op *op272 ;
  struct jit_label *label273 ;
  struct jit_op *op274 ;
  struct jit_op *op275 ;
  struct jit_label *label276 ;
  struct jit_label *label277 ;
  struct jit_op *op278 ;
  struct jit_label *label279 ;
  struct jit_op *op280 ;
  struct jit_op *op281 ;
  struct jit_label *label282 ;
  struct jit_op *op283 ;
  struct jit_op *op284 ;
  struct jit_label *label285 ;
  struct jit_op *op286 ;
  struct jit_label *label287 ;
  struct jit_op *op288 ;
  struct jit_op *op289 ;
  struct jit_label *label290 ;
  struct jit_op *op291 ;
  struct jit_label *label292 ;
  struct jit_label *label293 ;
  struct jit_label *label294 ;
  struct jit_label *label295 ;
  struct jit_op *op296 ;
  struct jit_label *label297 ;
  struct jit_label *label298 ;
  struct jit_label *label299 ;
  struct jit_op *op300 ;
  struct jit_label *label301 ;
  struct jit_op *op302 ;
  struct jit_label *label303 ;
  struct jit_op *op304 ;
  struct jit_label *label305 ;
  struct jit_label *label306 ;
  struct jit_op *op307 ;
  struct jit_label *label308 ;
  struct jit_label *label309 ;
  struct jit_op *op310 ;
  struct jit_label *label311 ;
  struct jit_op *op312 ;
  struct jit_label *label313 ;
  struct jit_label *label314 ;
  struct jit_label *label315 ;
  struct jit_label *label316 ;
  struct jit_label *label317 ;
  struct jit_label *label318 ;
  struct jit_label *label319 ;
  struct jit_op *op320 ;
  struct jit_label *label321 ;
  struct jit_op *op322 ;
  struct jit_label *label323 ;
  struct jit_label *label324 ;
  struct jit_label *label325 ;
  struct jit_label *label326 ;
  struct jit_label *label327 ;
  struct jit_label *label328 ;
  struct jit_op *op329 ;
  struct jit_label *label330 ;
  struct jit_op *op331 ;
  struct jit_label *label332 ;
  struct jit_label *label333 ;
  struct jit_label *label334 ;
  struct jit_op *op335 ;
  struct jit_label *label336 ;
  struct jit_label *label337 ;
  struct jit_op *op338 ;
  struct jit_label *label339 ;
  struct jit_label *label340 ;
  struct jit_op *op341 ;
  struct jit_label *label342 ;
  struct jit_op *op343 ;
  struct jit_label *label344 ;
  struct jit_op *op345 ;
  struct jit_label *label346 ;
  struct jit_label *label347 ;
  struct jit_label *label348 ;
  struct jit_label *label349 ;
  struct jit_label *label350 ;
  struct jit_label *label351 ;
  struct jit_label *label352 ;
  struct jit_label *label353 ;
  struct jit_label *label354 ;
  struct jit_label *label355 ;
  struct jit_label *label356 ;
  struct jit_op *op357 ;
  struct jit_label *label358 ;
  struct jit_label *label359 ;
  struct jit_label *label360 ;
  struct jit_label *label361 ;
  struct jit_op *op362 ;
  struct jit_label *label363 ;
  struct jit_label *label364 ;
  struct jit_label *label365 ;
  struct jit_op *op366 ;
  struct jit_label *label367 ;
  struct jit_op *op368 ;
  struct jit_label *label369 ;
  struct jit_label *label370 ;
  struct jit_label *label371 ;
  struct jit_label *label372 ;
  struct jit_label *label373 ;
  struct jit_label *label374 ;
  struct jit_label *label375 ;
  struct jit_label *label376 ;
  struct jit_label *label377 ;
  struct jit_label *label378 ;
  struct jit_label *label379 ;
  struct jit_label *label380 ;
  struct jit_label *label381 ;
  struct jit_label *label382 ;
  struct jit_label *label383 ;
  struct jit_label *label384 ;
  struct jit_label *label385 ;
  struct jit_label *label386 ;
  struct jit_label *label387 ;
  struct jit_label *label388 ;
  unsigned int _4_fib__block_4_389[12]  = {804870271U, 3512677393U, 3431633197U, 2157873776U,
                                           3592973810U, 754782824U, 3780247044U, 2475883557U,
                                           3803677342U, 2439838329U, 2487889843U,
                                           284495328U};
  unsigned int _4_fib__block_54_390[4]  = {3820167027U, 387440379U, 4243821739U, 2035790050U};
  unsigned int _4_fib__block_21_391[38]  = {231390649U, 3962908841U, 417736071U, 426881046U,
                                            2576075774U, 1885027858U, 3715283621U,
                                            1470514971U, 1380179644U, 1112587871U,
                                            1679762333U, 1944258951U, 122491557U,
                                            480645442U, 1104002421U, 1986381965U,
                                            1963070514U, 610147209U, 2592273771U,
                                            1152186604U, 2939786999U, 2303952006U,
                                            2660118289U, 2528702123U, 647484946U,
                                            1251167440U, 1401296030U, 4290780017U,
                                            3223061226U, 1722338410U, 573878938U,
                                            1590654314U, 1814920238U, 3908542273U,
                                            3686017843U, 247554816U, 4129344492U,
                                            1463858912U};
  unsigned int _4_fib__block_26_392[42]  = {231390649U, 3962908841U, 417736071U, 426881046U,
                                            2576075774U, 1885027858U, 3715283621U,
                                            1470514971U, 1380179644U, 1112587871U,
                                            1679762333U, 1944258951U, 1374833179U,
                                            1842273679U, 1448287432U, 3264954727U,
                                            1963070514U, 610147209U, 16684987U, 2180608793U,
                                            3975654172U, 816541397U, 3756091989U,
                                            1570043362U, 2621339439U, 1666300328U,
                                            2352654565U, 1689511041U, 843300193U,
                                            2413412624U, 2511995285U, 2468289089U,
                                            2444243464U, 2635306855U, 550733647U,
                                            14986530U, 2371743559U, 1727116869U, 3477865961U,
                                            1871994479U, 3517329838U, 2732001538U};
  unsigned int _4_fib__block_32_393[12]  = {3480517529U, 1931534237U, 3177246355U,
                                            1203166399U, 2397356444U, 1634147441U,
                                            1875501686U, 2984777828U, 861110429U,
                                            4110714024U, 2678698467U, 1458825590U};
  unsigned int _4_fib__block_27_394[38]  = {231390649U, 3962908841U, 417736071U, 426881046U,
                                            2576075774U, 1885027858U, 3715283621U,
                                            1470514971U, 1380179644U, 1112587871U,
                                            1679762333U, 1944258951U, 2912968650U,
                                            1547409736U, 1609829534U, 2692239212U,
                                            570096773U, 1087568670U, 1289999027U,
                                            1826515368U, 1742889768U, 4020550373U,
                                            2461377584U, 2333778548U, 2505674039U,
                                            824474240U, 4184802417U, 4005453084U,
                                            3223061226U, 1722338410U, 573878938U,
                                            1590654314U, 1814920238U, 3908542273U,
                                            3686017843U, 247554816U, 4129344492U,
                                            1463858912U};
  unsigned int _4_fib__block_34_395[52]  = {231390649U, 3962908841U, 417736071U, 426881046U,
                                            2576075774U, 1885027858U, 3715283621U,
                                            1470514971U, 1380179644U, 1112587871U,
                                            1679762333U, 1944258951U, 122491557U,
                                            480645442U, 1104002421U, 1986381965U,
                                            1963070514U, 610147209U, 1616013950U,
                                            3904758477U, 457427678U, 289810673U, 2414155929U,
                                            3361469065U, 143598099U, 3946457116U,
                                            1679552784U, 3978771263U, 1365520214U,
                                            506019616U, 2504497859U, 618701943U, 3799138260U,
                                            2569758902U, 3873185728U, 585492332U,
                                            1688753499U, 961085888U, 2435432477U,
                                            1032935630U, 804870271U, 3512677393U,
                                            1179946855U, 2810111764U, 2893641262U,
                                            3485020391U, 2079068024U, 3695982282U,
                                            861110429U, 4110714024U, 3011869162U,
                                            486192456U};
  unsigned int _4_fib__block_22_396[20]  = {231390649U, 3962908841U, 417736071U, 426881046U,
                                            2576075774U, 1885027858U, 3715283621U,
                                            1470514971U, 1380179644U, 1112587871U,
                                            2263812033U, 1065132960U, 3007387883U,
                                            2990586913U, 163714822U, 3328814450U,
                                            685140244U, 3377884804U, 1815001564U,
                                            256862823U};
  unsigned int _4_fib__block_28_397[20]  = {231390649U, 3962908841U, 417736071U, 426881046U,
                                            2576075774U, 1885027858U, 3715283621U,
                                            1470514971U, 1380179644U, 1112587871U,
                                            1679762333U, 1944258951U, 2912968650U,
                                            1547409736U, 1609829534U, 2692239212U,
                                            992412168U, 1825200804U, 2362643601U,
                                            1422955584U};
  unsigned int _4_fib__block_44_398[4]  = {3820167027U, 387440379U, 4243821739U, 2035790050U};
  unsigned int _4_fib__block_33_399[46]  = {231390649U, 3962908841U, 417736071U, 426881046U,
                                            2576075774U, 1885027858U, 3715283621U,
                                            1470514971U, 1380179644U, 1112587871U,
                                            1679762333U, 1944258951U, 1374833179U,
                                            1842273679U, 1448287432U, 3264954727U,
                                            1963070514U, 610147209U, 2322879145U,
                                            3586093555U, 3441056056U, 4087992070U,
                                            2689226520U, 609914611U, 804870271U, 3512677393U,
                                            1179946855U, 2810111764U, 3410004927U,
                                            3434257740U, 3980243906U, 2706389115U,
                                            861110429U, 4110714024U, 2655619243U,
                                            1296557050U, 4252607005U, 1702950533U,
                                            2796634097U, 2343521225U, 288908273U,
                                            1794430254U, 1201491235U, 3113672489U,
                                            600065898U, 3487464762U};
  unsigned int _4_fib__block_10_400[22]  = {804870271U, 3512677393U, 1179946855U,
                                            2810111764U, 3410004927U, 3434257740U,
                                            3980243906U, 2706389115U, 861110429U,
                                            4110714024U, 2655619243U, 1296557050U,
                                            4252607005U, 1702950533U, 2796634097U,
                                            2343521225U, 288908273U, 1794430254U,
                                            1201491235U, 3113672489U, 600065898U,
                                            3487464762U};
  unsigned int _4_fib__block_20_401[10]  = {231390649U, 3962908841U, 417736071U, 426881046U,
                                            2576075774U, 1885027858U, 3715283621U,
                                            1470514971U, 2639793116U, 3366279192U};
  unsigned int _4_fib__block_49_402[4]  = {3820167027U, 387440379U, 4243821739U, 2035790050U};
  unsigned int _4_fib__block_52_403[4]  = {3820167027U, 387440379U, 4243821739U, 2035790050U};
  unsigned int _4_fib__block_30_404[10]  = {231390649U, 3962908841U, 1053783978U,
                                            2710334778U, 618684958U, 591873840U, 1871449115U,
                                            2587083494U, 2249466693U, 1751345605U};
  unsigned int _4_fib__block_14_405[38]  = {2491209372U, 855757530U, 3309790629U,
                                            2071416097U, 1953813340U, 2473031936U,
                                            2484264392U, 2025076457U, 121892170U,
                                            1411801069U, 2929160632U, 3490094632U,
                                            2949223754U, 1296686768U, 2485274452U,
                                            2047314763U, 3800870586U, 4040406717U,
                                            2740081823U, 1220510543U, 2728443006U,
                                            329589438U, 810249728U, 3987095834U, 367506781U,
                                            80124152U, 971905121U, 2659576113U, 203916776U,
                                            403432080U, 4064589277U, 3731775848U,
                                            2414534084U, 552525214U, 1928321809U,
                                            785734327U, 1128386387U, 4126387838U};
  unsigned int _4_fib__block_56_406[4]  = {3820167027U, 387440379U, 4243821739U, 2035790050U};
  unsigned int _4_fib__block_31_407[10]  = {231390649U, 3962908841U, 417736071U, 426881046U,
                                            2576075774U, 1885027858U, 3715283621U,
                                            1470514971U, 2639793116U, 3366279192U};
  unsigned int _4_fib__block_12_408[26]  = {231390649U, 3962908841U, 417736071U, 426881046U,
                                            2576075774U, 1885027858U, 3715283621U,
                                            1470514971U, 1380179644U, 1112587871U,
                                            1679762333U, 1944258951U, 2912968650U,
                                            1547409736U, 1609829534U, 2692239212U,
                                            3929126647U, 2071707997U, 593022117U,
                                            327992380U, 2776360769U, 3884447815U,
                                            3926475191U, 3766410726U, 3898694331U,
                                            2060805794U};
  unsigned int _4_fib__block_45_409[4]  = {3820167027U, 387440379U, 4243821739U, 2035790050U};
  unsigned int _4_fib__block_23_410[46]  = {231390649U, 3962908841U, 417736071U, 426881046U,
                                            2576075774U, 1885027858U, 2613384588U,
                                            3935350454U, 1400218867U, 1862616632U,
                                            1679762333U, 1944258951U, 1374833179U,
                                            1842273679U, 1448287432U, 3264954727U,
                                            1963070514U, 610147209U, 3756625135U,
                                            24358858U, 1647177061U, 2538477016U, 887636229U,
                                            773328953U, 3334304251U, 1035377409U,
                                            2424059676U, 2684802561U, 978608946U,
                                            1475464407U, 2796634097U, 2343521225U,
                                            288908273U, 1794430254U, 1233432026U,
                                            1399508252U, 482672454U, 1689340223U,
                                            1222037332U, 4122235026U, 2027657498U,
                                            1571775657U, 3686017843U, 247554816U,
                                            977079727U, 3243781979U};
  unsigned int _4_fib__block_24_411[10]  = {231390649U, 3962908841U, 417736071U, 426881046U,
                                            2576075774U, 1885027858U, 2613384588U,
                                            3935350454U, 3658550967U, 3452101939U};
  unsigned int _4_fib__block_57_412[4]  = {3820167027U, 387440379U, 4243821739U, 2035790050U};
  unsigned int _4_fib__block_11_413[26]  = {231390649U, 3962908841U, 417736071U, 426881046U,
                                            2576075774U, 1885027858U, 2613384588U,
                                            3935350454U, 1400218867U, 1862616632U,
                                            1679762333U, 1944258951U, 2912968650U,
                                            1547409736U, 1609829534U, 2692239212U,
                                            208344825U, 1994748008U, 3583160289U,
                                            849060296U, 1436430593U, 2304148326U,
                                            903408897U, 1438202494U, 1230451364U,
                                            1900057441U};
  unsigned int _4_fib__block_55_414[4]  = {3820167027U, 387440379U, 4243821739U, 2035790050U};
  unsigned int _4_fib__block_38_415[4]  = {3820167027U, 387440379U, 4243821739U, 2035790050U};
  unsigned int _4_fib__block_58_416[4]  = {3820167027U, 387440379U, 4243821739U, 2035790050U};
  unsigned int _4_fib__block_53_417[4]  = {3820167027U, 387440379U, 4243821739U, 2035790050U};
  unsigned int _4_fib__block_47_418[4]  = {3820167027U, 387440379U, 4243821739U, 2035790050U};
  unsigned int _4_fib__block_46_419[4]  = {3820167027U, 387440379U, 4243821739U, 2035790050U};
  unsigned int _4_fib__block_35_420[48]  = {231390649U, 3962908841U, 417736071U, 426881046U,
                                            2576075774U, 1885027858U, 2613384588U,
                                            3935350454U, 1400218867U, 1862616632U,
                                            1679762333U, 1944258951U, 122491557U,
                                            480645442U, 1104002421U, 1986381965U,
                                            1963070514U, 610147209U, 1159499274U,
                                            2779578458U, 1820170967U, 2604154322U,
                                            659737473U, 2026106893U, 2985575430U,
                                            3535901388U, 3558807142U, 3488477620U,
                                            1215167326U, 1438025752U, 851875231U,
                                            482788759U, 1544619550U, 3810225573U,
                                            3523740335U, 1784763551U, 3772035605U,
                                            2460747309U, 3223061226U, 1722338410U,
                                            4145937588U, 1955260655U, 1814920238U,
                                            3908542273U, 3686017843U, 247554816U,
                                            977079727U, 3243781979U};
  unsigned int _4_fib__block_43_421[4]  = {3820167027U, 387440379U, 4243821739U, 2035790050U};
  struct jit_label *self422 ;
  struct jit_op *op423 ;
  struct jit_label *label424 ;
  struct jit_op *op425 ;
  struct jit_op *op426 ;
  struct jit_label *label427 ;
  struct jit_op *op428 ;
  struct jit_op *op429 ;
  struct jit_op *op430 ;
  struct jit_label *label431 ;
  struct jit_op *op432 ;
  struct jit_label *label433 ;
  struct jit_op *op434 ;
  struct jit_op *op435 ;
  struct jit_label *label436 ;
  struct jit_op *op437 ;
  struct jit_op *op438 ;
  struct jit_label *label439 ;
  struct jit_op *op440 ;
  struct jit_op *op441 ;
  struct jit_label *label442 ;
  struct jit_op *op443 ;
  struct jit_op *op444 ;
  struct jit_label *label445 ;
  struct jit_op *op446 ;
  struct jit_op *op447 ;
  struct jit_label *label448 ;
  struct jit_label *label449 ;
  struct jit_op *op450 ;
  struct jit_op *op451 ;
  struct jit_label *label452 ;
  struct jit_op *op453 ;
  struct jit_op *op454 ;
  struct jit_label *label455 ;
  struct jit_op *op456 ;
  struct jit_op *op457 ;
  struct jit_op *op458 ;
  struct jit_op *op459 ;
  struct jit_op *op460 ;
  struct jit_op *op461 ;
  struct jit_op *op462 ;
  struct jit_op *op463 ;
  struct jit_op *op464 ;
  struct jit_op *op465 ;
  struct jit_op *op466 ;
  struct jit_op *op467 ;
  struct jit_op *op468 ;
  struct jit_op *op469 ;
  struct jit_op *op470 ;
  struct jit_op *op471 ;
  struct jit_op *op472 ;
  struct jit_op *op473 ;
  struct jit_op *op474 ;
  struct jit_op *op475 ;
  struct jit_op *op476 ;
  struct jit_op *op477 ;
  struct jit_op *op478 ;
  struct jit_op *op479 ;
  struct jit_op *op480 ;
  struct jit_op *op481 ;
  struct jit_op *op482 ;
  struct jit_op *op483 ;
  struct jit_op *op484 ;
  struct jit_op *op485 ;
  struct jit_op *op486 ;
  struct jit_op *op487 ;
  struct jit_op *op488 ;
  struct jit_op *op489 ;
  struct jit_op *op490 ;
  struct jit_op *op491 ;
  struct jit_op *op492 ;
  struct jit_op *op493 ;
  struct jit_op *op494 ;
  struct jit_op *op495 ;
  struct jit_op *op496 ;
  struct jit_op *op497 ;
  struct jit_op *op498 ;
  struct jit_op *op499 ;
  struct jit_op *op500 ;
  struct jit_op *op501 ;
  struct jit_op *op502 ;
  struct jit_op *op503 ;
  struct jit_op *op504 ;
  struct jit_op *op505 ;
  struct jit_op *op506 ;
  struct jit_op *op507 ;
  struct jit_op *op508 ;
  struct jit_op *op509 ;
  struct jit_op *op510 ;
  struct jit_op *op511 ;
  struct jit_op *op512 ;
  struct jit_op *op513 ;
  struct jit_op *op514 ;
  struct jit_op *op515 ;
  struct jit_label *label516 ;
  struct jit_op *op517 ;
  struct jit_label *label518 ;
  struct jit_op *op519 ;
  struct jit_label *label520 ;
  struct jit_label *label521 ;
  struct jit_op *op522 ;
  struct jit_label *label523 ;
  struct jit_op *op524 ;
  struct jit_label *label525 ;
  struct jit_op *op526 ;
  struct jit_label *label527 ;
  struct jit_op *op528 ;
  struct jit_label *label529 ;
  struct jit_op *op530 ;
  struct jit_label *label531 ;
  struct jit_op *op532 ;
  struct jit_op *op533 ;
  struct jit_label *label534 ;
  struct jit_op *op535 ;
  struct jit_label *label536 ;
  struct jit_op *op537 ;
  struct jit_op *op538 ;
  struct jit_label *label539 ;
  struct jit_op *op540 ;
  struct jit_label *label541 ;
  struct jit_op *op542 ;
  struct jit_label *label543 ;
  struct jit_op *op544 ;
  struct jit_op *op545 ;
  struct jit_label *label546 ;
  struct jit_op *op547 ;
  struct jit_op *op548 ;
  struct jit_label *label549 ;
  struct jit_label *label550 ;
  struct jit_label *label551 ;
  struct jit_op *op552 ;
  struct jit_label *label553 ;
  struct jit_op *op554 ;
  struct jit_label *label555 ;
  struct jit_op *op556 ;
  struct jit_label *label557 ;
  struct jit_op *op558 ;
  struct jit_op *op559 ;
  struct jit_label *label560 ;
  struct jit_op *op561 ;
  struct jit_label *label562 ;
  struct jit_op *op563 ;
  struct jit_label *label564 ;
  struct jit_op *op565 ;
  struct jit_op *op566 ;
  struct jit_label *label567 ;
  struct jit_label *label568 ;
  struct jit_op *op569 ;
  struct jit_label *label570 ;
  struct jit_op *op571 ;
  struct jit_op *op572 ;
  struct jit_label *label573 ;
  struct jit_op *op574 ;
  struct jit_label *label575 ;
  struct jit_op *op576 ;
  struct jit_label *label577 ;
  struct jit_op *op578 ;
  struct jit_label *label579 ;
  struct jit_label *label580 ;
  struct jit_op *op581 ;
  struct jit_label *label582 ;
  struct jit_op *op583 ;
  struct jit_label *label584 ;
  struct jit_op *op585 ;
  struct jit_label *label586 ;
  struct jit_op *op587 ;
  struct jit_label *label588 ;
  struct jit_op *op589 ;
  struct jit_op *op590 ;
  struct jit_label *label591 ;
  struct jit_op *op592 ;
  struct jit_op *op593 ;
  struct jit_label *label594 ;
  struct jit_op *op595 ;
  struct jit_op *op596 ;
  struct jit_label *label597 ;
  struct jit_op *op598 ;
  struct jit_label *label599 ;
  struct jit_op *op600 ;
  struct jit_op *op601 ;
  struct jit_label *label602 ;
  struct jit_label *label603 ;
  struct jit_op *op604 ;
  struct jit_op *op605 ;
  struct jit_label *label606 ;
  struct jit_op *op607 ;
  struct jit_op *op608 ;
  struct jit_label *label609 ;
  struct jit_op *op610 ;
  struct jit_label *label611 ;
  struct jit_op *op612 ;
  struct jit_op *op613 ;
  struct jit_label *label614 ;
  struct jit_op *op615 ;
  struct jit_label *label616 ;
  struct jit_label *label617 ;
  struct jit_label *label618 ;
  struct jit_label *label619 ;
  struct jit_op *op620 ;
  struct jit_label *label621 ;
  struct jit_label *label622 ;
  struct jit_label *label623 ;
  struct jit_label *label624 ;
  struct jit_label *label625 ;
  struct jit_op *op626 ;
  struct jit_label *label627 ;
  struct jit_label *label628 ;
  struct jit_op *op629 ;
  struct jit_label *label630 ;
  struct jit_label *label631 ;
  struct jit_op *op632 ;
  struct jit_label *label633 ;
  struct jit_label *label634 ;
  struct jit_label *label635 ;
  struct jit_label *label636 ;
  struct jit_label *label637 ;
  struct jit_label *label638 ;
  struct jit_label *label639 ;
  struct jit_label *label640 ;
  struct jit_op *op641 ;
  struct jit_label *label642 ;
  struct jit_op *op643 ;
  struct jit_label *label644 ;
  struct jit_label *label645 ;
  struct jit_label *label646 ;
  struct jit_label *label647 ;
  struct jit_label *label648 ;
  struct jit_label *label649 ;
  struct jit_op *op650 ;
  struct jit_label *label651 ;
  struct jit_op *op652 ;
  struct jit_label *label653 ;
  struct jit_label *label654 ;
  struct jit_label *label655 ;
  struct jit_op *op656 ;
  struct jit_label *label657 ;
  struct jit_label *label658 ;
  struct jit_op *op659 ;
  struct jit_label *label660 ;
  struct jit_label *label661 ;
  struct jit_op *op662 ;
  struct jit_label *label663 ;
  struct jit_op *op664 ;
  struct jit_label *label665 ;
  struct jit_label *label666 ;
  struct jit_label *label667 ;
  struct jit_label *label668 ;
  struct jit_label *label669 ;
  struct jit_label *label670 ;
  struct jit_label *label671 ;
  struct jit_label *label672 ;
  struct jit_label *label673 ;
  struct jit_op *op674 ;
  struct jit_label *label675 ;
  struct jit_label *label676 ;
  struct jit_label *label677 ;
  struct jit_label *label678 ;
  struct jit_op *op679 ;
  struct jit_label *label680 ;
  struct jit_label *label681 ;
  struct jit_label *label682 ;
  struct jit_op *op683 ;
  struct jit_label *label684 ;
  struct jit_label *label685 ;
  struct jit_label *label686 ;
  struct jit_label *label687 ;
  struct jit_label *label688 ;
  struct jit_label *label689 ;
  struct jit_label *label690 ;
  struct jit_label *label691 ;
  struct jit_label *label692 ;
  struct jit_label *label693 ;
  struct jit_label *label694 ;
  struct jit_label *label695 ;
  struct jit_label *label696 ;
  struct jit_label *label697 ;
  struct jit_label *label698 ;
  struct jit_label *label699 ;
  int measure_iter700 ;
  unsigned int low701 ;
  unsigned int high702 ;
  unsigned int low703 ;
  unsigned int high704 ;
  struct timeval __cil_tmp705 ;
  int __cil_tmp706 ;
  struct timeval __cil_tmp707 ;
  int __cil_tmp708 ;
  struct timeval res709 ;
  struct timeval t0710 ;
  struct timeval t1711 ;
  struct timeval t0712 ;

  {
  __cil_tmp706 = gettimeofday(& __cil_tmp705, 0);
  __asm__  volatile   ("cpuid\n"
                       "rdtsc\n": "=a" (low701), "=d" (high702));
  measure_iter700 = 0;
  while (measure_iter700 < 100) {
    if (_4_fib___freq % 1 == 0) {
      if (p19 != 0) {
        jit_free(p19);
        p19 = 0;
      } else {

      }
      p19 = jit_init();
      jit_enable_optimization(p19, 1L);
      jit_enable_optimization(p19, 2L);
      jit_enable_optimization(p19, 4L);
      jit_enable_optimization(p19, 8L);
      self422 = jit_get_label(p19);
      jit_add_prolog(p19, & _4_fib___foo, 0);
      localSize21 = jit_allocai(p19, 1116L);
      jit_add_op(p19, JIT_DECL_ARG, ((0 << 4) | (2 << 2)) | 2, 0, 4, 0L, 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 1016),
                 0L, 0);
      jit_add_op(p19, JIT_GETARG, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), 0L, 4, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 1104),
                 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (jit_value )(& _4_fib___stringStore), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 1096),
                 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((6 & 268435455) << 4)),
                 (jit_value )(& printf), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((6 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((7 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 1080),
                 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((8 & 268435455) << 4)),
                 (jit_value )(& _3_fib_$strings), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((7 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((8 & 268435455) << 4)), 0L, 8, 0);
      op423 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label424 = jit_get_label(p19);
      op425 = jit_add_op(p19, JIT_BGT | (2 | 0), ((2 << 4) | (1 << 2)) | 2, 0, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         1L, 0L, 0);
      op426 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label427 = jit_get_label(p19);
      op428 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 46L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op429 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 43L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op430 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label431 = jit_get_label(p19);
      jit_data_bytes(p19, 48L, (unsigned char *)(_4_fib__block_4_389));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op432 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label433 = jit_get_label(p19);
      op434 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 20L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op435 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label436 = jit_get_label(p19);
      op437 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 20L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op438 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label439 = jit_get_label(p19);
      op440 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 31L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op441 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label442 = jit_get_label(p19);
      op443 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 23L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 184L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op444 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label445 = jit_get_label(p19);
      op446 = jit_add_op(p19, JIT_BGT | (2 | 0), ((2 << 4) | (1 << 2)) | 2, 0, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0L, 0L, 0);
      op447 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label448 = jit_get_label(p19);
      jit_data_bytes(p19, 16L, (unsigned char *)(_4_fib__block_54_390));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      label449 = jit_get_label(p19);
      op450 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 14L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 152L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op451 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label452 = jit_get_label(p19);
      op453 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 23L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 184L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op454 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label455 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op430,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 736L, 0L, 0);
      op456 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 728L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 1L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 720L, 0L, 0);
      op457 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 712L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 1L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 704L, 0L, 0);
      op458 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 696L, 0L, 0);
      op459 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 688L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 36L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 680L, 0L, 0);
      op460 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 672L, 0L, 0);
      op461 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 664L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 12L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 656L, 0L, 0);
      op462 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 648L, 0L, 0);
      op463 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 640L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 32L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 632L, 0L, 0);
      op464 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 624L, 0L, 0);
      op465 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 616L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 608L, 0L, 0);
      op466 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 600L, 0L, 0);
      op467 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 592L, 0L, 0);
      op468 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 584L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 576L, 0L, 0);
      op469 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 568L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 24L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 560L, 0L, 0);
      op470 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 552L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 4294967249L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 544L, 0L, 0);
      op471 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 536L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 4294967251L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 528L, 0L, 0);
      op472 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 520L, 0L, 0);
      op473 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 512L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 16L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 504L, 0L, 0);
      op474 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 496L, 0L, 0);
      op475 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 488L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 1L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 480L, 0L, 0);
      op476 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 472L, 0L, 0);
      op477 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 464L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 16L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 456L, 0L, 0);
      op478 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 448L, 0L, 0);
      op479 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 440L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 8L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 432L, 0L, 0);
      op480 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 424L, 0L, 0);
      op481 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 416L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 12L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 408L, 0L, 0);
      op482 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 400L, 0L, 0);
      op483 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 392L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 4L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 384L, 0L, 0);
      op484 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 376L, 0L, 0);
      op485 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 368L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 8L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 360L, 0L, 0);
      op486 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 352L, 0L, 0);
      op487 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 344L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 12L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 336L, 0L, 0);
      op488 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 328L, 0L, 0);
      op489 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 320L, 0L, 0);
      op490 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 312L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 8L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 304L, 0L, 0);
      op491 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 296L, 0L, 0);
      op492 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 288L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 4L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 280L, 0L, 0);
      op493 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 272L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 36L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 264L, 0L, 0);
      op494 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 256L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 1L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 248L, 0L, 0);
      op495 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 240L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 5L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 232L, 0L, 0);
      op496 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 224L, 0L, 0);
      op497 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 216L, 0L, 0);
      op498 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 208L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 200L, 0L, 0);
      op499 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 192L, 0L, 0);
      op500 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 184L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 16L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 176L, 0L, 0);
      op501 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 168L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 1L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 160L, 0L, 0);
      op502 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 152L, 0L, 0);
      op503 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 144L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 16L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 136L, 0L, 0);
      op504 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 128L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 1L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 120L, 0L, 0);
      op505 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 112L, 0L, 0);
      op506 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 104L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 12L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 96L, 0L, 0);
      op507 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 88L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 1L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 80L, 0L, 0);
      op508 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 72L, 0L, 0);
      op509 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 64L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 8L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 56L, 0L, 0);
      op510 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 48L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 1L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 40L, 0L, 0);
      op511 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 32L, 0L, 0);
      op512 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 24L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 4L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 16L, 0L, 0);
      op513 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 8L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      op514 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 744),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 752),
                 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 1008),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 0),
                 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), 0L, 8, 0);
      op515 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label516 = jit_get_label(p19);
      op517 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label518 = jit_get_label(p19);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 1008),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 1008),
                 0L, 0);
      jit_add_op(p19, JIT_LD | (1 | 4), ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 1L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_MUL | (2 | 4), ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((6 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)), 8L, 0L, 0);
      jit_add_op(p19, JIT_ADD | 1, ((1 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((7 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), (0 & 1) | (((0 & 3) << 1) | ((6 & 268435455) << 4)),
                 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((7 & 268435455) << 4)), 0L, 8, 0);
      op519 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label520 = jit_get_label(p19);
      jit_add_op(p19, JIT_DATA_REF_CODE | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label516,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label521 = jit_get_label(p19);
      jit_data_bytes(p19, 152L, (unsigned char *)(_4_fib__block_21_391));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op522 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label523 = jit_get_label(p19);
      op524 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 28L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 80L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label439,
                 0L, 0L, 0L, 0);
      label525 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op467,
                 0L, 0L, 0L, 0);
      op526 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label527 = jit_get_label(p19);
      op528 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 58L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label427,
                 0L, 0L, 0L, 0);
      label529 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op522,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label521, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 21L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 152L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op530 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label531 = jit_get_label(p19);
      op532 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 49L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op533 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label534 = jit_get_label(p19);
      jit_data_bytes(p19, 168L, (unsigned char *)(_4_fib__block_26_392));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op535 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label536 = jit_get_label(p19);
      op537 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 43L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op538 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label539 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op432,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label431, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 48L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op540 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label541 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op502,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op495,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op494,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op472,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op471,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op457,
                 0L, 0L, 0L, 0);
      op542 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label543 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op538,
                 0L, 0L, 0L, 0);
      op544 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 14L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 152L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op545 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label546 = jit_get_label(p19);
      op547 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 52L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op548 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label549 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op426,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_DATA, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (jit_value )label520, 0L, 0L, 0);
      jit_add_op(p19, JIT_SUB | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 1L, 0L, 0);
      jit_add_op(p19, JIT_MUL | (2 | 0), ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 8L, 0L, 0);
      jit_add_op(p19, JIT_LDX | (1 | 4), ((1 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 8, 0);
      jit_add_op(p19, JIT_JMP | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)),
                 0, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label550 = jit_get_label(p19);
      jit_data_bytes(p19, 48L, (unsigned char *)(_4_fib__block_32_393));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label523,
                 0L, 0L, 0L, 0);
      label551 = jit_get_label(p19);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 1008),
                 0L, 0);
      jit_add_op(p19, JIT_LD | (1 | 4), ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_LD | (1 | 0), ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), 0L, 4, 0);
      op552 = jit_add_op(p19, JIT_BLT | (2 | 0), ((2 << 4) | (1 << 2)) | 2, 0, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         1L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label424,
                 0L, 0L, 0L, 0);
      label553 = jit_get_label(p19);
      op554 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 10L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 88L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label433,
                 0L, 0L, 0L, 0);
      label555 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op512,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op509,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op506,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op503,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op487,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op483,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op479,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op473,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op463,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op459,
                 0L, 0L, 0L, 0);
      op556 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label557 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op438,
                 0L, 0L, 0L, 0);
      op558 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 52L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op559 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label560 = jit_get_label(p19);
      op561 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 56L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label553,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label562 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op556,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 152L, (unsigned char *)(_4_fib__block_27_394));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op563 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label564 = jit_get_label(p19);
      op565 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 11L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 104L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op566 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label567 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op526,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label521, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 21L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 152L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label521,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label568 = jit_get_label(p19);
      jit_data_bytes(p19, 208L, (unsigned char *)(_4_fib__block_34_395));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op569 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label570 = jit_get_label(p19);
      op571 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 35L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 192L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op572 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label573 = jit_get_label(p19);
      jit_data_bytes(p19, 80L, (unsigned char *)(_4_fib__block_22_396));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op574 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label575 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op524,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 80L, (unsigned char *)(_4_fib__block_28_397));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op576 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label577 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op469,
                 0L, 0L, 0L, 0);
      op578 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label579 = jit_get_label(p19);
      jit_data_bytes(p19, 16L, (unsigned char *)(_4_fib__block_44_398));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      label580 = jit_get_label(p19);
      op581 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 31L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label575,
                 0L, 0L, 0L, 0);
      label582 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op500,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op498,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op492,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op490,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op485,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op481,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op477,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op465,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op461,
                 0L, 0L, 0L, 0);
      op583 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label584 = jit_get_label(p19);
      jit_data_bytes(p19, 184L, (unsigned char *)(_4_fib__block_33_399));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op585 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label586 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op496,
                 0L, 0L, 0L, 0);
      op587 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label588 = jit_get_label(p19);
      op589 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 24L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op590 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label591 = jit_get_label(p19);
      op592 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 45L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op593 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label594 = jit_get_label(p19);
      op595 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 24L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op596 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label597 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op554,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op540,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op446,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 88L, (unsigned char *)(_4_fib__block_10_400));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op598 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label599 = jit_get_label(p19);
      op600 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 56L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op601 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label602 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op519,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 1008),
                 0L, 0);
      jit_add_op(p19, JIT_LD | (1 | 4), ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_LD | (1 | 0), ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), 0L, 4, 0);
      jit_add_op(p19, JIT_BLT | (2 | 0), ((2 << 4) | (1 << 2)) | 2, (jit_value )label597,
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label445,
                 0L, 0L, 0L, 0);
      label603 = jit_get_label(p19);
      op604 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 57L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op605 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label606 = jit_get_label(p19);
      op607 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 35L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 192L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op608 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label609 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op552,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op437,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op434,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op425,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 40L, (unsigned char *)(_4_fib__block_20_401));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op610 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label611 = jit_get_label(p19);
      op612 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 12L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 104L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op613 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label614 = jit_get_label(p19);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label562, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 27L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 152L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op615 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label616 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op587,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label575, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 28L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 80L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label580,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label617 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op532,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 16L, (unsigned char *)(_4_fib__block_49_402));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label618 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op558,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op547,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op530,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 16L, (unsigned char *)(_4_fib__block_52_403));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label619 = jit_get_label(p19);
      jit_data_bytes(p19, 40L, (unsigned char *)(_4_fib__block_30_404));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op620 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label621 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op497,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label568,
                 0L, 0L, 0L, 0);
      label622 = jit_get_label(p19);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label584, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 33L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 184L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label584,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label623 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op544,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op517,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op450,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 152L, (unsigned char *)(_4_fib__block_14_405));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label609,
                 0L, 0L, 0L, 0);
      label624 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op620,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label619, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 30L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label550,
                 0L, 0L, 0L, 0);
      label625 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op423,
                 0L, 0L, 0L, 0);
      op626 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 53L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label599,
                 0L, 0L, 0L, 0);
      label627 = jit_get_label(p19);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label550, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 48L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label591,
                 0L, 0L, 0L, 0);
      label628 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op435,
                 0L, 0L, 0L, 0);
      op629 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 57L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label611,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label630 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op600,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op566,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op561,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 16L, (unsigned char *)(_4_fib__block_56_406));
      label631 = jit_get_label(p19);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label568, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 34L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 208L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op632 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label633 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op581,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op440,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 40L, (unsigned char *)(_4_fib__block_31_407));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label550,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label634 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op612,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 104L, (unsigned char *)(_4_fib__block_12_408));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label579,
                 0L, 0L, 0L, 0);
      label635 = jit_get_label(p19);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label617, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 49L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label536,
                 0L, 0L, 0L, 0);
      label636 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op513,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op510,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op507,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op504,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op501,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op493,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op491,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op488,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op486,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op484,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op482,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op480,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op478,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op474,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op470,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op464,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op462,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op460,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label622,
                 0L, 0L, 0L, 0);
      label637 = jit_get_label(p19);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label534, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 26L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 168L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label534,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label638 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op592,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op569,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 16L, (unsigned char *)(_4_fib__block_45_409));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      label639 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op615,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label568, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 34L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 208L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label436,
                 0L, 0L, 0L, 0);
      label640 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op601,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label638, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 45L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op641 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label642 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op632,
                 0L, 0L, 0L, 0);
      op643 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 46L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label588,
                 0L, 0L, 0L, 0);
      label644 = jit_get_label(p19);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label634, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 12L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 104L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label531,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label645 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op578,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op453,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op443,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 184L, (unsigned char *)(_4_fib__block_23_410));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label617,
                 0L, 0L, 0L, 0);
      label646 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op514,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op511,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op508,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op505,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op476,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label637,
                 0L, 0L, 0L, 0);
      label647 = jit_get_label(p19);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label431, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 48L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label431,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label648 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op595,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op589,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op545,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 40L, (unsigned char *)(_4_fib__block_24_411));
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label631,
                 0L, 0L, 0L, 0);
      label649 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op605,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label579, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 44L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op650 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label651 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op548,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label562, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 27L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 152L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op652 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label653 = jit_get_label(p19);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label647,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label654 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op629,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op604,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op572,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 16L, (unsigned char *)(_4_fib__block_57_412));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      label655 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op559,
                 0L, 0L, 0L, 0);
      op656 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 38L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label452,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label657 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op565,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 104L, (unsigned char *)(_4_fib__block_11_413));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label564,
                 0L, 0L, 0L, 0);
      label658 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op447,
                 0L, 0L, 0L, 0);
      op659 = jit_add_op(p19, JIT_REF_DATA, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_SUB | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_MUL | (2 | 0), ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 8L, 0L, 0);
      jit_add_op(p19, JIT_LDX | (1 | 4), ((1 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 8, 0);
      jit_add_op(p19, JIT_JMP | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)),
                 0, 0L, 0L, 0);
      label660 = jit_get_label(p19);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 1008),
                 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 1008),
                 0L, 0);
      jit_add_op(p19, JIT_LD | (1 | 4), ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 1L, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_MUL | (2 | 4), ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((6 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)), 8L, 0L, 0);
      jit_add_op(p19, JIT_ADD | 1, ((1 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((7 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), (0 & 1) | (((0 & 3) << 1) | ((6 & 268435455) << 4)),
                 0L, 0);
      jit_add_op(p19, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((7 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label551,
                 0L, 0L, 0L, 0);
      label661 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op585,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label584, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 33L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 184L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op662 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label663 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op454,
                 0L, 0L, 0L, 0);
      op664 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 55L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label449,
                 0L, 0L, 0L, 0);
      label665 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op456,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label594,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label666 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op664,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op598,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 16L, (unsigned char *)(_4_fib__block_55_414));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      label667 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op451,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label550, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 48L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label644,
                 0L, 0L, 0L, 0);
      label668 = jit_get_label(p19);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label619, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 30L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label619,
                 0L, 0L, 0L, 0);
      label669 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op659,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_DATA_REF_CODE | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label653,
                 0L, 0L, 0L, 0);
      label670 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op650,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label597, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 10L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 88L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label614,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label671 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op656,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op441,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 16L, (unsigned char *)(_4_fib__block_38_415));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      label672 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op468,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label634,
                 0L, 0L, 0L, 0);
      label673 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op444,
                 0L, 0L, 0L, 0);
      op674 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 47L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label546,
                 0L, 0L, 0L, 0);
      label675 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op542,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label573, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 22L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 80L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label573,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label676 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op610,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op528,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 16L, (unsigned char *)(_4_fib__block_58_416));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      label677 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op489,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op475,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label606,
                 0L, 0L, 0L, 0);
      label678 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op641,
                 0L, 0L, 0L, 0);
      op679 = jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 47L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label603,
                 0L, 0L, 0L, 0);
      label680 = jit_get_label(p19);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label676, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 58L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label560,
                 0L, 0L, 0L, 0);
      label681 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op576,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((9 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize21 + 1112),
                 0L, 0);
      jit_add_op(p19, JIT_LD | (1 | 0), ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((10 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((9 & 268435455) << 4)), 0L, 4, 0);
      jit_add_op(p19, JIT_BNE | 2, ((2 << 4) | (1 << 2)) | 2, (jit_value )label668,
                 (0 & 1) | (((0 & 3) << 1) | ((10 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label633,
                 0L, 0L, 0L, 0);
      label682 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op574,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label573, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 22L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 80L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op683 = jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label684 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op662,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op626,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 16L, (unsigned char *)(_4_fib__block_53_417));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label685 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op679,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op674,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op515,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 16L, (unsigned char *)(_4_fib__block_47_418));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      label686 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op458,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label660,
                 0L, 0L, 0L, 0);
      label687 = jit_get_label(p19);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label666, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 55L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label627,
                 0L, 0L, 0L, 0);
      label688 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op535,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label534, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 26L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 168L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label448,
                 0L, 0L, 0L, 0);
      label689 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op613,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label671, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 38L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label687,
                 0L, 0L, 0L, 0);
      label690 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op533,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label448, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 54L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label527,
                 0L, 0L, 0L, 0);
      label691 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op652,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label579, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 44L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label680,
                 0L, 0L, 0L, 0);
      label692 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op596,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label448, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 54L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label635,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label693 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op683,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op643,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op428,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 16L, (unsigned char *)(_4_fib__block_46_419));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      label694 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op499,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op466,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label518,
                 0L, 0L, 0L, 0);
      label695 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op590,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label684, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 53L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label442,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label696 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op608,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op607,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op571,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 192L, (unsigned char *)(_4_fib__block_35_420));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label570,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label697 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op563,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op537,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op429,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p19, 16L, (unsigned char *)(_4_fib__block_43_421));
      jit_add_op(p19, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      label698 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op583,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label657, 0L, 0L, 0);
      jit_add_op(p19, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_381859915_480606717_3394974385_3318748585), 0L,
                 0L, 0);
      jit_add_op(p19, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 11L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 104L, 0L, 0L, 0L,
                 0);
      jit_add_op(p19, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label657,
                 0L, 0L, 0L, 0);
      label699 = jit_get_label(p19);
      jit_add_op(p19, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op593,
                 0L, 0L, 0L, 0);
      jit_add_op(p19, JIT_RET | 2, ((0 << 4) | (0 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_generate_code(p19);
      _4_fib___freq ++;
    } else {

    }
    (*_4_fib___foo)(n);

    measure_iter700 ++;
  }
  __asm__  volatile   ("cpuid\n"
                       "rdtsc\n": "=a" (low703), "=d" (high704));
  printf("MEASURE,fib,timingCounter,%f\n", (double )((((unsigned long )high704 << 32) | (unsigned long )low703) - (((unsigned long )high702 << 32) | (unsigned long )low701)));
  __cil_tmp708 = gettimeofday(& __cil_tmp707, 0);
  t0710 = __cil_tmp707;
  t1711 = __cil_tmp705;
  res709.tv_sec = t0710.tv_sec - t1711.tv_sec;
  res709.tv_usec = t0710.tv_usec - t1711.tv_usec;
  if (res709.tv_usec < 0) {
    (res709.tv_sec) --;
    res709.tv_usec += 1000000;
  } else {

  }
  t0712 = res709;
  printf("MEASURE,fib,timingGetTimeOfDay,%f\n", (double )t0712.tv_sec + (double )t0712.tv_usec / 1000000.);
  return;
}
}
void _cipher$_xtea_decipherBlock(unsigned int num_rounds , unsigned int *v , unsigned int *key ) 
{ 
  unsigned int v0 ;
  unsigned int v1 ;
  unsigned int delta ;
  unsigned int sum ;
  unsigned int i ;

  {
  v0 = v[0];
  v1 = v[1];
  delta = 2117564857;
  sum = delta * num_rounds;
  i = 0;
  while (i < num_rounds) {
    v1 -= (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + key[(sum >> 11) & 3]);
    sum -= delta;
    v0 -= (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + key[sum & 3]);
    i ++;
  }
  v[0] = v0;
  v[1] = v1;
}
}
void jit_dump_ops(struct jit *jit , int verbosity ) 
{ 
  jit_tree *labels ;
  jit_tree *tmp ;

  {
  if (! (verbosity & 14)) {
    verbosity |= 1;
  }
  tmp = prepare_labels(jit);
  labels = tmp;
  if (verbosity & 1) {
    jit_dump_ops_general(jit, labels, verbosity);
  }
  if (verbosity & 2) {
    compiler_based_debugger(jit);
  }
  if (verbosity & 8) {
    jit_dump_ops_compilable(jit, labels);
  }
  if (verbosity & 4) {
    jit_dump_ops_combined(jit, labels);
  }
  jit_tree_free(labels);
  return;
}
}
static void emit_shift_op(struct jit *jit , struct jit_op *op , int shift_op , int imm ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  long tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  int destreg ;
  int valreg ;
  int shiftreg ;
  int cx_in_use ;
  int tmp___14 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___18 ;
  int tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  long tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  long tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___35 ;
  int tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  long tmp___40 ;
  unsigned char *tmp___41 ;
  x86_imm_buf imb ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char _amd64_rex_bits___6 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  jit_hw_reg *tmp___69 ;
  jit_hw_reg *tmp___70 ;
  int tmpreg ;
  int tmp___71 ;
  int tmp_in_use ;
  int tmp___72 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___77 ;
  int tmp___78 ;
  int tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  long tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char _amd64_rex_bits___9 ;
  int tmp___86 ;
  int tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  long tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char _amd64_rex_bits___10 ;
  int tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char _amd64_rex_bits___11 ;
  int tmp___98 ;
  int tmp___99 ;
  int tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  long tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char _amd64_rex_bits___12 ;
  int tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;

  {
  if (imm) {
    if (op->r_arg[0] != op->r_arg[1]) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp = jit->ip;
          (jit->ip) ++;
          *tmp = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___0 = 8;
          } else {
            tmp___0 = 0;
          }
          if (op->r_arg[0] > 7L) {
            tmp___1 = 4;
          } else {
            tmp___1 = 0;
          }
          if (op->r_arg[1] > 7L) {
            tmp___2 = 1;
          } else {
            tmp___2 = 0;
          }
          _amd64_rex_bits = (unsigned char )((tmp___0 | tmp___1) | tmp___2);
          if ((int )_amd64_rex_bits != 0) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___5 = jit->ip;
        (jit->ip) ++;
        *tmp___5 = (unsigned char)139;
        break;
        default: 
        tmp___6 = __builtin_expect(1L, 0L);
        if (tmp___6) {
          __assert_rtn("emit_shift_op", "./jitter-amd64.c", 2779, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___7 = jit->ip;
            (jit->ip) ++;
            *tmp___7 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
            break;
          }
          break;
        }
        break;
      }
    }
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___8 = 1;
        } else {
          tmp___8 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(8 | tmp___8);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___9 = jit->ip;
          (jit->ip) ++;
          *tmp___9 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      while (1) {
        if (op->r_arg[2] == 1L) {
          tmp___10 = jit->ip;
          (jit->ip) ++;
          *tmp___10 = (unsigned char)209;
          while (1) {
            while (1) {
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = (unsigned char )((long )((3 << 6) | ((shift_op & 7) << 3)) | ((op->r_arg[0] & 7L) & 7L));
              break;
            }
            break;
          }
        } else {
          tmp___12 = jit->ip;
          (jit->ip) ++;
          *tmp___12 = (unsigned char)193;
          while (1) {
            while (1) {
              tmp___13 = jit->ip;
              (jit->ip) ++;
              *tmp___13 = (unsigned char )((long )((3 << 6) | ((shift_op & 7) << 3)) | ((op->r_arg[0] & 7L) & 7L));
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(op->r_arg[2] & 255L);
            (jit->ip) ++;
            break;
          }
        }
        break;
      }
      break;
    }
  } else {
    destreg = (int )op->r_arg[0];
    valreg = (int )op->r_arg[1];
    shiftreg = (int )op->r_arg[2];
    if (destreg != 1) {
      tmp___14 = jit_reg_in_use(op, 1, 0);
      cx_in_use = tmp___14;
      if (cx_in_use) {
        if (shiftreg != 1) {
          while (1) {
            while (1) {
              _amd64_rex_bits___1 = (unsigned char)0;
              if ((int )_amd64_rex_bits___1 != 0) {
                tmp___15 = jit->ip;
                (jit->ip) ++;
                *tmp___15 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
              }
              break;
            }
            tmp___16 = jit->ip;
            (jit->ip) ++;
            *tmp___16 = (unsigned char)81;
            break;
          }
        }
      }
      if (shiftreg != 1) {
        while (1) {
          if (sizeof(void *) == 2UL) {
            tmp___17 = jit->ip;
            (jit->ip) ++;
            *tmp___17 = (unsigned char)102;
          }
          while (1) {
            if (sizeof(void *) > 4UL) {
              tmp___18 = 8;
            } else {
              tmp___18 = 0;
            }
            if (shiftreg > 7) {
              tmp___19 = 1;
            } else {
              tmp___19 = 0;
            }
            _amd64_rex_bits___2 = (unsigned char )(tmp___18 | tmp___19);
            if ((int )_amd64_rex_bits___2 != 0) {
              tmp___20 = jit->ip;
              (jit->ip) ++;
              *tmp___20 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
            } else
            if (sizeof(void *) == 1UL) {
              tmp___20 = jit->ip;
              (jit->ip) ++;
              *tmp___20 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
            }
            break;
          }
          switch (sizeof(void *)) {
          case 1UL: 
          tmp___21 = jit->ip;
          (jit->ip) ++;
          *tmp___21 = (unsigned char)138;
          break;
          case 8UL: 
          case 4UL: 
          case 2UL: 
          tmp___22 = jit->ip;
          (jit->ip) ++;
          *tmp___22 = (unsigned char)139;
          break;
          default: 
          tmp___23 = __builtin_expect(1L, 0L);
          if (tmp___23) {
            __assert_rtn("emit_shift_op", "./jitter-amd64.c", 2791, "0");
          }
          }
          while (1) {
            while (1) {
              tmp___24 = jit->ip;
              (jit->ip) ++;
              *tmp___24 = (unsigned char )(((3 << 6) | (1 << 3)) | (shiftreg & 7));
              break;
            }
            break;
          }
          break;
        }
      }
      if (destreg != valreg) {
        if (valreg != 1) {
          while (1) {
            if (sizeof(void *) == 2UL) {
              tmp___25 = jit->ip;
              (jit->ip) ++;
              *tmp___25 = (unsigned char)102;
            }
            while (1) {
              if (sizeof(void *) > 4UL) {
                tmp___26 = 8;
              } else {
                tmp___26 = 0;
              }
              if (destreg > 7) {
                tmp___27 = 4;
              } else {
                tmp___27 = 0;
              }
              if (valreg > 7) {
                tmp___28 = 1;
              } else {
                tmp___28 = 0;
              }
              _amd64_rex_bits___3 = (unsigned char )((tmp___26 | tmp___27) | tmp___28);
              if ((int )_amd64_rex_bits___3 != 0) {
                tmp___29 = jit->ip;
                (jit->ip) ++;
                *tmp___29 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
              } else
              if (sizeof(void *) == 1UL) {
                tmp___29 = jit->ip;
                (jit->ip) ++;
                *tmp___29 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
              }
              break;
            }
            switch (sizeof(void *)) {
            case 1UL: 
            tmp___30 = jit->ip;
            (jit->ip) ++;
            *tmp___30 = (unsigned char)138;
            break;
            case 8UL: 
            case 4UL: 
            case 2UL: 
            tmp___31 = jit->ip;
            (jit->ip) ++;
            *tmp___31 = (unsigned char)139;
            break;
            default: 
            tmp___32 = __builtin_expect(1L, 0L);
            if (tmp___32) {
              __assert_rtn("emit_shift_op", "./jitter-amd64.c", 2793, "0");
            }
            }
            while (1) {
              while (1) {
                tmp___33 = jit->ip;
                (jit->ip) ++;
                *tmp___33 = (unsigned char )(((3 << 6) | ((destreg & 7) << 3)) | (valreg & 7));
                break;
              }
              break;
            }
            break;
          }
        } else {
          while (1) {
            if (sizeof(void *) == 2UL) {
              tmp___34 = jit->ip;
              (jit->ip) ++;
              *tmp___34 = (unsigned char)102;
            }
            while (1) {
              if (sizeof(void *) > 4UL) {
                tmp___35 = 8;
              } else {
                tmp___35 = 0;
              }
              if (destreg > 7) {
                tmp___36 = 4;
              } else {
                tmp___36 = 0;
              }
              _amd64_rex_bits___4 = (unsigned char )(tmp___35 | tmp___36);
              if ((int )_amd64_rex_bits___4 != 0) {
                tmp___37 = jit->ip;
                (jit->ip) ++;
                *tmp___37 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
              } else
              if (sizeof(void *) == 1UL) {
                tmp___37 = jit->ip;
                (jit->ip) ++;
                *tmp___37 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
              }
              break;
            }
            switch (sizeof(void *)) {
            case 1UL: 
            tmp___38 = jit->ip;
            (jit->ip) ++;
            *tmp___38 = (unsigned char)138;
            break;
            case 8UL: 
            case 4UL: 
            case 2UL: 
            tmp___39 = jit->ip;
            (jit->ip) ++;
            *tmp___39 = (unsigned char)139;
            break;
            default: 
            tmp___40 = __builtin_expect(1L, 0L);
            if (tmp___40) {
              __assert_rtn("emit_shift_op", "./jitter-amd64.c", 2794, "0");
            }
            }
            while (1) {
              while (1) {
                while (1) {
                  tmp___46 = jit->ip;
                  (jit->ip) ++;
                  *tmp___46 = (unsigned char )((((destreg & 7) & 7) << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___47 = jit->ip;
                  (jit->ip) ++;
                  *tmp___47 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                break;
                while (1) {
                  tmp___56 = jit->ip;
                  (jit->ip) ++;
                  *tmp___56 = (unsigned char )((((destreg & 7) & 7) << 3) | 4);
                  break;
                }
                break;
                while (1) {
                  tmp___57 = jit->ip;
                  (jit->ip) ++;
                  *tmp___57 = (unsigned char )(((1 << 6) | (((destreg & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char)0;
                  (jit->ip) ++;
                  break;
                }
                break;
              }
              break;
            }
            break;
          }
        }
      }
      while (1) {
        while (1) {
          if (destreg > 7) {
            tmp___63 = 1;
          } else {
            tmp___63 = 0;
          }
          _amd64_rex_bits___5 = (unsigned char )(8 | tmp___63);
          if ((int )_amd64_rex_bits___5 != 0) {
            tmp___64 = jit->ip;
            (jit->ip) ++;
            *tmp___64 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
          }
          break;
        }
        while (1) {
          tmp___65 = jit->ip;
          (jit->ip) ++;
          *tmp___65 = (unsigned char)211;
          while (1) {
            while (1) {
              tmp___66 = jit->ip;
              (jit->ip) ++;
              *tmp___66 = (unsigned char )(((3 << 6) | ((shift_op & 7) << 3)) | ((destreg & 7) & 7));
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      if (cx_in_use) {
        if (shiftreg != 1) {
          while (1) {
            while (1) {
              _amd64_rex_bits___6 = (unsigned char)0;
              if ((int )_amd64_rex_bits___6 != 0) {
                tmp___67 = jit->ip;
                (jit->ip) ++;
                *tmp___67 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
              }
              break;
            }
            tmp___68 = jit->ip;
            (jit->ip) ++;
            *tmp___68 = (unsigned char)89;
            break;
          }
        }
      }
    } else {
      tmp___70 = jit_get_unused_reg(jit->reg_al, op, 0);
      tmp___69 = tmp___70;
      if (tmp___69) {
        tmp___71 = tmp___69->id;
      } else {
        tmp___71 = 0;
      }
      tmpreg = tmp___71;
      tmp___72 = jit_reg_in_use(op, tmpreg, 0);
      tmp_in_use = tmp___72;
      if (tmp_in_use) {
        while (1) {
          while (1) {
            if (tmpreg > 7) {
              tmp___73 = 1;
            } else {
              tmp___73 = 0;
            }
            _amd64_rex_bits___7 = (unsigned char )tmp___73;
            if ((int )_amd64_rex_bits___7 != 0) {
              tmp___74 = jit->ip;
              (jit->ip) ++;
              *tmp___74 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
            }
            break;
          }
          tmp___75 = jit->ip;
          (jit->ip) ++;
          *tmp___75 = (unsigned char )(80 + (tmpreg & 7));
          break;
        }
      }
      if (tmpreg != valreg) {
        while (1) {
          if (sizeof(void *) == 2UL) {
            tmp___76 = jit->ip;
            (jit->ip) ++;
            *tmp___76 = (unsigned char)102;
          }
          while (1) {
            if (sizeof(void *) > 4UL) {
              tmp___77 = 8;
            } else {
              tmp___77 = 0;
            }
            if (tmpreg > 7) {
              tmp___78 = 4;
            } else {
              tmp___78 = 0;
            }
            if (valreg > 7) {
              tmp___79 = 1;
            } else {
              tmp___79 = 0;
            }
            _amd64_rex_bits___8 = (unsigned char )((tmp___77 | tmp___78) | tmp___79);
            if ((int )_amd64_rex_bits___8 != 0) {
              tmp___80 = jit->ip;
              (jit->ip) ++;
              *tmp___80 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
            } else
            if (sizeof(void *) == 1UL) {
              tmp___80 = jit->ip;
              (jit->ip) ++;
              *tmp___80 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
            }
            break;
          }
          switch (sizeof(void *)) {
          case 1UL: 
          tmp___81 = jit->ip;
          (jit->ip) ++;
          *tmp___81 = (unsigned char)138;
          break;
          case 8UL: 
          case 4UL: 
          case 2UL: 
          tmp___82 = jit->ip;
          (jit->ip) ++;
          *tmp___82 = (unsigned char)139;
          break;
          default: 
          tmp___83 = __builtin_expect(1L, 0L);
          if (tmp___83) {
            __assert_rtn("emit_shift_op", "./jitter-amd64.c", 2807, "0");
          }
          }
          while (1) {
            while (1) {
              tmp___84 = jit->ip;
              (jit->ip) ++;
              *tmp___84 = (unsigned char )(((3 << 6) | ((tmpreg & 7) << 3)) | (valreg & 7));
              break;
            }
            break;
          }
          break;
        }
      }
      if (shiftreg != 1) {
        while (1) {
          if (sizeof(void *) == 2UL) {
            tmp___85 = jit->ip;
            (jit->ip) ++;
            *tmp___85 = (unsigned char)102;
          }
          while (1) {
            if (sizeof(void *) > 4UL) {
              tmp___86 = 8;
            } else {
              tmp___86 = 0;
            }
            if (shiftreg > 7) {
              tmp___87 = 1;
            } else {
              tmp___87 = 0;
            }
            _amd64_rex_bits___9 = (unsigned char )(tmp___86 | tmp___87);
            if ((int )_amd64_rex_bits___9 != 0) {
              tmp___88 = jit->ip;
              (jit->ip) ++;
              *tmp___88 = (unsigned char )(64 | (int )_amd64_rex_bits___9);
            } else
            if (sizeof(void *) == 1UL) {
              tmp___88 = jit->ip;
              (jit->ip) ++;
              *tmp___88 = (unsigned char )(64 | (int )_amd64_rex_bits___9);
            }
            break;
          }
          switch (sizeof(void *)) {
          case 1UL: 
          tmp___89 = jit->ip;
          (jit->ip) ++;
          *tmp___89 = (unsigned char)138;
          break;
          case 8UL: 
          case 4UL: 
          case 2UL: 
          tmp___90 = jit->ip;
          (jit->ip) ++;
          *tmp___90 = (unsigned char)139;
          break;
          default: 
          tmp___91 = __builtin_expect(1L, 0L);
          if (tmp___91) {
            __assert_rtn("emit_shift_op", "./jitter-amd64.c", 2808, "0");
          }
          }
          while (1) {
            while (1) {
              tmp___92 = jit->ip;
              (jit->ip) ++;
              *tmp___92 = (unsigned char )(((3 << 6) | (1 << 3)) | (shiftreg & 7));
              break;
            }
            break;
          }
          break;
        }
      }
      while (1) {
        while (1) {
          if (tmpreg > 7) {
            tmp___93 = 1;
          } else {
            tmp___93 = 0;
          }
          _amd64_rex_bits___10 = (unsigned char )(8 | tmp___93);
          if ((int )_amd64_rex_bits___10 != 0) {
            tmp___94 = jit->ip;
            (jit->ip) ++;
            *tmp___94 = (unsigned char )(64 | (int )_amd64_rex_bits___10);
          }
          break;
        }
        while (1) {
          tmp___95 = jit->ip;
          (jit->ip) ++;
          *tmp___95 = (unsigned char)211;
          while (1) {
            while (1) {
              tmp___96 = jit->ip;
              (jit->ip) ++;
              *tmp___96 = (unsigned char )(((3 << 6) | ((shift_op & 7) << 3)) | ((tmpreg & 7) & 7));
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp___97 = jit->ip;
          (jit->ip) ++;
          *tmp___97 = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___98 = 8;
          } else {
            tmp___98 = 0;
          }
          if (destreg > 7) {
            tmp___99 = 4;
          } else {
            tmp___99 = 0;
          }
          if (tmpreg > 7) {
            tmp___100 = 1;
          } else {
            tmp___100 = 0;
          }
          _amd64_rex_bits___11 = (unsigned char )((tmp___98 | tmp___99) | tmp___100);
          if ((int )_amd64_rex_bits___11 != 0) {
            tmp___101 = jit->ip;
            (jit->ip) ++;
            *tmp___101 = (unsigned char )(64 | (int )_amd64_rex_bits___11);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___101 = jit->ip;
            (jit->ip) ++;
            *tmp___101 = (unsigned char )(64 | (int )_amd64_rex_bits___11);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___102 = jit->ip;
        (jit->ip) ++;
        *tmp___102 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___103 = jit->ip;
        (jit->ip) ++;
        *tmp___103 = (unsigned char)139;
        break;
        default: 
        tmp___104 = __builtin_expect(1L, 0L);
        if (tmp___104) {
          __assert_rtn("emit_shift_op", "./jitter-amd64.c", 2810, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___105 = jit->ip;
            (jit->ip) ++;
            *tmp___105 = (unsigned char )(((3 << 6) | ((destreg & 7) << 3)) | (tmpreg & 7));
            break;
          }
          break;
        }
        break;
      }
      if (tmp_in_use) {
        while (1) {
          while (1) {
            if (tmpreg > 7) {
              tmp___106 = 1;
            } else {
              tmp___106 = 0;
            }
            _amd64_rex_bits___12 = (unsigned char )tmp___106;
            if ((int )_amd64_rex_bits___12 != 0) {
              tmp___107 = jit->ip;
              (jit->ip) ++;
              *tmp___107 = (unsigned char )(64 | (int )_amd64_rex_bits___12);
            }
            break;
          }
          tmp___108 = jit->ip;
          (jit->ip) ++;
          *tmp___108 = (unsigned char )(88 + (tmpreg & 7));
          break;
        }
      }
    }
  }
  return;
}
}
static struct output_buf *ob_new(void) 
{ 
  struct output_buf *ob ;
  void *tmp ;
  void *tmp___0 ;

  {
  tmp = malloc(sizeof(struct output_buf ));
  ob = (struct output_buf *)tmp;
  tmp___0 = malloc((size_t )8192);
  ob->buf = (char *)tmp___0;
  ob->capacity = (size_t )8192;
  ob->size = (size_t )0;
  *(ob->buf + 0) = (char )'\000';
  return (ob);
}
}
static void associate_register_alias(struct jit_reg_allocator *al , jit_op *op , int i ) 
{ 
  long tmp ;

  {
  if ((int )op->arg[i] == ((2 << 1) | (1 << 4))) {
    op->r_arg[i] = (jit_value )(al->ret_reg)->id;
  } else
  if ((int )op->arg[i] == 2 << 1) {
    op->r_arg[i] = (jit_value )al->fp_reg;
  } else {
    tmp = __builtin_expect(1L, 0L);
    if (tmp) {
      __assert_rtn("associate_register_alias", "./jitter-amd64.c", 5159, "0");
    }
  }
  return;
}
}
static int check_op_without_effect(jit_op *op , char *msg_buf ) 
{ 
  jit_opcode code ;
  int i ;
  int tmp ;

  {
  code = (jit_opcode )((int )op->code & 65528);
  if ((unsigned int )code == 672U) {
    return (0);
  } else
  if ((unsigned int )code == 48U) {
    return (0);
  } else
  if ((unsigned int )code == 392U) {
    return (0);
  } else
  if ((unsigned int )code == 80U) {
    return (0);
  } else
  if ((unsigned int )code == 768U) {
    return (0);
  } else
  if ((unsigned int )code == 664U) {
    return (0);
  } else
  if ((unsigned int )code == 568U) {
    return (0);
  } else
  if ((unsigned int )code == 328U) {
    return (0);
  }
  i = 0;
  while (i < 3) {
    if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 3) {
      tmp = jit_set_get(op->live_out, (int )op->arg[i]);
      if (! tmp) {
        append_msg(msg_buf, (char *)"operation without effect");
        return (2);
      }
    }
    i ++;
  }
  return (0);
}
}
__inline static int _bit_pop(unsigned int x ) 
{ 


  {
  x = (x & 1431655765U) + ((x >> 1) & 1431655765U);
  x = (x & 858993459U) + ((x >> 2) & 858993459U);
  x = (x & 252645135U) + ((x >> 4) & 252645135U);
  x = (x & 16711935U) + ((x >> 8) & 16711935U);
  x = (x & 65535U) + ((x >> 16) & 65535U);
  return ((int )x);
}
}
__inline static void mark_livecode(jit_op *op ) 
{ 


  {
  while (op) {
    if (op->in_use) {
      return;
    }
    op->in_use = (unsigned char)1;
    if (op->jmp_addr) {
      mark_livecode(op->jmp_addr);
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 72U) {
      return;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 96U) {
      return;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 808U) {
      return;
    }
    op = op->next;
  }
  return;
}
}
__inline extern int isblank(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 131072UL);
  return (tmp);
}
}
struct jit_op *jit_add_fop(struct jit *jit , unsigned short code , unsigned char spec ,
                           long arg1 , long arg2 , long arg3 , double flt_imm , unsigned char arg_size ,
                           struct jit_debug_info *debug_info ) 
{ 
  struct jit_op *r ;
  struct jit_op *tmp ;

  {
  tmp = jit_add_op(jit, code, spec, arg1, arg2, arg3, arg_size, debug_info);
  r = tmp;
  r->fp = (unsigned char)1;
  r->flt_imm = flt_imm;
  return (r);
}
}
jit_hw_reg *jit_get_unused_reg_with_index(struct jit_reg_allocator *al , jit_op *op ,
                                          int fp , int index___0 ) 
{ 
  jit_hw_reg *regs ;
  int reg_count ;
  int i ;
  int tmp ;

  {
  if (! fp) {
    regs = al->gp_regs;
    reg_count = al->gp_reg_cnt;
  } else {
    regs = al->fp_regs;
    reg_count = al->fp_reg_cnt;
  }
  i = 0;
  while (i < reg_count) {
    if ((regs + i)->callee_saved) {
      goto __Cont;
    }
    tmp = jit_reg_in_use(op, (regs + i)->id, fp);
    if (! tmp) {
      if (index___0 == 0) {
        return (regs + i);
      } else {
        index___0 --;
      }
    }
    __Cont: /* CIL Label */ 
    i ++;
  }
  return ((jit_hw_reg *)((void *)0));
}
}
int jit_optimize_join_addimm(struct jit *jit ) 
{ 
  int change ;
  jit_op *op ;
  jit_op *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  change = 0;
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    tmp___0 = join_2ops(op, 105, 106, & join_addr_addi);
    change |= tmp___0;
    tmp___1 = join_2ops(op, 105, 34, & join_addr_addi);
    change |= tmp___1;
    tmp___2 = join_2ops(op, 106, 105, & join_addi_addr);
    change |= tmp___2;
    tmp___3 = join_2ops(op, 34, 105, & join_addi_addr);
    change |= tmp___3;
    op = op->next;
  }
  return (change);
}
}
static void emit_branch_mask_op(struct jit *jit , struct jit_op *op , int cond , int imm ) 
{ 
  unsigned char _amd64_rex_bits ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  x86_imm_buf imb ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___13 ;
  int offset ;
  int tmp___14 ;
  jit_value tmp___15 ;
  int tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;

  {
  if (imm) {
    while (1) {
      while (1) {
        if (op->r_arg[1] > 7L) {
          tmp = 1;
        } else {
          tmp = 0;
        }
        _amd64_rex_bits = (unsigned char )(8 | tmp);
        if ((int )_amd64_rex_bits != 0) {
          tmp___0 = jit->ip;
          (jit->ip) ++;
          *tmp___0 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      while (1) {
        if ((op->r_arg[1] & 7L) == 0L) {
          tmp___1 = jit->ip;
          (jit->ip) ++;
          *tmp___1 = (unsigned char)169;
        } else {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char)247;
          while (1) {
            while (1) {
              tmp___3 = jit->ip;
              (jit->ip) ++;
              *tmp___3 = (unsigned char )((long )(3 << 6) | ((op->r_arg[1] & 7L) & 7L));
              break;
            }
            break;
          }
        }
        while (1) {
          imb.val = (int )op->r_arg[2];
          tmp___4 = jit->ip;
          (jit->ip) ++;
          *tmp___4 = imb.b[0];
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = imb.b[1];
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = imb.b[2];
          tmp___7 = jit->ip;
          (jit->ip) ++;
          *tmp___7 = imb.b[3];
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      while (1) {
        if (op->r_arg[1] > 7L) {
          tmp___8 = 4;
        } else {
          tmp___8 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___9 = 1;
        } else {
          tmp___9 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )((8 | tmp___8) | tmp___9);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___10 = jit->ip;
          (jit->ip) ++;
          *tmp___10 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      while (1) {
        tmp___11 = jit->ip;
        (jit->ip) ++;
        *tmp___11 = (unsigned char)133;
        while (1) {
          while (1) {
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = (unsigned char )(((long )(3 << 6) | (((op->r_arg[2] & 7L) & 7L) << 3)) | ((op->r_arg[1] & 7L) & 7L));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  }
  op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
  while (1) {
    while (1) {
      _amd64_rex_bits___1 = (unsigned char)8;
      if ((int )_amd64_rex_bits___1 != 0) {
        tmp___13 = jit->ip;
        (jit->ip) ++;
        *tmp___13 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
      }
      break;
    }
    while (1) {
      tmp___16 = jit_is_label(jit, (void *)op->r_arg[0]);
      if (tmp___16) {
        tmp___15 = ((jit_value )jit->buf + ((jit_label *)op->r_arg[0])->pos) - (jit_value )jit->ip;
      } else {
        tmp___15 = op->r_arg[0];
      }
      offset = (int )(tmp___15 - 6L);
      while (1) {
        tmp___17 = jit->ip;
        (jit->ip) ++;
        *tmp___17 = (unsigned char)15;
        tmp___19 = jit->ip;
        (jit->ip) ++;
        *tmp___19 = (unsigned char )((int const   )x86_cc_unsigned_map[cond] + 16);
        while (1) {
          imb___0.val = offset;
          tmp___20 = jit->ip;
          (jit->ip) ++;
          *tmp___20 = imb___0.b[0];
          tmp___21 = jit->ip;
          (jit->ip) ++;
          *tmp___21 = imb___0.b[1];
          tmp___22 = jit->ip;
          (jit->ip) ++;
          *tmp___22 = imb___0.b[2];
          tmp___23 = jit->ip;
          (jit->ip) ++;
          *tmp___23 = imb___0.b[3];
          break;
        }
        break;
      }
      break;
    }
    break;
  }
  return;
}
}
static void ob_printf(struct output_buf *ob , char const   *fmt  , ...) 
{ 
  char str[8192] ;
  va_list___0 ap ;
  int len ;
  unsigned long tmp ;
  int tmp___0 ;
  size_t tmp___1 ;
  unsigned long tmp___2 ;

  {
  __builtin_va_start(ap, fmt);
  tmp = __builtin_object_size((void *)(str), 1);
  tmp___0 = __builtin___vsnprintf_chk(str, 8192UL, 0, tmp, fmt, ap);
  len = tmp___0;
  __builtin_va_end(ap);
  tmp___1 = strlen((char const   *)(str));
  len = (int )tmp___1;
  ob_assert_space(ob, len);
  tmp___2 = __builtin_object_size((void *)ob->buf, 1);
  __builtin___strcat_chk(ob->buf, (char const   *)(str), tmp___2);
  ob->size += (size_t )len;
  return;
}
}
__inline static void print_addr(struct jit_disasm *disasm , struct output_buf *buf ,
                                jit_tree *labels , jit_op *op , int arg_pos ) 
{ 
  void *arg ;
  jit_tree *label_item ;
  jit_tree *tmp ;

  {
  arg = (void *)op->arg[arg_pos];
  tmp = jit_tree_search(labels, (long )op);
  label_item = tmp;
  if (label_item) {
    ob_printf(buf, (char const   *)disasm->label_forward_template, - ((long )label_item->value));
  } else {
    label_item = jit_tree_search(labels, (long )arg);
    if (label_item) {
      ob_printf(buf, (char const   *)disasm->label_template, (long )label_item->value);
    } else {
      ob_printf(buf, (char const   *)disasm->generic_addr_template, arg);
    }
  }
  return;
}
}
static void emit_branch_op(struct jit *jit , struct jit_op *op , int cond , int imm ,
                           int sign ) 
{ 
  unsigned char _amd64_rex_bits ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  x86_imm_buf imb ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___17 ;
  int tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___22 ;
  int offset ;
  int tmp___23 ;
  jit_value tmp___24 ;
  int tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;

  {
  if (imm) {
    while (1) {
      if ((int )op->r_arg[2] >= -128) {
        if ((int )op->r_arg[2] <= 127) {
          while (1) {
            if (op->r_arg[1] > 7L) {
              tmp = 1;
            } else {
              tmp = 0;
            }
            _amd64_rex_bits = (unsigned char )(8 | tmp);
            if ((int )_amd64_rex_bits != 0) {
              tmp___0 = jit->ip;
              (jit->ip) ++;
              *tmp___0 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___1 = jit->ip;
          (jit->ip) ++;
          *tmp___1 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___2 = jit->ip;
              (jit->ip) ++;
              *tmp___2 = (unsigned char )((long )((3 << 6) | (7 << 3)) | (op->r_arg[1] & 7L));
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(op->r_arg[2] & 255L);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else
      _L: /* CIL Label */ 
      if (op->r_arg[1] == 0L) {
        while (1) {
          _amd64_rex_bits___0 = (unsigned char)8;
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char )((7 << 3) + 5);
        while (1) {
          imb.val = (int )op->r_arg[2];
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = imb.b[0];
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = imb.b[1];
          tmp___7 = jit->ip;
          (jit->ip) ++;
          *tmp___7 = imb.b[2];
          tmp___8 = jit->ip;
          (jit->ip) ++;
          *tmp___8 = imb.b[3];
          break;
        }
      } else {
        while (1) {
          if (op->r_arg[1] > 7L) {
            tmp___9 = 1;
          } else {
            tmp___9 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )(8 | tmp___9);
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___10 = jit->ip;
            (jit->ip) ++;
            *tmp___10 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___11 = jit->ip;
        (jit->ip) ++;
        *tmp___11 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = (unsigned char )((long )((3 << 6) | (7 << 3)) | (op->r_arg[1] & 7L));
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = (int )op->r_arg[2];
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = imb___0.b[0];
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = imb___0.b[1];
          tmp___15 = jit->ip;
          (jit->ip) ++;
          *tmp___15 = imb___0.b[2];
          tmp___16 = jit->ip;
          (jit->ip) ++;
          *tmp___16 = imb___0.b[3];
          break;
        }
      }
      break;
    }
  } else {
    while (1) {
      while (1) {
        if (op->r_arg[1] > 7L) {
          tmp___17 = 4;
        } else {
          tmp___17 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___18 = 1;
        } else {
          tmp___18 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )((8 | tmp___17) | tmp___18);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___19 = jit->ip;
          (jit->ip) ++;
          *tmp___19 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___20 = jit->ip;
      (jit->ip) ++;
      *tmp___20 = (unsigned char )((7 << 3) + 3);
      while (1) {
        while (1) {
          tmp___21 = jit->ip;
          (jit->ip) ++;
          *tmp___21 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[1] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
  while (1) {
    while (1) {
      _amd64_rex_bits___3 = (unsigned char)8;
      if ((int )_amd64_rex_bits___3 != 0) {
        tmp___22 = jit->ip;
        (jit->ip) ++;
        *tmp___22 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
      }
      break;
    }
    while (1) {
      tmp___25 = jit_is_label(jit, (void *)op->r_arg[0]);
      if (tmp___25) {
        tmp___24 = ((jit_value )jit->buf + ((jit_label *)op->r_arg[0])->pos) - (jit_value )jit->ip;
      } else {
        tmp___24 = op->r_arg[0];
      }
      offset = (int )(tmp___24 - 6L);
      while (1) {
        tmp___26 = jit->ip;
        (jit->ip) ++;
        *tmp___26 = (unsigned char)15;
        if (sign) {
          tmp___27 = jit->ip;
          (jit->ip) ++;
          *tmp___27 = (unsigned char )((int const   )x86_cc_signed_map[cond] + 16);
        } else {
          tmp___28 = jit->ip;
          (jit->ip) ++;
          *tmp___28 = (unsigned char )((int const   )x86_cc_unsigned_map[cond] + 16);
        }
        while (1) {
          imb___1.val = offset;
          tmp___29 = jit->ip;
          (jit->ip) ++;
          *tmp___29 = imb___1.b[0];
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = imb___1.b[1];
          tmp___31 = jit->ip;
          (jit->ip) ++;
          *tmp___31 = imb___1.b[2];
          tmp___32 = jit->ip;
          (jit->ip) ++;
          *tmp___32 = imb___1.b[3];
          break;
        }
        break;
      }
      break;
    }
    break;
  }
  return;
}
}
static FILE *open_disasm(void) 
{ 
  int fds[2] ;
  pid_t child ;
  pid_t tmp ;
  char *path ;
  FILE *f ;
  FILE *tmp___0 ;

  {
  pipe((int *)(fds));
  tmp = fork();
  child = tmp;
  if (child == 0) {
    close(fds[1]);
    dup2(fds[0], 0);
    path = (char *)"./myjit-disasm";
    execlp((char const   *)path, (char const   *)path, (void *)0);
    path = (char *)"myjit-disasm";
    execlp((char const   *)path, (char const   *)path, (void *)0);
    path = getenv("MYJIT_DISASM");
    if (path) {
      execlp((char const   *)path, (char const   *)path, (void *)0);
    }
    printf((char const   */* __restrict  */)"myjit-disasm not found\n\n");
    printf((char const   */* __restrict  */)"In order to list myjit operations along with the machine code, the MyJIT disassembler has to be present in the current directory or its path has to be specified in the MYJIT_DISASM environment variable.\nThe disassembler\'s source code can be found in the \"disasm/\" directory.\n\n");
    exit(1);
  }
  close(fds[0]);
  tmp___0 = fdopen(fds[1], "w");
  f = tmp___0;
  return (f);
}
}
void jit_disable_optimization(struct jit *jit , int opt ) 
{ 


  {
  jit->optimizations &= (unsigned int )(~ opt);
  return;
}
}
__inline extern int iscntrl(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 512UL);
  return (tmp);
}
}
static void emit_ureg(struct jit *jit , jit_value vreg , int hreg_id ) 
{ 
  int stack_pos ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___28 ;
  int tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  long tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;

  {
  tmp = GET_REG_POS(jit, (int )vreg);
  stack_pos = tmp;
  if ((vreg & 1L) == 1L) {
    while (1) {
      tmp___0 = jit->ip;
      (jit->ip) ++;
      *tmp___0 = (unsigned char)102;
      while (1) {
        if (hreg_id > 7) {
          tmp___1 = 4;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )tmp___1;
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)15;
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)19;
      while (1) {
        while (1) {
          if (0) {
            if (stack_pos == 0) {
              while (1) {
                tmp___10 = jit->ip;
                (jit->ip) ++;
                *tmp___10 = (unsigned char )((((hreg_id & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___11 = jit->ip;
                (jit->ip) ++;
                *tmp___11 = (unsigned char )((4 << 3) | 4);
                break;
              }
            } else
            if (stack_pos >= -128) {
              if (stack_pos <= 127) {
                while (1) {
                  tmp___12 = jit->ip;
                  (jit->ip) ++;
                  *tmp___12 = (unsigned char )(((1 << 6) | (((hreg_id & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___13 = jit->ip;
                  (jit->ip) ++;
                  *tmp___13 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(stack_pos & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L;
              }
            } else {
              _L: /* CIL Label */ 
              while (1) {
                tmp___14 = jit->ip;
                (jit->ip) ++;
                *tmp___14 = (unsigned char )(((2 << 6) | (((hreg_id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___15 = jit->ip;
                (jit->ip) ++;
                *tmp___15 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                imb___0.val = stack_pos;
                tmp___16 = jit->ip;
                (jit->ip) ++;
                *tmp___16 = imb___0.b[0];
                tmp___17 = jit->ip;
                (jit->ip) ++;
                *tmp___17 = imb___0.b[1];
                tmp___18 = jit->ip;
                (jit->ip) ++;
                *tmp___18 = imb___0.b[2];
                tmp___19 = jit->ip;
                (jit->ip) ++;
                *tmp___19 = imb___0.b[3];
                break;
              }
            }
            break;
          }
          if (stack_pos == 0) {

          }
          if (stack_pos >= -128) {
            if (stack_pos <= 127) {
              while (1) {
                tmp___21 = jit->ip;
                (jit->ip) ++;
                *tmp___21 = (unsigned char )(((1 << 6) | (((hreg_id & 7) & 7) << 3)) | 5);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(stack_pos & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___0;
            }
          } else {
            _L___0: /* CIL Label */ 
            while (1) {
              tmp___22 = jit->ip;
              (jit->ip) ++;
              *tmp___22 = (unsigned char )(((2 << 6) | (((hreg_id & 7) & 7) << 3)) | 5);
              break;
            }
            while (1) {
              imb___1.val = stack_pos;
              tmp___23 = jit->ip;
              (jit->ip) ++;
              *tmp___23 = imb___1.b[0];
              tmp___24 = jit->ip;
              (jit->ip) ++;
              *tmp___24 = imb___1.b[1];
              tmp___25 = jit->ip;
              (jit->ip) ++;
              *tmp___25 = imb___1.b[2];
              tmp___26 = jit->ip;
              (jit->ip) ++;
              *tmp___26 = imb___1.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___27 = jit->ip;
        (jit->ip) ++;
        *tmp___27 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___28 = 8;
        } else {
          tmp___28 = 0;
        }
        if (hreg_id > 7) {
          tmp___29 = 4;
        } else {
          tmp___29 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(tmp___28 | tmp___29);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___31 = jit->ip;
      (jit->ip) ++;
      *tmp___31 = (unsigned char)136;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___32 = jit->ip;
      (jit->ip) ++;
      *tmp___32 = (unsigned char)137;
      break;
      default: 
      tmp___33 = __builtin_expect(1L, 0L);
      if (tmp___33) {
        __assert_rtn("emit_ureg", "./jitter-amd64.c", 2493, "0");
      }
      }
      while (1) {
        if (0) {
          if (stack_pos == 0) {
            while (1) {
              tmp___34 = jit->ip;
              (jit->ip) ++;
              *tmp___34 = (unsigned char )((((hreg_id & 7) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___35 = jit->ip;
              (jit->ip) ++;
              *tmp___35 = (unsigned char )((4 << 3) | 4);
              break;
            }
          } else
          if (stack_pos >= -128) {
            if (stack_pos <= 127) {
              while (1) {
                tmp___36 = jit->ip;
                (jit->ip) ++;
                *tmp___36 = (unsigned char )(((1 << 6) | (((hreg_id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___37 = jit->ip;
                (jit->ip) ++;
                *tmp___37 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(stack_pos & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___1;
            }
          } else {
            _L___1: /* CIL Label */ 
            while (1) {
              tmp___38 = jit->ip;
              (jit->ip) ++;
              *tmp___38 = (unsigned char )(((2 << 6) | (((hreg_id & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___39 = jit->ip;
              (jit->ip) ++;
              *tmp___39 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              imb___2.val = stack_pos;
              tmp___40 = jit->ip;
              (jit->ip) ++;
              *tmp___40 = imb___2.b[0];
              tmp___41 = jit->ip;
              (jit->ip) ++;
              *tmp___41 = imb___2.b[1];
              tmp___42 = jit->ip;
              (jit->ip) ++;
              *tmp___42 = imb___2.b[2];
              tmp___43 = jit->ip;
              (jit->ip) ++;
              *tmp___43 = imb___2.b[3];
              break;
            }
          }
          break;
        }
        if (stack_pos == 0) {

        }
        if (stack_pos >= -128) {
          if (stack_pos <= 127) {
            while (1) {
              tmp___45 = jit->ip;
              (jit->ip) ++;
              *tmp___45 = (unsigned char )(((1 << 6) | (((hreg_id & 7) & 7) << 3)) | 5);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(stack_pos & 255);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___2;
          }
        } else {
          _L___2: /* CIL Label */ 
          while (1) {
            tmp___46 = jit->ip;
            (jit->ip) ++;
            *tmp___46 = (unsigned char )(((2 << 6) | (((hreg_id & 7) & 7) << 3)) | 5);
            break;
          }
          while (1) {
            imb___3.val = stack_pos;
            tmp___47 = jit->ip;
            (jit->ip) ++;
            *tmp___47 = imb___3.b[0];
            tmp___48 = jit->ip;
            (jit->ip) ++;
            *tmp___48 = imb___3.b[1];
            tmp___49 = jit->ip;
            (jit->ip) ++;
            *tmp___49 = imb___3.b[2];
            tmp___50 = jit->ip;
            (jit->ip) ++;
            *tmp___50 = imb___3.b[3];
            break;
          }
        }
        break;
      }
      break;
    }
  }
  return;
}
}
__inline extern int __istype(__darwin_ct_rune_t _c , unsigned long _f ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  tmp___3 = isascii(_c);
  if (tmp___3) {
    tmp___2 = ! (! ((unsigned long )_DefaultRuneLocale.__runetype[_c] & _f));
  } else {
    tmp___0 = __maskrune(_c, _f);
    if (tmp___0) {
      tmp___1 = 1;
    } else {
      tmp___1 = 0;
    }
    tmp___2 = tmp___1;
  }
  return (tmp___2);
}
}
static int is_cond_branch_op(jit_op *op ) 
{ 
  jit_opcode code ;
  int tmp ;

  {
  code = (jit_opcode )((int )op->code & 65528);
  if ((unsigned int )code == 480U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 112U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 344U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 584U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 848U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 608U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 824U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 744U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 192U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 384U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 816U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 504U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 768U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 664U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 568U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 328U) {
    tmp = 1;
  } else {
    tmp = 0;
  }
  return (tmp);
}
}
__inline extern int isrune(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 4294967280UL);
  return (tmp);
}
}
__inline extern int ishexnumber(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 65536UL);
  return (tmp);
}
}
__inline static void print_str(struct output_buf *buf , char *str ) 
{ 
  int i ;
  char xbuf[16] ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;
  unsigned long tmp___2 ;
  size_t tmp___3 ;

  {
  ob_append(buf, (char *)" \"");
  i = 0;
  while (1) {
    tmp___3 = strlen((char const   *)str);
    if (! ((size_t )i < tmp___3)) {
      break;
    }
    if ((int )*(str + i) >= 32) {
      ob_printf(buf, "%c", (int )*(str + i));
    } else {
      switch ((int )*(str + i)) {
      case 9: 
      tmp = __builtin_object_size((void *)(xbuf), 1);
      __builtin___strcpy_chk(xbuf, "\\t", tmp);
      break;
      case 10: 
      tmp___0 = __builtin_object_size((void *)(xbuf), 1);
      __builtin___strcpy_chk(xbuf, "\\n", tmp___0);
      break;
      case 13: 
      tmp___1 = __builtin_object_size((void *)(xbuf), 1);
      __builtin___strcpy_chk(xbuf, "\\r", tmp___1);
      break;
      default: 
      tmp___2 = __builtin_object_size((void *)(xbuf), 1);
      __builtin___sprintf_chk(xbuf, 0, tmp___2, "\\x%02x", (int )*(str + i));
      }
      ob_append(buf, xbuf);
    }
    i ++;
  }
  ob_append(buf, (char *)"\"");
  return;
}
}
static int is_spilled(jit_value arg_id , jit_op *prepare_op , int *reg ) 
{ 
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp ;

  {
  tmp = rmap_get(prepare_op->regmap, arg_id);
  hreg = tmp;
  if (hreg) {
    *reg = hreg->id;
    return (0);
  } else {
    return (1);
  }
}
}
static int check_dead_code(jit_op *op , char *msg_buf ) 
{ 


  {
  if (! op->in_use) {
    append_msg(msg_buf, (char *)"unreachable operation");
    return (1);
  }
  return (0);
}
}
__inline static jit_tree *move_red_left(jit_tree *h ) 
{ 
  int tmp ;

  {
  color_flip(h);
  tmp = is_red((h->right)->left);
  if (tmp) {
    h->right = rotate_right(h->right);
    h = rotate_left(h);
    color_flip(h);
  }
  return (h);
}
}
void x05_i$nit(void) 
{ 


  {
  x05 = (double const   )0.5;
}
}
static void associate_register(struct jit_reg_allocator *al , jit_op *op , int i ) 
{ 
  jit_hw_reg *reg ;
  jit_hw_reg *tmp ;
  jit_hw_reg *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  tmp = rmap_get(op->regmap, op->arg[i]);
  reg = tmp;
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 696U) {
    printf((char const   */* __restrict  */)":JJJ:%i\n", reg->id);
  }
  if (reg) {
    op->r_arg[i] = (jit_value )reg->id;
  } else {
    tmp___2 = is_transfer_op(op);
    if (tmp___2) {
      op->r_arg[i] = (jit_value )-1;
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) != 0U) {
      reg = make_free_reg(al, op, op->arg[i]);
      rmap_assoc(op->regmap, op->arg[i], reg);
      op->r_arg[i] = (jit_value )reg->id;
      tmp___1 = jit_set_get(op->live_in, (int )op->arg[i]);
      if (tmp___1) {
        tmp___0 = rmap_get(op->regmap, op->arg[i]);
        load_reg(op, tmp___0, op->arg[i]);
      }
    } else {
      op->r_arg[i] = (jit_value )-1;
    }
  }
  return;
}
}
__inline extern int islower(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 4096UL);
  return (tmp);
}
}
void fac(int n ) 
{ 
  int s ;
  int i ;

  {
  s = 1;
  i = 2;
  while (i <= n) {
    s *= i;
    i ++;
  }
  printf((char const   */* __restrict  */)"fac(%i)=%i\n", n, s);
  return;
}
}
__inline extern void ( __attribute__((__always_inline__)) __darwin_fd_clr)(int _fd ,
                                                                           struct fd_set * const  _p ) 
{ 
  int tmp ;

  {
  tmp = __darwin_check_fd_set(_fd, (void const   *)_p);
  if (tmp) {
    _p->fds_bits[(unsigned long )_fd / (sizeof(__int32_t ) * 8UL)] &= ~ ((__int32_t )(1UL << (unsigned long )_fd % (sizeof(__int32_t ) * 8UL)));
  }
  return;
}
}
static void rmap_assoc(jit_rmap *rmap , jit_value reg , jit_hw_reg *hreg ) 
{ 


  {
  rmap->map = jit_tree_insert(rmap->map, reg, (jit_tree_value )hreg, (int *)((void *)0));
  return;
}
}
__inline static jit_value jit_proc_value(void (*f)(void) ) 
{ 
  union jit_proc_value_alias alias ;

  {
  alias.ptr = (void (*)())f;
  return (alias.num);
}
}
static void print_rmap_callback(jit_tree_key key , jit_tree_value value , void *disasm ) 
{ 
  char buf[256] ;

  {
  jit_get_reg_name((struct jit_disasm *)disasm, buf, (int )key);
  printf((char const   */* __restrict  */)"%s=%s ", buf, ((jit_hw_reg *)value)->name);
  return;
}
}
static void sync_reg(jit_op *op , jit_hw_reg *hreg , jit_value virt_reg ) 
{ 


  {
  insert_reg_op(416, op, virt_reg, (jit_value )hreg->id);
  return;
}
}
__inline static jit_tree *rotate_left(jit_tree *h ) 
{ 
  jit_tree *x ;

  {
  x = h->right;
  h->right = x->left;
  x->left = h;
  x->color = (x->left)->color;
  (x->left)->color = 1;
  return (x);
}
}
static void sse_alu_sd_reg_safeimm(struct jit *jit , jit_op *op , int op_id , int reg ,
                                   double *imm ) 
{ 
  jit_hw_reg *r ;
  jit_hw_reg *tmp ;
  int _amd64_width_temp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  unsigned char *tmp___4 ;
  int tmp___5 ;
  unsigned char *tmp___6 ;
  amd64_imm_buf imb ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  int tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  int _amd64_width_temp___0 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  unsigned char *tmp___55 ;
  int tmp___56 ;
  unsigned char *tmp___57 ;
  amd64_imm_buf imb___4 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  int tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;

  {
  if ((jit_unsigned_value )imm > 4294967295UL) {
    tmp = jit_get_unused_reg(jit->reg_al, op, 0);
    r = tmp;
    if (r) {
      while (1) {
        _amd64_width_temp = (size_t )((long )imm) == (size_t )((int )((size_t )((long )imm)));
        while (1) {
          while (1) {
            if (_amd64_width_temp) {
              tmp___2 = 4;
            } else {
              tmp___2 = 8;
            }
            if (tmp___2 > 4) {
              tmp___1 = 8;
            } else {
              tmp___1 = 0;
            }
            if (r->id > 7) {
              tmp___3 = 1;
            } else {
              tmp___3 = 0;
            }
            _amd64_rex_bits = (unsigned char )(tmp___1 | tmp___3);
            if ((int )_amd64_rex_bits != 0) {
              tmp___4 = jit->ip;
              (jit->ip) ++;
              *tmp___4 = (unsigned char )(64 | (int )_amd64_rex_bits);
            } else {
              if (_amd64_width_temp) {
                tmp___5 = 4;
              } else {
                tmp___5 = 8;
              }
              if (tmp___5 == 1) {
                tmp___4 = jit->ip;
                (jit->ip) ++;
                *tmp___4 = (unsigned char )(64 | (int )_amd64_rex_bits);
              }
            }
            break;
          }
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = (unsigned char )(184 + (r->id & 7));
          if (_amd64_width_temp) {
            tmp___19 = 4;
          } else {
            tmp___19 = 8;
          }
          if (tmp___19 == 8) {
            while (1) {
              imb.val = (size_t )((long )imm);
              tmp___7 = jit->ip;
              (jit->ip) ++;
              *tmp___7 = imb.b[0];
              tmp___8 = jit->ip;
              (jit->ip) ++;
              *tmp___8 = imb.b[1];
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = imb.b[2];
              tmp___10 = jit->ip;
              (jit->ip) ++;
              *tmp___10 = imb.b[3];
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = imb.b[4];
              tmp___12 = jit->ip;
              (jit->ip) ++;
              *tmp___12 = imb.b[5];
              tmp___13 = jit->ip;
              (jit->ip) ++;
              *tmp___13 = imb.b[6];
              tmp___14 = jit->ip;
              (jit->ip) ++;
              *tmp___14 = imb.b[7];
              break;
            }
          } else {
            while (1) {
              imb___0.val = (int )((size_t )((long )imm));
              tmp___15 = jit->ip;
              (jit->ip) ++;
              *tmp___15 = imb___0.b[0];
              tmp___16 = jit->ip;
              (jit->ip) ++;
              *tmp___16 = imb___0.b[1];
              tmp___17 = jit->ip;
              (jit->ip) ++;
              *tmp___17 = imb___0.b[2];
              tmp___18 = jit->ip;
              (jit->ip) ++;
              *tmp___18 = imb___0.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      while (1) {
        tmp___20 = jit->ip;
        (jit->ip) ++;
        *tmp___20 = (unsigned char)242;
        while (1) {
          if (reg > 7) {
            tmp___21 = 4;
          } else {
            tmp___21 = 0;
          }
          if (r->id == 16) {
            tmp___24 = 0;
          } else {
            tmp___24 = r->id;
          }
          if (tmp___24 > 7) {
            tmp___23 = 1;
          } else {
            tmp___23 = 0;
          }
          _amd64_rex_bits___0 = (unsigned char )(tmp___21 | tmp___23);
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___25 = jit->ip;
            (jit->ip) ++;
            *tmp___25 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___26 = jit->ip;
        (jit->ip) ++;
        *tmp___26 = (unsigned char)15;
        tmp___27 = jit->ip;
        (jit->ip) ++;
        *tmp___27 = (unsigned char )op_id;
        while (1) {
          if (r->id == 16) {
            while (1) {
              tmp___28 = jit->ip;
              (jit->ip) ++;
              *tmp___28 = (unsigned char )((((reg & 7) & 7) << 3) | 5);
              break;
            }
            while (1) {
              imb___1.val = 0;
              tmp___29 = jit->ip;
              (jit->ip) ++;
              *tmp___29 = imb___1.b[0];
              tmp___30 = jit->ip;
              (jit->ip) ++;
              *tmp___30 = imb___1.b[1];
              tmp___31 = jit->ip;
              (jit->ip) ++;
              *tmp___31 = imb___1.b[2];
              tmp___32 = jit->ip;
              (jit->ip) ++;
              *tmp___32 = imb___1.b[3];
              break;
            }
          } else {
            while (1) {
              if ((r->id & 7) == 4) {
                while (1) {
                  tmp___33 = jit->ip;
                  (jit->ip) ++;
                  *tmp___33 = (unsigned char )((((reg & 7) & 7) << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___34 = jit->ip;
                  (jit->ip) ++;
                  *tmp___34 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                break;
              }
              if ((r->id & 7) != 5) {
                while (1) {
                  tmp___43 = jit->ip;
                  (jit->ip) ++;
                  *tmp___43 = (unsigned char )((((reg & 7) & 7) << 3) | ((r->id & 7) & 7));
                  break;
                }
                break;
              }
              while (1) {
                tmp___44 = jit->ip;
                (jit->ip) ++;
                *tmp___44 = (unsigned char )(((1 << 6) | (((reg & 7) & 7) << 3)) | ((r->id & 7) & 7));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
              break;
            }
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)0;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___50 = jit->ip;
            (jit->ip) ++;
            *tmp___50 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___51 = jit->ip;
        (jit->ip) ++;
        *tmp___51 = (unsigned char)80;
        break;
      }
      while (1) {
        _amd64_width_temp___0 = (size_t )((long )imm) == (size_t )((int )((size_t )((long )imm)));
        while (1) {
          while (1) {
            if (_amd64_width_temp___0) {
              tmp___54 = 4;
            } else {
              tmp___54 = 8;
            }
            if (tmp___54 > 4) {
              tmp___53 = 8;
            } else {
              tmp___53 = 0;
            }
            _amd64_rex_bits___2 = (unsigned char )tmp___53;
            if ((int )_amd64_rex_bits___2 != 0) {
              tmp___55 = jit->ip;
              (jit->ip) ++;
              *tmp___55 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
            } else {
              if (_amd64_width_temp___0) {
                tmp___56 = 4;
              } else {
                tmp___56 = 8;
              }
              if (tmp___56 == 1) {
                tmp___55 = jit->ip;
                (jit->ip) ++;
                *tmp___55 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
              }
            }
            break;
          }
          tmp___57 = jit->ip;
          (jit->ip) ++;
          *tmp___57 = (unsigned char)184;
          if (_amd64_width_temp___0) {
            tmp___70 = 4;
          } else {
            tmp___70 = 8;
          }
          if (tmp___70 == 8) {
            while (1) {
              imb___4.val = (size_t )((long )imm);
              tmp___58 = jit->ip;
              (jit->ip) ++;
              *tmp___58 = imb___4.b[0];
              tmp___59 = jit->ip;
              (jit->ip) ++;
              *tmp___59 = imb___4.b[1];
              tmp___60 = jit->ip;
              (jit->ip) ++;
              *tmp___60 = imb___4.b[2];
              tmp___61 = jit->ip;
              (jit->ip) ++;
              *tmp___61 = imb___4.b[3];
              tmp___62 = jit->ip;
              (jit->ip) ++;
              *tmp___62 = imb___4.b[4];
              tmp___63 = jit->ip;
              (jit->ip) ++;
              *tmp___63 = imb___4.b[5];
              tmp___64 = jit->ip;
              (jit->ip) ++;
              *tmp___64 = imb___4.b[6];
              tmp___65 = jit->ip;
              (jit->ip) ++;
              *tmp___65 = imb___4.b[7];
              break;
            }
          } else {
            while (1) {
              imb___5.val = (int )((size_t )((long )imm));
              tmp___66 = jit->ip;
              (jit->ip) ++;
              *tmp___66 = imb___5.b[0];
              tmp___67 = jit->ip;
              (jit->ip) ++;
              *tmp___67 = imb___5.b[1];
              tmp___68 = jit->ip;
              (jit->ip) ++;
              *tmp___68 = imb___5.b[2];
              tmp___69 = jit->ip;
              (jit->ip) ++;
              *tmp___69 = imb___5.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      while (1) {
        tmp___71 = jit->ip;
        (jit->ip) ++;
        *tmp___71 = (unsigned char)242;
        while (1) {
          if (reg > 7) {
            tmp___72 = 4;
          } else {
            tmp___72 = 0;
          }
          _amd64_rex_bits___3 = (unsigned char )tmp___72;
          if ((int )_amd64_rex_bits___3 != 0) {
            tmp___73 = jit->ip;
            (jit->ip) ++;
            *tmp___73 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          }
          break;
        }
        tmp___74 = jit->ip;
        (jit->ip) ++;
        *tmp___74 = (unsigned char)15;
        tmp___75 = jit->ip;
        (jit->ip) ++;
        *tmp___75 = (unsigned char )op_id;
        while (1) {
          while (1) {
            while (1) {
              tmp___91 = jit->ip;
              (jit->ip) ++;
              *tmp___91 = (unsigned char )(((reg & 7) & 7) << 3);
              break;
            }
            break;
            while (1) {
              tmp___92 = jit->ip;
              (jit->ip) ++;
              *tmp___92 = (unsigned char )((1 << 6) | (((reg & 7) & 7) << 3));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)0;
              (jit->ip) ++;
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      while (1) {
        while (1) {
          _amd64_rex_bits___4 = (unsigned char)0;
          if ((int )_amd64_rex_bits___4 != 0) {
            tmp___98 = jit->ip;
            (jit->ip) ++;
            *tmp___98 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
          }
          break;
        }
        tmp___99 = jit->ip;
        (jit->ip) ++;
        *tmp___99 = (unsigned char)88;
        break;
      }
    }
  } else {
    while (1) {
      tmp___100 = jit->ip;
      (jit->ip) ++;
      *tmp___100 = (unsigned char)242;
      while (1) {
        if (reg > 7) {
          tmp___101 = 4;
        } else {
          tmp___101 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(8 | tmp___101);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___102 = jit->ip;
          (jit->ip) ++;
          *tmp___102 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      tmp___103 = jit->ip;
      (jit->ip) ++;
      *tmp___103 = (unsigned char)15;
      tmp___104 = jit->ip;
      (jit->ip) ++;
      *tmp___104 = (unsigned char )op_id;
      while (1) {
        tmp___105 = jit->ip;
        (jit->ip) ++;
        *tmp___105 = (unsigned char )(((reg & 7) << 3) | 4);
        break;
      }
      while (1) {
        tmp___106 = jit->ip;
        (jit->ip) ++;
        *tmp___106 = (unsigned char )((4 << 3) | 5);
        break;
      }
      while (1) {
        imb___9.val = (int )((long )imm);
        tmp___107 = jit->ip;
        (jit->ip) ++;
        *tmp___107 = imb___9.b[0];
        tmp___108 = jit->ip;
        (jit->ip) ++;
        *tmp___108 = imb___9.b[1];
        tmp___109 = jit->ip;
        (jit->ip) ++;
        *tmp___109 = imb___9.b[2];
        tmp___110 = jit->ip;
        (jit->ip) ++;
        *tmp___110 = imb___9.b[3];
        break;
      }
      break;
    }
  }
  return;
}
}
__inline static jit_op *jit_op_first(jit_op *op ) 
{ 


  {
  while ((unsigned long )op->prev != (unsigned long )((void *)0)) {
    op = op->prev;
  }
  return (op);
}
}
void jit_regs_active(jit_op *op , jit_value *dest ) 
{ 


  {
  jit_set_to_array(op->live_out, dest);
  return;
}
}
static jit_op *get_related_op(jit_op *op , int result_reg ) 
{ 
  jit_op *nextop ;
  int tmp ;
  int used ;
  int i ;

  {
  nextop = op->next;
  if (nextop->arg[0] != (jit_value )result_reg) {
    tmp = jit_set_get(nextop->live_out, result_reg);
    if (tmp) {
      return ((jit_op *)((void *)0));
    }
  }
  used = 0;
  i = 0;
  while (i < 3) {
    if ((((int )nextop->spec >> ((i + 1) - 1) * 2) & 3) == 1) {
      if (nextop->arg[i]) {
        used = 1;
        break;
      }
    }
    i ++;
  }
  if (used) {
    return (nextop);
  }
  return ((jit_op *)((void *)0));
}
}
static void report_warning(struct jit *jit , jit_op *op , char *desc ) 
{ 


  {
  fprintf((FILE */* __restrict  */)__stdoutp, (char const   */* __restrict  */)"%s at function `%s\' (%s:%i)\n",
          desc, (op->debug_info)->function, (op->debug_info)->filename, (op->debug_info)->lineno);
  print_op(__stdoutp, & jit_debugging_disasm, op, (jit_tree *)((void *)0), 0);
  fprintf((FILE */* __restrict  */)__stdoutp, (char const   */* __restrict  */)"\n");
  return;
}
}
__inline extern int toascii(int _c ) 
{ 


  {
  return (_c & 127);
}
}
__inline static int jit_set_size(jit_set *s ) 
{ 
  int tmp ;

  {
  tmp = jit_tree_size(s->root);
  return (tmp);
}
}
static void unload_reg(jit_op *op , jit_hw_reg *hreg , long virt_reg ) 
{ 


  {
  insert_reg_op(624, op, virt_reg, (jit_value )hreg->id);
  return;
}
}
static unsigned char *emit_sse_get_sign_mask(void) 
{ 
  unsigned char *buf ;
  unsigned long long *bit_mask ;

  {
  buf = bufx + 1;
  while ((long )buf % 16L) {
    buf ++;
  }
  bit_mask = (unsigned long long *)buf;
  *bit_mask = 1ULL << 63;
  return (buf);
}
}
struct jit_reg_allocator *jit_reg_allocator_create(void) 
{ 
  struct jit_reg_allocator *a ;
  void *tmp ;
  void *tmp___0 ;
  jit_hw_reg __constr_expr_0 ;
  jit_hw_reg __constr_expr_1 ;
  jit_hw_reg __constr_expr_2 ;
  jit_hw_reg __constr_expr_3 ;
  jit_hw_reg __constr_expr_4 ;
  jit_hw_reg __constr_expr_5 ;
  jit_hw_reg __constr_expr_6 ;
  jit_hw_reg __constr_expr_7 ;
  jit_hw_reg __constr_expr_8 ;
  jit_hw_reg __constr_expr_9 ;
  jit_hw_reg __constr_expr_10 ;
  jit_hw_reg __constr_expr_11 ;
  jit_hw_reg __constr_expr_12 ;
  int reg ;
  void *tmp___1 ;
  int tmp___2 ;
  jit_hw_reg __constr_expr_13 ;
  int tmp___3 ;
  jit_hw_reg __constr_expr_14 ;
  int tmp___4 ;
  jit_hw_reg __constr_expr_15 ;
  int tmp___5 ;
  jit_hw_reg __constr_expr_16 ;
  int tmp___6 ;
  jit_hw_reg __constr_expr_17 ;
  int tmp___7 ;
  jit_hw_reg __constr_expr_18 ;
  int tmp___8 ;
  jit_hw_reg __constr_expr_19 ;
  int tmp___9 ;
  jit_hw_reg __constr_expr_20 ;
  int tmp___10 ;
  jit_hw_reg __constr_expr_21 ;
  int tmp___11 ;
  jit_hw_reg __constr_expr_22 ;
  void *tmp___12 ;
  void *tmp___13 ;
  int i ;

  {
  tmp = malloc(sizeof(struct jit_reg_allocator ));
  a = (struct jit_reg_allocator *)tmp;
  a->gp_reg_cnt = 13;
  tmp___0 = malloc(sizeof(jit_hw_reg ) * (unsigned long )a->gp_reg_cnt);
  a->gp_regs = (jit_hw_reg *)tmp___0;
  __constr_expr_0.id = 0;
  __constr_expr_0.name = (char *)"rax";
  __constr_expr_0.callee_saved = (char)0;
  __constr_expr_0.fp = (char)0;
  __constr_expr_0.priority = (short)7;
  *(a->gp_regs + 0) = __constr_expr_0;
  __constr_expr_1.id = 3;
  __constr_expr_1.name = (char *)"rbx";
  __constr_expr_1.callee_saved = (char)1;
  __constr_expr_1.fp = (char)0;
  __constr_expr_1.priority = (short)8;
  *(a->gp_regs + 1) = __constr_expr_1;
  __constr_expr_2.id = 1;
  __constr_expr_2.name = (char *)"rcx";
  __constr_expr_2.callee_saved = (char)0;
  __constr_expr_2.fp = (char)0;
  __constr_expr_2.priority = (short)4;
  *(a->gp_regs + 2) = __constr_expr_2;
  __constr_expr_3.id = 2;
  __constr_expr_3.name = (char *)"rdx";
  __constr_expr_3.callee_saved = (char)0;
  __constr_expr_3.fp = (char)0;
  __constr_expr_3.priority = (short)3;
  *(a->gp_regs + 3) = __constr_expr_3;
  __constr_expr_4.id = 6;
  __constr_expr_4.name = (char *)"rsi";
  __constr_expr_4.callee_saved = (char)0;
  __constr_expr_4.fp = (char)0;
  __constr_expr_4.priority = (short)2;
  *(a->gp_regs + 4) = __constr_expr_4;
  __constr_expr_5.id = 7;
  __constr_expr_5.name = (char *)"rdi";
  __constr_expr_5.callee_saved = (char)0;
  __constr_expr_5.fp = (char)0;
  __constr_expr_5.priority = (short)1;
  *(a->gp_regs + 5) = __constr_expr_5;
  __constr_expr_6.id = 8;
  __constr_expr_6.name = (char *)"r8";
  __constr_expr_6.callee_saved = (char)0;
  __constr_expr_6.fp = (char)0;
  __constr_expr_6.priority = (short)5;
  *(a->gp_regs + 6) = __constr_expr_6;
  __constr_expr_7.id = 9;
  __constr_expr_7.name = (char *)"r9";
  __constr_expr_7.callee_saved = (char)0;
  __constr_expr_7.fp = (char)0;
  __constr_expr_7.priority = (short)6;
  *(a->gp_regs + 7) = __constr_expr_7;
  __constr_expr_8.id = 10;
  __constr_expr_8.name = (char *)"r10";
  __constr_expr_8.callee_saved = (char)0;
  __constr_expr_8.fp = (char)0;
  __constr_expr_8.priority = (short)9;
  *(a->gp_regs + 8) = __constr_expr_8;
  __constr_expr_9.id = 11;
  __constr_expr_9.name = (char *)"r11";
  __constr_expr_9.callee_saved = (char)0;
  __constr_expr_9.fp = (char)0;
  __constr_expr_9.priority = (short)10;
  *(a->gp_regs + 9) = __constr_expr_9;
  __constr_expr_10.id = 12;
  __constr_expr_10.name = (char *)"r12";
  __constr_expr_10.callee_saved = (char)1;
  __constr_expr_10.fp = (char)0;
  __constr_expr_10.priority = (short)11;
  *(a->gp_regs + 10) = __constr_expr_10;
  __constr_expr_11.id = 14;
  __constr_expr_11.name = (char *)"r14";
  __constr_expr_11.callee_saved = (char)1;
  __constr_expr_11.fp = (char)0;
  __constr_expr_11.priority = (short)13;
  *(a->gp_regs + 11) = __constr_expr_11;
  __constr_expr_12.id = 15;
  __constr_expr_12.name = (char *)"r15";
  __constr_expr_12.callee_saved = (char)1;
  __constr_expr_12.fp = (char)0;
  __constr_expr_12.priority = (short)14;
  *(a->gp_regs + 12) = __constr_expr_12;
  a->gp_arg_reg_cnt = 6;
  a->fp_reg = 5;
  a->ret_reg = a->gp_regs + 0;
  a->fp_reg_cnt = 10;
  reg = 0;
  tmp___1 = malloc(sizeof(jit_hw_reg ) * (unsigned long )a->fp_reg_cnt);
  a->fp_regs = (jit_hw_reg *)tmp___1;
  tmp___2 = reg;
  reg ++;
  __constr_expr_13.id = 0;
  __constr_expr_13.name = (char *)"xmm0";
  __constr_expr_13.callee_saved = (char)0;
  __constr_expr_13.fp = (char)1;
  __constr_expr_13.priority = (short)99;
  *(a->fp_regs + tmp___2) = __constr_expr_13;
  tmp___3 = reg;
  reg ++;
  __constr_expr_14.id = 1;
  __constr_expr_14.name = (char *)"xmm1";
  __constr_expr_14.callee_saved = (char)0;
  __constr_expr_14.fp = (char)1;
  __constr_expr_14.priority = (short)98;
  *(a->fp_regs + tmp___3) = __constr_expr_14;
  tmp___4 = reg;
  reg ++;
  __constr_expr_15.id = 2;
  __constr_expr_15.name = (char *)"xmm2";
  __constr_expr_15.callee_saved = (char)0;
  __constr_expr_15.fp = (char)1;
  __constr_expr_15.priority = (short)97;
  *(a->fp_regs + tmp___4) = __constr_expr_15;
  tmp___5 = reg;
  reg ++;
  __constr_expr_16.id = 3;
  __constr_expr_16.name = (char *)"xmm3";
  __constr_expr_16.callee_saved = (char)0;
  __constr_expr_16.fp = (char)1;
  __constr_expr_16.priority = (short)96;
  *(a->fp_regs + tmp___5) = __constr_expr_16;
  tmp___6 = reg;
  reg ++;
  __constr_expr_17.id = 4;
  __constr_expr_17.name = (char *)"xmm4";
  __constr_expr_17.callee_saved = (char)0;
  __constr_expr_17.fp = (char)1;
  __constr_expr_17.priority = (short)95;
  *(a->fp_regs + tmp___6) = __constr_expr_17;
  tmp___7 = reg;
  reg ++;
  __constr_expr_18.id = 5;
  __constr_expr_18.name = (char *)"xmm5";
  __constr_expr_18.callee_saved = (char)0;
  __constr_expr_18.fp = (char)1;
  __constr_expr_18.priority = (short)94;
  *(a->fp_regs + tmp___7) = __constr_expr_18;
  tmp___8 = reg;
  reg ++;
  __constr_expr_19.id = 6;
  __constr_expr_19.name = (char *)"xmm6";
  __constr_expr_19.callee_saved = (char)0;
  __constr_expr_19.fp = (char)1;
  __constr_expr_19.priority = (short)93;
  *(a->fp_regs + tmp___8) = __constr_expr_19;
  tmp___9 = reg;
  reg ++;
  __constr_expr_20.id = 7;
  __constr_expr_20.name = (char *)"xmm7";
  __constr_expr_20.callee_saved = (char)0;
  __constr_expr_20.fp = (char)1;
  __constr_expr_20.priority = (short)92;
  *(a->fp_regs + tmp___9) = __constr_expr_20;
  tmp___10 = reg;
  reg ++;
  __constr_expr_21.id = 13;
  __constr_expr_21.name = (char *)"xmm13";
  __constr_expr_21.callee_saved = (char)0;
  __constr_expr_21.fp = (char)1;
  __constr_expr_21.priority = (short)1;
  *(a->fp_regs + tmp___10) = __constr_expr_21;
  tmp___11 = reg;
  reg ++;
  __constr_expr_22.id = 12;
  __constr_expr_22.name = (char *)"xmm12";
  __constr_expr_22.callee_saved = (char)0;
  __constr_expr_22.fp = (char)1;
  __constr_expr_22.priority = (short)2;
  *(a->fp_regs + tmp___11) = __constr_expr_22;
  a->fpret_reg = a->fp_regs + 0;
  a->gp_arg_reg_cnt = 6;
  tmp___12 = malloc(sizeof(jit_hw_reg *) * 6UL);
  a->gp_arg_regs = (jit_hw_reg **)tmp___12;
  *(a->gp_arg_regs + 0) = a->gp_regs + 5;
  *(a->gp_arg_regs + 1) = a->gp_regs + 4;
  *(a->gp_arg_regs + 2) = a->gp_regs + 3;
  *(a->gp_arg_regs + 3) = a->gp_regs + 2;
  *(a->gp_arg_regs + 4) = a->gp_regs + 6;
  *(a->gp_arg_regs + 5) = a->gp_regs + 7;
  a->fp_arg_reg_cnt = 8;
  tmp___13 = malloc(sizeof(jit_hw_reg *) * 8UL);
  a->fp_arg_regs = (jit_hw_reg **)tmp___13;
  i = 0;
  while (i < 8) {
    *(a->fp_arg_regs + i) = a->fp_regs + i;
    i ++;
  }
  return (a);
}
}
static jit_op *print_combined_op(FILE *f , struct jit *jit , struct jit_op *op , jit_tree *labels ) 
{ 
  jit_opcode opcode ;
  int i ;
  char *tmp ;

  {
  opcode = (jit_opcode )((int )op->code & 65528);
  if ((unsigned int )opcode == 352U) {
    goto _L;
  } else
  if ((unsigned int )opcode == 880U) {
    _L: /* CIL Label */ 
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".text\n%s.byte\n",
            jit_disasm_general.indent_template);
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".data\n");
    while (1) {
      if (op) {
        if (! ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 352U)) {
          if (! ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 880U)) {
            break;
          }
        }
      } else {
        break;
      }
      if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 352U) {
        fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"%02x ",
                (int )((unsigned char )op->arg[0]));
      }
      if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 880U) {
        i = 0;
        while ((jit_value )i < op->arg[0]) {
          fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"%02x ",
                  (int )*((unsigned char *)op->addendum + i));
          i ++;
        }
      }
      op = op->next;
    }
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"\n");
    if (! op) {
      return ((jit_op *)((void *)0));
    }
    op = op->prev;
    return (op);
  }
  if ((unsigned int )opcode == 152U) {
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".comment\n");
    print_op(f, & jit_disasm_general, op, labels, 256);
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"\n");
    return (op);
  }
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".text\n");
  print_op(f, & jit_disasm_general, op, labels, 256);
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"\n");
  switch ((unsigned int )opcode) {
  case 760U: 
  if (op->next) {
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"\n.nl\n");
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".addr=%lx\n",
            (unsigned long )(jit->buf + (op->next)->code_offset));
  }
  break;
  case 488U: 
  case 520U: 
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".data\n");
  print_op_bytes(f, jit, op);
  break;
  default: 
  if (! op->code_length) {
    break;
  }
  tmp = platform_id();
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".%s\n", tmp);
  print_op_bytes(f, jit, op);
  }
  return (op);
}
}
static void jit_dead_code_analysis(struct jit *jit , int remove_dead_code ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  jit_op *op___0 ;
  jit_op *tmp___0 ;
  jit_op *op___1 ;
  jit_op *tmp___1 ;
  jit_op *op___2 ;
  jit_op *tmp___2 ;
  jit_op *next ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while (op) {
    op->in_use = (unsigned char)0;
    op = op->next;
  }
  tmp___0 = jit_op_first(jit->ops);
  op___0 = tmp___0;
  while (op___0) {
    if ((unsigned int )((jit_opcode )((int )op___0->code & 65528)) == 536U) {
      mark_livecode(op___0);
    }
    if ((unsigned int )((jit_opcode )((int )op___0->code & 65528)) == 520U) {
      mark_livecode(op___0->jmp_addr);
    }
    op___0 = op___0->next;
  }
  tmp___1 = jit_op_first(jit->ops);
  op___1 = tmp___1;
  while (op___1) {
    if ((unsigned int )((jit_opcode )((int )op___1->code & 65528)) == 496U) {
      op___1->in_use = (unsigned char)1;
    }
    if ((unsigned int )((jit_opcode )((int )op___1->code & 65528)) == 352U) {
      op___1->in_use = (unsigned char)1;
    }
    if ((unsigned int )((jit_opcode )((int )op___1->code & 65528)) == 520U) {
      op___1->in_use = (unsigned char)1;
    }
    if ((unsigned int )((jit_opcode )((int )op___1->code & 65528)) == 488U) {
      op___1->in_use = (unsigned char)1;
    }
    if ((unsigned int )((jit_opcode )((int )op___1->code & 65528)) == 760U) {
      op___1->in_use = (unsigned char)1;
    }
    if ((unsigned int )((jit_opcode )((int )op___1->code & 65528)) == 456U) {
      op___1->in_use = (unsigned char)1;
    }
    if ((unsigned int )((jit_opcode )((int )op___1->code & 65528)) == 136U) {
      op___1->in_use = (unsigned char)1;
    }
    if ((unsigned int )((jit_opcode )((int )op___1->code & 65528)) == 152U) {
      op___1->in_use = (unsigned char)1;
    }
    if ((unsigned int )((jit_opcode )((int )op___1->code & 65528)) == 128U) {
      op___1->in_use = (unsigned char)1;
    }
    op___1 = op___1->next;
  }
  if (! remove_dead_code) {
    return;
  }
  tmp___2 = jit_op_first(jit->ops);
  op___2 = tmp___2;
  while (op___2) {
    if (! op___2->in_use) {
      if ((unsigned int )((jit_opcode )((int )op___2->code & 65528)) == 704U) {
        goto skip;
      }
      next = op___2->next;
      jit_op_delete(op___2);
      op___2 = next;
      continue;
    }
    skip: 
    op___2 = op___2->next;
  }
  return;
}
}
int jit_regs_active_count(jit_op *op ) 
{ 
  int tmp ;

  {
  tmp = jit_set_size(op->live_out);
  return (tmp);
}
}
__inline static void color_flip(jit_tree *h ) 
{ 


  {
  h->color = ! h->color;
  (h->left)->color = ! (h->left)->color;
  (h->right)->color = ! (h->right)->color;
  return;
}
}
void _cipher$_xtea_encipher(unsigned int block_no , unsigned int num_rounds , unsigned int *v ,
                            unsigned int *key , unsigned int size ) 
{ 
  unsigned int i ;

  {
  i = 0;
  while (i < size / 8) {
    _cipher$_xtea_encipherBlock(num_rounds, v, key);
    v += 2;
    i ++;
  }
}
}
static void jit_tree_free(jit_tree *h ) 
{ 


  {
  if ((unsigned long )h == (unsigned long )((void *)0)) {
    return;
  }
  jit_tree_free(h->left);
  jit_tree_free(h->right);
  free((void *)h);
  return;
}
}
int main(int argc , char **argv , char **_formal_envp ) 
{ 
  int _BARRIER_0 ;

  {
  megaInit();
  _global_argc = argc;
  _global_argv = argv;
  _global_envp = _formal_envp;
  _BARRIER_0 = 1;
  init_tigress();
  fac(10);
  fib(10);
  return (0);
}
}
static jit_rmap *rmap_clone(jit_rmap *rmap ) 
{ 
  jit_rmap *res ;
  void *tmp ;

  {
  tmp = malloc(sizeof(jit_rmap ));
  res = (jit_rmap *)tmp;
  res->map = jit_tree_clone(rmap->map);
  return (res);
}
}
static int jit_imm_overflow(struct jit *jit , jit_op *op , long value ) 
{ 
  unsigned long mask ;
  unsigned long high_bits ;

  {
  mask = ~ ((1UL << 31) - 1UL);
  high_bits = (unsigned long )value & mask;
  if (! ((int )op->code & 4)) {
    if (high_bits != 0UL) {
      if (high_bits != mask) {
        return (1);
      }
    }
  } else
  if (high_bits != 0UL) {
    return (1);
  }
  return (0);
}
}
int print_op_compilable(struct jit_disasm *disasm , struct jit_op *op , jit_tree *labels ) 
{ 
  struct output_buf *linebuf ;
  struct output_buf *tmp ;
  jit_tree *lab ;
  jit_tree *tmp___0 ;
  int tmp___1 ;
  jit_tree *lab___0 ;
  jit_tree *tmp___2 ;
  int i ;
  char *tmp___3 ;
  char *tmp___4 ;
  char *tmp___5 ;
  long tmp___6 ;
  int len ;

  {
  tmp = ob_new();
  linebuf = tmp;
  tmp___0 = jit_tree_search(labels, (long )op);
  lab = tmp___0;
  if (lab) {
    if ((long )lab->value > 0L) {
      ob_printf(linebuf, "// ");
      ob_printf(linebuf, (char const   *)disasm->label_template, (long )lab->value);
      ob_printf(linebuf, ":\n");
    }
  }
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 152U) {
    print_comment(linebuf, op);
    goto direct_print;
  }
  ob_append(linebuf, disasm->indent_template);
  tmp___1 = jit_op_is_cflow(op);
  if (tmp___1) {
    if ((unsigned long )((void *)op->arg[0]) == (unsigned long )((void *)0)) {
      ob_printf(linebuf, "jit_op * op_%li = ", (unsigned long )op >> 4);
    } else {
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 832U) {
    ob_printf(linebuf, "jit_op * op_%li = ", (unsigned long )op >> 4);
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 56U) {
    ob_printf(linebuf, "jit_op * op_%li = ", (unsigned long )op >> 4);
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 520U) {
    ob_printf(linebuf, "jit_op * op_%li = ", (unsigned long )op >> 4);
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 488U) {
    ob_printf(linebuf, "jit_op * op_%li = ", (unsigned long )op >> 4);
  }
  switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
  case 456U: 
  ob_printf(linebuf, "jit_label * ");
  tmp___2 = jit_tree_search(labels, op->arg[0]);
  lab___0 = tmp___2;
  if (lab___0) {
    ob_printf(linebuf, (char const   *)disasm->label_template, (long )lab___0->value);
  }
  ob_printf(linebuf, " = jit_get_label(p");
  goto print;
  case 136U: 
  ob_printf(linebuf, "jit_patch  (p, op_%li", (unsigned long )op->arg[0] >> 4);
  goto print;
  case 352U: 
  ob_printf(linebuf, "jit_data_byte(p, ");
  ob_printf(linebuf, (char const   *)disasm->generic_value_template, op->arg[0]);
  goto print;
  case 880U: 
  i = 0;
  while ((jit_value )i < op->arg[0]) {
    ob_printf(linebuf, "jit_data_byte(p, ");
    ob_printf(linebuf, (char const   *)disasm->generic_value_template, (int )*((unsigned char *)op->addendum + i));
    if ((jit_value )i < op->arg[0] - 1L) {
      ob_printf(linebuf, ");\n");
    }
    i ++;
  }
  goto print;
  case 56U: 
  case 832U: 
  tmp___3 = jit_get_op_name(op);
  ob_printf(linebuf, "jit_%s(p, ", tmp___3);
  print_arg(disasm, linebuf, op, 1);
  ob_append(linebuf, (char *)", ");
  print_addr(disasm, linebuf, labels, op, 1);
  goto print;
  case 488U: 
  case 520U: 
  tmp___4 = jit_get_op_name(op);
  ob_printf(linebuf, "jit_data_%s(p, ", tmp___4 + 1);
  print_addr(disasm, linebuf, labels, op, 0);
  goto print;
  case 760U: 
  ob_printf(linebuf, "jit_code_align  (p, ");
  ob_printf(linebuf, (char const   *)disasm->generic_value_template, op->arg[0]);
  goto print;
  case 776U: 
  ob_printf(linebuf, "jit_prepare(p");
  goto print;
  default: 
  break;
  }
  tmp___5 = jit_get_op_name(op);
  if ((int )*(tmp___5 + 0) == 46) {
    goto direct_print;
  }
  ob_append(linebuf, (char *)"jit_");
  print_full_op_name(linebuf, op);
  ob_pad(linebuf, 15);
  ob_append(linebuf, (char *)"(p,");
  switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
  case 320U: 
  print_str(linebuf, (char *)op->arg[0]);
  if (! ((int )op->code & 2)) {
    ob_append(linebuf, (char *)", ");
    print_arg(disasm, linebuf, op, 2);
  }
  break;
  case 784U: 
  switch (op->arg[0]) {
  case 0L: 
  ob_append(linebuf, (char *)"JIT_SIGNED_NUM");
  break;
  case 1L: 
  ob_append(linebuf, (char *)"JIT_UNSIGNED_NUM");
  break;
  case 2L: 
  ob_append(linebuf, (char *)"JIT_FLOAT_NUM");
  break;
  case 3L: 
  ob_append(linebuf, (char *)"JIT_PTR");
  break;
  default: 
  tmp___6 = __builtin_expect(1L, 0L);
  if (tmp___6) {
    __assert_rtn("print_op_compilable", "./jitter-amd64.c", 3989, "0");
  }
  }
  ob_append(linebuf, (char *)", ");
  print_arg(disasm, linebuf, op, 2);
  break;
  default: 
  print_args(disasm, linebuf, op, labels);
  }
  if (op->arg_size) {
    ob_printf(linebuf, ", %i", (int )op->arg_size);
  }
  print: 
  ob_append(linebuf, (char *)");");
  direct_print: 
  printf((char const   */* __restrict  */)"%s", linebuf->buf);
  len = (int )linebuf->size;
  ob_free(linebuf);
  return (len);
}
}
static void cleanup(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  struct jit_func_info *info ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while (op) {
    if (op->live_in) {
      jit_set_free(op->live_in);
      op->live_in = (struct jit_set *)((void *)0);
    }
    if (op->live_out) {
      jit_set_free(op->live_out);
      op->live_out = (struct jit_set *)((void *)0);
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 536U) {
      if (op->arg[1]) {
        info = (struct jit_func_info *)op->arg[1];
        free((void *)info->args);
        info->args = (struct jit_inp_arg *)((void *)0);
      }
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 776U) {
      op->arg[0] = (jit_value )0;
      op->arg[1] = (jit_value )0;
    }
    op = op->next;
  }
  return;
}
}
static void jit_dump_ops_compilable(struct jit *jit , jit_tree *labels ) 
{ 
  jit_op *op ;
  jit_op *tmp ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    print_op_compilable(& jit_disasm_compilable, op, labels);
    printf((char const   */* __restrict  */)"\n");
    op = op->next;
  }
  return;
}
}
void jit_disasm_general_i$nit(void) 
{ 


  {
  jit_disasm_general.indent_template = (char *)"    ";
  jit_disasm_general.reg_template = (char *)"r%i";
  jit_disasm_general.freg_template = (char *)"fr%i";
  jit_disasm_general.arg_template = (char *)"arg%i";
  jit_disasm_general.farg_template = (char *)"farg%i";
  jit_disasm_general.reg_fp_template = (char *)"fp";
  jit_disasm_general.reg_out_template = (char *)"out";
  jit_disasm_general.reg_imm_template = (char *)"imm";
  jit_disasm_general.reg_fimm_template = (char *)"fimm";
  jit_disasm_general.reg_unknown_template = (char *)"(unknown reg.)";
  jit_disasm_general.label_template = (char *)"L%i";
  jit_disasm_general.label_forward_template = (char *)"L%i";
  jit_disasm_general.generic_addr_template = (char *)"<addr: 0x%lx>";
  jit_disasm_general.generic_value_template = (char *)"0x%lx";
}
}
static void emit_sse_div_op(struct jit *jit , long a1 , long a2 , long a3 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___12 ;
  int tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___19 ;
  int tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___31 ;
  int tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___38 ;
  int tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;

  {
  if (a1 == a2) {
    while (1) {
      tmp = jit->ip;
      (jit->ip) ++;
      *tmp = (unsigned char)242;
      while (1) {
        if (a1 > 7L) {
          tmp___0 = 4;
        } else {
          tmp___0 = 0;
        }
        if (a3 > 7L) {
          tmp___1 = 1;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)15;
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)94;
      while (1) {
        while (1) {
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a3 & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else
  if (a1 == a3) {
    while (1) {
      while (1) {
        tmp___6 = jit->ip;
        (jit->ip) ++;
        *tmp___6 = (unsigned char)102;
        while (1) {
          tmp___7 = jit->ip;
          (jit->ip) ++;
          *tmp___7 = (unsigned char)15;
          tmp___8 = jit->ip;
          (jit->ip) ++;
          *tmp___8 = (unsigned char)198;
          while (1) {
            while (1) {
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      tmp___10 = jit->ip;
      (jit->ip) ++;
      *tmp___10 = (unsigned char)0;
      break;
    }
    while (1) {
      tmp___11 = jit->ip;
      (jit->ip) ++;
      *tmp___11 = (unsigned char)242;
      while (1) {
        if (a2 > 7L) {
          tmp___12 = 4;
        } else {
          tmp___12 = 0;
        }
        if (a3 > 7L) {
          tmp___13 = 1;
        } else {
          tmp___13 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(tmp___12 | tmp___13);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      tmp___15 = jit->ip;
      (jit->ip) ++;
      *tmp___15 = (unsigned char)15;
      tmp___16 = jit->ip;
      (jit->ip) ++;
      *tmp___16 = (unsigned char)94;
      while (1) {
        while (1) {
          tmp___17 = jit->ip;
          (jit->ip) ++;
          *tmp___17 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a3 & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      tmp___18 = jit->ip;
      (jit->ip) ++;
      *tmp___18 = (unsigned char)242;
      while (1) {
        if (a1 > 7L) {
          tmp___19 = 4;
        } else {
          tmp___19 = 0;
        }
        if (a2 > 7L) {
          tmp___20 = 1;
        } else {
          tmp___20 = 0;
        }
        _amd64_rex_bits___1 = (unsigned char )(tmp___19 | tmp___20);
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___21 = jit->ip;
          (jit->ip) ++;
          *tmp___21 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      tmp___22 = jit->ip;
      (jit->ip) ++;
      *tmp___22 = (unsigned char)15;
      tmp___23 = jit->ip;
      (jit->ip) ++;
      *tmp___23 = (unsigned char)16;
      while (1) {
        while (1) {
          tmp___24 = jit->ip;
          (jit->ip) ++;
          *tmp___24 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        tmp___25 = jit->ip;
        (jit->ip) ++;
        *tmp___25 = (unsigned char)102;
        while (1) {
          tmp___26 = jit->ip;
          (jit->ip) ++;
          *tmp___26 = (unsigned char)15;
          tmp___27 = jit->ip;
          (jit->ip) ++;
          *tmp___27 = (unsigned char)198;
          while (1) {
            while (1) {
              tmp___28 = jit->ip;
              (jit->ip) ++;
              *tmp___28 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      tmp___29 = jit->ip;
      (jit->ip) ++;
      *tmp___29 = (unsigned char)1;
      break;
    }
  } else {
    while (1) {
      tmp___30 = jit->ip;
      (jit->ip) ++;
      *tmp___30 = (unsigned char)242;
      while (1) {
        if (a1 > 7L) {
          tmp___31 = 4;
        } else {
          tmp___31 = 0;
        }
        if (a2 > 7L) {
          tmp___32 = 1;
        } else {
          tmp___32 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )(tmp___31 | tmp___32);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___33 = jit->ip;
          (jit->ip) ++;
          *tmp___33 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___34 = jit->ip;
      (jit->ip) ++;
      *tmp___34 = (unsigned char)15;
      tmp___35 = jit->ip;
      (jit->ip) ++;
      *tmp___35 = (unsigned char)16;
      while (1) {
        while (1) {
          tmp___36 = jit->ip;
          (jit->ip) ++;
          *tmp___36 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      tmp___37 = jit->ip;
      (jit->ip) ++;
      *tmp___37 = (unsigned char)242;
      while (1) {
        if (a1 > 7L) {
          tmp___38 = 4;
        } else {
          tmp___38 = 0;
        }
        if (a3 > 7L) {
          tmp___39 = 1;
        } else {
          tmp___39 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )(tmp___38 | tmp___39);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___40 = jit->ip;
          (jit->ip) ++;
          *tmp___40 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      tmp___41 = jit->ip;
      (jit->ip) ++;
      *tmp___41 = (unsigned char)15;
      tmp___42 = jit->ip;
      (jit->ip) ++;
      *tmp___42 = (unsigned char)94;
      while (1) {
        while (1) {
          tmp___43 = jit->ip;
          (jit->ip) ++;
          *tmp___43 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a3 & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
__inline extern int isphonogram(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 2097152UL);
  return (tmp);
}
}
static int emit_pop_callee_saved_regs(struct jit *jit ) 
{ 
  int count ;
  struct jit_op *op ;
  jit_hw_reg *active_regs[32] ;
  int i ;
  jit_hw_reg *r ;
  struct jit_op *o ;
  int tmp ;
  int stack_space ;
  jit_value tmp___0 ;
  int stack_offset ;
  int i___0 ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;

  {
  count = 0;
  op = jit->current_func;
  i = (jit->reg_al)->gp_reg_cnt - 1;
  while (i >= 0) {
    r = (jit->reg_al)->gp_regs + i;
    if (r->callee_saved) {
      o = op->next;
      while ((unsigned long )o != (unsigned long )((void *)0)) {
        if ((unsigned int )((jit_opcode )((int )o->code & 65528)) == 536U) {
          break;
        }
        tmp = uses_hw_reg(o, (jit_value )r->id, 0);
        if (tmp) {
          active_regs[count] = r;
          count ++;
          break;
        }
        o = o->next;
      }
    }
    i --;
  }
  tmp___0 = jit_value_align((jit_value )((unsigned long )count * sizeof(void *)),
                            (jit_value )16);
  stack_space = (int )tmp___0;
  stack_offset = (int )((unsigned long )stack_space - (unsigned long )count * sizeof(void *));
  i___0 = 0;
  while (i___0 < count) {
    stack_offset = emit_pop_reg(jit, active_regs[i___0], stack_offset);
    i___0 ++;
  }
  if (stack_space) {
    while (1) {
      if (stack_space >= -128) {
        if (stack_space <= 127) {
          while (1) {
            _amd64_rex_bits = (unsigned char)8;
            if ((int )_amd64_rex_bits != 0) {
              tmp___1 = jit->ip;
              (jit->ip) ++;
              *tmp___1 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___3 = jit->ip;
              (jit->ip) ++;
              *tmp___3 = (unsigned char )((3 << 6) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(stack_space & 255);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)8;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___10 = jit->ip;
            (jit->ip) ++;
            *tmp___10 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___11 = jit->ip;
        (jit->ip) ++;
        *tmp___11 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = (unsigned char )((3 << 6) | 4);
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = stack_space;
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = imb___0.b[0];
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = imb___0.b[1];
          tmp___15 = jit->ip;
          (jit->ip) ++;
          *tmp___15 = imb___0.b[2];
          tmp___16 = jit->ip;
          (jit->ip) ++;
          *tmp___16 = imb___0.b[3];
          break;
        }
      }
      break;
    }
  }
  return (count);
}
}
void print_full_op_name(struct output_buf *linebuf , jit_op *op ) 
{ 
  char *op_name ;
  char *tmp ;

  {
  tmp = jit_get_op_name(op);
  op_name = tmp;
  ob_append(linebuf, op_name);
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 0U) {
    if (((int )op->code & 7) & 2) {
      return;
    }
  }
  if (((int )op->code & 7) & 2) {
    ob_append(linebuf, (char *)"i");
  }
  if (((int )op->code & 7) & 1) {
    ob_append(linebuf, (char *)"r");
  }
  if (((int )op->code & 7) & 4) {
    ob_append(linebuf, (char *)"_u");
  }
  return;
}
}
struct jit_debug_info *jit_debug_info_new(char const   *filename , char const   *function ,
                                          int lineno ) 
{ 
  struct jit_debug_info *r ;
  void *tmp ;

  {
  tmp = malloc(sizeof(struct jit_debug_info ));
  r = (struct jit_debug_info *)tmp;
  r->filename = filename;
  r->function = function;
  r->lineno = lineno;
  r->warnings = 0;
  return (r);
}
}
__inline static void jit_prepare_reg_counts(struct jit *jit ) 
{ 
  int declared_args ;
  int last_gp ;
  int last_fp ;
  int gp_args ;
  int fp_args ;
  struct jit_func_info *info ;
  jit_op *op ;
  jit_op *tmp ;
  void *tmp___0 ;
  int i ;
  jit_reg r ;
  jit_op *xop ;
  jit_opcode next_code ;

  {
  declared_args = 0;
  last_gp = -1;
  last_fp = -1;
  gp_args = 0;
  fp_args = 0;
  info = (struct jit_func_info *)((void *)0);
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while (1) {
    if (! op) {
      goto _L;
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 536U) {
      _L: /* CIL Label */ 
      if (info) {
        info->gp_reg_count = last_gp + 1;
        info->fp_reg_count = last_fp + 1;
        info->general_arg_cnt = gp_args;
        info->float_arg_cnt = fp_args;
        while ((info->gp_reg_count + info->fp_reg_count) % 2) {
          (info->gp_reg_count) ++;
        }
        tmp___0 = malloc(sizeof(struct jit_inp_arg ) * (unsigned long )declared_args);
        info->args = (struct jit_inp_arg *)tmp___0;
      }
      if (op) {
        declared_args = 0;
        last_gp = -1;
        last_fp = -1;
        gp_args = 0;
        fp_args = 0;
        info = (struct jit_func_info *)op->arg[1];
      }
      if (! op) {
        break;
      }
    }
    i = 0;
    while (i < 3) {
      if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 3) {
        goto _L___0;
      } else
      if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 1) {
        _L___0: /* CIL Label */ 
        r = op->arg[i];
        if ((r & 1L) == 0L) {
          if (((r >> 4) & 268435455L) > (long )last_gp) {
            last_gp = (int )((r >> 4) & 268435455L);
          }
        }
        if ((r & 1L) == 1L) {
          if (((r >> 4) & 268435455L) > (long )last_fp) {
            last_fp = (int )((r >> 4) & 268435455L);
          }
        }
      }
      i ++;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 784U) {
      declared_args ++;
      if (op->arg[0] == 2L) {
        fp_args ++;
      } else {
        gp_args ++;
      }
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 776U) {
      xop = op;
      while (1) {
        if ((unsigned int )((jit_opcode )((int )(op->next)->code & 65528)) == 448U) {
          (xop->arg[0]) ++;
        } else
        if ((unsigned int )((jit_opcode )((int )(op->next)->code & 65528)) == 120U) {
          (xop->arg[1]) ++;
        } else {
          next_code = (jit_opcode )((int )(op->next)->code & 65528);
          if ((unsigned int )next_code == 0U) {
            break;
          }
          if ((unsigned int )next_code != 360U) {
            if ((unsigned int )next_code != 760U) {
              if ((unsigned int )next_code != 624U) {
                if ((unsigned int )next_code != 432U) {
                  if ((unsigned int )next_code != 16U) {
                    if ((unsigned int )next_code != 416U) {
                      printf((char const   */* __restrict  */)"Garbage in the prepare-call block. Opcode: %x\n",
                             (unsigned int )next_code >> 3);
                      abort();
                    }
                  }
                }
              }
            }
          }
        }
        op = op->next;
      }
    }
    op = op->next;
  }
  return;
}
}
static void prepare_registers_for_call(struct jit_reg_allocator *al , jit_op *op ) 
{ 
  jit_value r ;
  jit_value reg ;
  jit_hw_reg *hreg ;
  int alive ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int spill ;
  jit_value spill_reg ;
  jit_hw_reg *freereg ;
  jit_hw_reg *tmp___2 ;
  int args ;
  jit_value tmp___3 ;
  int q ;
  jit_hw_reg *hreg___0 ;
  jit_hw_reg *tmp___4 ;
  int tmp___5 ;
  int q___0 ;
  jit_hw_reg *hreg___1 ;
  jit_hw_reg *tmp___6 ;
  int tmp___7 ;

  {
  hreg = (jit_hw_reg *)((void *)0);
  if (al->ret_reg) {
    hreg = rmap_is_associated(op->regmap, (al->ret_reg)->id, 0, & r);
  }
  if (hreg) {
    tmp = jit_set_get(op->live_out, (int )r);
    if (tmp) {
      tmp___1 = 1;
    } else {
      tmp___0 = jit_set_get(op->live_in, (int )r);
      if (tmp___0) {
        tmp___1 = 1;
      } else {
        tmp___1 = 0;
      }
    }
    alive = tmp___1;
    if (! alive) {
      goto skip;
    }
    tmp___2 = rmap_spill_candidate(al, op, r, & spill, & spill_reg, 1);
    freereg = tmp___2;
    if (freereg) {
      if (! spill) {
        rename_reg(op, freereg->id, (al->ret_reg)->id);
        rmap_unassoc(op->regmap, r);
        rmap_assoc(op->regmap, r, freereg);
      } else {
        sync_reg(op, hreg, r);
      }
    } else {
      sync_reg(op, hreg, r);
    }
  }
  skip: 
  if (al->fpret_reg) {
    hreg = rmap_is_associated(op->regmap, (al->fpret_reg)->id, 1, & r);
    if (hreg) {
      sync_reg(op, hreg, r);
    }
  }
  if (op->arg[0] < (jit_value )al->gp_arg_reg_cnt) {
    tmp___3 = op->arg[0];
  } else {
    tmp___3 = (jit_value )al->gp_arg_reg_cnt;
  }
  args = (int )tmp___3;
  q = 0;
  while (q < args) {
    tmp___4 = rmap_is_associated(op->regmap, (*(al->gp_arg_regs + q))->id, 0, & reg);
    hreg___0 = tmp___4;
    if (hreg___0) {
      tmp___5 = jit_set_get(op->live_out, (int )reg);
      if (tmp___5) {
        unload_reg(op, hreg___0, reg);
      }
      rmap_unassoc(op->regmap, reg);
    }
    q ++;
  }
  if (op->arg[1] < (jit_value )al->fp_arg_reg_cnt) {
    args = (int )op->arg[1];
  } else {
    args = al->fp_arg_reg_cnt;
  }
  q___0 = 0;
  while (q___0 < args) {
    tmp___6 = rmap_is_associated(op->regmap, (*(al->fp_arg_regs + q___0))->id, 1,
                                 & reg);
    hreg___1 = tmp___6;
    if (hreg___1) {
      if (hreg___1->id != (al->fpret_reg)->id) {
        tmp___7 = jit_set_get(op->live_out, (int )reg);
        if (tmp___7) {
          unload_reg(op, hreg___1, reg);
        }
      }
      rmap_unassoc(op->regmap, reg);
    }
    q___0 ++;
  }
  return;
}
}
__inline extern int isascii(int _c ) 
{ 


  {
  return ((_c & -128) == 0);
}
}
__inline static void emit_set_arg(struct jit *jit , struct jit_out_arg *arg ) 
{ 
  int sreg ;
  int reg ;
  jit_value value ;
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  long tmp___5 ;
  unsigned char *tmp___6 ;
  x86_imm_buf imb ;
  int tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  int tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  x86_imm_buf imb___0 ;
  int tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  unsigned char *tmp___27 ;
  int tmp___28 ;
  unsigned char *tmp___29 ;
  int tmp___30 ;
  unsigned char *tmp___31 ;
  x86_imm_buf imb___1 ;
  int tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  int tmp___37 ;
  int tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___40 ;
  int tmp___41 ;
  int tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  long tmp___46 ;
  unsigned char *tmp___47 ;
  int tmp___48 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  amd64_imm_buf imb___2 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;

  {
  reg = (*((jit->reg_al)->gp_arg_regs + arg->argpos))->id;
  value = arg->value.generic;
  if (arg->isreg) {
    tmp___48 = is_spilled(value, jit->prepared_args.op, & sreg);
    if (tmp___48) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp = jit->ip;
          (jit->ip) ++;
          *tmp = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___0 = 8;
          } else {
            tmp___0 = 0;
          }
          if (reg > 7) {
            tmp___1 = 4;
          } else {
            tmp___1 = 0;
          }
          _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
          if ((int )_amd64_rex_bits != 0) {
            tmp___2 = jit->ip;
            (jit->ip) ++;
            *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___2 = jit->ip;
            (jit->ip) ++;
            *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___3 = jit->ip;
        (jit->ip) ++;
        *tmp___3 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char)139;
        break;
        default: 
        tmp___5 = __builtin_expect(1L, 0L);
        if (tmp___5) {
          __assert_rtn("emit_set_arg", "./jitter-amd64.c", 1922, "0");
        }
        }
        while (1) {
          while (1) {
            if (0) {
              tmp___26 = GET_REG_POS(jit, (int )value);
              if (tmp___26 == 0) {
                while (1) {
                  tmp___12 = jit->ip;
                  (jit->ip) ++;
                  *tmp___12 = (unsigned char )((((reg & 7) & 7) << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___13 = jit->ip;
                  (jit->ip) ++;
                  *tmp___13 = (unsigned char )((4 << 3) | 4);
                  break;
                }
              } else {
                tmp___24 = GET_REG_POS(jit, (int )value);
                if (tmp___24 >= -128) {
                  tmp___25 = GET_REG_POS(jit, (int )value);
                  if (tmp___25 <= 127) {
                    while (1) {
                      tmp___14 = jit->ip;
                      (jit->ip) ++;
                      *tmp___14 = (unsigned char )(((1 << 6) | (((reg & 7) & 7) << 3)) | 4);
                      break;
                    }
                    while (1) {
                      tmp___15 = jit->ip;
                      (jit->ip) ++;
                      *tmp___15 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      tmp___16 = GET_REG_POS(jit, (int )value);
                      *(jit->ip) = (unsigned char )(tmp___16 & 255);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L;
                  }
                } else {
                  _L: /* CIL Label */ 
                  while (1) {
                    tmp___17 = jit->ip;
                    (jit->ip) ++;
                    *tmp___17 = (unsigned char )(((2 << 6) | (((reg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___18 = jit->ip;
                    (jit->ip) ++;
                    *tmp___18 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    tmp___19 = GET_REG_POS(jit, (int )value);
                    imb___0.val = tmp___19;
                    tmp___20 = jit->ip;
                    (jit->ip) ++;
                    *tmp___20 = imb___0.b[0];
                    tmp___21 = jit->ip;
                    (jit->ip) ++;
                    *tmp___21 = imb___0.b[1];
                    tmp___22 = jit->ip;
                    (jit->ip) ++;
                    *tmp___22 = imb___0.b[2];
                    tmp___23 = jit->ip;
                    (jit->ip) ++;
                    *tmp___23 = imb___0.b[3];
                    break;
                  }
                }
              }
              break;
            }
            tmp___28 = GET_REG_POS(jit, (int )value);
            if (tmp___28 == 0) {

            }
            tmp___37 = GET_REG_POS(jit, (int )value);
            if (tmp___37 >= -128) {
              tmp___38 = GET_REG_POS(jit, (int )value);
              if (tmp___38 <= 127) {
                while (1) {
                  tmp___29 = jit->ip;
                  (jit->ip) ++;
                  *tmp___29 = (unsigned char )(((1 << 6) | (((reg & 7) & 7) << 3)) | 5);
                  break;
                }
                while (1) {
                  tmp___30 = GET_REG_POS(jit, (int )value);
                  *(jit->ip) = (unsigned char )(tmp___30 & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___0;
              }
            } else {
              _L___0: /* CIL Label */ 
              while (1) {
                tmp___31 = jit->ip;
                (jit->ip) ++;
                *tmp___31 = (unsigned char )(((2 << 6) | (((reg & 7) & 7) << 3)) | 5);
                break;
              }
              while (1) {
                tmp___32 = GET_REG_POS(jit, (int )value);
                imb___1.val = tmp___32;
                tmp___33 = jit->ip;
                (jit->ip) ++;
                *tmp___33 = imb___1.b[0];
                tmp___34 = jit->ip;
                (jit->ip) ++;
                *tmp___34 = imb___1.b[1];
                tmp___35 = jit->ip;
                (jit->ip) ++;
                *tmp___35 = imb___1.b[2];
                tmp___36 = jit->ip;
                (jit->ip) ++;
                *tmp___36 = imb___1.b[3];
                break;
              }
            }
            break;
          }
          break;
        }
        break;
      }
    } else
    if (reg != sreg) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp___39 = jit->ip;
          (jit->ip) ++;
          *tmp___39 = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___40 = 8;
          } else {
            tmp___40 = 0;
          }
          if (reg > 7) {
            tmp___41 = 4;
          } else {
            tmp___41 = 0;
          }
          if (sreg > 7) {
            tmp___42 = 1;
          } else {
            tmp___42 = 0;
          }
          _amd64_rex_bits___0 = (unsigned char )((tmp___40 | tmp___41) | tmp___42);
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___43 = jit->ip;
            (jit->ip) ++;
            *tmp___43 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___43 = jit->ip;
            (jit->ip) ++;
            *tmp___43 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___44 = jit->ip;
        (jit->ip) ++;
        *tmp___44 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___45 = jit->ip;
        (jit->ip) ++;
        *tmp___45 = (unsigned char)139;
        break;
        default: 
        tmp___46 = __builtin_expect(1L, 0L);
        if (tmp___46) {
          __assert_rtn("emit_set_arg", "./jitter-amd64.c", 1924, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___47 = jit->ip;
            (jit->ip) ++;
            *tmp___47 = (unsigned char )(((3 << 6) | ((reg & 7) << 3)) | (sreg & 7));
            break;
          }
          break;
        }
        break;
      }
    }
  } else {
    while (1) {
      while (1) {
        if (reg > 7) {
          tmp___49 = 1;
        } else {
          tmp___49 = 0;
        }
        _amd64_rex_bits___1 = (unsigned char )(8 | tmp___49);
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___50 = jit->ip;
          (jit->ip) ++;
          *tmp___50 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      tmp___51 = jit->ip;
      (jit->ip) ++;
      *tmp___51 = (unsigned char )(184 + (reg & 7));
      while (1) {
        imb___2.val = (size_t )value;
        tmp___52 = jit->ip;
        (jit->ip) ++;
        *tmp___52 = imb___2.b[0];
        tmp___53 = jit->ip;
        (jit->ip) ++;
        *tmp___53 = imb___2.b[1];
        tmp___54 = jit->ip;
        (jit->ip) ++;
        *tmp___54 = imb___2.b[2];
        tmp___55 = jit->ip;
        (jit->ip) ++;
        *tmp___55 = imb___2.b[3];
        tmp___56 = jit->ip;
        (jit->ip) ++;
        *tmp___56 = imb___2.b[4];
        tmp___57 = jit->ip;
        (jit->ip) ++;
        *tmp___57 = imb___2.b[5];
        tmp___58 = jit->ip;
        (jit->ip) ++;
        *tmp___58 = imb___2.b[6];
        tmp___59 = jit->ip;
        (jit->ip) ++;
        *tmp___59 = imb___2.b[7];
        break;
      }
      break;
    }
  }
  return;
}
}
static void emit_rsb_op(struct jit *jit , struct jit_op *op , int imm ) 
{ 
  unsigned char _amd64_rex_bits ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  x86_imm_buf imb ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___17 ;
  int tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___47 ;
  int tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___56 ;
  int tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___62 ;
  int tmp___63 ;
  int tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  long tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___70 ;
  int tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;

  {
  if (imm) {
    if (op->r_arg[0] == op->r_arg[1]) {
      while (1) {
        if ((int )(- op->r_arg[2]) >= -128) {
          if ((int )(- op->r_arg[2]) <= 127) {
            while (1) {
              if (op->r_arg[0] > 7L) {
                tmp = 1;
              } else {
                tmp = 0;
              }
              _amd64_rex_bits = (unsigned char )(8 | tmp);
              if ((int )_amd64_rex_bits != 0) {
                tmp___0 = jit->ip;
                (jit->ip) ++;
                *tmp___0 = (unsigned char )(64 | (int )_amd64_rex_bits);
              }
              break;
            }
            tmp___1 = jit->ip;
            (jit->ip) ++;
            *tmp___1 = (unsigned char)131;
            while (1) {
              while (1) {
                tmp___2 = jit->ip;
                (jit->ip) ++;
                *tmp___2 = (unsigned char )((long )(3 << 6) | (op->r_arg[0] & 7L));
                break;
              }
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- op->r_arg[2] & 255L);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L;
          }
        } else
        _L: /* CIL Label */ 
        if (op->r_arg[0] == 0L) {
          while (1) {
            _amd64_rex_bits___0 = (unsigned char)8;
            if ((int )_amd64_rex_bits___0 != 0) {
              tmp___3 = jit->ip;
              (jit->ip) ++;
              *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
            }
            break;
          }
          tmp___4 = jit->ip;
          (jit->ip) ++;
          *tmp___4 = (unsigned char)5;
          while (1) {
            imb.val = (int )(- op->r_arg[2]);
            tmp___5 = jit->ip;
            (jit->ip) ++;
            *tmp___5 = imb.b[0];
            tmp___6 = jit->ip;
            (jit->ip) ++;
            *tmp___6 = imb.b[1];
            tmp___7 = jit->ip;
            (jit->ip) ++;
            *tmp___7 = imb.b[2];
            tmp___8 = jit->ip;
            (jit->ip) ++;
            *tmp___8 = imb.b[3];
            break;
          }
        } else {
          while (1) {
            if (op->r_arg[0] > 7L) {
              tmp___9 = 1;
            } else {
              tmp___9 = 0;
            }
            _amd64_rex_bits___1 = (unsigned char )(8 | tmp___9);
            if ((int )_amd64_rex_bits___1 != 0) {
              tmp___10 = jit->ip;
              (jit->ip) ++;
              *tmp___10 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
            }
            break;
          }
          tmp___11 = jit->ip;
          (jit->ip) ++;
          *tmp___11 = (unsigned char)129;
          while (1) {
            while (1) {
              tmp___12 = jit->ip;
              (jit->ip) ++;
              *tmp___12 = (unsigned char )((long )(3 << 6) | (op->r_arg[0] & 7L));
              break;
            }
            break;
          }
          while (1) {
            imb___0.val = (int )(- op->r_arg[2]);
            tmp___13 = jit->ip;
            (jit->ip) ++;
            *tmp___13 = imb___0.b[0];
            tmp___14 = jit->ip;
            (jit->ip) ++;
            *tmp___14 = imb___0.b[1];
            tmp___15 = jit->ip;
            (jit->ip) ++;
            *tmp___15 = imb___0.b[2];
            tmp___16 = jit->ip;
            (jit->ip) ++;
            *tmp___16 = imb___0.b[3];
            break;
          }
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          if (op->r_arg[0] > 7L) {
            tmp___17 = 4;
          } else {
            tmp___17 = 0;
          }
          if (op->r_arg[1] > 7L) {
            tmp___18 = 1;
          } else {
            tmp___18 = 0;
          }
          _amd64_rex_bits___2 = (unsigned char )((8 | tmp___17) | tmp___18);
          if ((int )_amd64_rex_bits___2 != 0) {
            tmp___19 = jit->ip;
            (jit->ip) ++;
            *tmp___19 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
          }
          break;
        }
        tmp___20 = jit->ip;
        (jit->ip) ++;
        *tmp___20 = (unsigned char)141;
        while (1) {
          if (op->r_arg[1] == 16L) {
            while (1) {
              tmp___21 = jit->ip;
              (jit->ip) ++;
              *tmp___21 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb___1.val = (int )(- op->r_arg[2]);
              tmp___22 = jit->ip;
              (jit->ip) ++;
              *tmp___22 = imb___1.b[0];
              tmp___23 = jit->ip;
              (jit->ip) ++;
              *tmp___23 = imb___1.b[1];
              tmp___24 = jit->ip;
              (jit->ip) ++;
              *tmp___24 = imb___1.b[2];
              tmp___25 = jit->ip;
              (jit->ip) ++;
              *tmp___25 = imb___1.b[3];
              break;
            }
          } else {
            while (1) {
              if ((op->r_arg[1] & 7L) == 4L) {
                if (- op->r_arg[2] == 0L) {
                  while (1) {
                    tmp___26 = jit->ip;
                    (jit->ip) ++;
                    *tmp___26 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___27 = jit->ip;
                    (jit->ip) ++;
                    *tmp___27 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                } else
                if ((int )(- op->r_arg[2]) >= -128) {
                  if ((int )(- op->r_arg[2]) <= 127) {
                    while (1) {
                      tmp___28 = jit->ip;
                      (jit->ip) ++;
                      *tmp___28 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
                      break;
                    }
                    while (1) {
                      tmp___29 = jit->ip;
                      (jit->ip) ++;
                      *tmp___29 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(- op->r_arg[2] & 255L);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L___0;
                  }
                } else {
                  _L___0: /* CIL Label */ 
                  while (1) {
                    tmp___30 = jit->ip;
                    (jit->ip) ++;
                    *tmp___30 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___31 = jit->ip;
                    (jit->ip) ++;
                    *tmp___31 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    imb___2.val = (int )(- op->r_arg[2]);
                    tmp___32 = jit->ip;
                    (jit->ip) ++;
                    *tmp___32 = imb___2.b[0];
                    tmp___33 = jit->ip;
                    (jit->ip) ++;
                    *tmp___33 = imb___2.b[1];
                    tmp___34 = jit->ip;
                    (jit->ip) ++;
                    *tmp___34 = imb___2.b[2];
                    tmp___35 = jit->ip;
                    (jit->ip) ++;
                    *tmp___35 = imb___2.b[3];
                    break;
                  }
                }
                break;
              }
              if (- op->r_arg[2] == 0L) {
                if ((op->r_arg[1] & 7L) != 5L) {
                  while (1) {
                    tmp___36 = jit->ip;
                    (jit->ip) ++;
                    *tmp___36 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | ((op->r_arg[1] & 7L) & 7L));
                    break;
                  }
                  break;
                }
              }
              if ((int )(- op->r_arg[2]) >= -128) {
                if ((int )(- op->r_arg[2]) <= 127) {
                  while (1) {
                    tmp___37 = jit->ip;
                    (jit->ip) ++;
                    *tmp___37 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | ((op->r_arg[1] & 7L) & 7L));
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(- op->r_arg[2] & 255L);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___1;
                }
              } else {
                _L___1: /* CIL Label */ 
                while (1) {
                  tmp___38 = jit->ip;
                  (jit->ip) ++;
                  *tmp___38 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | ((op->r_arg[1] & 7L) & 7L));
                  break;
                }
                while (1) {
                  imb___3.val = (int )(- op->r_arg[2]);
                  tmp___39 = jit->ip;
                  (jit->ip) ++;
                  *tmp___39 = imb___3.b[0];
                  tmp___40 = jit->ip;
                  (jit->ip) ++;
                  *tmp___40 = imb___3.b[1];
                  tmp___41 = jit->ip;
                  (jit->ip) ++;
                  *tmp___41 = imb___3.b[2];
                  tmp___42 = jit->ip;
                  (jit->ip) ++;
                  *tmp___42 = imb___3.b[3];
                  break;
                }
              }
              break;
            }
          }
          break;
        }
        break;
      }
    }
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___43 = 1;
        } else {
          tmp___43 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )(8 | tmp___43);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___44 = jit->ip;
          (jit->ip) ++;
          *tmp___44 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      while (1) {
        tmp___45 = jit->ip;
        (jit->ip) ++;
        *tmp___45 = (unsigned char)247;
        while (1) {
          while (1) {
            tmp___46 = jit->ip;
            (jit->ip) ++;
            *tmp___46 = (unsigned char )((long )((3 << 6) | (3 << 3)) | ((op->r_arg[0] & 7L) & 7L));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    return;
  }
  if (op->r_arg[0] == op->r_arg[1]) {
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___47 = 4;
        } else {
          tmp___47 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___48 = 1;
        } else {
          tmp___48 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )((8 | tmp___47) | tmp___48);
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___49 = jit->ip;
          (jit->ip) ++;
          *tmp___49 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      tmp___50 = jit->ip;
      (jit->ip) ++;
      *tmp___50 = (unsigned char )((5 << 3) + 3);
      while (1) {
        while (1) {
          tmp___51 = jit->ip;
          (jit->ip) ++;
          *tmp___51 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___52 = 1;
        } else {
          tmp___52 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(8 | tmp___52);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___53 = jit->ip;
          (jit->ip) ++;
          *tmp___53 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      while (1) {
        tmp___54 = jit->ip;
        (jit->ip) ++;
        *tmp___54 = (unsigned char)247;
        while (1) {
          while (1) {
            tmp___55 = jit->ip;
            (jit->ip) ++;
            *tmp___55 = (unsigned char )((long )((3 << 6) | (3 << 3)) | ((op->r_arg[0] & 7L) & 7L));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  } else
  if (op->r_arg[0] == op->r_arg[2]) {
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___56 = 4;
        } else {
          tmp___56 = 0;
        }
        if (op->r_arg[1] > 7L) {
          tmp___57 = 1;
        } else {
          tmp___57 = 0;
        }
        _amd64_rex_bits___6 = (unsigned char )((8 | tmp___56) | tmp___57);
        if ((int )_amd64_rex_bits___6 != 0) {
          tmp___58 = jit->ip;
          (jit->ip) ++;
          *tmp___58 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
        }
        break;
      }
      tmp___59 = jit->ip;
      (jit->ip) ++;
      *tmp___59 = (unsigned char )((5 << 3) + 3);
      while (1) {
        while (1) {
          tmp___60 = jit->ip;
          (jit->ip) ++;
          *tmp___60 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___61 = jit->ip;
        (jit->ip) ++;
        *tmp___61 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___62 = 8;
        } else {
          tmp___62 = 0;
        }
        if (op->r_arg[0] > 7L) {
          tmp___63 = 4;
        } else {
          tmp___63 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___64 = 1;
        } else {
          tmp___64 = 0;
        }
        _amd64_rex_bits___7 = (unsigned char )((tmp___62 | tmp___63) | tmp___64);
        if ((int )_amd64_rex_bits___7 != 0) {
          tmp___65 = jit->ip;
          (jit->ip) ++;
          *tmp___65 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___65 = jit->ip;
          (jit->ip) ++;
          *tmp___65 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___66 = jit->ip;
      (jit->ip) ++;
      *tmp___66 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___67 = jit->ip;
      (jit->ip) ++;
      *tmp___67 = (unsigned char)139;
      break;
      default: 
      tmp___68 = __builtin_expect(1L, 0L);
      if (tmp___68) {
        __assert_rtn("emit_rsb_op", "./jitter-amd64.c", 2641, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___69 = jit->ip;
          (jit->ip) ++;
          *tmp___69 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___70 = 4;
        } else {
          tmp___70 = 0;
        }
        if (op->r_arg[1] > 7L) {
          tmp___71 = 1;
        } else {
          tmp___71 = 0;
        }
        _amd64_rex_bits___8 = (unsigned char )((8 | tmp___70) | tmp___71);
        if ((int )_amd64_rex_bits___8 != 0) {
          tmp___72 = jit->ip;
          (jit->ip) ++;
          *tmp___72 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
        }
        break;
      }
      tmp___73 = jit->ip;
      (jit->ip) ++;
      *tmp___73 = (unsigned char )((5 << 3) + 3);
      while (1) {
        while (1) {
          tmp___74 = jit->ip;
          (jit->ip) ++;
          *tmp___74 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
__inline static jit_tree *node_new(jit_tree_key key , jit_tree_value value ) 
{ 
  jit_tree *res ;
  void *tmp ;

  {
  tmp = malloc(sizeof(jit_tree ));
  res = (jit_tree *)tmp;
  res->key = key;
  res->value = value;
  res->color = 1;
  res->left = (struct jit_tree *)((void *)0);
  res->right = (struct jit_tree *)((void *)0);
  return (res);
}
}
void jit_generate_code(struct jit *jit ) 
{ 
  int change ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  struct jit_op *op ;
  unsigned long offset_1 ;
  unsigned char *tmp___2 ;
  int i ;
  unsigned char *tmp___3 ;
  int i___0 ;
  unsigned long offset_2 ;
  int code_size ;
  void *mem ;
  void *tmp___4 ;
  unsigned long tmp___5 ;
  long pos ;
  jit_op *op___0 ;
  jit_op *tmp___6 ;

  {
  jit_expand_patches_and_labels(jit);
  jit_correct_long_imms(jit);
  jit_correct_float_imms(jit);
  jit_prepare_reg_counts(jit);
  jit_prepare_arguments(jit);
  jit_prepare_spills_on_jmpr_targets(jit);
  if (jit->optimizations & 8U) {
    jit_dead_code_analysis(jit, 1);
  }
  jit_flw_analysis(jit);
  if (jit->optimizations & 2U) {
    jit_optimize_unused_assignments(jit);
  }
  change = 0;
  jit_optimize_st_ops(jit);
  if (jit->optimizations & 4U) {
    tmp = jit_optimize_join_addmul(jit);
    change |= tmp;
    tmp___0 = jit_optimize_join_addimm(jit);
    change |= tmp___0;
  }
  if (change) {
    jit_flw_analysis(jit);
  }
  jit_collect_statistics(jit);
  jit_assign_regs(jit);
  if (jit->optimizations & 1U) {
    jit_optimize_frame_ptr(jit);
  }
  jit->buf_capacity = 4096U;
  tmp___1 = malloc((size_t )jit->buf_capacity);
  jit->buf = (unsigned char *)tmp___1;
  jit->ip = jit->buf;
  op = jit->ops;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    if ((long )jit->buf_capacity - (jit->ip - jit->buf) < 1024L) {
      jit_buf_expand(jit);
    }
    offset_1 = (unsigned long )(jit->ip - jit->buf);
    switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
    case 352U: 
    tmp___2 = jit->ip;
    (jit->ip) ++;
    *tmp___2 = (unsigned char )op->arg[0];
    break;
    case 880U: 
    while ((long )jit->buf_capacity - (jit->ip - jit->buf) < op->arg[0]) {
      jit_buf_expand(jit);
    }
    i = 0;
    while ((jit_value )i < op->arg[0]) {
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = *((unsigned char *)op->addendum + i);
      i ++;
    }
    break;
    case 488U: 
    case 520U: 
    op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
    i___0 = 0;
    while ((unsigned long )i___0 < sizeof(void *)) {
      *(jit->ip) = (unsigned char)0;
      (jit->ip) ++;
      i___0 ++;
    }
    break;
    case 296U: 
    case 128U: 
    case 152U: 
    case 40U: 
    case 856U: 
    break;
    default: 
    jit_gen_op(jit, op);
    }
    offset_2 = (unsigned long )(jit->ip - jit->buf);
    op->code_offset = offset_1;
    op->code_length = offset_2 - offset_1;
    op = op->next;
  }
  code_size = (int )(jit->ip - jit->buf);
  tmp___4 = mmap((void *)0, (size_t )jit->buf_capacity, 7, 4098, -1, (off_t )0);
  mem = tmp___4;
  if ((unsigned long )mem == (unsigned long )((void *)-1)) {
    perror("mmap");
  }
  tmp___5 = __builtin_object_size(mem, 0);
  __builtin___memcpy_chk(mem, (void const   *)jit->buf, (unsigned long )code_size,
                         tmp___5);
  free((void *)jit->buf);
  pos = jit->ip - jit->buf;
  jit->buf = (unsigned char *)mem;
  jit->ip = jit->buf + pos;
  jit->mmaped_buf = (unsigned char)1;
  jit_patch_external_calls(jit);
  jit_patch_local_addrs(jit);
  tmp___6 = jit_op_first(jit->ops);
  op___0 = tmp___6;
  while ((unsigned long )op___0 != (unsigned long )((void *)0)) {
    if ((unsigned int )((jit_opcode )((int )op___0->code & 65528)) == 536U) {
      *((void **)op___0->arg[0]) = (void *)(jit->buf + op___0->patch_addr);
    }
    op___0 = op___0->next;
  }
  return;
}
}
char *jit_get_op_name(struct jit_op *op ) 
{ 


  {
  switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
  case 840U: 
  return ((char *)"mov");
  case 160U: 
  return ((char *)"ld");
  case 872U: 
  return ((char *)"ldx");
  case 256U: 
  return ((char *)"st");
  case 512U: 
  return ((char *)"stx");
  case 560U: 
  return ((char *)"memcpy");
  case 592U: 
  return ((char *)"memset");
  case 808U: 
  return ((char *)"jmp");
  case 136U: 
  return ((char *)".patch");
  case 776U: 
  return ((char *)"prepare");
  case 448U: 
  return ((char *)"putarg");
  case 0U: 
  return ((char *)"call");
  case 72U: 
  return ((char *)"ret");
  case 536U: 
  return ((char *)"prolog");
  case 728U: 
  return ((char *)"getarg");
  case 208U: 
  return ((char *)"retval");
  case 888U: 
  return ((char *)"alloca");
  case 784U: 
  return ((char *)"declare_arg");
  case 104U: 
  return ((char *)"add");
  case 672U: 
  return ((char *)"addc");
  case 48U: 
  return ((char *)"addx");
  case 32U: 
  return ((char *)"sub");
  case 392U: 
  return ((char *)"subc");
  case 80U: 
  return ((char *)"subx");
  case 424U: 
  return ((char *)"rsb");
  case 576U: 
  return ((char *)"neg");
  case 552U: 
  return ((char *)"mul");
  case 224U: 
  return ((char *)"hmul");
  case 864U: 
  return ((char *)"div");
  case 408U: 
  return ((char *)"mod");
  case 400U: 
  return ((char *)"or");
  case 200U: 
  return ((char *)"xor");
  case 176U: 
  return ((char *)"and");
  case 544U: 
  return ((char *)"lsh");
  case 720U: 
  return ((char *)"rsh");
  case 368U: 
  return ((char *)"not");
  case 688U: 
  return ((char *)"lt");
  case 272U: 
  return ((char *)"le");
  case 712U: 
  return ((char *)"gt");
  case 904U: 
  return ((char *)"ge");
  case 144U: 
  return ((char *)"eq");
  case 216U: 
  return ((char *)"ne");
  case 480U: 
  return ((char *)"blt");
  case 112U: 
  return ((char *)"ble");
  case 344U: 
  return ((char *)"bgt");
  case 584U: 
  return ((char *)"bge");
  case 848U: 
  return ((char *)"beq");
  case 608U: 
  return ((char *)"bne");
  case 8U: 
  return ((char *)"bms");
  case 304U: 
  return ((char *)"bmc");
  case 768U: 
  return ((char *)"boadd");
  case 664U: 
  return ((char *)"bosub");
  case 568U: 
  return ((char *)"bnoadd");
  case 328U: 
  return ((char *)"bnosub");
  case 624U: 
  return ((char *)".ureg");
  case 432U: 
  return ((char *)".lreg");
  case 496U: 
  return ((char *)".code");
  case 456U: 
  return ((char *)".label");
  case 416U: 
  return ((char *)".syncreg");
  case 16U: 
  return ((char *)".renamereg");
  case 320U: 
  return ((char *)"msg");
  case 152U: 
  return ((char *)".comment");
  case 528U: 
  return ((char *)"nop");
  case 760U: 
  return ((char *)".align");
  case 352U: 
  return ((char *)".byte");
  case 880U: 
  return ((char *)".bytes");
  case 520U: 
  return ((char *)".ref_code");
  case 488U: 
  return ((char *)".ref_data");
  case 832U: 
  return ((char *)"ref_code");
  case 56U: 
  return ((char *)"ref_data");
  case 704U: 
  return ((char *)".full_spill");
  case 360U: 
  return ((char *)".trace");
  case 856U: 
  return ((char *)"force_spill");
  case 40U: 
  return ((char *)"force_assoc");
  case 128U: 
  return ((char *)"mark");
  case 296U: 
  return ((char *)"touch");
  case 248U: 
  return ((char *)"transfer");
  case 280U: 
  return ((char *)"transfer_cpy");
  case 264U: 
  return ((char *)"transfer_and");
  case 896U: 
  return ((char *)"transfer_or");
  case 792U: 
  return ((char *)"transfer_xor");
  case 464U: 
  return ((char *)"transfer_add");
  case 336U: 
  return ((char *)"transfer_sub");
  case 64U: 
  return ((char *)"fmov");
  case 680U: 
  return ((char *)"fadd");
  case 376U: 
  return ((char *)"fsub");
  case 600U: 
  return ((char *)"frsb");
  case 616U: 
  return ((char *)"fmul");
  case 288U: 
  return ((char *)"fdiv");
  case 656U: 
  return ((char *)"fneg");
  case 696U: 
  return ((char *)"fretval");
  case 120U: 
  return ((char *)"fputarg");
  case 88U: 
  return ((char *)"ext");
  case 168U: 
  return ((char *)"round");
  case 472U: 
  return ((char *)"trunc");
  case 736U: 
  return ((char *)"floor");
  case 800U: 
  return ((char *)"ceil");
  case 824U: 
  return ((char *)"fblt");
  case 744U: 
  return ((char *)"fble");
  case 192U: 
  return ((char *)"fbgt");
  case 384U: 
  return ((char *)"fbge");
  case 816U: 
  return ((char *)"fbeq");
  case 504U: 
  return ((char *)"fbne");
  case 640U: 
  return ((char *)"fld");
  case 752U: 
  return ((char *)"fldx");
  case 24U: 
  return ((char *)"fst");
  case 232U: 
  return ((char *)"fstx");
  case 96U: 
  return ((char *)"fret");
  default: 
  return ((char *)"(unknown)");
  }
}
}
__inline static jit_tree *rotate_right(jit_tree *h ) 
{ 
  jit_tree *x ;

  {
  x = h->left;
  h->left = x->right;
  x->right = h;
  x->color = (x->right)->color;
  (x->right)->color = 1;
  return (x);
}
}
void jit_trace_callback(struct jit *jit , jit_op *op , int verbosity , int trace ) 
{ 


  {
  if (trace & 1) {
    jit_trace_op(jit, op->prev, verbosity);
  }
  if (trace & 2) {
    jit_trace_op(jit, op->next, verbosity);
  }
  return;
}
}
static int generic_pop_caller_saved_regs(struct jit *jit , jit_op *op , int reg_count ,
                                         jit_hw_reg *regs , int fp , jit_hw_reg *skip_reg ,
                                         int stack_offset ) 
{ 
  jit_value reg ;
  int skip_reg_id ;
  int tmp ;
  int i ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp___0 ;
  int tmp___1 ;

  {
  if (skip_reg) {
    tmp = skip_reg->id;
  } else {
    tmp = -1;
  }
  skip_reg_id = tmp;
  i = reg_count - 1;
  while (i >= 0) {
    if ((regs + i)->id == skip_reg_id) {
      goto __Cont;
    } else
    if ((regs + i)->callee_saved) {
      goto __Cont;
    }
    tmp___0 = rmap_is_associated(op->regmap, (regs + i)->id, fp, & reg);
    hreg = tmp___0;
    if (hreg) {
      tmp___1 = jit_set_get(op->live_in, (int )reg);
      if (tmp___1) {
        stack_offset = emit_pop_reg(jit, hreg, stack_offset);
      }
    }
    __Cont: /* CIL Label */ 
    i --;
  }
  return (stack_offset);
}
}
int jit_optimize_join_addmul(struct jit *jit ) 
{ 
  int change ;
  jit_op *op ;
  jit_op *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
  change = 0;
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    tmp___0 = join_2ops(op, 554, 106, & join_muli_addi);
    change |= tmp___0;
    tmp___1 = join_2ops(op, 546, 106, & join_muli_addi);
    change |= tmp___1;
    tmp___2 = join_2ops(op, 554, 105, & join_muli_addr);
    change |= tmp___2;
    tmp___3 = join_2ops(op, 546, 105, & join_muli_addr);
    change |= tmp___3;
    tmp___4 = join_2ops(op, 554, 402, & join_muli_ori);
    change |= tmp___4;
    tmp___5 = join_2ops(op, 546, 402, & join_muli_ori);
    change |= tmp___5;
    op = op->next;
  }
  return (change);
}
}
static void rmap_sync(jit_op *op , jit_rmap *current , jit_rmap *target , int mode ) 
{ 


  {
  rmap_sync_aux(current->map, target->map, op, mode);
  return;
}
}
void _cipher$_xtea_encipherBlock(unsigned int num_rounds , unsigned int *v , unsigned int *key ) 
{ 
  unsigned int v0 ;
  unsigned int v1 ;
  unsigned int delta ;
  unsigned int sum ;
  unsigned int i ;

  {
  v0 = v[0];
  v1 = v[1];
  delta = 2117564857;
  sum = 0;
  i = 0;
  while (i < num_rounds) {
    v0 += (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + key[sum & 3]);
    sum += delta;
    v1 += (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + key[(sum >> 11) & 3]);
    i ++;
  }
  v[0] = v0;
  v[1] = v1;
}
}
void print_comment(struct output_buf *linebuf , jit_op *op ) 
{ 
  char *str ;
  int i ;
  size_t tmp ;

  {
  str = (char *)op->arg[0];
  ob_append(linebuf, (char *)"// ");
  i = 0;
  while (1) {
    tmp = strlen((char const   *)str);
    if (! ((size_t )i < tmp)) {
      break;
    }
    if ((int )*(str + i) == 13) {
      ob_append(linebuf, (char *)"\n// ");
    } else
    if ((int )*(str + i) == 10) {
      ob_append(linebuf, (char *)"\n// ");
    } else {
      ob_printf(linebuf, "%c", (int )*(str + i));
    }
    i ++;
  }
  return;
}
}
static int check_uninitialized_registers(jit_op *op , char *msg_buf ) 
{ 
  char buf[4096] ;
  size_t tmp ;

  {
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) != 536U) {
    return (0);
  }
  if ((unsigned long )(op->live_in)->root != (unsigned long )((void *)0)) {
    buf[0] = (char )'\000';
    jit_tree_walk((op->live_in)->root, & print_regs, (void *)(buf));
    tmp = strlen((char const   *)(buf));
    if (tmp) {
      append_msg(msg_buf, (char *)"uninitialized register(s): %s", buf);
      return (8);
    }
  }
  return (0);
}
}
__inline static void jit_prepare_arguments(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  struct jit_func_info *info ;
  int gp_arg_pos ;
  int fp_arg_pos ;
  int argpos ;
  int phys_reg ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  info = (struct jit_func_info *)((void *)0);
  gp_arg_pos = 0;
  fp_arg_pos = 0;
  argpos = 0;
  phys_reg = 0;
  while (op) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 536U) {
      info = (struct jit_func_info *)op->arg[1];
      info->has_prolog = 1;
      gp_arg_pos = 0;
      fp_arg_pos = 0;
      argpos = 0;
      phys_reg = 0;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 784U) {
      (info->args + argpos)->type = (enum jit_inp_type )op->arg[0];
      (info->args + argpos)->size = (int )op->arg[1];
      if (op->arg[0] == 2L) {
        (info->args + argpos)->gp_pos = gp_arg_pos;
        tmp___0 = fp_arg_pos;
        fp_arg_pos ++;
        (info->args + argpos)->fp_pos = tmp___0;
      } else {
        tmp___1 = gp_arg_pos;
        gp_arg_pos ++;
        (info->args + argpos)->gp_pos = tmp___1;
        (info->args + argpos)->fp_pos = fp_arg_pos;
      }
      jit_init_arg_params(jit, info, argpos, & phys_reg);
      argpos ++;
    }
    op = op->next;
  }
  return;
}
}
static int join_addr_addi(jit_op *op , jit_op *nextop ) 
{ 
  unsigned long tmp ;

  {
  if (nextop->arg[2] >= (-0x7FFFFFFF-1)) {
    if (! (nextop->arg[2] <= 2147483647L)) {
      return (0);
    }
  } else {
    return (0);
  }
  make_nop(op);
  nextop->code = (unsigned short)440;
  nextop->spec = (unsigned char )(((1 << 4) | (1 << 2)) | 3);
  nextop->arg[2] = nextop->arg[2];
  tmp = __builtin_object_size((void *)(& nextop->flt_imm), 0);
  __builtin___memcpy_chk((void *)(& nextop->flt_imm), (void const   *)(& nextop->arg[2]),
                         sizeof(jit_value ), tmp);
  nextop->arg[1] = op->arg[1];
  nextop->arg[2] = op->arg[2];
  return (1);
}
}
void jit_patch_local_addrs(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  unsigned char *buf ;
  jit_value addr ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned char _amd64_rex_bits ;
  int tmp___3 ;
  int tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  amd64_imm_buf imb ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *buf___0 ;
  jit_value addr___0 ;
  int tmp___19 ;
  long tmp___20 ;
  int tmp___21 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 832U) {
      goto _L;
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 56U) {
      _L: /* CIL Label */ 
      buf = jit->buf + op->patch_addr;
      tmp___2 = jit_is_label(jit, (void *)op->arg[1]);
      if (tmp___2) {
        tmp___1 = ((jit_label *)op->arg[1])->pos;
      } else {
        tmp___1 = op->arg[1];
      }
      addr = tmp___1;
      while (1) {
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___3 = 8;
          } else {
            tmp___3 = 0;
          }
          if (op->r_arg[0] > 7L) {
            tmp___4 = 1;
          } else {
            tmp___4 = 0;
          }
          _amd64_rex_bits = (unsigned char )(tmp___3 | tmp___4);
          if ((int )_amd64_rex_bits != 0) {
            tmp___5 = buf;
            buf ++;
            *tmp___5 = (unsigned char )(64 | (int )_amd64_rex_bits);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___5 = buf;
            buf ++;
            *tmp___5 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        tmp___6 = buf;
        buf ++;
        *tmp___6 = (unsigned char )(184L + (op->r_arg[0] & 7L));
        if (sizeof(void *) == 8UL) {
          while (1) {
            imb.val = (size_t )(jit->buf + addr);
            tmp___7 = buf;
            buf ++;
            *tmp___7 = imb.b[0];
            tmp___8 = buf;
            buf ++;
            *tmp___8 = imb.b[1];
            tmp___9 = buf;
            buf ++;
            *tmp___9 = imb.b[2];
            tmp___10 = buf;
            buf ++;
            *tmp___10 = imb.b[3];
            tmp___11 = buf;
            buf ++;
            *tmp___11 = imb.b[4];
            tmp___12 = buf;
            buf ++;
            *tmp___12 = imb.b[5];
            tmp___13 = buf;
            buf ++;
            *tmp___13 = imb.b[6];
            tmp___14 = buf;
            buf ++;
            *tmp___14 = imb.b[7];
            break;
          }
        } else {
          while (1) {
            imb___0.val = (int )((size_t )(jit->buf + addr));
            tmp___15 = buf;
            buf ++;
            *tmp___15 = imb___0.b[0];
            tmp___16 = buf;
            buf ++;
            *tmp___16 = imb___0.b[1];
            tmp___17 = buf;
            buf ++;
            *tmp___17 = imb___0.b[2];
            tmp___18 = buf;
            buf ++;
            *tmp___18 = imb___0.b[3];
            break;
          }
        }
        break;
      }
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 520U) {
      goto _L___0;
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 488U) {
      _L___0: /* CIL Label */ 
      buf___0 = jit->buf + op->patch_addr;
      tmp___21 = jit_is_label(jit, (void *)op->arg[0]);
      if (tmp___21) {
        tmp___20 = ((jit_label *)op->arg[0])->pos;
      } else {
        tmp___20 = op->arg[0];
      }
      addr___0 = tmp___20;
      *((jit_value *)buf___0) = (jit_value )(jit->buf + addr___0);
    }
    op = op->next;
  }
  return;
}
}
void init_tigress(void) 
{ 
  struct _2_init_tigress_1_opaque_NodeStruct *p1 ;
  int i2 ;
  struct _2_init_tigress_1_opaque_NodeStruct *p3 ;
  int _2_init_tigress__BEGIN_1 ;
  int _2_init_tigress__END_1 ;
  int _2_init_tigress__BARRIER_2 ;

  {
  _2_init_tigress__BEGIN_1 = 1;
  p1 = (struct _2_init_tigress_1_opaque_NodeStruct *)malloc(sizeof(struct _2_init_tigress_1_opaque_NodeStruct ));
  p1->next = p1;
  p1->prev = p1;
  _2_init_tigress_1_opaque_list_1 = p1;
  i2 = 0;
  while (i2 < 4) {
    p3 = (struct _2_init_tigress_1_opaque_NodeStruct *)malloc(sizeof(struct _2_init_tigress_1_opaque_NodeStruct ));
    p3->data = i2 * (((_1_entropy + 9) + 1UL) + ((- _1_entropy - 1UL) | (- 9 - 1UL)));
    p3->next = _2_init_tigress_1_opaque_list_1->next;
    p3->prev = _2_init_tigress_1_opaque_list_1;
    (_2_init_tigress_1_opaque_list_1->next)->prev = p3;
    _2_init_tigress_1_opaque_list_1->next = p3;
    i2 ++;
  }
  _2_init_tigress_1_opaque_ptr_1 = _2_init_tigress_1_opaque_list_1->next;
  _2_init_tigress_1_opaque_ptr_2 = _2_init_tigress_1_opaque_ptr_1;
  _2_init_tigress_1_opaque_ptr_2 = _2_init_tigress_1_opaque_ptr_2->next;
  _2_init_tigress__END_1 = 1;
  _2_init_tigress__BARRIER_2 = 1;
  return;
}
}
static void jit_correct_long_imms(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  int imm_arg ;
  int i ;
  long value ;
  jit_op *newop ;
  struct jit_op *tmp___0 ;
  int tmp___1 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    if (! ((int )op->code & 2)) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 808U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 0U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 136U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 840U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 448U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 320U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 152U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 536U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 520U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 488U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 56U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 832U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 40U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 360U) {
      goto __Cont;
    }
    i = 1;
    while (i < 4) {
      if ((((int )op->spec >> (i - 1) * 2) & 3) == 2) {
        imm_arg = i - 1;
      }
      i ++;
    }
    value = op->arg[imm_arg];
    tmp___1 = jit_imm_overflow(jit, op, value);
    if (tmp___1) {
      tmp___0 = jit_op_new((unsigned short)842, (unsigned char )((2 << 2) | 3), (long )(1 << 1),
                           value, 0L, (unsigned char )sizeof(void *));
      newop = tmp___0;
      jit_op_prepend(op, newop);
      op->code = (unsigned short )((int )op->code & -4);
      op->code = (unsigned short )((int )op->code | 1);
      op->spec = (unsigned char )((int )op->spec & ~ (3 << 2 * imm_arg));
      op->spec = (unsigned char )((int )op->spec | (1 << 2 * imm_arg));
      op->arg[imm_arg] = (jit_value )(1 << 1);
    }
    __Cont: /* CIL Label */ 
    op = op->next;
  }
  return;
}
}
static void emit_msg_op(struct jit *jit , jit_op *op ) 
{ 
  unsigned char _amd64_rex_bits ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  long tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  amd64_imm_buf imb ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  int _amd64_width_temp ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  unsigned char *tmp___26 ;
  int tmp___27 ;
  unsigned char *tmp___28 ;
  amd64_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  int tmp___41 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;

  {
  emit_save_all_regs(jit, op);
  if (! ((int )op->code & 2)) {
    while (1) {
      while (1) {
        if (op->r_arg[1] > 7L) {
          tmp = 1;
        } else {
          tmp = 0;
        }
        _amd64_rex_bits = (unsigned char )(8 | tmp);
        if ((int )_amd64_rex_bits != 0) {
          tmp___0 = jit->ip;
          (jit->ip) ++;
          *tmp___0 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      while (1) {
        switch (4) {
        case 1: 
        tmp___1 = jit->ip;
        (jit->ip) ++;
        *tmp___1 = (unsigned char)138;
        break;
        case 2: 
        tmp___2 = jit->ip;
        (jit->ip) ++;
        *tmp___2 = (unsigned char)102;
        case 4: 
        tmp___3 = jit->ip;
        (jit->ip) ++;
        *tmp___3 = (unsigned char)139;
        break;
        default: 
        tmp___4 = __builtin_expect(1L, 0L);
        if (tmp___4) {
          __assert_rtn("emit_msg_op", "./jitter-amd64.c", 2121, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___5 = jit->ip;
            (jit->ip) ++;
            *tmp___5 = (unsigned char )((long )((3 << 6) | (6 << 3)) | ((op->r_arg[1] & 7L) & 7L));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___0 = (unsigned char)8;
      if ((int )_amd64_rex_bits___0 != 0) {
        tmp___6 = jit->ip;
        (jit->ip) ++;
        *tmp___6 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
      }
      break;
    }
    tmp___7 = jit->ip;
    (jit->ip) ++;
    *tmp___7 = (unsigned char)191;
    while (1) {
      imb.val = (size_t )op->r_arg[0];
      tmp___8 = jit->ip;
      (jit->ip) ++;
      *tmp___8 = imb.b[0];
      tmp___9 = jit->ip;
      (jit->ip) ++;
      *tmp___9 = imb.b[1];
      tmp___10 = jit->ip;
      (jit->ip) ++;
      *tmp___10 = imb.b[2];
      tmp___11 = jit->ip;
      (jit->ip) ++;
      *tmp___11 = imb.b[3];
      tmp___12 = jit->ip;
      (jit->ip) ++;
      *tmp___12 = imb.b[4];
      tmp___13 = jit->ip;
      (jit->ip) ++;
      *tmp___13 = imb.b[5];
      tmp___14 = jit->ip;
      (jit->ip) ++;
      *tmp___14 = imb.b[6];
      tmp___15 = jit->ip;
      (jit->ip) ++;
      *tmp___15 = imb.b[7];
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___1 = (unsigned char)8;
      if ((int )_amd64_rex_bits___1 != 0) {
        tmp___20 = jit->ip;
        (jit->ip) ++;
        *tmp___20 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
      }
      break;
    }
    tmp___21 = jit->ip;
    (jit->ip) ++;
    *tmp___21 = (unsigned char )((6 << 3) + 3);
    while (1) {
      while (1) {
        tmp___22 = jit->ip;
        (jit->ip) ++;
        *tmp___22 = (unsigned char )(3 << 6);
        break;
      }
      break;
    }
    break;
  }
  while (1) {
    _amd64_width_temp = (size_t )(& printf) == (size_t )((int )((size_t )(& printf)));
    while (1) {
      while (1) {
        if (_amd64_width_temp) {
          tmp___25 = 4;
        } else {
          tmp___25 = 8;
        }
        if (tmp___25 > 4) {
          tmp___24 = 8;
        } else {
          tmp___24 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )tmp___24;
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___26 = jit->ip;
          (jit->ip) ++;
          *tmp___26 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        } else {
          if (_amd64_width_temp) {
            tmp___27 = 4;
          } else {
            tmp___27 = 8;
          }
          if (tmp___27 == 1) {
            tmp___26 = jit->ip;
            (jit->ip) ++;
            *tmp___26 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
          }
        }
        break;
      }
      tmp___28 = jit->ip;
      (jit->ip) ++;
      *tmp___28 = (unsigned char)186;
      if (_amd64_width_temp) {
        tmp___41 = 4;
      } else {
        tmp___41 = 8;
      }
      if (tmp___41 == 8) {
        while (1) {
          imb___1.val = (size_t )(& printf);
          tmp___29 = jit->ip;
          (jit->ip) ++;
          *tmp___29 = imb___1.b[0];
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = imb___1.b[1];
          tmp___31 = jit->ip;
          (jit->ip) ++;
          *tmp___31 = imb___1.b[2];
          tmp___32 = jit->ip;
          (jit->ip) ++;
          *tmp___32 = imb___1.b[3];
          tmp___33 = jit->ip;
          (jit->ip) ++;
          *tmp___33 = imb___1.b[4];
          tmp___34 = jit->ip;
          (jit->ip) ++;
          *tmp___34 = imb___1.b[5];
          tmp___35 = jit->ip;
          (jit->ip) ++;
          *tmp___35 = imb___1.b[6];
          tmp___36 = jit->ip;
          (jit->ip) ++;
          *tmp___36 = imb___1.b[7];
          break;
        }
      } else {
        while (1) {
          imb___2.val = (int )((size_t )(& printf));
          tmp___37 = jit->ip;
          (jit->ip) ++;
          *tmp___37 = imb___2.b[0];
          tmp___38 = jit->ip;
          (jit->ip) ++;
          *tmp___38 = imb___2.b[1];
          tmp___39 = jit->ip;
          (jit->ip) ++;
          *tmp___39 = imb___2.b[2];
          tmp___40 = jit->ip;
          (jit->ip) ++;
          *tmp___40 = imb___2.b[3];
          break;
        }
      }
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___3 = (unsigned char)0;
      if ((int )_amd64_rex_bits___3 != 0) {
        tmp___42 = jit->ip;
        (jit->ip) ++;
        *tmp___42 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
      }
      break;
    }
    tmp___43 = jit->ip;
    (jit->ip) ++;
    *tmp___43 = (unsigned char)255;
    while (1) {
      while (1) {
        tmp___44 = jit->ip;
        (jit->ip) ++;
        *tmp___44 = (unsigned char )(((3 << 6) | (2 << 3)) | 2);
        break;
      }
      break;
    }
    break;
  }
  emit_restore_all_regs(jit, op);
  return;
}
}
static void assign_regs_for_args(struct jit_reg_allocator *al , jit_op *op ) 
{ 
  struct jit_func_info *info ;
  int assoc_gp_regs ;
  int assoc_fp_regs ;
  int i ;
  int isfp_arg ;

  {
  info = (struct jit_func_info *)op->arg[1];
  assoc_gp_regs = 0;
  assoc_fp_regs = 0;
  i = 0;
  while (i < info->general_arg_cnt + info->float_arg_cnt) {
    isfp_arg = (unsigned int )(info->args + i)->type == 2U;
    if (! isfp_arg) {
      if (assoc_gp_regs < al->gp_arg_reg_cnt) {
        rmap_assoc(op->regmap, (jit_value )((3 << 1) | ((i & 268435455) << 4)), *(al->gp_arg_regs + assoc_gp_regs));
        assoc_gp_regs ++;
      }
    }
    if (isfp_arg) {
      if (assoc_fp_regs < al->fp_arg_reg_cnt) {
        rmap_assoc(op->regmap, (jit_value )((1 | (3 << 1)) | ((i & 268435455) << 4)),
                   *(al->fp_arg_regs + assoc_fp_regs));
        assoc_fp_regs ++;
      }
    }
    i ++;
  }
  return;
}
}
void jit_message(struct jit *j , char *s ) 
{ 
  struct jit_debug_info *tmp ;

  {
  tmp = jit_debug_info_new("head.c", "jit_message", 19);
  jit_add_op(j, (unsigned short)322, (unsigned char)2, (jit_value )s, 0L, 0L, (unsigned char)0,
             tmp);
  return;
}
}
static void emit_subx_op(struct jit *jit , struct jit_op *op , int x86_op , int imm ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  long tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  x86_imm_buf imb ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___26 ;
  int tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___32 ;
  int tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  long tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___56 ;
  int tmp___57 ;
  int tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  long tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___85 ;
  int tmp___86 ;
  int tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  long tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___93 ;
  int tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;

  {
  if (imm) {
    if (op->r_arg[0] != op->r_arg[1]) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp = jit->ip;
          (jit->ip) ++;
          *tmp = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___0 = 8;
          } else {
            tmp___0 = 0;
          }
          if (op->r_arg[0] > 7L) {
            tmp___1 = 4;
          } else {
            tmp___1 = 0;
          }
          if (op->r_arg[1] > 7L) {
            tmp___2 = 1;
          } else {
            tmp___2 = 0;
          }
          _amd64_rex_bits = (unsigned char )((tmp___0 | tmp___1) | tmp___2);
          if ((int )_amd64_rex_bits != 0) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___5 = jit->ip;
        (jit->ip) ++;
        *tmp___5 = (unsigned char)139;
        break;
        default: 
        tmp___6 = __builtin_expect(1L, 0L);
        if (tmp___6) {
          __assert_rtn("emit_subx_op", "./jitter-amd64.c", 2606, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___7 = jit->ip;
            (jit->ip) ++;
            *tmp___7 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
            break;
          }
          break;
        }
        break;
      }
    }
    while (1) {
      if ((int )op->r_arg[2] >= -128) {
        if ((int )op->r_arg[2] <= 127) {
          while (1) {
            if (op->r_arg[0] > 7L) {
              tmp___8 = 1;
            } else {
              tmp___8 = 0;
            }
            _amd64_rex_bits___0 = (unsigned char )(8 | tmp___8);
            if ((int )_amd64_rex_bits___0 != 0) {
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
            }
            break;
          }
          tmp___10 = jit->ip;
          (jit->ip) ++;
          *tmp___10 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = (unsigned char )((long )((3 << 6) | ((x86_op & 7) << 3)) | (op->r_arg[0] & 7L));
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(op->r_arg[2] & 255L);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else
      _L: /* CIL Label */ 
      if (op->r_arg[0] == 0L) {
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)8;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___13 = jit->ip;
        (jit->ip) ++;
        *tmp___13 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 5);
        while (1) {
          imb.val = (int )op->r_arg[2];
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = imb.b[0];
          tmp___15 = jit->ip;
          (jit->ip) ++;
          *tmp___15 = imb.b[1];
          tmp___16 = jit->ip;
          (jit->ip) ++;
          *tmp___16 = imb.b[2];
          tmp___17 = jit->ip;
          (jit->ip) ++;
          *tmp___17 = imb.b[3];
          break;
        }
      } else {
        while (1) {
          if (op->r_arg[0] > 7L) {
            tmp___18 = 1;
          } else {
            tmp___18 = 0;
          }
          _amd64_rex_bits___2 = (unsigned char )(8 | tmp___18);
          if ((int )_amd64_rex_bits___2 != 0) {
            tmp___19 = jit->ip;
            (jit->ip) ++;
            *tmp___19 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
          }
          break;
        }
        tmp___20 = jit->ip;
        (jit->ip) ++;
        *tmp___20 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___21 = jit->ip;
            (jit->ip) ++;
            *tmp___21 = (unsigned char )((long )((3 << 6) | ((x86_op & 7) << 3)) | (op->r_arg[0] & 7L));
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = (int )op->r_arg[2];
          tmp___22 = jit->ip;
          (jit->ip) ++;
          *tmp___22 = imb___0.b[0];
          tmp___23 = jit->ip;
          (jit->ip) ++;
          *tmp___23 = imb___0.b[1];
          tmp___24 = jit->ip;
          (jit->ip) ++;
          *tmp___24 = imb___0.b[2];
          tmp___25 = jit->ip;
          (jit->ip) ++;
          *tmp___25 = imb___0.b[3];
          break;
        }
      }
      break;
    }
    return;
  }
  if (op->r_arg[0] == op->r_arg[1]) {
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___26 = 4;
        } else {
          tmp___26 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___27 = 1;
        } else {
          tmp___27 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )((8 | tmp___26) | tmp___27);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___28 = jit->ip;
          (jit->ip) ++;
          *tmp___28 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      tmp___29 = jit->ip;
      (jit->ip) ++;
      *tmp___29 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 3);
      while (1) {
        while (1) {
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else
  if (op->r_arg[0] == op->r_arg[2]) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___31 = jit->ip;
        (jit->ip) ++;
        *tmp___31 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___32 = 8;
        } else {
          tmp___32 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___33 = 4;
        } else {
          tmp___33 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )(tmp___32 | tmp___33);
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___34 = jit->ip;
          (jit->ip) ++;
          *tmp___34 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___34 = jit->ip;
          (jit->ip) ++;
          *tmp___34 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___35 = jit->ip;
      (jit->ip) ++;
      *tmp___35 = (unsigned char)136;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___36 = jit->ip;
      (jit->ip) ++;
      *tmp___36 = (unsigned char)137;
      break;
      default: 
      tmp___37 = __builtin_expect(1L, 0L);
      if (tmp___37) {
        __assert_rtn("emit_subx_op", "./jitter-amd64.c", 2614, "0");
      }
      }
      while (1) {
        if (- sizeof(void *) == 0UL) {
          while (1) {
            tmp___38 = jit->ip;
            (jit->ip) ++;
            *tmp___38 = (unsigned char )((((op->r_arg[2] & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___39 = jit->ip;
            (jit->ip) ++;
            *tmp___39 = (unsigned char )((4 << 3) | 4);
            break;
          }
        } else
        if ((int )(- sizeof(void *)) >= -128) {
          if ((int )(- sizeof(void *)) <= 127) {
            while (1) {
              tmp___40 = jit->ip;
              (jit->ip) ++;
              *tmp___40 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[2] & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___41 = jit->ip;
              (jit->ip) ++;
              *tmp___41 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- sizeof(void *) & 255UL);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___0;
          }
        } else {
          _L___0: /* CIL Label */ 
          while (1) {
            tmp___42 = jit->ip;
            (jit->ip) ++;
            *tmp___42 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[2] & 7L) & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            tmp___43 = jit->ip;
            (jit->ip) ++;
            *tmp___43 = (unsigned char )((4 << 3) | 4);
            break;
          }
          while (1) {
            imb___1.val = (int )(- sizeof(void *));
            tmp___44 = jit->ip;
            (jit->ip) ++;
            *tmp___44 = imb___1.b[0];
            tmp___45 = jit->ip;
            (jit->ip) ++;
            *tmp___45 = imb___1.b[1];
            tmp___46 = jit->ip;
            (jit->ip) ++;
            *tmp___46 = imb___1.b[2];
            tmp___47 = jit->ip;
            (jit->ip) ++;
            *tmp___47 = imb___1.b[3];
            break;
          }
        }
        break;
        if (- sizeof(void *) == 0UL) {
          while (1) {
            tmp___48 = jit->ip;
            (jit->ip) ++;
            *tmp___48 = (unsigned char )((((op->r_arg[2] & 7L) & 7L) << 3) | 4L);
            break;
          }
          break;
        }
        if ((int )(- sizeof(void *)) >= -128) {
          if ((int )(- sizeof(void *)) <= 127) {
            while (1) {
              tmp___49 = jit->ip;
              (jit->ip) ++;
              *tmp___49 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[2] & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- sizeof(void *) & 255UL);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___1;
          }
        } else {
          _L___1: /* CIL Label */ 
          while (1) {
            tmp___50 = jit->ip;
            (jit->ip) ++;
            *tmp___50 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[2] & 7L) & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            imb___2.val = (int )(- sizeof(void *));
            tmp___51 = jit->ip;
            (jit->ip) ++;
            *tmp___51 = imb___2.b[0];
            tmp___52 = jit->ip;
            (jit->ip) ++;
            *tmp___52 = imb___2.b[1];
            tmp___53 = jit->ip;
            (jit->ip) ++;
            *tmp___53 = imb___2.b[2];
            tmp___54 = jit->ip;
            (jit->ip) ++;
            *tmp___54 = imb___2.b[3];
            break;
          }
        }
        break;
      }
      break;
    }
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___55 = jit->ip;
        (jit->ip) ++;
        *tmp___55 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___56 = 8;
        } else {
          tmp___56 = 0;
        }
        if (op->r_arg[0] > 7L) {
          tmp___57 = 4;
        } else {
          tmp___57 = 0;
        }
        if (op->r_arg[1] > 7L) {
          tmp___58 = 1;
        } else {
          tmp___58 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )((tmp___56 | tmp___57) | tmp___58);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___59 = jit->ip;
          (jit->ip) ++;
          *tmp___59 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___59 = jit->ip;
          (jit->ip) ++;
          *tmp___59 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___60 = jit->ip;
      (jit->ip) ++;
      *tmp___60 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___61 = jit->ip;
      (jit->ip) ++;
      *tmp___61 = (unsigned char)139;
      break;
      default: 
      tmp___62 = __builtin_expect(1L, 0L);
      if (tmp___62) {
        __assert_rtn("emit_subx_op", "./jitter-amd64.c", 2615, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___63 = jit->ip;
          (jit->ip) ++;
          *tmp___63 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___64 = 4;
        } else {
          tmp___64 = 0;
        }
        _amd64_rex_bits___6 = (unsigned char )(8 | tmp___64);
        if ((int )_amd64_rex_bits___6 != 0) {
          tmp___65 = jit->ip;
          (jit->ip) ++;
          *tmp___65 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
        }
        break;
      }
      while (1) {
        tmp___66 = jit->ip;
        (jit->ip) ++;
        *tmp___66 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 3);
        while (1) {
          if (- sizeof(void *) == 0UL) {
            while (1) {
              tmp___67 = jit->ip;
              (jit->ip) ++;
              *tmp___67 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___68 = jit->ip;
              (jit->ip) ++;
              *tmp___68 = (unsigned char )((4 << 3) | 4);
              break;
            }
          } else
          if ((int )(- sizeof(void *)) >= -128) {
            if ((int )(- sizeof(void *)) <= 127) {
              while (1) {
                tmp___69 = jit->ip;
                (jit->ip) ++;
                *tmp___69 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
                break;
              }
              while (1) {
                tmp___70 = jit->ip;
                (jit->ip) ++;
                *tmp___70 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- sizeof(void *) & 255UL);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___2;
            }
          } else {
            _L___2: /* CIL Label */ 
            while (1) {
              tmp___71 = jit->ip;
              (jit->ip) ++;
              *tmp___71 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___72 = jit->ip;
              (jit->ip) ++;
              *tmp___72 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              imb___3.val = (int )(- sizeof(void *));
              tmp___73 = jit->ip;
              (jit->ip) ++;
              *tmp___73 = imb___3.b[0];
              tmp___74 = jit->ip;
              (jit->ip) ++;
              *tmp___74 = imb___3.b[1];
              tmp___75 = jit->ip;
              (jit->ip) ++;
              *tmp___75 = imb___3.b[2];
              tmp___76 = jit->ip;
              (jit->ip) ++;
              *tmp___76 = imb___3.b[3];
              break;
            }
          }
          break;
          if (- sizeof(void *) == 0UL) {
            while (1) {
              tmp___77 = jit->ip;
              (jit->ip) ++;
              *tmp___77 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | 4L);
              break;
            }
            break;
          }
          if ((int )(- sizeof(void *)) >= -128) {
            if ((int )(- sizeof(void *)) <= 127) {
              while (1) {
                tmp___78 = jit->ip;
                (jit->ip) ++;
                *tmp___78 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- sizeof(void *) & 255UL);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___3;
            }
          } else {
            _L___3: /* CIL Label */ 
            while (1) {
              tmp___79 = jit->ip;
              (jit->ip) ++;
              *tmp___79 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              imb___4.val = (int )(- sizeof(void *));
              tmp___80 = jit->ip;
              (jit->ip) ++;
              *tmp___80 = imb___4.b[0];
              tmp___81 = jit->ip;
              (jit->ip) ++;
              *tmp___81 = imb___4.b[1];
              tmp___82 = jit->ip;
              (jit->ip) ++;
              *tmp___82 = imb___4.b[2];
              tmp___83 = jit->ip;
              (jit->ip) ++;
              *tmp___83 = imb___4.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___84 = jit->ip;
        (jit->ip) ++;
        *tmp___84 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___85 = 8;
        } else {
          tmp___85 = 0;
        }
        if (op->r_arg[0] > 7L) {
          tmp___86 = 4;
        } else {
          tmp___86 = 0;
        }
        if (op->r_arg[1] > 7L) {
          tmp___87 = 1;
        } else {
          tmp___87 = 0;
        }
        _amd64_rex_bits___7 = (unsigned char )((tmp___85 | tmp___86) | tmp___87);
        if ((int )_amd64_rex_bits___7 != 0) {
          tmp___88 = jit->ip;
          (jit->ip) ++;
          *tmp___88 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___88 = jit->ip;
          (jit->ip) ++;
          *tmp___88 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___89 = jit->ip;
      (jit->ip) ++;
      *tmp___89 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___90 = jit->ip;
      (jit->ip) ++;
      *tmp___90 = (unsigned char)139;
      break;
      default: 
      tmp___91 = __builtin_expect(1L, 0L);
      if (tmp___91) {
        __assert_rtn("emit_subx_op", "./jitter-amd64.c", 2618, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___92 = jit->ip;
          (jit->ip) ++;
          *tmp___92 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___93 = 4;
        } else {
          tmp___93 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___94 = 1;
        } else {
          tmp___94 = 0;
        }
        _amd64_rex_bits___8 = (unsigned char )((8 | tmp___93) | tmp___94);
        if ((int )_amd64_rex_bits___8 != 0) {
          tmp___95 = jit->ip;
          (jit->ip) ++;
          *tmp___95 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
        }
        break;
      }
      tmp___96 = jit->ip;
      (jit->ip) ++;
      *tmp___96 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 3);
      while (1) {
        while (1) {
          tmp___97 = jit->ip;
          (jit->ip) ++;
          *tmp___97 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
static int join_muli_addi(jit_op *op , jit_op *nextop ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  if (nextop->arg[2] >= (-0x7FFFFFFF-1)) {
    if (! (nextop->arg[2] <= 2147483647L)) {
      return (0);
    }
  } else {
    return (0);
  }
  tmp = is_suitable_mul(op);
  if (! tmp) {
    return (0);
  }
  tmp___0 = make_addmuli(op, nextop);
  return (tmp___0);
}
}
static jit_tree *prepare_labels(struct jit *jit ) 
{ 
  long x ;
  jit_tree *n ;
  jit_op *op ;
  jit_op *tmp ;

  {
  x = 1L;
  n = (jit_tree *)((void *)0);
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 136U) {
      n = jit_tree_insert(n, (long )op, (void *)x, (int *)((void *)0));
      n = jit_tree_insert(n, op->arg[0], (void *)(- x), (int *)((void *)0));
      x ++;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 456U) {
      n = jit_tree_insert(n, op->arg[0], (void *)x, (int *)((void *)0));
      x ++;
    }
    op = op->next;
  }
  return (n);
}
}
__inline extern int isprint(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 262144UL);
  return (tmp);
}
}
static int jit_op_is_data_op(jit_op *op ) 
{ 
  jit_opcode code ;
  int tmp ;

  {
  while (1) {
    if (op) {
      if (! ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 456U)) {
        if (! ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 136U)) {
          break;
        }
      }
    } else {
      break;
    }
    op = op->next;
  }
  if (! op) {
    return (0);
  }
  code = (jit_opcode )((int )op->code & 65528);
  if ((unsigned int )code == 352U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 880U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 520U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 488U) {
    tmp = 1;
  } else {
    tmp = 0;
  }
  return (tmp);
}
}
void jit_enable_optimization(struct jit *jit , int opt ) 
{ 


  {
  jit->optimizations |= (unsigned int )opt;
  return;
}
}
static jit_tree *delete_node(jit_tree *h , jit_tree_key key , int *found ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  jit_tree_key tmp___4 ;
  jit_tree *tmp___5 ;
  jit_tree *tmp___6 ;

  {
  if ((unsigned long )h == (unsigned long )((void *)0)) {
    if (found) {
      *found = 0;
    }
    return ((jit_tree *)((void *)0));
  }
  if (key < h->key) {
    tmp = is_red(h->left);
    if (! tmp) {
      if (h->left) {
        tmp___0 = is_red((h->left)->left);
        if (! tmp___0) {
          h = move_red_left(h);
        }
      }
    }
    h->left = delete_node(h->left, key, found);
  } else {
    tmp___1 = is_red(h->left);
    if (tmp___1) {
      h = rotate_right(h);
    }
    if (key == h->key) {
      if ((unsigned long )h->right == (unsigned long )((void *)0)) {
        free((void *)h);
        if (found) {
          *found = 1;
        }
        return ((jit_tree *)((void *)0));
      }
    }
    tmp___2 = is_red(h->right);
    if (! tmp___2) {
      if (h->right) {
        tmp___3 = is_red((h->right)->left);
        if (! tmp___3) {
          h = move_red_right(h);
        }
      }
    }
    if (key == h->key) {
      tmp___4 = node_min(h->right);
      tmp___5 = jit_tree_search(h->right, tmp___4);
      h->value = tmp___5->value;
      h->key = node_min(h->right);
      h->right = delete_min(h->right);
      if (found) {
        *found = 1;
      }
    } else {
      h->right = delete_node(h->right, key, found);
    }
  }
  tmp___6 = fixup(h);
  return (tmp___6);
}
}
static void jit_dump_ops_general(struct jit *jit , jit_tree *labels , int verbosity ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  int size ;
  int tmp___0 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    tmp___0 = print_op(__stdoutp, & jit_disasm_general, op, labels, verbosity);
    size = tmp___0;
    if (size == 0) {
      return;
    }
    while (size < 35) {
      printf((char const   */* __restrict  */)" ");
      size ++;
    }
    if (verbosity & 1024) {
      if (op->live_in) {
        if (op->live_out) {
          printf((char const   */* __restrict  */)"In: ");
          jit_tree_walk((op->live_in)->root, & print_reg_liveness_callback, (void *)(& jit_disasm_general));
          printf((char const   */* __restrict  */)"\tOut: ");
          jit_tree_walk((op->live_out)->root, & print_reg_liveness_callback, (void *)(& jit_disasm_general));
        }
      }
    }
    if (verbosity & 512) {
      if (op->regmap) {
        printf((char const   */* __restrict  */)"\tAssoc: ");
        jit_tree_walk((op->regmap)->map, & print_rmap_callback, (void *)(& jit_disasm_general));
      }
    }
    printf((char const   */* __restrict  */)"\n");
    op = op->next;
  }
  return;
}
}
