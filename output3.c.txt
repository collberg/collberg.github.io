
/*
BEGIN-TIGRESS
{
  "Tigress": {
    "Source": "This file was generated by Tigress, a product of the University of Arizona.",
    "Author": "Christian Collberg",
    "Contact": "collberg@gmail.com",
    "Version": "3.3.3",
    "Url": "https://tigress.wtf"
  },
  "Usage": {
    "Research": "Tigress is free to use for research purposes.",
    "Commercial": "Any use in a commercial setting requires a license from the University of Arizona."
  }
}
END-TIGRESS
*/


/*
BEGIN-OPTIONS
[
  { "task": 1, "kind": "InitEntropy", "prefix": "", "seed": "",
  "funSpec": [ [ "id(init_tigress)", "" ] ], "globalVarSpec": [],
  "localVarSpec": [], "exclude": [], "funs": [ "init_tigress" ],
  "options": {
    "common": {
      "prefix": "",
      "verbosity": "None",
      "statistics": "None",
      "transformationKind": "Ident",
      "transformationNumber": "0"
    },
    "updateKinds": [ "vars" ],
    "trace": "false",
    "vars": [ "?1" ],
    "threadName": "entropyThread",
    "threadSleep": "100"
  } }, { "task": 2, "kind": "InitOpaque", "prefix": "", "seed": "",
  "funSpec": [ [ "id(init_tigress)", "" ] ], "globalVarSpec": [],
  "localVarSpec": [], "exclude": [], "funs": [ "init_tigress" ],
  "options": {
    "common": {
      "prefix": "",
      "verbosity": "None",
      "statistics": "None",
      "transformationKind": "Ident",
      "transformationNumber": "0"
    },
    "count": "1",
    "kinds": [ "list", "array", "env" ],
    "size": "30",
    "trace": [],
    "allowAddNodes": "false",
    "debug": "false"
  } }, { "task": 3, "kind": "Virtualize", "prefix": "", "seed": "",
  "funSpec": [ [ "id(fib)", "" ] ], "globalVarSpec": [], "localVarSpec": [],
  "exclude": [], "funs": [ "fib" ],
  "options": {
    "common": {
      "prefix": "",
      "verbosity": "None",
      "statistics": "None",
      "transformationKind": "Ident",
      "transformationNumber": "0"
    },
    "kind": "direct",
    "operands": "stack",
    "maxDuplicateOps": "1",
    "maxMergeLength": "1",
    "stackSize": "32",
    "seed": "0",
    "superOperatorRatio": "2.",
    "taggedStore": "false",
    "randomizeOperators": "true",
    "randomizeOperandOrder": "true",
    "numberOfBogusFuns": "0",
    "bogusFunsGenerateOutput": "true",
    "bogusFunKinds": [ "arithSeq", "collatz" ],
    "bogusLoopKinds": [ "arithSeq", "collatz" ],
    "bogusLoopIterations": "0",
    "trace": [],
    "doPrintComment": "false",
    "doOptimizeBody": "false",
    "doOptimizeTreeCode": "false",
    "doReentrant": "false",
    "selfModifyingIndirectBranches": "false",
    "instructionHandlerSplitCount": "0",
    "addOpaqueToVPC": "false",
    "addOpaqueToBogusFuns": "false",
    "shortIdents": "false",
    "dump": [],
    "performance": [ "PointerStack" ],
    "implicitFlow": [],
    "implicitFlowOptions": {
      "common": {
        "prefix": "",
        "verbosity": "None",
        "statistics": "None",
        "transformationKind": "Ident",
        "transformationNumber": "0"
      },
      "handlerCount": "1",
      "jitCount": "1",
      "jitFunctionBody": "(for (for (for (for (if (bb 2) (bb 2))))))",
      "kinds": [ "counter_int" ],
      "combiner": "*",
      "trainingKind": "gap",
      "time": "false",
      "trace": "false",
      "train": "false",
      "trainingTimesClock": "0",
      "trainingTimesThread": "0",
      "trainingMaxFailureRateClock": "5",
      "trainingMaxFailureRateThread": "1",
      "trainingMinGap": "80",
      "trainingData": "None",
      "trainingConfidenceLevel": "0.95",
      "trainingTargetErrorRate": "0.0001",
      "trainingParameterRange": [
        "(trivial_clock,(1,10000))", "(trivial_thread_1,(1,10000))",
        "(trivial_thread_2,(1,10000))", "(trivial_counter,(1,10000))",
        "(file_cache_time,(1,1024))", "(file_cache_thread_1,(1,1024))",
        "(file_cache_thread_2,(1,1024))",
        "(file_cache_thread_timer,(1,1024))", "(mem_cache_time,(2,64))",
        "(mem_cache_thread_1,(2,64))", "(mem_cache_thread_2,(2,64))",
        "(jit_time,(0,0))", "(jit_thread_1,(0,0))", "(jit_thread_2,(0,0))",
        "(jit_thread_timer,(0,0))", "(branchPrediction_time,(2,10))"
      ]
    },
    "conditionalKinds": [ "branch" ],
    "encodeByteArray": [],
    "obfuscateDecodeByteArray": "false",
    "structs": "None",
    "dynamicBytecode": "false",
    "dynamic": {
      "common": {
        "prefix": "",
        "verbosity": "None",
        "statistics": "None",
        "transformationKind": "Ident",
        "transformationNumber": "0"
      },
      "encoding": [ "hard" ],
      "block_fraction": "*",
      "codecs": [ "xor_transfer", "xtea" ],
      "keyTypes": [ "data", "code" ],
      "frequency": "1",
      "reEncode": "true",
      "optimize_binary": [
        "OMIT_FRAME_PTR", "OMIT_UNUSED_ASSIGNEMENTS", "JOIN_ADDMUL"
      ],
      "dump_opcodes": "0",
      "dump_tree": "false",
      "annotateTree": "false",
      "randomize_blocks": "false",
      "dump_intermediate": "false",
      "dump_cfg": "false",
      "implicitFlow": "false",
      "obfuscateHandle": "false",
      "obfuscateArguments": "false",
      "trace": "0",
      "traceExec": "false",
      "traceBlock": "false",
      "optimize": "true",
      "implicitFlowOptions": "None",
      "compileCommand": "gcc -std=c99 -o %o %i"
    }
  } }, { "task": 4, "kind": "JitDynamic", "prefix": "", "seed": "",
  "funSpec": [ [ "id(fib)", "" ] ], "globalVarSpec": [], "localVarSpec": [],
  "exclude": [], "funs": [ "fib" ],
  "options": {
    "common": {
      "prefix": "",
      "verbosity": "None",
      "statistics": "None",
      "transformationKind": "Ident",
      "transformationNumber": "0"
    },
    "dynamic": {
      "common": {
        "prefix": "",
        "verbosity": "None",
        "statistics": "None",
        "transformationKind": "Ident",
        "transformationNumber": "0"
      },
      "encoding": [ "hard" ],
      "block_fraction": "%100",
      "codecs": [ "xtea" ],
      "keyTypes": [ "data", "code" ],
      "frequency": "1",
      "reEncode": "true",
      "optimize_binary": [
        "OMIT_FRAME_PTR", "OMIT_UNUSED_ASSIGNEMENTS", "JOIN_ADDMUL"
      ],
      "dump_opcodes": "0",
      "dump_tree": "false",
      "annotateTree": "false",
      "randomize_blocks": "false",
      "dump_intermediate": "false",
      "dump_cfg": "false",
      "implicitFlow": "false",
      "obfuscateHandle": "false",
      "obfuscateArguments": "false",
      "trace": "0",
      "traceExec": "false",
      "traceBlock": "false",
      "optimize": "true",
      "implicitFlowOptions": "None",
      "compileCommand": "gcc -std=c99 -o %o %i"
    },
    "jit": {
      "common": {
        "prefix": "",
        "verbosity": "None",
        "statistics": "None",
        "transformationKind": "Ident",
        "transformationNumber": "0"
      },
      "encoding": [ "hard" ],
      "frequency": "1",
      "optimize_binary": [
        "OMIT_FRAME_PTR", "OMIT_UNUSED_ASSIGNEMENTS", "JOIN_ADDMUL",
        "DEAD_CODE"
      ],
      "randomize_blocks": "false",
      "dump_opcodes": "0",
      "dump_tree": "false",
      "annotateTree": "false",
      "dump_intermediate": "false",
      "dump_cfg": "false",
      "obfuscateHandle": "false",
      "obfuscateArguments": "false",
      "trace": "0",
      "traceExec": "false",
      "implicitFlow": "false",
      "implicitFlowOptions": "None"
    }
  } }, { "task": 5, "kind": "Measure", "prefix": "", "seed": "",
  "funSpec": [ [ "id(fib)", "" ] ], "globalVarSpec": [], "localVarSpec": [],
  "exclude": [], "funs": [ "fib" ],
  "options": {
    "common": {
      "prefix": "",
      "verbosity": "None",
      "statistics": "None",
      "transformationKind": "Ident",
      "transformationNumber": "0"
    },
    "kinds": [ "time" ],
    "times": "100"
  } }
]
END-OPTIONS
*/


/*
BEGIN-UNIVERSE
{
  "Not added to universe": [
    "__sync_and_and_fetch", "__sync_fetch_and_or", "__atomic_or_fetch",
    "__atomic_nand_fetch_8", "__atomic_fetch_and", "__atomic_xor_fetch_16",
    "__atomic_fetch_nand_16", "__atomic_sub_fetch_1", "__atomic_fetch_or",
    "__sync_synchronize", "__sync_or_and_fetch", "__atomic_nand_fetch_4",
    "__atomic_sub_fetch_4", "__atomic_compare_exchange_n",
    "__sync_add_and_fetch", "__atomic_signal_fence", "__atomic_fetch_nand_1",
    "__atomic_and_fetch_16", "__sync_fetch_and_nand", "__atomic_xor_fetch_8",
    "__atomic_xor_fetch_2", "__atomic_thread_fence", "__atomic_store_16",
    "__atomic_fetch_and_8", "__atomic_and_fetch_2", "__atomic_test_and_set",
    "__atomic_fetch_add_8", "__atomic_fetch_nand", "__atomic_exchange_16",
    "__atomic_clear", "__atomic_store", "__atomic_add_fetch_2",
    "__atomic_fetch_xor_1", "__atomic_and_fetch",
    "__atomic_compare_exchange_4", "__sync_sub_and_fetch",
    "__sync_nand_and_fetch", "__atomic_load_16", "__atomic_always_lock_free",
    "__atomic_nand_fetch_16", "__sync_xor_and_fetch", "__atomic_fetch_xor_8",
    "__atomic_exchange_8", "__atomic_exchange_1", "__sync_fetch_and_and",
    "__atomic_feraiseexcept", "__atomic_and_fetch_4", "__atomic_or_fetch_8",
    "__atomic_or_fetch_4", "__atomic_or_fetch_1", "__atomic_fetch_and_2",
    "__sync_lock_release", "__atomic_fetch_nand_8", "__atomic_fetch_add",
    "__atomic_nand_fetch_1", "__atomic_fetch_nand_2", "__atomic_load_n",
    "__atomic_compare_exchange_16", "__atomic_exchange_n",
    "__atomic_fetch_or_1", "__atomic_fetch_or_8", "__atomic_fetch_add_1",
    "__atomic_fetch_sub_1", "__atomic_fetch_or_4", "__atomic_load_2",
    "__atomic_store_2", "__atomic_exchange_4", "__sync_fetch_and_xor",
    "__atomic_fetch_sub_4", "__atomic_fetch_and_4",
    "__atomic_compare_exchange", "__atomic_load_1",
    "__atomic_compare_exchange_1", "__atomic_fetch_xor_2", "__atomic_load",
    "__atomic_or_fetch_16", "__atomic_add_fetch_16",
    "__sync_val_compare_and_swap", "__atomic_store_4",
    "__atomic_fetch_and_1", "__atomic_fetch_nand_4", "__atomic_fetch_add_16",
    "__atomic_compare_exchange_2", "__atomic_exchange",
    "__atomic_sub_fetch_8", "__atomic_fetch_sub_16", "__atomic_exchange_2",
    "__atomic_sub_fetch_2", "__atomic_fetch_xor_16", "__atomic_fetch_or_16",
    "__atomic_load_4", "__atomic_store_n", "__atomic_fetch_add_4",
    "__atomic_nand_fetch_2", "__sync_lock_test_and_set",
    "__atomic_sub_fetch", "__atomic_fetch_and_16",
    "__atomic_compare_exchange_8", "__atomic_nand_fetch", "__atomic_load_8",
    "__atomic_xor_fetch_4", "__atomic_fetch_sub_2", "__atomic_add_fetch",
    "__atomic_store_8", "__atomic_xor_fetch", "__sync_fetch_and_add",
    "__atomic_or_fetch_2", "__atomic_add_fetch_1", "__atomic_fetch_xor",
    "__atomic_add_fetch_8", "__atomic_fetch_xor_4", "__atomic_fetch_sub_8",
    "__sync_bool_compare_and_swap", "__atomic_and_fetch_1",
    "__atomic_store_1", "__atomic_xor_fetch_1", "__atomic_fetch_or_2",
    "__atomic_sub_fetch_16", "__sync_fetch_and_sub", "__atomic_fetch_add_2",
    "__atomic_is_lock_free", "__atomic_and_fetch_8", "__atomic_fetch_sub",
    "__atomic_add_fetch_4", "jit_init", "jit_add_op", "jit_add_fop",
    "jit_debug_info_new", "jit_generate_code", "jit_free", "jit_dump_ops",
    "jit_check_code", "jit_trace", "jit_enable_optimization",
    "jit_disable_optimization", "jit_add_prolog", "jit_get_label",
    "jit_allocai", "jit_regs_active_count", "jit_regs_active",
    "jit_patch_external_calls", "jit_patch_local_addrs",
    "jit_collect_statistics", "jit_optimize_st_ops",
    "jit_optimize_join_addmul", "jit_optimize_join_addimm",
    "jit_optimize_frame_ptr", "jit_optimize_unused_assignments",
    "is_cond_branch_op", "jit_trace_callback", "jit_init_arg_params",
    "jit_assign_regs", "jit_reg_allocator_create", "jit_reg_allocator_free",
    "jit_gen_op", "jit_reg_in_use", "jit_get_unused_reg",
    "jit_get_unused_reg_with_index", "rmap_free", "jit_allocator_hints_free",
    "is_spilled", "emit_push_callee_saved_regs",
    "emit_push_caller_saved_regs", "emit_pop_callee_saved_regs",
    "emit_pop_caller_saved_regs", "emit_save_all_regs",
    "emit_restore_all_regs", "rmap_is_associated", "rmap_get",
    "emit_sse_round", "emit_sse_round", "jit_arg_layout_add",
    "jit_dead_code_analysis", "unload_reg", "load_reg", "hints_refcount_inc"
  ],
  "Transformations": [
    { "TransformationNumber": 5, "TransformationKind": "Measure",
    "TransformationUpdates": {
      "Modified Function Implementations": [ "fib" ]
    } }, { "TransformationNumber": 4, "TransformationKind": "JitDynamic",
    "TransformationUpdates": {
      "Modified Function Implementations": [ "fib" ],
      "New Functions": [
        "_cipher$_xtea_encipherBlock", "_cipher$_xtea_encipher",
        "_cipher$_xtea_decipherBlock", "_cipher$_xtea_decipher"
      ],
      "New Global Variables": {
        "__4_fib___t": "INIT",
        "__4_fib___freq": "INIT"
      }
    } }, { "TransformationNumber": 3, "TransformationKind": "Virtualize",
    "TransformationUpdates": {
      "Modified Function Implementations": [ "fib" ],
      "New Global Variables": { "__3_fib_$strings": "INIT" },
      "New Types": [ "__3_fib_$node" ]
    } }, { "TransformationNumber": 2, "TransformationKind": "InitOpaque",
    "TransformationUpdates": {
      "Modified Function Implementations": [ "init_tigress" ],
      "New Global Variables": {
        "__2_init_tigress__opaque_array": "INIT",
        "__2_init_tigress_1_opaque_ptr_2": "INIT",
        "__2_init_tigress_1_opaque_list_2": "INIT",
        "__2_init_tigress_1_opaque_ptr_1": "INIT",
        "__2_init_tigress_1_opaque_list_1": "INIT"
      },
      "New Types": [
        "__2_init_tigress_1_opaque_StructureType",
        "__2_init_tigress_1_opaque_NodeStruct"
      ]
    } }, { "TransformationNumber": 1, "TransformationKind": "InitEntropy",
    "TransformationUpdates": {
      "New Global Variables": {
        "__1_alwaysZero": "INIT",
        "__1_entropy": "INIT"
      }
    } }, { "TransformationNumber": 0, "TransformationKind": "Initialize",
    "TransformationUpdates": {
      "Modified Function Implementations": [ "main" ],
      "New Global Variables": {
        "_global_envp": "FUN: '_global_envp_i$nit'",
        "_global_argv": "FUN: '_global_argv_i$nit'",
        "_global_argc": "FUN: '_global_argc_i$nit'"
      }
    } }, { "TransformationNumber": -1, "TransformationKind": "Initialize",
    "TransformationUpdates": {
      "New Functions": [
        "main", "fib", "fac", "init_tigress", "jit_messager", "jit_message",
        "jit_regs_active", "jit_regs_active_count", "jit_free",
        "jit_disable_optimization", "jit_enable_optimization",
        "is_cond_branch_op", "free_labels", "free_ops", "jit_trace",
        "jit_generate_code", "jit_buf_expand",
        "jit_prepare_spills_on_jmpr_targets", "jit_prepare_arguments",
        "jit_prepare_reg_counts", "jit_expand_patches_and_labels",
        "jit_correct_float_imms", "jit_correct_long_imms",
        "jit_imm_overflow", "jit_get_label", "jit_add_prolog", "jit_init",
        "jit_debug_info_new", "jit_add_fop", "jit_add_op",
        "jit_get_unused_reg", "jit_get_unused_reg_with_index",
        "jit_reg_in_use", "jit_reg_allocator_free", "jit_assign_regs",
        "branch_adjustment", "jump_adjustment", "jit_allocator_hints_free",
        "hints_refcount_inc", "jit_collect_statistics",
        "mark_calleesaved_regs", "assign_regs", "associate_register",
        "is_transfer_op", "associate_register_alias", "force_assoc",
        "force_spill", "spill_all_registers", "assign_call", "assign_jmp",
        "spill_ret_retreg", "assign_getarg", "assign_ret_reg",
        "prepare_registers_for_call", "assign_regs_for_args",
        "make_free_reg", "rename_reg", "load_reg", "sync_reg", "unload_reg",
        "insert_reg_op", "rmap_free", "rmap_spill_candidate",
        "candidate_score", "rmap_sync", "rmap_sync_aux", "rmap_equal",
        "rmap_subset", "rmap_clone", "rmap_unassoc", "rmap_assoc",
        "rmap_is_associated", "rmap_is_associated_aux", "rmap_get",
        "rmap_init", "jit_dead_code_analysis", "mark_livecode",
        "jit_flw_analysis", "analyze_function", "flw_analyze_op",
        "initialize_code_refs", "flw_analyze_prolog", "jit_flw_initialize",
        "jit_check_code", "check_code_references", "check_data_references",
        "check_data_alignment", "jit_op_is_data_op", "check_register_types",
        "check_argument_sizes", "valid_fsize", "valid_size",
        "check_uninitialized_registers", "print_regs",
        "check_op_without_effect", "check_missing_patches",
        "check_dead_code", "cleanup", "append_msg", "report_warning",
        "jit_trace_callback", "jit_trace_op", "jit_dump_ops",
        "jit_dump_ops_combined", "print_combined_op", "open_disasm",
        "print_op_bytes", "platform_id", "jit_dump_ops_general",
        "jit_dump_ops_compilable", "print_op_compilable", "print_op",
        "print_comment", "print_load_op", "print_full_op_name", "print_args",
        "print_str", "print_arg", "print_addr", "prepare_labels",
        "jit_op_is_cflow", "print_reg_liveness_callback",
        "print_rmap_callback", "jit_get_reg_name", "jit_get_op_name",
        "compiler_based_debugger", "ob_pad", "ob_append", "ob_printf",
        "ob_assert_space", "ob_free", "ob_new", "jit_gen_op",
        "jit_patch_local_addrs", "jit_allocai", "emit_memset", "emit_memcpy",
        "emit_transfer_op", "emit_transfer_loop", "emit_transfer_init",
        "emit_ldx_op", "emit_ld_op", "is_spilled", "emit_branch_overflow_op",
        "emit_branch_mask_op", "emit_branch_op", "emit_cond_op",
        "emit_shift_op", "emit_div_op", "emit_mul_op", "emit_rsb_op",
        "emit_subx_op", "emit_sub_op", "emit_alu_op", "emit_get_arg",
        "emit_get_arg_from_stack", "emit_ureg", "emit_lreg",
        "emit_restore_all_regs", "emit_save_all_regs",
        "required_stack_space_for_regs", "is_active_register",
        "emit_pop_caller_saved_regs", "generic_pop_caller_saved_regs",
        "emit_push_caller_saved_regs", "generic_push_caller_saved_regs",
        "emit_pop_callee_saved_regs", "emit_push_callee_saved_regs",
        "emit_pop_reg", "emit_push_reg", "jit_reg_allocator_create",
        "jit_patch_external_calls", "emit_fretval_op", "emit_fret_op",
        "emit_trace_op", "emit_msg_op", "emit_prolog_op", "emit_funcall",
        "emit_arguments", "emit_fppush_arg", "emit_push_arg",
        "emit_set_fparg", "emit_set_arg", "jit_optimize_join_addimm",
        "join_addi_addr", "join_addr_addi", "jit_optimize_join_addmul",
        "join_muli_addr", "join_muli_ori", "join_muli_addi", "make_addmuli",
        "is_suitable_mul", "pow2", "shift_index", "join_2ops",
        "get_related_op", "make_nop", "jit_optimize_unused_assignments",
        "jit_optimize_frame_ptr", "jit_optimize_st_ops", "stack_reg_pos",
        "jit_init_arg_params", "stack_fparg_pos", "stack_arg_pos",
        "get_frame_size", "jit_arg_layout_add",
        "jit_arg_layout_create_input", "jit_arg_layout_create_output",
        "jit_arg_layout_create", "emit_sse_fstx_op", "emit_sse_fldx_op",
        "emit_sse_fld_op", "emit_sse_fst_op", "emit_sse_floor",
        "emit_sse_round", "emit_sse_branch", "emit_sse_neg_op",
        "emit_sse_div_op", "emit_sse_sub_op", "emit_sse_change_sign",
        "emit_sse_alu_op", "emit_sse_get_sign_mask",
        "sse_alu_sd_reg_safeimm", "sse_alu_pd_reg_safeimm",
        "sse_mov_reg_safeimm", "uses_hw_reg", "_bit_pop", "jit_set_to_array",
        "copy_reg_to_array", "jit_set_size", "jit_set_equal",
        "jit_set_remove", "jit_set_add", "jit_set_get", "jit_set_addall",
        "jit_set_free", "jit_set_clone", "jit_set_new", "jit_value_align",
        "funcall_fput_arg", "funcall_put_arg", "funcall_prepare",
        "jit_current_func_info", "jit_is_label", "jit_op_delete",
        "jit_free_op", "jit_op_last_fun", "jit_op_last", "jit_op_first",
        "jit_op_prepend", "jit_op_append", "jit_op_new", "jit_tree_size",
        "jit_tree_equal", "jit_tree_subset", "jit_tree_free",
        "jit_print_tree", "jit_tree_walk", "jit_tree_clone",
        "jit_tree_addall", "jit_tree_delete", "delete_node", "delete_min",
        "node_min", "move_red_right", "move_red_left", "jit_tree_search",
        "jit_tree_insert", "node_insert", "node_new", "fixup", "color_flip",
        "rotate_right", "rotate_left", "is_red", "jit_data_bytes",
        "jit_proc_value", "isspecial", "isrune", "isphonogram", "isnumber",
        "isideogram", "ishexnumber", "digittoint", "toupper", "tolower",
        "toascii", "isxdigit", "isupper", "isspace", "ispunct", "isprint",
        "islower", "isgraph", "isdigit", "iscntrl", "isblank", "isalpha",
        "isalnum", "__wcwidth", "__isctype", "__istype", "isascii",
        "__darwin_fd_clr", "__darwin_fd_set", "__darwin_fd_isset",
        "__darwin_check_fd_set", "_OSSwapInt64", "_OSSwapInt32",
        "_OSSwapInt16", "__sputc"
      ],
      "New Global Variables": {
        "jit_debugging_disasm": "FUN: 'jit_debugging_disasm_i$nit'",
        "jit_disasm_compilable": "FUN: 'jit_disasm_compilable_i$nit'",
        "jit_disasm_general": "FUN: 'jit_disasm_general_i$nit'",
        "x05": "FUN: 'x05_i$nit'",
        "x0": "FUN: 'x0_i$nit'",
        "bufx": "None",
        "x86_cc_signed_map": "FUN: 'x86_cc_signed_map_i$nit'",
        "x86_cc_unsigned_map": "FUN: 'x86_cc_unsigned_map_i$nit'",
        "dummy_opcode": "None"
      },
      "New Externs": [
        "__builtin_va_copy", "__builtin_frob_return_address",
        "__builtin_popcountll", "__builtin_atanf", "__builtin_ia32_addps",
        "__builtin_strcspn", "__builtin_asinf", "__builtin_ia32_maxps",
        "__builtin_ia32_unpckhps", "__builtin_acos",
        "__builtin___sprintf_chk", "__builtin_cosh", "__builtin_tanhf",
        "__builtin_mempcpy", "__builtin_sqrtl", "__builtin_parity",
        "__builtin_coshl", "__builtin_cosl", "__builtin_cosf",
        "__builtin_acosl", "__builtin___mempcpy_chk", "__builtin_clz",
        "__builtin_log10", "__builtin___strcat_chk", "__builtin_modff",
        "__builtin_sin", "__builtin_frexp", "__builtin_acosf",
        "__builtin_sinhl", "__builtin___stpcpy_chk", "__builtin_fabs",
        "__builtin_va_start", "__builtin_bswap16", "__builtin_ctz",
        "__builtin_strpbrk", "__builtin_strcpy", "__builtin_sqrt",
        "__builtin_next_arg", "__builtin_log10f", "__builtin_fabsl",
        "__builtin_floorl", "__builtin_floorf", "__builtin_memcpy",
        "__builtin_ia32_subps", "__builtin_parityll", "__builtin_va_end",
        "__builtin_bzero", "__builtin_strncmp", "__builtin___vsprintf_chk",
        "__builtin_sqrtf", "__builtin_nans", "__builtin_exp",
        "__builtin_strcmp", "__builtin_ldexpf", "__builtin___strlcpy_chk",
        "__builtin_powif", "__builtin_log10l", "__builtin___memmove_chk",
        "__builtin_return_address", "__builtin_fabsf",
        "__builtin_object_size", "__builtin_alloca",
        "__builtin_va_arg_pack_len", "__builtin_tanl", "__builtin_modfl",
        "__builtin_stpcpy", "__builtin_sinl", "__builtin_asin",
        "__builtin_sinhf", "__builtin_ctzl", "__builtin_tanhl",
        "__builtin_bswap64", "__builtin_ia32_mulps", "__builtin_tan",
        "__builtin_strncpy", "__builtin_inff", "__builtin___memset_chk",
        "__builtin_huge_val", "__builtin_clzl", "__builtin_frexpf",
        "__builtin_fmodl", "__builtin_atan", "__builtin___fprintf_chk",
        "__builtin_ceilf", "__builtin_return", "__builtin_asinl",
        "__builtin_ffsll", "__builtin_va_arg_pack",
        "__builtin___strncpy_chk", "__builtin_powi", "__builtin_strchr",
        "__builtin___strncat_chk", "__builtin_huge_vall", "__builtin_ffsl",
        "__builtin___vprintf_chk", "__builtin_ia32_unpcklps",
        "__builtin_strncat", "__builtin_ctzll", "__builtin_stdarg_start",
        "__builtin_frexpl", "__builtin_tanf", "__builtin_logl",
        "__builtin_va_arg", "__builtin_expect", "__builtin___printf_chk",
        "__builtin___vfprintf_chk", "__builtin_prefetch", "__builtin_nansl",
        "__builtin_fmod", "__builtin_tanh", "__builtin_unreachable",
        "__builtin_ldexpl", "__builtin_apply", "__builtin_sinf",
        "__builtin_ceil", "__builtin_powil", "__builtin_expl",
        "__builtin_constant_p", "__builtin_log", "__builtin_expf",
        "__builtin_types_compatible_p", "__builtin_atan2l",
        "__builtin_apply_args", "__builtin_logf", "__builtin_strlen",
        "__builtin_ffs", "__builtin_inf", "__builtin___memcpy_chk",
        "__builtin_trap", "__builtin_parityl", "__builtin_strspn",
        "__builtin_varargs_start", "__builtin_nan",
        "__builtin___snprintf_chk", "__builtin_atanl", "__builtin_clzll",
        "__builtin_huge_valf", "__builtin_coshf", "__builtin_nansf",
        "__builtin___vsnprintf_chk", "__builtin_nanf", "__builtin_atan2",
        "__builtin_popcountl", "__builtin_ceill", "__builtin___strcpy_chk",
        "__builtin_floor", "__builtin_cos", "__builtin_memset",
        "__builtin_nanl", "__builtin_atan2f", "__builtin_popcount",
        "__builtin_sinh", "__builtin___strlcat_chk", "__builtin_bcopy",
        "__builtin_extract_return_addr", "__builtin_bswap32",
        "__builtin_ldexp", "__builtin_infl", "__builtin_fmodf",
        "__builtin_frame_address", "renameat", "renamex_np", "renameatx_np",
        "__stdinp", "__stdoutp", "__stderrp", "clearerr", "fclose", "feof",
        "ferror", "fflush", "fgetc", "fgetpos", "fgets", "fopen", "fprintf",
        "fputc", "fputs", "fread", "freopen", "fscanf", "fseek", "fsetpos",
        "ftell", "fwrite", "getc", "getchar", "gets", "perror", "printf",
        "putc", "putchar", "puts", "remove", "rename", "rewind", "scanf",
        "setbuf", "setvbuf", "sprintf", "sscanf", "tmpfile", "tmpnam",
        "ungetc", "vfprintf", "vprintf", "vsprintf", "ctermid", "fdopen",
        "fileno", "pclose", "popen", "__srget", "__svfscanf", "__swbuf",
        "flockfile", "ftrylockfile", "funlockfile", "getc_unlocked",
        "getchar_unlocked", "putc_unlocked", "putchar_unlocked", "getw",
        "putw", "tempnam", "fseeko", "ftello", "snprintf", "vfscanf",
        "vscanf", "vsnprintf", "vsscanf", "dprintf", "vdprintf", "getdelim",
        "getline", "fmemopen", "open_memstream", "sys_nerr", "sys_errlist",
        "asprintf", "ctermid_r", "fgetln", "fmtcheck", "fpurge", "setbuffer",
        "setlinebuf", "vasprintf", "zopen", "funopen", "__sprintf_chk",
        "__snprintf_chk", "__vsprintf_chk", "__vsnprintf_chk", "signal",
        "getpriority", "getiopolicy_np", "getrlimit", "getrusage",
        "setpriority", "setiopolicy_np", "setrlimit", "wait", "waitpid",
        "waitid", "wait3", "wait4", "alloca", "__mb_cur_max", "malloc",
        "calloc", "free", "realloc", "valloc", "aligned_alloc",
        "posix_memalign", "abort", "abs", "atexit", "atof", "atoi", "atol",
        "atoll", "bsearch", "div", "exit", "getenv", "labs", "ldiv", "llabs",
        "lldiv", "mblen", "mbstowcs", "mbtowc", "qsort", "rand", "srand",
        "strtod", "strtof", "strtol", "strtold", "strtoll", "strtoul",
        "strtoull", "system", "wcstombs", "wctomb", "_Exit", "a64l",
        "drand48", "ecvt", "erand48", "fcvt", "gcvt", "getsubopt", "grantpt",
        "initstate", "jrand48", "l64a", "lcong48", "lrand48", "mktemp",
        "mkstemp", "mrand48", "nrand48", "posix_openpt", "ptsname",
        "ptsname_r", "putenv", "random", "rand_r", "realpath", "seed48",
        "setenv", "setkey", "setstate", "srand48", "srandom", "unlockpt",
        "unsetenv", "arc4random", "arc4random_addrandom", "arc4random_buf",
        "arc4random_stir", "arc4random_uniform", "cgetcap", "cgetclose",
        "cgetent", "cgetfirst", "cgetmatch", "cgetnext", "cgetnum",
        "cgetset", "cgetstr", "cgetustr", "daemon", "devname", "devname_r",
        "getbsize", "getloadavg", "getprogname", "setprogname", "heapsort",
        "mergesort", "psort", "psort_r", "qsort_r", "radixsort", "rpmatch",
        "sradixsort", "sranddev", "srandomdev", "reallocf", "strtoq",
        "strtouq", "suboptarg", "tzname", "getdate_err", "timezone",
        "daylight", "asctime", "clock", "ctime", "difftime", "getdate",
        "gmtime", "localtime", "mktime", "strftime", "strptime", "time",
        "tzset", "asctime_r", "ctime_r", "gmtime_r", "localtime_r",
        "posix2time", "tzsetwall", "time2posix", "timelocal", "timegm",
        "nanosleep", "clock_getres", "clock_gettime",
        "clock_gettime_nsec_np", "clock_settime", "timespec_get",
        "sched_yield", "sched_get_priority_min", "sched_get_priority_max",
        "qos_class_self", "qos_class_main", "pthread_attr_set_qos_class_np",
        "pthread_attr_get_qos_class_np", "pthread_set_qos_class_self_np",
        "pthread_get_qos_class_np", "pthread_override_qos_class_start_np",
        "pthread_override_qos_class_end_np", "pthread_atfork",
        "pthread_attr_destroy", "pthread_attr_getdetachstate",
        "pthread_attr_getguardsize", "pthread_attr_getinheritsched",
        "pthread_attr_getschedparam", "pthread_attr_getschedpolicy",
        "pthread_attr_getscope", "pthread_attr_getstack",
        "pthread_attr_getstackaddr", "pthread_attr_getstacksize",
        "pthread_attr_init", "pthread_attr_setdetachstate",
        "pthread_attr_setguardsize", "pthread_attr_setinheritsched",
        "pthread_attr_setschedparam", "pthread_attr_setschedpolicy",
        "pthread_attr_setscope", "pthread_attr_setstack",
        "pthread_attr_setstackaddr", "pthread_attr_setstacksize",
        "pthread_cancel", "pthread_cond_broadcast", "pthread_cond_destroy",
        "pthread_cond_init", "pthread_cond_signal", "pthread_cond_timedwait",
        "pthread_cond_wait", "pthread_condattr_destroy",
        "pthread_condattr_init", "pthread_condattr_getpshared",
        "pthread_condattr_setpshared", "pthread_create", "pthread_detach",
        "pthread_equal", "pthread_exit", "pthread_getconcurrency",
        "pthread_getschedparam", "pthread_getspecific", "pthread_join",
        "pthread_key_create", "pthread_key_delete", "pthread_mutex_destroy",
        "pthread_mutex_getprioceiling", "pthread_mutex_init",
        "pthread_mutex_lock", "pthread_mutex_setprioceiling",
        "pthread_mutex_trylock", "pthread_mutex_unlock",
        "pthread_mutexattr_destroy", "pthread_mutexattr_getprioceiling",
        "pthread_mutexattr_getprotocol", "pthread_mutexattr_getpshared",
        "pthread_mutexattr_gettype", "pthread_mutexattr_getpolicy_np",
        "pthread_mutexattr_init", "pthread_mutexattr_setprioceiling",
        "pthread_mutexattr_setprotocol", "pthread_mutexattr_setpshared",
        "pthread_mutexattr_settype", "pthread_mutexattr_setpolicy_np",
        "pthread_once", "pthread_rwlock_destroy", "pthread_rwlock_init",
        "pthread_rwlock_rdlock", "pthread_rwlock_tryrdlock",
        "pthread_rwlock_trywrlock", "pthread_rwlock_wrlock",
        "pthread_rwlock_unlock", "pthread_rwlockattr_destroy",
        "pthread_rwlockattr_getpshared", "pthread_rwlockattr_init",
        "pthread_rwlockattr_setpshared", "pthread_self",
        "pthread_setcancelstate", "pthread_setcanceltype",
        "pthread_setconcurrency", "pthread_setschedparam",
        "pthread_setspecific", "pthread_testcancel",
        "pthread_is_threaded_np", "pthread_threadid_np",
        "pthread_getname_np", "pthread_setname_np", "pthread_main_np",
        "pthread_mach_thread_np", "pthread_get_stacksize_np",
        "pthread_get_stackaddr_np", "pthread_cond_signal_thread_np",
        "pthread_cond_timedwait_relative_np", "pthread_create_suspended_np",
        "pthread_kill", "pthread_from_mach_thread_np", "pthread_sigmask",
        "pthread_yield_np", "__darwin_check_fd_set_overflow", "adjtime",
        "futimes", "lutimes", "settimeofday", "getitimer", "gettimeofday",
        "select", "setitimer", "utimes", "__assert_rtn",
        "_DefaultRuneLocale", "_CurrentRuneLocale", "___runetype",
        "___tolower", "___toupper", "__maskrune", "__toupper", "__tolower",
        "memchr", "memcmp", "memcpy", "memmove", "memset", "strcat",
        "strchr", "strcmp", "strcoll", "strcpy", "strcspn", "strerror",
        "strlen", "strncat", "strncmp", "strncpy", "strpbrk", "strrchr",
        "strspn", "strstr", "strtok", "strxfrm", "strtok_r", "strerror_r",
        "strdup", "memccpy", "stpcpy", "stpncpy", "strndup", "strnlen",
        "strsignal", "memset_s", "memmem", "memset_pattern4",
        "memset_pattern8", "memset_pattern16", "strcasestr", "strnstr",
        "strlcat", "strlcpy", "strmode", "strsep", "swab", "timingsafe_bcmp",
        "bcmp", "bcopy", "bzero", "index", "rindex", "ffs", "strcasecmp",
        "strncasecmp", "ffsl", "ffsll", "fls", "flsl", "flsll", "mlockall",
        "munlockall", "mlock", "mmap", "mprotect", "msync", "munlock",
        "munmap", "shm_open", "shm_unlink", "posix_madvise", "madvise",
        "mincore", "minherit", "getattrlistbulk", "getattrlistat",
        "setattrlistat", "faccessat", "fchownat", "linkat", "readlinkat",
        "symlinkat", "unlinkat", "_exit", "access", "alarm", "chdir",
        "chown", "close", "dup", "dup2", "execl", "execle", "execlp",
        "execv", "execve", "execvp", "fork", "fpathconf", "getcwd",
        "getegid", "geteuid", "getgid", "getgroups", "getlogin", "getpgrp",
        "getpid", "getppid", "getuid", "isatty", "link", "lseek", "pathconf",
        "pause", "pipe", "read", "rmdir", "setgid", "setpgid", "setsid",
        "setuid", "sleep", "sysconf", "tcgetpgrp", "tcsetpgrp", "ttyname",
        "ttyname_r", "unlink", "write", "confstr", "getopt", "optarg",
        "optind", "opterr", "optopt", "brk", "chroot", "crypt", "encrypt",
        "fchdir", "gethostid", "getpgid", "getsid", "getdtablesize",
        "getpagesize", "getpass", "getwd", "lchown", "lockf", "nice",
        "pread", "pwrite", "sbrk", "setpgrp", "setregid", "setreuid", "sync",
        "truncate", "ualarm", "usleep", "vfork", "fsync", "ftruncate",
        "getlogin_r", "fchown", "gethostname", "readlink", "setegid",
        "seteuid", "symlink", "pselect", "accessx_np", "acct", "add_profil",
        "endusershell", "execvP", "fflagstostr", "getdomainname",
        "getgrouplist", "gethostuuid", "getmode", "getpeereid",
        "getsgroups_np", "getusershell", "getwgroups_np", "initgroups",
        "issetugid", "mkdtemp", "mknod", "mkpath_np", "mkpathat_np",
        "mkstemps", "mkostemp", "mkostemps", "mkstemp_dprotected_np",
        "mkdtempat_np", "mkstempsat_np", "mkostempsat_np", "nfssvc",
        "profil", "pthread_setugid_np", "pthread_getugid_np", "reboot",
        "revoke", "rcmd", "rcmd_af", "rresvport", "rresvport_af", "iruserok",
        "iruserok_sa", "ruserok", "setdomainname", "setgroups", "sethostid",
        "sethostname", "setlogin", "setmode", "setrgid", "setruid",
        "setsgroups_np", "setusershell", "setwgroups_np", "strtofflags",
        "swapon", "ttyslot", "undelete", "unwhiteout", "syscall",
        "fgetattrlist", "fsetattrlist", "getattrlist", "setattrlist",
        "exchangedata", "getdirentriesattr", "searchfs", "fsctl", "ffsctl",
        "fsync_volume_np", "sync_volume_np", "optreset", "jit_set_free",
        "jit_reg_allocator_get_hwreg_name", "jit_expand_patches_and_labels",
        "jit_flw_analysis", "jit_prepare_reg_counts", "jit_prepare_arguments"
      ],
      "New Types": [
        "code_refs_cache", "jit_disasm", "jit_disasm", "output_buf",
        "transfer_info", "jit_arg_layout", "jit_arg_layout_location",
        "X86_SSE_CmpCode", "__anonenum_X86_SSE_CmpCode_848838535",
        "X86_SSE_Opcode", "__anonenum_X86_SSE_Opcode_853888746",
        "x86_imm_buf", "__anonunion_x86_imm_buf_549773081", "X86_Prefix",
        "__anonenum_X86_Prefix_200431650", "__anonenum_321777801",
        "__anonenum_342172182", "X86_CC", "__anonenum_X86_CC_467256102",
        "X86_FP_Opcode", "__anonenum_X86_FP_Opcode_1068131184",
        "X86_Shift_Opcode", "__anonenum_X86_Shift_Opcode_820104407",
        "X86_ALU_Opcode", "__anonenum_X86_ALU_Opcode_144447433",
        "X86_XMM_Reg_No", "jit_x86_fp_regs", "X86_Reg_No", "jit_x86_gp_regs",
        "amd64_imm_buf", "__anonunion_amd64_imm_buf_340631928",
        "AMD64_REX_Bits", "__anonenum_AMD64_REX_Bits_69261688",
        "AMD64_XMM_Reg_No", "jit_amd64_fp_regs", "AMD64_Reg_No",
        "jit_amd64_gp_regs", "copy_target", "jit_debug_info", "jit",
        "jit_func_info", "jit_inp_arg", "__anonunion_location_1021650749",
        "jit_set", "jit_set", "jit_prepared_args", "jit_prepared_args",
        "jit_out_arg", "__anonunion_value_85002883", "jit_allocator_hint",
        "jit_rmap", "jit_rmap", "jit_reg_allocator", "jit_func_info",
        "jit_hw_reg", "__anonstruct_jit_hw_reg_312769258", "jit_tree",
        "jit_tree", "jit_tree_value", "jit_tree_key", "jit", "jit_warning",
        "jit_inp_type", "jit_proc_value_alias", "jit_reg", "jit_label",
        "jit_label", "jit_op", "jit_op", "jit_debug_info", "jit_rmap",
        "jit_set", "jit_tree", "jit_float", "jit_unsigned_value",
        "jit_value", "searchstate", "fssearchblock", "uuid_t",
        "accessx_descriptor", "fsfilcnt_t", "fsblkcnt_t", "fd_mask",
        "useconds_t", "swblk_t", "segsz_t", "nlink_t", "key_t", "ino64_t",
        "ino_t", "in_port_t", "in_addr_t", "gid_t", "blksize_t", "blkcnt_t",
        "fixpt_t", "daddr_t", "caddr_t", "qaddr_t", "quad_t", "u_quad_t",
        "uint", "ushort", "u_long", "u_int", "u_short", "u_char", "errno_t",
        "rsize_t", "__gnuc_va_list", "va_list___0", "_RuneLocale",
        "__anonstruct__RuneLocale_110080762", "_RuneCharClass",
        "__anonstruct__RuneCharClass_1021650748", "_RuneRange",
        "__anonstruct__RuneRange_1000210131", "_RuneEntry",
        "__anonstruct__RuneEntry_453100079", "wint_t", "jit_opcode",
        "JIT_OPCODE", "clockinfo", "timezone", "itimerval", "suseconds_t",
        "timeval64", "fd_set", "fd_set", "mach_port_t", "pthread_override_t",
        "pthread_override_s", "qos_class_t", "__anonenum_788482901",
        "pthread_t", "pthread_rwlockattr_t", "pthread_rwlock_t",
        "pthread_once_t", "pthread_mutexattr_t", "pthread_mutex_t",
        "pthread_key_t", "pthread_condattr_t", "pthread_cond_t",
        "sched_param", "clockid_t", "__anonenum_clockid_t_447627989", "tm",
        "timespec", "time_t", "clock_t", "mode_t", "dev_t", "lldiv_t",
        "__anonstruct_lldiv_t_86583852", "ldiv_t",
        "__anonstruct_ldiv_t_748949161", "div_t",
        "__anonstruct_div_t_773697287", "wchar_t", "rune_t", "ct_rune_t",
        "wait", "__anonstruct_w_S_422959016", "__anonstruct_w_T_422959015",
        "proc_rlimit_control_wakeupmon", "rlimit", "rusage_info_current",
        "rusage_info_v4", "rusage_info_v3", "rusage_info_v2",
        "rusage_info_v1", "rusage_info_v0", "rusage_info_t", "rusage",
        "rlim_t", "timeval", "uintmax_t", "intmax_t", "uint_fast64_t",
        "uint_fast32_t", "uint_fast16_t", "uint_fast8_t", "int_fast64_t",
        "int_fast32_t", "int_fast16_t", "int_fast8_t", "uint_least64_t",
        "uint_least32_t", "uint_least16_t", "uint_least8_t", "int_least64_t",
        "int_least32_t", "int_least16_t", "int_least8_t", "uint64_t",
        "uint32_t", "uint16_t", "uint8_t", "sigstack", "sigvec", "sig_t",
        "sigaction", "__sigaction", "__sigaction_u", "siginfo_t",
        "__siginfo", "sigevent", "sigval", "uid_t", "sigset_t", "ucontext_t",
        "__darwin_ucontext", "stack_t", "__darwin_sigaltstack",
        "pthread_attr_t", "mcontext_t", "__darwin_mcontext_avx512_64_full",
        "__darwin_mcontext_avx512_64", "__darwin_mcontext_avx64_full",
        "__darwin_mcontext_avx64", "__darwin_mcontext64_full",
        "__darwin_mcontext64", "__darwin_mcontext_avx512_32",
        "__darwin_mcontext_avx32", "__darwin_mcontext32",
        "__darwin_x86_cpmu_state64", "__darwin_x86_debug_state64",
        "__darwin_x86_exception_state64", "__darwin_x86_avx512_state64",
        "__darwin_x86_avx_state64", "__darwin_x86_float_state64",
        "__darwin_x86_thread_full_state64", "__darwin_x86_thread_state64",
        "__x86_pagein_state", "__darwin_x86_debug_state32",
        "__darwin_i386_exception_state", "__darwin_i386_avx512_state",
        "__darwin_i386_avx_state", "__darwin_i386_float_state",
        "__darwin_opmask_reg", "__darwin_zmm_reg", "__darwin_ymm_reg",
        "__darwin_xmm_reg", "__darwin_mmst_reg", "__darwin_fp_status_t",
        "__darwin_fp_status", "__darwin_fp_control_t", "__darwin_fp_control",
        "__darwin_i386_thread_state", "sig_atomic_t", "id_t", "pid_t",
        "idtype_t", "__anonenum_idtype_t_558242672", "ssize_t", "off_t",
        "FILE", "__sFILE", "__sFILEX", "__sbuf", "fpos_t", "size_t",
        "va_list", "syscall_arg_t", "user_off_t", "user_time_t",
        "user_ulong_t", "user_long_t", "user_ssize_t", "user_size_t",
        "user_addr_t", "uintptr_t", "intptr_t", "register_t", "u_int64_t",
        "u_int32_t", "u_int16_t", "u_int8_t", "int64_t", "int32_t",
        "int16_t", "int8_t", "__darwin_wctype_t", "__darwin_wctrans_t",
        "__darwin_nl_item", "__darwin_pthread_t",
        "__darwin_pthread_rwlockattr_t", "__darwin_pthread_rwlock_t",
        "__darwin_pthread_once_t", "__darwin_pthread_mutexattr_t",
        "__darwin_pthread_mutex_t", "__darwin_pthread_key_t",
        "__darwin_pthread_condattr_t", "__darwin_pthread_cond_t",
        "__darwin_pthread_attr_t", "_opaque_pthread_t",
        "_opaque_pthread_rwlockattr_t", "_opaque_pthread_rwlock_t",
        "_opaque_pthread_once_t", "_opaque_pthread_mutexattr_t",
        "_opaque_pthread_mutex_t", "_opaque_pthread_condattr_t",
        "_opaque_pthread_cond_t", "_opaque_pthread_attr_t",
        "__darwin_pthread_handler_rec", "__darwin_uuid_string_t",
        "__darwin_uuid_t", "__darwin_useconds_t", "__darwin_uid_t",
        "__darwin_suseconds_t", "__darwin_sigset_t", "__darwin_pid_t",
        "__darwin_off_t", "__darwin_mode_t", "__darwin_mach_port_t",
        "__darwin_mach_port_name_t", "__darwin_ino_t", "__darwin_ino64_t",
        "__darwin_id_t", "__darwin_gid_t", "__darwin_fsfilcnt_t",
        "__darwin_fsblkcnt_t", "__darwin_dev_t", "__darwin_blksize_t",
        "__darwin_blkcnt_t", "__darwin_time_t", "__darwin_ssize_t",
        "__darwin_socklen_t", "__darwin_clock_t", "__darwin_wint_t",
        "__darwin_rune_t", "__darwin_wchar_t", "__darwin_va_list",
        "__darwin_size_t", "__darwin_ptrdiff_t", "__darwin_mbstate_t",
        "__mbstate_t", "__anonunion___mbstate_t_250061491",
        "__darwin_ct_rune_t", "__darwin_natural_t", "__darwin_intptr_t",
        "__uint64_t", "__int64_t", "__uint32_t", "__int32_t", "__uint16_t",
        "__int16_t", "__uint8_t", "__int8_t"
      ],
      "New Texts/Asms/Pragmas": [
        "Pragma", "Pragma", "Pragma", "Pragma", "Pragma", "Pragma"
      ]
    } }
  ]
}
END-UNIVERSE
*/

#pragma clang assume_nonnull begin
#pragma clang assume_nonnull end
#pragma clang assume_nonnull begin
#pragma clang assume_nonnull end
#pragma clang assume_nonnull begin
#pragma clang assume_nonnull end

/* BEGIN STRUCT-DECL jit_rmap LOC=./jitter-amd64.c:176 */
struct jit_rmap ;
/* END STRUCT-DECL jit_rmap LOC=./jitter-amd64.c:176 */

/* BEGIN STRUCT-DECL fssearchblock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:769 */
struct fssearchblock ;
/* END STRUCT-DECL fssearchblock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:769 */

/* BEGIN STRUCT-DECL jit_debug_info LOC=./jitter-amd64.c:177 */
struct jit_debug_info ;
/* END STRUCT-DECL jit_debug_info LOC=./jitter-amd64.c:177 */

/* BEGIN STRUCT-DECL pthread_override_s LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:211 */
struct pthread_override_s ;
/* END STRUCT-DECL pthread_override_s LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:211 */

/* BEGIN STRUCT-DECL jit LOC=./jitter-amd64.c:243 */
struct jit ;
/* END STRUCT-DECL jit LOC=./jitter-amd64.c:243 */

/* BEGIN STRUCT-DECL jit_set LOC=./jitter-amd64.c:175 */
struct jit_set ;
/* END STRUCT-DECL jit_set LOC=./jitter-amd64.c:175 */

/* BEGIN STRUCT-DECL __sFILEX LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:98 */
struct __sFILEX ;
/* END STRUCT-DECL __sFILEX LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:98 */

/* BEGIN STRUCT-DECL jit_tree LOC=./jitter-amd64.c:174 */
struct jit_tree ;
/* END STRUCT-DECL jit_tree LOC=./jitter-amd64.c:174 */

/* BEGIN STRUCT-DECL searchstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:770 */
struct searchstate ;
/* END STRUCT-DECL searchstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:770 */

/* BEGIN STRUCT-DECL jit_func_info LOC=./jitter-amd64.c:529 */
struct jit_func_info ;
/* END STRUCT-DECL jit_func_info LOC=./jitter-amd64.c:529 */

/* BEGIN STRUCT-DECL output_buf LOC=./jitter-amd64.c:3478 */
struct output_buf ;
/* END STRUCT-DECL output_buf LOC=./jitter-amd64.c:3478 */

/* BEGIN STRUCT-DECL __darwin_mcontext_avx512_32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:56 */
struct __darwin_mcontext_avx512_32 ;
/* END STRUCT-DECL __darwin_mcontext_avx512_32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:56 */

/* BEGIN STRUCT-DECL sigstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:367 */
struct sigstack ;
/* END STRUCT-DECL sigstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:367 */

/* BEGIN STRUCT-DECL jit_arg_layout_location LOC=./jitter-amd64.c:1616 */
struct jit_arg_layout_location ;
/* END STRUCT-DECL jit_arg_layout_location LOC=./jitter-amd64.c:1616 */

/* BEGIN STRUCT-DECL __darwin_i386_avx_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:318 */
struct __darwin_i386_avx_state ;
/* END STRUCT-DECL __darwin_i386_avx_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:318 */

/* BEGIN ENUM-DECL __anonenum_X86_Shift_Opcode_820104407 LOC=./jitter-amd64.c:1014 */
enum __anonenum_X86_Shift_Opcode_820104407 ;
/* END ENUM-DECL __anonenum_X86_Shift_Opcode_820104407 LOC=./jitter-amd64.c:1014 */

/* BEGIN STRUCT-DECL __darwin_pthread_handler_rec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:57 */
struct __darwin_pthread_handler_rec ;
/* END STRUCT-DECL __darwin_pthread_handler_rec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:57 */

/* BEGIN STRUCT-DECL __anonstruct__RuneEntry_453100079 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:60 */
struct __anonstruct__RuneEntry_453100079 ;
/* END STRUCT-DECL __anonstruct__RuneEntry_453100079 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:60 */

/* BEGIN ENUM-DECL JIT_OPCODE LOC=./jitter-amd64.c:1 */
enum JIT_OPCODE ;
/* END ENUM-DECL JIT_OPCODE LOC=./jitter-amd64.c:1 */

/* BEGIN ENUM-DECL __anonenum_AMD64_REX_Bits_69261688 LOC=./jitter-amd64.c:960 */
enum __anonenum_AMD64_REX_Bits_69261688 ;
/* END ENUM-DECL __anonenum_AMD64_REX_Bits_69261688 LOC=./jitter-amd64.c:960 */

/* BEGIN STRUCT-DECL itimerval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:91 */
struct itimerval ;
/* END STRUCT-DECL itimerval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:91 */

/* BEGIN STRUCT-DECL copy_target LOC=./jitter-amd64.c:897 */
struct copy_target ;
/* END STRUCT-DECL copy_target LOC=./jitter-amd64.c:897 */

/* BEGIN STRUCT-DECL __darwin_ucontext LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ucontext.h:42 */
struct __darwin_ucontext ;
/* END STRUCT-DECL __darwin_ucontext LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ucontext.h:42 */

/* BEGIN UNION-DECL jit_proc_value_alias LOC=./jitter-amd64.c:212 */
union jit_proc_value_alias ;
/* END UNION-DECL jit_proc_value_alias LOC=./jitter-amd64.c:212 */

/* BEGIN ENUM-DECL jit_amd64_fp_regs LOC=./jitter-amd64.c:940 */
enum jit_amd64_fp_regs ;
/* END ENUM-DECL jit_amd64_fp_regs LOC=./jitter-amd64.c:940 */

/* BEGIN UNION-DECL __anonunion_x86_imm_buf_549773081 LOC=./jitter-amd64.c:1143 */
union __anonunion_x86_imm_buf_549773081 ;
/* END UNION-DECL __anonunion_x86_imm_buf_549773081 LOC=./jitter-amd64.c:1143 */

/* BEGIN STRUCT-DECL rusage_info_v4 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:282 */
struct rusage_info_v4 ;
/* END STRUCT-DECL rusage_info_v4 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:282 */

/* BEGIN STRUCT-DECL __darwin_mcontext32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:39 */
struct __darwin_mcontext32 ;
/* END STRUCT-DECL __darwin_mcontext32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:39 */

/* BEGIN STRUCT-DECL __darwin_fp_control LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:92 */
struct __darwin_fp_control ;
/* END STRUCT-DECL __darwin_fp_control LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:92 */

/* BEGIN STRUCT-DECL __darwin_x86_float_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:714 */
struct __darwin_x86_float_state64 ;
/* END STRUCT-DECL __darwin_x86_float_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:714 */

/* BEGIN STRUCT-DECL timeval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timeval.h:34 */
struct timeval ;
/* END STRUCT-DECL timeval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timeval.h:34 */

/* BEGIN STRUCT-DECL __darwin_x86_debug_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1192 */
struct __darwin_x86_debug_state64 ;
/* END STRUCT-DECL __darwin_x86_debug_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1192 */

/* BEGIN STRUCT-DECL timeval64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timeval64.h:34 */
struct timeval64 ;
/* END STRUCT-DECL timeval64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timeval64.h:34 */

/* BEGIN UNION-DECL __sigaction_u LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:269 */
union __sigaction_u ;
/* END UNION-DECL __sigaction_u LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:269 */

/* BEGIN STRUCT-DECL fd_set LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h:50 */
struct fd_set ;
/* END STRUCT-DECL fd_set LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h:50 */

/* BEGIN STRUCT-DECL __darwin_zmm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:245 */
struct __darwin_zmm_reg ;
/* END STRUCT-DECL __darwin_zmm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:245 */

/* BEGIN ENUM-DECL __anonenum_X86_ALU_Opcode_144447433 LOC=./jitter-amd64.c:1000 */
enum __anonenum_X86_ALU_Opcode_144447433 ;
/* END ENUM-DECL __anonenum_X86_ALU_Opcode_144447433 LOC=./jitter-amd64.c:1000 */

/* BEGIN ENUM-DECL __anonenum_X86_Prefix_200431650 LOC=./jitter-amd64.c:1094 */
enum __anonenum_X86_Prefix_200431650 ;
/* END ENUM-DECL __anonenum_X86_Prefix_200431650 LOC=./jitter-amd64.c:1094 */

/* BEGIN STRUCT-DECL __anonstruct_ldiv_t_748949161 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:88 */
struct __anonstruct_ldiv_t_748949161 ;
/* END STRUCT-DECL __anonstruct_ldiv_t_748949161 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:88 */

/* BEGIN ENUM-DECL jit_x86_fp_regs LOC=./jitter-amd64.c:985 */
enum jit_x86_fp_regs ;
/* END ENUM-DECL jit_x86_fp_regs LOC=./jitter-amd64.c:985 */

/* BEGIN UNION-DECL wait LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */
union wait ;
/* END UNION-DECL wait LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */

/* BEGIN STRUCT-DECL __2_init_tigress_1_opaque_NodeStruct LOC=UNKNOWN */
struct __2_init_tigress_1_opaque_NodeStruct ;
/* END STRUCT-DECL __2_init_tigress_1_opaque_NodeStruct LOC=UNKNOWN */

/* BEGIN STRUCT-DECL sigvec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:348 */
struct sigvec ;
/* END STRUCT-DECL sigvec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:348 */

/* BEGIN ENUM-DECL __anonenum_788482901 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/qos.h:130 */
enum __anonenum_788482901 ;
/* END ENUM-DECL __anonenum_788482901 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/qos.h:130 */

/* BEGIN STRUCT-DECL __darwin_fp_status LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:150 */
struct __darwin_fp_status ;
/* END STRUCT-DECL __darwin_fp_status LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:150 */

/* BEGIN STRUCT-DECL accessx_descriptor LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:132 */
struct accessx_descriptor ;
/* END STRUCT-DECL accessx_descriptor LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:132 */

/* BEGIN STRUCT-DECL __darwin_opmask_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:259 */
struct __darwin_opmask_reg ;
/* END STRUCT-DECL __darwin_opmask_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:259 */

/* BEGIN STRUCT-DECL sched_param LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/sched.h:35 */
struct sched_param ;
/* END STRUCT-DECL sched_param LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/sched.h:35 */

/* BEGIN STRUCT-DECL _opaque_pthread_cond_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:68 */
struct _opaque_pthread_cond_t ;
/* END STRUCT-DECL _opaque_pthread_cond_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:68 */

/* BEGIN STRUCT-DECL rlimit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:365 */
struct rlimit ;
/* END STRUCT-DECL rlimit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:365 */

/* BEGIN STRUCT-DECL __anonstruct_lldiv_t_86583852 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:94 */
struct __anonstruct_lldiv_t_86583852 ;
/* END STRUCT-DECL __anonstruct_lldiv_t_86583852 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:94 */

/* BEGIN STRUCT-DECL __anonstruct_w_T_422959015 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */
struct __anonstruct_w_T_422959015 ;
/* END STRUCT-DECL __anonstruct_w_T_422959015 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */

/* BEGIN STRUCT-DECL transfer_info LOC=./jitter-amd64.c:3063 */
struct transfer_info ;
/* END STRUCT-DECL transfer_info LOC=./jitter-amd64.c:3063 */

/* BEGIN STRUCT-DECL _opaque_pthread_attr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:63 */
struct _opaque_pthread_attr_t ;
/* END STRUCT-DECL _opaque_pthread_attr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:63 */

/* BEGIN UNION-DECL __anonunion___mbstate_t_250061491 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:76 */
union __anonunion___mbstate_t_250061491 ;
/* END UNION-DECL __anonunion___mbstate_t_250061491 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:76 */

/* BEGIN UNION-DECL __3_fib_$node LOC=UNKNOWN */
union __3_fib_$node ;
/* END UNION-DECL __3_fib_$node LOC=UNKNOWN */

/* BEGIN STRUCT-DECL sigevent LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:168 */
struct sigevent ;
/* END STRUCT-DECL sigevent LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:168 */

/* BEGIN ENUM-DECL __anonenum_321777801 LOC=./jitter-amd64.c:1069 */
enum __anonenum_321777801 ;
/* END ENUM-DECL __anonenum_321777801 LOC=./jitter-amd64.c:1069 */

/* BEGIN STRUCT-DECL jit_arg_layout LOC=./jitter-amd64.c:1624 */
struct jit_arg_layout ;
/* END STRUCT-DECL jit_arg_layout LOC=./jitter-amd64.c:1624 */

/* BEGIN STRUCT-DECL __darwin_mcontext_avx64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:113 */
struct __darwin_mcontext_avx64 ;
/* END STRUCT-DECL __darwin_mcontext_avx64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:113 */

/* BEGIN STRUCT-DECL __darwin_mcontext_avx64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:121 */
struct __darwin_mcontext_avx64_full ;
/* END STRUCT-DECL __darwin_mcontext_avx64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:121 */

/* BEGIN STRUCT-DECL __sigaction LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:276 */
struct __sigaction ;
/* END STRUCT-DECL __sigaction LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:276 */

/* BEGIN STRUCT-DECL rusage LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:152 */
struct rusage ;
/* END STRUCT-DECL rusage LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:152 */

/* BEGIN STRUCT-DECL __darwin_i386_float_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:281 */
struct __darwin_i386_float_state ;
/* END STRUCT-DECL __darwin_i386_float_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:281 */

/* BEGIN STRUCT-DECL _opaque_pthread_once_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:88 */
struct _opaque_pthread_once_t ;
/* END STRUCT-DECL _opaque_pthread_once_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:88 */

/* BEGIN STRUCT-DECL __darwin_x86_debug_state32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:595 */
struct __darwin_x86_debug_state32 ;
/* END STRUCT-DECL __darwin_x86_debug_state32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:595 */

/* BEGIN STRUCT-DECL _opaque_pthread_mutex_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:78 */
struct _opaque_pthread_mutex_t ;
/* END STRUCT-DECL _opaque_pthread_mutex_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:78 */

/* BEGIN STRUCT-DECL __anonstruct__RuneLocale_110080762 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:77 */
struct __anonstruct__RuneLocale_110080762 ;
/* END STRUCT-DECL __anonstruct__RuneLocale_110080762 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:77 */

/* BEGIN STRUCT-DECL __anonstruct__RuneCharClass_1021650748 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:72 */
struct __anonstruct__RuneCharClass_1021650748 ;
/* END STRUCT-DECL __anonstruct__RuneCharClass_1021650748 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:72 */

/* BEGIN STRUCT-DECL __anonstruct_jit_hw_reg_312769258 LOC=./jitter-amd64.c:521 */
struct __anonstruct_jit_hw_reg_312769258 ;
/* END STRUCT-DECL __anonstruct_jit_hw_reg_312769258 LOC=./jitter-amd64.c:521 */

/* BEGIN STRUCT-DECL __darwin_mcontext64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:97 */
struct __darwin_mcontext64 ;
/* END STRUCT-DECL __darwin_mcontext64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:97 */

/* BEGIN STRUCT-DECL __darwin_mcontext_avx512_64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:138 */
struct __darwin_mcontext_avx512_64_full ;
/* END STRUCT-DECL __darwin_mcontext_avx512_64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:138 */

/* BEGIN STRUCT-DECL __darwin_x86_avx512_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:833 */
struct __darwin_x86_avx512_state64 ;
/* END STRUCT-DECL __darwin_x86_avx512_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:833 */

/* BEGIN STRUCT-DECL __darwin_mcontext_avx512_64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:130 */
struct __darwin_mcontext_avx512_64 ;
/* END STRUCT-DECL __darwin_mcontext_avx512_64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:130 */

/* BEGIN STRUCT-DECL _opaque_pthread_condattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:73 */
struct _opaque_pthread_condattr_t ;
/* END STRUCT-DECL _opaque_pthread_condattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:73 */

/* BEGIN ENUM-DECL __anonenum_idtype_t_558242672 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:79 */
enum __anonenum_idtype_t_558242672 ;
/* END ENUM-DECL __anonenum_idtype_t_558242672 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:79 */

/* BEGIN UNION-DECL __anonunion_amd64_imm_buf_340631928 LOC=./jitter-amd64.c:967 */
union __anonunion_amd64_imm_buf_340631928 ;
/* END UNION-DECL __anonunion_amd64_imm_buf_340631928 LOC=./jitter-amd64.c:967 */

/* BEGIN STRUCT-DECL jit_allocator_hint LOC=./jitter-amd64.c:549 */
struct jit_allocator_hint ;
/* END STRUCT-DECL jit_allocator_hint LOC=./jitter-amd64.c:549 */

/* BEGIN STRUCT-DECL rusage_info_v1 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:209 */
struct rusage_info_v1 ;
/* END STRUCT-DECL rusage_info_v1 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:209 */

/* BEGIN STRUCT-DECL __darwin_x86_exception_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1172 */
struct __darwin_x86_exception_state64 ;
/* END STRUCT-DECL __darwin_x86_exception_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1172 */

/* BEGIN STRUCT-DECL __darwin_sigaltstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigaltstack.h:42 */
struct __darwin_sigaltstack ;
/* END STRUCT-DECL __darwin_sigaltstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigaltstack.h:42 */

/* BEGIN STRUCT-DECL rusage_info_v2 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:229 */
struct rusage_info_v2 ;
/* END STRUCT-DECL rusage_info_v2 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:229 */

/* BEGIN STRUCT-DECL _opaque_pthread_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:103 */
struct _opaque_pthread_t ;
/* END STRUCT-DECL _opaque_pthread_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:103 */

/* BEGIN STRUCT-DECL __anonstruct_w_S_422959016 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */
struct __anonstruct_w_S_422959016 ;
/* END STRUCT-DECL __anonstruct_w_S_422959016 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */

/* BEGIN ENUM-DECL __anonenum_X86_SSE_Opcode_853888746 LOC=./jitter-amd64.c:1147 */
enum __anonenum_X86_SSE_Opcode_853888746 ;
/* END ENUM-DECL __anonenum_X86_SSE_Opcode_853888746 LOC=./jitter-amd64.c:1147 */

/* BEGIN STRUCT-DECL jit_reg_allocator LOC=./jitter-amd64.c:529 */
struct jit_reg_allocator ;
/* END STRUCT-DECL jit_reg_allocator LOC=./jitter-amd64.c:529 */

/* BEGIN ENUM-DECL jit_x86_gp_regs LOC=./jitter-amd64.c:973 */
enum jit_x86_gp_regs ;
/* END ENUM-DECL jit_x86_gp_regs LOC=./jitter-amd64.c:973 */

/* BEGIN STRUCT-DECL __darwin_x86_avx_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:765 */
struct __darwin_x86_avx_state64 ;
/* END STRUCT-DECL __darwin_x86_avx_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:765 */

/* BEGIN ENUM-DECL jit_inp_type LOC=./jitter-amd64.c:224 */
enum jit_inp_type ;
/* END ENUM-DECL jit_inp_type LOC=./jitter-amd64.c:224 */

/* BEGIN STRUCT-DECL __darwin_x86_thread_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:633 */
struct __darwin_x86_thread_state64 ;
/* END STRUCT-DECL __darwin_x86_thread_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:633 */

/* BEGIN STRUCT-DECL jit_label LOC=./jitter-amd64.c:204 */
struct jit_label ;
/* END STRUCT-DECL jit_label LOC=./jitter-amd64.c:204 */

/* BEGIN STRUCT-DECL _opaque_pthread_rwlockattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:98 */
struct _opaque_pthread_rwlockattr_t ;
/* END STRUCT-DECL _opaque_pthread_rwlockattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:98 */

/* BEGIN STRUCT-DECL __sFILE LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:126 */
struct __sFILE ;
/* END STRUCT-DECL __sFILE LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:126 */

/* BEGIN STRUCT-DECL __sbuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:92 */
struct __sbuf ;
/* END STRUCT-DECL __sbuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:92 */

/* BEGIN STRUCT-DECL rusage_info_v3 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:251 */
struct rusage_info_v3 ;
/* END STRUCT-DECL rusage_info_v3 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:251 */

/* BEGIN ENUM-DECL __anonenum_clockid_t_447627989 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:153 */
enum __anonenum_clockid_t_447627989 ;
/* END ENUM-DECL __anonenum_clockid_t_447627989 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:153 */

/* BEGIN ENUM-DECL __anonenum_342172182 LOC=./jitter-amd64.c:1060 */
enum __anonenum_342172182 ;
/* END ENUM-DECL __anonenum_342172182 LOC=./jitter-amd64.c:1060 */

/* BEGIN STRUCT-DECL jit_out_arg LOC=./jitter-amd64.c:556 */
struct jit_out_arg ;
/* END STRUCT-DECL jit_out_arg LOC=./jitter-amd64.c:556 */

/* BEGIN STRUCT-DECL sigaction LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:286 */
struct sigaction ;
/* END STRUCT-DECL sigaction LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:286 */

/* BEGIN STRUCT-DECL timespec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timespec.h:33 */
struct timespec ;
/* END STRUCT-DECL timespec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timespec.h:33 */

/* BEGIN STRUCT-DECL tm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:75 */
struct tm ;
/* END STRUCT-DECL tm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:75 */

/* BEGIN ENUM-DECL __anonenum_X86_FP_Opcode_1068131184 LOC=./jitter-amd64.c:1029 */
enum __anonenum_X86_FP_Opcode_1068131184 ;
/* END ENUM-DECL __anonenum_X86_FP_Opcode_1068131184 LOC=./jitter-amd64.c:1029 */

/* BEGIN ENUM-DECL __anonenum_X86_SSE_CmpCode_848838535 LOC=./jitter-amd64.c:1291 */
enum __anonenum_X86_SSE_CmpCode_848838535 ;
/* END ENUM-DECL __anonenum_X86_SSE_CmpCode_848838535 LOC=./jitter-amd64.c:1291 */

/* BEGIN STRUCT-DECL __darwin_mcontext_avx32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:47 */
struct __darwin_mcontext_avx32 ;
/* END STRUCT-DECL __darwin_mcontext_avx32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:47 */

/* BEGIN STRUCT-DECL __darwin_ymm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:229 */
struct __darwin_ymm_reg ;
/* END STRUCT-DECL __darwin_ymm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:229 */

/* BEGIN UNION-DECL sigval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:158 */
union sigval ;
/* END UNION-DECL sigval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:158 */

/* BEGIN STRUCT-DECL __x86_pagein_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:622 */
struct __x86_pagein_state ;
/* END STRUCT-DECL __x86_pagein_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:622 */

/* BEGIN STRUCT-DECL _opaque_pthread_rwlock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:93 */
struct _opaque_pthread_rwlock_t ;
/* END STRUCT-DECL _opaque_pthread_rwlock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:93 */

/* BEGIN STRUCT-DECL proc_rlimit_control_wakeupmon LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:400 */
struct proc_rlimit_control_wakeupmon ;
/* END STRUCT-DECL proc_rlimit_control_wakeupmon LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:400 */

/* BEGIN STRUCT-DECL __darwin_i386_thread_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:46 */
struct __darwin_i386_thread_state ;
/* END STRUCT-DECL __darwin_i386_thread_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:46 */

/* BEGIN STRUCT-DECL clockinfo LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:172 */
struct clockinfo ;
/* END STRUCT-DECL clockinfo LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:172 */

/* BEGIN STRUCT-DECL jit_disasm LOC=./jitter-amd64.c:3570 */
struct jit_disasm ;
/* END STRUCT-DECL jit_disasm LOC=./jitter-amd64.c:3570 */

/* BEGIN STRUCT-DECL __anonstruct_div_t_773697287 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:83 */
struct __anonstruct_div_t_773697287 ;
/* END STRUCT-DECL __anonstruct_div_t_773697287 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:83 */

/* BEGIN STRUCT-DECL __darwin_i386_exception_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:575 */
struct __darwin_i386_exception_state ;
/* END STRUCT-DECL __darwin_i386_exception_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:575 */

/* BEGIN ENUM-DECL jit_warning LOC=./jitter-amd64.c:231 */
enum jit_warning ;
/* END ENUM-DECL jit_warning LOC=./jitter-amd64.c:231 */

/* BEGIN STRUCT-DECL __darwin_xmm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:213 */
struct __darwin_xmm_reg ;
/* END STRUCT-DECL __darwin_xmm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:213 */

/* BEGIN STRUCT-DECL rusage_info_v0 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:195 */
struct rusage_info_v0 ;
/* END STRUCT-DECL rusage_info_v0 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:195 */

/* BEGIN STRUCT-DECL __siginfo LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:177 */
struct __siginfo ;
/* END STRUCT-DECL __siginfo LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:177 */

/* BEGIN STRUCT-DECL _opaque_pthread_mutexattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:83 */
struct _opaque_pthread_mutexattr_t ;
/* END STRUCT-DECL _opaque_pthread_mutexattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:83 */

/* BEGIN STRUCT-DECL __darwin_mcontext64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:105 */
struct __darwin_mcontext64_full ;
/* END STRUCT-DECL __darwin_mcontext64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:105 */

/* BEGIN STRUCT-DECL __darwin_i386_avx512_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:364 */
struct __darwin_i386_avx512_state ;
/* END STRUCT-DECL __darwin_i386_avx512_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:364 */

/* BEGIN ENUM-DECL jit_amd64_gp_regs LOC=./jitter-amd64.c:919 */
enum jit_amd64_gp_regs ;
/* END ENUM-DECL jit_amd64_gp_regs LOC=./jitter-amd64.c:919 */

/* BEGIN STRUCT-DECL __anonstruct__RuneRange_1000210131 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:67 */
struct __anonstruct__RuneRange_1000210131 ;
/* END STRUCT-DECL __anonstruct__RuneRange_1000210131 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:67 */

/* BEGIN STRUCT-DECL jit_inp_arg LOC=./jitter-amd64.c:584 */
struct jit_inp_arg ;
/* END STRUCT-DECL jit_inp_arg LOC=./jitter-amd64.c:584 */

/* BEGIN STRUCT-DECL jit_op LOC=./jitter-amd64.c:179 */
struct jit_op ;
/* END STRUCT-DECL jit_op LOC=./jitter-amd64.c:179 */

/* BEGIN ENUM-DECL __anonenum_X86_CC_467256102 LOC=./jitter-amd64.c:1043 */
enum __anonenum_X86_CC_467256102 ;
/* END ENUM-DECL __anonenum_X86_CC_467256102 LOC=./jitter-amd64.c:1043 */

/* BEGIN STRUCT-DECL timezone LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:129 */
struct timezone ;
/* END STRUCT-DECL timezone LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:129 */

/* BEGIN STRUCT-DECL jit_prepared_args LOC=./jitter-amd64.c:556 */
struct jit_prepared_args ;
/* END STRUCT-DECL jit_prepared_args LOC=./jitter-amd64.c:556 */

/* BEGIN STRUCT-DECL __darwin_x86_cpmu_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1220 */
struct __darwin_x86_cpmu_state64 ;
/* END STRUCT-DECL __darwin_x86_cpmu_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1220 */

/* BEGIN UNION-DECL __anonunion_location_1021650749 LOC=./jitter-amd64.c:584 */
union __anonunion_location_1021650749 ;
/* END UNION-DECL __anonunion_location_1021650749 LOC=./jitter-amd64.c:584 */

/* BEGIN STRUCT-DECL code_refs_cache LOC=./jitter-amd64.c:4679 */
struct code_refs_cache ;
/* END STRUCT-DECL code_refs_cache LOC=./jitter-amd64.c:4679 */

/* BEGIN STRUCT-DECL __darwin_mmst_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:194 */
struct __darwin_mmst_reg ;
/* END STRUCT-DECL __darwin_mmst_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:194 */

/* BEGIN UNION-DECL __anonunion_value_85002883 LOC=./jitter-amd64.c:556 */
union __anonunion_value_85002883 ;
/* END UNION-DECL __anonunion_value_85002883 LOC=./jitter-amd64.c:556 */

/* BEGIN STRUCT-DECL __darwin_x86_thread_full_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:691 */
struct __darwin_x86_thread_full_state64 ;
/* END STRUCT-DECL __darwin_x86_thread_full_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:691 */

/* BEGIN TYPEDEF _RuneLocale LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:77 */
typedef struct __anonstruct__RuneLocale_110080762 _RuneLocale;
/* END TYPEDEF _RuneLocale LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:77 */

/* BEGIN FUNCTION-DECL __builtin_strchr LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin_strchr(char * , int  ) ;  */
/* END FUNCTION-DECL __builtin_strchr LOC=BUILTIN */

/* BEGIN TYPEDEF u_int LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int.h:30 */
typedef unsigned int u_int;
/* END TYPEDEF u_int LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int.h:30 */

/* BEGIN FUNCTION-DECL __builtin_ctz LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_ctz(unsigned int  ) ;  */
/* END FUNCTION-DECL __builtin_ctz LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN mrand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:218 */
extern long mrand48(void)  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
/* END FUNCTION-DECL-EXTERN mrand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:218 */

/* BEGIN FUNCTION-DECL-EXTERN isdigit LOC=UNKNOWN */
__inline extern int isdigit(int _c ) ;
/* END FUNCTION-DECL-EXTERN isdigit LOC=UNKNOWN */

/* BEGIN ENUM jit_x86_gp_regs LOC=./jitter-amd64.c:973 */
enum jit_x86_gp_regs {
    X86_EAX = 0,
    X86_ECX = 1,
    X86_EDX = 2,
    X86_EBX = 3,
    X86_ESP = 4,
    X86_EBP = 5,
    X86_ESI = 6,
    X86_EDI = 7,
    X86_NREG = 8
} ;
/* END ENUM jit_x86_gp_regs LOC=./jitter-amd64.c:973 */

/* BEGIN ENUM __anonenum_342172182 LOC=./jitter-amd64.c:1060 */
enum __anonenum_342172182 {
    X86_FP_C0 = 256,
    X86_FP_C1 = 512,
    X86_FP_C2 = 1024,
    X86_FP_C3 = 16384,
    X86_FP_CC_MASK = 17664
} ;
/* END ENUM __anonenum_342172182 LOC=./jitter-amd64.c:1060 */

/* BEGIN TYPEDEF __uint64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:47 */
typedef unsigned long long __uint64_t;
/* END TYPEDEF __uint64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:47 */

/* BEGIN TYPEDEF __darwin_ino64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:62 */
typedef __uint64_t __darwin_ino64_t;
/* END TYPEDEF __darwin_ino64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:62 */

/* BEGIN TYPEDEF __darwin_ino_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:64 */
typedef __darwin_ino64_t __darwin_ino_t;
/* END TYPEDEF __darwin_ino_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:64 */

/* BEGIN TYPEDEF ino_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ino_t.h:31 */
typedef __darwin_ino_t ino_t;
/* END TYPEDEF ino_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ino_t.h:31 */

/* BEGIN TYPEDEF __darwin_ssize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:119 */
typedef long __darwin_ssize_t;
/* END TYPEDEF __darwin_ssize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:119 */

/* BEGIN FUNCTION-DECL __builtin_acosf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_acosf(float  ) ;  */
/* END FUNCTION-DECL __builtin_acosf LOC=BUILTIN */

/* BEGIN STRUCT _opaque_pthread_cond_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:68 */
struct _opaque_pthread_cond_t {
   long __sig ;
   char __opaque[40] ;
};
/* END STRUCT _opaque_pthread_cond_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:68 */

/* BEGIN TYPEDEF __darwin_pthread_cond_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:110 */
typedef struct _opaque_pthread_cond_t __darwin_pthread_cond_t;
/* END TYPEDEF __darwin_pthread_cond_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:110 */

/* BEGIN TYPEDEF pthread_cond_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_cond_t.h:31 */
typedef __darwin_pthread_cond_t pthread_cond_t;
/* END TYPEDEF pthread_cond_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_cond_t.h:31 */

/* BEGIN STRUCT _opaque_pthread_mutex_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:78 */
struct _opaque_pthread_mutex_t {
   long __sig ;
   char __opaque[56] ;
};
/* END STRUCT _opaque_pthread_mutex_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:78 */

/* BEGIN TYPEDEF __darwin_pthread_mutex_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:113 */
typedef struct _opaque_pthread_mutex_t __darwin_pthread_mutex_t;
/* END TYPEDEF __darwin_pthread_mutex_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:113 */

/* BEGIN TYPEDEF pthread_mutex_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_mutex_t.h:31 */
typedef __darwin_pthread_mutex_t pthread_mutex_t;
/* END TYPEDEF pthread_mutex_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_mutex_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_cond_timedwait_relative_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:534 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_timedwait_relative_np(pthread_cond_t * ,
                                                                                                                                              pthread_mutex_t * ,
                                                                                                                                              struct timespec  const  * _Nullable   ) ;
/* END FUNCTION-DECL-EXTERN pthread_cond_timedwait_relative_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:534 */

/* BEGIN TYPEDEF FILE LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:126 */
typedef struct __sFILE FILE;
/* END TYPEDEF FILE LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:126 */

/* BEGIN FUNCTION-DECL-EXTERN putc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:171 */
extern int putc(int  , FILE * ) ;
/* END FUNCTION-DECL-EXTERN putc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:171 */

/* BEGIN TYPEDEF __int32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:44 */
typedef int __int32_t;
/* END TYPEDEF __int32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:44 */

/* BEGIN TYPEDEF __darwin_blksize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:56 */
typedef __int32_t __darwin_blksize_t;
/* END TYPEDEF __darwin_blksize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:56 */

/* BEGIN TYPEDEF blksize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_blksize_t.h:31 */
typedef __darwin_blksize_t blksize_t;
/* END TYPEDEF blksize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_blksize_t.h:31 */

/* BEGIN FUNCTION-DECL __builtin_strcmp LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_strcmp(char const   * , char const   * ) ;  */
/* END FUNCTION-DECL __builtin_strcmp LOC=BUILTIN */

/* BEGIN STRUCT _opaque_pthread_attr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:63 */
struct _opaque_pthread_attr_t {
   long __sig ;
   char __opaque[56] ;
};
/* END STRUCT _opaque_pthread_attr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:63 */

/* BEGIN TYPEDEF __darwin_pthread_attr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:109 */
typedef struct _opaque_pthread_attr_t __darwin_pthread_attr_t;
/* END TYPEDEF __darwin_pthread_attr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:109 */

/* BEGIN TYPEDEF pthread_attr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_attr_t.h:31 */
typedef __darwin_pthread_attr_t pthread_attr_t;
/* END TYPEDEF pthread_attr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_attr_t.h:31 */

/* BEGIN TYPEDEF qos_class_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/qos.h:130 */
typedef unsigned int qos_class_t;
/* END TYPEDEF qos_class_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/qos.h:130 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_get_qos_class_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:112 */
extern int __attribute__((__availability__(ios,introduced=8.0), __availability__(macos,introduced=10.10)))  pthread_attr_get_qos_class_np(pthread_attr_t * __restrict  __attr ,
                                                                                                                                          qos_class_t * _Nullable __restrict  __qos_class ,
                                                                                                                                          int * _Nullable __restrict  __relative_priority ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_get_qos_class_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:112 */

/* BEGIN TYPEDEF __uint32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:45 */
typedef unsigned int __uint32_t;
/* END TYPEDEF __uint32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:45 */

/* BEGIN TYPEDEF in_addr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_in_addr_t.h:31 */
typedef __uint32_t in_addr_t;
/* END TYPEDEF in_addr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_in_addr_t.h:31 */

/* BEGIN TYPEDEF int32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int32_t.h:30 */
typedef int int32_t;
/* END TYPEDEF int32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int32_t.h:30 */

/* BEGIN TYPEDEF daddr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:101 */
typedef int32_t daddr_t;
/* END TYPEDEF daddr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:101 */

/* BEGIN FUNCTION-DECL jit_arg_layout_create LOC=UNKNOWN */
static struct jit_arg_layout *jit_arg_layout_create(struct jit *jit , int arg_cnt ) ;
/* END FUNCTION-DECL jit_arg_layout_create LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN __darwin_fd_isset LOC=UNKNOWN */
__inline extern int ( __attribute__((__always_inline__)) __darwin_fd_isset)(int _fd ,
                                                                            struct fd_set  const  *_p ) ;
/* END FUNCTION-DECL-EXTERN __darwin_fd_isset LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_exit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:348 */
extern  __attribute__((__noreturn__)) void __attribute__((__availability__(macos,introduced=10.4),
__availability__(ios,introduced=2.0)))  pthread_exit(void * _Nullable   ) ;
/* END FUNCTION-DECL-EXTERN pthread_exit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:348 */

/* BEGIN FUNCTION-DECL jit_patch_external_calls LOC=UNKNOWN */
void jit_patch_external_calls(struct jit *jit ) ;
/* END FUNCTION-DECL jit_patch_external_calls LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN ctermid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctermid.h:26 */
extern char *ctermid(char * ) ;
/* END FUNCTION-DECL-EXTERN ctermid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctermid.h:26 */

/* BEGIN FUNCTION-DECL __builtin_va_arg LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_va_arg(__builtin_va_list  , unsigned long  , void * ) ;  */
/* END FUNCTION-DECL __builtin_va_arg LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_fmodf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_fmodf(float  ) ;  */
/* END FUNCTION-DECL __builtin_fmodf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN fputs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:157 */
extern int fputs(char const   * __restrict   , FILE * __restrict   )  __asm__("_fputs")  ;
/* END FUNCTION-DECL-EXTERN fputs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:157 */

/* BEGIN FUNCTION-DECL-EXTERN arc4random_addrandom LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:265 */
extern void arc4random_addrandom(unsigned char * , int  )  __attribute__((__availability__(watchos,deprecated=3.0,message="use arc4random_stir"),
__availability__(watchos,introduced=1.0), __availability__(tvos,deprecated=10.0,message="use arc4random_stir"),
__availability__(tvos,introduced=2.0), __availability__(ios,deprecated=10.0,message="use arc4random_stir"),
__availability__(ios,introduced=2.0), __availability__(macosx,deprecated=10.12,message="use arc4random_stir"),
__availability__(macosx,introduced=10.0))) ;
/* END FUNCTION-DECL-EXTERN arc4random_addrandom LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:265 */

/* BEGIN TYPEDEF __darwin_suseconds_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:74 */
typedef __int32_t __darwin_suseconds_t;
/* END TYPEDEF __darwin_suseconds_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:74 */

/* BEGIN TYPEDEF __darwin_time_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:120 */
typedef long __darwin_time_t;
/* END TYPEDEF __darwin_time_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:120 */

/* BEGIN STRUCT timeval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timeval.h:34 */
struct timeval {
   __darwin_time_t tv_sec ;
   __darwin_suseconds_t tv_usec ;
};
/* END STRUCT timeval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timeval.h:34 */

/* BEGIN STRUCT rusage LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:152 */
struct rusage {
   struct timeval ru_utime ;
   struct timeval ru_stime ;
   long ru_maxrss ;
   long ru_ixrss ;
   long ru_idrss ;
   long ru_isrss ;
   long ru_minflt ;
   long ru_majflt ;
   long ru_nswap ;
   long ru_inblock ;
   long ru_oublock ;
   long ru_msgsnd ;
   long ru_msgrcv ;
   long ru_nsignals ;
   long ru_nvcsw ;
   long ru_nivcsw ;
};
/* END STRUCT rusage LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:152 */

/* BEGIN FUNCTION-DECL-EXTERN funlockfile LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:288 */
extern void funlockfile(FILE * ) ;
/* END FUNCTION-DECL-EXTERN funlockfile LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:288 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_setstackaddr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:283 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setstackaddr(pthread_attr_t * ,
                                                                                                                                     void * ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_setstackaddr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:283 */

/* BEGIN FUNCTION-DECL-EXTERN setiopolicy_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:453 */
extern int setiopolicy_np(int  , int  , int  )  __attribute__((__availability__(macosx,introduced=10.5))) ;
/* END FUNCTION-DECL-EXTERN setiopolicy_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:453 */

/* BEGIN FUNCTION-DECL-EXTERN setitimer LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:201 */
extern int setitimer(int  , struct itimerval  const  * __restrict   , struct itimerval * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN setitimer LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:201 */

/* BEGIN FUNCTION-DECL-EXTERN brk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:538 */
extern void __attribute__((__deprecated__, __availability__(watchos,unavailable),
__availability__(tvos,unavailable)))  *brk(void const   * ) ;
/* END FUNCTION-DECL-EXTERN brk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:538 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_set_qos_class_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:81 */
extern int __attribute__((__availability__(ios,introduced=8.0), __availability__(macos,introduced=10.10)))  pthread_attr_set_qos_class_np(pthread_attr_t *__attr ,
                                                                                                                                          qos_class_t __qos_class ,
                                                                                                                                          int __relative_priority ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_set_qos_class_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:81 */

/* BEGIN FUNCTION-DECL __builtin_acos LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_acos(double  ) ;  */
/* END FUNCTION-DECL __builtin_acos LOC=BUILTIN */

/* BEGIN FUNCTION-DECL ob_new LOC=UNKNOWN */
static struct output_buf *ob_new(void) ;
/* END FUNCTION-DECL ob_new LOC=UNKNOWN */

/* BEGIN VARIABLE-DECL-EXTERN optreset LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:782 */
extern int optreset ;
/* END VARIABLE-DECL-EXTERN optreset LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:782 */

/* BEGIN TYPEDEF u_int64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int64_t.h:30 */
typedef unsigned long long u_int64_t;
/* END TYPEDEF u_int64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int64_t.h:30 */

/* BEGIN FUNCTION-DECL-EXTERN tmpfile LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:182 */
extern FILE *tmpfile(void) ;
/* END FUNCTION-DECL-EXTERN tmpfile LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:182 */

/* BEGIN TYPEDEF jit_tree LOC=./jitter-amd64.c:271 */
typedef struct jit_tree jit_tree;
/* END TYPEDEF jit_tree LOC=./jitter-amd64.c:271 */

/* BEGIN TYPEDEF jit_value LOC=./jitter-amd64.c:164 */
typedef long jit_value;
/* END TYPEDEF jit_value LOC=./jitter-amd64.c:164 */

/* BEGIN TYPEDEF jit_tree_key LOC=./jitter-amd64.c:268 */
typedef jit_value jit_tree_key;
/* END TYPEDEF jit_tree_key LOC=./jitter-amd64.c:268 */

/* BEGIN TYPEDEF jit_tree_value LOC=./jitter-amd64.c:269 */
typedef void *jit_tree_value;
/* END TYPEDEF jit_tree_value LOC=./jitter-amd64.c:269 */

/* BEGIN FUNCTION-DECL node_new LOC=UNKNOWN */
__inline static jit_tree *node_new(jit_tree_key key , jit_tree_value value ) ;
/* END FUNCTION-DECL node_new LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN getloadavg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:296 */
extern int getloadavg(double * , int  ) ;
/* END FUNCTION-DECL-EXTERN getloadavg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:296 */

/* BEGIN FUNCTION-DECL-EXTERN getpass LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:559 */
extern char *getpass(char const   * ) ;
/* END FUNCTION-DECL-EXTERN getpass LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:559 */

/* BEGIN TYPEDEF __darwin_ct_rune_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:70 */
typedef int __darwin_ct_rune_t;
/* END TYPEDEF __darwin_ct_rune_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:70 */

/* BEGIN FUNCTION-DECL-EXTERN ___runetype LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:129 */
extern unsigned long ___runetype(__darwin_ct_rune_t  ) ;
/* END FUNCTION-DECL-EXTERN ___runetype LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:129 */

/* BEGIN TYPEDEF __darwin_wctype_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types.h:43 */
typedef __uint32_t __darwin_wctype_t;
/* END TYPEDEF __darwin_wctype_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types.h:43 */

/* BEGIN ENUM __anonenum_AMD64_REX_Bits_69261688 LOC=./jitter-amd64.c:960 */
enum __anonenum_AMD64_REX_Bits_69261688 {
    AMD64_REX_B = 1,
    AMD64_REX_X = 2,
    AMD64_REX_R = 4,
    AMD64_REX_W = 8
} ;
/* END ENUM __anonenum_AMD64_REX_Bits_69261688 LOC=./jitter-amd64.c:960 */

/* BEGIN FUNCTION-DECL-EXTERN isphonogram LOC=UNKNOWN */
__inline extern int isphonogram(int _c ) ;
/* END FUNCTION-DECL-EXTERN isphonogram LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_va_arg_pack LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_va_arg_pack(void) ;  */
/* END FUNCTION-DECL __builtin_va_arg_pack LOC=BUILTIN */

/* BEGIN TYPEDEF __uint8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:41 */
typedef unsigned char __uint8_t;
/* END TYPEDEF __uint8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:41 */

/* BEGIN STRUCT jit_rmap LOC=./jitter-amd64.c:545 */
struct jit_rmap {
   jit_tree *map ;
};
/* END STRUCT jit_rmap LOC=./jitter-amd64.c:545 */

/* BEGIN FUNCTION-DECL jit_arg_layout_create_input LOC=UNKNOWN */
static struct jit_arg_layout *jit_arg_layout_create_input(struct jit *jit , struct jit_func_info *info ,
                                                          int arg_cnt ) ;
/* END FUNCTION-DECL jit_arg_layout_create_input LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN fileno LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:212 */
extern int fileno(FILE * ) ;
/* END FUNCTION-DECL-EXTERN fileno LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:212 */

/* BEGIN TYPEDEF __darwin_va_list LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:98 */
typedef __builtin_va_list __darwin_va_list;
/* END TYPEDEF __darwin_va_list LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:98 */

/* BEGIN TYPEDEF va_list LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_va_list.h:32 */
typedef __darwin_va_list va_list;
/* END TYPEDEF va_list LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_va_list.h:32 */

/* BEGIN FUNCTION-DECL-EXTERN vsprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:192 */
extern int ( /* format attribute */  vsprintf)(char * __restrict   , char const   * __restrict   ,
                                               va_list  )  __attribute__((__availability__(swift,unavailable,message="Use vsnprintf instead."))) ;
/* END FUNCTION-DECL-EXTERN vsprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:192 */

/* BEGIN FUNCTION-DECL-EXTERN isideogram LOC=UNKNOWN */
__inline extern int isideogram(int _c ) ;
/* END FUNCTION-DECL-EXTERN isideogram LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN vprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:191 */
extern int ( /* format attribute */  vprintf)(char const   * __restrict   , va_list  ) ;
/* END FUNCTION-DECL-EXTERN vprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:191 */

/* BEGIN TYPEDEF __darwin_gid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:60 */
typedef __uint32_t __darwin_gid_t;
/* END TYPEDEF __darwin_gid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:60 */

/* BEGIN TYPEDEF gid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_gid_t.h:31 */
typedef __darwin_gid_t gid_t;
/* END TYPEDEF gid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_gid_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN getgroups LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:456 */
extern int getgroups(int  , gid_t * ) ;
/* END FUNCTION-DECL-EXTERN getgroups LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:456 */

/* BEGIN FUNCTION-DECL-EXTERN strtok_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:104 */
extern char *strtok_r(char *__str , char const   *__sep , char **__lasts ) ;
/* END FUNCTION-DECL-EXTERN strtok_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:104 */

/* BEGIN TYPEDEF __darwin_pthread_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:118 */
typedef struct _opaque_pthread_t *__darwin_pthread_t;
/* END TYPEDEF __darwin_pthread_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:118 */

/* BEGIN TYPEDEF pthread_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_t.h:31 */
typedef __darwin_pthread_t pthread_t;
/* END TYPEDEF pthread_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_self LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:476 */
extern pthread_t __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  pthread_self(void) ;
/* END FUNCTION-DECL-EXTERN pthread_self LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:476 */

/* BEGIN FUNCTION-DECL jit_optimize_join_addmul LOC=UNKNOWN */
int jit_optimize_join_addmul(struct jit *jit ) ;
/* END FUNCTION-DECL jit_optimize_join_addmul LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN strcasecmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:78 */
extern int strcasecmp(char const   * , char const   * ) ;
/* END FUNCTION-DECL-EXTERN strcasecmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:78 */

/* BEGIN STRUCT __darwin_fp_control LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:92 */
struct __darwin_fp_control {
   unsigned short __invalid : 1 ;
   unsigned short __denorm : 1 ;
   unsigned short __zdiv : 1 ;
   unsigned short __ovrfl : 1 ;
   unsigned short __undfl : 1 ;
   unsigned short __precis : 1 ;
   unsigned short  : 2 ;
   unsigned short __pc : 2 ;
   unsigned short __rc : 2 ;
   unsigned short  : 1 ;
   unsigned short  : 3 ;
};
/* END STRUCT __darwin_fp_control LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:92 */

/* BEGIN STRUCT __darwin_fp_status LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:150 */
struct __darwin_fp_status {
   unsigned short __invalid : 1 ;
   unsigned short __denorm : 1 ;
   unsigned short __zdiv : 1 ;
   unsigned short __ovrfl : 1 ;
   unsigned short __undfl : 1 ;
   unsigned short __precis : 1 ;
   unsigned short __stkflt : 1 ;
   unsigned short __errsumm : 1 ;
   unsigned short __c0 : 1 ;
   unsigned short __c1 : 1 ;
   unsigned short __c2 : 1 ;
   unsigned short __tos : 3 ;
   unsigned short __c3 : 1 ;
   unsigned short __busy : 1 ;
};
/* END STRUCT __darwin_fp_status LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:150 */

/* BEGIN STRUCT __darwin_mmst_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:194 */
struct __darwin_mmst_reg {
   char __mmst_reg[10] ;
   char __mmst_rsrv[6] ;
};
/* END STRUCT __darwin_mmst_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:194 */

/* BEGIN STRUCT __darwin_xmm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:213 */
struct __darwin_xmm_reg {
   char __xmm_reg[16] ;
};
/* END STRUCT __darwin_xmm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:213 */

/* BEGIN TYPEDEF __uint16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:43 */
typedef unsigned short __uint16_t;
/* END TYPEDEF __uint16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:43 */

/* BEGIN STRUCT __darwin_i386_avx_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:318 */
struct __darwin_i386_avx_state {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   char __fpu_rsrv4[224] ;
   int __fpu_reserved1 ;
   char __avx_reserved1[64] ;
   struct __darwin_xmm_reg __fpu_ymmh0 ;
   struct __darwin_xmm_reg __fpu_ymmh1 ;
   struct __darwin_xmm_reg __fpu_ymmh2 ;
   struct __darwin_xmm_reg __fpu_ymmh3 ;
   struct __darwin_xmm_reg __fpu_ymmh4 ;
   struct __darwin_xmm_reg __fpu_ymmh5 ;
   struct __darwin_xmm_reg __fpu_ymmh6 ;
   struct __darwin_xmm_reg __fpu_ymmh7 ;
};
/* END STRUCT __darwin_i386_avx_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:318 */

/* BEGIN TYPEDEF jit_hw_reg LOC=./jitter-amd64.c:521 */
typedef struct __anonstruct_jit_hw_reg_312769258 jit_hw_reg;
/* END TYPEDEF jit_hw_reg LOC=./jitter-amd64.c:521 */

/* BEGIN TYPEDEF jit_op LOC=./jitter-amd64.c:179 */
typedef struct jit_op jit_op;
/* END TYPEDEF jit_op LOC=./jitter-amd64.c:179 */

/* BEGIN FUNCTION-DECL is_active_register LOC=UNKNOWN */
static int is_active_register(struct jit_reg_allocator *al , jit_hw_reg *reg , jit_op *op ) ;
/* END FUNCTION-DECL is_active_register LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_pid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:72 */
typedef __int32_t __darwin_pid_t;
/* END TYPEDEF __darwin_pid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:72 */

/* BEGIN TYPEDEF pid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_pid_t.h:31 */
typedef __darwin_pid_t pid_t;
/* END TYPEDEF pid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_pid_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN setpgrp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:588 */
extern pid_t setpgrp(void)  __asm__("_setpgrp")  ;
/* END FUNCTION-DECL-EXTERN setpgrp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:588 */

/* BEGIN FUNCTION-DECL-EXTERN mkstempsat_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:689 */
extern int mkstempsat_np(int dfd , char *path , int slen )  __attribute__((__availability__(watchos,introduced=4.0),
__availability__(tvos,introduced=11.0), __availability__(ios,introduced=11.0), __availability__(macosx,introduced=10.13))) ;
/* END FUNCTION-DECL-EXTERN mkstempsat_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:689 */

/* BEGIN TYPEDEF fd_set LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h:50 */
typedef struct fd_set fd_set;
/* END TYPEDEF fd_set LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h:50 */

/* BEGIN FUNCTION-DECL jump_adjustment LOC=UNKNOWN */
__inline static void jump_adjustment(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL jump_adjustment LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_asin LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_asin(double  ) ;  */
/* END FUNCTION-DECL __builtin_asin LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN ptsname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:221 */
extern char *ptsname(int  ) ;
/* END FUNCTION-DECL-EXTERN ptsname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:221 */

/* BEGIN FUNCTION-DECL jit_tree_equal LOC=UNKNOWN */
static int jit_tree_equal(jit_tree *r1 , jit_tree *r2 ) ;
/* END FUNCTION-DECL jit_tree_equal LOC=UNKNOWN */

/* BEGIN STRUCT _opaque_pthread_condattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:73 */
struct _opaque_pthread_condattr_t {
   long __sig ;
   char __opaque[8] ;
};
/* END STRUCT _opaque_pthread_condattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:73 */

/* BEGIN TYPEDEF __darwin_pthread_condattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:111 */
typedef struct _opaque_pthread_condattr_t __darwin_pthread_condattr_t;
/* END TYPEDEF __darwin_pthread_condattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:111 */

/* BEGIN TYPEDEF pthread_condattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_condattr_t.h:31 */
typedef __darwin_pthread_condattr_t pthread_condattr_t;
/* END TYPEDEF pthread_condattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_condattr_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_condattr_getpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:323 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_condattr_getpshared(pthread_condattr_t const   * __restrict   ,
                                                                                                                                       int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_condattr_getpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:323 */

/* BEGIN FUNCTION-DECL-EXTERN rand_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:229 */
extern int rand_r(unsigned int * )  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
/* END FUNCTION-DECL-EXTERN rand_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:229 */

/* BEGIN TYPEDEF int_fast32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:42 */
typedef int32_t int_fast32_t;
/* END TYPEDEF int_fast32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:42 */

/* BEGIN TYPEDEF __int64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:46 */
typedef long long __int64_t;
/* END TYPEDEF __int64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:46 */

/* BEGIN TYPEDEF __darwin_off_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:71 */
typedef __int64_t __darwin_off_t;
/* END TYPEDEF __darwin_off_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:71 */

/* BEGIN TYPEDEF fpos_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:81 */
typedef __darwin_off_t fpos_t;
/* END TYPEDEF fpos_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:81 */

/* BEGIN FUNCTION-DECL-EXTERN daemon LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:292 */
extern int daemon(int  , int  )  __asm__("_daemon$1050") __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable), __availability__(macosx,introduced=10.0,deprecated=10.5,message="Use posix_spawn APIs instead."))) ;
/* END FUNCTION-DECL-EXTERN daemon LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:292 */

/* BEGIN TYPEDEF time_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_time_t.h:31 */
typedef __darwin_time_t time_t;
/* END TYPEDEF time_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_time_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN time LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:118 */
extern time_t time(time_t * ) ;
/* END FUNCTION-DECL-EXTERN time LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:118 */

/* BEGIN FUNCTION-DECL-EXTERN isrune LOC=UNKNOWN */
__inline extern int isrune(int _c ) ;
/* END FUNCTION-DECL-EXTERN isrune LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_asinf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_asinf(float  ) ;  */
/* END FUNCTION-DECL __builtin_asinf LOC=BUILTIN */

/* BEGIN TYPEDEF segsz_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:125 */
typedef int32_t segsz_t;
/* END TYPEDEF segsz_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:125 */

/* BEGIN FUNCTION-DECL-EXTERN getopt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:509 */
extern int getopt(int  , char * const  * , char const   * )  __asm__("_getopt")  ;
/* END FUNCTION-DECL-EXTERN getopt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:509 */

/* BEGIN TYPEDEF fd_mask LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:189 */
typedef __int32_t fd_mask;
/* END TYPEDEF fd_mask LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:189 */

/* BEGIN FUNCTION-DECL-EXTERN tolower LOC=UNKNOWN */
__inline extern int tolower(int _c ) ;
/* END FUNCTION-DECL-EXTERN tolower LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN getsid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:553 */
extern pid_t getsid(pid_t  ) ;
/* END FUNCTION-DECL-EXTERN getsid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:553 */

/* BEGIN FUNCTION-DECL-EXTERN __srget LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:249 */
extern int __srget(FILE * ) ;
/* END FUNCTION-DECL-EXTERN __srget LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:249 */

/* BEGIN FUNCTION-DECL-EXTERN fchdir LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:550 */
extern int fchdir(int  ) ;
/* END FUNCTION-DECL-EXTERN fchdir LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:550 */

/* BEGIN FUNCTION-DECL __builtin_coshl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_coshl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_coshl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN _exit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:430 */
extern  __attribute__((__noreturn__)) void _exit(int  ) ;
/* END FUNCTION-DECL-EXTERN _exit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:430 */

/* BEGIN TYPEDEF __darwin_size_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:92 */
typedef unsigned long __darwin_size_t;
/* END TYPEDEF __darwin_size_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:92 */

/* BEGIN TYPEDEF size_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h:31 */
typedef __darwin_size_t size_t;
/* END TYPEDEF size_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_size_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN malloc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:40 */
extern void *( __attribute__((__warn_unused_result__)) malloc)(size_t size )  __attribute__((__alloc_size__(1))) ;
/* END FUNCTION-DECL-EXTERN malloc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:40 */

/* BEGIN FUNCTION-DECL is_suitable_mul LOC=UNKNOWN */
__inline static int is_suitable_mul(jit_op *op ) ;
/* END FUNCTION-DECL is_suitable_mul LOC=UNKNOWN */

/* BEGIN TYPEDEF int64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int64_t.h:30 */
typedef long long int64_t;
/* END TYPEDEF int64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int64_t.h:30 */

/* BEGIN TYPEDEF register_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:87 */
typedef int64_t register_t;
/* END TYPEDEF register_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:87 */

/* BEGIN TYPEDEF amd64_imm_buf LOC=./jitter-amd64.c:967 */
typedef union __anonunion_amd64_imm_buf_340631928 amd64_imm_buf;
/* END TYPEDEF amd64_imm_buf LOC=./jitter-amd64.c:967 */

/* BEGIN FUNCTION-DECL-EXTERN adjtime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:190 */
extern int adjtime(struct timeval  const  * , struct timeval * ) ;
/* END FUNCTION-DECL-EXTERN adjtime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:190 */

/* BEGIN FUNCTION-DECL-EXTERN tcgetpgrp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:484 */
extern pid_t tcgetpgrp(int  ) ;
/* END FUNCTION-DECL-EXTERN tcgetpgrp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:484 */

/* BEGIN TYPEDEF __darwin_ptrdiff_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:84 */
typedef long __darwin_ptrdiff_t;
/* END TYPEDEF __darwin_ptrdiff_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:84 */

/* BEGIN FUNCTION-DECL jit_allocator_hints_free LOC=UNKNOWN */
void jit_allocator_hints_free(jit_tree *hints ) ;
/* END FUNCTION-DECL jit_allocator_hints_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN getw LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:296 */
extern int getw(FILE * ) ;
/* END FUNCTION-DECL-EXTERN getw LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:296 */

/* BEGIN FUNCTION-DECL __builtin_strpbrk LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin_strpbrk(char const   * , char const   * ) ;  */
/* END FUNCTION-DECL __builtin_strpbrk LOC=BUILTIN */

/* BEGIN TYPEDEF AMD64_Reg_No LOC=./jitter-amd64.c:919 */
typedef enum jit_amd64_gp_regs AMD64_Reg_No;
/* END TYPEDEF AMD64_Reg_No LOC=./jitter-amd64.c:919 */

/* BEGIN FUNCTION-DECL emit_push_caller_saved_regs LOC=UNKNOWN */
static int emit_push_caller_saved_regs(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_push_caller_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_optimize_join_addimm LOC=UNKNOWN */
int jit_optimize_join_addimm(struct jit *jit ) ;
/* END FUNCTION-DECL jit_optimize_join_addimm LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_uid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:75 */
typedef __uint32_t __darwin_uid_t;
/* END TYPEDEF __darwin_uid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:75 */

/* BEGIN TYPEDEF uid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uid_t.h:31 */
typedef __darwin_uid_t uid_t;
/* END TYPEDEF uid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uid_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN chown LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:435 */
extern int chown(char const   * , uid_t  , gid_t  ) ;
/* END FUNCTION-DECL-EXTERN chown LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:435 */

/* BEGIN FUNCTION-DECL-EXTERN realpath LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:231 */
extern char *realpath(char const   * __restrict   , char * __restrict   )  __asm__("_realpath$DARWIN_EXTSN")  ;
/* END FUNCTION-DECL-EXTERN realpath LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:231 */

/* BEGIN ENUM JIT_OPCODE LOC=./jitter-amd64.c:1 */
enum JIT_OPCODE {
    JIT_FBEQ = 0,
    JIT_TRUNC = 8,
    JIT_FST = 16,
    JIT_LD = 24,
    JIT_TRANSFER_SUBS = 32,
    JIT_X86_STI = 40,
    JIT_FLD = 48,
    JIT_TRACE = 56,
    JIT_FNEG = 64,
    JIT_FDIV = 72,
    JIT_BEQ = 80,
    JIT_TOUCH = 88,
    JIT_MUL = 96,
    JIT_DATA_REF_DATA = 104,
    JIT_LDX = 112,
    JIT_FSTX = 120,
    JIT_BNOSUB = 128,
    JIT_MEMSET = 136,
    JIT_FADD = 144,
    JIT_TRANSFER_SUB = 152,
    JIT_SYNCREG = 160,
    JIT_CODE_ALIGN = 168,
    JIT_BGE = 176,
    JIT_TRANSFER = 184,
    JIT_SUBX = 192,
    JIT_DATA_REF_CODE = 200,
    JIT_BOADD = 208,
    JIT_CODESTART = 216,
    JIT_TRANSFER_XOR = 224,
    JIT_NEG = 232,
    JIT_FBGT = 240,
    JIT_FMUL = 248,
    JIT_FMOV = 256,
    JIT_BMS = 264,
    JIT_TRANSFER_ADD = 272,
    JIT_FBNE = 280,
    JIT_FBLT = 288,
    JIT_MEMCPY = 296,
    JIT_FRET = 304,
    JIT_LT = 312,
    JIT_MARK = 320,
    JIT_SUBC = 328,
    JIT_JMP = 336,
    JIT_PATCH = 344,
    JIT_HMUL = 352,
    JIT_FRETVAL = 360,
    JIT_X86_ADDMUL = 368,
    JIT_BLE = 376,
    JIT_PROLOG = 384,
    JIT_NOP = 392,
    JIT_UREG = 400,
    JIT_EXT = 408,
    JIT_MSG = 416,
    JIT_SUB = 424,
    JIT_FORCE_SPILL = 432,
    JIT_FBLE = 440,
    JIT_TRANSFER_AND = 448,
    JIT_GE = 456,
    JIT_ADDC = 464,
    JIT_TRANSFER_CPY = 472,
    JIT_ST = 480,
    JIT_DATA_BYTE = 488,
    JIT_LABEL = 496,
    JIT_BLT = 504,
    JIT_REF_DATA = 512,
    JIT_ALLOCA = 520,
    JIT_BNE = 528,
    JIT_OR = 536,
    JIT_RETVAL = 544,
    JIT_AND = 552,
    JIT_EQ = 560,
    JIT_NE = 568,
    JIT_FBGE = 576,
    JIT_ROUND = 584,
    JIT_FULL_SPILL = 592,
    JIT_TRANSFER_OR = 600,
    JIT_X86_STXI = 608,
    JIT_MOV = 616,
    JIT_FSUB = 624,
    JIT_LE = 632,
    JIT_COMMENT = 640,
    JIT_CALL = 648,
    JIT_RSB = 656,
    JIT_FLOOR = 664,
    JIT_FLDX = 672,
    JIT_FORCE_ASSOC = 680,
    JIT_DIV = 688,
    JIT_GT = 696,
    JIT_XOR = 704,
    JIT_RSH = 712,
    JIT_LSH = 720,
    JIT_RENAMEREG = 728,
    JIT_BNOADD = 736,
    JIT_FRSB = 744,
    JIT_STX = 752,
    JIT_PUTARG = 760,
    JIT_BGT = 768,
    JIT_GETARG = 776,
    JIT_NOT = 784,
    JIT_RET = 792,
    JIT_LREG = 800,
    JIT_DECL_ARG = 808,
    JIT_TRANSFER_ADDS = 816,
    JIT_ADD = 824,
    JIT_MOD = 832,
    JIT_PREPARE = 840,
    JIT_CEIL = 848,
    JIT_REF_CODE = 856,
    JIT_X86_ADDIMM = 864,
    JIT_BOSUB = 872,
    JIT_DATA_BYTES = 880,
    JIT_ADDX = 888,
    JIT_BMC = 896,
    JIT_FPUTARG = 904
} ;
/* END ENUM JIT_OPCODE LOC=./jitter-amd64.c:1 */

/* BEGIN FUNCTION-DECL fib LOC=UNKNOWN */
void fib(int n ) ;
/* END FUNCTION-DECL fib LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL make_nop LOC=UNKNOWN */
__inline static void make_nop(jit_op *op ) ;
/* END FUNCTION-DECL make_nop LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL make_free_reg LOC=UNKNOWN */
static jit_hw_reg *make_free_reg(struct jit_reg_allocator *al , jit_op *op , jit_value for_reg ) ;
/* END FUNCTION-DECL make_free_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN __darwin_check_fd_set LOC=UNKNOWN */
__inline extern int ( __attribute__((__always_inline__)) __darwin_check_fd_set)(int _a ,
                                                                                void const   *_b ) ;
/* END FUNCTION-DECL-EXTERN __darwin_check_fd_set LOC=UNKNOWN */

/* BEGIN TYPEDEF lldiv_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:94 */
typedef struct __anonstruct_lldiv_t_86583852 lldiv_t;
/* END TYPEDEF lldiv_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:94 */

/* BEGIN FUNCTION-DECL emit_funcall LOC=UNKNOWN */
static void emit_funcall(struct jit *jit , struct jit_op *op , int imm ) ;
/* END FUNCTION-DECL emit_funcall LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_current_func_info LOC=UNKNOWN */
__inline static struct jit_func_info *jit_current_func_info(struct jit *jit ) ;
/* END FUNCTION-DECL jit_current_func_info LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_popcountll LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_popcountll(unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_popcountll LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_unreachable LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_unreachable(void) ;  */
/* END FUNCTION-DECL __builtin_unreachable LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN ffs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:77 */
extern int ffs(int  ) ;
/* END FUNCTION-DECL-EXTERN ffs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:77 */

/* BEGIN FUNCTION-DECL-EXTERN searchfs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:772 */
extern int searchfs(char const   * , struct fssearchblock * , unsigned long * , unsigned int  ,
                    unsigned int  , struct searchstate * )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN searchfs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:772 */

/* BEGIN TYPEDEF __darwin_useconds_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:76 */
typedef __uint32_t __darwin_useconds_t;
/* END TYPEDEF __darwin_useconds_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:76 */

/* BEGIN TYPEDEF useconds_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_useconds_t.h:31 */
typedef __darwin_useconds_t useconds_t;
/* END TYPEDEF useconds_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_useconds_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN ualarm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:600 */
extern useconds_t ualarm(useconds_t  , useconds_t  ) ;
/* END FUNCTION-DECL-EXTERN ualarm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:600 */

/* BEGIN STRUCT transfer_info LOC=./jitter-amd64.c:3063 */
struct transfer_info {
   int sourcereg ;
   int destreg ;
   int scrapreg ;
   int scrap_in_use ;
   int counterreg ;
   int counter_in_use ;
   int block_size ;
   unsigned char *loop_addr ;
};
/* END STRUCT transfer_info LOC=./jitter-amd64.c:3063 */

/* BEGIN FUNCTION-DECL emit_sse_branch LOC=UNKNOWN */
static void emit_sse_branch(struct jit *jit , jit_op *op , long a1 , long a2 , long a3 ,
                            int x86_cond ) ;
/* END FUNCTION-DECL emit_sse_branch LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_blkcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:55 */
typedef __int64_t __darwin_blkcnt_t;
/* END TYPEDEF __darwin_blkcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:55 */

/* BEGIN FUNCTION-DECL-EXTERN isspace LOC=UNKNOWN */
__inline extern int isspace(int _c ) ;
/* END FUNCTION-DECL-EXTERN isspace LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin___memset_chk LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin___memset_chk(void * , int  , unsigned long  , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin___memset_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_ldx_op LOC=UNKNOWN */
static void emit_ldx_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                        jit_value a3 ) ;
/* END FUNCTION-DECL emit_ldx_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_getconcurrency LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:351 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_getconcurrency(void) ;
/* END FUNCTION-DECL-EXTERN pthread_getconcurrency LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:351 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_cond_signal LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:304 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_signal(pthread_cond_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_cond_signal LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:304 */

/* BEGIN FUNCTION-DECL emit_sse_div_op LOC=UNKNOWN */
static void emit_sse_div_op(struct jit *jit , long a1 , long a2 , long a3 ) ;
/* END FUNCTION-DECL emit_sse_div_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN getpid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:460 */
extern pid_t getpid(void) ;
/* END FUNCTION-DECL-EXTERN getpid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:460 */

/* BEGIN FUNCTION-DECL join_addi_addr LOC=UNKNOWN */
static int join_addi_addr(jit_op *op , jit_op *nextop ) ;
/* END FUNCTION-DECL join_addi_addr LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_op_is_data_op LOC=UNKNOWN */
static int jit_op_is_data_op(jit_op *op ) ;
/* END FUNCTION-DECL jit_op_is_data_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL initialize_code_refs LOC=UNKNOWN */
__inline static void initialize_code_refs(struct code_refs_cache *code_refs , struct jit_func_info *func_info ) ;
/* END FUNCTION-DECL initialize_code_refs LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_wctrans_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types.h:41 */
typedef int __darwin_wctrans_t;
/* END TYPEDEF __darwin_wctrans_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types.h:41 */

/* BEGIN TYPEDEF __int8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:37 */
typedef signed char __int8_t;
/* END TYPEDEF __int8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:37 */

/* BEGIN FUNCTION-DECL __builtin_coshf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_coshf(float  ) ;  */
/* END FUNCTION-DECL __builtin_coshf LOC=BUILTIN */

/* BEGIN UNION __3_fib_$node LOC=UNKNOWN */
union __3_fib_$node {
   unsigned long long _unsigned_long_long ;
   unsigned long _unsigned_long ;
   long long _long_long ;
   float _float ;
   unsigned char _unsigned_char ;
   signed char _signed_char ;
   void *_void_star ;
   long double _long_double ;
   double _double ;
   unsigned int _unsigned_int ;
   char _char ;
   unsigned short _unsigned_short ;
   long _long ;
   short _short ;
   int _int ;
};
/* END UNION __3_fib_$node LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN vsnprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:337 */
extern int ( /* format attribute */  vsnprintf)(char * __restrict  __str , size_t __size ,
                                                char const   * __restrict  __format ,
                                                va_list  ) ;
/* END FUNCTION-DECL-EXTERN vsnprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:337 */

/* BEGIN FUNCTION-DECL __builtin_floor LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_floor(double  ) ;  */
/* END FUNCTION-DECL __builtin_floor LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutex_lock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:382 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_lock(pthread_mutex_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutex_lock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:382 */

/* BEGIN FUNCTION-DECL-EXTERN erand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:202 */
extern double erand48(unsigned short * ) ;
/* END FUNCTION-DECL-EXTERN erand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:202 */

/* BEGIN FUNCTION-DECL-EXTERN nice LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:571 */
extern int nice(int  )  __asm__("_nice")  ;
/* END FUNCTION-DECL-EXTERN nice LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:571 */

/* BEGIN TYPEDEF __darwin_natural_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:50 */
typedef unsigned int __darwin_natural_t;
/* END TYPEDEF __darwin_natural_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:50 */

/* BEGIN TYPEDEF __darwin_mach_port_name_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:68 */
typedef __darwin_natural_t __darwin_mach_port_name_t;
/* END TYPEDEF __darwin_mach_port_name_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:68 */

/* BEGIN TYPEDEF __darwin_mach_port_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:69 */
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
/* END TYPEDEF __darwin_mach_port_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:69 */

/* BEGIN TYPEDEF mach_port_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_mach_port_t.h:50 */
typedef __darwin_mach_port_t mach_port_t;
/* END TYPEDEF mach_port_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_mach_port_t.h:50 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mach_thread_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:520 */
extern mach_port_t __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  pthread_mach_thread_np(pthread_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_mach_thread_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:520 */

/* BEGIN FUNCTION-DECL __builtin_infl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_infl(void) ;  */
/* END FUNCTION-DECL __builtin_infl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN gethostname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:622 */
extern int gethostname(char * , size_t  ) ;
/* END FUNCTION-DECL-EXTERN gethostname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:622 */

/* BEGIN ENUM __anonenum_idtype_t_558242672 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:79 */
enum __anonenum_idtype_t_558242672 {
    P_ALL = 0,
    P_PID = 1,
    P_PGID = 2
} ;
/* END ENUM __anonenum_idtype_t_558242672 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:79 */

/* BEGIN TYPEDEF __darwin_id_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:61 */
typedef __uint32_t __darwin_id_t;
/* END TYPEDEF __darwin_id_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:61 */

/* BEGIN TYPEDEF id_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_id_t.h:31 */
typedef __darwin_id_t id_t;
/* END TYPEDEF id_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_id_t.h:31 */

/* BEGIN TYPEDEF idtype_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:79 */
typedef enum __anonenum_idtype_t_558242672 idtype_t;
/* END TYPEDEF idtype_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:79 */

/* BEGIN TYPEDEF siginfo_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:177 */
typedef struct __siginfo siginfo_t;
/* END TYPEDEF siginfo_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:177 */

/* BEGIN FUNCTION-DECL-EXTERN waitid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:251 */
extern int waitid(idtype_t  , id_t  , siginfo_t * , int  )  __asm__("_waitid")  ;
/* END FUNCTION-DECL-EXTERN waitid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:251 */

/* BEGIN FUNCTION-DECL-EXTERN getdate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:112 */
extern struct tm *getdate(char const   * ) ;
/* END FUNCTION-DECL-EXTERN getdate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:112 */

/* BEGIN FUNCTION-DECL emit_transfer_loop LOC=UNKNOWN */
static void emit_transfer_loop(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_transfer_loop LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_mode_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:70 */
typedef __uint16_t __darwin_mode_t;
/* END TYPEDEF __darwin_mode_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:70 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_getstacksize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:255 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getstacksize(pthread_attr_t const   * __restrict   ,
                                                                                                                                     size_t * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_getstacksize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:255 */

/* BEGIN FUNCTION-DECL-EXTERN mlockall LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:218 */
extern int mlockall(int  ) ;
/* END FUNCTION-DECL-EXTERN mlockall LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:218 */

/* BEGIN FUNCTION-DECL-EXTERN memmem LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:155 */
extern void *memmem(void const   *__big , size_t __big_len , void const   *__little ,
                    size_t __little_len )  __attribute__((__availability__(macosx,introduced=10.7))) ;
/* END FUNCTION-DECL-EXTERN memmem LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:155 */

/* BEGIN FUNCTION-DECL-EXTERN setreuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:595 */
extern int setreuid(uid_t  , uid_t  )  __asm__("_setreuid")  ;
/* END FUNCTION-DECL-EXTERN setreuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:595 */

/* BEGIN FUNCTION-DECL-EXTERN exit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:145 */
extern  __attribute__((__noreturn__)) void exit(int  ) ;
/* END FUNCTION-DECL-EXTERN exit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:145 */

/* BEGIN FUNCTION-DECL-EXTERN putc_unlocked LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:291 */
extern int putc_unlocked(int  , FILE * ) ;
/* END FUNCTION-DECL-EXTERN putc_unlocked LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:291 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_setschedparam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:490 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_setschedparam(pthread_t  ,
                                                                                                                                 int  ,
                                                                                                                                 struct sched_param  const  * ) ;
/* END FUNCTION-DECL-EXTERN pthread_setschedparam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:490 */

/* BEGIN FUNCTION-DECL __builtin_strncmp LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_strncmp(char const   * , char const   * , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_strncmp LOC=BUILTIN */

/* BEGIN TYPEDEF jit_label LOC=./jitter-amd64.c:204 */
typedef struct jit_label jit_label;
/* END TYPEDEF jit_label LOC=./jitter-amd64.c:204 */

/* BEGIN FUNCTION-DECL free_labels LOC=UNKNOWN */
static void free_labels(jit_label *lab ) ;
/* END FUNCTION-DECL free_labels LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_get_qos_class_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:184 */
extern int __attribute__((__availability__(ios,introduced=8.0), __availability__(macos,introduced=10.10)))  pthread_get_qos_class_np(pthread_t __pthread ,
                                                                                                                                     qos_class_t * _Nullable __restrict  __qos_class ,
                                                                                                                                     int * _Nullable __restrict  __relative_priority ) ;
/* END FUNCTION-DECL-EXTERN pthread_get_qos_class_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:184 */

/* BEGIN FUNCTION-DECL-EXTERN vscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:336 */
extern int ( /* format attribute */  vscanf)(char const   * __restrict  __format ,
                                             va_list  ) ;
/* END FUNCTION-DECL-EXTERN vscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:336 */

/* BEGIN STRUCT _opaque_pthread_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:103 */
struct _opaque_pthread_t {
   long __sig ;
   struct __darwin_pthread_handler_rec *__cleanup_stack ;
   char __opaque[8176] ;
};
/* END STRUCT _opaque_pthread_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:103 */

/* BEGIN FUNCTION-DECL mark_livecode LOC=UNKNOWN */
__inline static void mark_livecode(jit_op *op ) ;
/* END FUNCTION-DECL mark_livecode LOC=UNKNOWN */

/* BEGIN VARIABLE-DECL-EXTERN __mb_cur_max LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:118 */
extern int __mb_cur_max ;
/* END VARIABLE-DECL-EXTERN __mb_cur_max LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:118 */

/* BEGIN FUNCTION-DECL-EXTERN getiopolicy_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:447 */
extern int getiopolicy_np(int  , int  )  __attribute__((__availability__(macosx,introduced=10.5))) ;
/* END FUNCTION-DECL-EXTERN getiopolicy_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:447 */

/* BEGIN FUNCTION-DECL-EXTERN __maskrune LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:148 */
extern int __maskrune(__darwin_ct_rune_t  , unsigned long  ) ;
/* END FUNCTION-DECL-EXTERN __maskrune LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:148 */

/* BEGIN FUNCTION-DECL __builtin_ldexp LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_ldexp(double  , int  ) ;  */
/* END FUNCTION-DECL __builtin_ldexp LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN getdtablesize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:557 */
extern int getdtablesize(void) ;
/* END FUNCTION-DECL-EXTERN getdtablesize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:557 */

/* BEGIN FUNCTION-DECL-EXTERN ffsctl LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:774 */
extern int ffsctl(int  , unsigned long  , void * , unsigned int  )  __attribute__((__availability__(macosx,introduced=10.6))) ;
/* END FUNCTION-DECL-EXTERN ffsctl LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:774 */

/* BEGIN TYPEDEF ssize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ssize_t.h:31 */
typedef __darwin_ssize_t ssize_t;
/* END TYPEDEF ssize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ssize_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN swab LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:168 */
extern void swab(void const   * __restrict   , void * __restrict   , ssize_t  ) ;
/* END FUNCTION-DECL-EXTERN swab LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:168 */

/* BEGIN FUNCTION-DECL __builtin___vsnprintf_chk LOC=BUILTIN */
/* compiler builtin: 
   int __builtin___vsnprintf_chk(char * , unsigned long  , int  , unsigned long  ,
                                 char const   * , __builtin_va_list  ) ;  */
/* END FUNCTION-DECL __builtin___vsnprintf_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL rotate_right LOC=UNKNOWN */
__inline static jit_tree *rotate_right(jit_tree *h ) ;
/* END FUNCTION-DECL rotate_right LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL funcall_put_arg LOC=UNKNOWN */
__inline static void funcall_put_arg(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL funcall_put_arg LOC=UNKNOWN */

/* BEGIN ENUM jit_warning LOC=./jitter-amd64.c:231 */
enum jit_warning {
    JIT_WARN_DEAD_CODE = 1,
    JIT_WARN_OP_WITHOUT_EFFECT = 2,
    JIT_WARN_INVALID_DATA_SIZE = 4,
    JIT_WARN_UNINITIALIZED_REG = 8,
    JIT_WARN_UNALIGNED_CODE = 16,
    JIT_WARN_INVALID_CODE_REFERENCE = 32,
    JIT_WARN_INVALID_DATA_REFERENCE = 64,
    JIT_WARN_MISSING_PATCH = 128,
    JIT_WARN_REGISTER_TYPE_MISMATCH = 256,
    JIT_WARN_ALL = 2147483647
} ;
/* END ENUM jit_warning LOC=./jitter-amd64.c:231 */

/* BEGIN FUNCTION-DECL-EXTERN memmove LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:73 */
extern void *memmove(void *__dst , void const   *__src , size_t __len ) ;
/* END FUNCTION-DECL-EXTERN memmove LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:73 */

/* BEGIN VARIABLE-DEF x86_cc_unsigned_map LOC=UNKNOWN */
static unsigned char x86_cc_unsigned_map[12]  ;
/* END VARIABLE-DEF x86_cc_unsigned_map LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN cgetmatch LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:285 */
extern int cgetmatch(char const   * , char const   * ) ;
/* END FUNCTION-DECL-EXTERN cgetmatch LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:285 */

/* BEGIN STRUCT _opaque_pthread_mutexattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:83 */
struct _opaque_pthread_mutexattr_t {
   long __sig ;
   char __opaque[8] ;
};
/* END STRUCT _opaque_pthread_mutexattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:83 */

/* BEGIN TYPEDEF __darwin_pthread_mutexattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:114 */
typedef struct _opaque_pthread_mutexattr_t __darwin_pthread_mutexattr_t;
/* END TYPEDEF __darwin_pthread_mutexattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:114 */

/* BEGIN TYPEDEF pthread_mutexattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_mutexattr_t.h:31 */
typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;
/* END TYPEDEF pthread_mutexattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_mutexattr_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_getpolicy_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:414 */
extern int __attribute__((__availability__(tvos,introduced=11.3), __availability__(watchos,introduced=4.3),
__availability__(ios,introduced=11.3), __availability__(macos,introduced=10.13.4)))  pthread_mutexattr_getpolicy_np(pthread_mutexattr_t const   * __restrict   ,
                                                                                                                    int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_getpolicy_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:414 */

/* BEGIN FUNCTION-DECL jit_correct_long_imms LOC=UNKNOWN */
static void jit_correct_long_imms(struct jit *jit ) ;
/* END FUNCTION-DECL jit_correct_long_imms LOC=UNKNOWN */

/* BEGIN TYPEDEF jit_set LOC=./jitter-amd64.c:580 */
typedef struct jit_set jit_set;
/* END TYPEDEF jit_set LOC=./jitter-amd64.c:580 */

/* BEGIN FUNCTION-DECL jit_set_remove LOC=UNKNOWN */
__inline static void jit_set_remove(jit_set *s , int value ) ;
/* END FUNCTION-DECL jit_set_remove LOC=UNKNOWN */

/* BEGIN TYPEDEF uint8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint8_t.h:31 */
typedef unsigned char uint8_t;
/* END TYPEDEF uint8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint8_t.h:31 */

/* BEGIN TYPEDEF uint_least8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:33 */
typedef uint8_t uint_least8_t;
/* END TYPEDEF uint_least8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:33 */

/* BEGIN FUNCTION-DECL jit_prepare_reg_counts LOC=UNKNOWN */
__inline static void jit_prepare_reg_counts(struct jit *jit ) ;
/* END FUNCTION-DECL jit_prepare_reg_counts LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN toupper LOC=UNKNOWN */
__inline extern int toupper(int _c ) ;
/* END FUNCTION-DECL-EXTERN toupper LOC=UNKNOWN */

/* BEGIN STRUCT __2_init_tigress_1_opaque_NodeStruct LOC=UNKNOWN */
struct __2_init_tigress_1_opaque_NodeStruct {
   struct __2_init_tigress_1_opaque_NodeStruct *prev ;
   struct __2_init_tigress_1_opaque_NodeStruct *next ;
   int data ;
};
/* END STRUCT __2_init_tigress_1_opaque_NodeStruct LOC=UNKNOWN */

/* BEGIN TYPEDEF intmax_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_intmax_t.h:32 */
typedef long intmax_t;
/* END TYPEDEF intmax_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_intmax_t.h:32 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_setscope LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:277 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setscope(pthread_attr_t * ,
                                                                                                                                 int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_setscope LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:277 */

/* BEGIN ENUM __anonenum_788482901 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/qos.h:130 */
enum __anonenum_788482901 {
    QOS_CLASS_USER_INTERACTIVE = 33,
    QOS_CLASS_USER_INITIATED = 25,
    QOS_CLASS_DEFAULT = 21,
    QOS_CLASS_UTILITY = 17,
    QOS_CLASS_BACKGROUND = 9,
    QOS_CLASS_UNSPECIFIED = 0
} ;
/* END ENUM __anonenum_788482901 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/qos.h:130 */

/* BEGIN FUNCTION-DECL-EXTERN fcvt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:203 */
extern char *fcvt(double  , int  , int * __restrict   , int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN fcvt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:203 */

/* BEGIN FUNCTION-DECL-EXTERN fwrite LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:165 */
extern size_t fwrite(void const   * __restrict  __ptr , size_t __size , size_t __nitems ,
                     FILE * __restrict  __stream )  __asm__("_fwrite")  ;
/* END FUNCTION-DECL-EXTERN fwrite LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:165 */

/* BEGIN TYPEDEF __darwin_sigset_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:73 */
typedef __uint32_t __darwin_sigset_t;
/* END TYPEDEF __darwin_sigset_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:73 */

/* BEGIN TYPEDEF sigset_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigset_t.h:31 */
typedef __darwin_sigset_t sigset_t;
/* END TYPEDEF sigset_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigset_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN pselect LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/select.h:114 */
extern int pselect(int  , fd_set * __restrict   , fd_set * __restrict   , fd_set * __restrict   ,
                   struct timespec  const  * __restrict   , sigset_t const   * __restrict   )  __asm__("_pselect$1050")  ;
/* END FUNCTION-DECL-EXTERN pselect LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/select.h:114 */

/* BEGIN TYPEDEF uint32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint32_t.h:31 */
typedef unsigned int uint32_t;
/* END TYPEDEF uint32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint32_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN arc4random_uniform LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:272 */
extern uint32_t arc4random_uniform(uint32_t __upper_bound )  __attribute__((__availability__(macosx,introduced=10.7))) ;
/* END FUNCTION-DECL-EXTERN arc4random_uniform LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:272 */

/* BEGIN FUNCTION-DECL-EXTERN rcmd LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:705 */
extern int __attribute__((__deprecated__))  rcmd(char ** , int  , char const   * ,
                                                 char const   * , char const   * ,
                                                 int * ) ;
/* END FUNCTION-DECL-EXTERN rcmd LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:705 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_getscope LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:244 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getscope(pthread_attr_t const   * __restrict   ,
                                                                                                                                 int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_getscope LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:244 */

/* BEGIN FUNCTION-DECL-EXTERN asctime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:108 */
extern char *asctime(struct tm  const  * ) ;
/* END FUNCTION-DECL-EXTERN asctime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:108 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_getschedpolicy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:241 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getschedpolicy(pthread_attr_t const   * __restrict   ,
                                                                                                                                       int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_getschedpolicy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:241 */

/* BEGIN STRUCT __darwin_x86_avx_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:765 */
struct __darwin_x86_avx_state64 {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   struct __darwin_xmm_reg __fpu_xmm8 ;
   struct __darwin_xmm_reg __fpu_xmm9 ;
   struct __darwin_xmm_reg __fpu_xmm10 ;
   struct __darwin_xmm_reg __fpu_xmm11 ;
   struct __darwin_xmm_reg __fpu_xmm12 ;
   struct __darwin_xmm_reg __fpu_xmm13 ;
   struct __darwin_xmm_reg __fpu_xmm14 ;
   struct __darwin_xmm_reg __fpu_xmm15 ;
   char __fpu_rsrv4[96] ;
   int __fpu_reserved1 ;
   char __avx_reserved1[64] ;
   struct __darwin_xmm_reg __fpu_ymmh0 ;
   struct __darwin_xmm_reg __fpu_ymmh1 ;
   struct __darwin_xmm_reg __fpu_ymmh2 ;
   struct __darwin_xmm_reg __fpu_ymmh3 ;
   struct __darwin_xmm_reg __fpu_ymmh4 ;
   struct __darwin_xmm_reg __fpu_ymmh5 ;
   struct __darwin_xmm_reg __fpu_ymmh6 ;
   struct __darwin_xmm_reg __fpu_ymmh7 ;
   struct __darwin_xmm_reg __fpu_ymmh8 ;
   struct __darwin_xmm_reg __fpu_ymmh9 ;
   struct __darwin_xmm_reg __fpu_ymmh10 ;
   struct __darwin_xmm_reg __fpu_ymmh11 ;
   struct __darwin_xmm_reg __fpu_ymmh12 ;
   struct __darwin_xmm_reg __fpu_ymmh13 ;
   struct __darwin_xmm_reg __fpu_ymmh14 ;
   struct __darwin_xmm_reg __fpu_ymmh15 ;
};
/* END STRUCT __darwin_x86_avx_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:765 */

/* BEGIN FUNCTION-DECL-EXTERN usleep LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:601 */
extern int usleep(useconds_t  )  __asm__("_usleep")  ;
/* END FUNCTION-DECL-EXTERN usleep LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:601 */

/* BEGIN FUNCTION-DECL-EXTERN nanosleep LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:142 */
extern int nanosleep(struct timespec  const  *__rqtp , struct timespec *__rmtp )  __asm__("_nanosleep")  ;
/* END FUNCTION-DECL-EXTERN nanosleep LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:142 */

/* BEGIN FUNCTION-DECL-EXTERN bzero LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:72 */
extern void bzero(void * , size_t  ) ;
/* END FUNCTION-DECL-EXTERN bzero LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:72 */

/* BEGIN FUNCTION-DECL-EXTERN isblank LOC=UNKNOWN */
__inline extern int isblank(int _c ) ;
/* END FUNCTION-DECL-EXTERN isblank LOC=UNKNOWN */

/* BEGIN STRUCT _opaque_pthread_once_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:88 */
struct _opaque_pthread_once_t {
   long __sig ;
   char __opaque[8] ;
};
/* END STRUCT _opaque_pthread_once_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:88 */

/* BEGIN TYPEDEF __darwin_pthread_once_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:115 */
typedef struct _opaque_pthread_once_t __darwin_pthread_once_t;
/* END TYPEDEF __darwin_pthread_once_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:115 */

/* BEGIN TYPEDEF pthread_once_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_once_t.h:31 */
typedef __darwin_pthread_once_t pthread_once_t;
/* END TYPEDEF pthread_once_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_once_t.h:31 */

/* BEGIN FUNCTION-DECL emit_prolog_op LOC=UNKNOWN */
static void emit_prolog_op(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_prolog_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL prepare_labels LOC=UNKNOWN */
static jit_tree *prepare_labels(struct jit *jit ) ;
/* END FUNCTION-DECL prepare_labels LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN clearerr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:142 */
extern void clearerr(FILE * ) ;
/* END FUNCTION-DECL-EXTERN clearerr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:142 */

/* BEGIN TYPEDEF __darwin_pthread_rwlock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:116 */
typedef struct _opaque_pthread_rwlock_t __darwin_pthread_rwlock_t;
/* END TYPEDEF __darwin_pthread_rwlock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:116 */

/* BEGIN FUNCTION-DECL-EXTERN posix2time LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:131 */
extern time_t posix2time(time_t  ) ;
/* END FUNCTION-DECL-EXTERN posix2time LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:131 */

/* BEGIN TYPEDEF __darwin_dev_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:57 */
typedef __int32_t __darwin_dev_t;
/* END TYPEDEF __darwin_dev_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:57 */

/* BEGIN TYPEDEF dev_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_dev_t.h:31 */
typedef __darwin_dev_t dev_t;
/* END TYPEDEF dev_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_dev_t.h:31 */

/* BEGIN TYPEDEF mode_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_mode_t.h:31 */
typedef __darwin_mode_t mode_t;
/* END TYPEDEF mode_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_mode_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN devname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:293 */
extern char *devname(dev_t  , mode_t  ) ;
/* END FUNCTION-DECL-EXTERN devname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:293 */

/* BEGIN FUNCTION-DECL-EXTERN strtoll LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:171 */
extern long long strtoll(char const   *__str , char **__endptr , int __base ) ;
/* END FUNCTION-DECL-EXTERN strtoll LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:171 */

/* BEGIN FUNCTION-DECL-EXTERN isprint LOC=UNKNOWN */
__inline extern int isprint(int _c ) ;
/* END FUNCTION-DECL-EXTERN isprint LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_memcpy LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_memcpy(void * , void const   * , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_memcpy LOC=BUILTIN */

/* BEGIN STRUCT __anonstruct_ldiv_t_748949161 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:88 */
struct __anonstruct_ldiv_t_748949161 {
   long quot ;
   long rem ;
};
/* END STRUCT __anonstruct_ldiv_t_748949161 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:88 */

/* BEGIN FUNCTION-DECL-EXTERN qos_class_self LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/qos.h:170 */
extern qos_class_t __attribute__((__availability__(macos,introduced=10.10), __availability__(ios,introduced=8.0)))  qos_class_self(void) ;
/* END FUNCTION-DECL-EXTERN qos_class_self LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/qos.h:170 */

/* BEGIN FUNCTION-DECL __builtin_huge_valf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_huge_valf(void) ;  */
/* END FUNCTION-DECL __builtin_huge_valf LOC=BUILTIN */

/* BEGIN VARIABLE-DEF _global_argv LOC=UNKNOWN */
char **_global_argv  ;
/* END VARIABLE-DEF _global_argv LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN posix_memalign LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:52 */
extern int posix_memalign(void **__memptr , size_t __alignment , size_t __size )  __attribute__((__availability__(macosx,introduced=10.6))) ;
/* END FUNCTION-DECL-EXTERN posix_memalign LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:52 */

/* BEGIN FUNCTION-DECL-EXTERN isascii LOC=UNKNOWN */
__inline extern int isascii(int _c ) ;
/* END FUNCTION-DECL-EXTERN isascii LOC=UNKNOWN */

/* BEGIN VARIABLE-DEF __2_init_tigress_1_opaque_ptr_1 LOC=UNKNOWN */
struct __2_init_tigress_1_opaque_NodeStruct *__2_init_tigress_1_opaque_ptr_1  =    (struct __2_init_tigress_1_opaque_NodeStruct *)0;
/* END VARIABLE-DEF __2_init_tigress_1_opaque_ptr_1 LOC=UNKNOWN */

/* BEGIN TYPEDEF uint64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint64_t.h:31 */
typedef unsigned long long uint64_t;
/* END TYPEDEF uint64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint64_t.h:31 */

/* BEGIN STRUCT rusage_info_v1 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:209 */
struct rusage_info_v1 {
   uint8_t ri_uuid[16] ;
   uint64_t ri_user_time ;
   uint64_t ri_system_time ;
   uint64_t ri_pkg_idle_wkups ;
   uint64_t ri_interrupt_wkups ;
   uint64_t ri_pageins ;
   uint64_t ri_wired_size ;
   uint64_t ri_resident_size ;
   uint64_t ri_phys_footprint ;
   uint64_t ri_proc_start_abstime ;
   uint64_t ri_proc_exit_abstime ;
   uint64_t ri_child_user_time ;
   uint64_t ri_child_system_time ;
   uint64_t ri_child_pkg_idle_wkups ;
   uint64_t ri_child_interrupt_wkups ;
   uint64_t ri_child_pageins ;
   uint64_t ri_child_elapsed_abstime ;
};
/* END STRUCT rusage_info_v1 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:209 */

/* BEGIN STRUCT _opaque_pthread_rwlockattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:98 */
struct _opaque_pthread_rwlockattr_t {
   long __sig ;
   char __opaque[16] ;
};
/* END STRUCT _opaque_pthread_rwlockattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:98 */

/* BEGIN TYPEDEF __darwin_pthread_rwlockattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:117 */
typedef struct _opaque_pthread_rwlockattr_t __darwin_pthread_rwlockattr_t;
/* END TYPEDEF __darwin_pthread_rwlockattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:117 */

/* BEGIN TYPEDEF pthread_rwlockattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_rwlockattr_t.h:31 */
typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;
/* END TYPEDEF pthread_rwlockattr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_rwlockattr_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN getpeereid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:661 */
extern int getpeereid(int  , uid_t * , gid_t * ) ;
/* END FUNCTION-DECL-EXTERN getpeereid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:661 */

/* BEGIN FUNCTION-DECL-EXTERN random LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:228 */
extern long random(void)  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
/* END FUNCTION-DECL-EXTERN random LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:228 */

/* BEGIN TYPEDEF u_int16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int16_t.h:30 */
typedef unsigned short u_int16_t;
/* END TYPEDEF u_int16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int16_t.h:30 */

/* BEGIN FUNCTION-DECL emit_sse_fldx_op LOC=UNKNOWN */
static void emit_sse_fldx_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                             jit_value a3 ) ;
/* END FUNCTION-DECL emit_sse_fldx_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN flockfile LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:286 */
extern void flockfile(FILE * ) ;
/* END FUNCTION-DECL-EXTERN flockfile LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:286 */

/* BEGIN FUNCTION-DECL-EXTERN memcmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:71 */
extern int memcmp(void const   *__s1 , void const   *__s2 , size_t __n ) ;
/* END FUNCTION-DECL-EXTERN memcmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:71 */

/* BEGIN FUNCTION-DECL-EXTERN putenv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:227 */
extern int putenv(char * )  __asm__("_putenv")  ;
/* END FUNCTION-DECL-EXTERN putenv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:227 */

/* BEGIN STRUCT sigvec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:348 */
struct sigvec {
   void (*sv_handler)(int  ) ;
   int sv_mask ;
   int sv_flags ;
};
/* END STRUCT sigvec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:348 */

/* BEGIN FUNCTION-DECL emit_branch_op LOC=UNKNOWN */
static void emit_branch_op(struct jit *jit , struct jit_op *op , int cond , int imm ,
                           int sign ) ;
/* END FUNCTION-DECL emit_branch_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL join_muli_addr LOC=UNKNOWN */
static int join_muli_addr(jit_op *op , jit_op *nextop ) ;
/* END FUNCTION-DECL join_muli_addr LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_pthread_key_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:112 */
typedef unsigned long __darwin_pthread_key_t;
/* END TYPEDEF __darwin_pthread_key_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:112 */

/* BEGIN TYPEDEF pthread_key_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_key_t.h:31 */
typedef __darwin_pthread_key_t pthread_key_t;
/* END TYPEDEF pthread_key_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_key_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_key_create LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:365 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_key_create(pthread_key_t * ,
                                                                                                                              void (* _Nullable  )(void * ) ) ;
/* END FUNCTION-DECL-EXTERN pthread_key_create LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:365 */

/* BEGIN FUNCTION-DECL jit_set_clone LOC=UNKNOWN */
__inline static jit_set *jit_set_clone(jit_set *s ) ;
/* END FUNCTION-DECL jit_set_clone LOC=UNKNOWN */

/* BEGIN TYPEDEF pthread_override_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:211 */
typedef struct pthread_override_s *pthread_override_t;
/* END TYPEDEF pthread_override_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:211 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_override_qos_class_start_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:263 */
extern pthread_override_t __attribute__((__availability__(macos,introduced=10.10),
__availability__(ios,introduced=8.0)))  pthread_override_qos_class_start_np(pthread_t __pthread ,
                                                                            qos_class_t __qos_class ,
                                                                            int __relative_priority ) ;
/* END FUNCTION-DECL-EXTERN pthread_override_qos_class_start_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:263 */

/* BEGIN FUNCTION-DECL-EXTERN getsubopt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:205 */
extern int getsubopt(char ** , char * const  * , char ** ) ;
/* END FUNCTION-DECL-EXTERN getsubopt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:205 */

/* BEGIN FUNCTION-DECL __builtin_huge_val LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_huge_val(void) ;  */
/* END FUNCTION-DECL __builtin_huge_val LOC=BUILTIN */

/* BEGIN FUNCTION-DECL spill_ret_retreg LOC=UNKNOWN */
static void spill_ret_retreg(jit_op *op , jit_hw_reg *ret_reg ) ;
/* END FUNCTION-DECL spill_ret_retreg LOC=UNKNOWN */

/* BEGIN TYPEDEF _RuneEntry LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:60 */
typedef struct __anonstruct__RuneEntry_453100079 _RuneEntry;
/* END TYPEDEF _RuneEntry LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:60 */

/* BEGIN FUNCTION-DECL jit_enable_optimization LOC=UNKNOWN */
void jit_enable_optimization(struct jit *jit , int opt ) ;
/* END FUNCTION-DECL jit_enable_optimization LOC=UNKNOWN */

/* BEGIN STRUCT timeval64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timeval64.h:34 */
struct timeval64 {
   __int64_t tv_sec ;
   __int64_t tv_usec ;
};
/* END STRUCT timeval64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timeval64.h:34 */

/* BEGIN STRUCT jit_arg_layout_location LOC=./jitter-amd64.c:1616 */
struct jit_arg_layout_location {
   int index ;
   char isfp ;
   char passed_in_reg ;
   struct jit_out_arg *oarg ;
};
/* END STRUCT jit_arg_layout_location LOC=./jitter-amd64.c:1616 */

/* BEGIN FUNCTION-DECL-EXTERN waitpid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:249 */
extern pid_t waitpid(pid_t  , int * , int  )  __asm__("_waitpid")  ;
/* END FUNCTION-DECL-EXTERN waitpid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:249 */

/* BEGIN FUNCTION-DECL-EXTERN strpbrk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:86 */
extern char *strpbrk(char const   *__s , char const   *__charset ) ;
/* END FUNCTION-DECL-EXTERN strpbrk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:86 */

/* BEGIN FUNCTION-DECL __builtin_extract_return_addr LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_extract_return_addr(void * ) ;  */
/* END FUNCTION-DECL __builtin_extract_return_addr LOC=BUILTIN */

/* BEGIN STRUCT __darwin_i386_thread_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:46 */
struct __darwin_i386_thread_state {
   unsigned int __eax ;
   unsigned int __ebx ;
   unsigned int __ecx ;
   unsigned int __edx ;
   unsigned int __edi ;
   unsigned int __esi ;
   unsigned int __ebp ;
   unsigned int __esp ;
   unsigned int __ss ;
   unsigned int __eflags ;
   unsigned int __eip ;
   unsigned int __cs ;
   unsigned int __ds ;
   unsigned int __es ;
   unsigned int __fs ;
   unsigned int __gs ;
};
/* END STRUCT __darwin_i386_thread_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:46 */

/* BEGIN FUNCTION-DECL-EXTERN signal LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:390 */
extern void (*signal(int  , void (*)(int  ) ))(int  ) ;
/* END FUNCTION-DECL-EXTERN signal LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:390 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_getstackaddr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:251 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getstackaddr(pthread_attr_t const   * __restrict   ,
                                                                                                                                     void * _Nullable  * _Nonnull __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_getstackaddr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:251 */

/* BEGIN TYPEDEF uintptr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uintptr_t.h:30 */
typedef unsigned long uintptr_t;
/* END TYPEDEF uintptr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uintptr_t.h:30 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutex_getprioceiling LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:374 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_getprioceiling(pthread_mutex_t const   * __restrict   ,
                                                                                                                                        int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutex_getprioceiling LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:374 */

/* BEGIN FUNCTION-DECL-EXTERN setstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:243 */
extern char *setstate(char const   * ) ;
/* END FUNCTION-DECL-EXTERN setstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:243 */

/* BEGIN FUNCTION-DECL assign_call LOC=UNKNOWN */
static int assign_call(jit_op *op , struct jit_reg_allocator *al ) ;
/* END FUNCTION-DECL assign_call LOC=UNKNOWN */

/* BEGIN STRUCT __anonstruct__RuneRange_1000210131 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:67 */
struct __anonstruct__RuneRange_1000210131 {
   int __nranges ;
   _RuneEntry *__ranges ;
};
/* END STRUCT __anonstruct__RuneRange_1000210131 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:67 */

/* BEGIN TYPEDEF _RuneCharClass LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:72 */
typedef struct __anonstruct__RuneCharClass_1021650748 _RuneCharClass;
/* END TYPEDEF _RuneCharClass LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:72 */

/* BEGIN TYPEDEF _RuneRange LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:67 */
typedef struct __anonstruct__RuneRange_1000210131 _RuneRange;
/* END TYPEDEF _RuneRange LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:67 */

/* BEGIN TYPEDEF __darwin_wchar_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:104 */
typedef int __darwin_wchar_t;
/* END TYPEDEF __darwin_wchar_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:104 */

/* BEGIN TYPEDEF __darwin_rune_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:109 */
typedef __darwin_wchar_t __darwin_rune_t;
/* END TYPEDEF __darwin_rune_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:109 */

/* BEGIN STRUCT __anonstruct__RuneLocale_110080762 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:77 */
struct __anonstruct__RuneLocale_110080762 {
   char __magic[8] ;
   char __encoding[32] ;
   __darwin_rune_t (*__sgetrune)(char const   * , __darwin_size_t  , char const   ** ) ;
   int (*__sputrune)(__darwin_rune_t  , char * , __darwin_size_t  , char ** ) ;
   __darwin_rune_t __invalid_rune ;
   __uint32_t __runetype[1 << 8] ;
   __darwin_rune_t __maplower[1 << 8] ;
   __darwin_rune_t __mapupper[1 << 8] ;
   _RuneRange __runetype_ext ;
   _RuneRange __maplower_ext ;
   _RuneRange __mapupper_ext ;
   void *__variable ;
   int __variable_len ;
   int __ncharclasses ;
   _RuneCharClass *__charclasses ;
};
/* END STRUCT __anonstruct__RuneLocale_110080762 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:77 */

/* BEGIN VARIABLE-DECL-EXTERN _DefaultRuneLocale LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:111 */
extern _RuneLocale _DefaultRuneLocale ;
/* END VARIABLE-DECL-EXTERN _DefaultRuneLocale LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:111 */

/* BEGIN FUNCTION-DECL __builtin_ctzll LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_ctzll(unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_ctzll LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN rewind LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:176 */
extern void rewind(FILE * ) ;
/* END FUNCTION-DECL-EXTERN rewind LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:176 */

/* BEGIN FUNCTION-DECL jit_op_new LOC=UNKNOWN */
static struct jit_op *jit_op_new(unsigned short code , unsigned char spec , long arg1 ,
                                 long arg2 , long arg3 , unsigned char arg_size ) ;
/* END FUNCTION-DECL jit_op_new LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN localtime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:114 */
extern struct tm *localtime(time_t const   * ) ;
/* END FUNCTION-DECL-EXTERN localtime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:114 */

/* BEGIN STRUCT __darwin_i386_exception_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:575 */
struct __darwin_i386_exception_state {
   __uint16_t __trapno ;
   __uint16_t __cpu ;
   __uint32_t __err ;
   __uint32_t __faultvaddr ;
};
/* END STRUCT __darwin_i386_exception_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:575 */

/* BEGIN STRUCT __darwin_i386_float_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:281 */
struct __darwin_i386_float_state {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   char __fpu_rsrv4[224] ;
   int __fpu_reserved1 ;
};
/* END STRUCT __darwin_i386_float_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:281 */

/* BEGIN STRUCT __darwin_mcontext32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:39 */
struct __darwin_mcontext32 {
   struct __darwin_i386_exception_state __es ;
   struct __darwin_i386_thread_state __ss ;
   struct __darwin_i386_float_state __fs ;
};
/* END STRUCT __darwin_mcontext32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:39 */

/* BEGIN FUNCTION-DECL-EXTERN digittoint LOC=UNKNOWN */
__inline extern int digittoint(int _c ) ;
/* END FUNCTION-DECL-EXTERN digittoint LOC=UNKNOWN */

/* BEGIN STRUCT code_refs_cache LOC=./jitter-amd64.c:4679 */
struct code_refs_cache {
   int size ;
   jit_op **ops ;
};
/* END STRUCT code_refs_cache LOC=./jitter-amd64.c:4679 */

/* BEGIN FUNCTION-DECL emit_sse_alu_op LOC=UNKNOWN */
static void emit_sse_alu_op(struct jit *jit , jit_op *op , int sse_op ) ;
/* END FUNCTION-DECL emit_sse_alu_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN cgetfirst LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:284 */
extern int cgetfirst(char ** , char ** ) ;
/* END FUNCTION-DECL-EXTERN cgetfirst LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:284 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_testcancel LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:496 */
extern void __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  pthread_testcancel(void)  __asm__("_pthread_testcancel")  ;
/* END FUNCTION-DECL-EXTERN pthread_testcancel LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:496 */

/* BEGIN FUNCTION-DECL-EXTERN crypt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:544 */
extern char *crypt(char const   * , char const   * ) ;
/* END FUNCTION-DECL-EXTERN crypt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:544 */

/* BEGIN FUNCTION-DECL-EXTERN strxfrm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:91 */
extern size_t strxfrm(char *__s1 , char const   *__s2 , size_t __n ) ;
/* END FUNCTION-DECL-EXTERN strxfrm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:91 */

/* BEGIN TYPEDEF __darwin_intptr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:49 */
typedef long __darwin_intptr_t;
/* END TYPEDEF __darwin_intptr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:49 */

/* BEGIN FUNCTION-DECL-EXTERN strtoull LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:177 */
extern unsigned long long strtoull(char const   *__str , char **__endptr , int __base ) ;
/* END FUNCTION-DECL-EXTERN strtoull LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:177 */

/* BEGIN FUNCTION-DECL-EXTERN ctermid_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:371 */
extern char *ctermid_r(char * ) ;
/* END FUNCTION-DECL-EXTERN ctermid_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:371 */

/* BEGIN STRUCT _opaque_pthread_rwlock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:93 */
struct _opaque_pthread_rwlock_t {
   long __sig ;
   char __opaque[192] ;
};
/* END STRUCT _opaque_pthread_rwlock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:93 */

/* BEGIN TYPEDEF pthread_rwlock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_rwlock_t.h:31 */
typedef __darwin_pthread_rwlock_t pthread_rwlock_t;
/* END TYPEDEF pthread_rwlock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_rwlock_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlock_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:443 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_init(pthread_rwlock_t * __restrict   ,
                                                                                                                               pthread_rwlockattr_t const   * _Nullable __restrict   )  __asm__("_pthread_rwlock_init")  ;
/* END FUNCTION-DECL-EXTERN pthread_rwlock_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:443 */

/* BEGIN FUNCTION-DECL-EXTERN getwd LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:564 */
extern char *getwd(char * ) ;
/* END FUNCTION-DECL-EXTERN getwd LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:564 */

/* BEGIN FUNCTION-DECL-EXTERN execve LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:445 */
extern int execve(char const   *__file , char * const  *__argv , char * const  *__envp )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN execve LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:445 */

/* BEGIN STRUCT jit_allocator_hint LOC=./jitter-amd64.c:549 */
struct jit_allocator_hint {
   int last_pos ;
   int should_be_calleesaved ;
   int should_be_eax ;
   int refs ;
};
/* END STRUCT jit_allocator_hint LOC=./jitter-amd64.c:549 */

/* BEGIN FUNCTION-DECL print_args LOC=UNKNOWN */
static void print_args(struct jit_disasm *disasm , struct output_buf *linebuf , jit_op *op ,
                       jit_tree *labels ) ;
/* END FUNCTION-DECL print_args LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN strcmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:77 */
extern int strcmp(char const   *__s1 , char const   *__s2 ) ;
/* END FUNCTION-DECL-EXTERN strcmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:77 */

/* BEGIN FUNCTION-DECL emit_fret_op LOC=UNKNOWN */
static void emit_fret_op(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_fret_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN index LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:73 */
extern char *index(char const   * , int  ) ;
/* END FUNCTION-DECL-EXTERN index LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:73 */

/* BEGIN TYPEDEF suseconds_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_suseconds_t.h:31 */
typedef __darwin_suseconds_t suseconds_t;
/* END TYPEDEF suseconds_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_suseconds_t.h:31 */

/* BEGIN FUNCTION-DECL __builtin___strlcat_chk LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin___strlcat_chk(char * , char const   * , unsigned long  , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin___strlcat_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_regs_active LOC=UNKNOWN */
void jit_regs_active(jit_op *op , jit_value *dest ) ;
/* END FUNCTION-DECL jit_regs_active LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_getspecific LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:358 */
extern void __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  * _Nullable  pthread_getspecific(pthread_key_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_getspecific LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:358 */

/* BEGIN STRUCT __anonstruct__RuneEntry_453100079 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:60 */
struct __anonstruct__RuneEntry_453100079 {
   __darwin_rune_t __min ;
   __darwin_rune_t __max ;
   __darwin_rune_t __map ;
   __uint32_t *__types ;
};
/* END STRUCT __anonstruct__RuneEntry_453100079 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:60 */

/* BEGIN FUNCTION-DECL associate_register_alias LOC=UNKNOWN */
static void associate_register_alias(struct jit_reg_allocator *al , jit_op *op , int i ) ;
/* END FUNCTION-DECL associate_register_alias LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN iscntrl LOC=UNKNOWN */
__inline extern int iscntrl(int _c ) ;
/* END FUNCTION-DECL-EXTERN iscntrl LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_uuid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:77 */
typedef unsigned char __darwin_uuid_t[16];
/* END TYPEDEF __darwin_uuid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:77 */

/* BEGIN FUNCTION-DECL-EXTERN strcspn LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:80 */
extern size_t strcspn(char const   *__s , char const   *__charset ) ;
/* END FUNCTION-DECL-EXTERN strcspn LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:80 */

/* BEGIN UNION sigval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:158 */
union sigval {
   int sival_int ;
   void *sival_ptr ;
};
/* END UNION sigval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:158 */

/* BEGIN STRUCT sigevent LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:168 */
struct sigevent {
   int sigev_notify ;
   int sigev_signo ;
   union sigval sigev_value ;
   void (*sigev_notify_function)(union sigval  ) ;
   pthread_attr_t *sigev_notify_attributes ;
};
/* END STRUCT sigevent LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:168 */

/* BEGIN STRUCT __darwin_x86_exception_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1172 */
struct __darwin_x86_exception_state64 {
   __uint16_t __trapno ;
   __uint16_t __cpu ;
   __uint32_t __err ;
   __uint64_t __faultvaddr ;
};
/* END STRUCT __darwin_x86_exception_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1172 */

/* BEGIN FUNCTION-DECL emit_rsb_op LOC=UNKNOWN */
static void emit_rsb_op(struct jit *jit , struct jit_op *op , int imm ) ;
/* END FUNCTION-DECL emit_rsb_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutex_unlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:392 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_unlock(pthread_mutex_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutex_unlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:392 */

/* BEGIN TYPEDEF __mbstate_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:76 */
typedef union __anonunion___mbstate_t_250061491 __mbstate_t;
/* END TYPEDEF __mbstate_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:76 */

/* BEGIN FUNCTION-DECL delete_min LOC=UNKNOWN */
static jit_tree *delete_min(jit_tree *h ) ;
/* END FUNCTION-DECL delete_min LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN isalpha LOC=UNKNOWN */
__inline extern int isalpha(int _c ) ;
/* END FUNCTION-DECL-EXTERN isalpha LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN reallocf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:349 */
extern void *reallocf(void *__ptr , size_t __size )  __attribute__((__alloc_size__(2))) ;
/* END FUNCTION-DECL-EXTERN reallocf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:349 */

/* BEGIN FUNCTION-DECL jit_collect_statistics LOC=UNKNOWN */
void jit_collect_statistics(struct jit *jit ) ;
/* END FUNCTION-DECL jit_collect_statistics LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN posix_openpt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:220 */
extern int posix_openpt(int  ) ;
/* END FUNCTION-DECL-EXTERN posix_openpt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:220 */

/* BEGIN FUNCTION-DECL emit_branch_overflow_op LOC=UNKNOWN */
static void emit_branch_overflow_op(struct jit *jit , struct jit_op *op , int alu_op ,
                                    int imm , int negation ) ;
/* END FUNCTION-DECL emit_branch_overflow_op LOC=UNKNOWN */

/* BEGIN VARIABLE-DEF __4_fib___freq LOC=UNKNOWN */
int __4_fib___freq  =    0;
/* END VARIABLE-DEF __4_fib___freq LOC=UNKNOWN */

/* BEGIN TYPEDEF user_addr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:97 */
typedef u_int64_t user_addr_t;
/* END TYPEDEF user_addr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:97 */

/* BEGIN FUNCTION-DECL __builtin_fabsl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_fabsl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_fabsl LOC=BUILTIN */

/* BEGIN VARIABLE-DECL-EXTERN optopt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:512 */
extern int optopt ;
/* END VARIABLE-DECL-EXTERN optopt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:512 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_setpolicy_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:433 */
extern int __attribute__((__availability__(ios,introduced=5.0), __availability__(macos,introduced=10.7)))  pthread_mutexattr_setpolicy_np(pthread_mutexattr_t * ,
                                                                                                                                          int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_setpolicy_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:433 */

/* BEGIN FUNCTION-DECL-EXTERN strncpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:85 */
extern char *strncpy(char *__dst , char const   *__src , size_t __n ) ;
/* END FUNCTION-DECL-EXTERN strncpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:85 */

/* BEGIN TYPEDEF div_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:83 */
typedef struct __anonstruct_div_t_773697287 div_t;
/* END TYPEDEF div_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:83 */

/* BEGIN FUNCTION-DECL jit_trace_op LOC=UNKNOWN */
void jit_trace_op(struct jit *jit , jit_op *op , int verbosity ) ;
/* END FUNCTION-DECL jit_trace_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN execvP LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:647 */
extern int execvP(char const   *__file , char const   *__searchpath , char * const  *__argv )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN execvP LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:647 */

/* BEGIN ENUM __anonenum_X86_ALU_Opcode_144447433 LOC=./jitter-amd64.c:1000 */
enum __anonenum_X86_ALU_Opcode_144447433 {
    X86_ADD = 0,
    X86_OR = 1,
    X86_ADC = 2,
    X86_SBB = 3,
    X86_AND = 4,
    X86_SUB = 5,
    X86_XOR = 6,
    X86_CMP = 7,
    X86_NALU = 8
} ;
/* END ENUM __anonenum_X86_ALU_Opcode_144447433 LOC=./jitter-amd64.c:1000 */

/* BEGIN FUNCTION-DECL-EXTERN profil LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:696 */
extern int profil(char * , size_t  , unsigned long  , unsigned int  ) ;
/* END FUNCTION-DECL-EXTERN profil LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:696 */

/* BEGIN FUNCTION-DECL jit_tree_walk LOC=UNKNOWN */
static void jit_tree_walk(jit_tree *h , void (*func)(jit_tree_key key , jit_tree_value value ,
                                                     void *thunk ) , void *thunk ) ;
/* END FUNCTION-DECL jit_tree_walk LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN printf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:170 */
extern int ( /* format attribute */  printf)(char const   * __restrict    , ...) ;
/* END FUNCTION-DECL-EXTERN printf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:170 */

/* BEGIN FUNCTION-DECL-EXTERN fmtcheck LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:373 */
extern char const   *fmtcheck(char const   * , char const   * ) ;
/* END FUNCTION-DECL-EXTERN fmtcheck LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:373 */

/* BEGIN FUNCTION-DECL check_data_alignment LOC=UNKNOWN */
static int check_data_alignment(jit_op *op , char *msg_buf ) ;
/* END FUNCTION-DECL check_data_alignment LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlock_wrlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:457 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_wrlock(pthread_rwlock_t * )  __asm__("_pthread_rwlock_wrlock")  ;
/* END FUNCTION-DECL-EXTERN pthread_rwlock_wrlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:457 */

/* BEGIN FUNCTION-DECL cleanup LOC=UNKNOWN */
static void cleanup(struct jit *jit ) ;
/* END FUNCTION-DECL cleanup LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL valid_fsize LOC=UNKNOWN */
static int valid_fsize(int size ) ;
/* END FUNCTION-DECL valid_fsize LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL move_red_right LOC=UNKNOWN */
__inline static jit_tree *move_red_right(jit_tree *h ) ;
/* END FUNCTION-DECL move_red_right LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin___vsprintf_chk LOC=BUILTIN */
/* compiler builtin: 
   int __builtin___vsprintf_chk(char * , int  , unsigned long  , char const   * ,
                                __builtin_va_list  ) ;  */
/* END FUNCTION-DECL __builtin___vsprintf_chk LOC=BUILTIN */

/* BEGIN VARIABLE-DECL-EXTERN daylight LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:105 */
extern int daylight ;
/* END VARIABLE-DECL-EXTERN daylight LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:105 */

/* BEGIN FUNCTION-DECL __builtin_atan2f LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_atan2f(float  , float  ) ;  */
/* END FUNCTION-DECL __builtin_atan2f LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN lrand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:215 */
extern long lrand48(void)  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
/* END FUNCTION-DECL-EXTERN lrand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:215 */

/* BEGIN FUNCTION-DECL-EXTERN setmode LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:724 */
extern void *setmode(char const   * )  __asm__("_setmode")  ;
/* END FUNCTION-DECL-EXTERN setmode LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:724 */

/* BEGIN FUNCTION-DECL sse_alu_pd_reg_safeimm LOC=UNKNOWN */
static void sse_alu_pd_reg_safeimm(struct jit *jit , jit_op *op , int op_id , int reg ,
                                   double *imm ) ;
/* END FUNCTION-DECL sse_alu_pd_reg_safeimm LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_bswap64 LOC=BUILTIN */
/* compiler builtin: 
   long __builtin_bswap64(long  ) ;  */
/* END FUNCTION-DECL __builtin_bswap64 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_clzll LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_clzll(unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_clzll LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN setgid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:475 */
extern int setgid(gid_t  ) ;
/* END FUNCTION-DECL-EXTERN setgid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:475 */

/* BEGIN FUNCTION-DECL-EXTERN chroot LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:541 */
extern int chroot(char const   * ) ;
/* END FUNCTION-DECL-EXTERN chroot LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:541 */

/* BEGIN FUNCTION-DECL __builtin_va_end LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_va_end(__builtin_va_list  ) ;  */
/* END FUNCTION-DECL __builtin_va_end LOC=BUILTIN */

/* BEGIN TYPEDEF jit_rmap LOC=./jitter-amd64.c:545 */
typedef struct jit_rmap jit_rmap;
/* END TYPEDEF jit_rmap LOC=./jitter-amd64.c:545 */

/* BEGIN FUNCTION-DECL rmap_unassoc LOC=UNKNOWN */
static void rmap_unassoc(jit_rmap *rmap , jit_value reg ) ;
/* END FUNCTION-DECL rmap_unassoc LOC=UNKNOWN */

/* BEGIN TYPEDEF int_least32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:31 */
typedef int32_t int_least32_t;
/* END TYPEDEF int_least32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:31 */

/* BEGIN TYPEDEF uint_fast64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:47 */
typedef uint64_t uint_fast64_t;
/* END TYPEDEF uint_fast64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:47 */

/* BEGIN VARIABLE-DECL-EXTERN __stderrp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:69 */
extern FILE *__stderrp ;
/* END VARIABLE-DECL-EXTERN __stderrp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:69 */

/* BEGIN TYPEDEF jit_prepared_args LOC=./jitter-amd64.c:556 */
typedef struct jit_prepared_args jit_prepared_args;
/* END TYPEDEF jit_prepared_args LOC=./jitter-amd64.c:556 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_set_qos_class_self_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:153 */
extern int __attribute__((__availability__(ios,introduced=8.0), __availability__(macos,introduced=10.10)))  pthread_set_qos_class_self_np(qos_class_t __qos_class ,
                                                                                                                                          int __relative_priority ) ;
/* END FUNCTION-DECL-EXTERN pthread_set_qos_class_self_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:153 */

/* BEGIN FUNCTION-DECL rmap_clone LOC=UNKNOWN */
static jit_rmap *rmap_clone(jit_rmap *rmap ) ;
/* END FUNCTION-DECL rmap_clone LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN wait LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:248 */
extern pid_t wait(int * )  __asm__("_wait")  ;
/* END FUNCTION-DECL-EXTERN wait LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:248 */

/* BEGIN FUNCTION-DECL __builtin_frexpf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_frexpf(float  , int * ) ;  */
/* END FUNCTION-DECL __builtin_frexpf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN sranddev LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:347 */
extern void sranddev(void) ;
/* END FUNCTION-DECL-EXTERN sranddev LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:347 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_yield_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:559 */
extern void __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  pthread_yield_np(void) ;
/* END FUNCTION-DECL-EXTERN pthread_yield_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:559 */

/* BEGIN TYPEDEF jit_float LOC=./jitter-amd64.c:166 */
typedef double jit_float;
/* END TYPEDEF jit_float LOC=./jitter-amd64.c:166 */

/* BEGIN FUNCTION-DECL-EXTERN initstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:208 */
extern char *initstate(unsigned int  , char * , size_t  ) ;
/* END FUNCTION-DECL-EXTERN initstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:208 */

/* BEGIN FUNCTION-DECL-EXTERN arc4random LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:264 */
extern uint32_t arc4random(void) ;
/* END FUNCTION-DECL-EXTERN arc4random LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:264 */

/* BEGIN FUNCTION-DECL-EXTERN getattrlist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:751 */
extern int getattrlist(char const   * , void * , void * , size_t  , unsigned int  )  __asm__("_getattrlist")  ;
/* END FUNCTION-DECL-EXTERN getattrlist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:751 */

/* BEGIN FUNCTION-DECL-EXTERN radixsort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:341 */
extern int radixsort(unsigned char const   **__base , int __nel , unsigned char const   *__table ,
                     unsigned int __endbyte ) ;
/* END FUNCTION-DECL-EXTERN radixsort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:341 */

/* BEGIN FUNCTION-DECL-EXTERN wait3 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:254 */
extern pid_t wait3(int * , int  , struct rusage * ) ;
/* END FUNCTION-DECL-EXTERN wait3 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:254 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlockattr_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:463 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlockattr_destroy(pthread_rwlockattr_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_rwlockattr_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:463 */

/* BEGIN FUNCTION-DECL-EXTERN strspn LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:88 */
extern size_t strspn(char const   *__s , char const   *__charset ) ;
/* END FUNCTION-DECL-EXTERN strspn LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:88 */

/* BEGIN TYPEDEF u_short LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_short.h:30 */
typedef unsigned short u_short;
/* END TYPEDEF u_short LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_short.h:30 */

/* BEGIN TYPEDEF u_int8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int8_t.h:30 */
typedef unsigned char u_int8_t;
/* END TYPEDEF u_int8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int8_t.h:30 */

/* BEGIN FUNCTION-DECL-EXTERN __darwin_fd_clr LOC=UNKNOWN */
__inline extern void ( __attribute__((__always_inline__)) __darwin_fd_clr)(int _fd ,
                                                                           struct fd_set * const  _p ) ;
/* END FUNCTION-DECL-EXTERN __darwin_fd_clr LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL fixup LOC=UNKNOWN */
__inline static jit_tree *fixup(jit_tree *h ) ;
/* END FUNCTION-DECL fixup LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_dump_ops_general LOC=UNKNOWN */
static void jit_dump_ops_general(struct jit *jit , jit_tree *labels , int verbosity ) ;
/* END FUNCTION-DECL jit_dump_ops_general LOC=UNKNOWN */

/* BEGIN TYPEDEF quad_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:96 */
typedef int64_t quad_t;
/* END TYPEDEF quad_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:96 */

/* BEGIN FUNCTION-DECL-EXTERN strtofflags LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:730 */
extern int strtofflags(char ** , unsigned long * , unsigned long * ) ;
/* END FUNCTION-DECL-EXTERN strtofflags LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:730 */

/* BEGIN FUNCTION-DECL force_assoc LOC=UNKNOWN */
static int force_assoc(jit_op *op , struct jit_reg_allocator *al ) ;
/* END FUNCTION-DECL force_assoc LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN getpriority LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:445 */
extern int getpriority(int  , id_t  ) ;
/* END FUNCTION-DECL-EXTERN getpriority LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:445 */

/* BEGIN TYPEDEF wchar_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_wchar_t.h:34 */
typedef __darwin_wchar_t wchar_t;
/* END TYPEDEF wchar_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_wchar_t.h:34 */

/* BEGIN FUNCTION-DECL-EXTERN cgetclose LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:282 */
extern int cgetclose(void) ;
/* END FUNCTION-DECL-EXTERN cgetclose LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:282 */

/* BEGIN FUNCTION-DECL-EXTERN renamex_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/stdio.h:46 */
extern int renamex_np(char const   * , char const   * , unsigned int  )  __attribute__((__availability__(watchos,introduced=3.0),
__availability__(tvos,introduced=10.0), __availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12))) ;
/* END FUNCTION-DECL-EXTERN renamex_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/stdio.h:46 */

/* BEGIN FUNCTION-DECL funcall_prepare LOC=UNKNOWN */
__inline static void funcall_prepare(struct jit *jit , jit_op *op , int count ) ;
/* END FUNCTION-DECL funcall_prepare LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL DUMP_short LOC=UNKNOWN */
void DUMP_short(int block , struct jit *jit , struct jit_op *begin_ , struct jit_op *end_ ) ;
/* END FUNCTION-DECL DUMP_short LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_logf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_logf(float  ) ;  */
/* END FUNCTION-DECL __builtin_logf LOC=BUILTIN */

/* BEGIN TYPEDEF off_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_off_t.h:31 */
typedef __darwin_off_t off_t;
/* END TYPEDEF off_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_off_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN ftello LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:328 */
extern off_t ftello(FILE *__stream ) ;
/* END FUNCTION-DECL-EXTERN ftello LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:328 */

/* BEGIN FUNCTION-DECL jit_tree_clone LOC=UNKNOWN */
__inline static jit_tree *jit_tree_clone(jit_tree *root ) ;
/* END FUNCTION-DECL jit_tree_clone LOC=UNKNOWN */

/* BEGIN TYPEDEF ushort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:91 */
typedef unsigned short ushort;
/* END TYPEDEF ushort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:91 */

/* BEGIN FUNCTION-DECL-EXTERN setpgid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:476 */
extern int setpgid(pid_t  , pid_t  ) ;
/* END FUNCTION-DECL-EXTERN setpgid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:476 */

/* BEGIN FUNCTION-DECL-EXTERN pipe LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:470 */
extern int pipe(int * ) ;
/* END FUNCTION-DECL-EXTERN pipe LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:470 */

/* BEGIN FUNCTION-DECL __builtin_nan LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_nan(char const   * ) ;  */
/* END FUNCTION-DECL __builtin_nan LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_inf LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_inf(void) ;  */
/* END FUNCTION-DECL __builtin_inf LOC=BUILTIN */

/* BEGIN STRUCT __sbuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:92 */
struct __sbuf {
   unsigned char *_base ;
   int _size ;
};
/* END STRUCT __sbuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:92 */

/* BEGIN STRUCT __sFILE LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:126 */
struct __sFILE {
   unsigned char *_p ;
   int _r ;
   int _w ;
   short _flags ;
   short _file ;
   struct __sbuf _bf ;
   int _lbfsize ;
   void *_cookie ;
   int (* _Nullable  _close)(void * ) ;
   int (* _Nullable  _read)(void * , char * , int  ) ;
   fpos_t (* _Nullable  _seek)(void * , fpos_t  , int  ) ;
   int (* _Nullable  _write)(void * , char const   * , int  ) ;
   struct __sbuf _ub ;
   struct __sFILEX *_extra ;
   int _ur ;
   unsigned char _ubuf[3] ;
   unsigned char _nbuf[1] ;
   struct __sbuf _lb ;
   int _blksize ;
   fpos_t _offset ;
};
/* END STRUCT __sFILE LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_stdio.h:126 */

/* BEGIN FUNCTION-DECL-EXTERN atoi LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:135 */
extern int atoi(char const   * ) ;
/* END FUNCTION-DECL-EXTERN atoi LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:135 */

/* BEGIN FUNCTION-DECL is_spilled LOC=UNKNOWN */
static int is_spilled(jit_value arg_id , jit_op *prepare_op , int *reg ) ;
/* END FUNCTION-DECL is_spilled LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL is_transfer_op LOC=UNKNOWN */
static int is_transfer_op(jit_op *op ) ;
/* END FUNCTION-DECL is_transfer_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_getprotocol LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:402 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_getprotocol(pthread_mutexattr_t const   * __restrict   ,
                                                                                                                                         int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_getprotocol LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:402 */

/* BEGIN FUNCTION-DECL-EXTERN execl LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:441 */
extern int execl(char const   *__path , char const   *__arg0  , ...)  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN execl LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:441 */

/* BEGIN FUNCTION-DECL-EXTERN fscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:161 */
extern int ( /* format attribute */  fscanf)(FILE * __restrict   , char const   * __restrict   
                                             , ...) ;
/* END FUNCTION-DECL-EXTERN fscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:161 */

/* BEGIN STRUCT sigstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:367 */
struct sigstack {
   char *ss_sp ;
   int ss_onstack ;
};
/* END STRUCT sigstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:367 */

/* BEGIN FUNCTION-DECL __builtin_modff LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_modff(float  , float * ) ;  */
/* END FUNCTION-DECL __builtin_modff LOC=BUILTIN */

/* BEGIN TYPEDEF __darwin_wint_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:112 */
typedef int __darwin_wint_t;
/* END TYPEDEF __darwin_wint_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:112 */

/* BEGIN TYPEDEF wint_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_wint_t.h:32 */
typedef __darwin_wint_t wint_t;
/* END TYPEDEF wint_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_wint_t.h:32 */

/* BEGIN FUNCTION-DECL-EXTERN execle LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:442 */
extern int execle(char const   *__path , char const   *__arg0  , ...)  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN execle LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:442 */

/* BEGIN FUNCTION-DECL rmap_is_associated_aux LOC=UNKNOWN */
__inline static jit_hw_reg *rmap_is_associated_aux(jit_tree *n , int reg_id , int fp ,
                                                   jit_value *virt_reg ) ;
/* END FUNCTION-DECL rmap_is_associated_aux LOC=UNKNOWN */

/* BEGIN STRUCT jit_disasm LOC=./jitter-amd64.c:3570 */
struct jit_disasm {
   char *indent_template ;
   char *reg_template ;
   char *freg_template ;
   char *arg_template ;
   char *farg_template ;
   char *reg_fp_template ;
   char *reg_out_template ;
   char *reg_imm_template ;
   char *reg_fimm_template ;
   char *reg_unknown_template ;
   char *label_template ;
   char *label_forward_template ;
   char *generic_addr_template ;
   char *generic_value_template ;
};
/* END STRUCT jit_disasm LOC=./jitter-amd64.c:3570 */

/* BEGIN VARIABLE-DEF jit_debugging_disasm LOC=UNKNOWN */
static struct jit_disasm jit_debugging_disasm  ;
/* END VARIABLE-DEF jit_debugging_disasm LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN lcong48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:214 */
extern void lcong48(unsigned short * ) ;
/* END FUNCTION-DECL-EXTERN lcong48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:214 */

/* BEGIN FUNCTION-DECL-EXTERN munlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:232 */
extern int munlock(void const   * , size_t  ) ;
/* END FUNCTION-DECL-EXTERN munlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:232 */

/* BEGIN STRUCT timespec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timespec.h:33 */
struct timespec {
   __darwin_time_t tv_sec ;
   long tv_nsec ;
};
/* END STRUCT timespec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_timespec.h:33 */

/* BEGIN VARIABLE-DEF _global_argc LOC=UNKNOWN */
int _global_argc  ;
/* END VARIABLE-DEF _global_argc LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN acct LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:644 */
extern int acct(char const   * ) ;
/* END FUNCTION-DECL-EXTERN acct LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:644 */

/* BEGIN ENUM jit_amd64_fp_regs LOC=./jitter-amd64.c:940 */
enum jit_amd64_fp_regs {
    AMD64_XMM0 = 0,
    AMD64_XMM1 = 1,
    AMD64_XMM2 = 2,
    AMD64_XMM3 = 3,
    AMD64_XMM4 = 4,
    AMD64_XMM5 = 5,
    AMD64_XMM6 = 6,
    AMD64_XMM7 = 7,
    AMD64_XMM8 = 8,
    AMD64_XMM9 = 9,
    AMD64_XMM10 = 10,
    AMD64_XMM11 = 11,
    AMD64_XMM12 = 12,
    AMD64_XMM13 = 13,
    AMD64_XMM14 = 14,
    AMD64_XMM15 = 15,
    AMD64_XMM_NREG = 16
} ;
/* END ENUM jit_amd64_fp_regs LOC=./jitter-amd64.c:940 */

/* BEGIN FUNCTION-DECL jit_tree_subset LOC=UNKNOWN */
static int jit_tree_subset(jit_tree *root , jit_tree *n ) ;
/* END FUNCTION-DECL jit_tree_subset LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_cosh LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_cosh(double  ) ;  */
/* END FUNCTION-DECL __builtin_cosh LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_sinhl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_sinhl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_sinhl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_log10f LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_log10f(float  ) ;  */
/* END FUNCTION-DECL __builtin_log10f LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_condattr_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:320 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_condattr_init(pthread_condattr_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_condattr_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:320 */

/* BEGIN FUNCTION-DECL-EXTERN mkstemp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:217 */
extern int mkstemp(char * ) ;
/* END FUNCTION-DECL-EXTERN mkstemp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:217 */

/* BEGIN FUNCTION-DECL __builtin___vprintf_chk LOC=BUILTIN */
/* compiler builtin: 
   int __builtin___vprintf_chk(int  , char const   * , __builtin_va_list  ) ;  */
/* END FUNCTION-DECL __builtin___vprintf_chk LOC=BUILTIN */

/* BEGIN UNION __anonunion_x86_imm_buf_549773081 LOC=./jitter-amd64.c:1143 */
union __anonunion_x86_imm_buf_549773081 {
   int val ;
   unsigned char b[4] ;
};
/* END UNION __anonunion_x86_imm_buf_549773081 LOC=./jitter-amd64.c:1143 */

/* BEGIN STRUCT __darwin_x86_thread_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:633 */
struct __darwin_x86_thread_state64 {
   __uint64_t __rax ;
   __uint64_t __rbx ;
   __uint64_t __rcx ;
   __uint64_t __rdx ;
   __uint64_t __rdi ;
   __uint64_t __rsi ;
   __uint64_t __rbp ;
   __uint64_t __rsp ;
   __uint64_t __r8 ;
   __uint64_t __r9 ;
   __uint64_t __r10 ;
   __uint64_t __r11 ;
   __uint64_t __r12 ;
   __uint64_t __r13 ;
   __uint64_t __r14 ;
   __uint64_t __r15 ;
   __uint64_t __rip ;
   __uint64_t __rflags ;
   __uint64_t __cs ;
   __uint64_t __fs ;
   __uint64_t __gs ;
};
/* END STRUCT __darwin_x86_thread_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:633 */

/* BEGIN STRUCT __darwin_mcontext_avx64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:113 */
struct __darwin_mcontext_avx64 {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_state64 __ss ;
   struct __darwin_x86_avx_state64 __fs ;
};
/* END STRUCT __darwin_mcontext_avx64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:113 */

/* BEGIN FUNCTION-DECL-EXTERN a64l LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:199 */
extern long a64l(char const   * ) ;
/* END FUNCTION-DECL-EXTERN a64l LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:199 */

/* BEGIN FUNCTION-DECL check_missing_patches LOC=UNKNOWN */
static int check_missing_patches(jit_op *op , char *msg_buf ) ;
/* END FUNCTION-DECL check_missing_patches LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL emit_div_op LOC=UNKNOWN */
static void emit_div_op(struct jit *jit , struct jit_op *op , int imm , int sign ,
                        int modulo ) ;
/* END FUNCTION-DECL emit_div_op LOC=UNKNOWN */

/* BEGIN TYPEDEF X86_XMM_Reg_No LOC=./jitter-amd64.c:985 */
typedef enum jit_x86_fp_regs X86_XMM_Reg_No;
/* END TYPEDEF X86_XMM_Reg_No LOC=./jitter-amd64.c:985 */

/* BEGIN FUNCTION-DECL ob_pad LOC=UNKNOWN */
static void ob_pad(struct output_buf *ob , int size ) ;
/* END FUNCTION-DECL ob_pad LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL print_rmap_callback LOC=UNKNOWN */
static void print_rmap_callback(jit_tree_key key , jit_tree_value value , void *disasm ) ;
/* END FUNCTION-DECL print_rmap_callback LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN cgetnum LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:287 */
extern int cgetnum(char * , char const   * , long * ) ;
/* END FUNCTION-DECL-EXTERN cgetnum LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:287 */

/* BEGIN TYPEDEF int8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int8_t.h:30 */
typedef signed char int8_t;
/* END TYPEDEF int8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int8_t.h:30 */

/* BEGIN TYPEDEF int_fast8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:40 */
typedef int8_t int_fast8_t;
/* END TYPEDEF int_fast8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:40 */

/* BEGIN STRUCT __darwin_pthread_handler_rec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:57 */
struct __darwin_pthread_handler_rec {
   void (*__routine)(void * ) ;
   void *__arg ;
   struct __darwin_pthread_handler_rec *__next ;
};
/* END STRUCT __darwin_pthread_handler_rec LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_pthread/_pthread_types.h:57 */

/* BEGIN FUNCTION-DECL print_addr LOC=UNKNOWN */
__inline static void print_addr(struct jit_disasm *disasm , struct output_buf *buf ,
                                jit_tree *labels , jit_op *op , int arg_pos ) ;
/* END FUNCTION-DECL print_addr LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN mincore LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:243 */
extern int mincore(void const   * , size_t  , char * ) ;
/* END FUNCTION-DECL-EXTERN mincore LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:243 */

/* BEGIN TYPEDEF uint16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint16_t.h:31 */
typedef unsigned short uint16_t;
/* END TYPEDEF uint16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uint16_t.h:31 */

/* BEGIN TYPEDEF uint_fast16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:45 */
typedef uint16_t uint_fast16_t;
/* END TYPEDEF uint_fast16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:45 */

/* BEGIN FUNCTION-DECL-EXTERN sched_yield LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/sched.h:38 */
extern int sched_yield(void) ;
/* END FUNCTION-DECL-EXTERN sched_yield LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/sched.h:38 */

/* BEGIN FUNCTION-DECL-EXTERN setenv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:237 */
extern int setenv(char const   *__name , char const   *__value , int __overwrite )  __asm__("_setenv")  ;
/* END FUNCTION-DECL-EXTERN setenv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:237 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_condattr_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:317 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_condattr_destroy(pthread_condattr_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_condattr_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:317 */

/* BEGIN FUNCTION-DECL DUMP_byte LOC=UNKNOWN */
void DUMP_byte(int block , struct jit *jit , struct jit_op *begin_ , struct jit_op *end_ ) ;
/* END FUNCTION-DECL DUMP_byte LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_init LOC=UNKNOWN */
struct jit *jit_init(void) ;
/* END FUNCTION-DECL jit_init LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN setprogname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:299 */
extern void setprogname(char const   * ) ;
/* END FUNCTION-DECL-EXTERN setprogname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:299 */

/* BEGIN FUNCTION-DECL jit_regs_active_count LOC=UNKNOWN */
int jit_regs_active_count(jit_op *op ) ;
/* END FUNCTION-DECL jit_regs_active_count LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL emit_mul_op LOC=UNKNOWN */
static void emit_mul_op(struct jit *jit , struct jit_op *op , int imm , int sign ,
                        int high_bytes ) ;
/* END FUNCTION-DECL emit_mul_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN sscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:181 */
extern int ( /* format attribute */  sscanf)(char const   * __restrict   , char const   * __restrict   
                                             , ...) ;
/* END FUNCTION-DECL-EXTERN sscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:181 */

/* BEGIN FUNCTION-DECL jit_patch_local_addrs LOC=UNKNOWN */
void jit_patch_local_addrs(struct jit *jit ) ;
/* END FUNCTION-DECL jit_patch_local_addrs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_prefetch LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_prefetch(void const   *  , ...) ;  */
/* END FUNCTION-DECL __builtin_prefetch LOC=BUILTIN */

/* BEGIN ENUM __anonenum_X86_Prefix_200431650 LOC=./jitter-amd64.c:1094 */
enum __anonenum_X86_Prefix_200431650 {
    X86_LOCK_PREFIX = 240,
    X86_REPNZ_PREFIX = 242,
    X86_REPZ_PREFIX = 243,
    X86_REP_PREFIX = 243,
    X86_CS_PREFIX = 46,
    X86_SS_PREFIX = 54,
    X86_DS_PREFIX = 62,
    X86_ES_PREFIX = 38,
    X86_FS_PREFIX = 100,
    X86_GS_PREFIX = 101,
    X86_UNLIKELY_PREFIX = 46,
    X86_LIKELY_PREFIX = 62,
    X86_OPERAND_PREFIX = 102,
    X86_ADDRESS_PREFIX = 103
} ;
/* END ENUM __anonenum_X86_Prefix_200431650 LOC=./jitter-amd64.c:1094 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlock_unlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:460 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_unlock(pthread_rwlock_t * )  __asm__("_pthread_rwlock_unlock")  ;
/* END FUNCTION-DECL-EXTERN pthread_rwlock_unlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:460 */

/* BEGIN FUNCTION-DECL-EXTERN fpurge LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:374 */
extern int fpurge(FILE * ) ;
/* END FUNCTION-DECL-EXTERN fpurge LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:374 */

/* BEGIN FUNCTION-DECL-EXTERN strcasestr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:160 */
extern char *strcasestr(char const   *__big , char const   *__little ) ;
/* END FUNCTION-DECL-EXTERN strcasestr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:160 */

/* BEGIN FUNCTION-DECL-EXTERN getchar LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:167 */
extern int getchar(void) ;
/* END FUNCTION-DECL-EXTERN getchar LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:167 */

/* BEGIN FUNCTION-DECL __builtin_mempcpy LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_mempcpy(void * , void const   * , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_mempcpy LOC=BUILTIN */

/* BEGIN FUNCTION-DECL move_red_left LOC=UNKNOWN */
__inline static jit_tree *move_red_left(jit_tree *h ) ;
/* END FUNCTION-DECL move_red_left LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN isatty LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:463 */
extern int isatty(int  ) ;
/* END FUNCTION-DECL-EXTERN isatty LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:463 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_setprotocol LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:424 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_setprotocol(pthread_mutexattr_t * ,
                                                                                                                                         int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_setprotocol LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:424 */

/* BEGIN FUNCTION-DECL-EXTERN atol LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:136 */
extern long atol(char const   * ) ;
/* END FUNCTION-DECL-EXTERN atol LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:136 */

/* BEGIN FUNCTION-DECL-EXTERN __swbuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:251 */
extern int __swbuf(int  , FILE * ) ;
/* END FUNCTION-DECL-EXTERN __swbuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:251 */

/* BEGIN FUNCTION-DECL jit_imm_overflow LOC=UNKNOWN */
static int jit_imm_overflow(struct jit *jit , jit_op *op , long value ) ;
/* END FUNCTION-DECL jit_imm_overflow LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL emit_branch_mask_op LOC=UNKNOWN */
static void emit_branch_mask_op(struct jit *jit , struct jit_op *op , int cond , int imm ) ;
/* END FUNCTION-DECL emit_branch_mask_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN strlcpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:163 */
extern size_t strlcpy(char *__dst , char const   *__source , size_t __size ) ;
/* END FUNCTION-DECL-EXTERN strlcpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:163 */

/* BEGIN FUNCTION-DECL-EXTERN mkstemps LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:674 */
extern int mkstemps(char * , int  ) ;
/* END FUNCTION-DECL-EXTERN mkstemps LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:674 */

/* BEGIN FUNCTION-DECL emit_msg_op LOC=UNKNOWN */
static void emit_msg_op(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_msg_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_from_mach_thread_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:552 */
extern pthread_t __attribute__((__nullable__, __availability__(macos,introduced=10.5),
__availability__(ios,introduced=2.0)))  pthread_from_mach_thread_np(mach_port_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_from_mach_thread_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:552 */

/* BEGIN FUNCTION-DECL-EXTERN ftruncate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:607 */
extern int ftruncate(int  , off_t  ) ;
/* END FUNCTION-DECL-EXTERN ftruncate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:607 */

/* BEGIN FUNCTION-DECL-EXTERN fseeko LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:327 */
extern int fseeko(FILE *__stream , off_t __offset , int __whence ) ;
/* END FUNCTION-DECL-EXTERN fseeko LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:327 */

/* BEGIN FUNCTION-DECL-EXTERN setattrlist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:752 */
extern int setattrlist(char const   * , void * , void * , size_t  , unsigned int  )  __asm__("_setattrlist")  ;
/* END FUNCTION-DECL-EXTERN setattrlist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:752 */

/* BEGIN FUNCTION-DECL-EXTERN strcat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:75 */
extern char *strcat(char *__s1 , char const   *__s2 ) ;
/* END FUNCTION-DECL-EXTERN strcat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:75 */

/* BEGIN FUNCTION-DECL jit_set_get LOC=UNKNOWN */
__inline static int jit_set_get(jit_set *s , int value ) ;
/* END FUNCTION-DECL jit_set_get LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN setusershell LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:728 */
extern void setusershell(void) ;
/* END FUNCTION-DECL-EXTERN setusershell LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:728 */

/* BEGIN FUNCTION-DECL assign_regs_for_args LOC=UNKNOWN */
static void assign_regs_for_args(struct jit_reg_allocator *al , jit_op *op ) ;
/* END FUNCTION-DECL assign_regs_for_args LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_main_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:516 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_main_np(void) ;
/* END FUNCTION-DECL-EXTERN pthread_main_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:516 */

/* BEGIN VARIABLE-DECL-EXTERN optind LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:512 */
extern int optind ;
/* END VARIABLE-DECL-EXTERN optind LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:512 */

/* BEGIN FUNCTION-DECL-EXTERN strlcat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:162 */
extern size_t strlcat(char *__dst , char const   *__source , size_t __size ) ;
/* END FUNCTION-DECL-EXTERN strlcat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:162 */

/* BEGIN FUNCTION-DECL-EXTERN shm_open LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:236 */
extern int shm_open(char const   * , int   , ...) ;
/* END FUNCTION-DECL-EXTERN shm_open LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:236 */

/* BEGIN FUNCTION-DECL-EXTERN strncmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:84 */
extern int strncmp(char const   *__s1 , char const   *__s2 , size_t __n ) ;
/* END FUNCTION-DECL-EXTERN strncmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:84 */

/* BEGIN FUNCTION-DECL-EXTERN sync LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:598 */
extern void sync(void) ;
/* END FUNCTION-DECL-EXTERN sync LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:598 */

/* BEGIN FUNCTION-DECL __builtin_ia32_addps LOC=BUILTIN */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_addps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* END FUNCTION-DECL __builtin_ia32_addps LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN ecvt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:201 */
extern char *ecvt(double  , int  , int * __restrict   , int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN ecvt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:201 */

/* BEGIN FUNCTION-DECL get_related_op LOC=UNKNOWN */
static jit_op *get_related_op(jit_op *op , int result_reg ) ;
/* END FUNCTION-DECL get_related_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN realloc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:43 */
extern void *( __attribute__((__warn_unused_result__)) realloc)(void *ptr , size_t size )  __attribute__((__alloc_size__(2))) ;
/* END FUNCTION-DECL-EXTERN realloc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:43 */

/* BEGIN FUNCTION-DECL jit_prepare_arguments LOC=./jitter-amd64.c:4350 */
__inline static void jit_prepare_arguments(struct jit *jit ) ;
/* END FUNCTION-DECL jit_prepare_arguments LOC=./jitter-amd64.c:4350 */

/* BEGIN VARIABLE-DECL-EXTERN opterr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:512 */
extern int opterr ;
/* END VARIABLE-DECL-EXTERN opterr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:512 */

/* BEGIN FUNCTION-DECL jit_proc_value LOC=UNKNOWN */
__inline static jit_value jit_proc_value(void (*f)(void) ) ;
/* END FUNCTION-DECL jit_proc_value LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL associate_register LOC=UNKNOWN */
static void associate_register(struct jit_reg_allocator *al , jit_op *op , int i ) ;
/* END FUNCTION-DECL associate_register LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_trace_callback LOC=UNKNOWN */
void jit_trace_callback(struct jit *jit , jit_op *op , int verbosity , int trace ) ;
/* END FUNCTION-DECL jit_trace_callback LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN endusershell LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:646 */
extern void endusershell(void) ;
/* END FUNCTION-DECL-EXTERN endusershell LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:646 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_setguardsize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:264 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setguardsize(pthread_attr_t * ,
                                                                                                                                     size_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_setguardsize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:264 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_setconcurrency LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:487 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_setconcurrency(int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_setconcurrency LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:487 */

/* BEGIN STRUCT __anonstruct_w_S_422959016 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */
struct __anonstruct_w_S_422959016 {
   unsigned int w_Stopval : 8 ;
   unsigned int w_Stopsig : 8 ;
   unsigned int w_Filler : 16 ;
};
/* END STRUCT __anonstruct_w_S_422959016 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */

/* BEGIN STRUCT __darwin_x86_float_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:714 */
struct __darwin_x86_float_state64 {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   struct __darwin_xmm_reg __fpu_xmm8 ;
   struct __darwin_xmm_reg __fpu_xmm9 ;
   struct __darwin_xmm_reg __fpu_xmm10 ;
   struct __darwin_xmm_reg __fpu_xmm11 ;
   struct __darwin_xmm_reg __fpu_xmm12 ;
   struct __darwin_xmm_reg __fpu_xmm13 ;
   struct __darwin_xmm_reg __fpu_xmm14 ;
   struct __darwin_xmm_reg __fpu_xmm15 ;
   char __fpu_rsrv4[96] ;
   int __fpu_reserved1 ;
};
/* END STRUCT __darwin_x86_float_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:714 */

/* BEGIN FUNCTION-DECL node_min LOC=UNKNOWN */
__inline static jit_tree_key node_min(jit_tree *x ) ;
/* END FUNCTION-DECL node_min LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL print_combined_op LOC=UNKNOWN */
static jit_op *print_combined_op(FILE *f , struct jit *jit , struct jit_op *op , jit_tree *labels ) ;
/* END FUNCTION-DECL print_combined_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pread LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:573 */
extern ssize_t pread(int __fd , void *__buf , size_t __nbyte , off_t __offset )  __asm__("_pread")  ;
/* END FUNCTION-DECL-EXTERN pread LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:573 */

/* BEGIN UNION __anonunion_location_1021650749 LOC=./jitter-amd64.c:584 */
union __anonunion_location_1021650749 {
   int reg ;
   int stack_pos ;
};
/* END UNION __anonunion_location_1021650749 LOC=./jitter-amd64.c:584 */

/* BEGIN FUNCTION-DECL __builtin_strspn LOC=BUILTIN */
/* compiler builtin: 
   unsigned long __builtin_strspn(char const   * , char const   * ) ;  */
/* END FUNCTION-DECL __builtin_strspn LOC=BUILTIN */

/* BEGIN FUNCTION-DECL rmap_get LOC=UNKNOWN */
static jit_hw_reg *rmap_get(jit_rmap *rmap , jit_value reg ) ;
/* END FUNCTION-DECL rmap_get LOC=UNKNOWN */

/* BEGIN TYPEDEF ucontext_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ucontext.h:56 */
typedef struct __darwin_ucontext ucontext_t;
/* END TYPEDEF ucontext_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ucontext.h:56 */

/* BEGIN FUNCTION-DECL-EXTERN futimes LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:191 */
extern int futimes(int  , struct timeval  const  * ) ;
/* END FUNCTION-DECL-EXTERN futimes LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:191 */

/* BEGIN FUNCTION-DECL-EXTERN getprogname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:297 */
extern char const   *getprogname(void) ;
/* END FUNCTION-DECL-EXTERN getprogname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:297 */

/* BEGIN VARIABLE-DECL-EXTERN tzname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:98 */
extern char *tzname[] ;
/* END VARIABLE-DECL-EXTERN tzname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:98 */

/* BEGIN FUNCTION-DECL assign_regs LOC=UNKNOWN */
static void assign_regs(struct jit *jit , struct jit_op *op ) ;
/* END FUNCTION-DECL assign_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN execvp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:446 */
extern int execvp(char const   *__file , char * const  *__argv )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN execvp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:446 */

/* BEGIN FUNCTION-DECL-EXTERN islower LOC=UNKNOWN */
__inline extern int islower(int _c ) ;
/* END FUNCTION-DECL-EXTERN islower LOC=UNKNOWN */

/* BEGIN STRUCT rusage_info_v0 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:195 */
struct rusage_info_v0 {
   uint8_t ri_uuid[16] ;
   uint64_t ri_user_time ;
   uint64_t ri_system_time ;
   uint64_t ri_pkg_idle_wkups ;
   uint64_t ri_interrupt_wkups ;
   uint64_t ri_pageins ;
   uint64_t ri_wired_size ;
   uint64_t ri_resident_size ;
   uint64_t ri_phys_footprint ;
   uint64_t ri_proc_start_abstime ;
   uint64_t ri_proc_exit_abstime ;
};
/* END STRUCT rusage_info_v0 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:195 */

/* BEGIN FUNCTION-DECL __builtin_sin LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_sin(double  ) ;  */
/* END FUNCTION-DECL __builtin_sin LOC=BUILTIN */

/* BEGIN FUNCTION-DECL node_insert LOC=UNKNOWN */
static jit_tree *node_insert(jit_tree *h , jit_tree_key key , jit_tree_value value ,
                             int *found ) ;
/* END FUNCTION-DECL node_insert LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_getguardsize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:231 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getguardsize(pthread_attr_t const   * __restrict   ,
                                                                                                                                     size_t * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_getguardsize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:231 */

/* BEGIN STRUCT proc_rlimit_control_wakeupmon LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:400 */
struct proc_rlimit_control_wakeupmon {
   uint32_t wm_flags ;
   int32_t wm_rate ;
};
/* END STRUCT proc_rlimit_control_wakeupmon LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:400 */

/* BEGIN FUNCTION-DECL-EXTERN atexit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:133 */
extern int atexit(void (* _Nonnull  )(void) ) ;
/* END FUNCTION-DECL-EXTERN atexit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:133 */

/* BEGIN TYPEDEF u_quad_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:95 */
typedef u_int64_t u_quad_t;
/* END TYPEDEF u_quad_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:95 */

/* BEGIN FUNCTION-DECL join_muli_addi LOC=UNKNOWN */
static int join_muli_addi(jit_op *op , jit_op *nextop ) ;
/* END FUNCTION-DECL join_muli_addi LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN strncasecmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:79 */
extern int strncasecmp(char const   * , char const   * , size_t  ) ;
/* END FUNCTION-DECL-EXTERN strncasecmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:79 */

/* BEGIN FUNCTION-DECL emit_push_callee_saved_regs LOC=UNKNOWN */
static int emit_push_callee_saved_regs(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_push_callee_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN timespec_get LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:198 */
extern int __attribute__((__availability__(watchos,introduced=6.0), __availability__(tvos,introduced=13.0),
__availability__(ios,introduced=13.0), __availability__(macosx,introduced=10.15)))  timespec_get(struct timespec *ts ,
                                                                                                 int base ) ;
/* END FUNCTION-DECL-EXTERN timespec_get LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:198 */

/* BEGIN STRUCT __darwin_sigaltstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigaltstack.h:42 */
struct __darwin_sigaltstack {
   void *ss_sp ;
   __darwin_size_t ss_size ;
   int ss_flags ;
};
/* END STRUCT __darwin_sigaltstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigaltstack.h:42 */

/* BEGIN STRUCT __darwin_ucontext LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ucontext.h:42 */
struct __darwin_ucontext {
   int uc_onstack ;
   __darwin_sigset_t uc_sigmask ;
   struct __darwin_sigaltstack uc_stack ;
   struct __darwin_ucontext *uc_link ;
   __darwin_size_t uc_mcsize ;
   struct __darwin_mcontext64 *uc_mcontext ;
};
/* END STRUCT __darwin_ucontext LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ucontext.h:42 */

/* BEGIN FUNCTION-DECL-EXTERN iruserok LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:710 */
extern int __attribute__((__deprecated__))  iruserok(unsigned long  , int  , char const   * ,
                                                     char const   * ) ;
/* END FUNCTION-DECL-EXTERN iruserok LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:710 */

/* BEGIN FUNCTION-DECL emit_set_fparg LOC=UNKNOWN */
__inline static void emit_set_fparg(struct jit *jit , struct jit_out_arg *arg ) ;
/* END FUNCTION-DECL emit_set_fparg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN ttyname_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:489 */
extern int ttyname_r(int  , char * , size_t  )  __asm__("_ttyname_r")  ;
/* END FUNCTION-DECL-EXTERN ttyname_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:489 */

/* BEGIN FUNCTION-DECL jit_flw_analysis LOC=UNKNOWN */
__inline static void jit_flw_analysis(struct jit *jit ) ;
/* END FUNCTION-DECL jit_flw_analysis LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN setwgroups_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:729 */
extern int setwgroups_np(int  , unsigned char * const   ) ;
/* END FUNCTION-DECL-EXTERN setwgroups_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:729 */

/* BEGIN FUNCTION-DECL-EXTERN strnlen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:133 */
extern size_t strnlen(char const   *__s1 , size_t __n )  __attribute__((__availability__(macosx,introduced=10.7))) ;
/* END FUNCTION-DECL-EXTERN strnlen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:133 */

/* BEGIN STRUCT __darwin_x86_debug_state32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:595 */
struct __darwin_x86_debug_state32 {
   unsigned int __dr0 ;
   unsigned int __dr1 ;
   unsigned int __dr2 ;
   unsigned int __dr3 ;
   unsigned int __dr4 ;
   unsigned int __dr5 ;
   unsigned int __dr6 ;
   unsigned int __dr7 ;
};
/* END STRUCT __darwin_x86_debug_state32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:595 */

/* BEGIN TYPEDEF swblk_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:126 */
typedef int32_t swblk_t;
/* END TYPEDEF swblk_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:126 */

/* BEGIN FUNCTION-DECL __builtin_strncat LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin_strncat(char * , char const   * , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_strncat LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN bcmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:70 */
extern int bcmp(void const   * , void const   * , size_t  ) ;
/* END FUNCTION-DECL-EXTERN bcmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:70 */

/* BEGIN TYPEDEF u_int32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int32_t.h:30 */
typedef unsigned int u_int32_t;
/* END TYPEDEF u_int32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_int32_t.h:30 */

/* BEGIN FUNCTION-DECL __builtin_ia32_maxps LOC=BUILTIN */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_maxps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* END FUNCTION-DECL __builtin_ia32_maxps LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN fopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:153 */
extern FILE *fopen(char const   * __restrict  __filename , char const   * __restrict  __mode )  __asm__("_fopen")  ;
/* END FUNCTION-DECL-EXTERN fopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:153 */

/* BEGIN FUNCTION-DECL emit_sse_fstx_op LOC=UNKNOWN */
static void emit_sse_fstx_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                             jit_value a3 ) ;
/* END FUNCTION-DECL emit_sse_fstx_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN setsgroups_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:727 */
extern int setsgroups_np(int  , unsigned char * const   ) ;
/* END FUNCTION-DECL-EXTERN setsgroups_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:727 */

/* BEGIN FUNCTION-DECL-EXTERN truncate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:599 */
extern int truncate(char const   * , off_t  ) ;
/* END FUNCTION-DECL-EXTERN truncate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:599 */

/* BEGIN FUNCTION-DECL check_op_without_effect LOC=UNKNOWN */
static int check_op_without_effect(jit_op *op , char *msg_buf ) ;
/* END FUNCTION-DECL check_op_without_effect LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN mknod LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:668 */
extern int mknod(char const   * , mode_t  , dev_t  ) ;
/* END FUNCTION-DECL-EXTERN mknod LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:668 */

/* BEGIN FUNCTION-DECL-EXTERN mkdtemp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:667 */
extern char *mkdtemp(char * ) ;
/* END FUNCTION-DECL-EXTERN mkdtemp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:667 */

/* BEGIN FUNCTION-DECL __builtin_fabs LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_fabs(double  ) ;  */
/* END FUNCTION-DECL __builtin_fabs LOC=BUILTIN */

/* BEGIN VARIABLE-DECL-EXTERN timezone LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:103 */
extern long timezone  __asm__("_timezone")  ;
/* END VARIABLE-DECL-EXTERN timezone LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:103 */

/* BEGIN FUNCTION-DECL emit_trace_op LOC=UNKNOWN */
static void emit_trace_op(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_trace_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin___memmove_chk LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin___memmove_chk(void * , void const   * , unsigned long  , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin___memmove_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN mlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:221 */
extern int mlock(void const   * , size_t  ) ;
/* END FUNCTION-DECL-EXTERN mlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:221 */

/* BEGIN STRUCT rusage_info_v4 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:282 */
struct rusage_info_v4 {
   uint8_t ri_uuid[16] ;
   uint64_t ri_user_time ;
   uint64_t ri_system_time ;
   uint64_t ri_pkg_idle_wkups ;
   uint64_t ri_interrupt_wkups ;
   uint64_t ri_pageins ;
   uint64_t ri_wired_size ;
   uint64_t ri_resident_size ;
   uint64_t ri_phys_footprint ;
   uint64_t ri_proc_start_abstime ;
   uint64_t ri_proc_exit_abstime ;
   uint64_t ri_child_user_time ;
   uint64_t ri_child_system_time ;
   uint64_t ri_child_pkg_idle_wkups ;
   uint64_t ri_child_interrupt_wkups ;
   uint64_t ri_child_pageins ;
   uint64_t ri_child_elapsed_abstime ;
   uint64_t ri_diskio_bytesread ;
   uint64_t ri_diskio_byteswritten ;
   uint64_t ri_cpu_time_qos_default ;
   uint64_t ri_cpu_time_qos_maintenance ;
   uint64_t ri_cpu_time_qos_background ;
   uint64_t ri_cpu_time_qos_utility ;
   uint64_t ri_cpu_time_qos_legacy ;
   uint64_t ri_cpu_time_qos_user_initiated ;
   uint64_t ri_cpu_time_qos_user_interactive ;
   uint64_t ri_billed_system_time ;
   uint64_t ri_serviced_system_time ;
   uint64_t ri_logical_writes ;
   uint64_t ri_lifetime_max_phys_footprint ;
   uint64_t ri_instructions ;
   uint64_t ri_cycles ;
   uint64_t ri_billed_energy ;
   uint64_t ri_serviced_energy ;
   uint64_t ri_interval_max_phys_footprint ;
   uint64_t ri_runnable_time ;
};
/* END STRUCT rusage_info_v4 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:282 */

/* BEGIN FUNCTION-DECL jit_op_delete LOC=UNKNOWN */
__inline static void jit_op_delete(jit_op *op ) ;
/* END FUNCTION-DECL jit_op_delete LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL emit_get_arg_from_stack LOC=UNKNOWN */
static void emit_get_arg_from_stack(struct jit *jit , int type , int size , int dreg ,
                                    int stack_reg , int stack_pos ) ;
/* END FUNCTION-DECL emit_get_arg_from_stack LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN fseek LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:162 */
extern int fseek(FILE * , long  , int  ) ;
/* END FUNCTION-DECL-EXTERN fseek LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:162 */

/* BEGIN FUNCTION-DECL-EXTERN atof LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:134 */
extern double atof(char const   * ) ;
/* END FUNCTION-DECL-EXTERN atof LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:134 */

/* BEGIN FUNCTION-DECL print_full_op_name LOC=UNKNOWN */
void print_full_op_name(struct output_buf *linebuf , jit_op *op ) ;
/* END FUNCTION-DECL print_full_op_name LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_tanh LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_tanh(double  ) ;  */
/* END FUNCTION-DECL __builtin_tanh LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN setsid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:477 */
extern pid_t setsid(void) ;
/* END FUNCTION-DECL-EXTERN setsid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:477 */

/* BEGIN FUNCTION-DECL __builtin_ffsl LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_ffsl(unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_ffsl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN mergesort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:316 */
extern int mergesort(void *__base , size_t __nel , size_t __width , int (* _Nonnull  __compar)(void const   * ,
                                                                                               void const   * ) ) ;
/* END FUNCTION-DECL-EXTERN mergesort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:316 */

/* BEGIN FUNCTION-DECL-EXTERN gmtime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:113 */
extern struct tm *gmtime(time_t const   * ) ;
/* END FUNCTION-DECL-EXTERN gmtime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:113 */

/* BEGIN FUNCTION-DECL emit_sse_sub_op LOC=UNKNOWN */
static void emit_sse_sub_op(struct jit *jit , jit_op *op , long a1 , long a2 , long a3 ) ;
/* END FUNCTION-DECL emit_sse_sub_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL _cipher$_xtea_decipherBlock LOC=UNKNOWN */
void _cipher$_xtea_decipherBlock(unsigned int num_rounds , unsigned int *v , unsigned int *key ) ;
/* END FUNCTION-DECL _cipher$_xtea_decipherBlock LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_fmodl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_fmodl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_fmodl LOC=BUILTIN */

/* BEGIN TYPEDEF X86_CC LOC=./jitter-amd64.c:1043 */
typedef enum __anonenum_X86_CC_467256102 X86_CC;
/* END TYPEDEF X86_CC LOC=./jitter-amd64.c:1043 */

/* BEGIN FUNCTION-DECL __builtin_sinl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_sinl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_sinl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN isalnum LOC=UNKNOWN */
__inline extern int isalnum(int _c ) ;
/* END FUNCTION-DECL-EXTERN isalnum LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN strptime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:117 */
extern char *strptime(char const   * __restrict   , char const   * __restrict   ,
                      struct tm * __restrict   )  __asm__("_strptime")  ;
/* END FUNCTION-DECL-EXTERN strptime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:117 */

/* BEGIN FUNCTION-DECL-EXTERN getmode LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:660 */
extern mode_t getmode(void const   * , mode_t  ) ;
/* END FUNCTION-DECL-EXTERN getmode LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:660 */

/* BEGIN FUNCTION-DECL-EXTERN getchar_unlocked LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:290 */
extern int getchar_unlocked(void) ;
/* END FUNCTION-DECL-EXTERN getchar_unlocked LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:290 */

/* BEGIN FUNCTION-DECL-EXTERN setlinebuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:376 */
extern int setlinebuf(FILE * ) ;
/* END FUNCTION-DECL-EXTERN setlinebuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:376 */

/* BEGIN TYPEDEF int_fast64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:43 */
typedef int64_t int_fast64_t;
/* END TYPEDEF int_fast64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:43 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_settype LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:430 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_settype(pthread_mutexattr_t * ,
                                                                                                                                     int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_settype LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:430 */

/* BEGIN FUNCTION-DECL __builtin_ia32_mulps LOC=BUILTIN */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_mulps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* END FUNCTION-DECL __builtin_ia32_mulps LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN mkdtempat_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:686 */
extern char *mkdtempat_np(int dfd , char *path )  __attribute__((__availability__(watchos,introduced=4.0),
__availability__(tvos,introduced=11.0), __availability__(ios,introduced=11.0), __availability__(macosx,introduced=10.13))) ;
/* END FUNCTION-DECL-EXTERN mkdtempat_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:686 */

/* BEGIN FUNCTION-DECL-EXTERN vasprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:377 */
extern int ( /* format attribute */  vasprintf)(char ** __restrict   , char const   * __restrict   ,
                                                va_list  ) ;
/* END FUNCTION-DECL-EXTERN vasprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:377 */

/* BEGIN UNION __sigaction_u LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:269 */
union __sigaction_u {
   void (*__sa_handler)(int  ) ;
   void (*__sa_sigaction)(int  , struct __siginfo * , void * ) ;
};
/* END UNION __sigaction_u LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:269 */

/* BEGIN TYPEDEF stack_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigaltstack.h:48 */
typedef struct __darwin_sigaltstack stack_t;
/* END TYPEDEF stack_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_sigaltstack.h:48 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_override_qos_class_end_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:291 */
extern int __attribute__((__availability__(ios,introduced=8.0), __availability__(macos,introduced=10.10)))  pthread_override_qos_class_end_np(pthread_override_t __override ) ;
/* END FUNCTION-DECL-EXTERN pthread_override_qos_class_end_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/qos.h:291 */

/* BEGIN STRUCT jit_arg_layout LOC=./jitter-amd64.c:1624 */
struct jit_arg_layout {
   struct jit *jit ;
   int arg_index ;
   int gp_index ;
   int fp_index ;
   int stack_index ;
   struct jit_arg_layout_location arguments[] ;
};
/* END STRUCT jit_arg_layout LOC=./jitter-amd64.c:1624 */

/* BEGIN FUNCTION-DECL __builtin_ceilf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_ceilf(float  ) ;  */
/* END FUNCTION-DECL __builtin_ceilf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_nansl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_nansl(char const   * ) ;  */
/* END FUNCTION-DECL __builtin_nansl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_parityl LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_parityl(unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_parityl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN timegm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:138 */
extern time_t timegm(struct tm * const   ) ;
/* END FUNCTION-DECL-EXTERN timegm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:138 */

/* BEGIN FUNCTION-DECL-EXTERN getc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:166 */
extern int getc(FILE * ) ;
/* END FUNCTION-DECL-EXTERN getc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:166 */

/* BEGIN FUNCTION-DECL jit_get_op_name LOC=UNKNOWN */
char *jit_get_op_name(struct jit_op *op ) ;
/* END FUNCTION-DECL jit_get_op_name LOC=UNKNOWN */

/* BEGIN TYPEDEF jit_unsigned_value LOC=./jitter-amd64.c:165 */
typedef unsigned long jit_unsigned_value;
/* END TYPEDEF jit_unsigned_value LOC=./jitter-amd64.c:165 */

/* BEGIN FUNCTION-DECL-EXTERN fdopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:210 */
extern FILE *fdopen(int  , char const   * )  __asm__("_fdopen")  ;
/* END FUNCTION-DECL-EXTERN fdopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:210 */

/* BEGIN FUNCTION-DECL emit_sse_fst_op LOC=UNKNOWN */
static void emit_sse_fst_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) ;
/* END FUNCTION-DECL emit_sse_fst_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_strlen LOC=BUILTIN */
/* compiler builtin: 
   unsigned long __builtin_strlen(char const   * ) ;  */
/* END FUNCTION-DECL __builtin_strlen LOC=BUILTIN */

/* BEGIN STRUCT sigaction LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:286 */
struct sigaction {
   union __sigaction_u __sigaction_u ;
   sigset_t sa_mask ;
   int sa_flags ;
};
/* END STRUCT sigaction LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:286 */

/* BEGIN FUNCTION-DECL-EXTERN lseek LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:465 */
extern off_t lseek(int  , off_t  , int  ) ;
/* END FUNCTION-DECL-EXTERN lseek LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:465 */

/* BEGIN FUNCTION-DECL-EXTERN ungetc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:189 */
extern int ungetc(int  , FILE * ) ;
/* END FUNCTION-DECL-EXTERN ungetc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:189 */

/* BEGIN FUNCTION-DECL-EXTERN strcpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:79 */
extern char *strcpy(char *__dst , char const   *__src ) ;
/* END FUNCTION-DECL-EXTERN strcpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:79 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:258 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_init(pthread_attr_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:258 */

/* BEGIN FUNCTION-DECL __builtin_sqrtf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_sqrtf(float  ) ;  */
/* END FUNCTION-DECL __builtin_sqrtf LOC=BUILTIN */

/* BEGIN VARIABLE-DEF jit_disasm_compilable LOC=UNKNOWN */
struct jit_disasm jit_disasm_compilable  ;
/* END VARIABLE-DEF jit_disasm_compilable LOC=UNKNOWN */

/* BEGIN STRUCT __darwin_opmask_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:259 */
struct __darwin_opmask_reg {
   char __opmask_reg[8] ;
};
/* END STRUCT __darwin_opmask_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:259 */

/* BEGIN FUNCTION-DECL emit_fretval_op LOC=UNKNOWN */
static void emit_fretval_op(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_fretval_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN fpathconf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:448 */
extern long fpathconf(int  , int  ) ;
/* END FUNCTION-DECL-EXTERN fpathconf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:448 */

/* BEGIN STRUCT itimerval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:91 */
struct itimerval {
   struct timeval it_interval ;
   struct timeval it_value ;
};
/* END STRUCT itimerval LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:91 */

/* BEGIN FUNCTION-DECL print_regs LOC=UNKNOWN */
static void print_regs(jit_tree_key reg , jit_tree_value v , void *thunk ) ;
/* END FUNCTION-DECL print_regs LOC=UNKNOWN */

/* BEGIN TYPEDEF uint_least16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:34 */
typedef uint16_t uint_least16_t;
/* END TYPEDEF uint_least16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:34 */

/* BEGIN FUNCTION-DECL-EXTERN getuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:462 */
extern uid_t getuid(void) ;
/* END FUNCTION-DECL-EXTERN getuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:462 */

/* BEGIN FUNCTION-DECL force_spill LOC=UNKNOWN */
static int force_spill(jit_op *op ) ;
/* END FUNCTION-DECL force_spill LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN __snprintf_chk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_stdio.h:52 */
extern int __snprintf_chk(char * __restrict   , size_t  , int  , size_t  , char const   * __restrict   
                          , ...) ;
/* END FUNCTION-DECL-EXTERN __snprintf_chk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_stdio.h:52 */

/* BEGIN ENUM jit_inp_type LOC=./jitter-amd64.c:224 */
enum jit_inp_type {
    JIT_SIGNED_NUM = 0,
    JIT_UNSIGNED_NUM = 1,
    JIT_FLOAT_NUM = 2,
    JIT_PTR = 3
} ;
/* END ENUM jit_inp_type LOC=./jitter-amd64.c:224 */

/* BEGIN FUNCTION-DECL is_cond_branch_op LOC=UNKNOWN */
static int is_cond_branch_op(jit_op *op ) ;
/* END FUNCTION-DECL is_cond_branch_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN fsync LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:605 */
extern int fsync(int  )  __asm__("_fsync")  ;
/* END FUNCTION-DECL-EXTERN fsync LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:605 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_threadid_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:505 */
extern int __attribute__((__availability__(ios,introduced=3.2), __availability__(macos,introduced=10.6)))  pthread_threadid_np(pthread_t __attribute__((__nullable__))   ,
                                                                                                                               __uint64_t * _Nullable   ) ;
/* END FUNCTION-DECL-EXTERN pthread_threadid_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:505 */

/* BEGIN FUNCTION-DECL __builtin_fmod LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_fmod(double  ) ;  */
/* END FUNCTION-DECL __builtin_fmod LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_create_suspended_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:539 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_create_suspended_np(pthread_t __attribute__((__nullable__))  * _Nonnull   ,
                                                                                                                                       pthread_attr_t const   * _Nullable   ,
                                                                                                                                       void * _Nullable  (* _Nonnull  )(void * _Nullable   ) ,
                                                                                                                                       void * _Nullable   ) ;
/* END FUNCTION-DECL-EXTERN pthread_create_suspended_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:539 */

/* BEGIN ENUM __anonenum_X86_CC_467256102 LOC=./jitter-amd64.c:1043 */
enum __anonenum_X86_CC_467256102 {
    X86_CC_EQ = 0,
    X86_CC_E = 0,
    X86_CC_Z = 0,
    X86_CC_NE = 1,
    X86_CC_NZ = 1,
    X86_CC_LT = 2,
    X86_CC_B = 2,
    X86_CC_C = 2,
    X86_CC_NAE = 2,
    X86_CC_LE = 3,
    X86_CC_BE = 3,
    X86_CC_NA = 3,
    X86_CC_GT = 4,
    X86_CC_A = 4,
    X86_CC_NBE = 4,
    X86_CC_GE = 5,
    X86_CC_AE = 5,
    X86_CC_NB = 5,
    X86_CC_NC = 5,
    X86_CC_LZ = 6,
    X86_CC_S = 6,
    X86_CC_GEZ = 7,
    X86_CC_NS = 7,
    X86_CC_P = 8,
    X86_CC_PE = 8,
    X86_CC_NP = 9,
    X86_CC_PO = 9,
    X86_CC_O = 10,
    X86_CC_NO = 11,
    X86_NCC = 12
} ;
/* END ENUM __anonenum_X86_CC_467256102 LOC=./jitter-amd64.c:1043 */

/* BEGIN TYPEDEF X86_Reg_No LOC=./jitter-amd64.c:973 */
typedef enum jit_x86_gp_regs X86_Reg_No;
/* END TYPEDEF X86_Reg_No LOC=./jitter-amd64.c:973 */

/* BEGIN FUNCTION-DECL __builtin_return_address LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_return_address(unsigned int  ) ;  */
/* END FUNCTION-DECL __builtin_return_address LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN gmtime_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:127 */
extern struct tm *gmtime_r(time_t const   * __restrict   , struct tm * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN gmtime_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:127 */

/* BEGIN FUNCTION-DECL-EXTERN strtok LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:90 */
extern char *strtok(char *__str , char const   *__sep ) ;
/* END FUNCTION-DECL-EXTERN strtok LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:90 */

/* BEGIN FUNCTION-DECL jit_set_size LOC=UNKNOWN */
__inline static int jit_set_size(jit_set *s ) ;
/* END FUNCTION-DECL jit_set_size LOC=UNKNOWN */

/* BEGIN TYPEDEF user_ssize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:99 */
typedef int64_t user_ssize_t;
/* END TYPEDEF user_ssize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:99 */

/* BEGIN FUNCTION-DECL __builtin_tanl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_tanl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_tanl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_cond_wait LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:313 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_wait(pthread_cond_t * __restrict   ,
                                                                                                                             pthread_mutex_t * __restrict   )  __asm__("_pthread_cond_wait")  ;
/* END FUNCTION-DECL-EXTERN pthread_cond_wait LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:313 */

/* BEGIN FUNCTION-DECL-EXTERN getc_unlocked LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:289 */
extern int getc_unlocked(FILE * ) ;
/* END FUNCTION-DECL-EXTERN getc_unlocked LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:289 */

/* BEGIN FUNCTION-DECL append_msg LOC=UNKNOWN */
static void append_msg(char *buf , char *format  , ...) ;
/* END FUNCTION-DECL append_msg LOC=UNKNOWN */

/* BEGIN TYPEDEF X86_ALU_Opcode LOC=./jitter-amd64.c:1000 */
typedef enum __anonenum_X86_ALU_Opcode_144447433 X86_ALU_Opcode;
/* END TYPEDEF X86_ALU_Opcode LOC=./jitter-amd64.c:1000 */

/* BEGIN FUNCTION-DECL-EXTERN fls LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:87 */
extern int fls(int  )  __attribute__((__availability__(macosx,introduced=10.5))) ;
/* END FUNCTION-DECL-EXTERN fls LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:87 */

/* BEGIN FUNCTION-DECL jit_init_arg_params LOC=UNKNOWN */
void jit_init_arg_params(struct jit *jit , struct jit_func_info *info , int p , int *phys_reg ) ;
/* END FUNCTION-DECL jit_init_arg_params LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL join_2ops LOC=UNKNOWN */
static int join_2ops(jit_op *op , int opcode1 , int opcode2 , int (*joinfn)(jit_op * ,
                                                                            jit_op * ) ) ;
/* END FUNCTION-DECL join_2ops LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN remove LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:174 */
extern int remove(char const   * ) ;
/* END FUNCTION-DECL-EXTERN remove LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:174 */

/* BEGIN FUNCTION-DECL-EXTERN gcvt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:204 */
extern char *gcvt(double  , int  , char * ) ;
/* END FUNCTION-DECL-EXTERN gcvt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:204 */

/* BEGIN FUNCTION-DECL __builtin_expl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_expl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_expl LOC=BUILTIN */

/* BEGIN TYPEDEF __darwin_clock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:117 */
typedef unsigned long __darwin_clock_t;
/* END TYPEDEF __darwin_clock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:117 */

/* BEGIN TYPEDEF clock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_clock_t.h:31 */
typedef __darwin_clock_t clock_t;
/* END TYPEDEF clock_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_clock_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN clock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:109 */
extern clock_t clock(void)  __asm__("_clock")  ;
/* END FUNCTION-DECL-EXTERN clock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:109 */

/* BEGIN TYPEDEF jit_reg LOC=./jitter-amd64.c:210 */
typedef jit_value jit_reg;
/* END TYPEDEF jit_reg LOC=./jitter-amd64.c:210 */

/* BEGIN FUNCTION-DECL-EXTERN sradixsort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:345 */
extern int sradixsort(unsigned char const   **__base , int __nel , unsigned char const   *__table ,
                      unsigned int __endbyte ) ;
/* END FUNCTION-DECL-EXTERN sradixsort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:345 */

/* BEGIN FUNCTION-DECL __builtin_constant_p LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_constant_p(int  ) ;  */
/* END FUNCTION-DECL __builtin_constant_p LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_get_arg LOC=UNKNOWN */
static void emit_get_arg(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_get_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL emit_lreg LOC=UNKNOWN */
static void emit_lreg(struct jit *jit , int hreg_id , jit_value vreg ) ;
/* END FUNCTION-DECL emit_lreg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN isxdigit LOC=UNKNOWN */
__inline extern int isxdigit(int _c ) ;
/* END FUNCTION-DECL-EXTERN isxdigit LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN munlockall LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:219 */
extern int munlockall(void) ;
/* END FUNCTION-DECL-EXTERN munlockall LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:219 */

/* BEGIN FUNCTION-DECL __builtin_nans LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_nans(char const   * ) ;  */
/* END FUNCTION-DECL __builtin_nans LOC=BUILTIN */

/* BEGIN TYPEDEF errno_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_errno_t.h:30 */
typedef int errno_t;
/* END TYPEDEF errno_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_errno_t.h:30 */

/* BEGIN VARIABLE-DEF x0 LOC=UNKNOWN */
static double x0  ;
/* END VARIABLE-DEF x0 LOC=UNKNOWN */

/* BEGIN TYPEDEF jit_opcode LOC=./jitter-amd64.c:1 */
typedef enum JIT_OPCODE jit_opcode;
/* END TYPEDEF jit_opcode LOC=./jitter-amd64.c:1 */

/* BEGIN FUNCTION-DECL-EXTERN tzsetwall LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:135 */
extern void tzsetwall(void) ;
/* END FUNCTION-DECL-EXTERN tzsetwall LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:135 */

/* BEGIN FUNCTION-DECL-EXTERN mblen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:156 */
extern int mblen(char const   *__s , size_t __n ) ;
/* END FUNCTION-DECL-EXTERN mblen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:156 */

/* BEGIN STRUCT jit_inp_arg LOC=./jitter-amd64.c:584 */
struct jit_inp_arg {
   enum jit_inp_type type ;
   int size ;
   char passed_by_reg ;
   union __anonunion_location_1021650749 location ;
   int spill_pos ;
   int gp_pos ;
   int fp_pos ;
   int overflow ;
   int phys_reg ;
};
/* END STRUCT jit_inp_arg LOC=./jitter-amd64.c:584 */

/* BEGIN FUNCTION-DECL-EXTERN setvbuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:179 */
extern int setvbuf(FILE * __restrict   , char * __restrict   , int  , size_t  ) ;
/* END FUNCTION-DECL-EXTERN setvbuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:179 */

/* BEGIN FUNCTION-DECL-EXTERN jit_reg_allocator_get_hwreg_name LOC=./jitter-amd64.c:667 */
extern char *jit_reg_allocator_get_hwreg_name(struct jit_reg_allocator *al , int reg ) ;
/* END FUNCTION-DECL-EXTERN jit_reg_allocator_get_hwreg_name LOC=./jitter-amd64.c:667 */

/* BEGIN FUNCTION-DECL __builtin_clzl LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_clzl(unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_clzl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_getschedparam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:354 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_getschedparam(pthread_t  ,
                                                                                                                                 int * _Nullable __restrict   ,
                                                                                                                                 struct sched_param * _Nullable __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_getschedparam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:354 */

/* BEGIN FUNCTION-DECL __builtin_ceill LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_ceill(long double  ) ;  */
/* END FUNCTION-DECL __builtin_ceill LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_dump_ops_combined LOC=UNKNOWN */
static void jit_dump_ops_combined(struct jit *jit , jit_tree *labels ) ;
/* END FUNCTION-DECL jit_dump_ops_combined LOC=UNKNOWN */

/* BEGIN STRUCT __x86_pagein_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:622 */
struct __x86_pagein_state {
   int __pagein_error ;
};
/* END STRUCT __x86_pagein_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:622 */

/* BEGIN TYPEDEF blkcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_blkcnt_t.h:31 */
typedef __darwin_blkcnt_t blkcnt_t;
/* END TYPEDEF blkcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_blkcnt_t.h:31 */

/* BEGIN FUNCTION-DECL emit_sse_neg_op LOC=UNKNOWN */
static void emit_sse_neg_op(struct jit *jit , jit_op *op , long a1 , long a2 ) ;
/* END FUNCTION-DECL emit_sse_neg_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN sleep LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:480 */
extern unsigned int sleep(unsigned int  )  __asm__("_sleep")  ;
/* END FUNCTION-DECL-EXTERN sleep LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:480 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_setschedpolicy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:274 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setschedpolicy(pthread_attr_t * ,
                                                                                                                                       int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_setschedpolicy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:274 */

/* BEGIN STRUCT __darwin_x86_thread_full_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:691 */
struct __darwin_x86_thread_full_state64 {
   struct __darwin_x86_thread_state64 __ss64 ;
   __uint64_t __ds ;
   __uint64_t __es ;
   __uint64_t __ss ;
   __uint64_t __gsbase ;
};
/* END STRUCT __darwin_x86_thread_full_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:691 */

/* BEGIN STRUCT __darwin_mcontext_avx64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:121 */
struct __darwin_mcontext_avx64_full {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_full_state64 __ss ;
   struct __darwin_x86_avx_state64 __fs ;
};
/* END STRUCT __darwin_mcontext_avx64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:121 */

/* BEGIN FUNCTION-DECL stack_reg_pos LOC=UNKNOWN */
__inline static int stack_reg_pos(struct jit *jit , int r ) ;
/* END FUNCTION-DECL stack_reg_pos LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL assign_jmp LOC=UNKNOWN */
static int assign_jmp(jit_op *op , struct jit_reg_allocator *al ) ;
/* END FUNCTION-DECL assign_jmp LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL emit_set_arg LOC=UNKNOWN */
__inline static void emit_set_arg(struct jit *jit , struct jit_out_arg *arg ) ;
/* END FUNCTION-DECL emit_set_arg LOC=UNKNOWN */

/* BEGIN TYPEDEF sig_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:331 */
typedef void (*sig_t)(int  );
/* END TYPEDEF sig_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:331 */

/* BEGIN FUNCTION-DECL __builtin___strcat_chk LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin___strcat_chk(char * , char const   * , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin___strcat_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN rpmatch LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:343 */
extern int rpmatch(char const   * )  __attribute__((__availability__(watchos,introduced=6.0),
__availability__(tvos,introduced=13.0), __availability__(ios,introduced=13.0), __availability__(macos,introduced=10.15))) ;
/* END FUNCTION-DECL-EXTERN rpmatch LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:343 */

/* BEGIN FUNCTION-DECL-EXTERN issetugid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:666 */
extern int issetugid(void) ;
/* END FUNCTION-DECL-EXTERN issetugid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:666 */

/* BEGIN FUNCTION-DECL jit_set_equal LOC=UNKNOWN */
__inline static int jit_set_equal(jit_set *s1 , jit_set *s2 ) ;
/* END FUNCTION-DECL jit_set_equal LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_correct_float_imms LOC=UNKNOWN */
__inline static void jit_correct_float_imms(struct jit *jit ) ;
/* END FUNCTION-DECL jit_correct_float_imms LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN sysconf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:483 */
extern long sysconf(int  ) ;
/* END FUNCTION-DECL-EXTERN sysconf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:483 */

/* BEGIN FUNCTION-DECL-EXTERN exchangedata LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:753 */
extern int exchangedata(char const   * , char const   * , unsigned int  )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN exchangedata LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:753 */

/* BEGIN FUNCTION-DECL rotate_left LOC=UNKNOWN */
__inline static jit_tree *rotate_left(jit_tree *h ) ;
/* END FUNCTION-DECL rotate_left LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN setdomainname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:714 */
extern int setdomainname(char const   * , int  ) ;
/* END FUNCTION-DECL-EXTERN setdomainname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:714 */

/* BEGIN FUNCTION-DECL-EXTERN calloc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:41 */
extern void *( __attribute__((__warn_unused_result__)) calloc)(size_t __count , size_t __size )  __attribute__((__alloc_size__(1,2))) ;
/* END FUNCTION-DECL-EXTERN calloc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:41 */

/* BEGIN FUNCTION-DECL jit_flw_initialize LOC=UNKNOWN */
__inline static void jit_flw_initialize(struct jit *jit ) ;
/* END FUNCTION-DECL jit_flw_initialize LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN isupper LOC=UNKNOWN */
__inline extern int isupper(int _c ) ;
/* END FUNCTION-DECL-EXTERN isupper LOC=UNKNOWN */

/* BEGIN VARIABLE-DEF _global_envp LOC=UNKNOWN */
char **_global_envp  ;
/* END VARIABLE-DEF _global_envp LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_reg_allocator_create LOC=UNKNOWN */
struct jit_reg_allocator *jit_reg_allocator_create(void) ;
/* END FUNCTION-DECL jit_reg_allocator_create LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL sse_alu_sd_reg_safeimm LOC=UNKNOWN */
static void sse_alu_sd_reg_safeimm(struct jit *jit , jit_op *op , int op_id , int reg ,
                                   double *imm ) ;
/* END FUNCTION-DECL sse_alu_sd_reg_safeimm LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN arc4random_stir LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:271 */
extern void arc4random_stir(void) ;
/* END FUNCTION-DECL-EXTERN arc4random_stir LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:271 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:418 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_init(pthread_mutexattr_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:418 */

/* BEGIN FUNCTION-DECL-EXTERN unlink LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:494 */
extern int unlink(char const   * ) ;
/* END FUNCTION-DECL-EXTERN unlink LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:494 */

/* BEGIN FUNCTION-DECL-EXTERN vfprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:190 */
extern int ( /* format attribute */  vfprintf)(FILE * __restrict   , char const   * __restrict   ,
                                               va_list  ) ;
/* END FUNCTION-DECL-EXTERN vfprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:190 */

/* BEGIN FUNCTION-DECL-EXTERN valloc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:45 */
extern void *valloc(size_t  )  __attribute__((__alloc_size__(1))) ;
/* END FUNCTION-DECL-EXTERN valloc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:45 */

/* BEGIN FUNCTION-DECL-EXTERN setpriority LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:451 */
extern int setpriority(int  , id_t  , int  ) ;
/* END FUNCTION-DECL-EXTERN setpriority LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:451 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_getinheritsched LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:234 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getinheritsched(pthread_attr_t const   * __restrict   ,
                                                                                                                                        int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_getinheritsched LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:234 */

/* BEGIN ENUM __anonenum_X86_SSE_CmpCode_848838535 LOC=./jitter-amd64.c:1291 */
enum __anonenum_X86_SSE_CmpCode_848838535 {
    X86_SSE_CMP_EQ = 0,
    X86_SSE_CMP_LT = 1,
    X86_SSE_CMP_LE = 2,
    X86_SSE_CMP_UNORD = 3,
    X86_SSE_CMP_NEQ = 4,
    X86_SSE_CMP_NLT = 5,
    X86_SSE_CMP_NLE = 6,
    X86_SSE_CMP_ORD = 7
} ;
/* END ENUM __anonenum_X86_SSE_CmpCode_848838535 LOC=./jitter-amd64.c:1291 */

/* BEGIN FUNCTION-DECL unload_reg LOC=UNKNOWN */
static void unload_reg(jit_op *op , jit_hw_reg *hreg , long virt_reg ) ;
/* END FUNCTION-DECL unload_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_get_label LOC=UNKNOWN */
jit_label *jit_get_label(struct jit *jit ) ;
/* END FUNCTION-DECL jit_get_label LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN sched_get_priority_min LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/sched.h:39 */
extern int sched_get_priority_min(int  ) ;
/* END FUNCTION-DECL-EXTERN sched_get_priority_min LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/sched.h:39 */

/* BEGIN STRUCT __darwin_x86_cpmu_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1220 */
struct __darwin_x86_cpmu_state64 {
   __uint64_t __ctrs[16] ;
};
/* END STRUCT __darwin_x86_cpmu_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1220 */

/* BEGIN FUNCTION-DECL __builtin_log LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_log(double  ) ;  */
/* END FUNCTION-DECL __builtin_log LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_cos LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_cos(double  ) ;  */
/* END FUNCTION-DECL __builtin_cos LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN rmdir LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:474 */
extern int rmdir(char const   * ) ;
/* END FUNCTION-DECL-EXTERN rmdir LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:474 */

/* BEGIN FUNCTION-DECL-EXTERN alloca LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/alloca.h:32 */
extern void *alloca(size_t  ) ;
/* END FUNCTION-DECL-EXTERN alloca LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/alloca.h:32 */

/* BEGIN FUNCTION-DECL-EXTERN free LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:42 */
extern void free(void *ptr ) ;
/* END FUNCTION-DECL-EXTERN free LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:42 */

/* BEGIN FUNCTION-DECL-EXTERN fgetattrlist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:749 */
extern int fgetattrlist(int  , void * , void * , size_t  , unsigned int  )  __attribute__((__availability__(macosx,introduced=10.6))) ;
/* END FUNCTION-DECL-EXTERN fgetattrlist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:749 */

/* BEGIN FUNCTION-DECL-EXTERN bcopy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:71 */
extern void bcopy(void const   * , void * , size_t  ) ;
/* END FUNCTION-DECL-EXTERN bcopy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:71 */

/* BEGIN FUNCTION-DECL jit_optimize_frame_ptr LOC=UNKNOWN */
void jit_optimize_frame_ptr(struct jit *jit ) ;
/* END FUNCTION-DECL jit_optimize_frame_ptr LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL main LOC=UNKNOWN */
int main(int argc , char **argv , char **_formal_envp ) ;
/* END FUNCTION-DECL main LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_va_start LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_va_start(__builtin_va_list  ) ;  */
/* END FUNCTION-DECL __builtin_va_start LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_sqrt LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_sqrt(double  ) ;  */
/* END FUNCTION-DECL __builtin_sqrt LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:395 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_destroy(pthread_mutexattr_t * )  __asm__("_pthread_mutexattr_destroy")  ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:395 */

/* BEGIN FUNCTION-DECL-EXTERN setbuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:178 */
extern void setbuf(FILE * __restrict   , char * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN setbuf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:178 */

/* BEGIN FUNCTION-DECL-EXTERN wctomb LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:195 */
extern int wctomb(char * , wchar_t  ) ;
/* END FUNCTION-DECL-EXTERN wctomb LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:195 */

/* BEGIN FUNCTION-DECL-EXTERN undelete LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:733 */
extern int undelete(char const   * ) ;
/* END FUNCTION-DECL-EXTERN undelete LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:733 */

/* BEGIN FUNCTION-DECL-EXTERN toascii LOC=UNKNOWN */
__inline extern int toascii(int _c ) ;
/* END FUNCTION-DECL-EXTERN toascii LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_getstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:247 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getstack(pthread_attr_t const   * __restrict   ,
                                                                                                                                 void * _Nullable  * _Nonnull __restrict   ,
                                                                                                                                 size_t * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_getstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:247 */

/* BEGIN FUNCTION-DECL-EXTERN rresvport_af LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:709 */
extern int __attribute__((__deprecated__))  rresvport_af(int * , int  ) ;
/* END FUNCTION-DECL-EXTERN rresvport_af LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:709 */

/* BEGIN FUNCTION-DECL jit_op_prepend LOC=UNKNOWN */
__inline static void jit_op_prepend(jit_op *op , jit_op *prepended ) ;
/* END FUNCTION-DECL jit_op_prepend LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN unlockpt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:250 */
extern int unlockpt(int  ) ;
/* END FUNCTION-DECL-EXTERN unlockpt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:250 */

/* BEGIN FUNCTION-DECL load_reg LOC=UNKNOWN */
static void load_reg(struct jit_op *op , jit_hw_reg *hreg , long reg ) ;
/* END FUNCTION-DECL load_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_kill LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:549 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_kill(pthread_t  ,
                                                                                                                        int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_kill LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:549 */

/* BEGIN FUNCTION-DECL __builtin_cosf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_cosf(float  ) ;  */
/* END FUNCTION-DECL __builtin_cosf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strerror_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:116 */
extern int strerror_r(int __errnum , char *__strerrbuf , size_t __buflen ) ;
/* END FUNCTION-DECL-EXTERN strerror_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:116 */

/* BEGIN FUNCTION-DECL-EXTERN vsscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:338 */
extern int ( /* format attribute */  vsscanf)(char const   * __restrict  __str , char const   * __restrict  __format ,
                                              va_list  ) ;
/* END FUNCTION-DECL-EXTERN vsscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:338 */

/* BEGIN FUNCTION-DECL __builtin_huge_vall LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_huge_vall(void) ;  */
/* END FUNCTION-DECL __builtin_huge_vall LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_strncpy LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin_strncpy(char * , char const   * , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_strncpy LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_optimize_unused_assignments LOC=UNKNOWN */
void jit_optimize_unused_assignments(struct jit *jit ) ;
/* END FUNCTION-DECL jit_optimize_unused_assignments LOC=UNKNOWN */

/* BEGIN TYPEDEF qaddr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:97 */
typedef quad_t *qaddr_t;
/* END TYPEDEF qaddr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:97 */

/* BEGIN FUNCTION-DECL-EXTERN getlogin LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:458 */
extern char *getlogin(void) ;
/* END FUNCTION-DECL-EXTERN getlogin LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:458 */

/* BEGIN FUNCTION-DECL ob_append LOC=UNKNOWN */
static void ob_append(struct output_buf *ob , char *str ) ;
/* END FUNCTION-DECL ob_append LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL print_comment LOC=UNKNOWN */
void print_comment(struct output_buf *linebuf , jit_op *op ) ;
/* END FUNCTION-DECL print_comment LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN srandom LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:246 */
extern void srandom(unsigned int  ) ;
/* END FUNCTION-DECL-EXTERN srandom LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:246 */

/* BEGIN ENUM __anonenum_clockid_t_447627989 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:153 */
enum __anonenum_clockid_t_447627989 {
    _CLOCK_REALTIME = 0,
    _CLOCK_MONOTONIC = 6,
    _CLOCK_MONOTONIC_RAW = 4,
    _CLOCK_MONOTONIC_RAW_APPROX = 5,
    _CLOCK_UPTIME_RAW = 8,
    _CLOCK_UPTIME_RAW_APPROX = 9,
    _CLOCK_PROCESS_CPUTIME_ID = 12,
    _CLOCK_THREAD_CPUTIME_ID = 16
} ;
/* END ENUM __anonenum_clockid_t_447627989 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:153 */

/* BEGIN TYPEDEF clockid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:153 */
typedef enum __anonenum_clockid_t_447627989 clockid_t;
/* END TYPEDEF clockid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:153 */

/* BEGIN FUNCTION-DECL-EXTERN clock_gettime_nsec_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:181 */
extern __uint64_t __attribute__((__availability__(macosx,introduced=10.12), __availability__(ios,introduced=10.0),
__availability__(tvos,introduced=10.0), __availability__(watchos,introduced=3.0)))  clock_gettime_nsec_np(clockid_t __clock_id ) ;
/* END FUNCTION-DECL-EXTERN clock_gettime_nsec_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:181 */

/* BEGIN FUNCTION-DECL-EXTERN read LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:472 */
extern ssize_t read(int  , void * , size_t  )  __asm__("_read")  ;
/* END FUNCTION-DECL-EXTERN read LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:472 */

/* BEGIN FUNCTION-DECL emit_cond_op LOC=UNKNOWN */
static void emit_cond_op(struct jit *jit , struct jit_op *op , int amd64_cond , int imm ,
                         int sign ) ;
/* END FUNCTION-DECL emit_cond_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN drand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:200 */
extern double drand48(void) ;
/* END FUNCTION-DECL-EXTERN drand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:200 */

/* BEGIN FUNCTION-DECL-EXTERN lockf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:569 */
extern int lockf(int  , int  , off_t  )  __asm__("_lockf")  ;
/* END FUNCTION-DECL-EXTERN lockf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:569 */

/* BEGIN FUNCTION-DECL __builtin_alloca LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_alloca(unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_alloca LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strtouq LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:353 */
extern unsigned long long strtouq(char const   *__str , char **__endptr , int __base ) ;
/* END FUNCTION-DECL-EXTERN strtouq LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:353 */

/* BEGIN FUNCTION-DECL __builtin_atan2 LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_atan2(double  , double  ) ;  */
/* END FUNCTION-DECL __builtin_atan2 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pwrite LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:575 */
extern ssize_t pwrite(int __fd , void const   *__buf , size_t __nbyte , off_t __offset )  __asm__("_pwrite")  ;
/* END FUNCTION-DECL-EXTERN pwrite LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:575 */

/* BEGIN FUNCTION-DECL compiler_based_debugger LOC=UNKNOWN */
static void compiler_based_debugger(struct jit *jit ) ;
/* END FUNCTION-DECL compiler_based_debugger LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN memset LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:74 */
extern void *memset(void *__b , int __c , size_t __len ) ;
/* END FUNCTION-DECL-EXTERN memset LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:74 */

/* BEGIN FUNCTION-DECL copy_reg_to_array LOC=UNKNOWN */
static void copy_reg_to_array(jit_tree_key key , jit_tree_value value , void *target ) ;
/* END FUNCTION-DECL copy_reg_to_array LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_set_to_array LOC=UNKNOWN */
__inline static void jit_set_to_array(jit_set *s , jit_value *dest ) ;
/* END FUNCTION-DECL jit_set_to_array LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN ferror LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:145 */
extern int ferror(FILE * ) ;
/* END FUNCTION-DECL-EXTERN ferror LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:145 */

/* BEGIN STRUCT rusage_info_v3 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:251 */
struct rusage_info_v3 {
   uint8_t ri_uuid[16] ;
   uint64_t ri_user_time ;
   uint64_t ri_system_time ;
   uint64_t ri_pkg_idle_wkups ;
   uint64_t ri_interrupt_wkups ;
   uint64_t ri_pageins ;
   uint64_t ri_wired_size ;
   uint64_t ri_resident_size ;
   uint64_t ri_phys_footprint ;
   uint64_t ri_proc_start_abstime ;
   uint64_t ri_proc_exit_abstime ;
   uint64_t ri_child_user_time ;
   uint64_t ri_child_system_time ;
   uint64_t ri_child_pkg_idle_wkups ;
   uint64_t ri_child_interrupt_wkups ;
   uint64_t ri_child_pageins ;
   uint64_t ri_child_elapsed_abstime ;
   uint64_t ri_diskio_bytesread ;
   uint64_t ri_diskio_byteswritten ;
   uint64_t ri_cpu_time_qos_default ;
   uint64_t ri_cpu_time_qos_maintenance ;
   uint64_t ri_cpu_time_qos_background ;
   uint64_t ri_cpu_time_qos_utility ;
   uint64_t ri_cpu_time_qos_legacy ;
   uint64_t ri_cpu_time_qos_user_initiated ;
   uint64_t ri_cpu_time_qos_user_interactive ;
   uint64_t ri_billed_system_time ;
   uint64_t ri_serviced_system_time ;
};
/* END STRUCT rusage_info_v3 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:251 */

/* BEGIN FUNCTION-DECL-EXTERN setbuffer LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:375 */
extern void setbuffer(FILE * , char * , int  ) ;
/* END FUNCTION-DECL-EXTERN setbuffer LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:375 */

/* BEGIN FUNCTION-DECL-EXTERN fsctl LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:773 */
extern int fsctl(char const   * , unsigned long  , void * , unsigned int  ) ;
/* END FUNCTION-DECL-EXTERN fsctl LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:773 */

/* BEGIN FUNCTION-DECL-EXTERN strstr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:89 */
extern char *strstr(char const   *__big , char const   *__little ) ;
/* END FUNCTION-DECL-EXTERN strstr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:89 */

/* BEGIN FUNCTION-DECL jit_arg_layout_add LOC=UNKNOWN */
static void jit_arg_layout_add(struct jit_arg_layout *layout , int isfp , struct jit_out_arg *arg ) ;
/* END FUNCTION-DECL jit_arg_layout_add LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN rcmd_af LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:706 */
extern int __attribute__((__deprecated__))  rcmd_af(char ** , int  , char const   * ,
                                                    char const   * , char const   * ,
                                                    int * , int  ) ;
/* END FUNCTION-DECL-EXTERN rcmd_af LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:706 */

/* BEGIN FUNCTION-DECL-EXTERN execv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:444 */
extern int execv(char const   *__path , char * const  *__argv )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN execv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:444 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_cond_broadcast LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:292 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_broadcast(pthread_cond_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_cond_broadcast LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:292 */

/* BEGIN FUNCTION-DECL jit_op_first LOC=UNKNOWN */
__inline static jit_op *jit_op_first(jit_op *op ) ;
/* END FUNCTION-DECL jit_op_first LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN putchar_unlocked LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:292 */
extern int putchar_unlocked(int  ) ;
/* END FUNCTION-DECL-EXTERN putchar_unlocked LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:292 */

/* BEGIN TYPEDEF int16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int16_t.h:30 */
typedef short int16_t;
/* END TYPEDEF int16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_int16_t.h:30 */

/* BEGIN TYPEDEF int_fast16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:41 */
typedef int16_t int_fast16_t;
/* END TYPEDEF int_fast16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:41 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_setprioceiling LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:421 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_setprioceiling(pthread_mutexattr_t * ,
                                                                                                                                            int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_setprioceiling LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:421 */

/* BEGIN STRUCT __darwin_ymm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:229 */
struct __darwin_ymm_reg {
   char __ymm_reg[32] ;
};
/* END STRUCT __darwin_ymm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:229 */

/* BEGIN STRUCT __darwin_i386_avx512_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:364 */
struct __darwin_i386_avx512_state {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   char __fpu_rsrv4[224] ;
   int __fpu_reserved1 ;
   char __avx_reserved1[64] ;
   struct __darwin_xmm_reg __fpu_ymmh0 ;
   struct __darwin_xmm_reg __fpu_ymmh1 ;
   struct __darwin_xmm_reg __fpu_ymmh2 ;
   struct __darwin_xmm_reg __fpu_ymmh3 ;
   struct __darwin_xmm_reg __fpu_ymmh4 ;
   struct __darwin_xmm_reg __fpu_ymmh5 ;
   struct __darwin_xmm_reg __fpu_ymmh6 ;
   struct __darwin_xmm_reg __fpu_ymmh7 ;
   struct __darwin_opmask_reg __fpu_k0 ;
   struct __darwin_opmask_reg __fpu_k1 ;
   struct __darwin_opmask_reg __fpu_k2 ;
   struct __darwin_opmask_reg __fpu_k3 ;
   struct __darwin_opmask_reg __fpu_k4 ;
   struct __darwin_opmask_reg __fpu_k5 ;
   struct __darwin_opmask_reg __fpu_k6 ;
   struct __darwin_opmask_reg __fpu_k7 ;
   struct __darwin_ymm_reg __fpu_zmmh0 ;
   struct __darwin_ymm_reg __fpu_zmmh1 ;
   struct __darwin_ymm_reg __fpu_zmmh2 ;
   struct __darwin_ymm_reg __fpu_zmmh3 ;
   struct __darwin_ymm_reg __fpu_zmmh4 ;
   struct __darwin_ymm_reg __fpu_zmmh5 ;
   struct __darwin_ymm_reg __fpu_zmmh6 ;
   struct __darwin_ymm_reg __fpu_zmmh7 ;
};
/* END STRUCT __darwin_i386_avx512_state LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:364 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_gettype LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:410 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_gettype(pthread_mutexattr_t const   * __restrict   ,
                                                                                                                                     int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_gettype LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:410 */

/* BEGIN FUNCTION-DECL __builtin_sinh LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_sinh(double  ) ;  */
/* END FUNCTION-DECL __builtin_sinh LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN flsll LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:89 */
extern int flsll(long long  )  __attribute__((__availability__(macosx,introduced=10.9))) ;
/* END FUNCTION-DECL-EXTERN flsll LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:89 */

/* BEGIN VARIABLE-DECL-EXTERN __stdinp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:67 */
extern FILE *__stdinp ;
/* END VARIABLE-DECL-EXTERN __stdinp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:67 */

/* BEGIN FUNCTION-DECL __builtin_fabsf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_fabsf(float  ) ;  */
/* END FUNCTION-DECL __builtin_fabsf LOC=BUILTIN */

/* BEGIN TYPEDEF __darwin_fsfilcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:59 */
typedef unsigned int __darwin_fsfilcnt_t;
/* END TYPEDEF __darwin_fsfilcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:59 */

/* BEGIN TYPEDEF fsfilcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fsfilcnt_t.h:31 */
typedef __darwin_fsfilcnt_t fsfilcnt_t;
/* END TYPEDEF fsfilcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fsfilcnt_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN stpcpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:130 */
extern char *stpcpy(char *__dst , char const   *__src ) ;
/* END FUNCTION-DECL-EXTERN stpcpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:130 */

/* BEGIN STRUCT copy_target LOC=./jitter-amd64.c:897 */
struct copy_target {
   jit_value *target ;
   int index ;
};
/* END STRUCT copy_target LOC=./jitter-amd64.c:897 */

/* BEGIN FUNCTION-DECL-EXTERN isnumber LOC=UNKNOWN */
__inline extern int isnumber(int _c ) ;
/* END FUNCTION-DECL-EXTERN isnumber LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL rmap_free LOC=UNKNOWN */
void rmap_free(jit_rmap *regmap ) ;
/* END FUNCTION-DECL rmap_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN mktime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:115 */
extern time_t mktime(struct tm * )  __asm__("_mktime")  ;
/* END FUNCTION-DECL-EXTERN mktime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:115 */

/* BEGIN FUNCTION-DECL-EXTERN sethostid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:716 */
extern void sethostid(long  ) ;
/* END FUNCTION-DECL-EXTERN sethostid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:716 */

/* BEGIN FUNCTION-DECL-EXTERN vfork LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:602 */
extern pid_t vfork(void)  __attribute__((__availability__(tvos,unavailable), __availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN vfork LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:602 */

/* BEGIN FUNCTION-DECL _OSSwapInt16 LOC=UNKNOWN */
__inline static __uint16_t _OSSwapInt16(__uint16_t _data ) ;
/* END FUNCTION-DECL _OSSwapInt16 LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL free_ops LOC=UNKNOWN */
static void free_ops(struct jit_op *op ) ;
/* END FUNCTION-DECL free_ops LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN getlogin_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:608 */
extern int getlogin_r(char * , size_t  ) ;
/* END FUNCTION-DECL-EXTERN getlogin_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:608 */

/* BEGIN TYPEDEF nlink_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_nlink_t.h:31 */
typedef __uint16_t nlink_t;
/* END TYPEDEF nlink_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_nlink_t.h:31 */

/* BEGIN STRUCT __anonstruct__RuneCharClass_1021650748 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:72 */
struct __anonstruct__RuneCharClass_1021650748 {
   char __name[14] ;
   __uint32_t __mask ;
};
/* END STRUCT __anonstruct__RuneCharClass_1021650748 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:72 */

/* BEGIN STRUCT __darwin_x86_debug_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1192 */
struct __darwin_x86_debug_state64 {
   __uint64_t __dr0 ;
   __uint64_t __dr1 ;
   __uint64_t __dr2 ;
   __uint64_t __dr3 ;
   __uint64_t __dr4 ;
   __uint64_t __dr5 ;
   __uint64_t __dr6 ;
   __uint64_t __dr7 ;
};
/* END STRUCT __darwin_x86_debug_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:1192 */

/* BEGIN STRUCT jit_op LOC=./jitter-amd64.c:179 */
struct jit_op {
   unsigned short code ;
   unsigned char spec ;
   unsigned char arg_size ;
   unsigned char assigned ;
   unsigned char fp ;
   unsigned char in_use ;
   double flt_imm ;
   jit_value arg[3] ;
   jit_value r_arg[3] ;
   long patch_addr ;
   struct jit_op *jmp_addr ;
   struct jit_op *next ;
   struct jit_op *prev ;
   struct jit_set *live_in ;
   struct jit_set *live_out ;
   struct jit_rmap *regmap ;
   int normalized_pos ;
   struct jit_tree *allocator_hints ;
   struct jit_debug_info *debug_info ;
   unsigned long code_offset ;
   unsigned long code_length ;
   void *addendum ;
};
/* END STRUCT jit_op LOC=./jitter-amd64.c:179 */

/* BEGIN TYPEDEF int_least8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:29 */
typedef int8_t int_least8_t;
/* END TYPEDEF int_least8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:29 */

/* BEGIN FUNCTION-DECL jit_tree_addall LOC=UNKNOWN */
__inline static jit_tree *jit_tree_addall(jit_tree *target , jit_tree *n ) ;
/* END FUNCTION-DECL jit_tree_addall LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN getwgroups_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:664 */
extern int getwgroups_np(int * , unsigned char * ) ;
/* END FUNCTION-DECL-EXTERN getwgroups_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:664 */

/* BEGIN FUNCTION-DECL-EXTERN fread LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:158 */
extern size_t fread(void * __restrict  __ptr , size_t __size , size_t __nitems , FILE * __restrict  __stream ) ;
/* END FUNCTION-DECL-EXTERN fread LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:158 */

/* BEGIN FUNCTION-DECL jit_expand_patches_and_labels LOC=./jitter-amd64.c:4347 */
__inline static void jit_expand_patches_and_labels(struct jit *jit ) ;
/* END FUNCTION-DECL jit_expand_patches_and_labels LOC=./jitter-amd64.c:4347 */

/* BEGIN FUNCTION-DECL emit_pop_reg LOC=UNKNOWN */
static int emit_pop_reg(struct jit *jit , jit_hw_reg *r , int stack_offset ) ;
/* END FUNCTION-DECL emit_pop_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL prepare_registers_for_call LOC=UNKNOWN */
static void prepare_registers_for_call(struct jit_reg_allocator *al , jit_op *op ) ;
/* END FUNCTION-DECL prepare_registers_for_call LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN abort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:131 */
extern  __attribute__((__noreturn__)) void abort(void)  __attribute__((__cold__)) ;
/* END FUNCTION-DECL-EXTERN abort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:131 */

/* BEGIN FUNCTION-DECL jit_set_new LOC=UNKNOWN */
__inline static jit_set *jit_set_new(void) ;
/* END FUNCTION-DECL jit_set_new LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN wait4 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:255 */
extern pid_t wait4(pid_t  , int * , int  , struct rusage * ) ;
/* END FUNCTION-DECL-EXTERN wait4 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:255 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_setugid_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:698 */
extern int __attribute__((__deprecated__("Use of per-thread security contexts is error-prone and discouraged.")))  pthread_setugid_np(uid_t  ,
                                                                                                                                      gid_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_setugid_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:698 */

/* BEGIN FUNCTION-DECL required_stack_space_for_regs LOC=UNKNOWN */
static int required_stack_space_for_regs(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL required_stack_space_for_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_set_addall LOC=UNKNOWN */
__inline static void jit_set_addall(jit_set *target , jit_set *s ) ;
/* END FUNCTION-DECL jit_set_addall LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN tempnam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:300 */
extern char __attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tempnam(3), it is highly recommended that you use mkstemp(3) instead."),
__availability__(swift,unavailable,message="Use mkstemp(3) instead.")))  *tempnam(char const   *__dir ,
                                                                                  char const   *__prefix )  __asm__("_tempnam")  ;
/* END FUNCTION-DECL-EXTERN tempnam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:300 */

/* BEGIN FUNCTION-DECL print_op_bytes LOC=UNKNOWN */
__inline static void print_op_bytes(FILE *f , struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL print_op_bytes LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN mprotect LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:228 */
extern int mprotect(void * , size_t  , int  )  __asm__("_mprotect")  ;
/* END FUNCTION-DECL-EXTERN mprotect LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:228 */

/* BEGIN STRUCT tm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:75 */
struct tm {
   int tm_sec ;
   int tm_min ;
   int tm_hour ;
   int tm_mday ;
   int tm_mon ;
   int tm_year ;
   int tm_wday ;
   int tm_yday ;
   int tm_isdst ;
   long tm_gmtoff ;
   char *tm_zone ;
};
/* END STRUCT tm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:75 */

/* BEGIN STRUCT sched_param LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/sched.h:35 */
struct sched_param {
   int sched_priority ;
   char __opaque[4] ;
};
/* END STRUCT sched_param LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/sched.h:35 */

/* BEGIN FUNCTION-DECL-EXTERN getline LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:355 */
extern ssize_t getline(char ** __restrict  __linep , size_t * __restrict  __linecapp ,
                       FILE * __restrict  __stream )  __attribute__((__availability__(macosx,introduced=10.7))) ;
/* END FUNCTION-DECL-EXTERN getline LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:355 */

/* BEGIN FUNCTION-DECL-EXTERN getsgroups_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:662 */
extern int getsgroups_np(int * , unsigned char * ) ;
/* END FUNCTION-DECL-EXTERN getsgroups_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:662 */

/* BEGIN FUNCTION-DECL jit_optimize_st_ops LOC=UNKNOWN */
void jit_optimize_st_ops(struct jit *jit ) ;
/* END FUNCTION-DECL jit_optimize_st_ops LOC=UNKNOWN */

/* BEGIN TYPEDEF user_ulong_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:101 */
typedef u_int64_t user_ulong_t;
/* END TYPEDEF user_ulong_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:101 */

/* BEGIN FUNCTION-DECL __builtin_stpcpy LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin_stpcpy(char * , char const   * ) ;  */
/* END FUNCTION-DECL __builtin_stpcpy LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_subx_op LOC=UNKNOWN */
static void emit_subx_op(struct jit *jit , struct jit_op *op , int x86_op , int imm ) ;
/* END FUNCTION-DECL emit_subx_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN getrusage LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:450 */
extern int getrusage(int  , struct rusage * ) ;
/* END FUNCTION-DECL-EXTERN getrusage LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:450 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_sigmask LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:555 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_sigmask(int  ,
                                                                                                                           sigset_t const   * _Nullable   ,
                                                                                                                           sigset_t * _Nullable   )  __asm__("_pthread_sigmask")  ;
/* END FUNCTION-DECL-EXTERN pthread_sigmask LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:555 */

/* BEGIN STRUCT jit_prepared_args LOC=./jitter-amd64.c:556 */
struct jit_prepared_args {
   int count ;
   int ready ;
   int gp_args ;
   int fp_args ;
   int stack_size ;
   jit_op *op ;
   struct jit_out_arg *args ;
};
/* END STRUCT jit_prepared_args LOC=./jitter-amd64.c:556 */

/* BEGIN STRUCT jit LOC=./jitter-amd64.c:617 */
struct jit {
   unsigned char *buf ;
   unsigned int buf_capacity ;
   unsigned char *ip ;
   struct jit_op *ops ;
   struct jit_op *last_op ;
   struct jit_reg_allocator *reg_al ;
   struct jit_op *current_func ;
   jit_label *labels ;
   jit_prepared_args prepared_args ;
   int push_count ;
   unsigned int optimizations ;
   unsigned char mmaped_buf ;
};
/* END STRUCT jit LOC=./jitter-amd64.c:617 */

/* BEGIN FUNCTION-DECL make_addmuli LOC=UNKNOWN */
__inline static int make_addmuli(jit_op *op , jit_op *nextop ) ;
/* END FUNCTION-DECL make_addmuli LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN cgetent LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:283 */
extern int cgetent(char ** , char ** , char const   * ) ;
/* END FUNCTION-DECL-EXTERN cgetent LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:283 */

/* BEGIN FUNCTION-DECL jit_debug_info_new LOC=UNKNOWN */
struct jit_debug_info *jit_debug_info_new(char const   *filename , char const   *function ,
                                          int lineno ) ;
/* END FUNCTION-DECL jit_debug_info_new LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_arg_layout_create_output LOC=UNKNOWN */
static struct jit_arg_layout *jit_arg_layout_create_output(struct jit *jit , struct jit_prepared_args *prepared_args ) ;
/* END FUNCTION-DECL jit_arg_layout_create_output LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN tzset LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:121 */
extern void tzset(void) ;
/* END FUNCTION-DECL-EXTERN tzset LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:121 */

/* BEGIN TYPEDEF __2_init_tigress_1_opaque_StructureType LOC=UNKNOWN */
typedef struct __2_init_tigress_1_opaque_NodeStruct *__2_init_tigress_1_opaque_StructureType;
/* END TYPEDEF __2_init_tigress_1_opaque_StructureType LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL delete_node LOC=UNKNOWN */
static jit_tree *delete_node(jit_tree *h , jit_tree_key key , int *found ) ;
/* END FUNCTION-DECL delete_node LOC=UNKNOWN */

/* BEGIN TYPEDEF key_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_key_t.h:31 */
typedef __int32_t key_t;
/* END TYPEDEF key_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_key_t.h:31 */

/* BEGIN FUNCTION-DECL __builtin_frexpl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_frexpl(long double  , int * ) ;  */
/* END FUNCTION-DECL __builtin_frexpl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_ia32_subps LOC=BUILTIN */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_subps(float __attribute__((____vector_size____(16)))   ,
                                                                        float __attribute__((____vector_size____(16)))   ) ;  */
/* END FUNCTION-DECL __builtin_ia32_subps LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN gets LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:168 */
extern char *gets(char * ) ;
/* END FUNCTION-DECL-EXTERN gets LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:168 */

/* BEGIN FUNCTION-DECL _bit_pop LOC=UNKNOWN */
__inline static int _bit_pop(unsigned int x ) ;
/* END FUNCTION-DECL _bit_pop LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL fac LOC=UNKNOWN */
void fac(int n ) ;
/* END FUNCTION-DECL fac LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_fsblkcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:58 */
typedef unsigned int __darwin_fsblkcnt_t;
/* END TYPEDEF __darwin_fsblkcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:58 */

/* BEGIN TYPEDEF fsblkcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fsblkcnt_t.h:31 */
typedef __darwin_fsblkcnt_t fsblkcnt_t;
/* END TYPEDEF fsblkcnt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fsblkcnt_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlock_tryrdlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:451 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_tryrdlock(pthread_rwlock_t * )  __asm__("_pthread_rwlock_tryrdlock")  ;
/* END FUNCTION-DECL-EXTERN pthread_rwlock_tryrdlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:451 */

/* BEGIN FUNCTION-DECL-EXTERN __isctype LOC=UNKNOWN */
__inline extern __darwin_ct_rune_t __isctype(__darwin_ct_rune_t _c , unsigned long _f ) ;
/* END FUNCTION-DECL-EXTERN __isctype LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL report_warning LOC=UNKNOWN */
static void report_warning(struct jit *jit , jit_op *op , char *desc ) ;
/* END FUNCTION-DECL report_warning LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN mkostempsat_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:692 */
extern int mkostempsat_np(int dfd , char *path , int slen , int oflags )  __attribute__((__availability__(watchos,introduced=4.0),
__availability__(tvos,introduced=11.0), __availability__(ios,introduced=11.0), __availability__(macosx,introduced=10.13))) ;
/* END FUNCTION-DECL-EXTERN mkostempsat_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:692 */

/* BEGIN FUNCTION-DECL __builtin_object_size LOC=BUILTIN */
/* compiler builtin: 
   unsigned long __builtin_object_size(void * , int  ) ;  */
/* END FUNCTION-DECL __builtin_object_size LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN setegid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:624 */
extern int setegid(gid_t  ) ;
/* END FUNCTION-DECL-EXTERN setegid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:624 */

/* BEGIN ENUM jit_amd64_gp_regs LOC=./jitter-amd64.c:919 */
enum jit_amd64_gp_regs {
    AMD64_RAX = 0,
    AMD64_RCX = 1,
    AMD64_RDX = 2,
    AMD64_RBX = 3,
    AMD64_RSP = 4,
    AMD64_RBP = 5,
    AMD64_RSI = 6,
    AMD64_RDI = 7,
    AMD64_R8 = 8,
    AMD64_R9 = 9,
    AMD64_R10 = 10,
    AMD64_R11 = 11,
    AMD64_R12 = 12,
    AMD64_R13 = 13,
    AMD64_R14 = 14,
    AMD64_R15 = 15,
    AMD64_RIP = 16,
    AMD64_NREG = 17
} ;
/* END ENUM jit_amd64_gp_regs LOC=./jitter-amd64.c:919 */

/* BEGIN FUNCTION-DECL __builtin_tan LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_tan(double  ) ;  */
/* END FUNCTION-DECL __builtin_tan LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN atoll LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:138 */
extern long long atoll(char const   * ) ;
/* END FUNCTION-DECL-EXTERN atoll LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:138 */

/* BEGIN FUNCTION-DECL-EXTERN unlinkat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:212 */
extern int unlinkat(int  , char const   * , int  )  __attribute__((__availability__(macosx,introduced=10.10))) ;
/* END FUNCTION-DECL-EXTERN unlinkat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:212 */

/* BEGIN FUNCTION-DECL jit_get_unused_reg_with_index LOC=UNKNOWN */
jit_hw_reg *jit_get_unused_reg_with_index(struct jit_reg_allocator *al , jit_op *op ,
                                          int fp , int index___0 ) ;
/* END FUNCTION-DECL jit_get_unused_reg_with_index LOC=UNKNOWN */

/* BEGIN VARIABLE-DEF __2_init_tigress_1_opaque_list_1 LOC=UNKNOWN */
struct __2_init_tigress_1_opaque_NodeStruct *__2_init_tigress_1_opaque_list_1  =    (struct __2_init_tigress_1_opaque_NodeStruct *)0;
/* END VARIABLE-DEF __2_init_tigress_1_opaque_list_1 LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN getattrlistbulk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:187 */
extern int getattrlistbulk(int  , void * , void * , size_t  , uint64_t  )  __attribute__((__availability__(macosx,introduced=10.10))) ;
/* END FUNCTION-DECL-EXTERN getattrlistbulk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:187 */

/* BEGIN TYPEDEF ldiv_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:88 */
typedef struct __anonstruct_ldiv_t_748949161 ldiv_t;
/* END TYPEDEF ldiv_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:88 */

/* BEGIN FUNCTION-DECL __builtin___stpcpy_chk LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin___stpcpy_chk(char * , char const   * , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin___stpcpy_chk LOC=BUILTIN */

/* BEGIN TYPEDEF rsize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_rsize_t.h:31 */
typedef __darwin_size_t rsize_t;
/* END TYPEDEF rsize_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_rsize_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN memset_s LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:145 */
extern errno_t memset_s(void *__s , rsize_t __smax , int __c , rsize_t __n )  __attribute__((__availability__(macosx,introduced=10.9))) ;
/* END FUNCTION-DECL-EXTERN memset_s LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:145 */

/* BEGIN FUNCTION-DECL jit_op_last LOC=UNKNOWN */
__inline static jit_op *jit_op_last(jit_op *op ) ;
/* END FUNCTION-DECL jit_op_last LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_next_arg LOC=BUILTIN */
/* compiler builtin: 
   __builtin_va_list __builtin_next_arg(void) ;  */
/* END FUNCTION-DECL __builtin_next_arg LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN sched_get_priority_max LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/sched.h:40 */
extern int sched_get_priority_max(int  ) ;
/* END FUNCTION-DECL-EXTERN sched_get_priority_max LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread/sched.h:40 */

/* BEGIN FUNCTION-DECL emit_push_reg LOC=UNKNOWN */
static int emit_push_reg(struct jit *jit , jit_hw_reg *r , int stack_offset ) ;
/* END FUNCTION-DECL emit_push_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN __darwin_check_fd_set_overflow LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h:54 */
extern int __darwin_check_fd_set_overflow(int  , void const   * , int  )  __attribute__((__weak_import__)) ;
/* END FUNCTION-DECL-EXTERN __darwin_check_fd_set_overflow LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h:54 */

/* BEGIN FUNCTION-DECL __builtin_bswap32 LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_bswap32(int  ) ;  */
/* END FUNCTION-DECL __builtin_bswap32 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_pop_caller_saved_regs LOC=UNKNOWN */
static int emit_pop_caller_saved_regs(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_pop_caller_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN getenv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:147 */
extern char *getenv(char const   * ) ;
/* END FUNCTION-DECL-EXTERN getenv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:147 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_join LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:361 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_join(pthread_t  ,
                                                                                                                        void * _Nullable  * _Nullable   )  __asm__("_pthread_join")  ;
/* END FUNCTION-DECL-EXTERN pthread_join LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:361 */

/* BEGIN FUNCTION-DECL jit_free LOC=UNKNOWN */
void jit_free(struct jit *jit ) ;
/* END FUNCTION-DECL jit_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN strlen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:82 */
extern size_t strlen(char const   *__s ) ;
/* END FUNCTION-DECL-EXTERN strlen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:82 */

/* BEGIN FUNCTION-DECL check_data_references LOC=UNKNOWN */
static int check_data_references(jit_op *op , char *msg_buf ) ;
/* END FUNCTION-DECL check_data_references LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL generic_pop_caller_saved_regs LOC=UNKNOWN */
static int generic_pop_caller_saved_regs(struct jit *jit , jit_op *op , int reg_count ,
                                         jit_hw_reg *regs , int fp , jit_hw_reg *skip_reg ,
                                         int stack_offset ) ;
/* END FUNCTION-DECL generic_pop_caller_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_stdarg_start LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_stdarg_start(__builtin_va_list  ) ;  */
/* END FUNCTION-DECL __builtin_stdarg_start LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN ___tolower LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:130 */
extern __darwin_ct_rune_t ___tolower(__darwin_ct_rune_t  ) ;
/* END FUNCTION-DECL-EXTERN ___tolower LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:130 */

/* BEGIN FUNCTION-DECL stack_arg_pos LOC=UNKNOWN */
__inline static int stack_arg_pos(struct jit *jit , struct jit_func_info *info , int arg ) ;
/* END FUNCTION-DECL stack_arg_pos LOC=UNKNOWN */

/* BEGIN TYPEDEF uint_least32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:35 */
typedef uint32_t uint_least32_t;
/* END TYPEDEF uint_least32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:35 */

/* BEGIN FUNCTION-DECL open_disasm LOC=UNKNOWN */
static FILE *open_disasm(void) ;
/* END FUNCTION-DECL open_disasm LOC=UNKNOWN */

/* BEGIN VARIABLE-DEF x86_cc_signed_map LOC=UNKNOWN */
static unsigned char x86_cc_signed_map[12]  ;
/* END VARIABLE-DEF x86_cc_signed_map LOC=UNKNOWN */

/* BEGIN UNION jit_proc_value_alias LOC=./jitter-amd64.c:212 */
union jit_proc_value_alias {
   void (*ptr)() ;
   jit_value num ;
};
/* END UNION jit_proc_value_alias LOC=./jitter-amd64.c:212 */

/* BEGIN VARIABLE-DECL-EXTERN _CurrentRuneLocale LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:112 */
extern _RuneLocale *_CurrentRuneLocale ;
/* END VARIABLE-DECL-EXTERN _CurrentRuneLocale LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/runetype.h:112 */

/* BEGIN FUNCTION-DECL rmap_assoc LOC=UNKNOWN */
static void rmap_assoc(jit_rmap *rmap , jit_value reg , jit_hw_reg *hreg ) ;
/* END FUNCTION-DECL rmap_assoc LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN mmap LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:225 */
extern void *mmap(void * , size_t  , int  , int  , int  , off_t  )  __asm__("_mmap")  ;
/* END FUNCTION-DECL-EXTERN mmap LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:225 */

/* BEGIN FUNCTION-DECL __builtin_sinf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_sinf(float  ) ;  */
/* END FUNCTION-DECL __builtin_sinf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_nanf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_nanf(char const   * ) ;  */
/* END FUNCTION-DECL __builtin_nanf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_atfork LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:221 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_atfork(void (* _Nullable  )(void) ,
                                                                                                                          void (* _Nullable  )(void) ,
                                                                                                                          void (* _Nullable  )(void) ) ;
/* END FUNCTION-DECL-EXTERN pthread_atfork LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:221 */

/* BEGIN FUNCTION-DECL-EXTERN difftime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:111 */
extern double difftime(time_t  , time_t  ) ;
/* END FUNCTION-DECL-EXTERN difftime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:111 */

/* BEGIN FUNCTION-DECL __builtin_modfl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_modfl(long double  , long double * ) ;  */
/* END FUNCTION-DECL __builtin_modfl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN sprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:180 */
extern int ( /* format attribute */  sprintf)(char * __restrict   , char const   * __restrict   
                                              , ...)  __attribute__((__availability__(swift,unavailable,message="Use snprintf instead."))) ;
/* END FUNCTION-DECL-EXTERN sprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:180 */

/* BEGIN FUNCTION-DECL-EXTERN renameatx_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/stdio.h:47 */
extern int renameatx_np(int  , char const   * , int  , char const   * , unsigned int  )  __attribute__((__availability__(watchos,introduced=3.0),
__availability__(tvos,introduced=10.0), __availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12))) ;
/* END FUNCTION-DECL-EXTERN renameatx_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/stdio.h:47 */

/* BEGIN FUNCTION-DECL-EXTERN nfssvc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:695 */
extern int nfssvc(int  , void * ) ;
/* END FUNCTION-DECL-EXTERN nfssvc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:695 */

/* BEGIN FUNCTION-DECL __builtin_expf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_expf(float  ) ;  */
/* END FUNCTION-DECL __builtin_expf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_ffs LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_ffs(unsigned int  ) ;  */
/* END FUNCTION-DECL __builtin_ffs LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_alu_op LOC=UNKNOWN */
static void emit_alu_op(struct jit *jit , struct jit_op *op , int x86_op , int imm ) ;
/* END FUNCTION-DECL emit_alu_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN mbtowc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:158 */
extern int mbtowc(wchar_t * __restrict   , char const   * __restrict   , size_t  ) ;
/* END FUNCTION-DECL-EXTERN mbtowc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:158 */

/* BEGIN FUNCTION-DECL-EXTERN abs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:132 */
extern int abs(int  )  __attribute__((__const__)) ;
/* END FUNCTION-DECL-EXTERN abs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:132 */

/* BEGIN FUNCTION-DECL-EXTERN getcwd LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:449 */
extern char *getcwd(char * , size_t  ) ;
/* END FUNCTION-DECL-EXTERN getcwd LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:449 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutex_trylock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:389 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_trylock(pthread_mutex_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutex_trylock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:389 */

/* BEGIN FUNCTION-DECL-EXTERN encrypt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:546 */
extern void encrypt(char * , int  )  __asm__("_encrypt")  ;
/* END FUNCTION-DECL-EXTERN encrypt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:546 */

/* BEGIN FUNCTION-DECL-EXTERN labs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:148 */
extern long labs(long  )  __attribute__((__const__)) ;
/* END FUNCTION-DECL-EXTERN labs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:148 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_setstacksize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:286 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setstacksize(pthread_attr_t * ,
                                                                                                                                     size_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_setstacksize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:286 */

/* BEGIN FUNCTION-DECL jit_tree_insert LOC=UNKNOWN */
static jit_tree *jit_tree_insert(jit_tree *root , jit_tree_key key , jit_tree_value value ,
                                 int *found ) ;
/* END FUNCTION-DECL jit_tree_insert LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN lutimes LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:192 */
extern int lutimes(char const   * , struct timeval  const  * )  __attribute__((__availability__(macosx,introduced=10.5))) ;
/* END FUNCTION-DECL-EXTERN lutimes LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:192 */

/* BEGIN TYPEDEF int_least64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:32 */
typedef int64_t int_least64_t;
/* END TYPEDEF int_least64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:32 */

/* BEGIN FUNCTION-DECL check_dead_code LOC=UNKNOWN */
static int check_dead_code(jit_op *op , char *msg_buf ) ;
/* END FUNCTION-DECL check_dead_code LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN rindex LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:74 */
extern char *rindex(char const   * , int  ) ;
/* END FUNCTION-DECL-EXTERN rindex LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:74 */

/* BEGIN FUNCTION-DECL-EXTERN memset_pattern4 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:156 */
extern void memset_pattern4(void *__b , void const   *__pattern4 , size_t __len )  __attribute__((__availability__(macosx,introduced=10.5))) ;
/* END FUNCTION-DECL-EXTERN memset_pattern4 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:156 */

/* BEGIN TYPEDEF syscall_arg_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:111 */
typedef u_int64_t syscall_arg_t;
/* END TYPEDEF syscall_arg_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:111 */

/* BEGIN FUNCTION-DECL-EXTERN cgetcap LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:281 */
extern char *cgetcap(char * , char const   * , int  ) ;
/* END FUNCTION-DECL-EXTERN cgetcap LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:281 */

/* BEGIN FUNCTION-DECL-EXTERN __vsprintf_chk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_stdio.h:61 */
extern int __vsprintf_chk(char * __restrict   , int  , size_t  , char const   * __restrict   ,
                          va_list  ) ;
/* END FUNCTION-DECL-EXTERN __vsprintf_chk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_stdio.h:61 */

/* BEGIN FUNCTION-DECL jit_add_prolog LOC=UNKNOWN */
jit_op *jit_add_prolog(struct jit *jit , void *func , struct jit_debug_info *debug_info ) ;
/* END FUNCTION-DECL jit_add_prolog LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN system LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:187 */
extern int __attribute__((__availability__(tvos,unavailable), __availability__(watchos,unavailable),
__availability__(ios,unavailable), __availability__(macos,introduced=10.0), __availability__(swift,unavailable,message="Use posix_spawn APIs or NSTask instead.")))  system(char const   * )  __asm__("_system")  ;
/* END FUNCTION-DECL-EXTERN system LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:187 */

/* BEGIN FUNCTION-DECL __builtin_sinhf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_sinhf(float  ) ;  */
/* END FUNCTION-DECL __builtin_sinhf LOC=BUILTIN */

/* BEGIN TYPEDEF X86_Prefix LOC=./jitter-amd64.c:1094 */
typedef enum __anonenum_X86_Prefix_200431650 X86_Prefix;
/* END TYPEDEF X86_Prefix LOC=./jitter-amd64.c:1094 */

/* BEGIN FUNCTION-DECL-EXTERN mkostemp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:676 */
extern int mkostemp(char *path , int oflags )  __attribute__((__availability__(watchos,introduced=3.0),
__availability__(tvos,introduced=10.0), __availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12))) ;
/* END FUNCTION-DECL-EXTERN mkostemp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:676 */

/* BEGIN FUNCTION-DECL-EXTERN reboot LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:702 */
extern int reboot(int  ) ;
/* END FUNCTION-DECL-EXTERN reboot LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:702 */

/* BEGIN FUNCTION-DECL-EXTERN utimes LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:203 */
extern int utimes(char const   * , struct timeval  const  * ) ;
/* END FUNCTION-DECL-EXTERN utimes LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:203 */

/* BEGIN FUNCTION-DECL-EXTERN mkpath_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:669 */
extern int mkpath_np(char const   *path , mode_t omode )  __attribute__((__availability__(macosx,introduced=10.8))) ;
/* END FUNCTION-DECL-EXTERN mkpath_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:669 */

/* BEGIN FUNCTION-DECL-EXTERN strtof LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:166 */
extern float strtof(char const   * , char ** )  __asm__("_strtof")  ;
/* END FUNCTION-DECL-EXTERN strtof LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:166 */

/* BEGIN FUNCTION-DECL insert_reg_op LOC=UNKNOWN */
static void insert_reg_op(int opcode , jit_op *op , jit_value r1 , jit_value r2 ) ;
/* END FUNCTION-DECL insert_reg_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlockattr_setpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:473 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlockattr_setpshared(pthread_rwlockattr_t * ,
                                                                                                                                         int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_rwlockattr_setpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:473 */

/* BEGIN FUNCTION-DECL ob_printf LOC=UNKNOWN */
static void ob_printf(struct output_buf *ob , char const   *fmt  , ...) ;
/* END FUNCTION-DECL ob_printf LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_floorf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_floorf(float  ) ;  */
/* END FUNCTION-DECL __builtin_floorf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN faccessat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:207 */
extern int faccessat(int  , char const   * , int  , int  )  __attribute__((__availability__(macosx,introduced=10.10))) ;
/* END FUNCTION-DECL-EXTERN faccessat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:207 */

/* BEGIN FUNCTION-DECL-EXTERN fchown LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:621 */
extern int fchown(int  , uid_t  , gid_t  ) ;
/* END FUNCTION-DECL-EXTERN fchown LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:621 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutex_setprioceiling LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:385 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_setprioceiling(pthread_mutex_t * __restrict   ,
                                                                                                                                        int  ,
                                                                                                                                        int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutex_setprioceiling LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:385 */

/* BEGIN FUNCTION-DECL-EXTERN pclose LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:228 */
extern int pclose(FILE * )  __attribute__((__availability__(swift,unavailable,message="Use posix_spawn APIs or NSTask instead."))) ;
/* END FUNCTION-DECL-EXTERN pclose LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:228 */

/* BEGIN STRUCT __darwin_zmm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:245 */
struct __darwin_zmm_reg {
   char __zmm_reg[64] ;
};
/* END STRUCT __darwin_zmm_reg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:245 */

/* BEGIN STRUCT __darwin_x86_avx512_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:833 */
struct __darwin_x86_avx512_state64 {
   int __fpu_reserved[2] ;
   struct __darwin_fp_control __fpu_fcw ;
   struct __darwin_fp_status __fpu_fsw ;
   __uint8_t __fpu_ftw ;
   __uint8_t __fpu_rsrv1 ;
   __uint16_t __fpu_fop ;
   __uint32_t __fpu_ip ;
   __uint16_t __fpu_cs ;
   __uint16_t __fpu_rsrv2 ;
   __uint32_t __fpu_dp ;
   __uint16_t __fpu_ds ;
   __uint16_t __fpu_rsrv3 ;
   __uint32_t __fpu_mxcsr ;
   __uint32_t __fpu_mxcsrmask ;
   struct __darwin_mmst_reg __fpu_stmm0 ;
   struct __darwin_mmst_reg __fpu_stmm1 ;
   struct __darwin_mmst_reg __fpu_stmm2 ;
   struct __darwin_mmst_reg __fpu_stmm3 ;
   struct __darwin_mmst_reg __fpu_stmm4 ;
   struct __darwin_mmst_reg __fpu_stmm5 ;
   struct __darwin_mmst_reg __fpu_stmm6 ;
   struct __darwin_mmst_reg __fpu_stmm7 ;
   struct __darwin_xmm_reg __fpu_xmm0 ;
   struct __darwin_xmm_reg __fpu_xmm1 ;
   struct __darwin_xmm_reg __fpu_xmm2 ;
   struct __darwin_xmm_reg __fpu_xmm3 ;
   struct __darwin_xmm_reg __fpu_xmm4 ;
   struct __darwin_xmm_reg __fpu_xmm5 ;
   struct __darwin_xmm_reg __fpu_xmm6 ;
   struct __darwin_xmm_reg __fpu_xmm7 ;
   struct __darwin_xmm_reg __fpu_xmm8 ;
   struct __darwin_xmm_reg __fpu_xmm9 ;
   struct __darwin_xmm_reg __fpu_xmm10 ;
   struct __darwin_xmm_reg __fpu_xmm11 ;
   struct __darwin_xmm_reg __fpu_xmm12 ;
   struct __darwin_xmm_reg __fpu_xmm13 ;
   struct __darwin_xmm_reg __fpu_xmm14 ;
   struct __darwin_xmm_reg __fpu_xmm15 ;
   char __fpu_rsrv4[96] ;
   int __fpu_reserved1 ;
   char __avx_reserved1[64] ;
   struct __darwin_xmm_reg __fpu_ymmh0 ;
   struct __darwin_xmm_reg __fpu_ymmh1 ;
   struct __darwin_xmm_reg __fpu_ymmh2 ;
   struct __darwin_xmm_reg __fpu_ymmh3 ;
   struct __darwin_xmm_reg __fpu_ymmh4 ;
   struct __darwin_xmm_reg __fpu_ymmh5 ;
   struct __darwin_xmm_reg __fpu_ymmh6 ;
   struct __darwin_xmm_reg __fpu_ymmh7 ;
   struct __darwin_xmm_reg __fpu_ymmh8 ;
   struct __darwin_xmm_reg __fpu_ymmh9 ;
   struct __darwin_xmm_reg __fpu_ymmh10 ;
   struct __darwin_xmm_reg __fpu_ymmh11 ;
   struct __darwin_xmm_reg __fpu_ymmh12 ;
   struct __darwin_xmm_reg __fpu_ymmh13 ;
   struct __darwin_xmm_reg __fpu_ymmh14 ;
   struct __darwin_xmm_reg __fpu_ymmh15 ;
   struct __darwin_opmask_reg __fpu_k0 ;
   struct __darwin_opmask_reg __fpu_k1 ;
   struct __darwin_opmask_reg __fpu_k2 ;
   struct __darwin_opmask_reg __fpu_k3 ;
   struct __darwin_opmask_reg __fpu_k4 ;
   struct __darwin_opmask_reg __fpu_k5 ;
   struct __darwin_opmask_reg __fpu_k6 ;
   struct __darwin_opmask_reg __fpu_k7 ;
   struct __darwin_ymm_reg __fpu_zmmh0 ;
   struct __darwin_ymm_reg __fpu_zmmh1 ;
   struct __darwin_ymm_reg __fpu_zmmh2 ;
   struct __darwin_ymm_reg __fpu_zmmh3 ;
   struct __darwin_ymm_reg __fpu_zmmh4 ;
   struct __darwin_ymm_reg __fpu_zmmh5 ;
   struct __darwin_ymm_reg __fpu_zmmh6 ;
   struct __darwin_ymm_reg __fpu_zmmh7 ;
   struct __darwin_ymm_reg __fpu_zmmh8 ;
   struct __darwin_ymm_reg __fpu_zmmh9 ;
   struct __darwin_ymm_reg __fpu_zmmh10 ;
   struct __darwin_ymm_reg __fpu_zmmh11 ;
   struct __darwin_ymm_reg __fpu_zmmh12 ;
   struct __darwin_ymm_reg __fpu_zmmh13 ;
   struct __darwin_ymm_reg __fpu_zmmh14 ;
   struct __darwin_ymm_reg __fpu_zmmh15 ;
   struct __darwin_zmm_reg __fpu_zmm16 ;
   struct __darwin_zmm_reg __fpu_zmm17 ;
   struct __darwin_zmm_reg __fpu_zmm18 ;
   struct __darwin_zmm_reg __fpu_zmm19 ;
   struct __darwin_zmm_reg __fpu_zmm20 ;
   struct __darwin_zmm_reg __fpu_zmm21 ;
   struct __darwin_zmm_reg __fpu_zmm22 ;
   struct __darwin_zmm_reg __fpu_zmm23 ;
   struct __darwin_zmm_reg __fpu_zmm24 ;
   struct __darwin_zmm_reg __fpu_zmm25 ;
   struct __darwin_zmm_reg __fpu_zmm26 ;
   struct __darwin_zmm_reg __fpu_zmm27 ;
   struct __darwin_zmm_reg __fpu_zmm28 ;
   struct __darwin_zmm_reg __fpu_zmm29 ;
   struct __darwin_zmm_reg __fpu_zmm30 ;
   struct __darwin_zmm_reg __fpu_zmm31 ;
};
/* END STRUCT __darwin_x86_avx512_state64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:833 */

/* BEGIN FUNCTION-DECL-EXTERN alarm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:432 */
extern unsigned int alarm(unsigned int  ) ;
/* END FUNCTION-DECL-EXTERN alarm LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:432 */

/* BEGIN FUNCTION-DECL __builtin_ia32_unpckhps LOC=BUILTIN */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_unpckhps(float __attribute__((____vector_size____(16)))   ,
                                                                           float __attribute__((____vector_size____(16)))   ) ;  */
/* END FUNCTION-DECL __builtin_ia32_unpckhps LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN cgetustr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:290 */
extern int cgetustr(char * , char const   * , char ** ) ;
/* END FUNCTION-DECL-EXTERN cgetustr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:290 */

/* BEGIN FUNCTION-DECL-EXTERN strmode LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:164 */
extern void strmode(int __mode , char *__bp ) ;
/* END FUNCTION-DECL-EXTERN strmode LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:164 */

/* BEGIN FUNCTION-DECL-EXTERN __sprintf_chk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_stdio.h:42 */
extern int __sprintf_chk(char * __restrict   , int  , size_t  , char const   * __restrict   
                         , ...) ;
/* END FUNCTION-DECL-EXTERN __sprintf_chk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_stdio.h:42 */

/* BEGIN FUNCTION-DECL-EXTERN timelocal LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:137 */
extern time_t timelocal(struct tm * const   ) ;
/* END FUNCTION-DECL-EXTERN timelocal LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:137 */

/* BEGIN FUNCTION-DECL-EXTERN ctime_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:126 */
extern char *ctime_r(time_t const   * , char * ) ;
/* END FUNCTION-DECL-EXTERN ctime_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:126 */

/* BEGIN TYPEDEF fixpt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:105 */
typedef u_int32_t fixpt_t;
/* END TYPEDEF fixpt_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:105 */

/* BEGIN FUNCTION-DECL __builtin_ffsll LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_ffsll(unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_ffsll LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN shm_unlink LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:237 */
extern int shm_unlink(char const   * ) ;
/* END FUNCTION-DECL-EXTERN shm_unlink LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:237 */

/* BEGIN TYPEDEF uint_least64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:36 */
typedef uint64_t uint_least64_t;
/* END TYPEDEF uint_least64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:36 */

/* BEGIN FUNCTION-DECL _cipher$_xtea_encipherBlock LOC=UNKNOWN */
void _cipher$_xtea_encipherBlock(unsigned int num_rounds , unsigned int *v , unsigned int *key ) ;
/* END FUNCTION-DECL _cipher$_xtea_encipherBlock LOC=UNKNOWN */

/* BEGIN TYPEDEF u_char LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_char.h:30 */
typedef unsigned char u_char;
/* END TYPEDEF u_char LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_u_char.h:30 */

/* BEGIN FUNCTION-DECL-EXTERN setkey LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:239 */
extern void setkey(char const   * )  __asm__("_setkey")  ;
/* END FUNCTION-DECL-EXTERN setkey LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:239 */

/* BEGIN FUNCTION-DECL __builtin_powil LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_powil(long double  , int  ) ;  */
/* END FUNCTION-DECL __builtin_powil LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_sqrtl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_sqrtl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_sqrtl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN getdelim LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:354 */
extern ssize_t getdelim(char ** __restrict  __linep , size_t * __restrict  __linecapp ,
                        int __delimiter , FILE * __restrict  __stream )  __attribute__((__availability__(macosx,introduced=10.7))) ;
/* END FUNCTION-DECL-EXTERN getdelim LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:354 */

/* BEGIN FUNCTION-DECL-EXTERN access LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:431 */
extern int access(char const   * , int  ) ;
/* END FUNCTION-DECL-EXTERN access LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:431 */

/* BEGIN FUNCTION-DECL-EXTERN gethostid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:551 */
extern long gethostid(void) ;
/* END FUNCTION-DECL-EXTERN gethostid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:551 */

/* BEGIN FUNCTION-DECL-EXTERN ftrylockfile LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:287 */
extern int ftrylockfile(FILE * ) ;
/* END FUNCTION-DECL-EXTERN ftrylockfile LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:287 */

/* BEGIN FUNCTION-DECL jit_trace LOC=UNKNOWN */
void jit_trace(struct jit *jit , int verbosity ) ;
/* END FUNCTION-DECL jit_trace LOC=UNKNOWN */

/* BEGIN VARIABLE-DEF __4_fib___t LOC=UNKNOWN */
char const   *__4_fib___t  =    "";
/* END VARIABLE-DEF __4_fib___t LOC=UNKNOWN */

/* BEGIN TYPEDEF rune_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_rune_t.h:31 */
typedef __darwin_rune_t rune_t;
/* END TYPEDEF rune_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_rune_t.h:31 */

/* BEGIN FUNCTION-DECL __builtin_nansf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_nansf(char const   * ) ;  */
/* END FUNCTION-DECL __builtin_nansf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN __assert_rtn LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/assert.h:76 */
extern  __attribute__((__noreturn__)) void __assert_rtn(char const   * , char const   * ,
                                                        int  , char const   * )  __attribute__((__disable_tail_calls__,
__cold__)) ;
/* END FUNCTION-DECL-EXTERN __assert_rtn LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/assert.h:76 */

/* BEGIN FUNCTION-DECL-EXTERN fgetpos LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:148 */
extern int fgetpos(FILE * __restrict   , fpos_t * ) ;
/* END FUNCTION-DECL-EXTERN fgetpos LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:148 */

/* BEGIN FUNCTION-DECL-EXTERN getgrouplist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:650 */
extern int getgrouplist(char const   * , int  , int * , int * ) ;
/* END FUNCTION-DECL-EXTERN getgrouplist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:650 */

/* BEGIN FUNCTION-DECL-EXTERN fgetc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:147 */
extern int fgetc(FILE * ) ;
/* END FUNCTION-DECL-EXTERN fgetc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:147 */

/* BEGIN FUNCTION-DECL __builtin_ctzl LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_ctzl(unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_ctzl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_shift_op LOC=UNKNOWN */
static void emit_shift_op(struct jit *jit , struct jit_op *op , int shift_op , int imm ) ;
/* END FUNCTION-DECL emit_shift_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN feof LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:144 */
extern int feof(FILE * ) ;
/* END FUNCTION-DECL-EXTERN feof LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:144 */

/* BEGIN FUNCTION-DECL-EXTERN putchar LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:172 */
extern int putchar(int  ) ;
/* END FUNCTION-DECL-EXTERN putchar LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:172 */

/* BEGIN FUNCTION-DECL-EXTERN srandomdev LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:348 */
extern void srandomdev(void) ;
/* END FUNCTION-DECL-EXTERN srandomdev LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:348 */

/* BEGIN FUNCTION-DECL __builtin___sprintf_chk LOC=BUILTIN */
/* compiler builtin: 
   int __builtin___sprintf_chk(char * , int  , unsigned long  , char const   *  , ...) ;  */
/* END FUNCTION-DECL __builtin___sprintf_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_dead_code_analysis LOC=UNKNOWN */
static void jit_dead_code_analysis(struct jit *jit , int remove_dead_code ) ;
/* END FUNCTION-DECL jit_dead_code_analysis LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN scanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:177 */
extern int ( /* format attribute */  scanf)(char const   * __restrict    , ...) ;
/* END FUNCTION-DECL-EXTERN scanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:177 */

/* BEGIN FUNCTION-DECL rmap_sync LOC=UNKNOWN */
static void rmap_sync(jit_op *op , jit_rmap *current , jit_rmap *target , int mode ) ;
/* END FUNCTION-DECL rmap_sync LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN fsync_volume_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:779 */
extern int fsync_volume_np(int  , int  )  __attribute__((__availability__(macosx,introduced=10.8))) ;
/* END FUNCTION-DECL-EXTERN fsync_volume_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:779 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlock_rdlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:448 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_rdlock(pthread_rwlock_t * )  __asm__("_pthread_rwlock_rdlock")  ;
/* END FUNCTION-DECL-EXTERN pthread_rwlock_rdlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:448 */

/* BEGIN FUNCTION-DECL __builtin_ldexpf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_ldexpf(float  , int  ) ;  */
/* END FUNCTION-DECL __builtin_ldexpf LOC=BUILTIN */

/* BEGIN VARIABLE-DEF __2_init_tigress_1_opaque_ptr_2 LOC=UNKNOWN */
struct __2_init_tigress_1_opaque_NodeStruct *__2_init_tigress_1_opaque_ptr_2  =    (struct __2_init_tigress_1_opaque_NodeStruct *)0;
/* END VARIABLE-DEF __2_init_tigress_1_opaque_ptr_2 LOC=UNKNOWN */

/* BEGIN STRUCT __darwin_mcontext64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:97 */
struct __darwin_mcontext64 {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_state64 __ss ;
   struct __darwin_x86_float_state64 __fs ;
};
/* END STRUCT __darwin_mcontext64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:97 */

/* BEGIN FUNCTION-DECL-EXTERN fflush LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:146 */
extern int fflush(FILE * ) ;
/* END FUNCTION-DECL-EXTERN fflush LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:146 */

/* BEGIN FUNCTION-DECL-EXTERN puts LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:173 */
extern int puts(char const   * ) ;
/* END FUNCTION-DECL-EXTERN puts LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:173 */

/* BEGIN FUNCTION-DECL-EXTERN memcpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:72 */
extern void *memcpy(void *__dst , void const   *__src , size_t __n ) ;
/* END FUNCTION-DECL-EXTERN memcpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:72 */

/* BEGIN TYPEDEF intptr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_intptr_t.h:32 */
typedef __darwin_intptr_t intptr_t;
/* END TYPEDEF intptr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_intptr_t.h:32 */

/* BEGIN FUNCTION-DECL-EXTERN chdir LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:434 */
extern int chdir(char const   * ) ;
/* END FUNCTION-DECL-EXTERN chdir LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:434 */

/* BEGIN FUNCTION-DECL __builtin_asinl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_asinl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_asinl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN fmemopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:356 */
extern FILE *fmemopen(void * __restrict  __buf , size_t __size , char const   * __restrict  __mode )  __attribute__((__availability__(watchos,introduced=4.0),
__availability__(tvos,introduced=11.0), __availability__(ios,introduced=11.0), __availability__(macos,introduced=10.13))) ;
/* END FUNCTION-DECL-EXTERN fmemopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:356 */

/* BEGIN FUNCTION-DECL rmap_init LOC=UNKNOWN */
__inline static jit_rmap *rmap_init(void) ;
/* END FUNCTION-DECL rmap_init LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN geteuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:451 */
extern uid_t geteuid(void) ;
/* END FUNCTION-DECL-EXTERN geteuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:451 */

/* BEGIN FUNCTION-DECL-EXTERN syscall LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:737 */
extern int __attribute__((__availability__(macosx,deprecated=10.12,message="syscall(2) is unsupported; please switch to a supported interface. For SYS_kdebug_trace use kdebug_signpost()."),
__availability__(ios,deprecated=10.0,message="syscall(2) is unsupported; please switch to a supported interface. For SYS_kdebug_trace use kdebug_signpost()."),
__availability__(tvos,unavailable), __availability__(watchos,unavailable)))  syscall(int  
                                                                                     , ...) ;
/* END FUNCTION-DECL-EXTERN syscall LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:737 */

/* BEGIN FUNCTION-DECL init_tigress LOC=UNKNOWN */
void init_tigress(void) ;
/* END FUNCTION-DECL init_tigress LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL emit_sse_round LOC=UNKNOWN */
static void emit_sse_round(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) ;
/* END FUNCTION-DECL emit_sse_round LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN clock_getres LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:174 */
extern int __attribute__((__availability__(watchos,introduced=3.0), __availability__(tvos,introduced=10.0),
__availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12)))  clock_getres(clockid_t __clock_id ,
                                                                                                 struct timespec *__res ) ;
/* END FUNCTION-DECL-EXTERN clock_getres LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:174 */

/* BEGIN STRUCT __darwin_mcontext_avx512_64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:138 */
struct __darwin_mcontext_avx512_64_full {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_full_state64 __ss ;
   struct __darwin_x86_avx512_state64 __fs ;
};
/* END STRUCT __darwin_mcontext_avx512_64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:138 */

/* BEGIN FUNCTION-DECL-EXTERN minherit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:244 */
extern int minherit(void * , size_t  , int  ) ;
/* END FUNCTION-DECL-EXTERN minherit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:244 */

/* BEGIN FUNCTION-DECL emit_sse_get_sign_mask LOC=UNKNOWN */
static unsigned char *emit_sse_get_sign_mask(void) ;
/* END FUNCTION-DECL emit_sse_get_sign_mask LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_parityll LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_parityll(unsigned long long  ) ;  */
/* END FUNCTION-DECL __builtin_parityll LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_get_stacksize_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:523 */
extern size_t __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  pthread_get_stacksize_np(pthread_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_get_stacksize_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:523 */

/* BEGIN FUNCTION-DECL _OSSwapInt32 LOC=UNKNOWN */
__inline static __uint32_t _OSSwapInt32(__uint32_t _data ) ;
/* END FUNCTION-DECL _OSSwapInt32 LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL _cipher$_xtea_encipher LOC=UNKNOWN */
void _cipher$_xtea_encipher(unsigned int block_no , unsigned int num_rounds , unsigned int *v ,
                            unsigned int *key , unsigned int size ) ;
/* END FUNCTION-DECL _cipher$_xtea_encipher LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN clock_gettime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:177 */
extern int __attribute__((__availability__(watchos,introduced=3.0), __availability__(tvos,introduced=10.0),
__availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12)))  clock_gettime(clockid_t __clock_id ,
                                                                                                  struct timespec *__tp ) ;
/* END FUNCTION-DECL-EXTERN clock_gettime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:177 */

/* BEGIN TYPEDEF __darwin_uuid_string_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:78 */
typedef char __darwin_uuid_string_t[37];
/* END TYPEDEF __darwin_uuid_string_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types.h:78 */

/* BEGIN TYPEDEF rusage_info_current LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:321 */
typedef struct rusage_info_v4 rusage_info_current;
/* END TYPEDEF rusage_info_current LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:321 */

/* BEGIN FUNCTION-DECL funcall_fput_arg LOC=UNKNOWN */
__inline static void funcall_fput_arg(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL funcall_fput_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_data_bytes LOC=UNKNOWN */
jit_op *jit_data_bytes(struct jit *jit , jit_value count , unsigned char *data ) ;
/* END FUNCTION-DECL jit_data_bytes LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN llabs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:151 */
extern long long llabs(long long  ) ;
/* END FUNCTION-DECL-EXTERN llabs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:151 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlock_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:440 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_destroy(pthread_rwlock_t * )  __asm__("_pthread_rwlock_destroy")  ;
/* END FUNCTION-DECL-EXTERN pthread_rwlock_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:440 */

/* BEGIN VARIABLE-DEF x05 LOC=UNKNOWN */
static double x05  ;
/* END VARIABLE-DEF x05 LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_condattr_setpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:327 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_condattr_setpshared(pthread_condattr_t * ,
                                                                                                                                       int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_condattr_setpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:327 */

/* BEGIN FUNCTION-DECL-EXTERN munmap LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:234 */
extern int munmap(void * , size_t  )  __asm__("_munmap")  ;
/* END FUNCTION-DECL-EXTERN munmap LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:234 */

/* BEGIN FUNCTION-DECL emit_memset LOC=UNKNOWN */
static void emit_memset(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                        jit_value a3 , int block_size ) ;
/* END FUNCTION-DECL emit_memset LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN strncat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:83 */
extern char *strncat(char *__s1 , char const   *__s2 , size_t __n ) ;
/* END FUNCTION-DECL-EXTERN strncat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:83 */

/* BEGIN FUNCTION-DECL __builtin_floorl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_floorl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_floorl LOC=BUILTIN */

/* BEGIN VARIABLE-DEF bufx LOC=UNKNOWN */
static unsigned char bufx[32]  ;
/* END VARIABLE-DEF bufx LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_check_code LOC=UNKNOWN */
void jit_check_code(struct jit *jit , int warnings ) ;
/* END FUNCTION-DECL jit_check_code LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL platform_id LOC=UNKNOWN */
static char *platform_id(void) ;
/* END FUNCTION-DECL platform_id LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_getname_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:509 */
extern int __attribute__((__availability__(ios,introduced=3.2), __availability__(macos,introduced=10.6)))  pthread_getname_np(pthread_t  ,
                                                                                                                              char * ,
                                                                                                                              size_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_getname_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:509 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_getpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:406 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_getpshared(pthread_mutexattr_t const   * __restrict   ,
                                                                                                                                        int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_getpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:406 */

/* BEGIN FUNCTION-DECL __builtin_popcount LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_popcount(unsigned int  ) ;  */
/* END FUNCTION-DECL __builtin_popcount LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN lldiv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:153 */
extern lldiv_t lldiv(long long  , long long  ) ;
/* END FUNCTION-DECL-EXTERN lldiv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:153 */

/* BEGIN FUNCTION-DECL __builtin_varargs_start LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_varargs_start(__builtin_va_list  ) ;  */
/* END FUNCTION-DECL __builtin_varargs_start LOC=BUILTIN */

/* BEGIN FUNCTION-DECL valid_size LOC=UNKNOWN */
static int valid_size(int size ) ;
/* END FUNCTION-DECL valid_size LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL branch_adjustment LOC=UNKNOWN */
__inline static void branch_adjustment(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL branch_adjustment LOC=UNKNOWN */

/* BEGIN STRUCT jit_debug_info LOC=./jitter-amd64.c:634 */
struct jit_debug_info {
   char const   *filename ;
   char const   *function ;
   int lineno ;
   int warnings ;
};
/* END STRUCT jit_debug_info LOC=./jitter-amd64.c:634 */

/* BEGIN STRUCT __darwin_mcontext64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:105 */
struct __darwin_mcontext64_full {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_full_state64 __ss ;
   struct __darwin_x86_float_state64 __fs ;
};
/* END STRUCT __darwin_mcontext64_full LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:105 */

/* BEGIN FUNCTION-DECL __builtin_tanhl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_tanhl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_tanhl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_memset LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_memset(void * , int  , int  ) ;  */
/* END FUNCTION-DECL __builtin_memset LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_add_fop LOC=UNKNOWN */
struct jit_op *jit_add_fop(struct jit *jit , unsigned short code , unsigned char spec ,
                           long arg1 , long arg2 , long arg3 , double flt_imm , unsigned char arg_size ,
                           struct jit_debug_info *debug_info ) ;
/* END FUNCTION-DECL jit_add_fop LOC=UNKNOWN */

/* BEGIN TYPEDEF X86_SSE_CmpCode LOC=./jitter-amd64.c:1291 */
typedef enum __anonenum_X86_SSE_CmpCode_848838535 X86_SSE_CmpCode;
/* END TYPEDEF X86_SSE_CmpCode LOC=./jitter-amd64.c:1291 */

/* BEGIN FUNCTION-DECL-EXTERN __toupper LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:188 */
extern __darwin_ct_rune_t __toupper(__darwin_ct_rune_t  ) ;
/* END FUNCTION-DECL-EXTERN __toupper LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:188 */

/* BEGIN FUNCTION-DECL-EXTERN cgetset LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:288 */
extern int cgetset(char const   * ) ;
/* END FUNCTION-DECL-EXTERN cgetset LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:288 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_getprioceiling LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:398 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_getprioceiling(pthread_mutexattr_t const   * __restrict   ,
                                                                                                                                            int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_getprioceiling LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:398 */

/* BEGIN FUNCTION-DECL-EXTERN ispunct LOC=UNKNOWN */
__inline extern int ispunct(int _c ) ;
/* END FUNCTION-DECL-EXTERN ispunct LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL _OSSwapInt64 LOC=UNKNOWN */
__inline static __uint64_t _OSSwapInt64(__uint64_t _data ) ;
/* END FUNCTION-DECL _OSSwapInt64 LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN symlinkat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:211 */
extern int symlinkat(char const   * , int  , char const   * )  __attribute__((__availability__(macosx,introduced=10.10))) ;
/* END FUNCTION-DECL-EXTERN symlinkat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:211 */

/* BEGIN FUNCTION-DECL-EXTERN gettimeofday LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:197 */
extern int gettimeofday(struct timeval * __restrict   , void * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN gettimeofday LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:197 */

/* BEGIN FUNCTION-DECL-EXTERN devname_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:294 */
extern char *devname_r(dev_t  , mode_t  , char *buf , int len ) ;
/* END FUNCTION-DECL-EXTERN devname_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:294 */

/* BEGIN FUNCTION-DECL __builtin_atan LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_atan(double  ) ;  */
/* END FUNCTION-DECL __builtin_atan LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN getgid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:452 */
extern gid_t getgid(void) ;
/* END FUNCTION-DECL-EXTERN getgid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:452 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_key_delete LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:368 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_key_delete(pthread_key_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_key_delete LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:368 */

/* BEGIN STRUCT jit_reg_allocator LOC=./jitter-amd64.c:529 */
struct jit_reg_allocator {
   int gp_reg_cnt ;
   int fp_reg_cnt ;
   int fp_reg ;
   int gp_arg_reg_cnt ;
   int fp_arg_reg_cnt ;
   jit_hw_reg *ret_reg ;
   jit_hw_reg *fpret_reg ;
   jit_hw_reg *gp_regs ;
   jit_hw_reg *fp_regs ;
   jit_hw_reg **gp_arg_regs ;
   jit_hw_reg **fp_arg_regs ;
   struct jit_func_info *current_func_info ;
};
/* END STRUCT jit_reg_allocator LOC=./jitter-amd64.c:529 */

/* BEGIN FUNCTION-DECL-EXTERN funopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:384 */
extern FILE *funopen(void const   * , int (* _Nullable  )(void * , char * , int  ) ,
                     int (* _Nullable  )(void * , char const   * , int  ) , fpos_t (* _Nullable  )(void * ,
                                                                                                   fpos_t  ,
                                                                                                   int  ) ,
                     int (* _Nullable  )(void * ) ) ;
/* END FUNCTION-DECL-EXTERN funopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:384 */

/* BEGIN FUNCTION-DECL rmap_is_associated LOC=UNKNOWN */
static jit_hw_reg *rmap_is_associated(jit_rmap *rmap , int reg_id , int fp , jit_value *virt_reg ) ;
/* END FUNCTION-DECL rmap_is_associated LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN cgetstr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:289 */
extern int cgetstr(char * , char const   * , char ** ) ;
/* END FUNCTION-DECL-EXTERN cgetstr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:289 */

/* BEGIN TYPEDEF caddr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_caddr_t.h:30 */
typedef char *caddr_t;
/* END TYPEDEF caddr_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_caddr_t.h:30 */

/* BEGIN ENUM __anonenum_321777801 LOC=./jitter-amd64.c:1069 */
enum __anonenum_321777801 {
    X86_FPCW_INVOPEX_MASK = 1,
    X86_FPCW_DENOPEX_MASK = 2,
    X86_FPCW_ZERODIV_MASK = 4,
    X86_FPCW_OVFEX_MASK = 8,
    X86_FPCW_UNDFEX_MASK = 16,
    X86_FPCW_PRECEX_MASK = 32,
    X86_FPCW_PRECC_MASK = 768,
    X86_FPCW_ROUNDC_MASK = 3072,
    X86_FPCW_PREC_SINGLE = 0,
    X86_FPCW_PREC_DOUBLE = 512,
    X86_FPCW_PREC_EXTENDED = 768,
    X86_FPCW_ROUND_NEAREST = 0,
    X86_FPCW_ROUND_DOWN = 1024,
    X86_FPCW_ROUND_UP = 2048,
    X86_FPCW_ROUND_TOZERO = 3072
} ;
/* END ENUM __anonenum_321777801 LOC=./jitter-amd64.c:1069 */

/* BEGIN FUNCTION-DECL __builtin_powif LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_powif(float  , int  ) ;  */
/* END FUNCTION-DECL __builtin_powif LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN strftime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:116 */
extern size_t strftime(char * __restrict   , size_t  , char const   * __restrict   ,
                       struct tm  const  * __restrict   )  __asm__("_strftime")  ;
/* END FUNCTION-DECL-EXTERN strftime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:116 */

/* BEGIN FUNCTION-DECL-EXTERN __wcwidth LOC=UNKNOWN */
__inline extern int __wcwidth(__darwin_ct_rune_t _c ) ;
/* END FUNCTION-DECL-EXTERN __wcwidth LOC=UNKNOWN */

/* BEGIN STRUCT timezone LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:129 */
struct timezone {
   int tz_minuteswest ;
   int tz_dsttime ;
};
/* END STRUCT timezone LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:129 */

/* BEGIN FUNCTION-DECL-EXTERN getpgid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:552 */
extern pid_t getpgid(pid_t  ) ;
/* END FUNCTION-DECL-EXTERN getpgid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:552 */

/* BEGIN FUNCTION-DECL-EXTERN getbsize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:295 */
extern char *getbsize(int * , long * ) ;
/* END FUNCTION-DECL-EXTERN getbsize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:295 */

/* BEGIN FUNCTION-DECL-EXTERN setruid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:726 */
extern int setruid(uid_t  ) ;
/* END FUNCTION-DECL-EXTERN setruid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:726 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_is_threaded_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:502 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_is_threaded_np(void) ;
/* END FUNCTION-DECL-EXTERN pthread_is_threaded_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:502 */

/* BEGIN FUNCTION-DECL emit_sse_floor LOC=UNKNOWN */
static void emit_sse_floor(struct jit *jit , jit_value a1 , jit_value a2 , int floor ) ;
/* END FUNCTION-DECL emit_sse_floor LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN getppid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:461 */
extern pid_t getppid(void) ;
/* END FUNCTION-DECL-EXTERN getppid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:461 */

/* BEGIN FUNCTION-DECL-EXTERN renameat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/stdio.h:39 */
extern int renameat(int  , char const   * , int  , char const   * )  __attribute__((__availability__(macosx,introduced=10.10))) ;
/* END FUNCTION-DECL-EXTERN renameat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/stdio.h:39 */

/* BEGIN FUNCTION-DECL print_load_op LOC=UNKNOWN */
static int print_load_op(struct jit_disasm *disasm , struct output_buf *linebuf ,
                         jit_op *op ) ;
/* END FUNCTION-DECL print_load_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_frexp LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_frexp(double  , int * ) ;  */
/* END FUNCTION-DECL __builtin_frexp LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlockattr_getpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:466 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlockattr_getpshared(pthread_rwlockattr_t const   * __restrict   ,
                                                                                                                                         int * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_rwlockattr_getpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:466 */

/* BEGIN FUNCTION-DECL rmap_sync_aux LOC=UNKNOWN */
static void rmap_sync_aux(jit_tree *current , jit_tree *target , jit_op *op , int mode ) ;
/* END FUNCTION-DECL rmap_sync_aux LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN mkstemp_dprotected_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:683 */
extern int mkstemp_dprotected_np(char *path , int dpclass , int dpflags )  __attribute__((__availability__(watchos,introduced=3.0),
__availability__(tvos,introduced=10.0), __availability__(ios,introduced=10.0), __availability__(macosx,unavailable))) ;
/* END FUNCTION-DECL-EXTERN mkstemp_dprotected_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:683 */

/* BEGIN FUNCTION-DECL-EXTERN strtoul LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:174 */
extern unsigned long strtoul(char const   *__str , char **__endptr , int __base ) ;
/* END FUNCTION-DECL-EXTERN strtoul LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:174 */

/* BEGIN FUNCTION-DECL-EXTERN strcoll LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:78 */
extern int strcoll(char const   *__s1 , char const   *__s2 ) ;
/* END FUNCTION-DECL-EXTERN strcoll LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:78 */

/* BEGIN FUNCTION-DECL-EXTERN popen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:232 */
extern FILE *popen(char const   * , char const   * )  __asm__("_popen") __attribute__((__availability__(swift,unavailable,message="Use posix_spawn APIs or NSTask instead."))) ;
/* END FUNCTION-DECL-EXTERN popen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:232 */

/* BEGIN FUNCTION-DECL __builtin_exp LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_exp(double  ) ;  */
/* END FUNCTION-DECL __builtin_exp LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN mktemp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:216 */
extern char *mktemp(char * ) ;
/* END FUNCTION-DECL-EXTERN mktemp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:216 */

/* BEGIN FUNCTION-DECL-EXTERN nrand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:219 */
extern long nrand48(unsigned short * )  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
/* END FUNCTION-DECL-EXTERN nrand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:219 */

/* BEGIN FUNCTION-DECL print_str LOC=UNKNOWN */
__inline static void print_str(struct output_buf *buf , char *str ) ;
/* END FUNCTION-DECL print_str LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL print_reg_liveness_callback LOC=UNKNOWN */
static void print_reg_liveness_callback(jit_tree_key key , jit_tree_value value ,
                                        void *disasm ) ;
/* END FUNCTION-DECL print_reg_liveness_callback LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL uses_hw_reg LOC=UNKNOWN */
static int uses_hw_reg(struct jit_op *op , jit_value reg , int fp ) ;
/* END FUNCTION-DECL uses_hw_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_tree_free LOC=UNKNOWN */
static void jit_tree_free(jit_tree *h ) ;
/* END FUNCTION-DECL jit_tree_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL rmap_equal LOC=UNKNOWN */
static int rmap_equal(jit_op *op , jit_rmap *current , jit_rmap *target ) ;
/* END FUNCTION-DECL rmap_equal LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_socklen_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:118 */
typedef __uint32_t __darwin_socklen_t;
/* END TYPEDEF __darwin_socklen_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:118 */

/* BEGIN FUNCTION-DECL emit_ureg LOC=UNKNOWN */
static void emit_ureg(struct jit *jit , jit_value vreg , int hreg_id ) ;
/* END FUNCTION-DECL emit_ureg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL stack_fparg_pos LOC=UNKNOWN */
__inline static int stack_fparg_pos(struct jit *jit , struct jit_func_info *info ,
                                    int arg ) ;
/* END FUNCTION-DECL stack_fparg_pos LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_is_label LOC=UNKNOWN */
__inline static int jit_is_label(struct jit *jit , void *ptr ) ;
/* END FUNCTION-DECL jit_is_label LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL emit_restore_all_regs LOC=UNKNOWN */
static void emit_restore_all_regs(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_restore_all_regs LOC=UNKNOWN */

/* BEGIN VARIABLE-DECL-EXTERN __stdoutp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:68 */
extern FILE *__stdoutp ;
/* END VARIABLE-DECL-EXTERN __stdoutp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:68 */

/* BEGIN TYPEDEF sig_atomic_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/signal.h:39 */
typedef int sig_atomic_t;
/* END TYPEDEF sig_atomic_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/signal.h:39 */

/* BEGIN FUNCTION-DECL __builtin___fprintf_chk LOC=BUILTIN */
/* compiler builtin: 
   int __builtin___fprintf_chk(void * , int  , char const   *  , ...) ;  */
/* END FUNCTION-DECL __builtin___fprintf_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_generate_code LOC=UNKNOWN */
void jit_generate_code(struct jit *jit ) ;
/* END FUNCTION-DECL jit_generate_code LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL generic_push_caller_saved_regs LOC=UNKNOWN */
static int generic_push_caller_saved_regs(struct jit *jit , jit_op *op , int reg_count ,
                                          jit_hw_reg *regs , int fp , jit_hw_reg *skip_reg ,
                                          int stack_offset ) ;
/* END FUNCTION-DECL generic_push_caller_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_bswap16 LOC=BUILTIN */
/* compiler builtin: 
   short __builtin_bswap16(short  ) ;  */
/* END FUNCTION-DECL __builtin_bswap16 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN ishexnumber LOC=UNKNOWN */
__inline extern int ishexnumber(int _c ) ;
/* END FUNCTION-DECL-EXTERN ishexnumber LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN memset_pattern8 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:157 */
extern void memset_pattern8(void *__b , void const   *__pattern8 , size_t __len )  __attribute__((__availability__(macosx,introduced=10.5))) ;
/* END FUNCTION-DECL-EXTERN memset_pattern8 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:157 */

/* BEGIN FUNCTION-DECL-EXTERN _Exit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:198 */
extern  __attribute__((__noreturn__)) void _Exit(int  ) ;
/* END FUNCTION-DECL-EXTERN _Exit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:198 */

/* BEGIN FUNCTION-DECL-EXTERN write LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:496 */
extern ssize_t write(int __fd , void const   *__buf , size_t __nbyte )  __asm__("_write")  ;
/* END FUNCTION-DECL-EXTERN write LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:496 */

/* BEGIN TYPEDEF uuid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uuid_t.h:31 */
typedef __darwin_uuid_t uuid_t;
/* END TYPEDEF uuid_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_uuid_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN sethostname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:717 */
extern int sethostname(char const   * , int  ) ;
/* END FUNCTION-DECL-EXTERN sethostname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:717 */

/* BEGIN VARIABLE-DEF __3_fib_$strings LOC=UNKNOWN */
char const   *__3_fib_$strings  =    "fib(%i)=%i\n\000";
/* END VARIABLE-DEF __3_fib_$strings LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN strsignal LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:134 */
extern char *strsignal(int __sig ) ;
/* END FUNCTION-DECL-EXTERN strsignal LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:134 */

/* BEGIN FUNCTION-DECL-EXTERN srand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:244 */
extern void srand48(long  ) ;
/* END FUNCTION-DECL-EXTERN srand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:244 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_once LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:436 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4),
__availability__(swift,unavailable,message="Use lazily initialized globals instead")))  pthread_once(pthread_once_t * ,
                                                                                                     void (* _Nonnull  )(void) ) ;
/* END FUNCTION-DECL-EXTERN pthread_once LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:436 */

/* BEGIN UNION __anonunion_amd64_imm_buf_340631928 LOC=./jitter-amd64.c:967 */
union __anonunion_amd64_imm_buf_340631928 {
   size_t val ;
   unsigned char b[8] ;
};
/* END UNION __anonunion_amd64_imm_buf_340631928 LOC=./jitter-amd64.c:967 */

/* BEGIN FUNCTION-DECL print_arg LOC=UNKNOWN */
__inline static void print_arg(struct jit_disasm *disasm , struct output_buf *buf ,
                               struct jit_op *op , int arg ) ;
/* END FUNCTION-DECL print_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_powi LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_powi(double  , int  ) ;  */
/* END FUNCTION-DECL __builtin_powi LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN initgroups LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:665 */
extern int initgroups(char const   * , int  ) ;
/* END FUNCTION-DECL-EXTERN initgroups LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:665 */

/* BEGIN FUNCTION-DECL-EXTERN ttyname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:486 */
extern char *ttyname(int  ) ;
/* END FUNCTION-DECL-EXTERN ttyname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:486 */

/* BEGIN FUNCTION-DECL __builtin_expect LOC=BUILTIN */
/* compiler builtin: 
   long __builtin_expect(long  , long  ) ;  */
/* END FUNCTION-DECL __builtin_expect LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN rresvport LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:708 */
extern int __attribute__((__deprecated__))  rresvport(int * ) ;
/* END FUNCTION-DECL-EXTERN rresvport LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:708 */

/* BEGIN VARIABLE-DECL-EXTERN sys_nerr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:367 */
extern int const   sys_nerr ;
/* END VARIABLE-DECL-EXTERN sys_nerr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:367 */

/* BEGIN TYPEDEF uintmax_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uintmax_t.h:32 */
typedef unsigned long uintmax_t;
/* END TYPEDEF uintmax_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types/_uintmax_t.h:32 */

/* BEGIN TYPEDEF AMD64_REX_Bits LOC=./jitter-amd64.c:960 */
typedef enum __anonenum_AMD64_REX_Bits_69261688 AMD64_REX_Bits;
/* END TYPEDEF AMD64_REX_Bits LOC=./jitter-amd64.c:960 */

/* BEGIN FUNCTION-DECL-EXTERN time2posix LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:136 */
extern time_t time2posix(time_t  ) ;
/* END FUNCTION-DECL-EXTERN time2posix LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:136 */

/* BEGIN FUNCTION-DECL __builtin_va_arg_pack_len LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_va_arg_pack_len(void) ;  */
/* END FUNCTION-DECL __builtin_va_arg_pack_len LOC=BUILTIN */

/* BEGIN VARIABLE-DEF __1_entropy LOC=UNKNOWN */
unsigned long __1_entropy  =    9042506488591766566UL;
/* END VARIABLE-DEF __1_entropy LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN linkat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:209 */
extern int linkat(int  , char const   * , int  , char const   * , int  )  __attribute__((__availability__(macosx,introduced=10.10))) ;
/* END FUNCTION-DECL-EXTERN linkat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:209 */

/* BEGIN TYPEDEF ino64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ino64_t.h:31 */
typedef __darwin_ino64_t ino64_t;
/* END TYPEDEF ino64_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ino64_t.h:31 */

/* BEGIN TYPEDEF __darwin_fp_control_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:117 */
typedef struct __darwin_fp_control __darwin_fp_control_t;
/* END TYPEDEF __darwin_fp_control_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:117 */

/* BEGIN FUNCTION-DECL-EXTERN fputc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:156 */
extern int fputc(int  , FILE * ) ;
/* END FUNCTION-DECL-EXTERN fputc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:156 */

/* BEGIN FUNCTION-DECL jit_message LOC=UNKNOWN */
void jit_message(struct jit *j , char *s ) ;
/* END FUNCTION-DECL jit_message LOC=UNKNOWN */

/* BEGIN VARIABLE-DEF __1_alwaysZero LOC=UNKNOWN */
unsigned long __1_alwaysZero  =    0UL;
/* END VARIABLE-DEF __1_alwaysZero LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_set_add LOC=UNKNOWN */
__inline static void jit_set_add(jit_set *s , int value ) ;
/* END FUNCTION-DECL jit_set_add LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN symlink LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:626 */
extern int symlink(char const   * , char const   * ) ;
/* END FUNCTION-DECL-EXTERN symlink LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:626 */

/* BEGIN FUNCTION-DECL-EXTERN psort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:323 */
extern void psort(void *__base , size_t __nel , size_t __width , int (* _Nonnull  __compar)(void const   * ,
                                                                                            void const   * ) )  __attribute__((__availability__(macosx,introduced=10.6))) ;
/* END FUNCTION-DECL-EXTERN psort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:323 */

/* BEGIN FUNCTION-DECL __builtin___printf_chk LOC=BUILTIN */
/* compiler builtin: 
   int __builtin___printf_chk(int  , char const   *  , ...) ;  */
/* END FUNCTION-DECL __builtin___printf_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN setattrlistat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:189 */
extern int setattrlistat(int  , char const   * , void * , void * , size_t  , uint32_t  )  __attribute__((__availability__(watchos,introduced=4.0),
__availability__(tvos,introduced=11.0), __availability__(ios,introduced=11.0), __availability__(macosx,introduced=10.13))) ;
/* END FUNCTION-DECL-EXTERN setattrlistat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:189 */

/* BEGIN FUNCTION-DECL __builtin_acosl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_acosl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_acosl LOC=BUILTIN */

/* BEGIN ENUM __anonenum_X86_SSE_Opcode_853888746 LOC=./jitter-amd64.c:1147 */
enum __anonenum_X86_SSE_Opcode_853888746 {
    X86_SSE_SQRT = 81,
    X86_SSE_RSQRT = 82,
    X86_SSE_RCP = 83,
    X86_SSE_ADD = 88,
    X86_SSE_DIV = 94,
    X86_SSE_MUL = 89,
    X86_SSE_SUB = 92,
    X86_SSE_MIN = 93,
    X86_SSE_MAX = 95,
    X86_SSE_COMP = 194,
    X86_SSE_AND = 84,
    X86_SSE_ANDN = 85,
    X86_SSE_OR = 86,
    X86_SSE_XOR = 87,
    X86_SSE_UNPCKL = 20,
    X86_SSE_UNPCKH = 21,
    X86_SSE_ADDSUB = 208,
    X86_SSE_HADD = 124,
    X86_SSE_HSUB = 125,
    X86_SSE_MOVSHDUP = 22,
    X86_SSE_MOVSLDUP = 18,
    X86_SSE_MOVDDUP = 18,
    X86_SSE_SHUF = 198,
    X86_SSE_COMI = 47,
    X86_SSE_PAND = 219,
    X86_SSE_POR = 235,
    X86_SSE_PXOR = 239,
    X86_SSE_PADDB = 252,
    X86_SSE_PADDW = 253,
    X86_SSE_PADDD = 254,
    X86_SSE_PADDQ = 212,
    X86_SSE_PSUBB = 248,
    X86_SSE_PSUBW = 249,
    X86_SSE_PSUBD = 250,
    X86_SSE_PSUBQ = 251,
    X86_SSE_PMAXSB = 60,
    X86_SSE_PMAXSW = 238,
    X86_SSE_PMAXSD = 61,
    X86_SSE_PMAXUB = 222,
    X86_SSE_PMAXUW = 62,
    X86_SSE_PMAXUD = 63,
    X86_SSE_PMINSB = 56,
    X86_SSE_PMINSW = 234,
    X86_SSE_PMINSD = 57,
    X86_SSE_PMINUB = 218,
    X86_SSE_PMINUW = 58,
    X86_SSE_PMINUD = 59,
    X86_SSE_PAVGB = 224,
    X86_SSE_PAVGW = 227,
    X86_SSE_PCMPEQB = 116,
    X86_SSE_PCMPEQW = 117,
    X86_SSE_PCMPEQD = 118,
    X86_SSE_PCMPEQQ = 41,
    X86_SSE_PCMPGTB = 100,
    X86_SSE_PCMPGTW = 101,
    X86_SSE_PCMPGTD = 102,
    X86_SSE_PCMPGTQ = 55,
    X86_SSE_PSADBW = 246,
    X86_SSE_PSHUFD = 112,
    X86_SSE_PUNPCKLBW = 96,
    X86_SSE_PUNPCKLWD = 97,
    X86_SSE_PUNPCKLDQ = 98,
    X86_SSE_PUNPCKLQDQ = 108,
    X86_SSE_PUNPCKHBW = 104,
    X86_SSE_PUNPCKHWD = 105,
    X86_SSE_PUNPCKHDQ = 106,
    X86_SSE_PUNPCKHQDQ = 109,
    X86_SSE_PACKSSWB = 99,
    X86_SSE_PACKSSDW = 107,
    X86_SSE_PACKUSWB = 103,
    X86_SSE_PACKUSDW = 43,
    X86_SSE_PADDUSB = 220,
    X86_SSE_PADDUSW = 221,
    X86_SSE_PSUBUSB = 216,
    X86_SSE_PSUBUSW = 217,
    X86_SSE_PADDSB = 236,
    X86_SSE_PADDSW = 237,
    X86_SSE_PSUBSB = 232,
    X86_SSE_PSUBSW = 233,
    X86_SSE_PMULLW = 213,
    X86_SSE_PMULLD = 64,
    X86_SSE_PMULHUW = 228,
    X86_SSE_PMULHW = 229,
    X86_SSE_PMULUDQ = 244,
    X86_SSE_PMOVMSKB = 215,
    X86_SSE_PSHIFTW = 113,
    X86_SSE_PSHIFTD = 114,
    X86_SSE_PSHIFTQ = 115,
    X86_SSE_SHR = 2,
    X86_SSE_SAR = 4,
    X86_SSE_SHL = 6,
    X86_SSE_PSRLW_REG = 209,
    X86_SSE_PSRAW_REG = 225,
    X86_SSE_PSLLW_REG = 241,
    X86_SSE_PSRLD_REG = 210,
    X86_SSE_PSRAD_REG = 226,
    X86_SSE_PSLLD_REG = 242,
    X86_SSE_PSRLQ_REG = 211,
    X86_SSE_PSLLQ_REG = 243,
    X86_SSE_PREFETCH = 24,
    X86_SSE_MOVNTPS = 43,
    X86_SSE_MOVHPD_REG_MEMBASE = 22,
    X86_SSE_MOVHPD_MEMBASE_REG = 23,
    X86_SSE_MOVSD_REG_MEMBASE = 16,
    X86_SSE_MOVSD_MEMBASE_REG = 17,
    X86_SSE_PINSRB = 32,
    X86_SSE_PINSRW = 196,
    X86_SSE_PINSRD = 34,
    X86_SSE_PEXTRB = 20,
    X86_SSE_PEXTRW = 197,
    X86_SSE_PEXTRD = 22
} ;
/* END ENUM __anonenum_X86_SSE_Opcode_853888746 LOC=./jitter-amd64.c:1147 */

/* BEGIN STRUCT accessx_descriptor LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:132 */
struct accessx_descriptor {
   unsigned int ad_name_offset ;
   int ad_flags ;
   int ad_pad[2] ;
};
/* END STRUCT accessx_descriptor LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:132 */

/* BEGIN FUNCTION-DECL __builtin_types_compatible_p LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_types_compatible_p(unsigned long  , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_types_compatible_p LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN qsort_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:339 */
extern void qsort_r(void *__base , size_t __nel , size_t __width , void * , int (* _Nonnull  __compar)(void * ,
                                                                                                       void const   * ,
                                                                                                       void const   * ) ) ;
/* END FUNCTION-DECL-EXTERN qsort_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:339 */

/* BEGIN FUNCTION-DECL-EXTERN getpagesize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:558 */
extern int getpagesize(void)  __attribute__((__const__)) ;
/* END FUNCTION-DECL-EXTERN getpagesize LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:558 */

/* BEGIN FUNCTION-DECL jit_op_is_cflow LOC=UNKNOWN */
__inline static int jit_op_is_cflow(jit_op *op ) ;
/* END FUNCTION-DECL jit_op_is_cflow LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutexattr_setpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:427 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutexattr_setpshared(pthread_mutexattr_t * ,
                                                                                                                                        int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutexattr_setpshared LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:427 */

/* BEGIN FUNCTION-DECL-EXTERN add_profil LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:645 */
extern int add_profil(char * , size_t  , unsigned long  , unsigned int  )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN add_profil LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:645 */

/* BEGIN FUNCTION-DECL __builtin_va_copy LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_va_copy(__builtin_va_list  , __builtin_va_list  ) ;  */
/* END FUNCTION-DECL __builtin_va_copy LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_setstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:280 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setstack(pthread_attr_t * ,
                                                                                                                                 void * ,
                                                                                                                                 size_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_setstack LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:280 */

/* BEGIN FUNCTION-DECL-EXTERN dprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:352 */
extern int ( /* format attribute */  dprintf)(int  , char const   * __restrict   
                                              , ...)  __attribute__((__availability__(macosx,introduced=10.7))) ;
/* END FUNCTION-DECL-EXTERN dprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:352 */

/* BEGIN FUNCTION-DECL emit_memcpy LOC=UNKNOWN */
static void emit_memcpy(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                        jit_value a3 ) ;
/* END FUNCTION-DECL emit_memcpy LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_buf_expand LOC=UNKNOWN */
__inline static void jit_buf_expand(struct jit *jit ) ;
/* END FUNCTION-DECL jit_buf_expand LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_print_tree LOC=UNKNOWN */
__inline static void jit_print_tree(jit_tree *h , int level ) ;
/* END FUNCTION-DECL jit_print_tree LOC=UNKNOWN */

/* BEGIN VARIABLE-DECL-EXTERN suboptarg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:356 */
extern char *suboptarg ;
/* END VARIABLE-DECL-EXTERN suboptarg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:356 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_setinheritsched LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:267 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setinheritsched(pthread_attr_t * ,
                                                                                                                                        int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_setinheritsched LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:267 */

/* BEGIN FUNCTION-DECL __builtin___strlcpy_chk LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin___strlcpy_chk(char * , char const   * , unsigned long  , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin___strlcpy_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN asctime_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:125 */
extern char *asctime_r(struct tm  const  * __restrict   , char * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN asctime_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:125 */

/* BEGIN FUNCTION-DECL-EXTERN rename LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:175 */
extern int rename(char const   *__old , char const   *__new ) ;
/* END FUNCTION-DECL-EXTERN rename LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:175 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutex_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:378 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_init(pthread_mutex_t * __restrict   ,
                                                                                                                              pthread_mutexattr_t const   * _Nullable __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutex_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:378 */

/* BEGIN FUNCTION-DECL jit_gen_op LOC=UNKNOWN */
void jit_gen_op(struct jit *jit , struct jit_op *op ) ;
/* END FUNCTION-DECL jit_gen_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL assign_ret_reg LOC=UNKNOWN */
static int assign_ret_reg(jit_op *op , jit_hw_reg *ret_reg ) ;
/* END FUNCTION-DECL assign_ret_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN setregid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:593 */
extern int setregid(gid_t  , gid_t  )  __asm__("_setregid")  ;
/* END FUNCTION-DECL-EXTERN setregid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:593 */

/* BEGIN STRUCT __siginfo LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:177 */
struct __siginfo {
   int si_signo ;
   int si_errno ;
   int si_code ;
   pid_t si_pid ;
   uid_t si_uid ;
   int si_status ;
   void *si_addr ;
   union sigval si_value ;
   long si_band ;
   unsigned long __pad[7] ;
};
/* END STRUCT __siginfo LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:177 */

/* BEGIN FUNCTION-DECL __builtin_trap LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_trap(void) ;  */
/* END FUNCTION-DECL __builtin_trap LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin___strcpy_chk LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin___strcpy_chk(char * , char const   * , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin___strcpy_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL rename_reg LOC=UNKNOWN */
static void rename_reg(jit_op *op , int r1 , int r2 ) ;
/* END FUNCTION-DECL rename_reg LOC=UNKNOWN */

/* BEGIN TYPEDEF uint_fast8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:44 */
typedef uint8_t uint_fast8_t;
/* END TYPEDEF uint_fast8_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:44 */

/* BEGIN TYPEDEF user_off_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:103 */
typedef int64_t user_off_t;
/* END TYPEDEF user_off_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:103 */

/* BEGIN FUNCTION-DECL-EXTERN __svfscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:250 */
extern int ( /* format attribute */  __svfscanf)(FILE * , char const   * , va_list  ) ;
/* END FUNCTION-DECL-EXTERN __svfscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:250 */

/* BEGIN STRUCT jit_tree LOC=./jitter-amd64.c:271 */
struct jit_tree {
   struct jit_tree *left ;
   struct jit_tree *right ;
   int color ;
   jit_tree_key key ;
   jit_tree_value value ;
};
/* END STRUCT jit_tree LOC=./jitter-amd64.c:271 */

/* BEGIN STRUCT __sigaction LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:276 */
struct __sigaction {
   union __sigaction_u __sigaction_u ;
   void (*sa_tramp)(void * , int  , int  , siginfo_t * , void * ) ;
   sigset_t sa_mask ;
   int sa_flags ;
};
/* END STRUCT __sigaction LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/signal.h:276 */

/* BEGIN FUNCTION-DECL-EXTERN isgraph LOC=UNKNOWN */
__inline extern int isgraph(int _c ) ;
/* END FUNCTION-DECL-EXTERN isgraph LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN putw LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:297 */
extern int putw(int  , FILE * ) ;
/* END FUNCTION-DECL-EXTERN putw LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:297 */

/* BEGIN FUNCTION-DECL jit_dump_ops_compilable LOC=UNKNOWN */
static void jit_dump_ops_compilable(struct jit *jit , jit_tree *labels ) ;
/* END FUNCTION-DECL jit_dump_ops_compilable LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL is_red LOC=UNKNOWN */
__inline static int is_red(jit_tree *n ) ;
/* END FUNCTION-DECL is_red LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN __darwin_fd_set LOC=UNKNOWN */
__inline extern void ( __attribute__((__always_inline__)) __darwin_fd_set)(int _fd ,
                                                                           struct fd_set * const  _p ) ;
/* END FUNCTION-DECL-EXTERN __darwin_fd_set LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL pow2 LOC=UNKNOWN */
__inline static int pow2(int arg ) ;
/* END FUNCTION-DECL pow2 LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN mkostemps LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:679 */
extern int mkostemps(char *path , int slen , int oflags )  __attribute__((__availability__(watchos,introduced=3.0),
__availability__(tvos,introduced=10.0), __availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12))) ;
/* END FUNCTION-DECL-EXTERN mkostemps LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:679 */

/* BEGIN VARIABLE-DEF dummy_opcode LOC=UNKNOWN */
jit_opcode dummy_opcode  ;
/* END VARIABLE-DEF dummy_opcode LOC=UNKNOWN */

/* BEGIN STRUCT __darwin_mcontext_avx512_64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:130 */
struct __darwin_mcontext_avx512_64 {
   struct __darwin_x86_exception_state64 __es ;
   struct __darwin_x86_thread_state64 __ss ;
   struct __darwin_x86_avx512_state64 __fs ;
};
/* END STRUCT __darwin_mcontext_avx512_64 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:130 */

/* BEGIN FUNCTION-DECL-EXTERN fprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:155 */
extern int ( /* format attribute */  fprintf)(FILE * __restrict   , char const   * __restrict   
                                              , ...) ;
/* END FUNCTION-DECL-EXTERN fprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:155 */

/* BEGIN FUNCTION-DECL __builtin___snprintf_chk LOC=BUILTIN */
/* compiler builtin: 
   int __builtin___snprintf_chk(char * , unsigned long  , int  , unsigned long  ,
                                char const   *  , ...) ;  */
/* END FUNCTION-DECL __builtin___snprintf_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_tree_size LOC=UNKNOWN */
static int jit_tree_size(jit_tree *h ) ;
/* END FUNCTION-DECL jit_tree_size LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pathconf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:466 */
extern long pathconf(char const   * , int  ) ;
/* END FUNCTION-DECL-EXTERN pathconf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:466 */

/* BEGIN FUNCTION-DECL __builtin_popcountl LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_popcountl(unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_popcountl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_parity LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_parity(unsigned int  ) ;  */
/* END FUNCTION-DECL __builtin_parity LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN __sputc LOC=UNKNOWN */
__inline extern int ( __attribute__((__always_inline__)) __sputc)(int _c , FILE *_p ) ;
/* END FUNCTION-DECL-EXTERN __sputc LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL check_code_references LOC=UNKNOWN */
static int check_code_references(jit_op *op , char *msg_buf ) ;
/* END FUNCTION-DECL check_code_references LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN close LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:437 */
extern int close(int  )  __asm__("_close")  ;
/* END FUNCTION-DECL-EXTERN close LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:437 */

/* BEGIN FUNCTION-DECL-EXTERN strtod LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:165 */
extern double strtod(char const   * , char ** )  __asm__("_strtod")  ;
/* END FUNCTION-DECL-EXTERN strtod LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:165 */

/* BEGIN FUNCTION-DECL __builtin_cosl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_cosl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_cosl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL emit_save_all_regs LOC=UNKNOWN */
static void emit_save_all_regs(struct jit *jit , jit_op *op ) ;
/* END FUNCTION-DECL emit_save_all_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_setcanceltype LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:483 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_setcanceltype(int  ,
                                                                                                                                 int * _Nullable   )  __asm__("_pthread_setcanceltype")  ;
/* END FUNCTION-DECL-EXTERN pthread_setcanceltype LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:483 */

/* BEGIN FUNCTION-DECL-EXTERN unwhiteout LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:734 */
extern int unwhiteout(char const   * ) ;
/* END FUNCTION-DECL-EXTERN unwhiteout LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:734 */

/* BEGIN FUNCTION-DECL-EXTERN timingsafe_bcmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:170 */
extern int __attribute__((__availability__(watchos,introduced=3.1), __availability__(tvos,introduced=10.0.1),
__availability__(ios,introduced=10.1), __availability__(macosx,introduced=10.12.1)))  timingsafe_bcmp(void const   *__b1 ,
                                                                                                      void const   *__b2 ,
                                                                                                      size_t __len ) ;
/* END FUNCTION-DECL-EXTERN timingsafe_bcmp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:170 */

/* BEGIN FUNCTION-DECL-EXTERN isspecial LOC=UNKNOWN */
__inline extern int isspecial(int _c ) ;
/* END FUNCTION-DECL-EXTERN isspecial LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN tcsetpgrp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:485 */
extern int tcsetpgrp(int  , pid_t  ) ;
/* END FUNCTION-DECL-EXTERN tcsetpgrp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:485 */

/* BEGIN FUNCTION-DECL jit_add_op LOC=UNKNOWN */
struct jit_op *jit_add_op(struct jit *jit , unsigned short code , unsigned char spec ,
                          long arg1 , long arg2 , long arg3 , unsigned char arg_size ,
                          struct jit_debug_info *debug_info ) ;
/* END FUNCTION-DECL jit_add_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_setname_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:512 */
extern int __attribute__((__availability__(ios,introduced=3.2), __availability__(macos,introduced=10.6)))  pthread_setname_np(char const   * ) ;
/* END FUNCTION-DECL-EXTERN pthread_setname_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:512 */

/* BEGIN FUNCTION-DECL-EXTERN strtoq LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:351 */
extern long long strtoq(char const   *__str , char **__endptr , int __base ) ;
/* END FUNCTION-DECL-EXTERN strtoq LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:351 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_setspecific LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:493 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_setspecific(pthread_key_t  ,
                                                                                                                               void const   * _Nullable   ) ;
/* END FUNCTION-DECL-EXTERN pthread_setspecific LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:493 */

/* BEGIN FUNCTION-DECL __builtin_inff LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_inff(void) ;  */
/* END FUNCTION-DECL __builtin_inff LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN unsetenv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:252 */
extern int unsetenv(char const   * )  __asm__("_unsetenv")  ;
/* END FUNCTION-DECL-EXTERN unsetenv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:252 */

/* BEGIN FUNCTION-DECL-EXTERN dup2 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:440 */
extern int dup2(int  , int  ) ;
/* END FUNCTION-DECL-EXTERN dup2 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:440 */

/* BEGIN FUNCTION-DECL emit_fppush_arg LOC=UNKNOWN */
__inline static void emit_fppush_arg(struct jit *jit , struct jit_out_arg *arg ) ;
/* END FUNCTION-DECL emit_fppush_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN link LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:464 */
extern int link(char const   * , char const   * ) ;
/* END FUNCTION-DECL-EXTERN link LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:464 */

/* BEGIN FUNCTION-DECL-EXTERN revoke LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:703 */
extern int revoke(char const   * ) ;
/* END FUNCTION-DECL-EXTERN revoke LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:703 */

/* BEGIN FUNCTION-DECL-EXTERN setgroups LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:715 */
extern int setgroups(int  , gid_t const   * ) ;
/* END FUNCTION-DECL-EXTERN setgroups LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:715 */

/* BEGIN FUNCTION-DECL-EXTERN lchown LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:567 */
extern int lchown(char const   * , uid_t  , gid_t  )  __asm__("_lchown")  ;
/* END FUNCTION-DECL-EXTERN lchown LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:567 */

/* BEGIN FUNCTION-DECL-EXTERN heapsort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:309 */
extern int heapsort(void *__base , size_t __nel , size_t __width , int (* _Nonnull  __compar)(void const   * ,
                                                                                              void const   * ) ) ;
/* END FUNCTION-DECL-EXTERN heapsort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:309 */

/* BEGIN FUNCTION-DECL-EXTERN wcstombs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:194 */
extern size_t wcstombs(char * __restrict   , wchar_t const   * __restrict   , size_t  ) ;
/* END FUNCTION-DECL-EXTERN wcstombs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:194 */

/* BEGIN TYPEDEF rlim_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:89 */
typedef __uint64_t rlim_t;
/* END TYPEDEF rlim_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:89 */

/* BEGIN FUNCTION-DECL flw_analyze_op LOC=UNKNOWN */
__inline static int flw_analyze_op(struct jit *jit , jit_op *op , struct jit_func_info *func_info ,
                                   int changed , struct code_refs_cache *code_refs ) ;
/* END FUNCTION-DECL flw_analyze_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN memset_pattern16 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:158 */
extern void memset_pattern16(void *__b , void const   *__pattern16 , size_t __len )  __attribute__((__availability__(macosx,introduced=10.5))) ;
/* END FUNCTION-DECL-EXTERN memset_pattern16 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:158 */

/* BEGIN FUNCTION-DECL-EXTERN mbstowcs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:157 */
extern size_t mbstowcs(wchar_t * __restrict   , char const   * __restrict   , size_t  ) ;
/* END FUNCTION-DECL-EXTERN mbstowcs LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:157 */

/* BEGIN VARIABLE-DEF __2_init_tigress_1_opaque_list_2 LOC=UNKNOWN */
struct __2_init_tigress_1_opaque_NodeStruct *__2_init_tigress_1_opaque_list_2  =    (struct __2_init_tigress_1_opaque_NodeStruct *)0;
/* END VARIABLE-DEF __2_init_tigress_1_opaque_list_2 LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_detach LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:342 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_detach(pthread_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_detach LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:342 */

/* BEGIN FUNCTION-DECL print_op LOC=UNKNOWN */
int print_op(FILE *f , struct jit_disasm *disasm , struct jit_op *op , jit_tree *labels ,
             int verbosity ) ;
/* END FUNCTION-DECL print_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN ptsname_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:224 */
extern int ptsname_r(int fildes , char *buffer , size_t buflen )  __attribute__((__availability__(watchos,introduced=4.3),
__availability__(tvos,introduced=11.3), __availability__(ios,introduced=11.3), __availability__(macos,introduced=10.13.4))) ;
/* END FUNCTION-DECL-EXTERN ptsname_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:224 */

/* BEGIN FUNCTION-DECL jit_op_last_fun LOC=UNKNOWN */
__inline static jit_op *jit_op_last_fun(jit_op *op ) ;
/* END FUNCTION-DECL jit_op_last_fun LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_nl_item LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types.h:40 */
typedef int __darwin_nl_item;
/* END TYPEDEF __darwin_nl_item LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_types.h:40 */

/* BEGIN STRUCT __darwin_mcontext_avx32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:47 */
struct __darwin_mcontext_avx32 {
   struct __darwin_i386_exception_state __es ;
   struct __darwin_i386_thread_state __ss ;
   struct __darwin_i386_avx_state __fs ;
};
/* END STRUCT __darwin_mcontext_avx32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:47 */

/* BEGIN TYPEDEF in_port_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_in_port_t.h:31 */
typedef __uint16_t in_port_t;
/* END TYPEDEF in_port_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_in_port_t.h:31 */

/* BEGIN FUNCTION-DECL-EXTERN zopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:378 */
extern FILE *zopen(char const   * , char const   * , int  ) ;
/* END FUNCTION-DECL-EXTERN zopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:378 */

/* BEGIN FUNCTION-DECL jit_value_align LOC=UNKNOWN */
__inline static jit_value jit_value_align(jit_value value , jit_value alignment ) ;
/* END FUNCTION-DECL jit_value_align LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin___strncpy_chk LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin___strncpy_chk(char * , char const   * , unsigned long  , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin___strncpy_chk LOC=BUILTIN */

/* BEGIN TYPEDEF __darwin_fp_status_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:167 */
typedef struct __darwin_fp_status __darwin_fp_status_t;
/* END TYPEDEF __darwin_fp_status_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/mach/i386/_structs.h:167 */

/* BEGIN FUNCTION-DECL-EXTERN strsep LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:165 */
extern char *strsep(char **__stringp , char const   *__delim ) ;
/* END FUNCTION-DECL-EXTERN strsep LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:165 */

/* BEGIN TYPEDEF user_time_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:102 */
typedef int64_t user_time_t;
/* END TYPEDEF user_time_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:102 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_setschedparam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:270 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setschedparam(pthread_attr_t * __restrict   ,
                                                                                                                                      struct sched_param  const  * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_setschedparam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:270 */

/* BEGIN FUNCTION-DECL-EXTERN readlinkat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:210 */
extern ssize_t readlinkat(int  , char const   * , char * , size_t  )  __attribute__((__availability__(macosx,introduced=10.10))) ;
/* END FUNCTION-DECL-EXTERN readlinkat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:210 */

/* BEGIN TYPEDEF X86_SSE_Opcode LOC=./jitter-amd64.c:1147 */
typedef enum __anonenum_X86_SSE_Opcode_853888746 X86_SSE_Opcode;
/* END TYPEDEF X86_SSE_Opcode LOC=./jitter-amd64.c:1147 */

/* BEGIN UNION __anonunion_value_85002883 LOC=./jitter-amd64.c:556 */
union __anonunion_value_85002883 {
   jit_value generic ;
   double fp ;
   jit_label *label ;
};
/* END UNION __anonunion_value_85002883 LOC=./jitter-amd64.c:556 */

/* BEGIN STRUCT jit_out_arg LOC=./jitter-amd64.c:556 */
struct jit_out_arg {
   union __anonunion_value_85002883 value ;
   int argpos ;
   char isreg ;
   char isref ;
   char isfp ;
   char size ;
};
/* END STRUCT jit_out_arg LOC=./jitter-amd64.c:556 */

/* BEGIN FUNCTION-DECL-EXTERN l64a LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:213 */
extern char *l64a(long  ) ;
/* END FUNCTION-DECL-EXTERN l64a LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:213 */

/* BEGIN FUNCTION-DECL-EXTERN fork LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:447 */
extern pid_t fork(void)  __attribute__((__availability__(tvos,unavailable), __availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN fork LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:447 */

/* BEGIN STRUCT rusage_info_v2 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:229 */
struct rusage_info_v2 {
   uint8_t ri_uuid[16] ;
   uint64_t ri_user_time ;
   uint64_t ri_system_time ;
   uint64_t ri_pkg_idle_wkups ;
   uint64_t ri_interrupt_wkups ;
   uint64_t ri_pageins ;
   uint64_t ri_wired_size ;
   uint64_t ri_resident_size ;
   uint64_t ri_phys_footprint ;
   uint64_t ri_proc_start_abstime ;
   uint64_t ri_proc_exit_abstime ;
   uint64_t ri_child_user_time ;
   uint64_t ri_child_system_time ;
   uint64_t ri_child_pkg_idle_wkups ;
   uint64_t ri_child_interrupt_wkups ;
   uint64_t ri_child_pageins ;
   uint64_t ri_child_elapsed_abstime ;
   uint64_t ri_diskio_bytesread ;
   uint64_t ri_diskio_byteswritten ;
};
/* END STRUCT rusage_info_v2 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:229 */

/* BEGIN STRUCT fd_set LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h:50 */
struct fd_set {
   __int32_t fds_bits[1024UL / (sizeof(__int32_t ) * 8UL)] ;
};
/* END STRUCT fd_set LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_fd_def.h:50 */

/* BEGIN FUNCTION-DECL-EXTERN setuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:478 */
extern int setuid(uid_t  ) ;
/* END FUNCTION-DECL-EXTERN setuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:478 */

/* BEGIN TYPEDEF uint LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:92 */
typedef unsigned int uint;
/* END TYPEDEF uint LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:92 */

/* BEGIN STRUCT __anonstruct_w_T_422959015 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */
struct __anonstruct_w_T_422959015 {
   unsigned int w_Termsig : 7 ;
   unsigned int w_Coredump : 1 ;
   unsigned int w_Retcode : 8 ;
   unsigned int w_Filler : 16 ;
};
/* END STRUCT __anonstruct_w_T_422959015 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */

/* BEGIN UNION wait LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */
union wait {
   int w_status ;
   struct __anonstruct_w_T_422959015 w_T ;
   struct __anonstruct_w_S_422959016 w_S ;
};
/* END UNION wait LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/wait.h:194 */

/* BEGIN FUNCTION-DECL emit_sse_change_sign LOC=UNKNOWN */
static void emit_sse_change_sign(struct jit *jit , jit_op *op , int reg ) ;
/* END FUNCTION-DECL emit_sse_change_sign LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN ttyslot LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:732 */
extern int ttyslot(void) ;
/* END FUNCTION-DECL-EXTERN ttyslot LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:732 */

/* BEGIN STRUCT __anonstruct_lldiv_t_86583852 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:94 */
struct __anonstruct_lldiv_t_86583852 {
   long long quot ;
   long long rem ;
};
/* END STRUCT __anonstruct_lldiv_t_86583852 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:94 */

/* BEGIN FUNCTION-DECL emit_transfer_init LOC=UNKNOWN */
static void emit_transfer_init(struct jit *jit , jit_op *op , jit_value destreg ,
                               jit_value srcreg , jit_value cnt , int block_size ) ;
/* END FUNCTION-DECL emit_transfer_init LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_prepare_spills_on_jmpr_targets LOC=UNKNOWN */
__inline static void jit_prepare_spills_on_jmpr_targets(struct jit *jit ) ;
/* END FUNCTION-DECL jit_prepare_spills_on_jmpr_targets LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_getschedparam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:237 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getschedparam(pthread_attr_t const   * __restrict   ,
                                                                                                                                      struct sched_param * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_getschedparam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:237 */

/* BEGIN VARIABLE-DECL-EXTERN getdate_err LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:101 */
extern int getdate_err ;
/* END VARIABLE-DECL-EXTERN getdate_err LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:101 */

/* BEGIN FUNCTION-DECL-EXTERN asprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:370 */
extern int ( /* format attribute */  asprintf)(char ** __restrict   , char const   * __restrict   
                                               , ...) ;
/* END FUNCTION-DECL-EXTERN asprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:370 */

/* BEGIN FUNCTION-DECL flw_analyze_prolog LOC=UNKNOWN */
__inline static void flw_analyze_prolog(struct jit *jit , jit_op *op , struct jit_func_info *func_info ) ;
/* END FUNCTION-DECL flw_analyze_prolog LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN getegid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:450 */
extern gid_t getegid(void) ;
/* END FUNCTION-DECL-EXTERN getegid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:450 */

/* BEGIN FUNCTION-DECL-EXTERN qos_class_main LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/qos.h:192 */
extern qos_class_t __attribute__((__availability__(macos,introduced=10.10), __availability__(ios,introduced=8.0)))  qos_class_main(void) ;
/* END FUNCTION-DECL-EXTERN qos_class_main LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/qos.h:192 */

/* BEGIN FUNCTION-DECL-EXTERN localtime_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:128 */
extern struct tm *localtime_r(time_t const   * __restrict   , struct tm * __restrict   ) ;
/* END FUNCTION-DECL-EXTERN localtime_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:128 */

/* BEGIN FUNCTION-DECL __builtin_frob_return_address LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_frob_return_address(void * ) ;  */
/* END FUNCTION-DECL __builtin_frob_return_address LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin___strncat_chk LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin___strncat_chk(char * , char const   * , unsigned long  , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin___strncat_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_reg_allocator_free LOC=UNKNOWN */
void jit_reg_allocator_free(struct jit_reg_allocator *a ) ;
/* END FUNCTION-DECL jit_reg_allocator_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_op_append LOC=UNKNOWN */
__inline static void jit_op_append(jit_op *op , jit_op *appended ) ;
/* END FUNCTION-DECL jit_op_append LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pause LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:468 */
extern int pause(void)  __asm__("_pause")  ;
/* END FUNCTION-DECL-EXTERN pause LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:468 */

/* BEGIN FUNCTION-DECL-EXTERN confstr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:507 */
extern size_t confstr(int  , char * , size_t  )  __asm__("_confstr")  ;
/* END FUNCTION-DECL-EXTERN confstr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:507 */

/* BEGIN FUNCTION-DECL emit_transfer_op LOC=UNKNOWN */
static void emit_transfer_op(struct jit *jit , jit_op *op , int alu_op ) ;
/* END FUNCTION-DECL emit_transfer_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN grantpt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:206 */
extern int grantpt(int  ) ;
/* END FUNCTION-DECL-EXTERN grantpt LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:206 */

/* BEGIN FUNCTION-DECL spill_all_registers LOC=UNKNOWN */
static int spill_all_registers(jit_op *op , struct jit_reg_allocator *al ) ;
/* END FUNCTION-DECL spill_all_registers LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL check_register_types LOC=UNKNOWN */
static int check_register_types(struct jit *jit , jit_op *op , char *msg_buf ) ;
/* END FUNCTION-DECL check_register_types LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_messager LOC=UNKNOWN */
void jit_messager(struct jit *j , char *s , int i ) ;
/* END FUNCTION-DECL jit_messager LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_get_unused_reg LOC=UNKNOWN */
jit_hw_reg *jit_get_unused_reg(struct jit_reg_allocator *al , jit_op *op , int fp ) ;
/* END FUNCTION-DECL jit_get_unused_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN setlogin LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:723 */
extern int setlogin(char const   * ) ;
/* END FUNCTION-DECL-EXTERN setlogin LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:723 */

/* BEGIN FUNCTION-DECL-EXTERN jrand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:212 */
extern long jrand48(unsigned short * )  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
/* END FUNCTION-DECL-EXTERN jrand48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:212 */

/* BEGIN FUNCTION-DECL __builtin_nanl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_nanl(char const   * ) ;  */
/* END FUNCTION-DECL __builtin_nanl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN vfscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:335 */
extern int ( /* format attribute */  vfscanf)(FILE * __restrict  __stream , char const   * __restrict  __format ,
                                              va_list  ) ;
/* END FUNCTION-DECL-EXTERN vfscanf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:335 */

/* BEGIN FUNCTION-DECL-EXTERN getitimer LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:196 */
extern int getitimer(int  , struct itimerval * ) ;
/* END FUNCTION-DECL-EXTERN getitimer LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:196 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_equal LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:345 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_equal(pthread_t __attribute__((__nullable__))   ,
                                                                                                                         pthread_t __attribute__((__nullable__))   ) ;
/* END FUNCTION-DECL-EXTERN pthread_equal LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:345 */

/* BEGIN FUNCTION-DECL-EXTERN srand LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:164 */
extern void srand(unsigned int  )  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
/* END FUNCTION-DECL-EXTERN srand LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:164 */

/* BEGIN FUNCTION-DECL mark_calleesaved_regs LOC=UNKNOWN */
static void mark_calleesaved_regs(jit_tree *hint , jit_op *op ) ;
/* END FUNCTION-DECL mark_calleesaved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN cgetnext LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:286 */
extern int cgetnext(char ** , char ** ) ;
/* END FUNCTION-DECL-EXTERN cgetnext LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:286 */

/* BEGIN TYPEDEF jit_disasm LOC=./jitter-amd64.c:3570 */
typedef struct jit_disasm jit_disasm;
/* END TYPEDEF jit_disasm LOC=./jitter-amd64.c:3570 */

/* BEGIN FUNCTION-DECL-EXTERN fclose LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:143 */
extern int fclose(FILE * ) ;
/* END FUNCTION-DECL-EXTERN fclose LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:143 */

/* BEGIN FUNCTION-DECL-EXTERN strchr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:76 */
extern char *strchr(char const   *__s , int __c ) ;
/* END FUNCTION-DECL-EXTERN strchr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:76 */

/* BEGIN FUNCTION-DECL-EXTERN msync LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:230 */
extern int msync(void * , size_t  , int  )  __asm__("_msync")  ;
/* END FUNCTION-DECL-EXTERN msync LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:230 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_mutex_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:371 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_mutex_destroy(pthread_mutex_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_mutex_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:371 */

/* BEGIN FUNCTION-DECL-EXTERN setrgid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:725 */
extern int setrgid(gid_t  ) ;
/* END FUNCTION-DECL-EXTERN setrgid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:725 */

/* BEGIN STRUCT jit_label LOC=./jitter-amd64.c:204 */
struct jit_label {
   long pos ;
   jit_op *op ;
   struct jit_label *next ;
};
/* END STRUCT jit_label LOC=./jitter-amd64.c:204 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_get_stackaddr_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:526 */
extern void __attribute__((__availability__(macos,introduced=10.4), __availability__(ios,introduced=2.0)))  *pthread_get_stackaddr_np(pthread_t  ) ;
/* END FUNCTION-DECL-EXTERN pthread_get_stackaddr_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:526 */

/* BEGIN FUNCTION-DECL-EXTERN swapon LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:731 */
extern int swapon(char const   * ) ;
/* END FUNCTION-DECL-EXTERN swapon LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:731 */

/* BEGIN VARIABLE-DEF __2_init_tigress__opaque_array LOC=UNKNOWN */
unsigned int __2_init_tigress__opaque_array[30]  = 
  {      8,      362,      3,      493, 
        432,      5,      303,      390, 
        5,      383,      5,      7, 
        133,      47,      1,      288, 
        502,      95,      218,      628, 
        22,      428,      656,      41, 
        68,      201,      34,      403, 
        698};
/* END VARIABLE-DEF __2_init_tigress__opaque_array LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN open_memstream LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:357 */
extern FILE *open_memstream(char **__bufp , size_t *__sizep )  __attribute__((__availability__(watchos,introduced=4.0),
__availability__(tvos,introduced=11.0), __availability__(ios,introduced=11.0), __availability__(macos,introduced=10.13))) ;
/* END FUNCTION-DECL-EXTERN open_memstream LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:357 */

/* BEGIN FUNCTION-DECL-EXTERN __vsnprintf_chk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_stdio.h:70 */
extern int __vsnprintf_chk(char * __restrict   , size_t  , int  , size_t  , char const   * __restrict   ,
                           va_list  ) ;
/* END FUNCTION-DECL-EXTERN __vsnprintf_chk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/secure/_stdio.h:70 */

/* BEGIN TYPEDEF ct_rune_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ct_rune_t.h:32 */
typedef __darwin_ct_rune_t ct_rune_t;
/* END TYPEDEF ct_rune_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_types/_ct_rune_t.h:32 */

/* BEGIN FUNCTION-DECL DUMP_int LOC=UNKNOWN */
void DUMP_int(int block , struct jit *jit , struct jit_op *begin_ , struct jit_op *end_ ) ;
/* END FUNCTION-DECL DUMP_int LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN qsort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:160 */
extern void qsort(void *__base , size_t __nel , size_t __width , int (* _Nonnull  __compar)(void const   * ,
                                                                                            void const   * ) ) ;
/* END FUNCTION-DECL-EXTERN qsort LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:160 */

/* BEGIN FUNCTION-DECL-EXTERN getrlimit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:449 */
extern int getrlimit(int  , struct rlimit * )  __asm__("_getrlimit")  ;
/* END FUNCTION-DECL-EXTERN getrlimit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:449 */

/* BEGIN FUNCTION-DECL __builtin___mempcpy_chk LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin___mempcpy_chk(void * , void const   * , unsigned long  , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin___mempcpy_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN dup LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:439 */
extern int dup(int  ) ;
/* END FUNCTION-DECL-EXTERN dup LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:439 */

/* BEGIN FUNCTION-DECL __builtin___memcpy_chk LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin___memcpy_chk(void * , void const   * , unsigned long  , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin___memcpy_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL sse_mov_reg_safeimm LOC=UNKNOWN */
static void sse_mov_reg_safeimm(struct jit *jit , jit_op *op , jit_value reg , double *imm ) ;
/* END FUNCTION-DECL sse_mov_reg_safeimm LOC=UNKNOWN */

/* BEGIN STRUCT __darwin_mcontext_avx512_32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:56 */
struct __darwin_mcontext_avx512_32 {
   struct __darwin_i386_exception_state __es ;
   struct __darwin_i386_thread_state __ss ;
   struct __darwin_i386_avx512_state __fs ;
};
/* END STRUCT __darwin_mcontext_avx512_32 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:56 */

/* BEGIN FUNCTION-DECL-EXTERN strtol LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:167 */
extern long strtol(char const   *__str , char **__endptr , int __base ) ;
/* END FUNCTION-DECL-EXTERN strtol LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:167 */

/* BEGIN FUNCTION-DECL-EXTERN getpgrp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:459 */
extern pid_t getpgrp(void) ;
/* END FUNCTION-DECL-EXTERN getpgrp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:459 */

/* BEGIN FUNCTION-DECL __builtin_tanf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_tanf(float  ) ;  */
/* END FUNCTION-DECL __builtin_tanf LOC=BUILTIN */

/* BEGIN TYPEDEF mcontext_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:204 */
typedef struct __darwin_mcontext64 *mcontext_t;
/* END TYPEDEF mcontext_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_mcontext.h:204 */

/* BEGIN FUNCTION-DECL-EXTERN strerror LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:81 */
extern char *strerror(int __errnum )  __asm__("_strerror")  ;
/* END FUNCTION-DECL-EXTERN strerror LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:81 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_getugid_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:700 */
extern int pthread_getugid_np(uid_t * , gid_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_getugid_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:700 */

/* BEGIN UNION __anonunion___mbstate_t_250061491 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:76 */
union __anonunion___mbstate_t_250061491 {
   char __mbstate8[128] ;
   long long _mbstateL ;
};
/* END UNION __anonunion___mbstate_t_250061491 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:76 */

/* BEGIN TYPEDEF int_least16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:30 */
typedef int16_t int_least16_t;
/* END TYPEDEF int_least16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:30 */

/* BEGIN FUNCTION-DECL-EXTERN readlink LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:623 */
extern ssize_t readlink(char const   * __restrict   , char * __restrict   , size_t  ) ;
/* END FUNCTION-DECL-EXTERN readlink LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:623 */

/* BEGIN FUNCTION-DECL assign_getarg LOC=UNKNOWN */
static int assign_getarg(jit_op *op , struct jit_reg_allocator *al ) ;
/* END FUNCTION-DECL assign_getarg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN ffsll LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:86 */
extern int ffsll(long long  )  __attribute__((__availability__(macosx,introduced=10.9))) ;
/* END FUNCTION-DECL-EXTERN ffsll LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:86 */

/* BEGIN FUNCTION-DECL-EXTERN ruserok LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:712 */
extern int __attribute__((__deprecated__))  ruserok(char const   * , int  , char const   * ,
                                                    char const   * ) ;
/* END FUNCTION-DECL-EXTERN ruserok LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:712 */

/* BEGIN FUNCTION-DECL-EXTERN sync_volume_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:780 */
extern int sync_volume_np(char const   * , int  )  __attribute__((__availability__(macosx,introduced=10.8))) ;
/* END FUNCTION-DECL-EXTERN sync_volume_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:780 */

/* BEGIN FUNCTION-DECL __builtin_atanf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_atanf(float  ) ;  */
/* END FUNCTION-DECL __builtin_atanf LOC=BUILTIN */

/* BEGIN TYPEDEF X86_Shift_Opcode LOC=./jitter-amd64.c:1014 */
typedef enum __anonenum_X86_Shift_Opcode_820104407 X86_Shift_Opcode;
/* END TYPEDEF X86_Shift_Opcode LOC=./jitter-amd64.c:1014 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_getdetachstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:228 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_getdetachstate(pthread_attr_t const   * ,
                                                                                                                                       int * ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_getdetachstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:228 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_setcancelstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:479 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_setcancelstate(int  ,
                                                                                                                                  int * _Nullable   )  __asm__("_pthread_setcancelstate")  ;
/* END FUNCTION-DECL-EXTERN pthread_setcancelstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:479 */

/* BEGIN FUNCTION-DECL-EXTERN ftell LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:164 */
extern long ftell(FILE * ) ;
/* END FUNCTION-DECL-EXTERN ftell LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:164 */

/* BEGIN FUNCTION-DECL emit_pop_callee_saved_regs LOC=UNKNOWN */
static int emit_pop_callee_saved_regs(struct jit *jit ) ;
/* END FUNCTION-DECL emit_pop_callee_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN strrchr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:87 */
extern char *strrchr(char const   *__s , int __c ) ;
/* END FUNCTION-DECL-EXTERN strrchr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:87 */

/* BEGIN FUNCTION-DECL-EXTERN ffsl LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:85 */
extern int ffsl(long  )  __attribute__((__availability__(macosx,introduced=10.5))) ;
/* END FUNCTION-DECL-EXTERN ffsl LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:85 */

/* BEGIN FUNCTION-DECL-EXTERN freopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:159 */
extern FILE *freopen(char const   * __restrict   , char const   * __restrict   , FILE * __restrict   )  __asm__("_freopen")  ;
/* END FUNCTION-DECL-EXTERN freopen LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:159 */

/* BEGIN STRUCT jit_func_info LOC=./jitter-amd64.c:584 */
struct jit_func_info {
   int general_arg_cnt ;
   int float_arg_cnt ;
   long allocai_mem ;
   int arg_capacity ;
   struct jit_inp_arg *args ;
   int gp_reg_count ;
   int fp_reg_count ;
   int has_prolog ;
   struct jit_op *first_op ;
};
/* END STRUCT jit_func_info LOC=./jitter-amd64.c:584 */

/* BEGIN FUNCTION-DECL-EXTERN gethostuuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/gethostuuid.h:39 */
extern int gethostuuid(unsigned char * , struct timespec  const  * )  __attribute__((__availability__(macosx,introduced=10.5))) ;
/* END FUNCTION-DECL-EXTERN gethostuuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/gethostuuid.h:39 */

/* BEGIN FUNCTION-DECL print_op_compilable LOC=UNKNOWN */
int print_op_compilable(struct jit_disasm *disasm , struct jit_op *op , jit_tree *labels ) ;
/* END FUNCTION-DECL print_op_compilable LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL join_addr_addi LOC=UNKNOWN */
static int join_addr_addi(jit_op *op , jit_op *nextop ) ;
/* END FUNCTION-DECL join_addr_addi LOC=UNKNOWN */

/* BEGIN STRUCT __anonstruct_jit_hw_reg_312769258 LOC=./jitter-amd64.c:521 */
struct __anonstruct_jit_hw_reg_312769258 {
   int id ;
   char *name ;
   char callee_saved ;
   char fp ;
   short priority ;
};
/* END STRUCT __anonstruct_jit_hw_reg_312769258 LOC=./jitter-amd64.c:521 */

/* BEGIN FUNCTION-DECL __builtin_ceil LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_ceil(double  ) ;  */
/* END FUNCTION-DECL __builtin_ceil LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_allocai LOC=UNKNOWN */
int jit_allocai(struct jit *jit , int size ) ;
/* END FUNCTION-DECL jit_allocai LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN seed48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:235 */
extern unsigned short *seed48(unsigned short * ) ;
/* END FUNCTION-DECL-EXTERN seed48 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:235 */

/* BEGIN FUNCTION-DECL-EXTERN vdprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:353 */
extern int ( /* format attribute */  vdprintf)(int  , char const   * __restrict   ,
                                               va_list  )  __attribute__((__availability__(macosx,introduced=10.7))) ;
/* END FUNCTION-DECL-EXTERN vdprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:353 */

/* BEGIN ENUM __anonenum_X86_FP_Opcode_1068131184 LOC=./jitter-amd64.c:1029 */
enum __anonenum_X86_FP_Opcode_1068131184 {
    X86_FADD = 0,
    X86_FMUL = 1,
    X86_FCOM = 2,
    X86_FCOMP = 3,
    X86_FSUB = 4,
    X86_FSUBR = 5,
    X86_FDIV = 6,
    X86_FDIVR = 7,
    X86_NFP = 8
} ;
/* END ENUM __anonenum_X86_FP_Opcode_1068131184 LOC=./jitter-amd64.c:1029 */

/* BEGIN FUNCTION-DECL-EXTERN fgets LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:149 */
extern char *fgets(char * __restrict   , int  , FILE * ) ;
/* END FUNCTION-DECL-EXTERN fgets LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:149 */

/* BEGIN TYPEDEF user_long_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:100 */
typedef int64_t user_long_t;
/* END TYPEDEF user_long_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:100 */

/* BEGIN FUNCTION-DECL ob_assert_space LOC=UNKNOWN */
static void ob_assert_space(struct output_buf *ob , int len ) ;
/* END FUNCTION-DECL ob_assert_space LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_frame_address LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_frame_address(unsigned int  ) ;  */
/* END FUNCTION-DECL __builtin_frame_address LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN seteuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:625 */
extern int seteuid(uid_t  ) ;
/* END FUNCTION-DECL-EXTERN seteuid LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:625 */

/* BEGIN FUNCTION-DECL-EXTERN strdup LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:117 */
extern char *strdup(char const   *__s1 ) ;
/* END FUNCTION-DECL-EXTERN strdup LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:117 */

/* BEGIN FUNCTION-DECL join_muli_ori LOC=UNKNOWN */
static int join_muli_ori(jit_op *op , jit_op *nextop ) ;
/* END FUNCTION-DECL join_muli_ori LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_atanl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_atanl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_atanl LOC=BUILTIN */

/* BEGIN VARIABLE-DECL-EXTERN sys_errlist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:368 */
extern char const   * const  sys_errlist[] ;
/* END VARIABLE-DECL-EXTERN sys_errlist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:368 */

/* BEGIN FUNCTION-DECL __builtin_ldexpl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_ldexpl(long double  , int  ) ;  */
/* END FUNCTION-DECL __builtin_ldexpl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_set_free LOC=./jitter-amd64.c:651 */
__inline static void jit_set_free(jit_set *s ) ;
/* END FUNCTION-DECL jit_set_free LOC=./jitter-amd64.c:651 */

/* BEGIN TYPEDEF user_size_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:98 */
typedef u_int64_t user_size_t;
/* END TYPEDEF user_size_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/types.h:98 */

/* BEGIN FUNCTION-DECL get_frame_size LOC=UNKNOWN */
static int get_frame_size(struct jit *jit , struct jit_func_info *info ) ;
/* END FUNCTION-DECL get_frame_size LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_cond_signal_thread_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:530 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_signal_thread_np(pthread_cond_t * ,
                                                                                                                                         pthread_t __attribute__((__nullable__))   ) ;
/* END FUNCTION-DECL-EXTERN pthread_cond_signal_thread_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:530 */

/* BEGIN STRUCT output_buf LOC=./jitter-amd64.c:3478 */
struct output_buf {
   char *buf ;
   size_t size ;
   size_t capacity ;
};
/* END STRUCT output_buf LOC=./jitter-amd64.c:3478 */

/* BEGIN FUNCTION-DECL jit_assign_regs LOC=UNKNOWN */
void jit_assign_regs(struct jit *jit ) ;
/* END FUNCTION-DECL jit_assign_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN strtold LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:168 */
extern long double strtold(char const   * , char ** ) ;
/* END FUNCTION-DECL-EXTERN strtold LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:168 */

/* BEGIN FUNCTION-DECL-EXTERN div LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:144 */
extern div_t div(int  , int  )  __attribute__((__const__)) ;
/* END FUNCTION-DECL-EXTERN div LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:144 */

/* BEGIN FUNCTION-DECL-EXTERN bsearch LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:141 */
extern void *bsearch(void const   *__key , void const   *__base , size_t __nel , size_t __width ,
                     int (* _Nonnull  __compar)(void const   * , void const   * ) ) ;
/* END FUNCTION-DECL-EXTERN bsearch LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:141 */

/* BEGIN TYPEDEF X86_FP_Opcode LOC=./jitter-amd64.c:1029 */
typedef enum __anonenum_X86_FP_Opcode_1068131184 X86_FP_Opcode;
/* END TYPEDEF X86_FP_Opcode LOC=./jitter-amd64.c:1029 */

/* BEGIN FUNCTION-DECL __builtin_apply_args LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_apply_args(void) ;  */
/* END FUNCTION-DECL __builtin_apply_args LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN getattrlistat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:188 */
extern int getattrlistat(int  , char const   * , void * , void * , size_t  , unsigned long  )  __attribute__((__availability__(macosx,introduced=10.10))) ;
/* END FUNCTION-DECL-EXTERN getattrlistat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:188 */

/* BEGIN FUNCTION-DECL-EXTERN fgetln LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:372 */
extern char *fgetln(FILE * , size_t * ) ;
/* END FUNCTION-DECL-EXTERN fgetln LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:372 */

/* BEGIN FUNCTION-DECL-EXTERN clock_settime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:185 */
extern int __attribute__((__availability__(watchos,unavailable), __availability__(tvos,unavailable),
__availability__(ios,unavailable), __availability__(macosx,introduced=10.12)))  clock_settime(clockid_t __clock_id ,
                                                                                              struct timespec  const  *__tp ) ;
/* END FUNCTION-DECL-EXTERN clock_settime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:185 */

/* BEGIN FUNCTION-DECL emit_sub_op LOC=UNKNOWN */
static void emit_sub_op(struct jit *jit , struct jit_op *op , int imm ) ;
/* END FUNCTION-DECL emit_sub_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_cond_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:298 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_init(pthread_cond_t * __restrict   ,
                                                                                                                             pthread_condattr_t const   * _Nullable __restrict   )  __asm__("_pthread_cond_init")  ;
/* END FUNCTION-DECL-EXTERN pthread_cond_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:298 */

/* BEGIN FUNCTION-DECL-EXTERN sbrk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:582 */
extern void __attribute__((__deprecated__, __availability__(watchos,unavailable),
__availability__(tvos,unavailable)))  *sbrk(int  ) ;
/* END FUNCTION-DECL-EXTERN sbrk LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:582 */

/* BEGIN FUNCTION-DECL-EXTERN getusershell LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:663 */
extern char *getusershell(void) ;
/* END FUNCTION-DECL-EXTERN getusershell LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:663 */

/* BEGIN VARIABLE-DECL-EXTERN optarg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:511 */
extern char *optarg ;
/* END VARIABLE-DECL-EXTERN optarg LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:511 */

/* BEGIN FUNCTION-DECL-EXTERN strnstr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:161 */
extern char *strnstr(char const   *__big , char const   *__little , size_t __len ) ;
/* END FUNCTION-DECL-EXTERN strnstr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:161 */

/* BEGIN FUNCTION-DECL-EXTERN ctime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:110 */
extern char *ctime(time_t const   * ) ;
/* END FUNCTION-DECL-EXTERN ctime LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/time.h:110 */

/* BEGIN FUNCTION-DECL __builtin_log10l LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_log10l(long double  ) ;  */
/* END FUNCTION-DECL __builtin_log10l LOC=BUILTIN */

/* BEGIN FUNCTION-DECL check_argument_sizes LOC=UNKNOWN */
static int check_argument_sizes(jit_op *op , char *msg_buf ) ;
/* END FUNCTION-DECL check_argument_sizes LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_strcpy LOC=BUILTIN */
/* compiler builtin: 
   char *__builtin_strcpy(char * , char const   * ) ;  */
/* END FUNCTION-DECL __builtin_strcpy LOC=BUILTIN */

/* BEGIN ENUM jit_x86_fp_regs LOC=./jitter-amd64.c:985 */
enum jit_x86_fp_regs {
    X86_XMM0 = 0,
    X86_XMM1 = 1,
    X86_XMM2 = 2,
    X86_XMM3 = 3,
    X86_XMM4 = 4,
    X86_XMM5 = 5,
    X86_XMM6 = 6,
    X86_XMM7 = 7,
    X86_XMM_NREG = 8
} ;
/* END ENUM jit_x86_fp_regs LOC=./jitter-amd64.c:985 */

/* BEGIN FUNCTION-DECL emit_ld_op LOC=UNKNOWN */
static void emit_ld_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) ;
/* END FUNCTION-DECL emit_ld_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN fsetattrlist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:750 */
extern int fsetattrlist(int  , void * , void * , size_t  , unsigned int  )  __attribute__((__availability__(macosx,introduced=10.6))) ;
/* END FUNCTION-DECL-EXTERN fsetattrlist LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:750 */

/* BEGIN FUNCTION-DECL-EXTERN snprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:334 */
extern int ( /* format attribute */  snprintf)(char * __restrict  __str , size_t __size ,
                                               char const   * __restrict  __format 
                                               , ...) ;
/* END FUNCTION-DECL-EXTERN snprintf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:334 */

/* BEGIN FUNCTION-DECL __builtin_strcspn LOC=BUILTIN */
/* compiler builtin: 
   unsigned long __builtin_strcspn(char const   * , char const   * ) ;  */
/* END FUNCTION-DECL __builtin_strcspn LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_clz LOC=BUILTIN */
/* compiler builtin: 
   int __builtin_clz(unsigned int  ) ;  */
/* END FUNCTION-DECL __builtin_clz LOC=BUILTIN */

/* BEGIN FUNCTION-DECL sync_reg LOC=UNKNOWN */
static void sync_reg(jit_op *op , jit_hw_reg *hreg , jit_value virt_reg ) ;
/* END FUNCTION-DECL sync_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_bzero LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_bzero(void * , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_bzero LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN fsetpos LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:163 */
extern int fsetpos(FILE * , fpos_t const   * ) ;
/* END FUNCTION-DECL-EXTERN fsetpos LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:163 */

/* BEGIN FUNCTION-DECL-EXTERN stpncpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:131 */
extern char *stpncpy(char *__dst , char const   *__src , size_t __n )  __attribute__((__availability__(macosx,introduced=10.7))) ;
/* END FUNCTION-DECL-EXTERN stpncpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:131 */

/* BEGIN FUNCTION-DECL hints_refcount_inc LOC=UNKNOWN */
static void hints_refcount_inc(jit_tree *hints ) ;
/* END FUNCTION-DECL hints_refcount_inc LOC=UNKNOWN */

/* BEGIN TYPEDEF __int16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:42 */
typedef short __int16_t;
/* END TYPEDEF __int16_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:42 */

/* BEGIN TYPEDEF rusage_info_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:193 */
typedef void *rusage_info_t;
/* END TYPEDEF rusage_info_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:193 */

/* BEGIN FUNCTION-DECL-EXTERN tmpnam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:184 */
extern char __attribute__((__deprecated__("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tmpnam(3), it is highly recommended that you use mkstemp(3) instead."),
__availability__(swift,unavailable,message="Use mkstemp(3) instead.")))  *tmpnam(char * ) ;
/* END FUNCTION-DECL-EXTERN tmpnam LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:184 */

/* BEGIN FUNCTION-DECL-EXTERN accessx_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:643 */
extern int accessx_np(struct accessx_descriptor  const  * , size_t  , int * , uid_t  ) ;
/* END FUNCTION-DECL-EXTERN accessx_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:643 */

/* BEGIN FUNCTION-DECL-EXTERN getdomainname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:649 */
extern int getdomainname(char * , int  ) ;
/* END FUNCTION-DECL-EXTERN getdomainname LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:649 */

/* BEGIN FUNCTION-DECL-EXTERN aligned_alloc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:50 */
extern void *( __attribute__((__warn_unused_result__)) aligned_alloc)(size_t __alignment ,
                                                                      size_t __size )  __attribute__((__availability__(watchos,introduced=6.0),
__availability__(tvos,introduced=13.0), __availability__(ios,introduced=13.0), __availability__(macosx,introduced=10.15),
__alloc_size__(2))) ;
/* END FUNCTION-DECL-EXTERN aligned_alloc LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/malloc/_malloc.h:50 */

/* BEGIN FUNCTION-DECL __builtin_return LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_return(void const   * ) ;  */
/* END FUNCTION-DECL __builtin_return LOC=BUILTIN */

/* BEGIN TYPEDEF uint_fast32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:46 */
typedef uint32_t uint_fast32_t;
/* END TYPEDEF uint_fast32_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdint.h:46 */

/* BEGIN FUNCTION-DECL ob_free LOC=UNKNOWN */
static void ob_free(struct output_buf *ob ) ;
/* END FUNCTION-DECL ob_free LOC=UNKNOWN */

/* BEGIN STRUCT clockinfo LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:172 */
struct clockinfo {
   int hz ;
   int tick ;
   int tickadj ;
   int stathz ;
   int profhz ;
};
/* END STRUCT clockinfo LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:172 */

/* BEGIN FUNCTION-DECL-EXTERN ldiv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:149 */
extern ldiv_t ldiv(long  , long  )  __attribute__((__const__)) ;
/* END FUNCTION-DECL-EXTERN ldiv LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:149 */

/* BEGIN FUNCTION-DECL emit_arguments LOC=UNKNOWN */
__inline static int emit_arguments(struct jit *jit ) ;
/* END FUNCTION-DECL emit_arguments LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN arc4random_buf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:270 */
extern void arc4random_buf(void *__buf , size_t __nbytes )  __attribute__((__availability__(macosx,introduced=10.7))) ;
/* END FUNCTION-DECL-EXTERN arc4random_buf LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:270 */

/* BEGIN TYPEDEF u_long LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:88 */
typedef unsigned long u_long;
/* END TYPEDEF u_long LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/types.h:88 */

/* BEGIN FUNCTION-DECL-EXTERN psort_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:331 */
extern void psort_r(void *__base , size_t __nel , size_t __width , void * , int (* _Nonnull  __compar)(void * ,
                                                                                                       void const   * ,
                                                                                                       void const   * ) )  __attribute__((__availability__(macosx,introduced=10.6))) ;
/* END FUNCTION-DECL-EXTERN psort_r LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:331 */

/* BEGIN FUNCTION-DECL shift_index LOC=UNKNOWN */
static int shift_index(int arg ) ;
/* END FUNCTION-DECL shift_index LOC=UNKNOWN */

/* BEGIN TYPEDEF __darwin_mbstate_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:81 */
typedef __mbstate_t __darwin_mbstate_t;
/* END TYPEDEF __darwin_mbstate_t LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/i386/_types.h:81 */

/* BEGIN FUNCTION-DECL jit_reg_in_use LOC=UNKNOWN */
int jit_reg_in_use(jit_op *op , int reg , int fp ) ;
/* END FUNCTION-DECL jit_reg_in_use LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_bcopy LOC=BUILTIN */
/* compiler builtin: 
   void __builtin_bcopy(void const   * , void * , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_bcopy LOC=BUILTIN */

/* BEGIN ENUM __anonenum_X86_Shift_Opcode_820104407 LOC=./jitter-amd64.c:1014 */
enum __anonenum_X86_Shift_Opcode_820104407 {
    X86_SHLD = 0,
    X86_SHLR = 1,
    X86_ROL = 0,
    X86_ROR = 1,
    X86_RCL = 2,
    X86_RCR = 3,
    X86_SHL = 4,
    X86_SHR = 5,
    X86_SAR = 7,
    X86_NSHIFT = 8
} ;
/* END ENUM __anonenum_X86_Shift_Opcode_820104407 LOC=./jitter-amd64.c:1014 */

/* BEGIN FUNCTION-DECL-EXTERN iruserok_sa LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:711 */
extern int __attribute__((__deprecated__))  iruserok_sa(void const   * , int  , int  ,
                                                        char const   * , char const   * ) ;
/* END FUNCTION-DECL-EXTERN iruserok_sa LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:711 */

/* BEGIN FUNCTION-DECL emit_push_arg LOC=UNKNOWN */
__inline static void emit_push_arg(struct jit *jit , struct jit_out_arg *arg ) ;
/* END FUNCTION-DECL emit_push_arg LOC=UNKNOWN */

/* BEGIN TYPEDEF va_list___0 LOC=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/12.0.0/include/stdarg.h:14 */
typedef __builtin_va_list va_list___0;
/* END TYPEDEF va_list___0 LOC=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/12.0.0/include/stdarg.h:14 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlockattr_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:470 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlockattr_init(pthread_rwlockattr_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_rwlockattr_init LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:470 */

/* BEGIN FUNCTION-DECL-EXTERN select LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_select.h:39 */
extern int select(int  , fd_set * __restrict   , fd_set * __restrict   , fd_set * __restrict   ,
                  struct timeval * __restrict   )  __asm__("_select$1050")  ;
/* END FUNCTION-DECL-EXTERN select LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/_select.h:39 */

/* BEGIN FUNCTION-DECL __builtin_logl LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_logl(long double  ) ;  */
/* END FUNCTION-DECL __builtin_logl LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN __istype LOC=UNKNOWN */
__inline extern int __istype(__darwin_ct_rune_t _c , unsigned long _f ) ;
/* END FUNCTION-DECL-EXTERN __istype LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN settimeofday LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:193 */
extern int settimeofday(struct timeval  const  * , struct timezone  const  * ) ;
/* END FUNCTION-DECL-EXTERN settimeofday LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/time.h:193 */

/* BEGIN FUNCTION-DECL rmap_spill_candidate LOC=UNKNOWN */
static jit_hw_reg *rmap_spill_candidate(struct jit_reg_allocator *al , jit_op *op ,
                                        jit_value virtreg , int *spill , jit_value *reg_to_spill ,
                                        int callee_saved ) ;
/* END FUNCTION-DECL rmap_spill_candidate LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_rwlock_trywrlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:454 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_rwlock_trywrlock(pthread_rwlock_t * )  __asm__("_pthread_rwlock_trywrlock")  ;
/* END FUNCTION-DECL-EXTERN pthread_rwlock_trywrlock LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:454 */

/* BEGIN TYPEDEF x86_imm_buf LOC=./jitter-amd64.c:1143 */
typedef union __anonunion_x86_imm_buf_549773081 x86_imm_buf;
/* END TYPEDEF x86_imm_buf LOC=./jitter-amd64.c:1143 */

/* BEGIN FUNCTION-DECL jit_free_op LOC=UNKNOWN */
__inline static void jit_free_op(struct jit_op *op ) ;
/* END FUNCTION-DECL jit_free_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_setdetachstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:261 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_setdetachstate(pthread_attr_t * ,
                                                                                                                                       int  ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_setdetachstate LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:261 */

/* BEGIN VARIABLE-DEF jit_disasm_general LOC=UNKNOWN */
struct jit_disasm jit_disasm_general  ;
/* END VARIABLE-DEF jit_disasm_general LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL analyze_function LOC=UNKNOWN */
__inline static void analyze_function(struct jit *jit , jit_op *first_op , jit_op *last_op ) ;
/* END FUNCTION-DECL analyze_function LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN madvise LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:242 */
extern int madvise(void * , size_t  , int  ) ;
/* END FUNCTION-DECL-EXTERN madvise LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:242 */

/* BEGIN FUNCTION-DECL-EXTERN fchownat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:208 */
extern int fchownat(int  , char const   * , uid_t  , gid_t  , int  )  __attribute__((__availability__(macosx,introduced=10.10))) ;
/* END FUNCTION-DECL-EXTERN fchownat LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/unistd.h:208 */

/* BEGIN FUNCTION-DECL jit_tree_search LOC=UNKNOWN */
static jit_tree *jit_tree_search(jit_tree *h , jit_tree_key key ) ;
/* END FUNCTION-DECL jit_tree_search LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN ___toupper LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:131 */
extern __darwin_ct_rune_t ___toupper(__darwin_ct_rune_t  ) ;
/* END FUNCTION-DECL-EXTERN ___toupper LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:131 */

/* BEGIN FUNCTION-DECL __builtin_tanhf LOC=BUILTIN */
/* compiler builtin: 
   float __builtin_tanhf(float  ) ;  */
/* END FUNCTION-DECL __builtin_tanhf LOC=BUILTIN */

/* BEGIN FUNCTION-DECL rmap_subset LOC=UNKNOWN */
static int rmap_subset(jit_op *op , jit_tree *current , jit_tree *target ) ;
/* END FUNCTION-DECL rmap_subset LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN memccpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:118 */
extern void *memccpy(void *__dst , void const   *__src , int __c , size_t __n ) ;
/* END FUNCTION-DECL-EXTERN memccpy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:118 */

/* BEGIN FUNCTION-DECL candidate_score LOC=UNKNOWN */
static int candidate_score(jit_op *op , jit_value virtreg , jit_hw_reg *hreg , int *spill ,
                           jit_value *associated_virtreg ) ;
/* END FUNCTION-DECL candidate_score LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_attr_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:225 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_attr_destroy(pthread_attr_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_attr_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:225 */

/* BEGIN FUNCTION-DECL-EXTERN getdirentriesattr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:754 */
extern int getdirentriesattr(int  , void * , void * , size_t  , unsigned int * , unsigned int * ,
                             unsigned int * , unsigned int  )  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN getdirentriesattr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:754 */

/* BEGIN FUNCTION-DECL-EXTERN memchr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:70 */
extern void *memchr(void const   *__s , int __c , size_t __n ) ;
/* END FUNCTION-DECL-EXTERN memchr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:70 */

/* BEGIN FUNCTION-DECL-EXTERN mkpathat_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:670 */
extern int mkpathat_np(int dfd , char const   *path , mode_t omode )  __attribute__((__availability__(watchos,introduced=3.0),
__availability__(tvos,introduced=10.0), __availability__(ios,introduced=10.0), __availability__(macosx,introduced=10.12))) ;
/* END FUNCTION-DECL-EXTERN mkpathat_np LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:670 */

/* BEGIN FUNCTION-DECL-EXTERN setrlimit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:455 */
extern int setrlimit(int  , struct rlimit  const  * )  __asm__("_setrlimit")  ;
/* END FUNCTION-DECL-EXTERN setrlimit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:455 */

/* BEGIN TYPEDEF __gnuc_va_list LOC=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/12.0.0/include/stdarg.h:32 */
typedef __builtin_va_list __gnuc_va_list;
/* END TYPEDEF __gnuc_va_list LOC=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/12.0.0/include/stdarg.h:32 */

/* BEGIN FUNCTION-DECL-EXTERN perror LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:169 */
extern void perror(char const   * )  __attribute__((__cold__)) ;
/* END FUNCTION-DECL-EXTERN perror LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdio.h:169 */

/* BEGIN FUNCTION-DECL color_flip LOC=UNKNOWN */
__inline static void color_flip(jit_tree *h ) ;
/* END FUNCTION-DECL color_flip LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin___vfprintf_chk LOC=BUILTIN */
/* compiler builtin: 
   int __builtin___vfprintf_chk(void * , int  , char const   * , __builtin_va_list  ) ;  */
/* END FUNCTION-DECL __builtin___vfprintf_chk LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_get_reg_name LOC=UNKNOWN */
void jit_get_reg_name(struct jit_disasm *disasm , char *r , int reg ) ;
/* END FUNCTION-DECL jit_get_reg_name LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL __builtin_atan2l LOC=BUILTIN */
/* compiler builtin: 
   long double __builtin_atan2l(long double  , long double  ) ;  */
/* END FUNCTION-DECL __builtin_atan2l LOC=BUILTIN */

/* BEGIN FUNCTION-DECL __builtin_apply LOC=BUILTIN */
/* compiler builtin: 
   void *__builtin_apply(void (*)() , void * , unsigned long  ) ;  */
/* END FUNCTION-DECL __builtin_apply LOC=BUILTIN */

/* BEGIN FUNCTION-DECL-EXTERN execlp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:443 */
extern int execlp(char const   *__file , char const   *__arg0  , ...)  __attribute__((__availability__(tvos,unavailable),
__availability__(watchos,unavailable))) ;
/* END FUNCTION-DECL-EXTERN execlp LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:443 */

/* BEGIN FUNCTION-DECL-EXTERN flsl LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:88 */
extern int flsl(long  )  __attribute__((__availability__(macosx,introduced=10.5))) ;
/* END FUNCTION-DECL-EXTERN flsl LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/strings.h:88 */

/* BEGIN FUNCTION-DECL-EXTERN strndup LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:132 */
extern char *strndup(char const   *__s1 , size_t __n )  __attribute__((__availability__(macosx,introduced=10.7))) ;
/* END FUNCTION-DECL-EXTERN strndup LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/string.h:132 */

/* BEGIN FUNCTION-DECL emit_sse_fld_op LOC=UNKNOWN */
static void emit_sse_fld_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) ;
/* END FUNCTION-DECL emit_sse_fld_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN fflagstostr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:648 */
extern char *fflagstostr(unsigned long  ) ;
/* END FUNCTION-DECL-EXTERN fflagstostr LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/unistd.h:648 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_cond_timedwait LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:307 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_timedwait(pthread_cond_t * __restrict   ,
                                                                                                                                  pthread_mutex_t * __restrict   ,
                                                                                                                                  struct timespec  const  * _Nullable __restrict   )  __asm__("_pthread_cond_timedwait")  ;
/* END FUNCTION-DECL-EXTERN pthread_cond_timedwait LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:307 */

/* BEGIN FUNCTION-DECL-EXTERN rand LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:162 */
extern int rand(void)  __attribute__((__availability__(swift,unavailable,message="Use arc4random instead."))) ;
/* END FUNCTION-DECL-EXTERN rand LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:162 */

/* BEGIN FUNCTION-DECL-EXTERN posix_madvise LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:239 */
extern int posix_madvise(void * , size_t  , int  ) ;
/* END FUNCTION-DECL-EXTERN posix_madvise LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/mman.h:239 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_cancel LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:289 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cancel(pthread_t  )  __asm__("_pthread_cancel")  ;
/* END FUNCTION-DECL-EXTERN pthread_cancel LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:289 */

/* BEGIN FUNCTION-DECL-EXTERN __tolower LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:189 */
extern __darwin_ct_rune_t __tolower(__darwin_ct_rune_t  ) ;
/* END FUNCTION-DECL-EXTERN __tolower LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/_ctype.h:189 */

/* BEGIN FUNCTION-DECL __builtin_ia32_unpcklps LOC=BUILTIN */
/* compiler builtin: 
   float __attribute__((____vector_size____(16)))  __builtin_ia32_unpcklps(float __attribute__((____vector_size____(16)))   ,
                                                                           float __attribute__((____vector_size____(16)))   ) ;  */
/* END FUNCTION-DECL __builtin_ia32_unpcklps LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_dump_ops LOC=UNKNOWN */
void jit_dump_ops(struct jit *jit , int verbosity ) ;
/* END FUNCTION-DECL jit_dump_ops LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL check_uninitialized_registers LOC=UNKNOWN */
static int check_uninitialized_registers(jit_op *op , char *msg_buf ) ;
/* END FUNCTION-DECL check_uninitialized_registers LOC=UNKNOWN */

/* BEGIN TYPEDEF AMD64_XMM_Reg_No LOC=./jitter-amd64.c:940 */
typedef enum jit_amd64_fp_regs AMD64_XMM_Reg_No;
/* END TYPEDEF AMD64_XMM_Reg_No LOC=./jitter-amd64.c:940 */

/* BEGIN STRUCT rlimit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:365 */
struct rlimit {
   rlim_t rlim_cur ;
   rlim_t rlim_max ;
};
/* END STRUCT rlimit LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/sys/resource.h:365 */

/* BEGIN STRUCT jit_set LOC=./jitter-amd64.c:580 */
struct jit_set {
   jit_tree *root ;
};
/* END STRUCT jit_set LOC=./jitter-amd64.c:580 */

/* BEGIN FUNCTION-DECL-EXTERN pthread_create LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:330 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_create(pthread_t __attribute__((__nullable__))  * _Nonnull __restrict   ,
                                                                                                                          pthread_attr_t const   * _Nullable __restrict   ,
                                                                                                                          void * _Nullable  (* _Nonnull  )(void * _Nullable   ) ,
                                                                                                                          void * _Nullable __restrict   ) ;
/* END FUNCTION-DECL-EXTERN pthread_create LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:330 */

/* BEGIN FUNCTION-DECL __builtin_log10 LOC=BUILTIN */
/* compiler builtin: 
   double __builtin_log10(double  ) ;  */
/* END FUNCTION-DECL __builtin_log10 LOC=BUILTIN */

/* BEGIN FUNCTION-DECL jit_disable_optimization LOC=UNKNOWN */
void jit_disable_optimization(struct jit *jit , int opt ) ;
/* END FUNCTION-DECL jit_disable_optimization LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL jit_tree_delete LOC=UNKNOWN */
__inline static jit_tree *jit_tree_delete(jit_tree *root , jit_tree_key key , int *found ) ;
/* END FUNCTION-DECL jit_tree_delete LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL _cipher$_xtea_decipher LOC=UNKNOWN */
void _cipher$_xtea_decipher(unsigned int block_no , unsigned int num_rounds , unsigned int *v ,
                            unsigned int *key , unsigned int size ) ;
/* END FUNCTION-DECL _cipher$_xtea_decipher LOC=UNKNOWN */

/* BEGIN FUNCTION-DECL-EXTERN pthread_cond_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:295 */
extern int __attribute__((__availability__(ios,introduced=2.0), __availability__(macos,introduced=10.4)))  pthread_cond_destroy(pthread_cond_t * ) ;
/* END FUNCTION-DECL-EXTERN pthread_cond_destroy LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/pthread.h:295 */

/* BEGIN STRUCT __anonstruct_div_t_773697287 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:83 */
struct __anonstruct_div_t_773697287 {
   int quot ;
   int rem ;
};
/* END STRUCT __anonstruct_div_t_773697287 LOC=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/stdlib.h:83 */

/* BEGIN FUNCTION-DEF __isctype LOC=UNKNOWN */
__inline extern __darwin_ct_rune_t __isctype(__darwin_ct_rune_t _c , unsigned long _f ) 
{ 
  int tmp ;

  {
  if (_c < 0) {
    tmp = 0;
  } else
  if (_c >= 1 << 8) {
    tmp = 0;
  } else {
    tmp = ! (! ((unsigned long )_DefaultRuneLocale.__runetype[_c] & _f));
  }
  return (tmp);
}
}
/* END FUNCTION-DEF __isctype LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_op_compilable LOC=UNKNOWN */
int print_op_compilable(struct jit_disasm *disasm , struct jit_op *op , jit_tree *labels ) 
{ 
  struct output_buf *linebuf ;
  struct output_buf *tmp ;
  jit_tree *lab ;
  jit_tree *tmp___0 ;
  int tmp___1 ;
  jit_tree *lab___0 ;
  jit_tree *tmp___2 ;
  int i ;
  char *tmp___3 ;
  char *tmp___4 ;
  char *tmp___5 ;
  long tmp___6 ;
  int len ;

  {
  tmp = ob_new();
  linebuf = tmp;
  tmp___0 = jit_tree_search(labels, (long )op);
  lab = tmp___0;
  if (lab) {
    if ((long )lab->value > 0L) {
      ob_printf(linebuf, "// ");
      ob_printf(linebuf, (char const   *)disasm->label_template, (long )lab->value);
      ob_printf(linebuf, ":\n");
    }
  }
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 640U) {
    print_comment(linebuf, op);
    goto direct_print;
  }
  ob_append(linebuf, disasm->indent_template);
  tmp___1 = jit_op_is_cflow(op);
  if (tmp___1) {
    if ((unsigned long )((void *)op->arg[0]) == (unsigned long )((void *)0)) {
      ob_printf(linebuf, "jit_op * op_%li = ", (unsigned long )op >> 4);
    } else {
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 856U) {
    ob_printf(linebuf, "jit_op * op_%li = ", (unsigned long )op >> 4);
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 512U) {
    ob_printf(linebuf, "jit_op * op_%li = ", (unsigned long )op >> 4);
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 200U) {
    ob_printf(linebuf, "jit_op * op_%li = ", (unsigned long )op >> 4);
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 104U) {
    ob_printf(linebuf, "jit_op * op_%li = ", (unsigned long )op >> 4);
  }
  switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
  case 496U: 
  ob_printf(linebuf, "jit_label * ");
  tmp___2 = jit_tree_search(labels, op->arg[0]);
  lab___0 = tmp___2;
  if (lab___0) {
    ob_printf(linebuf, (char const   *)disasm->label_template, (long )lab___0->value);
  }
  ob_printf(linebuf, " = jit_get_label(p");
  goto print;
  case 344U: 
  ob_printf(linebuf, "jit_patch  (p, op_%li", (unsigned long )op->arg[0] >> 4);
  goto print;
  case 488U: 
  ob_printf(linebuf, "jit_data_byte(p, ");
  ob_printf(linebuf, (char const   *)disasm->generic_value_template, op->arg[0]);
  goto print;
  case 880U: 
  i = 0;
  while ((jit_value )i < op->arg[0]) {
    ob_printf(linebuf, "jit_data_byte(p, ");
    ob_printf(linebuf, (char const   *)disasm->generic_value_template, (int )*((unsigned char *)op->addendum + i));
    if ((jit_value )i < op->arg[0] - 1L) {
      ob_printf(linebuf, ");\n");
    }
    i ++;
  }
  goto print;
  case 512U: 
  case 856U: 
  tmp___3 = jit_get_op_name(op);
  ob_printf(linebuf, "jit_%s(p, ", tmp___3);
  print_arg(disasm, linebuf, op, 1);
  ob_append(linebuf, (char *)", ");
  print_addr(disasm, linebuf, labels, op, 1);
  goto print;
  case 104U: 
  case 200U: 
  tmp___4 = jit_get_op_name(op);
  ob_printf(linebuf, "jit_data_%s(p, ", tmp___4 + 1);
  print_addr(disasm, linebuf, labels, op, 0);
  goto print;
  case 168U: 
  ob_printf(linebuf, "jit_code_align  (p, ");
  ob_printf(linebuf, (char const   *)disasm->generic_value_template, op->arg[0]);
  goto print;
  case 840U: 
  ob_printf(linebuf, "jit_prepare(p");
  goto print;
  default: 
  break;
  }
  tmp___5 = jit_get_op_name(op);
  if ((int )*(tmp___5 + 0) == 46) {
    goto direct_print;
  }
  ob_append(linebuf, (char *)"jit_");
  print_full_op_name(linebuf, op);
  ob_pad(linebuf, 15);
  ob_append(linebuf, (char *)"(p,");
  switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
  case 416U: 
  print_str(linebuf, (char *)op->arg[0]);
  if (! ((int )op->code & 2)) {
    ob_append(linebuf, (char *)", ");
    print_arg(disasm, linebuf, op, 2);
  }
  break;
  case 808U: 
  switch (op->arg[0]) {
  case 0L: 
  ob_append(linebuf, (char *)"JIT_SIGNED_NUM");
  break;
  case 1L: 
  ob_append(linebuf, (char *)"JIT_UNSIGNED_NUM");
  break;
  case 2L: 
  ob_append(linebuf, (char *)"JIT_FLOAT_NUM");
  break;
  case 3L: 
  ob_append(linebuf, (char *)"JIT_PTR");
  break;
  default: 
  tmp___6 = __builtin_expect(1L, 0L);
  if (tmp___6) {
    __assert_rtn("print_op_compilable", "./jitter-amd64.c", 4134, "0");
  }
  }
  ob_append(linebuf, (char *)", ");
  print_arg(disasm, linebuf, op, 2);
  break;
  default: 
  print_args(disasm, linebuf, op, labels);
  }
  if (op->arg_size) {
    ob_printf(linebuf, ", %i", (int )op->arg_size);
  }
  print: 
  ob_append(linebuf, (char *)");");
  direct_print: 
  printf((char const   */* __restrict  */)"%s", linebuf->buf);
  len = (int )linebuf->size;
  ob_free(linebuf);
  return (len);
}
}
/* END FUNCTION-DEF print_op_compilable LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF ob_new LOC=UNKNOWN */
static struct output_buf *ob_new(void) 
{ 
  struct output_buf *ob ;
  void *tmp ;
  void *tmp___0 ;

  {
  tmp = malloc(sizeof(struct output_buf ));
  ob = (struct output_buf *)tmp;
  tmp___0 = malloc((size_t )8192);
  ob->buf = (char *)tmp___0;
  ob->capacity = (size_t )8192;
  ob->size = (size_t )0;
  *(ob->buf + 0) = (char )'\000';
  return (ob);
}
}
/* END FUNCTION-DEF ob_new LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_enable_optimization LOC=UNKNOWN */
void jit_enable_optimization(struct jit *jit , int opt ) 
{ 


  {
  jit->optimizations |= (unsigned int )opt;
  return;
}
}
/* END FUNCTION-DEF jit_enable_optimization LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_dead_code_analysis LOC=UNKNOWN */
static void jit_dead_code_analysis(struct jit *jit , int remove_dead_code ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  jit_op *op___0 ;
  jit_op *tmp___0 ;
  jit_op *op___1 ;
  jit_op *tmp___1 ;
  jit_op *op___2 ;
  jit_op *tmp___2 ;
  jit_op *next ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while (op) {
    op->in_use = (unsigned char)0;
    op = op->next;
  }
  tmp___0 = jit_op_first(jit->ops);
  op___0 = tmp___0;
  while (op___0) {
    if ((unsigned int )((jit_opcode )((int )op___0->code & 65528)) == 384U) {
      mark_livecode(op___0);
    }
    if ((unsigned int )((jit_opcode )((int )op___0->code & 65528)) == 200U) {
      mark_livecode(op___0->jmp_addr);
    }
    op___0 = op___0->next;
  }
  tmp___1 = jit_op_first(jit->ops);
  op___1 = tmp___1;
  while (op___1) {
    if ((unsigned int )((jit_opcode )((int )op___1->code & 65528)) == 216U) {
      op___1->in_use = (unsigned char)1;
    }
    if ((unsigned int )((jit_opcode )((int )op___1->code & 65528)) == 488U) {
      op___1->in_use = (unsigned char)1;
    }
    if ((unsigned int )((jit_opcode )((int )op___1->code & 65528)) == 200U) {
      op___1->in_use = (unsigned char)1;
    }
    if ((unsigned int )((jit_opcode )((int )op___1->code & 65528)) == 104U) {
      op___1->in_use = (unsigned char)1;
    }
    if ((unsigned int )((jit_opcode )((int )op___1->code & 65528)) == 168U) {
      op___1->in_use = (unsigned char)1;
    }
    if ((unsigned int )((jit_opcode )((int )op___1->code & 65528)) == 496U) {
      op___1->in_use = (unsigned char)1;
    }
    if ((unsigned int )((jit_opcode )((int )op___1->code & 65528)) == 344U) {
      op___1->in_use = (unsigned char)1;
    }
    if ((unsigned int )((jit_opcode )((int )op___1->code & 65528)) == 640U) {
      op___1->in_use = (unsigned char)1;
    }
    if ((unsigned int )((jit_opcode )((int )op___1->code & 65528)) == 320U) {
      op___1->in_use = (unsigned char)1;
    }
    op___1 = op___1->next;
  }
  if (! remove_dead_code) {
    return;
  }
  tmp___2 = jit_op_first(jit->ops);
  op___2 = tmp___2;
  while (op___2) {
    if (! op___2->in_use) {
      if ((unsigned int )((jit_opcode )((int )op___2->code & 65528)) == 592U) {
        goto skip;
      }
      next = op___2->next;
      jit_op_delete(op___2);
      op___2 = next;
      continue;
    }
    skip: 
    op___2 = op___2->next;
  }
  return;
}
}
/* END FUNCTION-DEF jit_dead_code_analysis LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rotate_left LOC=UNKNOWN */
__inline static jit_tree *rotate_left(jit_tree *h ) 
{ 
  jit_tree *x ;

  {
  x = h->right;
  h->right = x->left;
  x->left = h;
  x->color = (x->left)->color;
  (x->left)->color = 1;
  return (x);
}
}
/* END FUNCTION-DEF rotate_left LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF assign_call LOC=UNKNOWN */
static int assign_call(jit_op *op , struct jit_reg_allocator *al ) 
{ 


  {
  spill_ret_retreg(op, al->ret_reg);
  spill_ret_retreg(op, al->fpret_reg);
  return (1);
}
}
/* END FUNCTION-DEF assign_call LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF force_spill LOC=UNKNOWN */
static int force_spill(jit_op *op ) 
{ 
  jit_value reg ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp ;

  {
  reg = op->arg[0];
  tmp = rmap_get(op->regmap, reg);
  hreg = tmp;
  if (hreg) {
    unload_reg(op, hreg, reg);
    rmap_unassoc(op->regmap, reg);
  }
  return (1);
}
}
/* END FUNCTION-DEF force_spill LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_generate_code LOC=UNKNOWN */
void jit_generate_code(struct jit *jit ) 
{ 
  int change ;
  int tmp ;
  int tmp___0 ;
  void *tmp___1 ;
  struct jit_op *op ;
  unsigned long offset_1 ;
  unsigned char *tmp___2 ;
  int i ;
  unsigned char *tmp___3 ;
  int i___0 ;
  unsigned long offset_2 ;
  int code_size ;
  void *mem ;
  void *tmp___4 ;
  unsigned long tmp___5 ;
  long pos ;
  jit_op *op___0 ;
  jit_op *tmp___6 ;

  {
  jit_expand_patches_and_labels(jit);
  jit_correct_long_imms(jit);
  jit_correct_float_imms(jit);
  jit_prepare_reg_counts(jit);
  jit_prepare_arguments(jit);
  jit_prepare_spills_on_jmpr_targets(jit);
  if (jit->optimizations & 8U) {
    jit_dead_code_analysis(jit, 1);
  }
  jit_flw_analysis(jit);
  if (jit->optimizations & 2U) {
    jit_optimize_unused_assignments(jit);
  }
  change = 0;
  jit_optimize_st_ops(jit);
  if (jit->optimizations & 4U) {
    tmp = jit_optimize_join_addmul(jit);
    change |= tmp;
    tmp___0 = jit_optimize_join_addimm(jit);
    change |= tmp___0;
  }
  if (change) {
    jit_flw_analysis(jit);
  }
  jit_collect_statistics(jit);
  jit_assign_regs(jit);
  if (jit->optimizations & 1U) {
    jit_optimize_frame_ptr(jit);
  }
  jit->buf_capacity = 4096U;
  tmp___1 = malloc((size_t )jit->buf_capacity);
  jit->buf = (unsigned char *)tmp___1;
  jit->ip = jit->buf;
  op = jit->ops;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    if ((long )jit->buf_capacity - (jit->ip - jit->buf) < 1024L) {
      jit_buf_expand(jit);
    }
    offset_1 = (unsigned long )(jit->ip - jit->buf);
    switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
    case 488U: 
    tmp___2 = jit->ip;
    (jit->ip) ++;
    *tmp___2 = (unsigned char )op->arg[0];
    break;
    case 880U: 
    while ((long )jit->buf_capacity - (jit->ip - jit->buf) < op->arg[0]) {
      jit_buf_expand(jit);
    }
    i = 0;
    while ((jit_value )i < op->arg[0]) {
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = *((unsigned char *)op->addendum + i);
      i ++;
    }
    break;
    case 104U: 
    case 200U: 
    op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
    i___0 = 0;
    while ((unsigned long )i___0 < sizeof(void *)) {
      *(jit->ip) = (unsigned char)0;
      (jit->ip) ++;
      i___0 ++;
    }
    break;
    case 88U: 
    case 320U: 
    case 640U: 
    case 680U: 
    case 432U: 
    break;
    default: 
    jit_gen_op(jit, op);
    }
    offset_2 = (unsigned long )(jit->ip - jit->buf);
    op->code_offset = offset_1;
    op->code_length = offset_2 - offset_1;
    op = op->next;
  }
  code_size = (int )(jit->ip - jit->buf);
  tmp___4 = mmap((void *)0, (size_t )jit->buf_capacity, 7, 4098, -1, (off_t )0);
  mem = tmp___4;
  if ((unsigned long )mem == (unsigned long )((void *)-1)) {
    perror("mmap");
  }
  tmp___5 = __builtin_object_size(mem, 0);
  __builtin___memcpy_chk(mem, (void const   *)jit->buf, (unsigned long )code_size,
                         tmp___5);
  free((void *)jit->buf);
  pos = jit->ip - jit->buf;
  jit->buf = (unsigned char *)mem;
  jit->ip = jit->buf + pos;
  jit->mmaped_buf = (unsigned char)1;
  jit_patch_external_calls(jit);
  jit_patch_local_addrs(jit);
  tmp___6 = jit_op_first(jit->ops);
  op___0 = tmp___6;
  while ((unsigned long )op___0 != (unsigned long )((void *)0)) {
    if ((unsigned int )((jit_opcode )((int )op___0->code & 65528)) == 384U) {
      *((void **)op___0->arg[0]) = (void *)(jit->buf + op___0->patch_addr);
    }
    op___0 = op___0->next;
  }
  return;
}
}
/* END FUNCTION-DEF jit_generate_code LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF branch_adjustment LOC=UNKNOWN */
__inline static void branch_adjustment(struct jit *jit , jit_op *op ) 
{ 
  int tmp ;
  jit_rmap *cur_regmap ;
  jit_rmap *tgt_regmap ;
  jit_op *o ;
  struct jit_op *tmp___0 ;
  int tmp___1 ;
  jit_op *o2 ;
  struct jit_op *tmp___2 ;
  int tmp___3 ;

  {
  tmp = is_cond_branch_op(op);
  if (! tmp) {
    return;
  }
  cur_regmap = op->regmap;
  tgt_regmap = (op->jmp_addr)->regmap;
  tmp___3 = rmap_equal(op, cur_regmap, tgt_regmap);
  if (! tmp___3) {
    switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
    case 80U: 
    op->code = (unsigned short )(528 | ((int )op->code & 7));
    break;
    case 768U: 
    op->code = (unsigned short )(376 | ((int )op->code & 7));
    break;
    case 176U: 
    op->code = (unsigned short )(504 | ((int )op->code & 7));
    break;
    case 528U: 
    op->code = (unsigned short )(80 | ((int )op->code & 7));
    break;
    case 504U: 
    op->code = (unsigned short )(176 | ((int )op->code & 7));
    break;
    case 376U: 
    op->code = (unsigned short )(768 | ((int )op->code & 7));
    break;
    case 208U: 
    op->code = (unsigned short )(736 | ((int )op->code & 7));
    break;
    case 872U: 
    op->code = (unsigned short )(128 | ((int )op->code & 7));
    break;
    case 736U: 
    op->code = (unsigned short )(208 | ((int )op->code & 7));
    break;
    case 128U: 
    op->code = (unsigned short )(872 | ((int )op->code & 7));
    break;
    case 0U: 
    op->code = (unsigned short )(280 | ((int )op->code & 7));
    break;
    case 240U: 
    op->code = (unsigned short )(440 | ((int )op->code & 7));
    break;
    case 576U: 
    op->code = (unsigned short )(288 | ((int )op->code & 7));
    break;
    case 280U: 
    op->code = (unsigned short )((int )op->code & 7);
    break;
    case 288U: 
    op->code = (unsigned short )(576 | ((int )op->code & 7));
    break;
    case 440U: 
    op->code = (unsigned short )(240 | ((int )op->code & 7));
    break;
    default: 
    break;
    }
    tmp___0 = jit_op_new((unsigned short)338, (unsigned char)2, op->arg[0], 0L, 0L,
                         (unsigned char)0);
    o = tmp___0;
    o->r_arg[0] = op->r_arg[0];
    o->regmap = rmap_clone(op->regmap);
    o->live_in = jit_set_clone(op->live_in);
    o->live_out = jit_set_clone(op->live_out);
    o->jmp_addr = op->jmp_addr;
    tmp___1 = jit_is_label(jit, (void *)op->r_arg[0]);
    if (! tmp___1) {
      (op->jmp_addr)->arg[0] = (jit_value )o;
      (op->jmp_addr)->r_arg[0] = (jit_value )o;
    }
    jit_op_append(op, o);
    tmp___2 = jit_op_new((unsigned short)344, (unsigned char)2, (jit_value )op, 0L,
                         0L, (unsigned char)0);
    o2 = tmp___2;
    o2->r_arg[0] = o2->arg[0];
    jit_op_append(o, o2);
    op->arg[0] = (jit_value )o2;
    op->r_arg[0] = (jit_value )o2;
    op->jmp_addr = o2;
  }
  return;
}
}
/* END FUNCTION-DEF branch_adjustment LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF valid_size LOC=UNKNOWN */
static int valid_size(int size ) 
{ 


  {
  switch (size) {
  case 8: 
  case 4: 
  case 2: 
  case 1: 
  return (1);
  default: 
  return (0);
  }
}
}
/* END FUNCTION-DEF valid_size LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF make_free_reg LOC=UNKNOWN */
static jit_hw_reg *make_free_reg(struct jit_reg_allocator *al , jit_op *op , jit_value for_reg ) 
{ 
  int spill ;
  jit_value spill_candidate ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp ;
  int tmp___0 ;

  {
  spill = 0;
  spill_candidate = (jit_value )-1;
  tmp = rmap_spill_candidate(al, op, for_reg, & spill, & spill_candidate, 0);
  hreg = tmp;
  if (spill) {
    tmp___0 = jit_set_get(op->live_in, (int )spill_candidate);
    if (tmp___0) {
      unload_reg(op, hreg, spill_candidate);
    }
    rmap_unassoc(op->regmap, spill_candidate);
  }
  return (hreg);
}
}
/* END FUNCTION-DEF make_free_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF check_missing_patches LOC=UNKNOWN */
static int check_missing_patches(jit_op *op , char *msg_buf ) 
{ 
  int tmp ;

  {
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 648U) {
    goto _L___1;
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 336U) {
    _L___1: /* CIL Label */ 
    if ((int )op->code & 2) {
      goto _L;
    } else {
      goto _L___0;
    }
  } else {
    _L___0: /* CIL Label */ 
    tmp = is_cond_branch_op(op);
    if (tmp) {
      _L: /* CIL Label */ 
      if (op->arg[0] == (jit_value )((void *)0)) {
        if ((unsigned long )op->jmp_addr == (unsigned long )((void *)0)) {
          append_msg(msg_buf, (char *)"missing patch");
          return (128);
        }
      }
    }
  }
  return (0);
}
}
/* END FUNCTION-DEF check_missing_patches LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF pow2 LOC=UNKNOWN */
__inline static int pow2(int arg ) 
{ 
  int r ;
  int i ;

  {
  r = 1;
  i = 0;
  while (i < arg) {
    r *= 2;
    i ++;
  }
  return (r);
}
}
/* END FUNCTION-DEF pow2 LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF join_muli_ori LOC=UNKNOWN */
static int join_muli_ori(jit_op *op , jit_op *nextop ) 
{ 
  int tmp ;
  int max ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  tmp = is_suitable_mul(op);
  if (! tmp) {
    return (0);
  }
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 96U) {
    max = (int )op->arg[2];
    tmp___1 = max;
  } else {
    tmp___0 = pow2((int )op->arg[2]);
    tmp___1 = tmp___0;
  }
  max = tmp___1;
  if (nextop->arg[2] > 0L) {
    if (nextop->arg[2] < (jit_value )max) {
      tmp___2 = make_addmuli(op, nextop);
      return (tmp___2);
    } else {
      return (0);
    }
  } else {
    return (0);
  }
}
}
/* END FUNCTION-DEF join_muli_ori LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF associate_register LOC=UNKNOWN */
static void associate_register(struct jit_reg_allocator *al , jit_op *op , int i ) 
{ 
  jit_hw_reg *reg ;
  jit_hw_reg *tmp ;
  jit_hw_reg *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  tmp = rmap_get(op->regmap, op->arg[i]);
  reg = tmp;
  if (reg) {
    op->r_arg[i] = (jit_value )reg->id;
  } else {
    tmp___2 = is_transfer_op(op);
    if (tmp___2) {
      op->r_arg[i] = (jit_value )-1;
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) != 648U) {
      reg = make_free_reg(al, op, op->arg[i]);
      rmap_assoc(op->regmap, op->arg[i], reg);
      op->r_arg[i] = (jit_value )reg->id;
      tmp___1 = jit_set_get(op->live_in, (int )op->arg[i]);
      if (tmp___1) {
        tmp___0 = rmap_get(op->regmap, op->arg[i]);
        load_reg(op, tmp___0, op->arg[i]);
      }
    } else {
      op->r_arg[i] = (jit_value )-1;
    }
  }
  return;
}
}
/* END FUNCTION-DEF associate_register LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_message LOC=UNKNOWN */
void jit_message(struct jit *j , char *s ) 
{ 
  struct jit_debug_info *tmp ;

  {
  tmp = jit_debug_info_new("head.c", "jit_message", 19);
  jit_add_op(j, (unsigned short)418, (unsigned char)2, (jit_value )s, 0L, 0L, (unsigned char)0,
             tmp);
  return;
}
}
/* END FUNCTION-DEF jit_message LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF __darwin_fd_isset LOC=UNKNOWN */
__inline extern int ( __attribute__((__always_inline__)) __darwin_fd_isset)(int _fd ,
                                                                            struct fd_set  const  *_p ) 
{ 
  int tmp ;

  {
  tmp = __darwin_check_fd_set(_fd, (void const   *)_p);
  if (tmp) {
    return (_p->fds_bits[(unsigned long )_fd / (sizeof(__int32_t ) * 8UL)] & (__int32_t )(1UL << (unsigned long )_fd % (sizeof(__int32_t ) * 8UL)));
  }
  return (0);
}
}
/* END FUNCTION-DEF __darwin_fd_isset LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_trace_op LOC=UNKNOWN */
void jit_trace_op(struct jit *jit , jit_op *op , int verbosity ) 
{ 
  jit_tree *labels ;
  jit_tree *tmp ;
  FILE *f ;
  FILE *tmp___0 ;

  {
  tmp = prepare_labels(jit);
  labels = tmp;
  if (verbosity & 1) {
    print_op(__stdoutp, & jit_disasm_general, op, labels, verbosity);
    printf((char const   */* __restrict  */)"\n");
  }
  if (verbosity & 4) {
    tmp___0 = open_disasm();
    f = tmp___0;
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"..addr=%lx\n",
            op->code_offset);
    print_combined_op(f, jit, op, labels);
    fclose(f);
    wait((int *)((void *)0));
  }
  jit_tree_free(labels);
  return;
}
}
/* END FUNCTION-DEF jit_trace_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_transfer_op LOC=UNKNOWN */
static void emit_transfer_op(struct jit *jit , jit_op *op , int alu_op ) 
{ 
  jit_op *init_op ;
  struct transfer_info *tinf ;
  unsigned char _amd64_rex_bits ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___60 ;
  int tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  int tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  x86_imm_buf imb___5 ;
  int tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  int tmp___80 ;
  int tmp___81 ;
  int tmp___82 ;
  unsigned char *tmp___83 ;
  int tmp___84 ;
  unsigned char *tmp___85 ;
  int tmp___86 ;
  unsigned char *tmp___87 ;
  x86_imm_buf imb___6 ;
  int tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  int tmp___93 ;
  int tmp___94 ;

  {
  init_op = op->prev;
  while ((unsigned int )((jit_opcode )((int )init_op->code & 65528)) != 184U) {
    init_op = init_op->prev;
  }
  tinf = (struct transfer_info *)init_op->addendum;
  if (op->arg[1] == (jit_value )((2 << 1) | (1 << 4))) {
    while (1) {
      while (1) {
        if (tinf->scrapreg > 7) {
          tmp = 4;
        } else {
          tmp = 0;
        }
        if (tinf->counterreg > 7) {
          tmp___0 = 2;
        } else {
          tmp___0 = 0;
        }
        if (tinf->destreg > 7) {
          tmp___1 = 1;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )(((8 | tmp) | tmp___0) | tmp___1);
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      while (1) {
        tmp___3 = jit->ip;
        (jit->ip) ++;
        *tmp___3 = (unsigned char )(((int )((unsigned char )alu_op) << 3) + 3);
        while (1) {
          if ((tinf->destreg & 7) == -1) {
            while (1) {
              tmp___4 = jit->ip;
              (jit->ip) ++;
              *tmp___4 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___5 = jit->ip;
              (jit->ip) ++;
              *tmp___5 = (unsigned char )((((tinf->counterreg & 7) & 7) << 3) | 5);
              break;
            }
            while (1) {
              imb.val = - tinf->block_size;
              tmp___6 = jit->ip;
              (jit->ip) ++;
              *tmp___6 = imb.b[0];
              tmp___7 = jit->ip;
              (jit->ip) ++;
              *tmp___7 = imb.b[1];
              tmp___8 = jit->ip;
              (jit->ip) ++;
              *tmp___8 = imb.b[2];
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = imb.b[3];
              break;
            }
          } else
          if (- tinf->block_size == 0) {
            if ((tinf->destreg & 7) != 5) {
              while (1) {
                tmp___10 = jit->ip;
                (jit->ip) ++;
                *tmp___10 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___11 = jit->ip;
                (jit->ip) ++;
                *tmp___11 = (unsigned char )(((((tinf->counterreg & 7) & 7) & 7) << 3) | (((tinf->destreg & 7) & 7) & 7));
                break;
              }
            } else {
              goto _L___0;
            }
          } else
          _L___0: /* CIL Label */ 
          if (- tinf->block_size >= -128) {
            if (- tinf->block_size <= 127) {
              while (1) {
                tmp___12 = jit->ip;
                (jit->ip) ++;
                *tmp___12 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___13 = jit->ip;
                (jit->ip) ++;
                *tmp___13 = (unsigned char )(((((tinf->counterreg & 7) & 7) & 7) << 3) | (((tinf->destreg & 7) & 7) & 7));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- tinf->block_size & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L;
            }
          } else {
            _L: /* CIL Label */ 
            while (1) {
              tmp___14 = jit->ip;
              (jit->ip) ++;
              *tmp___14 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___15 = jit->ip;
              (jit->ip) ++;
              *tmp___15 = (unsigned char )(((((tinf->counterreg & 7) & 7) & 7) << 3) | (((tinf->destreg & 7) & 7) & 7));
              break;
            }
            while (1) {
              imb___0.val = - tinf->block_size;
              tmp___16 = jit->ip;
              (jit->ip) ++;
              *tmp___16 = imb___0.b[0];
              tmp___17 = jit->ip;
              (jit->ip) ++;
              *tmp___17 = imb___0.b[1];
              tmp___18 = jit->ip;
              (jit->ip) ++;
              *tmp___18 = imb___0.b[2];
              tmp___19 = jit->ip;
              (jit->ip) ++;
              *tmp___19 = imb___0.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  } else
  if (op->r_arg[1] != -1L) {
    if (op->r_arg[1] == (jit_value )tinf->counterreg) {
      if (tinf->counter_in_use) {
        while (1) {
          while (1) {
            if (tinf->scrapreg > 7) {
              tmp___20 = 4;
            } else {
              tmp___20 = 0;
            }
            _amd64_rex_bits___0 = (unsigned char )(8 | tmp___20);
            if ((int )_amd64_rex_bits___0 != 0) {
              tmp___21 = jit->ip;
              (jit->ip) ++;
              *tmp___21 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
            }
            break;
          }
          while (1) {
            tmp___22 = jit->ip;
            (jit->ip) ++;
            *tmp___22 = (unsigned char )(((int )((unsigned char )alu_op) << 3) + 3);
            while (1) {
              if (- sizeof(void *) == 0UL) {
                while (1) {
                  tmp___23 = jit->ip;
                  (jit->ip) ++;
                  *tmp___23 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___24 = jit->ip;
                  (jit->ip) ++;
                  *tmp___24 = (unsigned char )((4 << 3) | 4);
                  break;
                }
              } else
              if ((int )(- sizeof(void *)) >= -128) {
                if ((int )(- sizeof(void *)) <= 127) {
                  while (1) {
                    tmp___25 = jit->ip;
                    (jit->ip) ++;
                    *tmp___25 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___26 = jit->ip;
                    (jit->ip) ++;
                    *tmp___26 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(- sizeof(void *) & 255UL);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___1;
                }
              } else {
                _L___1: /* CIL Label */ 
                while (1) {
                  tmp___27 = jit->ip;
                  (jit->ip) ++;
                  *tmp___27 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___28 = jit->ip;
                  (jit->ip) ++;
                  *tmp___28 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  imb___1.val = (int )(- sizeof(void *));
                  tmp___29 = jit->ip;
                  (jit->ip) ++;
                  *tmp___29 = imb___1.b[0];
                  tmp___30 = jit->ip;
                  (jit->ip) ++;
                  *tmp___30 = imb___1.b[1];
                  tmp___31 = jit->ip;
                  (jit->ip) ++;
                  *tmp___31 = imb___1.b[2];
                  tmp___32 = jit->ip;
                  (jit->ip) ++;
                  *tmp___32 = imb___1.b[3];
                  break;
                }
              }
              break;
              if (- sizeof(void *) == 0UL) {
                while (1) {
                  tmp___33 = jit->ip;
                  (jit->ip) ++;
                  *tmp___33 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
                  break;
                }
                break;
              }
              if ((int )(- sizeof(void *)) >= -128) {
                if ((int )(- sizeof(void *)) <= 127) {
                  while (1) {
                    tmp___34 = jit->ip;
                    (jit->ip) ++;
                    *tmp___34 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(- sizeof(void *) & 255UL);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___2;
                }
              } else {
                _L___2: /* CIL Label */ 
                while (1) {
                  tmp___35 = jit->ip;
                  (jit->ip) ++;
                  *tmp___35 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  imb___2.val = (int )(- sizeof(void *));
                  tmp___36 = jit->ip;
                  (jit->ip) ++;
                  *tmp___36 = imb___2.b[0];
                  tmp___37 = jit->ip;
                  (jit->ip) ++;
                  *tmp___37 = imb___2.b[1];
                  tmp___38 = jit->ip;
                  (jit->ip) ++;
                  *tmp___38 = imb___2.b[2];
                  tmp___39 = jit->ip;
                  (jit->ip) ++;
                  *tmp___39 = imb___2.b[3];
                  break;
                }
              }
              break;
            }
            break;
          }
          break;
        }
      } else {
        goto _L___6;
      }
    } else
    _L___6: /* CIL Label */ 
    if (op->r_arg[1] == (jit_value )tinf->scrapreg) {
      if (tinf->scrap_in_use) {
        while (1) {
          while (1) {
            if (tinf->scrapreg > 7) {
              tmp___40 = 4;
            } else {
              tmp___40 = 0;
            }
            _amd64_rex_bits___1 = (unsigned char )(8 | tmp___40);
            if ((int )_amd64_rex_bits___1 != 0) {
              tmp___41 = jit->ip;
              (jit->ip) ++;
              *tmp___41 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
            }
            break;
          }
          while (1) {
            tmp___42 = jit->ip;
            (jit->ip) ++;
            *tmp___42 = (unsigned char )(((int )((unsigned char )alu_op) << 3) + 3);
            while (1) {
              if (- sizeof(void *) * 2UL == 0UL) {
                while (1) {
                  tmp___43 = jit->ip;
                  (jit->ip) ++;
                  *tmp___43 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___44 = jit->ip;
                  (jit->ip) ++;
                  *tmp___44 = (unsigned char )((4 << 3) | 4);
                  break;
                }
              } else
              if ((int )(- sizeof(void *) * 2UL) >= -128) {
                if ((int )(- sizeof(void *) * 2UL) <= 127) {
                  while (1) {
                    tmp___45 = jit->ip;
                    (jit->ip) ++;
                    *tmp___45 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___46 = jit->ip;
                    (jit->ip) ++;
                    *tmp___46 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(- sizeof(void *) * 2UL & 255UL);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___3;
                }
              } else {
                _L___3: /* CIL Label */ 
                while (1) {
                  tmp___47 = jit->ip;
                  (jit->ip) ++;
                  *tmp___47 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___48 = jit->ip;
                  (jit->ip) ++;
                  *tmp___48 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  imb___3.val = (int )(- sizeof(void *) * 2UL);
                  tmp___49 = jit->ip;
                  (jit->ip) ++;
                  *tmp___49 = imb___3.b[0];
                  tmp___50 = jit->ip;
                  (jit->ip) ++;
                  *tmp___50 = imb___3.b[1];
                  tmp___51 = jit->ip;
                  (jit->ip) ++;
                  *tmp___51 = imb___3.b[2];
                  tmp___52 = jit->ip;
                  (jit->ip) ++;
                  *tmp___52 = imb___3.b[3];
                  break;
                }
              }
              break;
              if (- sizeof(void *) * 2UL == 0UL) {
                while (1) {
                  tmp___53 = jit->ip;
                  (jit->ip) ++;
                  *tmp___53 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
                  break;
                }
                break;
              }
              if ((int )(- sizeof(void *) * 2UL) >= -128) {
                if ((int )(- sizeof(void *) * 2UL) <= 127) {
                  while (1) {
                    tmp___54 = jit->ip;
                    (jit->ip) ++;
                    *tmp___54 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(- sizeof(void *) * 2UL & 255UL);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___4;
                }
              } else {
                _L___4: /* CIL Label */ 
                while (1) {
                  tmp___55 = jit->ip;
                  (jit->ip) ++;
                  *tmp___55 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  imb___4.val = (int )(- sizeof(void *) * 2UL);
                  tmp___56 = jit->ip;
                  (jit->ip) ++;
                  *tmp___56 = imb___4.b[0];
                  tmp___57 = jit->ip;
                  (jit->ip) ++;
                  *tmp___57 = imb___4.b[1];
                  tmp___58 = jit->ip;
                  (jit->ip) ++;
                  *tmp___58 = imb___4.b[2];
                  tmp___59 = jit->ip;
                  (jit->ip) ++;
                  *tmp___59 = imb___4.b[3];
                  break;
                }
              }
              break;
            }
            break;
          }
          break;
        }
      } else {
        goto _L___5;
      }
    } else {
      _L___5: /* CIL Label */ 
      while (1) {
        while (1) {
          if (tinf->scrapreg > 7) {
            tmp___60 = 4;
          } else {
            tmp___60 = 0;
          }
          if (op->r_arg[1] > 7L) {
            tmp___61 = 1;
          } else {
            tmp___61 = 0;
          }
          _amd64_rex_bits___2 = (unsigned char )((8 | tmp___60) | tmp___61);
          if ((int )_amd64_rex_bits___2 != 0) {
            tmp___62 = jit->ip;
            (jit->ip) ++;
            *tmp___62 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
          }
          break;
        }
        tmp___63 = jit->ip;
        (jit->ip) ++;
        *tmp___63 = (unsigned char )(((int )((unsigned char )alu_op) << 3) + 3);
        while (1) {
          while (1) {
            tmp___64 = jit->ip;
            (jit->ip) ++;
            *tmp___64 = (unsigned char )((long )((3 << 6) | ((tinf->scrapreg & 7) << 3)) | (op->r_arg[1] & 7L));
            break;
          }
          break;
        }
        break;
      }
    }
  } else {
    while (1) {
      while (1) {
        if (tinf->scrapreg > 7) {
          tmp___65 = 4;
        } else {
          tmp___65 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )(8 | tmp___65);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___66 = jit->ip;
          (jit->ip) ++;
          *tmp___66 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      while (1) {
        tmp___67 = jit->ip;
        (jit->ip) ++;
        *tmp___67 = (unsigned char )(((int )((unsigned char )alu_op) << 3) + 3);
        while (1) {
          if (0) {
            tmp___82 = stack_reg_pos(jit, (int )op->arg[1]);
            if (tmp___82 == 0) {
              while (1) {
                tmp___68 = jit->ip;
                (jit->ip) ++;
                *tmp___68 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___69 = jit->ip;
                (jit->ip) ++;
                *tmp___69 = (unsigned char )((4 << 3) | 4);
                break;
              }
            } else {
              tmp___80 = stack_reg_pos(jit, (int )op->arg[1]);
              if (tmp___80 >= -128) {
                tmp___81 = stack_reg_pos(jit, (int )op->arg[1]);
                if (tmp___81 <= 127) {
                  while (1) {
                    tmp___70 = jit->ip;
                    (jit->ip) ++;
                    *tmp___70 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___71 = jit->ip;
                    (jit->ip) ++;
                    *tmp___71 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    tmp___72 = stack_reg_pos(jit, (int )op->arg[1]);
                    *(jit->ip) = (unsigned char )(tmp___72 & 255);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___7;
                }
              } else {
                _L___7: /* CIL Label */ 
                while (1) {
                  tmp___73 = jit->ip;
                  (jit->ip) ++;
                  *tmp___73 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___74 = jit->ip;
                  (jit->ip) ++;
                  *tmp___74 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___75 = stack_reg_pos(jit, (int )op->arg[1]);
                  imb___5.val = tmp___75;
                  tmp___76 = jit->ip;
                  (jit->ip) ++;
                  *tmp___76 = imb___5.b[0];
                  tmp___77 = jit->ip;
                  (jit->ip) ++;
                  *tmp___77 = imb___5.b[1];
                  tmp___78 = jit->ip;
                  (jit->ip) ++;
                  *tmp___78 = imb___5.b[2];
                  tmp___79 = jit->ip;
                  (jit->ip) ++;
                  *tmp___79 = imb___5.b[3];
                  break;
                }
              }
            }
            break;
          }
          tmp___84 = stack_reg_pos(jit, (int )op->arg[1]);
          if (tmp___84 == 0) {

          }
          tmp___93 = stack_reg_pos(jit, (int )op->arg[1]);
          if (tmp___93 >= -128) {
            tmp___94 = stack_reg_pos(jit, (int )op->arg[1]);
            if (tmp___94 <= 127) {
              while (1) {
                tmp___85 = jit->ip;
                (jit->ip) ++;
                *tmp___85 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 5);
                break;
              }
              while (1) {
                tmp___86 = stack_reg_pos(jit, (int )op->arg[1]);
                *(jit->ip) = (unsigned char )(tmp___86 & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___8;
            }
          } else {
            _L___8: /* CIL Label */ 
            while (1) {
              tmp___87 = jit->ip;
              (jit->ip) ++;
              *tmp___87 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 5);
              break;
            }
            while (1) {
              tmp___88 = stack_reg_pos(jit, (int )op->arg[1]);
              imb___6.val = tmp___88;
              tmp___89 = jit->ip;
              (jit->ip) ++;
              *tmp___89 = imb___6.b[0];
              tmp___90 = jit->ip;
              (jit->ip) ++;
              *tmp___90 = imb___6.b[1];
              tmp___91 = jit->ip;
              (jit->ip) ++;
              *tmp___91 = imb___6.b[2];
              tmp___92 = jit->ip;
              (jit->ip) ++;
              *tmp___92 = imb___6.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  }
  if (op->arg[0]) {
    emit_transfer_loop(jit, (jit_op *)op->arg[0]);
  }
  return;
}
}
/* END FUNCTION-DEF emit_transfer_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_div_op LOC=UNKNOWN */
static void emit_div_op(struct jit *jit , struct jit_op *op , int imm , int sign ,
                        int modulo ) 
{ 
  jit_value dest ;
  jit_value dividend ;
  jit_value divisor ;
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  long tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  int tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  int tmp___15 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  int tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  int tmp___23 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  int tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  int tmp___31 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  x86_imm_buf imb ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char _amd64_rex_bits___7 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char _amd64_rex_bits___9 ;
  int tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char _amd64_rex_bits___10 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char _amd64_rex_bits___11 ;
  int tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  int ax_in_use ;
  int tmp___86 ;
  int dx_in_use ;
  int tmp___87 ;
  unsigned char _amd64_rex_bits___12 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char _amd64_rex_bits___13 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char _amd64_rex_bits___14 ;
  int tmp___93 ;
  int tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  long tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char _amd64_rex_bits___15 ;
  unsigned char *tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char _amd64_rex_bits___16 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char _amd64_rex_bits___17 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char _amd64_rex_bits___18 ;
  int tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  amd64_imm_buf imb___5 ;
  unsigned char *tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  unsigned char *tmp___116 ;
  unsigned char *tmp___117 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___118 ;
  unsigned char *tmp___119 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  unsigned char _amd64_rex_bits___19 ;
  unsigned char *tmp___122 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  int tmp___125 ;
  unsigned char _amd64_rex_bits___20 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char _amd64_rex_bits___21 ;
  int tmp___128 ;
  unsigned char *tmp___129 ;
  unsigned char *tmp___130 ;
  unsigned char *tmp___131 ;
  unsigned char _amd64_rex_bits___22 ;
  int tmp___132 ;
  int tmp___133 ;
  unsigned char *tmp___134 ;
  unsigned char *tmp___135 ;
  unsigned char *tmp___136 ;
  long tmp___137 ;
  unsigned char *tmp___138 ;
  unsigned char _amd64_rex_bits___23 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  unsigned char _amd64_rex_bits___24 ;
  unsigned char *tmp___141 ;
  unsigned char *tmp___142 ;
  unsigned char *tmp___143 ;
  unsigned char _amd64_rex_bits___25 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  unsigned char *tmp___146 ;
  int tmp___147 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;
  int tmp___150 ;
  unsigned char *tmp___151 ;
  unsigned char *tmp___152 ;
  int tmp___153 ;
  unsigned char *tmp___154 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___155 ;
  unsigned char *tmp___156 ;
  unsigned char *tmp___157 ;
  unsigned char *tmp___158 ;
  unsigned char *tmp___159 ;
  int tmp___160 ;
  unsigned char *tmp___161 ;
  int tmp___162 ;
  unsigned char *tmp___163 ;
  int tmp___164 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___165 ;
  unsigned char *tmp___166 ;
  unsigned char *tmp___167 ;
  unsigned char *tmp___168 ;
  unsigned char _amd64_rex_bits___26 ;
  unsigned char *tmp___169 ;
  unsigned char *tmp___170 ;
  unsigned char *tmp___171 ;
  unsigned char _amd64_rex_bits___27 ;
  unsigned char *tmp___172 ;
  unsigned char *tmp___173 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___174 ;
  unsigned char *tmp___175 ;
  unsigned char *tmp___176 ;
  unsigned char *tmp___177 ;
  unsigned char _amd64_rex_bits___28 ;
  unsigned char *tmp___178 ;
  unsigned char *tmp___179 ;
  unsigned char *tmp___180 ;
  x86_imm_buf imb___10 ;
  unsigned char *tmp___181 ;
  unsigned char *tmp___182 ;
  unsigned char *tmp___183 ;
  unsigned char *tmp___184 ;
  unsigned char _amd64_rex_bits___29 ;
  int tmp___185 ;
  unsigned char *tmp___186 ;
  unsigned char *tmp___187 ;
  unsigned char *tmp___188 ;
  int tmp___189 ;
  unsigned char *tmp___190 ;
  unsigned char _amd64_rex_bits___30 ;
  int tmp___191 ;
  int tmp___192 ;
  unsigned char *tmp___193 ;
  unsigned char *tmp___194 ;
  unsigned char *tmp___195 ;
  long tmp___196 ;
  unsigned char *tmp___197 ;
  unsigned char *tmp___198 ;
  unsigned char _amd64_rex_bits___31 ;
  int tmp___199 ;
  int tmp___200 ;
  unsigned char *tmp___201 ;
  unsigned char *tmp___202 ;
  unsigned char *tmp___203 ;
  long tmp___204 ;
  unsigned char *tmp___205 ;
  unsigned char _amd64_rex_bits___32 ;
  unsigned char *tmp___206 ;
  unsigned char *tmp___207 ;
  unsigned char _amd64_rex_bits___33 ;
  unsigned char *tmp___208 ;
  unsigned char *tmp___209 ;

  {
  dest = op->r_arg[0];
  dividend = op->r_arg[1];
  divisor = op->r_arg[2];
  if (imm) {
    if (divisor == 2L) {
      goto _L;
    } else
    if (divisor == 4L) {
      goto _L;
    } else
    if (divisor == 8L) {
      _L: /* CIL Label */ 
      if (dest != dividend) {
        while (1) {
          if (sizeof(void *) == 2UL) {
            tmp = jit->ip;
            (jit->ip) ++;
            *tmp = (unsigned char)102;
          }
          while (1) {
            if (sizeof(void *) > 4UL) {
              tmp___0 = 8;
            } else {
              tmp___0 = 0;
            }
            if (dest > 7L) {
              tmp___1 = 4;
            } else {
              tmp___1 = 0;
            }
            if (dividend > 7L) {
              tmp___2 = 1;
            } else {
              tmp___2 = 0;
            }
            _amd64_rex_bits = (unsigned char )((tmp___0 | tmp___1) | tmp___2);
            if ((int )_amd64_rex_bits != 0) {
              tmp___3 = jit->ip;
              (jit->ip) ++;
              *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
            } else
            if (sizeof(void *) == 1UL) {
              tmp___3 = jit->ip;
              (jit->ip) ++;
              *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          switch (sizeof(void *)) {
          case 1UL: 
          tmp___4 = jit->ip;
          (jit->ip) ++;
          *tmp___4 = (unsigned char)138;
          break;
          case 8UL: 
          case 4UL: 
          case 2UL: 
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char)139;
          break;
          default: 
          tmp___6 = __builtin_expect(1L, 0L);
          if (tmp___6) {
            __assert_rtn("emit_div_op", "./jitter-amd64.c", 2855, "0");
          }
          }
          while (1) {
            while (1) {
              tmp___7 = jit->ip;
              (jit->ip) ++;
              *tmp___7 = (unsigned char )(((long )(3 << 6) | ((dest & 7L) << 3)) | (dividend & 7L));
              break;
            }
            break;
          }
          break;
        }
      }
      if (! modulo) {
        switch (divisor) {
        case 2L: 
        while (1) {
          while (1) {
            if (dest > 7L) {
              tmp___8 = 1;
            } else {
              tmp___8 = 0;
            }
            _amd64_rex_bits___0 = (unsigned char )(8 | tmp___8);
            if ((int )_amd64_rex_bits___0 != 0) {
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
            }
            break;
          }
          while (1) {
            tmp___10 = jit->ip;
            (jit->ip) ++;
            *tmp___10 = (unsigned char)209;
            while (1) {
              while (1) {
                tmp___11 = jit->ip;
                (jit->ip) ++;
                if (sign) {
                  tmp___12 = 7;
                } else {
                  tmp___12 = 5;
                }
                *tmp___11 = (unsigned char )((long )((3 << 6) | ((tmp___12 & 7) << 3)) | ((dest & 7L) & 7L));
                break;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
        case 4L: 
        while (1) {
          while (1) {
            if (dest > 7L) {
              tmp___16 = 1;
            } else {
              tmp___16 = 0;
            }
            _amd64_rex_bits___1 = (unsigned char )(8 | tmp___16);
            if ((int )_amd64_rex_bits___1 != 0) {
              tmp___17 = jit->ip;
              (jit->ip) ++;
              *tmp___17 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
            }
            break;
          }
          while (1) {
            tmp___21 = jit->ip;
            (jit->ip) ++;
            *tmp___21 = (unsigned char)193;
            while (1) {
              while (1) {
                tmp___22 = jit->ip;
                (jit->ip) ++;
                if (sign) {
                  tmp___23 = 7;
                } else {
                  tmp___23 = 5;
                }
                *tmp___22 = (unsigned char )((long )((3 << 6) | ((tmp___23 & 7) << 3)) | ((dest & 7L) & 7L));
                break;
              }
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)2;
              (jit->ip) ++;
              break;
            }
            break;
          }
          break;
        }
        break;
        case 8L: 
        while (1) {
          while (1) {
            if (dest > 7L) {
              tmp___24 = 1;
            } else {
              tmp___24 = 0;
            }
            _amd64_rex_bits___2 = (unsigned char )(8 | tmp___24);
            if ((int )_amd64_rex_bits___2 != 0) {
              tmp___25 = jit->ip;
              (jit->ip) ++;
              *tmp___25 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
            }
            break;
          }
          while (1) {
            tmp___29 = jit->ip;
            (jit->ip) ++;
            *tmp___29 = (unsigned char)193;
            while (1) {
              while (1) {
                tmp___30 = jit->ip;
                (jit->ip) ++;
                if (sign) {
                  tmp___31 = 7;
                } else {
                  tmp___31 = 5;
                }
                *tmp___30 = (unsigned char )((long )((3 << 6) | ((tmp___31 & 7) << 3)) | ((dest & 7L) & 7L));
                break;
              }
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)3;
              (jit->ip) ++;
              break;
            }
            break;
          }
          break;
        }
        break;
        }
        return;
      }
      if (modulo) {
        if (! sign) {
          switch (divisor) {
          case 2L: 
          while (1) {
            while (1) {
              if (dest > 7L) {
                tmp___32 = 1;
              } else {
                tmp___32 = 0;
              }
              _amd64_rex_bits___3 = (unsigned char )(8 | tmp___32);
              if ((int )_amd64_rex_bits___3 != 0) {
                tmp___33 = jit->ip;
                (jit->ip) ++;
                *tmp___33 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
              }
              break;
            }
            tmp___34 = jit->ip;
            (jit->ip) ++;
            *tmp___34 = (unsigned char)131;
            while (1) {
              while (1) {
                tmp___35 = jit->ip;
                (jit->ip) ++;
                *tmp___35 = (unsigned char )((long )((3 << 6) | (4 << 3)) | (dest & 7L));
                break;
              }
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)1;
              (jit->ip) ++;
              break;
            }
            break;
          }
          break;
          case 4L: 
          while (1) {
            while (1) {
              if (dest > 7L) {
                tmp___50 = 1;
              } else {
                tmp___50 = 0;
              }
              _amd64_rex_bits___6 = (unsigned char )(8 | tmp___50);
              if ((int )_amd64_rex_bits___6 != 0) {
                tmp___51 = jit->ip;
                (jit->ip) ++;
                *tmp___51 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
              }
              break;
            }
            tmp___52 = jit->ip;
            (jit->ip) ++;
            *tmp___52 = (unsigned char)131;
            while (1) {
              while (1) {
                tmp___53 = jit->ip;
                (jit->ip) ++;
                *tmp___53 = (unsigned char )((long )((3 << 6) | (4 << 3)) | (dest & 7L));
                break;
              }
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)3;
              (jit->ip) ++;
              break;
            }
            break;
          }
          break;
          case 8L: 
          while (1) {
            while (1) {
              if (dest > 7L) {
                tmp___68 = 1;
              } else {
                tmp___68 = 0;
              }
              _amd64_rex_bits___9 = (unsigned char )(8 | tmp___68);
              if ((int )_amd64_rex_bits___9 != 0) {
                tmp___69 = jit->ip;
                (jit->ip) ++;
                *tmp___69 = (unsigned char )(64 | (int )_amd64_rex_bits___9);
              }
              break;
            }
            tmp___70 = jit->ip;
            (jit->ip) ++;
            *tmp___70 = (unsigned char)131;
            while (1) {
              while (1) {
                tmp___71 = jit->ip;
                (jit->ip) ++;
                *tmp___71 = (unsigned char )((long )((3 << 6) | (4 << 3)) | (dest & 7L));
                break;
              }
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)7;
              (jit->ip) ++;
              break;
            }
            break;
          }
          break;
          }
          return;
        }
      }
    }
  }
  tmp___86 = jit_reg_in_use(op, 0, 0);
  ax_in_use = tmp___86;
  tmp___87 = jit_reg_in_use(op, 2, 0);
  dx_in_use = tmp___87;
  if (dest != 0L) {
    if (ax_in_use) {
      while (1) {
        while (1) {
          _amd64_rex_bits___12 = (unsigned char)0;
          if ((int )_amd64_rex_bits___12 != 0) {
            tmp___88 = jit->ip;
            (jit->ip) ++;
            *tmp___88 = (unsigned char )(64 | (int )_amd64_rex_bits___12);
          }
          break;
        }
        tmp___89 = jit->ip;
        (jit->ip) ++;
        *tmp___89 = (unsigned char)80;
        break;
      }
    }
  }
  if (dest != 2L) {
    if (dx_in_use) {
      while (1) {
        while (1) {
          _amd64_rex_bits___13 = (unsigned char)0;
          if ((int )_amd64_rex_bits___13 != 0) {
            tmp___90 = jit->ip;
            (jit->ip) ++;
            *tmp___90 = (unsigned char )(64 | (int )_amd64_rex_bits___13);
          }
          break;
        }
        tmp___91 = jit->ip;
        (jit->ip) ++;
        *tmp___91 = (unsigned char)82;
        break;
      }
    }
  }
  if (imm) {
    if (dividend != 0L) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp___92 = jit->ip;
          (jit->ip) ++;
          *tmp___92 = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___93 = 8;
          } else {
            tmp___93 = 0;
          }
          if (dividend > 7L) {
            tmp___94 = 1;
          } else {
            tmp___94 = 0;
          }
          _amd64_rex_bits___14 = (unsigned char )(tmp___93 | tmp___94);
          if ((int )_amd64_rex_bits___14 != 0) {
            tmp___95 = jit->ip;
            (jit->ip) ++;
            *tmp___95 = (unsigned char )(64 | (int )_amd64_rex_bits___14);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___95 = jit->ip;
            (jit->ip) ++;
            *tmp___95 = (unsigned char )(64 | (int )_amd64_rex_bits___14);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___96 = jit->ip;
        (jit->ip) ++;
        *tmp___96 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___97 = jit->ip;
        (jit->ip) ++;
        *tmp___97 = (unsigned char)139;
        break;
        default: 
        tmp___98 = __builtin_expect(1L, 0L);
        if (tmp___98) {
          __assert_rtn("emit_div_op", "./jitter-amd64.c", 2881, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___99 = jit->ip;
            (jit->ip) ++;
            *tmp___99 = (unsigned char )((long )(3 << 6) | (dividend & 7L));
            break;
          }
          break;
        }
        break;
      }
    }
    if (sign) {
      while (1) {
        while (1) {
          _amd64_rex_bits___15 = (unsigned char)8;
          if ((int )_amd64_rex_bits___15 != 0) {
            tmp___100 = jit->ip;
            (jit->ip) ++;
            *tmp___100 = (unsigned char )(64 | (int )_amd64_rex_bits___15);
          }
          break;
        }
        while (1) {
          tmp___101 = jit->ip;
          (jit->ip) ++;
          *tmp___101 = (unsigned char)153;
          break;
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          _amd64_rex_bits___16 = (unsigned char)8;
          if ((int )_amd64_rex_bits___16 != 0) {
            tmp___102 = jit->ip;
            (jit->ip) ++;
            *tmp___102 = (unsigned char )(64 | (int )_amd64_rex_bits___16);
          }
          break;
        }
        tmp___103 = jit->ip;
        (jit->ip) ++;
        *tmp___103 = (unsigned char )((6 << 3) + 3);
        while (1) {
          while (1) {
            tmp___104 = jit->ip;
            (jit->ip) ++;
            *tmp___104 = (unsigned char )(((3 << 6) | (2 << 3)) | 2);
            break;
          }
          break;
        }
        break;
      }
    }
    if (dest != 3L) {
      while (1) {
        while (1) {
          _amd64_rex_bits___17 = (unsigned char)0;
          if ((int )_amd64_rex_bits___17 != 0) {
            tmp___105 = jit->ip;
            (jit->ip) ++;
            *tmp___105 = (unsigned char )(64 | (int )_amd64_rex_bits___17);
          }
          break;
        }
        tmp___106 = jit->ip;
        (jit->ip) ++;
        *tmp___106 = (unsigned char)83;
        break;
      }
    }
    while (1) {
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___107 = 8;
        } else {
          tmp___107 = 0;
        }
        _amd64_rex_bits___18 = (unsigned char )tmp___107;
        if ((int )_amd64_rex_bits___18 != 0) {
          tmp___108 = jit->ip;
          (jit->ip) ++;
          *tmp___108 = (unsigned char )(64 | (int )_amd64_rex_bits___18);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___108 = jit->ip;
          (jit->ip) ++;
          *tmp___108 = (unsigned char )(64 | (int )_amd64_rex_bits___18);
        }
        break;
      }
      tmp___109 = jit->ip;
      (jit->ip) ++;
      *tmp___109 = (unsigned char)187;
      if (sizeof(void *) == 8UL) {
        while (1) {
          imb___5.val = (size_t )divisor;
          tmp___110 = jit->ip;
          (jit->ip) ++;
          *tmp___110 = imb___5.b[0];
          tmp___111 = jit->ip;
          (jit->ip) ++;
          *tmp___111 = imb___5.b[1];
          tmp___112 = jit->ip;
          (jit->ip) ++;
          *tmp___112 = imb___5.b[2];
          tmp___113 = jit->ip;
          (jit->ip) ++;
          *tmp___113 = imb___5.b[3];
          tmp___114 = jit->ip;
          (jit->ip) ++;
          *tmp___114 = imb___5.b[4];
          tmp___115 = jit->ip;
          (jit->ip) ++;
          *tmp___115 = imb___5.b[5];
          tmp___116 = jit->ip;
          (jit->ip) ++;
          *tmp___116 = imb___5.b[6];
          tmp___117 = jit->ip;
          (jit->ip) ++;
          *tmp___117 = imb___5.b[7];
          break;
        }
      } else {
        while (1) {
          imb___6.val = (int )((size_t )divisor);
          tmp___118 = jit->ip;
          (jit->ip) ++;
          *tmp___118 = imb___6.b[0];
          tmp___119 = jit->ip;
          (jit->ip) ++;
          *tmp___119 = imb___6.b[1];
          tmp___120 = jit->ip;
          (jit->ip) ++;
          *tmp___120 = imb___6.b[2];
          tmp___121 = jit->ip;
          (jit->ip) ++;
          *tmp___121 = imb___6.b[3];
          break;
        }
      }
      break;
    }
    while (1) {
      while (1) {
        _amd64_rex_bits___19 = (unsigned char)8;
        if ((int )_amd64_rex_bits___19 != 0) {
          tmp___122 = jit->ip;
          (jit->ip) ++;
          *tmp___122 = (unsigned char )(64 | (int )_amd64_rex_bits___19);
        }
        break;
      }
      while (1) {
        tmp___123 = jit->ip;
        (jit->ip) ++;
        *tmp___123 = (unsigned char)247;
        while (1) {
          while (1) {
            tmp___124 = jit->ip;
            (jit->ip) ++;
            if (sign) {
              tmp___125 = 1;
            } else {
              tmp___125 = 0;
            }
            *tmp___124 = (unsigned char )(((3 << 6) | (((6 + tmp___125) & 7) << 3)) | 3);
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    if (dest != 3L) {
      while (1) {
        while (1) {
          _amd64_rex_bits___20 = (unsigned char)0;
          if ((int )_amd64_rex_bits___20 != 0) {
            tmp___126 = jit->ip;
            (jit->ip) ++;
            *tmp___126 = (unsigned char )(64 | (int )_amd64_rex_bits___20);
          }
          break;
        }
        tmp___127 = jit->ip;
        (jit->ip) ++;
        *tmp___127 = (unsigned char)91;
        break;
      }
    }
  } else {
    if (divisor == 0L) {
      goto _L___0;
    } else
    if (divisor == 2L) {
      _L___0: /* CIL Label */ 
      while (1) {
        while (1) {
          if (divisor > 7L) {
            tmp___128 = 1;
          } else {
            tmp___128 = 0;
          }
          _amd64_rex_bits___21 = (unsigned char )tmp___128;
          if ((int )_amd64_rex_bits___21 != 0) {
            tmp___129 = jit->ip;
            (jit->ip) ++;
            *tmp___129 = (unsigned char )(64 | (int )_amd64_rex_bits___21);
          }
          break;
        }
        tmp___130 = jit->ip;
        (jit->ip) ++;
        *tmp___130 = (unsigned char )(80L + (divisor & 7L));
        break;
      }
    }
    if (dividend != 0L) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp___131 = jit->ip;
          (jit->ip) ++;
          *tmp___131 = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___132 = 8;
          } else {
            tmp___132 = 0;
          }
          if (dividend > 7L) {
            tmp___133 = 1;
          } else {
            tmp___133 = 0;
          }
          _amd64_rex_bits___22 = (unsigned char )(tmp___132 | tmp___133);
          if ((int )_amd64_rex_bits___22 != 0) {
            tmp___134 = jit->ip;
            (jit->ip) ++;
            *tmp___134 = (unsigned char )(64 | (int )_amd64_rex_bits___22);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___134 = jit->ip;
            (jit->ip) ++;
            *tmp___134 = (unsigned char )(64 | (int )_amd64_rex_bits___22);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___135 = jit->ip;
        (jit->ip) ++;
        *tmp___135 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___136 = jit->ip;
        (jit->ip) ++;
        *tmp___136 = (unsigned char)139;
        break;
        default: 
        tmp___137 = __builtin_expect(1L, 0L);
        if (tmp___137) {
          __assert_rtn("emit_div_op", "./jitter-amd64.c", 2893, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___138 = jit->ip;
            (jit->ip) ++;
            *tmp___138 = (unsigned char )((long )(3 << 6) | (dividend & 7L));
            break;
          }
          break;
        }
        break;
      }
    }
    if (sign) {
      while (1) {
        while (1) {
          _amd64_rex_bits___23 = (unsigned char)8;
          if ((int )_amd64_rex_bits___23 != 0) {
            tmp___139 = jit->ip;
            (jit->ip) ++;
            *tmp___139 = (unsigned char )(64 | (int )_amd64_rex_bits___23);
          }
          break;
        }
        while (1) {
          tmp___140 = jit->ip;
          (jit->ip) ++;
          *tmp___140 = (unsigned char)153;
          break;
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          _amd64_rex_bits___24 = (unsigned char)8;
          if ((int )_amd64_rex_bits___24 != 0) {
            tmp___141 = jit->ip;
            (jit->ip) ++;
            *tmp___141 = (unsigned char )(64 | (int )_amd64_rex_bits___24);
          }
          break;
        }
        tmp___142 = jit->ip;
        (jit->ip) ++;
        *tmp___142 = (unsigned char )((6 << 3) + 3);
        while (1) {
          while (1) {
            tmp___143 = jit->ip;
            (jit->ip) ++;
            *tmp___143 = (unsigned char )(((3 << 6) | (2 << 3)) | 2);
            break;
          }
          break;
        }
        break;
      }
    }
    if (divisor == 0L) {
      goto _L___2;
    } else
    if (divisor == 2L) {
      _L___2: /* CIL Label */ 
      while (1) {
        while (1) {
          _amd64_rex_bits___25 = (unsigned char)8;
          if ((int )_amd64_rex_bits___25 != 0) {
            tmp___144 = jit->ip;
            (jit->ip) ++;
            *tmp___144 = (unsigned char )(64 | (int )_amd64_rex_bits___25);
          }
          break;
        }
        while (1) {
          tmp___145 = jit->ip;
          (jit->ip) ++;
          *tmp___145 = (unsigned char)247;
          while (1) {
            while (1) {
              tmp___146 = jit->ip;
              (jit->ip) ++;
              if (sign) {
                tmp___147 = 1;
              } else {
                tmp___147 = 0;
              }
              *tmp___146 = (unsigned char )((((6 + tmp___147) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___148 = jit->ip;
              (jit->ip) ++;
              *tmp___148 = (unsigned char )((4 << 3) | 4);
              break;
            }
            break;
            while (1) {
              tmp___159 = jit->ip;
              (jit->ip) ++;
              if (sign) {
                tmp___160 = 1;
              } else {
                tmp___160 = 0;
              }
              *tmp___159 = (unsigned char )((((6 + tmp___160) & 7) << 3) | 4);
              break;
            }
            break;
            while (1) {
              tmp___161 = jit->ip;
              (jit->ip) ++;
              if (sign) {
                tmp___162 = 1;
              } else {
                tmp___162 = 0;
              }
              *tmp___161 = (unsigned char )(((1 << 6) | (((6 + tmp___162) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)0;
              (jit->ip) ++;
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      while (1) {
        if ((int )sizeof(void *) >= -128) {
          if ((int )sizeof(void *) <= 127) {
            while (1) {
              _amd64_rex_bits___26 = (unsigned char)8;
              if ((int )_amd64_rex_bits___26 != 0) {
                tmp___169 = jit->ip;
                (jit->ip) ++;
                *tmp___169 = (unsigned char )(64 | (int )_amd64_rex_bits___26);
              }
              break;
            }
            tmp___170 = jit->ip;
            (jit->ip) ++;
            *tmp___170 = (unsigned char)131;
            while (1) {
              while (1) {
                tmp___171 = jit->ip;
                (jit->ip) ++;
                *tmp___171 = (unsigned char )((3 << 6) | 4);
                break;
              }
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(sizeof(void *) & 255UL);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___1;
          }
        } else {
          _L___1: /* CIL Label */ 
          while (1) {
            _amd64_rex_bits___28 = (unsigned char)8;
            if ((int )_amd64_rex_bits___28 != 0) {
              tmp___178 = jit->ip;
              (jit->ip) ++;
              *tmp___178 = (unsigned char )(64 | (int )_amd64_rex_bits___28);
            }
            break;
          }
          tmp___179 = jit->ip;
          (jit->ip) ++;
          *tmp___179 = (unsigned char)129;
          while (1) {
            while (1) {
              tmp___180 = jit->ip;
              (jit->ip) ++;
              *tmp___180 = (unsigned char )((3 << 6) | 4);
              break;
            }
            break;
          }
          while (1) {
            imb___10.val = (int )sizeof(void *);
            tmp___181 = jit->ip;
            (jit->ip) ++;
            *tmp___181 = imb___10.b[0];
            tmp___182 = jit->ip;
            (jit->ip) ++;
            *tmp___182 = imb___10.b[1];
            tmp___183 = jit->ip;
            (jit->ip) ++;
            *tmp___183 = imb___10.b[2];
            tmp___184 = jit->ip;
            (jit->ip) ++;
            *tmp___184 = imb___10.b[3];
            break;
          }
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          if (divisor > 7L) {
            tmp___185 = 1;
          } else {
            tmp___185 = 0;
          }
          _amd64_rex_bits___29 = (unsigned char )(8 | tmp___185);
          if ((int )_amd64_rex_bits___29 != 0) {
            tmp___186 = jit->ip;
            (jit->ip) ++;
            *tmp___186 = (unsigned char )(64 | (int )_amd64_rex_bits___29);
          }
          break;
        }
        while (1) {
          tmp___187 = jit->ip;
          (jit->ip) ++;
          *tmp___187 = (unsigned char)247;
          while (1) {
            while (1) {
              tmp___188 = jit->ip;
              (jit->ip) ++;
              if (sign) {
                tmp___189 = 1;
              } else {
                tmp___189 = 0;
              }
              *tmp___188 = (unsigned char )((long )((3 << 6) | (((6 + tmp___189) & 7) << 3)) | ((divisor & 7L) & 7L));
              break;
            }
            break;
          }
          break;
        }
        break;
      }
    }
  }
  if (! modulo) {
    if (dest != 0L) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp___190 = jit->ip;
          (jit->ip) ++;
          *tmp___190 = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___191 = 8;
          } else {
            tmp___191 = 0;
          }
          if (dest > 7L) {
            tmp___192 = 4;
          } else {
            tmp___192 = 0;
          }
          _amd64_rex_bits___30 = (unsigned char )(tmp___191 | tmp___192);
          if ((int )_amd64_rex_bits___30 != 0) {
            tmp___193 = jit->ip;
            (jit->ip) ++;
            *tmp___193 = (unsigned char )(64 | (int )_amd64_rex_bits___30);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___193 = jit->ip;
            (jit->ip) ++;
            *tmp___193 = (unsigned char )(64 | (int )_amd64_rex_bits___30);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___194 = jit->ip;
        (jit->ip) ++;
        *tmp___194 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___195 = jit->ip;
        (jit->ip) ++;
        *tmp___195 = (unsigned char)139;
        break;
        default: 
        tmp___196 = __builtin_expect(1L, 0L);
        if (tmp___196) {
          __assert_rtn("emit_div_op", "./jitter-amd64.c", 2907, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___197 = jit->ip;
            (jit->ip) ++;
            *tmp___197 = (unsigned char )((long )(3 << 6) | ((dest & 7L) << 3));
            break;
          }
          break;
        }
        break;
      }
    }
  } else
  if (dest != 2L) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___198 = jit->ip;
        (jit->ip) ++;
        *tmp___198 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___199 = 8;
        } else {
          tmp___199 = 0;
        }
        if (dest > 7L) {
          tmp___200 = 4;
        } else {
          tmp___200 = 0;
        }
        _amd64_rex_bits___31 = (unsigned char )(tmp___199 | tmp___200);
        if ((int )_amd64_rex_bits___31 != 0) {
          tmp___201 = jit->ip;
          (jit->ip) ++;
          *tmp___201 = (unsigned char )(64 | (int )_amd64_rex_bits___31);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___201 = jit->ip;
          (jit->ip) ++;
          *tmp___201 = (unsigned char )(64 | (int )_amd64_rex_bits___31);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___202 = jit->ip;
      (jit->ip) ++;
      *tmp___202 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___203 = jit->ip;
      (jit->ip) ++;
      *tmp___203 = (unsigned char)139;
      break;
      default: 
      tmp___204 = __builtin_expect(1L, 0L);
      if (tmp___204) {
        __assert_rtn("emit_div_op", "./jitter-amd64.c", 2909, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___205 = jit->ip;
          (jit->ip) ++;
          *tmp___205 = (unsigned char )(((long )(3 << 6) | ((dest & 7L) << 3)) | 2L);
          break;
        }
        break;
      }
      break;
    }
  }
  if (dest != 2L) {
    if (dx_in_use) {
      while (1) {
        while (1) {
          _amd64_rex_bits___32 = (unsigned char)0;
          if ((int )_amd64_rex_bits___32 != 0) {
            tmp___206 = jit->ip;
            (jit->ip) ++;
            *tmp___206 = (unsigned char )(64 | (int )_amd64_rex_bits___32);
          }
          break;
        }
        tmp___207 = jit->ip;
        (jit->ip) ++;
        *tmp___207 = (unsigned char)90;
        break;
      }
    }
  }
  if (dest != 0L) {
    if (ax_in_use) {
      while (1) {
        while (1) {
          _amd64_rex_bits___33 = (unsigned char)0;
          if ((int )_amd64_rex_bits___33 != 0) {
            tmp___208 = jit->ip;
            (jit->ip) ++;
            *tmp___208 = (unsigned char )(64 | (int )_amd64_rex_bits___33);
          }
          break;
        }
        tmp___209 = jit->ip;
        (jit->ip) ++;
        *tmp___209 = (unsigned char)88;
        break;
      }
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_div_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF stack_reg_pos LOC=UNKNOWN */
__inline static int stack_reg_pos(struct jit *jit , int r ) 
{ 
  struct jit_func_info *info ;
  struct jit_func_info *tmp ;
  jit_value addr ;
  int arg_id ;
  struct jit_inp_arg *a ;
  struct jit_func_info *tmp___0 ;
  long tmp___1 ;

  {
  tmp = jit_current_func_info(jit);
  info = tmp;
  if (((r >> 1) & 3) == 0) {
    addr = info->allocai_mem;
    if ((r & 1) == 0) {
      return ((int )(- ((unsigned long )addr + (unsigned long )(((r >> 4) & 268435455) + 1) * sizeof(void *))));
    } else {
      return ((int )(- ((unsigned long )addr + (unsigned long )((info->gp_reg_count + ((r >> 4) & 268435455)) + 1) * sizeof(void *))));
    }
  }
  if (((r >> 1) & 3) == 3) {
    arg_id = (r >> 4) & 268435455;
    tmp___0 = jit_current_func_info(jit);
    a = tmp___0->args + arg_id;
    return (a->spill_pos);
  }
  tmp___1 = __builtin_expect(1L, 0L);
  if (tmp___1) {
    __assert_rtn("stack_reg_pos", "./jitter-amd64.c", 1764, "0");
  }
  return (0);
}
}
/* END FUNCTION-DEF stack_reg_pos LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF force_assoc LOC=UNKNOWN */
static int force_assoc(jit_op *op , struct jit_reg_allocator *al ) 
{ 
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp ;

  {
  if (op->arg[1] == 0L) {
    tmp = al->gp_regs + op->arg[2];
  } else {
    tmp = al->fp_regs + op->arg[2];
  }
  hreg = tmp;
  rmap_assoc(op->regmap, op->arg[0], hreg);
  load_reg(op, hreg, op->arg[0]);
  return (1);
}
}
/* END FUNCTION-DEF force_assoc LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_tree_search LOC=UNKNOWN */
static jit_tree *jit_tree_search(jit_tree *h , jit_tree_key key ) 
{ 
  jit_tree *tmp ;
  jit_tree *tmp___0 ;

  {
  if ((unsigned long )h == (unsigned long )((void *)0)) {
    return (h);
  } else
  if (h->key == key) {
    return (h);
  }
  if (h->key > key) {
    tmp = jit_tree_search(h->left, key);
    return (tmp);
  }
  tmp___0 = jit_tree_search(h->right, key);
  return (tmp___0);
}
}
/* END FUNCTION-DEF jit_tree_search LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF join_2ops LOC=UNKNOWN */
static int join_2ops(jit_op *op , int opcode1 , int opcode2 , int (*joinfn)(jit_op * ,
                                                                            jit_op * ) ) 
{ 
  jit_value result_reg ;
  jit_op *nextop ;
  jit_op *tmp ;
  int tmp___0 ;

  {
  if ((int )op->code == opcode1) {
    result_reg = op->arg[0];
    tmp = get_related_op(op, (int )result_reg);
    nextop = tmp;
    if (nextop) {
      if ((int )nextop->code == opcode2) {
        tmp___0 = (*joinfn)(op, nextop);
        return (tmp___0);
      }
    }
  }
  return (0);
}
}
/* END FUNCTION-DEF join_2ops LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF _OSSwapInt32 LOC=UNKNOWN */
__inline static __uint32_t _OSSwapInt32(__uint32_t _data ) 
{ 
  int tmp ;

  {
  tmp = __builtin_bswap32((int )_data);
  return ((__uint32_t )tmp);
}
}
/* END FUNCTION-DEF _OSSwapInt32 LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_op_is_data_op LOC=UNKNOWN */
static int jit_op_is_data_op(jit_op *op ) 
{ 
  jit_opcode code ;
  int tmp ;

  {
  while (1) {
    if (op) {
      if (! ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 496U)) {
        if (! ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 344U)) {
          break;
        }
      }
    } else {
      break;
    }
    op = op->next;
  }
  if (! op) {
    return (0);
  }
  code = (jit_opcode )((int )op->code & 65528);
  if ((unsigned int )code == 488U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 880U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 200U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 104U) {
    tmp = 1;
  } else {
    tmp = 0;
  }
  return (tmp);
}
}
/* END FUNCTION-DEF jit_op_is_data_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_pop_callee_saved_regs LOC=UNKNOWN */
static int emit_pop_callee_saved_regs(struct jit *jit ) 
{ 
  int count ;
  struct jit_op *op ;
  jit_hw_reg *active_regs[32] ;
  int i ;
  jit_hw_reg *r ;
  struct jit_op *o ;
  int tmp ;
  int stack_space ;
  jit_value tmp___0 ;
  int stack_offset ;
  int i___0 ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;

  {
  count = 0;
  op = jit->current_func;
  i = (jit->reg_al)->gp_reg_cnt - 1;
  while (i >= 0) {
    r = (jit->reg_al)->gp_regs + i;
    if (r->callee_saved) {
      o = op->next;
      while ((unsigned long )o != (unsigned long )((void *)0)) {
        if ((unsigned int )((jit_opcode )((int )o->code & 65528)) == 384U) {
          break;
        }
        tmp = uses_hw_reg(o, (jit_value )r->id, 0);
        if (tmp) {
          active_regs[count] = r;
          count ++;
          break;
        }
        o = o->next;
      }
    }
    i --;
  }
  tmp___0 = jit_value_align((jit_value )((unsigned long )count * sizeof(void *)),
                            (jit_value )16);
  stack_space = (int )tmp___0;
  stack_offset = (int )((unsigned long )stack_space - (unsigned long )count * sizeof(void *));
  i___0 = 0;
  while (i___0 < count) {
    stack_offset = emit_pop_reg(jit, active_regs[i___0], stack_offset);
    i___0 ++;
  }
  if (stack_space) {
    while (1) {
      if (stack_space >= -128) {
        if (stack_space <= 127) {
          while (1) {
            _amd64_rex_bits = (unsigned char)8;
            if ((int )_amd64_rex_bits != 0) {
              tmp___1 = jit->ip;
              (jit->ip) ++;
              *tmp___1 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___3 = jit->ip;
              (jit->ip) ++;
              *tmp___3 = (unsigned char )((3 << 6) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(stack_space & 255);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)8;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___10 = jit->ip;
            (jit->ip) ++;
            *tmp___10 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___11 = jit->ip;
        (jit->ip) ++;
        *tmp___11 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = (unsigned char )((3 << 6) | 4);
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = stack_space;
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = imb___0.b[0];
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = imb___0.b[1];
          tmp___15 = jit->ip;
          (jit->ip) ++;
          *tmp___15 = imb___0.b[2];
          tmp___16 = jit->ip;
          (jit->ip) ++;
          *tmp___16 = imb___0.b[3];
          break;
        }
      }
      break;
    }
  }
  return (count);
}
}
/* END FUNCTION-DEF emit_pop_callee_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF _OSSwapInt64 LOC=UNKNOWN */
__inline static __uint64_t _OSSwapInt64(__uint64_t _data ) 
{ 
  long tmp ;

  {
  tmp = __builtin_bswap64((long )_data);
  return ((__uint64_t )tmp);
}
}
/* END FUNCTION-DEF _OSSwapInt64 LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isspecial LOC=UNKNOWN */
__inline extern int isspecial(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 1048576UL);
  return (tmp);
}
}
/* END FUNCTION-DEF isspecial LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_tree_delete LOC=UNKNOWN */
__inline static jit_tree *jit_tree_delete(jit_tree *root , jit_tree_key key , int *found ) 
{ 


  {
  root = delete_node(root, key, found);
  if (root) {
    root->color = 0;
  }
  return (root);
}
}
/* END FUNCTION-DEF jit_tree_delete LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_unassoc LOC=UNKNOWN */
static void rmap_unassoc(jit_rmap *rmap , jit_value reg ) 
{ 


  {
  rmap->map = jit_tree_delete(rmap->map, reg, (int *)((void *)0));
  return;
}
}
/* END FUNCTION-DEF rmap_unassoc LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_patch_local_addrs LOC=UNKNOWN */
void jit_patch_local_addrs(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  unsigned char *buf ;
  jit_value addr ;
  int tmp___0 ;
  long tmp___1 ;
  int tmp___2 ;
  unsigned char _amd64_rex_bits ;
  int tmp___3 ;
  int tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  amd64_imm_buf imb ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *buf___0 ;
  jit_value addr___0 ;
  int tmp___19 ;
  long tmp___20 ;
  int tmp___21 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 856U) {
      goto _L;
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 512U) {
      _L: /* CIL Label */ 
      buf = jit->buf + op->patch_addr;
      tmp___2 = jit_is_label(jit, (void *)op->arg[1]);
      if (tmp___2) {
        tmp___1 = ((jit_label *)op->arg[1])->pos;
      } else {
        tmp___1 = op->arg[1];
      }
      addr = tmp___1;
      while (1) {
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___3 = 8;
          } else {
            tmp___3 = 0;
          }
          if (op->r_arg[0] > 7L) {
            tmp___4 = 1;
          } else {
            tmp___4 = 0;
          }
          _amd64_rex_bits = (unsigned char )(tmp___3 | tmp___4);
          if ((int )_amd64_rex_bits != 0) {
            tmp___5 = buf;
            buf ++;
            *tmp___5 = (unsigned char )(64 | (int )_amd64_rex_bits);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___5 = buf;
            buf ++;
            *tmp___5 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        tmp___6 = buf;
        buf ++;
        *tmp___6 = (unsigned char )(184L + (op->r_arg[0] & 7L));
        if (sizeof(void *) == 8UL) {
          while (1) {
            imb.val = (size_t )(jit->buf + addr);
            tmp___7 = buf;
            buf ++;
            *tmp___7 = imb.b[0];
            tmp___8 = buf;
            buf ++;
            *tmp___8 = imb.b[1];
            tmp___9 = buf;
            buf ++;
            *tmp___9 = imb.b[2];
            tmp___10 = buf;
            buf ++;
            *tmp___10 = imb.b[3];
            tmp___11 = buf;
            buf ++;
            *tmp___11 = imb.b[4];
            tmp___12 = buf;
            buf ++;
            *tmp___12 = imb.b[5];
            tmp___13 = buf;
            buf ++;
            *tmp___13 = imb.b[6];
            tmp___14 = buf;
            buf ++;
            *tmp___14 = imb.b[7];
            break;
          }
        } else {
          while (1) {
            imb___0.val = (int )((size_t )(jit->buf + addr));
            tmp___15 = buf;
            buf ++;
            *tmp___15 = imb___0.b[0];
            tmp___16 = buf;
            buf ++;
            *tmp___16 = imb___0.b[1];
            tmp___17 = buf;
            buf ++;
            *tmp___17 = imb___0.b[2];
            tmp___18 = buf;
            buf ++;
            *tmp___18 = imb___0.b[3];
            break;
          }
        }
        break;
      }
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 200U) {
      goto _L___0;
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 104U) {
      _L___0: /* CIL Label */ 
      buf___0 = jit->buf + op->patch_addr;
      tmp___21 = jit_is_label(jit, (void *)op->arg[0]);
      if (tmp___21) {
        tmp___20 = ((jit_label *)op->arg[0])->pos;
      } else {
        tmp___20 = op->arg[0];
      }
      addr___0 = tmp___20;
      *((jit_value *)buf___0) = (jit_value )(jit->buf + addr___0);
    }
    op = op->next;
  }
  return;
}
}
/* END FUNCTION-DEF jit_patch_local_addrs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_msg_op LOC=UNKNOWN */
static void emit_msg_op(struct jit *jit , jit_op *op ) 
{ 
  unsigned char _amd64_rex_bits ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  long tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  amd64_imm_buf imb ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  int _amd64_width_temp ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  unsigned char *tmp___26 ;
  int tmp___27 ;
  unsigned char *tmp___28 ;
  amd64_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  int tmp___41 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;

  {
  emit_save_all_regs(jit, op);
  if (! ((int )op->code & 2)) {
    while (1) {
      while (1) {
        if (op->r_arg[1] > 7L) {
          tmp = 1;
        } else {
          tmp = 0;
        }
        _amd64_rex_bits = (unsigned char )(8 | tmp);
        if ((int )_amd64_rex_bits != 0) {
          tmp___0 = jit->ip;
          (jit->ip) ++;
          *tmp___0 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      while (1) {
        switch (4) {
        case 1: 
        tmp___1 = jit->ip;
        (jit->ip) ++;
        *tmp___1 = (unsigned char)138;
        break;
        case 2: 
        tmp___2 = jit->ip;
        (jit->ip) ++;
        *tmp___2 = (unsigned char)102;
        case 4: 
        tmp___3 = jit->ip;
        (jit->ip) ++;
        *tmp___3 = (unsigned char)139;
        break;
        default: 
        tmp___4 = __builtin_expect(1L, 0L);
        if (tmp___4) {
          __assert_rtn("emit_msg_op", "./jitter-amd64.c", 2267, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___5 = jit->ip;
            (jit->ip) ++;
            *tmp___5 = (unsigned char )((long )((3 << 6) | (6 << 3)) | ((op->r_arg[1] & 7L) & 7L));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___0 = (unsigned char)8;
      if ((int )_amd64_rex_bits___0 != 0) {
        tmp___6 = jit->ip;
        (jit->ip) ++;
        *tmp___6 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
      }
      break;
    }
    tmp___7 = jit->ip;
    (jit->ip) ++;
    *tmp___7 = (unsigned char)191;
    while (1) {
      imb.val = (size_t )op->r_arg[0];
      tmp___8 = jit->ip;
      (jit->ip) ++;
      *tmp___8 = imb.b[0];
      tmp___9 = jit->ip;
      (jit->ip) ++;
      *tmp___9 = imb.b[1];
      tmp___10 = jit->ip;
      (jit->ip) ++;
      *tmp___10 = imb.b[2];
      tmp___11 = jit->ip;
      (jit->ip) ++;
      *tmp___11 = imb.b[3];
      tmp___12 = jit->ip;
      (jit->ip) ++;
      *tmp___12 = imb.b[4];
      tmp___13 = jit->ip;
      (jit->ip) ++;
      *tmp___13 = imb.b[5];
      tmp___14 = jit->ip;
      (jit->ip) ++;
      *tmp___14 = imb.b[6];
      tmp___15 = jit->ip;
      (jit->ip) ++;
      *tmp___15 = imb.b[7];
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___1 = (unsigned char)8;
      if ((int )_amd64_rex_bits___1 != 0) {
        tmp___20 = jit->ip;
        (jit->ip) ++;
        *tmp___20 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
      }
      break;
    }
    tmp___21 = jit->ip;
    (jit->ip) ++;
    *tmp___21 = (unsigned char )((6 << 3) + 3);
    while (1) {
      while (1) {
        tmp___22 = jit->ip;
        (jit->ip) ++;
        *tmp___22 = (unsigned char )(3 << 6);
        break;
      }
      break;
    }
    break;
  }
  while (1) {
    _amd64_width_temp = (size_t )(& printf) == (size_t )((int )((size_t )(& printf)));
    while (1) {
      while (1) {
        if (_amd64_width_temp) {
          tmp___25 = 4;
        } else {
          tmp___25 = 8;
        }
        if (tmp___25 > 4) {
          tmp___24 = 8;
        } else {
          tmp___24 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )tmp___24;
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___26 = jit->ip;
          (jit->ip) ++;
          *tmp___26 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        } else {
          if (_amd64_width_temp) {
            tmp___27 = 4;
          } else {
            tmp___27 = 8;
          }
          if (tmp___27 == 1) {
            tmp___26 = jit->ip;
            (jit->ip) ++;
            *tmp___26 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
          }
        }
        break;
      }
      tmp___28 = jit->ip;
      (jit->ip) ++;
      *tmp___28 = (unsigned char)186;
      if (_amd64_width_temp) {
        tmp___41 = 4;
      } else {
        tmp___41 = 8;
      }
      if (tmp___41 == 8) {
        while (1) {
          imb___1.val = (size_t )(& printf);
          tmp___29 = jit->ip;
          (jit->ip) ++;
          *tmp___29 = imb___1.b[0];
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = imb___1.b[1];
          tmp___31 = jit->ip;
          (jit->ip) ++;
          *tmp___31 = imb___1.b[2];
          tmp___32 = jit->ip;
          (jit->ip) ++;
          *tmp___32 = imb___1.b[3];
          tmp___33 = jit->ip;
          (jit->ip) ++;
          *tmp___33 = imb___1.b[4];
          tmp___34 = jit->ip;
          (jit->ip) ++;
          *tmp___34 = imb___1.b[5];
          tmp___35 = jit->ip;
          (jit->ip) ++;
          *tmp___35 = imb___1.b[6];
          tmp___36 = jit->ip;
          (jit->ip) ++;
          *tmp___36 = imb___1.b[7];
          break;
        }
      } else {
        while (1) {
          imb___2.val = (int )((size_t )(& printf));
          tmp___37 = jit->ip;
          (jit->ip) ++;
          *tmp___37 = imb___2.b[0];
          tmp___38 = jit->ip;
          (jit->ip) ++;
          *tmp___38 = imb___2.b[1];
          tmp___39 = jit->ip;
          (jit->ip) ++;
          *tmp___39 = imb___2.b[2];
          tmp___40 = jit->ip;
          (jit->ip) ++;
          *tmp___40 = imb___2.b[3];
          break;
        }
      }
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___3 = (unsigned char)0;
      if ((int )_amd64_rex_bits___3 != 0) {
        tmp___42 = jit->ip;
        (jit->ip) ++;
        *tmp___42 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
      }
      break;
    }
    tmp___43 = jit->ip;
    (jit->ip) ++;
    *tmp___43 = (unsigned char)255;
    while (1) {
      while (1) {
        tmp___44 = jit->ip;
        (jit->ip) ++;
        *tmp___44 = (unsigned char )(((3 << 6) | (2 << 3)) | 2);
        break;
      }
      break;
    }
    break;
  }
  emit_restore_all_regs(jit, op);
  return;
}
}
/* END FUNCTION-DEF emit_msg_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_reg_allocator_create LOC=UNKNOWN */
struct jit_reg_allocator *jit_reg_allocator_create(void) 
{ 
  struct jit_reg_allocator *a ;
  void *tmp ;
  void *tmp___0 ;
  jit_hw_reg __constr_expr_0 ;
  jit_hw_reg __constr_expr_1 ;
  jit_hw_reg __constr_expr_2 ;
  jit_hw_reg __constr_expr_3 ;
  jit_hw_reg __constr_expr_4 ;
  jit_hw_reg __constr_expr_5 ;
  jit_hw_reg __constr_expr_6 ;
  jit_hw_reg __constr_expr_7 ;
  jit_hw_reg __constr_expr_8 ;
  jit_hw_reg __constr_expr_9 ;
  jit_hw_reg __constr_expr_10 ;
  jit_hw_reg __constr_expr_11 ;
  jit_hw_reg __constr_expr_12 ;
  int reg ;
  void *tmp___1 ;
  int tmp___2 ;
  jit_hw_reg __constr_expr_13 ;
  int tmp___3 ;
  jit_hw_reg __constr_expr_14 ;
  int tmp___4 ;
  jit_hw_reg __constr_expr_15 ;
  int tmp___5 ;
  jit_hw_reg __constr_expr_16 ;
  int tmp___6 ;
  jit_hw_reg __constr_expr_17 ;
  int tmp___7 ;
  jit_hw_reg __constr_expr_18 ;
  int tmp___8 ;
  jit_hw_reg __constr_expr_19 ;
  int tmp___9 ;
  jit_hw_reg __constr_expr_20 ;
  int tmp___10 ;
  jit_hw_reg __constr_expr_21 ;
  int tmp___11 ;
  jit_hw_reg __constr_expr_22 ;
  void *tmp___12 ;
  void *tmp___13 ;
  int i ;

  {
  tmp = malloc(sizeof(struct jit_reg_allocator ));
  a = (struct jit_reg_allocator *)tmp;
  a->gp_reg_cnt = 13;
  tmp___0 = malloc(sizeof(jit_hw_reg ) * (unsigned long )a->gp_reg_cnt);
  a->gp_regs = (jit_hw_reg *)tmp___0;
  __constr_expr_0.id = 0;
  __constr_expr_0.name = (char *)"rax";
  __constr_expr_0.callee_saved = (char)0;
  __constr_expr_0.fp = (char)0;
  __constr_expr_0.priority = (short)7;
  *(a->gp_regs + 0) = __constr_expr_0;
  __constr_expr_1.id = 3;
  __constr_expr_1.name = (char *)"rbx";
  __constr_expr_1.callee_saved = (char)1;
  __constr_expr_1.fp = (char)0;
  __constr_expr_1.priority = (short)8;
  *(a->gp_regs + 1) = __constr_expr_1;
  __constr_expr_2.id = 1;
  __constr_expr_2.name = (char *)"rcx";
  __constr_expr_2.callee_saved = (char)0;
  __constr_expr_2.fp = (char)0;
  __constr_expr_2.priority = (short)4;
  *(a->gp_regs + 2) = __constr_expr_2;
  __constr_expr_3.id = 2;
  __constr_expr_3.name = (char *)"rdx";
  __constr_expr_3.callee_saved = (char)0;
  __constr_expr_3.fp = (char)0;
  __constr_expr_3.priority = (short)3;
  *(a->gp_regs + 3) = __constr_expr_3;
  __constr_expr_4.id = 6;
  __constr_expr_4.name = (char *)"rsi";
  __constr_expr_4.callee_saved = (char)0;
  __constr_expr_4.fp = (char)0;
  __constr_expr_4.priority = (short)2;
  *(a->gp_regs + 4) = __constr_expr_4;
  __constr_expr_5.id = 7;
  __constr_expr_5.name = (char *)"rdi";
  __constr_expr_5.callee_saved = (char)0;
  __constr_expr_5.fp = (char)0;
  __constr_expr_5.priority = (short)1;
  *(a->gp_regs + 5) = __constr_expr_5;
  __constr_expr_6.id = 8;
  __constr_expr_6.name = (char *)"r8";
  __constr_expr_6.callee_saved = (char)0;
  __constr_expr_6.fp = (char)0;
  __constr_expr_6.priority = (short)5;
  *(a->gp_regs + 6) = __constr_expr_6;
  __constr_expr_7.id = 9;
  __constr_expr_7.name = (char *)"r9";
  __constr_expr_7.callee_saved = (char)0;
  __constr_expr_7.fp = (char)0;
  __constr_expr_7.priority = (short)6;
  *(a->gp_regs + 7) = __constr_expr_7;
  __constr_expr_8.id = 10;
  __constr_expr_8.name = (char *)"r10";
  __constr_expr_8.callee_saved = (char)0;
  __constr_expr_8.fp = (char)0;
  __constr_expr_8.priority = (short)9;
  *(a->gp_regs + 8) = __constr_expr_8;
  __constr_expr_9.id = 11;
  __constr_expr_9.name = (char *)"r11";
  __constr_expr_9.callee_saved = (char)0;
  __constr_expr_9.fp = (char)0;
  __constr_expr_9.priority = (short)10;
  *(a->gp_regs + 9) = __constr_expr_9;
  __constr_expr_10.id = 12;
  __constr_expr_10.name = (char *)"r12";
  __constr_expr_10.callee_saved = (char)1;
  __constr_expr_10.fp = (char)0;
  __constr_expr_10.priority = (short)11;
  *(a->gp_regs + 10) = __constr_expr_10;
  __constr_expr_11.id = 14;
  __constr_expr_11.name = (char *)"r14";
  __constr_expr_11.callee_saved = (char)1;
  __constr_expr_11.fp = (char)0;
  __constr_expr_11.priority = (short)13;
  *(a->gp_regs + 11) = __constr_expr_11;
  __constr_expr_12.id = 15;
  __constr_expr_12.name = (char *)"r15";
  __constr_expr_12.callee_saved = (char)1;
  __constr_expr_12.fp = (char)0;
  __constr_expr_12.priority = (short)14;
  *(a->gp_regs + 12) = __constr_expr_12;
  a->gp_arg_reg_cnt = 6;
  a->fp_reg = 5;
  a->ret_reg = a->gp_regs + 0;
  a->fp_reg_cnt = 10;
  reg = 0;
  tmp___1 = malloc(sizeof(jit_hw_reg ) * (unsigned long )a->fp_reg_cnt);
  a->fp_regs = (jit_hw_reg *)tmp___1;
  tmp___2 = reg;
  reg ++;
  __constr_expr_13.id = 0;
  __constr_expr_13.name = (char *)"xmm0";
  __constr_expr_13.callee_saved = (char)0;
  __constr_expr_13.fp = (char)1;
  __constr_expr_13.priority = (short)99;
  *(a->fp_regs + tmp___2) = __constr_expr_13;
  tmp___3 = reg;
  reg ++;
  __constr_expr_14.id = 1;
  __constr_expr_14.name = (char *)"xmm1";
  __constr_expr_14.callee_saved = (char)0;
  __constr_expr_14.fp = (char)1;
  __constr_expr_14.priority = (short)98;
  *(a->fp_regs + tmp___3) = __constr_expr_14;
  tmp___4 = reg;
  reg ++;
  __constr_expr_15.id = 2;
  __constr_expr_15.name = (char *)"xmm2";
  __constr_expr_15.callee_saved = (char)0;
  __constr_expr_15.fp = (char)1;
  __constr_expr_15.priority = (short)97;
  *(a->fp_regs + tmp___4) = __constr_expr_15;
  tmp___5 = reg;
  reg ++;
  __constr_expr_16.id = 3;
  __constr_expr_16.name = (char *)"xmm3";
  __constr_expr_16.callee_saved = (char)0;
  __constr_expr_16.fp = (char)1;
  __constr_expr_16.priority = (short)96;
  *(a->fp_regs + tmp___5) = __constr_expr_16;
  tmp___6 = reg;
  reg ++;
  __constr_expr_17.id = 4;
  __constr_expr_17.name = (char *)"xmm4";
  __constr_expr_17.callee_saved = (char)0;
  __constr_expr_17.fp = (char)1;
  __constr_expr_17.priority = (short)95;
  *(a->fp_regs + tmp___6) = __constr_expr_17;
  tmp___7 = reg;
  reg ++;
  __constr_expr_18.id = 5;
  __constr_expr_18.name = (char *)"xmm5";
  __constr_expr_18.callee_saved = (char)0;
  __constr_expr_18.fp = (char)1;
  __constr_expr_18.priority = (short)94;
  *(a->fp_regs + tmp___7) = __constr_expr_18;
  tmp___8 = reg;
  reg ++;
  __constr_expr_19.id = 6;
  __constr_expr_19.name = (char *)"xmm6";
  __constr_expr_19.callee_saved = (char)0;
  __constr_expr_19.fp = (char)1;
  __constr_expr_19.priority = (short)93;
  *(a->fp_regs + tmp___8) = __constr_expr_19;
  tmp___9 = reg;
  reg ++;
  __constr_expr_20.id = 7;
  __constr_expr_20.name = (char *)"xmm7";
  __constr_expr_20.callee_saved = (char)0;
  __constr_expr_20.fp = (char)1;
  __constr_expr_20.priority = (short)92;
  *(a->fp_regs + tmp___9) = __constr_expr_20;
  tmp___10 = reg;
  reg ++;
  __constr_expr_21.id = 13;
  __constr_expr_21.name = (char *)"xmm13";
  __constr_expr_21.callee_saved = (char)0;
  __constr_expr_21.fp = (char)1;
  __constr_expr_21.priority = (short)1;
  *(a->fp_regs + tmp___10) = __constr_expr_21;
  tmp___11 = reg;
  reg ++;
  __constr_expr_22.id = 12;
  __constr_expr_22.name = (char *)"xmm12";
  __constr_expr_22.callee_saved = (char)0;
  __constr_expr_22.fp = (char)1;
  __constr_expr_22.priority = (short)2;
  *(a->fp_regs + tmp___11) = __constr_expr_22;
  a->fpret_reg = a->fp_regs + 0;
  a->gp_arg_reg_cnt = 6;
  tmp___12 = malloc(sizeof(jit_hw_reg *) * 6UL);
  a->gp_arg_regs = (jit_hw_reg **)tmp___12;
  *(a->gp_arg_regs + 0) = a->gp_regs + 5;
  *(a->gp_arg_regs + 1) = a->gp_regs + 4;
  *(a->gp_arg_regs + 2) = a->gp_regs + 3;
  *(a->gp_arg_regs + 3) = a->gp_regs + 2;
  *(a->gp_arg_regs + 4) = a->gp_regs + 6;
  *(a->gp_arg_regs + 5) = a->gp_regs + 7;
  a->fp_arg_reg_cnt = 8;
  tmp___13 = malloc(sizeof(jit_hw_reg *) * 8UL);
  a->fp_arg_regs = (jit_hw_reg **)tmp___13;
  i = 0;
  while (i < 8) {
    *(a->fp_arg_regs + i) = a->fp_regs + i;
    i ++;
  }
  return (a);
}
}
/* END FUNCTION-DEF jit_reg_allocator_create LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF fixup LOC=UNKNOWN */
__inline static jit_tree *fixup(jit_tree *h ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  tmp = is_red(h->right);
  if (tmp) {
    h = rotate_left(h);
  }
  tmp___0 = is_red(h->left);
  if (tmp___0) {
    tmp___1 = is_red((h->left)->left);
    if (tmp___1) {
      h = rotate_right(h);
      color_flip(h);
    }
  }
  tmp___2 = is_red(h->left);
  if (tmp___2) {
    tmp___3 = is_red(h->right);
    if (tmp___3) {
      color_flip(h);
    }
  }
  return (h);
}
}
/* END FUNCTION-DEF fixup LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_tree_free LOC=UNKNOWN */
static void jit_tree_free(jit_tree *h ) 
{ 


  {
  if ((unsigned long )h == (unsigned long )((void *)0)) {
    return;
  }
  jit_tree_free(h->left);
  jit_tree_free(h->right);
  free((void *)h);
  return;
}
}
/* END FUNCTION-DEF jit_tree_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sub_op LOC=UNKNOWN */
static void emit_sub_op(struct jit *jit , struct jit_op *op , int imm ) 
{ 
  unsigned char _amd64_rex_bits ;
  int tmp ;
  int tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  x86_imm_buf imb ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___43 ;
  int tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___48 ;
  int tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___58 ;
  int tmp___59 ;
  int tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  long tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___66 ;
  int tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;

  {
  if (imm) {
    if (op->r_arg[0] != op->r_arg[1]) {
      while (1) {
        while (1) {
          if (op->r_arg[0] > 7L) {
            tmp = 4;
          } else {
            tmp = 0;
          }
          if (op->r_arg[1] > 7L) {
            tmp___0 = 1;
          } else {
            tmp___0 = 0;
          }
          _amd64_rex_bits = (unsigned char )((8 | tmp) | tmp___0);
          if ((int )_amd64_rex_bits != 0) {
            tmp___1 = jit->ip;
            (jit->ip) ++;
            *tmp___1 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        tmp___2 = jit->ip;
        (jit->ip) ++;
        *tmp___2 = (unsigned char)141;
        while (1) {
          if (op->r_arg[1] == 16L) {
            while (1) {
              tmp___3 = jit->ip;
              (jit->ip) ++;
              *tmp___3 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb.val = (int )(- op->r_arg[2]);
              tmp___4 = jit->ip;
              (jit->ip) ++;
              *tmp___4 = imb.b[0];
              tmp___5 = jit->ip;
              (jit->ip) ++;
              *tmp___5 = imb.b[1];
              tmp___6 = jit->ip;
              (jit->ip) ++;
              *tmp___6 = imb.b[2];
              tmp___7 = jit->ip;
              (jit->ip) ++;
              *tmp___7 = imb.b[3];
              break;
            }
          } else {
            while (1) {
              if ((op->r_arg[1] & 7L) == 4L) {
                if (- op->r_arg[2] == 0L) {
                  while (1) {
                    tmp___8 = jit->ip;
                    (jit->ip) ++;
                    *tmp___8 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___9 = jit->ip;
                    (jit->ip) ++;
                    *tmp___9 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                } else
                if ((int )(- op->r_arg[2]) >= -128) {
                  if ((int )(- op->r_arg[2]) <= 127) {
                    while (1) {
                      tmp___10 = jit->ip;
                      (jit->ip) ++;
                      *tmp___10 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
                      break;
                    }
                    while (1) {
                      tmp___11 = jit->ip;
                      (jit->ip) ++;
                      *tmp___11 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(- op->r_arg[2] & 255L);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L;
                  }
                } else {
                  _L: /* CIL Label */ 
                  while (1) {
                    tmp___12 = jit->ip;
                    (jit->ip) ++;
                    *tmp___12 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___13 = jit->ip;
                    (jit->ip) ++;
                    *tmp___13 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    imb___0.val = (int )(- op->r_arg[2]);
                    tmp___14 = jit->ip;
                    (jit->ip) ++;
                    *tmp___14 = imb___0.b[0];
                    tmp___15 = jit->ip;
                    (jit->ip) ++;
                    *tmp___15 = imb___0.b[1];
                    tmp___16 = jit->ip;
                    (jit->ip) ++;
                    *tmp___16 = imb___0.b[2];
                    tmp___17 = jit->ip;
                    (jit->ip) ++;
                    *tmp___17 = imb___0.b[3];
                    break;
                  }
                }
                break;
              }
              if (- op->r_arg[2] == 0L) {
                if ((op->r_arg[1] & 7L) != 5L) {
                  while (1) {
                    tmp___18 = jit->ip;
                    (jit->ip) ++;
                    *tmp___18 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | ((op->r_arg[1] & 7L) & 7L));
                    break;
                  }
                  break;
                }
              }
              if ((int )(- op->r_arg[2]) >= -128) {
                if ((int )(- op->r_arg[2]) <= 127) {
                  while (1) {
                    tmp___19 = jit->ip;
                    (jit->ip) ++;
                    *tmp___19 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | ((op->r_arg[1] & 7L) & 7L));
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(- op->r_arg[2] & 255L);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___0;
                }
              } else {
                _L___0: /* CIL Label */ 
                while (1) {
                  tmp___20 = jit->ip;
                  (jit->ip) ++;
                  *tmp___20 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | ((op->r_arg[1] & 7L) & 7L));
                  break;
                }
                while (1) {
                  imb___1.val = (int )(- op->r_arg[2]);
                  tmp___21 = jit->ip;
                  (jit->ip) ++;
                  *tmp___21 = imb___1.b[0];
                  tmp___22 = jit->ip;
                  (jit->ip) ++;
                  *tmp___22 = imb___1.b[1];
                  tmp___23 = jit->ip;
                  (jit->ip) ++;
                  *tmp___23 = imb___1.b[2];
                  tmp___24 = jit->ip;
                  (jit->ip) ++;
                  *tmp___24 = imb___1.b[3];
                  break;
                }
              }
              break;
            }
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        if ((int )op->r_arg[2] >= -128) {
          if ((int )op->r_arg[2] <= 127) {
            while (1) {
              if (op->r_arg[0] > 7L) {
                tmp___25 = 1;
              } else {
                tmp___25 = 0;
              }
              _amd64_rex_bits___0 = (unsigned char )(8 | tmp___25);
              if ((int )_amd64_rex_bits___0 != 0) {
                tmp___26 = jit->ip;
                (jit->ip) ++;
                *tmp___26 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
              }
              break;
            }
            tmp___27 = jit->ip;
            (jit->ip) ++;
            *tmp___27 = (unsigned char)131;
            while (1) {
              while (1) {
                tmp___28 = jit->ip;
                (jit->ip) ++;
                *tmp___28 = (unsigned char )((long )((3 << 6) | (5 << 3)) | (op->r_arg[0] & 7L));
                break;
              }
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(op->r_arg[2] & 255L);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___1;
          }
        } else
        _L___1: /* CIL Label */ 
        if (op->r_arg[0] == 0L) {
          while (1) {
            _amd64_rex_bits___1 = (unsigned char)8;
            if ((int )_amd64_rex_bits___1 != 0) {
              tmp___29 = jit->ip;
              (jit->ip) ++;
              *tmp___29 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
            }
            break;
          }
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = (unsigned char )((5 << 3) + 5);
          while (1) {
            imb___2.val = (int )op->r_arg[2];
            tmp___31 = jit->ip;
            (jit->ip) ++;
            *tmp___31 = imb___2.b[0];
            tmp___32 = jit->ip;
            (jit->ip) ++;
            *tmp___32 = imb___2.b[1];
            tmp___33 = jit->ip;
            (jit->ip) ++;
            *tmp___33 = imb___2.b[2];
            tmp___34 = jit->ip;
            (jit->ip) ++;
            *tmp___34 = imb___2.b[3];
            break;
          }
        } else {
          while (1) {
            if (op->r_arg[0] > 7L) {
              tmp___35 = 1;
            } else {
              tmp___35 = 0;
            }
            _amd64_rex_bits___2 = (unsigned char )(8 | tmp___35);
            if ((int )_amd64_rex_bits___2 != 0) {
              tmp___36 = jit->ip;
              (jit->ip) ++;
              *tmp___36 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
            }
            break;
          }
          tmp___37 = jit->ip;
          (jit->ip) ++;
          *tmp___37 = (unsigned char)129;
          while (1) {
            while (1) {
              tmp___38 = jit->ip;
              (jit->ip) ++;
              *tmp___38 = (unsigned char )((long )((3 << 6) | (5 << 3)) | (op->r_arg[0] & 7L));
              break;
            }
            break;
          }
          while (1) {
            imb___3.val = (int )op->r_arg[2];
            tmp___39 = jit->ip;
            (jit->ip) ++;
            *tmp___39 = imb___3.b[0];
            tmp___40 = jit->ip;
            (jit->ip) ++;
            *tmp___40 = imb___3.b[1];
            tmp___41 = jit->ip;
            (jit->ip) ++;
            *tmp___41 = imb___3.b[2];
            tmp___42 = jit->ip;
            (jit->ip) ++;
            *tmp___42 = imb___3.b[3];
            break;
          }
        }
        break;
      }
    }
    return;
  }
  if (op->r_arg[0] == op->r_arg[1]) {
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___43 = 4;
        } else {
          tmp___43 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___44 = 1;
        } else {
          tmp___44 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )((8 | tmp___43) | tmp___44);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___45 = jit->ip;
          (jit->ip) ++;
          *tmp___45 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      tmp___46 = jit->ip;
      (jit->ip) ++;
      *tmp___46 = (unsigned char )((5 << 3) + 3);
      while (1) {
        while (1) {
          tmp___47 = jit->ip;
          (jit->ip) ++;
          *tmp___47 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else
  if (op->r_arg[0] == op->r_arg[2]) {
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___48 = 4;
        } else {
          tmp___48 = 0;
        }
        if (op->r_arg[1] > 7L) {
          tmp___49 = 1;
        } else {
          tmp___49 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )((8 | tmp___48) | tmp___49);
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___50 = jit->ip;
          (jit->ip) ++;
          *tmp___50 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      tmp___51 = jit->ip;
      (jit->ip) ++;
      *tmp___51 = (unsigned char )((5 << 3) + 3);
      while (1) {
        while (1) {
          tmp___52 = jit->ip;
          (jit->ip) ++;
          *tmp___52 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___53 = 1;
        } else {
          tmp___53 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(8 | tmp___53);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___54 = jit->ip;
          (jit->ip) ++;
          *tmp___54 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      while (1) {
        tmp___55 = jit->ip;
        (jit->ip) ++;
        *tmp___55 = (unsigned char)247;
        while (1) {
          while (1) {
            tmp___56 = jit->ip;
            (jit->ip) ++;
            *tmp___56 = (unsigned char )((long )((3 << 6) | (3 << 3)) | ((op->r_arg[0] & 7L) & 7L));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___57 = jit->ip;
        (jit->ip) ++;
        *tmp___57 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___58 = 8;
        } else {
          tmp___58 = 0;
        }
        if (op->r_arg[0] > 7L) {
          tmp___59 = 4;
        } else {
          tmp___59 = 0;
        }
        if (op->r_arg[1] > 7L) {
          tmp___60 = 1;
        } else {
          tmp___60 = 0;
        }
        _amd64_rex_bits___6 = (unsigned char )((tmp___58 | tmp___59) | tmp___60);
        if ((int )_amd64_rex_bits___6 != 0) {
          tmp___61 = jit->ip;
          (jit->ip) ++;
          *tmp___61 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___61 = jit->ip;
          (jit->ip) ++;
          *tmp___61 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___62 = jit->ip;
      (jit->ip) ++;
      *tmp___62 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___63 = jit->ip;
      (jit->ip) ++;
      *tmp___63 = (unsigned char)139;
      break;
      default: 
      tmp___64 = __builtin_expect(1L, 0L);
      if (tmp___64) {
        __assert_rtn("emit_sub_op", "./jitter-amd64.c", 2739, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___65 = jit->ip;
          (jit->ip) ++;
          *tmp___65 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___66 = 4;
        } else {
          tmp___66 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___67 = 1;
        } else {
          tmp___67 = 0;
        }
        _amd64_rex_bits___7 = (unsigned char )((8 | tmp___66) | tmp___67);
        if ((int )_amd64_rex_bits___7 != 0) {
          tmp___68 = jit->ip;
          (jit->ip) ++;
          *tmp___68 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
        }
        break;
      }
      tmp___69 = jit->ip;
      (jit->ip) ++;
      *tmp___69 = (unsigned char )((5 << 3) + 3);
      while (1) {
        while (1) {
          tmp___70 = jit->ip;
          (jit->ip) ++;
          *tmp___70 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_sub_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_print_tree LOC=UNKNOWN */
__inline static void jit_print_tree(jit_tree *h , int level ) 
{ 
  int i ;

  {
  if ((unsigned long )h == (unsigned long )((void *)0)) {
    return;
  }
  i = 0;
  while (i < level) {
    printf((char const   */* __restrict  */)" ");
    i ++;
  }
  printf((char const   */* __restrict  */)"%i:%li\n", (int )h->key, (long )h->value);
  jit_print_tree(h->left, level + 1);
  jit_print_tree(h->right, level + 1);
  return;
}
}
/* END FUNCTION-DEF jit_print_tree LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_full_op_name LOC=UNKNOWN */
void print_full_op_name(struct output_buf *linebuf , jit_op *op ) 
{ 
  char *op_name ;
  char *tmp ;

  {
  tmp = jit_get_op_name(op);
  op_name = tmp;
  ob_append(linebuf, op_name);
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 648U) {
    if (((int )op->code & 7) & 2) {
      return;
    }
  }
  if (((int )op->code & 7) & 2) {
    ob_append(linebuf, (char *)"i");
  }
  if (((int )op->code & 7) & 1) {
    ob_append(linebuf, (char *)"r");
  }
  if (((int )op->code & 7) & 4) {
    ob_append(linebuf, (char *)"_u");
  }
  return;
}
}
/* END FUNCTION-DEF print_full_op_name LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_add_op LOC=UNKNOWN */
struct jit_op *jit_add_op(struct jit *jit , unsigned short code , unsigned char spec ,
                          long arg1 , long arg2 , long arg3 , unsigned char arg_size ,
                          struct jit_debug_info *debug_info ) 
{ 
  struct jit_op *r ;
  struct jit_op *tmp ;

  {
  tmp = jit_op_new(code, spec, arg1, arg2, arg3, arg_size);
  r = tmp;
  r->debug_info = debug_info;
  jit_op_append(jit->last_op, r);
  jit->last_op = r;
  return (r);
}
}
/* END FUNCTION-DEF jit_add_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF mark_calleesaved_regs LOC=UNKNOWN */
static void mark_calleesaved_regs(jit_tree *hint , jit_op *op ) 
{ 
  struct jit_allocator_hint *h ;
  jit_value reg ;
  int tmp ;

  {
  if ((unsigned long )hint == (unsigned long )((void *)0)) {
    return;
  }
  h = (struct jit_allocator_hint *)hint->value;
  reg = hint->key;
  tmp = jit_set_get(op->live_out, (int )reg);
  if (tmp) {
    (h->should_be_calleesaved) ++;
  }
  mark_calleesaved_regs(hint->left, op);
  mark_calleesaved_regs(hint->right, op);
  return;
}
}
/* END FUNCTION-DEF mark_calleesaved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_free LOC=UNKNOWN */
void rmap_free(jit_rmap *regmap ) 
{ 


  {
  if (! regmap) {
    return;
  }
  jit_tree_free(regmap->map);
  free((void *)regmap);
  return;
}
}
/* END FUNCTION-DEF rmap_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF uses_hw_reg LOC=UNKNOWN */
static int uses_hw_reg(struct jit_op *op , jit_value reg , int fp ) 
{ 
  int i ;

  {
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 728U) {
    if (op->r_arg[0] == reg) {
      return (1);
    }
  }
  i = 0;
  while (i < 3) {
    if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 1) {
      goto _L;
    } else
    if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 3) {
      _L: /* CIL Label */ 
      if (fp) {
        if ((op->arg[i] & 1L) == 0L) {
          goto __Cont;
        }
      }
      if (! fp) {
        if ((op->arg[i] & 1L) == 1L) {
          goto __Cont;
        }
      }
      if (op->r_arg[i] == reg) {
        return (1);
      }
    }
    __Cont: /* CIL Label */ 
    i ++;
  }
  return (0);
}
}
/* END FUNCTION-DEF uses_hw_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_restore_all_regs LOC=UNKNOWN */
static void emit_restore_all_regs(struct jit *jit , jit_op *op ) 
{ 
  int alignment ;
  int tmp ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  x86_imm_buf imb ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  struct jit_reg_allocator *al ;
  int i ;
  jit_hw_reg *reg ;
  unsigned char *tmp___16 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  int tmp___59 ;
  int i___0 ;
  jit_hw_reg *reg___0 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  int tmp___63 ;
  unsigned char _amd64_rex_bits___7 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;

  {
  tmp = required_stack_space_for_regs(jit, op);
  alignment = tmp % 16;
  if (alignment != 0) {
    while (1) {
      if (16 - alignment >= -128) {
        if (16 - alignment <= 127) {
          while (1) {
            _amd64_rex_bits = (unsigned char)8;
            if ((int )_amd64_rex_bits != 0) {
              tmp___0 = jit->ip;
              (jit->ip) ++;
              *tmp___0 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___1 = jit->ip;
          (jit->ip) ++;
          *tmp___1 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___2 = jit->ip;
              (jit->ip) ++;
              *tmp___2 = (unsigned char )((3 << 6) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )((16 - alignment) & 255);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)8;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___9 = jit->ip;
            (jit->ip) ++;
            *tmp___9 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___10 = jit->ip;
        (jit->ip) ++;
        *tmp___10 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___11 = jit->ip;
            (jit->ip) ++;
            *tmp___11 = (unsigned char )((3 << 6) | 4);
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = 16 - alignment;
          tmp___12 = jit->ip;
          (jit->ip) ++;
          *tmp___12 = imb___0.b[0];
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = imb___0.b[1];
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = imb___0.b[2];
          tmp___15 = jit->ip;
          (jit->ip) ++;
          *tmp___15 = imb___0.b[3];
          break;
        }
      }
      break;
    }
  }
  al = jit->reg_al;
  i = al->fp_reg_cnt - 1;
  while (i >= 0) {
    reg = al->fp_regs + i;
    if (! reg->callee_saved) {
      tmp___59 = is_active_register(al, reg, op);
      if (tmp___59) {
        while (1) {
          tmp___16 = jit->ip;
          (jit->ip) ++;
          *tmp___16 = (unsigned char)102;
          while (1) {
            if (reg->id > 7) {
              tmp___17 = 4;
            } else {
              tmp___17 = 0;
            }
            _amd64_rex_bits___2 = (unsigned char )tmp___17;
            if ((int )_amd64_rex_bits___2 != 0) {
              tmp___18 = jit->ip;
              (jit->ip) ++;
              *tmp___18 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
            }
            break;
          }
          tmp___19 = jit->ip;
          (jit->ip) ++;
          *tmp___19 = (unsigned char)15;
          tmp___20 = jit->ip;
          (jit->ip) ++;
          *tmp___20 = (unsigned char)18;
          while (1) {
            while (1) {
              while (1) {
                tmp___26 = jit->ip;
                (jit->ip) ++;
                *tmp___26 = (unsigned char )((((reg->id & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___27 = jit->ip;
                (jit->ip) ++;
                *tmp___27 = (unsigned char )((4 << 3) | 4);
                break;
              }
              break;
              while (1) {
                tmp___36 = jit->ip;
                (jit->ip) ++;
                *tmp___36 = (unsigned char )((((reg->id & 7) & 7) << 3) | 4);
                break;
              }
              break;
              while (1) {
                tmp___37 = jit->ip;
                (jit->ip) ++;
                *tmp___37 = (unsigned char )(((1 << 6) | (((reg->id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
              break;
            }
            break;
          }
          break;
        }
        while (1) {
          while (1) {
            _amd64_rex_bits___3 = (unsigned char)8;
            if ((int )_amd64_rex_bits___3 != 0) {
              tmp___43 = jit->ip;
              (jit->ip) ++;
              *tmp___43 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
            }
            break;
          }
          tmp___44 = jit->ip;
          (jit->ip) ++;
          *tmp___44 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___45 = jit->ip;
              (jit->ip) ++;
              *tmp___45 = (unsigned char )((3 << 6) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)8;
            (jit->ip) ++;
            break;
          }
          break;
        }
      }
    }
    while (1) {
      break;
    }
    i --;
  }
  i___0 = al->gp_reg_cnt - 1;
  while (i___0 >= 0) {
    reg___0 = al->gp_regs + i___0;
    if (! reg___0->callee_saved) {
      tmp___63 = is_active_register(al, reg___0, op);
      if (tmp___63) {
        while (1) {
          while (1) {
            if (reg___0->id > 7) {
              tmp___60 = 1;
            } else {
              tmp___60 = 0;
            }
            _amd64_rex_bits___6 = (unsigned char )tmp___60;
            if ((int )_amd64_rex_bits___6 != 0) {
              tmp___61 = jit->ip;
              (jit->ip) ++;
              *tmp___61 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
            }
            break;
          }
          tmp___62 = jit->ip;
          (jit->ip) ++;
          *tmp___62 = (unsigned char )(88 + (reg___0->id & 7));
          break;
        }
      }
    }
    i___0 --;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___7 = (unsigned char)8;
      if ((int )_amd64_rex_bits___7 != 0) {
        tmp___64 = jit->ip;
        (jit->ip) ++;
        *tmp___64 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
      }
      break;
    }
    while (1) {
      tmp___65 = jit->ip;
      (jit->ip) ++;
      *tmp___65 = (unsigned char)157;
      break;
    }
    break;
  }
  return;
}
}
/* END FUNCTION-DEF emit_restore_all_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_equal LOC=UNKNOWN */
static int rmap_equal(jit_op *op , jit_rmap *current , jit_rmap *target ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = rmap_subset(op, current->map, target->map);
  if (tmp) {
    tmp___0 = rmap_subset(op, target->map, current->map);
    if (tmp___0) {
      tmp___1 = 1;
    } else {
      tmp___1 = 0;
    }
  } else {
    tmp___1 = 0;
  }
  return (tmp___1);
}
}
/* END FUNCTION-DEF rmap_equal LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_init LOC=UNKNOWN */
struct jit *jit_init(void) 
{ 
  struct jit *r ;
  void *tmp ;

  {
  tmp = malloc(sizeof(struct jit ));
  r = (struct jit *)tmp;
  r->ops = jit_op_new((unsigned short)216, (unsigned char)0, 0L, 0L, 0L, (unsigned char)0);
  r->last_op = r->ops;
  r->optimizations = 0U;
  r->buf = (unsigned char *)((void *)0);
  r->mmaped_buf = (unsigned char)0;
  r->labels = (jit_label *)((void *)0);
  r->reg_al = jit_reg_allocator_create();
  jit_enable_optimization(r, 13);
  return (r);
}
}
/* END FUNCTION-DEF jit_init LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_set_fparg LOC=UNKNOWN */
__inline static void emit_set_fparg(struct jit *jit , struct jit_out_arg *arg ) 
{ 
  int sreg ;
  int reg ;
  long value ;
  int pos ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___55 ;
  int tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___62 ;
  int tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  int tmp___68 ;
  float val ;
  unsigned int tmp___69 ;
  unsigned long tmp___70 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  amd64_imm_buf imb___5 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  amd64_imm_buf imb___7 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;

  {
  reg = (*((jit->reg_al)->fp_arg_regs + arg->argpos))->id;
  value = arg->value.generic;
  if (arg->isreg) {
    tmp___68 = is_spilled(value, jit->prepared_args.op, & sreg);
    if (tmp___68) {
      tmp = stack_reg_pos(jit, (int )value);
      pos = tmp;
      if ((unsigned long )arg->size == sizeof(float )) {
        while (1) {
          tmp___0 = jit->ip;
          (jit->ip) ++;
          *tmp___0 = (unsigned char)242;
          while (1) {
            if (reg > 7) {
              tmp___1 = 4;
            } else {
              tmp___1 = 0;
            }
            _amd64_rex_bits = (unsigned char )tmp___1;
            if ((int )_amd64_rex_bits != 0) {
              tmp___2 = jit->ip;
              (jit->ip) ++;
              *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___3 = jit->ip;
          (jit->ip) ++;
          *tmp___3 = (unsigned char)15;
          tmp___4 = jit->ip;
          (jit->ip) ++;
          *tmp___4 = (unsigned char)90;
          while (1) {
            while (1) {
              if (0) {
                if (pos == 0) {
                  while (1) {
                    tmp___10 = jit->ip;
                    (jit->ip) ++;
                    *tmp___10 = (unsigned char )((((reg & 7) & 7) << 3) | 4);
                    break;
                  }
                  while (1) {
                    tmp___11 = jit->ip;
                    (jit->ip) ++;
                    *tmp___11 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                } else
                if (pos >= -128) {
                  if (pos <= 127) {
                    while (1) {
                      tmp___12 = jit->ip;
                      (jit->ip) ++;
                      *tmp___12 = (unsigned char )(((1 << 6) | (((reg & 7) & 7) << 3)) | 4);
                      break;
                    }
                    while (1) {
                      tmp___13 = jit->ip;
                      (jit->ip) ++;
                      *tmp___13 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(pos & 255);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L;
                  }
                } else {
                  _L: /* CIL Label */ 
                  while (1) {
                    tmp___14 = jit->ip;
                    (jit->ip) ++;
                    *tmp___14 = (unsigned char )(((2 << 6) | (((reg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___15 = jit->ip;
                    (jit->ip) ++;
                    *tmp___15 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    imb___0.val = pos;
                    tmp___16 = jit->ip;
                    (jit->ip) ++;
                    *tmp___16 = imb___0.b[0];
                    tmp___17 = jit->ip;
                    (jit->ip) ++;
                    *tmp___17 = imb___0.b[1];
                    tmp___18 = jit->ip;
                    (jit->ip) ++;
                    *tmp___18 = imb___0.b[2];
                    tmp___19 = jit->ip;
                    (jit->ip) ++;
                    *tmp___19 = imb___0.b[3];
                    break;
                  }
                }
                break;
              }
              if (pos == 0) {

              }
              if (pos >= -128) {
                if (pos <= 127) {
                  while (1) {
                    tmp___21 = jit->ip;
                    (jit->ip) ++;
                    *tmp___21 = (unsigned char )(((1 << 6) | (((reg & 7) & 7) << 3)) | 5);
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(pos & 255);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___0;
                }
              } else {
                _L___0: /* CIL Label */ 
                while (1) {
                  tmp___22 = jit->ip;
                  (jit->ip) ++;
                  *tmp___22 = (unsigned char )(((2 << 6) | (((reg & 7) & 7) << 3)) | 5);
                  break;
                }
                while (1) {
                  imb___1.val = pos;
                  tmp___23 = jit->ip;
                  (jit->ip) ++;
                  *tmp___23 = imb___1.b[0];
                  tmp___24 = jit->ip;
                  (jit->ip) ++;
                  *tmp___24 = imb___1.b[1];
                  tmp___25 = jit->ip;
                  (jit->ip) ++;
                  *tmp___25 = imb___1.b[2];
                  tmp___26 = jit->ip;
                  (jit->ip) ++;
                  *tmp___26 = imb___1.b[3];
                  break;
                }
              }
              break;
            }
            break;
          }
          break;
        }
      } else {
        while (1) {
          tmp___27 = jit->ip;
          (jit->ip) ++;
          *tmp___27 = (unsigned char)102;
          while (1) {
            if (reg > 7) {
              tmp___28 = 4;
            } else {
              tmp___28 = 0;
            }
            _amd64_rex_bits___0 = (unsigned char )tmp___28;
            if ((int )_amd64_rex_bits___0 != 0) {
              tmp___29 = jit->ip;
              (jit->ip) ++;
              *tmp___29 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
            }
            break;
          }
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = (unsigned char)15;
          tmp___31 = jit->ip;
          (jit->ip) ++;
          *tmp___31 = (unsigned char)18;
          while (1) {
            while (1) {
              if (0) {
                if (pos == 0) {
                  while (1) {
                    tmp___37 = jit->ip;
                    (jit->ip) ++;
                    *tmp___37 = (unsigned char )((((reg & 7) & 7) << 3) | 4);
                    break;
                  }
                  while (1) {
                    tmp___38 = jit->ip;
                    (jit->ip) ++;
                    *tmp___38 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                } else
                if (pos >= -128) {
                  if (pos <= 127) {
                    while (1) {
                      tmp___39 = jit->ip;
                      (jit->ip) ++;
                      *tmp___39 = (unsigned char )(((1 << 6) | (((reg & 7) & 7) << 3)) | 4);
                      break;
                    }
                    while (1) {
                      tmp___40 = jit->ip;
                      (jit->ip) ++;
                      *tmp___40 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(pos & 255);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L___1;
                  }
                } else {
                  _L___1: /* CIL Label */ 
                  while (1) {
                    tmp___41 = jit->ip;
                    (jit->ip) ++;
                    *tmp___41 = (unsigned char )(((2 << 6) | (((reg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___42 = jit->ip;
                    (jit->ip) ++;
                    *tmp___42 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    imb___3.val = pos;
                    tmp___43 = jit->ip;
                    (jit->ip) ++;
                    *tmp___43 = imb___3.b[0];
                    tmp___44 = jit->ip;
                    (jit->ip) ++;
                    *tmp___44 = imb___3.b[1];
                    tmp___45 = jit->ip;
                    (jit->ip) ++;
                    *tmp___45 = imb___3.b[2];
                    tmp___46 = jit->ip;
                    (jit->ip) ++;
                    *tmp___46 = imb___3.b[3];
                    break;
                  }
                }
                break;
              }
              if (pos == 0) {

              }
              if (pos >= -128) {
                if (pos <= 127) {
                  while (1) {
                    tmp___48 = jit->ip;
                    (jit->ip) ++;
                    *tmp___48 = (unsigned char )(((1 << 6) | (((reg & 7) & 7) << 3)) | 5);
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(pos & 255);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___2;
                }
              } else {
                _L___2: /* CIL Label */ 
                while (1) {
                  tmp___49 = jit->ip;
                  (jit->ip) ++;
                  *tmp___49 = (unsigned char )(((2 << 6) | (((reg & 7) & 7) << 3)) | 5);
                  break;
                }
                while (1) {
                  imb___4.val = pos;
                  tmp___50 = jit->ip;
                  (jit->ip) ++;
                  *tmp___50 = imb___4.b[0];
                  tmp___51 = jit->ip;
                  (jit->ip) ++;
                  *tmp___51 = imb___4.b[1];
                  tmp___52 = jit->ip;
                  (jit->ip) ++;
                  *tmp___52 = imb___4.b[2];
                  tmp___53 = jit->ip;
                  (jit->ip) ++;
                  *tmp___53 = imb___4.b[3];
                  break;
                }
              }
              break;
            }
            break;
          }
          break;
        }
      }
    } else
    if ((unsigned long )arg->size == sizeof(float )) {
      while (1) {
        tmp___54 = jit->ip;
        (jit->ip) ++;
        *tmp___54 = (unsigned char)242;
        while (1) {
          if (reg > 7) {
            tmp___55 = 4;
          } else {
            tmp___55 = 0;
          }
          if (sreg > 7) {
            tmp___56 = 1;
          } else {
            tmp___56 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )(tmp___55 | tmp___56);
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___57 = jit->ip;
            (jit->ip) ++;
            *tmp___57 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___58 = jit->ip;
        (jit->ip) ++;
        *tmp___58 = (unsigned char)15;
        tmp___59 = jit->ip;
        (jit->ip) ++;
        *tmp___59 = (unsigned char)90;
        while (1) {
          while (1) {
            tmp___60 = jit->ip;
            (jit->ip) ++;
            *tmp___60 = (unsigned char )(((3 << 6) | ((reg & 7) << 3)) | (sreg & 7));
            break;
          }
          break;
        }
        break;
      }
    } else
    if (reg != sreg) {
      while (1) {
        tmp___61 = jit->ip;
        (jit->ip) ++;
        *tmp___61 = (unsigned char)242;
        while (1) {
          if (reg > 7) {
            tmp___62 = 4;
          } else {
            tmp___62 = 0;
          }
          if (sreg > 7) {
            tmp___63 = 1;
          } else {
            tmp___63 = 0;
          }
          _amd64_rex_bits___2 = (unsigned char )(tmp___62 | tmp___63);
          if ((int )_amd64_rex_bits___2 != 0) {
            tmp___64 = jit->ip;
            (jit->ip) ++;
            *tmp___64 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
          }
          break;
        }
        tmp___65 = jit->ip;
        (jit->ip) ++;
        *tmp___65 = (unsigned char)15;
        tmp___66 = jit->ip;
        (jit->ip) ++;
        *tmp___66 = (unsigned char)16;
        while (1) {
          while (1) {
            tmp___67 = jit->ip;
            (jit->ip) ++;
            *tmp___67 = (unsigned char )(((3 << 6) | ((reg & 7) << 3)) | (sreg & 7));
            break;
          }
          break;
        }
        break;
      }
    }
  } else
  if ((unsigned long )arg->size == sizeof(float )) {
    val = (float )arg->value.fp;
    tmp___70 = __builtin_object_size((void *)(& tmp___69), 0);
    __builtin___memcpy_chk((void *)(& tmp___69), (void const   *)(& val), sizeof(float ),
                           tmp___70);
    while (1) {
      while (1) {
        _amd64_rex_bits___3 = (unsigned char)0;
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___71 = jit->ip;
          (jit->ip) ++;
          *tmp___71 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      tmp___72 = jit->ip;
      (jit->ip) ++;
      *tmp___72 = (unsigned char)184;
      while (1) {
        imb___6.val = (int )((size_t )tmp___69);
        tmp___81 = jit->ip;
        (jit->ip) ++;
        *tmp___81 = imb___6.b[0];
        tmp___82 = jit->ip;
        (jit->ip) ++;
        *tmp___82 = imb___6.b[1];
        tmp___83 = jit->ip;
        (jit->ip) ++;
        *tmp___83 = imb___6.b[2];
        tmp___84 = jit->ip;
        (jit->ip) ++;
        *tmp___84 = imb___6.b[3];
        break;
      }
      break;
    }
    while (1) {
      tmp___85 = jit->ip;
      (jit->ip) ++;
      *tmp___85 = (unsigned char)102;
      while (1) {
        if (reg > 7) {
          tmp___86 = 4;
        } else {
          tmp___86 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )tmp___86;
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___87 = jit->ip;
          (jit->ip) ++;
          *tmp___87 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      tmp___88 = jit->ip;
      (jit->ip) ++;
      *tmp___88 = (unsigned char)15;
      tmp___89 = jit->ip;
      (jit->ip) ++;
      *tmp___89 = (unsigned char)110;
      while (1) {
        while (1) {
          tmp___90 = jit->ip;
          (jit->ip) ++;
          *tmp___90 = (unsigned char )((3 << 6) | ((reg & 7) << 3));
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      while (1) {
        _amd64_rex_bits___5 = (unsigned char)8;
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___91 = jit->ip;
          (jit->ip) ++;
          *tmp___91 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      tmp___92 = jit->ip;
      (jit->ip) ++;
      *tmp___92 = (unsigned char)184;
      while (1) {
        imb___7.val = (size_t )value;
        tmp___93 = jit->ip;
        (jit->ip) ++;
        *tmp___93 = imb___7.b[0];
        tmp___94 = jit->ip;
        (jit->ip) ++;
        *tmp___94 = imb___7.b[1];
        tmp___95 = jit->ip;
        (jit->ip) ++;
        *tmp___95 = imb___7.b[2];
        tmp___96 = jit->ip;
        (jit->ip) ++;
        *tmp___96 = imb___7.b[3];
        tmp___97 = jit->ip;
        (jit->ip) ++;
        *tmp___97 = imb___7.b[4];
        tmp___98 = jit->ip;
        (jit->ip) ++;
        *tmp___98 = imb___7.b[5];
        tmp___99 = jit->ip;
        (jit->ip) ++;
        *tmp___99 = imb___7.b[6];
        tmp___100 = jit->ip;
        (jit->ip) ++;
        *tmp___100 = imb___7.b[7];
        break;
      }
      break;
    }
    while (1) {
      tmp___105 = jit->ip;
      (jit->ip) ++;
      *tmp___105 = (unsigned char)102;
      while (1) {
        if (reg > 7) {
          tmp___106 = 4;
        } else {
          tmp___106 = 0;
        }
        _amd64_rex_bits___6 = (unsigned char )(8 | tmp___106);
        if ((int )_amd64_rex_bits___6 != 0) {
          tmp___107 = jit->ip;
          (jit->ip) ++;
          *tmp___107 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
        }
        break;
      }
      tmp___108 = jit->ip;
      (jit->ip) ++;
      *tmp___108 = (unsigned char)15;
      tmp___109 = jit->ip;
      (jit->ip) ++;
      *tmp___109 = (unsigned char)110;
      while (1) {
        while (1) {
          tmp___110 = jit->ip;
          (jit->ip) ++;
          *tmp___110 = (unsigned char )((3 << 6) | ((reg & 7) << 3));
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_set_fparg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_push_callee_saved_regs LOC=UNKNOWN */
static int emit_push_callee_saved_regs(struct jit *jit , jit_op *op ) 
{ 
  int stack_offset ;
  int i ;
  jit_hw_reg *r ;
  struct jit_op *o ;
  int tmp ;
  jit_value tmp___0 ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;

  {
  stack_offset = 0;
  i = 0;
  while (i < (jit->reg_al)->gp_reg_cnt) {
    r = (jit->reg_al)->gp_regs + i;
    if (r->callee_saved) {
      o = op->next;
      while ((unsigned long )o != (unsigned long )((void *)0)) {
        if ((unsigned int )((jit_opcode )((int )o->code & 65528)) == 384U) {
          break;
        }
        tmp = uses_hw_reg(o, (jit_value )r->id, 0);
        if (tmp) {
          stack_offset = emit_push_reg(jit, r, stack_offset);
          break;
        }
        o = o->next;
      }
    }
    i ++;
  }
  tmp___0 = jit_value_align((jit_value )stack_offset, (jit_value )16);
  stack_offset = (int )tmp___0;
  if (stack_offset) {
    while (1) {
      if (stack_offset >= -128) {
        if (stack_offset <= 127) {
          while (1) {
            _amd64_rex_bits = (unsigned char)8;
            if ((int )_amd64_rex_bits != 0) {
              tmp___1 = jit->ip;
              (jit->ip) ++;
              *tmp___1 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___3 = jit->ip;
              (jit->ip) ++;
              *tmp___3 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(stack_offset & 255);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)8;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___10 = jit->ip;
            (jit->ip) ++;
            *tmp___10 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___11 = jit->ip;
        (jit->ip) ++;
        *tmp___11 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = stack_offset;
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = imb___0.b[0];
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = imb___0.b[1];
          tmp___15 = jit->ip;
          (jit->ip) ++;
          *tmp___15 = imb___0.b[2];
          tmp___16 = jit->ip;
          (jit->ip) ++;
          *tmp___16 = imb___0.b[3];
          break;
        }
      }
      break;
    }
  }
  return ((int )((unsigned long )stack_offset / sizeof(void *)));
}
}
/* END FUNCTION-DEF emit_push_callee_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF iscntrl LOC=UNKNOWN */
__inline extern int iscntrl(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 512UL);
  return (tmp);
}
}
/* END FUNCTION-DEF iscntrl LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF prepare_labels LOC=UNKNOWN */
static jit_tree *prepare_labels(struct jit *jit ) 
{ 
  long x ;
  jit_tree *n ;
  jit_op *op ;
  jit_op *tmp ;

  {
  x = 1L;
  n = (jit_tree *)((void *)0);
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 344U) {
      n = jit_tree_insert(n, (long )op, (void *)x, (int *)((void *)0));
      n = jit_tree_insert(n, op->arg[0], (void *)(- x), (int *)((void *)0));
      x ++;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 496U) {
      n = jit_tree_insert(n, op->arg[0], (void *)x, (int *)((void *)0));
      x ++;
    }
    op = op->next;
  }
  return (n);
}
}
/* END FUNCTION-DEF prepare_labels LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_get_unused_reg_with_index LOC=UNKNOWN */
jit_hw_reg *jit_get_unused_reg_with_index(struct jit_reg_allocator *al , jit_op *op ,
                                          int fp , int index___0 ) 
{ 
  jit_hw_reg *regs ;
  int reg_count ;
  int i ;
  int tmp ;

  {
  if (! fp) {
    regs = al->gp_regs;
    reg_count = al->gp_reg_cnt;
  } else {
    regs = al->fp_regs;
    reg_count = al->fp_reg_cnt;
  }
  i = 0;
  while (i < reg_count) {
    if ((regs + i)->callee_saved) {
      goto __Cont;
    }
    tmp = jit_reg_in_use(op, (regs + i)->id, fp);
    if (! tmp) {
      if (index___0 == 0) {
        return (regs + i);
      } else {
        index___0 --;
      }
    }
    __Cont: /* CIL Label */ 
    i ++;
  }
  return ((jit_hw_reg *)((void *)0));
}
}
/* END FUNCTION-DEF jit_get_unused_reg_with_index LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF free_ops LOC=UNKNOWN */
static void free_ops(struct jit_op *op ) 
{ 


  {
  if ((unsigned long )op == (unsigned long )((void *)0)) {
    return;
  }
  free_ops(op->next);
  if (op->addendum) {
    free(op->addendum);
  }
  jit_free_op(op);
  return;
}
}
/* END FUNCTION-DEF free_ops LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_dump_ops_general LOC=UNKNOWN */
static void jit_dump_ops_general(struct jit *jit , jit_tree *labels , int verbosity ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  int size ;
  int tmp___0 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    tmp___0 = print_op(__stdoutp, & jit_disasm_general, op, labels, verbosity);
    size = tmp___0;
    if (size == 0) {
      return;
    }
    while (size < 35) {
      printf((char const   */* __restrict  */)" ");
      size ++;
    }
    if (verbosity & 1024) {
      if (op->live_in) {
        if (op->live_out) {
          printf((char const   */* __restrict  */)"In: ");
          jit_tree_walk((op->live_in)->root, & print_reg_liveness_callback, (void *)(& jit_disasm_general));
          printf((char const   */* __restrict  */)"\tOut: ");
          jit_tree_walk((op->live_out)->root, & print_reg_liveness_callback, (void *)(& jit_disasm_general));
        }
      }
    }
    if (verbosity & 512) {
      if (op->regmap) {
        printf((char const   */* __restrict  */)"\tAssoc: ");
        jit_tree_walk((op->regmap)->map, & print_rmap_callback, (void *)(& jit_disasm_general));
      }
    }
    printf((char const   */* __restrict  */)"\n");
    op = op->next;
  }
  return;
}
}
/* END FUNCTION-DEF jit_dump_ops_general LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF generic_pop_caller_saved_regs LOC=UNKNOWN */
static int generic_pop_caller_saved_regs(struct jit *jit , jit_op *op , int reg_count ,
                                         jit_hw_reg *regs , int fp , jit_hw_reg *skip_reg ,
                                         int stack_offset ) 
{ 
  jit_value reg ;
  int skip_reg_id ;
  int tmp ;
  int i ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp___0 ;
  int tmp___1 ;

  {
  if (skip_reg) {
    tmp = skip_reg->id;
  } else {
    tmp = -1;
  }
  skip_reg_id = tmp;
  i = reg_count - 1;
  while (i >= 0) {
    if ((regs + i)->id == skip_reg_id) {
      goto __Cont;
    } else
    if ((regs + i)->callee_saved) {
      goto __Cont;
    }
    tmp___0 = rmap_is_associated(op->regmap, (regs + i)->id, fp, & reg);
    hreg = tmp___0;
    if (hreg) {
      tmp___1 = jit_set_get(op->live_in, (int )reg);
      if (tmp___1) {
        stack_offset = emit_pop_reg(jit, hreg, stack_offset);
      }
    }
    __Cont: /* CIL Label */ 
    i --;
  }
  return (stack_offset);
}
}
/* END FUNCTION-DEF generic_pop_caller_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_push_arg LOC=UNKNOWN */
__inline static void emit_push_arg(struct jit *jit , struct jit_out_arg *arg ) 
{ 
  int sreg ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  int tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  x86_imm_buf imb ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  unsigned char *tmp___16 ;
  int tmp___17 ;
  unsigned char *tmp___18 ;
  int tmp___19 ;
  unsigned char *tmp___20 ;
  x86_imm_buf imb___0 ;
  int tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  int tmp___31 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  amd64_imm_buf imb___1 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;

  {
  if (arg->isreg) {
    tmp___31 = is_spilled(arg->value.generic, jit->prepared_args.op, & sreg);
    if (tmp___31) {
      while (1) {
        while (1) {
          _amd64_rex_bits = (unsigned char)0;
          if ((int )_amd64_rex_bits != 0) {
            tmp = jit->ip;
            (jit->ip) ++;
            *tmp = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        tmp___0 = jit->ip;
        (jit->ip) ++;
        *tmp___0 = (unsigned char)255;
        while (1) {
          if (0) {
            tmp___15 = stack_reg_pos(jit, (int )arg->value.generic);
            if (tmp___15 == 0) {
              while (1) {
                tmp___1 = jit->ip;
                (jit->ip) ++;
                *tmp___1 = (unsigned char )((6 << 3) | 4);
                break;
              }
              while (1) {
                tmp___2 = jit->ip;
                (jit->ip) ++;
                *tmp___2 = (unsigned char )((4 << 3) | 4);
                break;
              }
            } else {
              tmp___13 = stack_reg_pos(jit, (int )arg->value.generic);
              if (tmp___13 >= -128) {
                tmp___14 = stack_reg_pos(jit, (int )arg->value.generic);
                if (tmp___14 <= 127) {
                  while (1) {
                    tmp___3 = jit->ip;
                    (jit->ip) ++;
                    *tmp___3 = (unsigned char )(((1 << 6) | (6 << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___4 = jit->ip;
                    (jit->ip) ++;
                    *tmp___4 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    tmp___5 = stack_reg_pos(jit, (int )arg->value.generic);
                    *(jit->ip) = (unsigned char )(tmp___5 & 255);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L;
                }
              } else {
                _L: /* CIL Label */ 
                while (1) {
                  tmp___6 = jit->ip;
                  (jit->ip) ++;
                  *tmp___6 = (unsigned char )(((2 << 6) | (6 << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___7 = jit->ip;
                  (jit->ip) ++;
                  *tmp___7 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___8 = stack_reg_pos(jit, (int )arg->value.generic);
                  imb.val = tmp___8;
                  tmp___9 = jit->ip;
                  (jit->ip) ++;
                  *tmp___9 = imb.b[0];
                  tmp___10 = jit->ip;
                  (jit->ip) ++;
                  *tmp___10 = imb.b[1];
                  tmp___11 = jit->ip;
                  (jit->ip) ++;
                  *tmp___11 = imb.b[2];
                  tmp___12 = jit->ip;
                  (jit->ip) ++;
                  *tmp___12 = imb.b[3];
                  break;
                }
              }
            }
            break;
          }
          tmp___17 = stack_reg_pos(jit, (int )arg->value.generic);
          if (tmp___17 == 0) {

          }
          tmp___26 = stack_reg_pos(jit, (int )arg->value.generic);
          if (tmp___26 >= -128) {
            tmp___27 = stack_reg_pos(jit, (int )arg->value.generic);
            if (tmp___27 <= 127) {
              while (1) {
                tmp___18 = jit->ip;
                (jit->ip) ++;
                *tmp___18 = (unsigned char )(((1 << 6) | (6 << 3)) | 5);
                break;
              }
              while (1) {
                tmp___19 = stack_reg_pos(jit, (int )arg->value.generic);
                *(jit->ip) = (unsigned char )(tmp___19 & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___0;
            }
          } else {
            _L___0: /* CIL Label */ 
            while (1) {
              tmp___20 = jit->ip;
              (jit->ip) ++;
              *tmp___20 = (unsigned char )(((2 << 6) | (6 << 3)) | 5);
              break;
            }
            while (1) {
              tmp___21 = stack_reg_pos(jit, (int )arg->value.generic);
              imb___0.val = tmp___21;
              tmp___22 = jit->ip;
              (jit->ip) ++;
              *tmp___22 = imb___0.b[0];
              tmp___23 = jit->ip;
              (jit->ip) ++;
              *tmp___23 = imb___0.b[1];
              tmp___24 = jit->ip;
              (jit->ip) ++;
              *tmp___24 = imb___0.b[2];
              tmp___25 = jit->ip;
              (jit->ip) ++;
              *tmp___25 = imb___0.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          if (sreg > 7) {
            tmp___28 = 1;
          } else {
            tmp___28 = 0;
          }
          _amd64_rex_bits___0 = (unsigned char )tmp___28;
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___29 = jit->ip;
            (jit->ip) ++;
            *tmp___29 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___30 = jit->ip;
        (jit->ip) ++;
        *tmp___30 = (unsigned char )(80 + (sreg & 7));
        break;
      }
    }
  } else {
    while (1) {
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___32 = 8;
        } else {
          tmp___32 = 0;
        }
        _amd64_rex_bits___1 = (unsigned char )tmp___32;
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___33 = jit->ip;
          (jit->ip) ++;
          *tmp___33 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___33 = jit->ip;
          (jit->ip) ++;
          *tmp___33 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      tmp___34 = jit->ip;
      (jit->ip) ++;
      *tmp___34 = (unsigned char)184;
      if (sizeof(void *) == 8UL) {
        while (1) {
          imb___1.val = (size_t )arg->value.generic;
          tmp___35 = jit->ip;
          (jit->ip) ++;
          *tmp___35 = imb___1.b[0];
          tmp___36 = jit->ip;
          (jit->ip) ++;
          *tmp___36 = imb___1.b[1];
          tmp___37 = jit->ip;
          (jit->ip) ++;
          *tmp___37 = imb___1.b[2];
          tmp___38 = jit->ip;
          (jit->ip) ++;
          *tmp___38 = imb___1.b[3];
          tmp___39 = jit->ip;
          (jit->ip) ++;
          *tmp___39 = imb___1.b[4];
          tmp___40 = jit->ip;
          (jit->ip) ++;
          *tmp___40 = imb___1.b[5];
          tmp___41 = jit->ip;
          (jit->ip) ++;
          *tmp___41 = imb___1.b[6];
          tmp___42 = jit->ip;
          (jit->ip) ++;
          *tmp___42 = imb___1.b[7];
          break;
        }
      } else {
        while (1) {
          imb___2.val = (int )((size_t )arg->value.generic);
          tmp___43 = jit->ip;
          (jit->ip) ++;
          *tmp___43 = imb___2.b[0];
          tmp___44 = jit->ip;
          (jit->ip) ++;
          *tmp___44 = imb___2.b[1];
          tmp___45 = jit->ip;
          (jit->ip) ++;
          *tmp___45 = imb___2.b[2];
          tmp___46 = jit->ip;
          (jit->ip) ++;
          *tmp___46 = imb___2.b[3];
          break;
        }
      }
      break;
    }
    while (1) {
      while (1) {
        _amd64_rex_bits___2 = (unsigned char)0;
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___47 = jit->ip;
          (jit->ip) ++;
          *tmp___47 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___48 = jit->ip;
      (jit->ip) ++;
      *tmp___48 = (unsigned char)80;
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_push_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_branch LOC=UNKNOWN */
static void emit_sse_branch(struct jit *jit , jit_op *op , long a1 , long a2 , long a3 ,
                            int x86_cond ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  int offset ;
  int tmp___6 ;
  long tmp___7 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  x86_imm_buf imb ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;

  {
  while (1) {
    tmp = jit->ip;
    (jit->ip) ++;
    *tmp = (unsigned char)102;
    while (1) {
      if (a2 > 7L) {
        tmp___0 = 4;
      } else {
        tmp___0 = 0;
      }
      if (a3 > 7L) {
        tmp___1 = 1;
      } else {
        tmp___1 = 0;
      }
      _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
      if ((int )_amd64_rex_bits != 0) {
        tmp___2 = jit->ip;
        (jit->ip) ++;
        *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
      }
      break;
    }
    tmp___3 = jit->ip;
    (jit->ip) ++;
    *tmp___3 = (unsigned char)15;
    tmp___4 = jit->ip;
    (jit->ip) ++;
    *tmp___4 = (unsigned char)47;
    while (1) {
      while (1) {
        tmp___5 = jit->ip;
        (jit->ip) ++;
        *tmp___5 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a3 & 7L));
        break;
      }
      break;
    }
    break;
  }
  op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
  while (1) {
    tmp___8 = jit_is_label(jit, (void *)a1);
    if (tmp___8) {
      tmp___7 = ((jit_value )jit->buf + ((jit_label *)a1)->pos) - (jit_value )jit->ip;
    } else {
      tmp___7 = a1;
    }
    offset = (int )(tmp___7 - 6L);
    while (1) {
      tmp___9 = jit->ip;
      (jit->ip) ++;
      *tmp___9 = (unsigned char)15;
      tmp___11 = jit->ip;
      (jit->ip) ++;
      *tmp___11 = (unsigned char )((int const   )x86_cc_unsigned_map[x86_cond] + 16);
      while (1) {
        imb.val = offset;
        tmp___12 = jit->ip;
        (jit->ip) ++;
        *tmp___12 = imb.b[0];
        tmp___13 = jit->ip;
        (jit->ip) ++;
        *tmp___13 = imb.b[1];
        tmp___14 = jit->ip;
        (jit->ip) ++;
        *tmp___14 = imb.b[2];
        tmp___15 = jit->ip;
        (jit->ip) ++;
        *tmp___15 = imb.b[3];
        break;
      }
      break;
    }
    break;
  }
  return;
}
}
/* END FUNCTION-DEF emit_sse_branch LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF assign_regs LOC=UNKNOWN */
static void assign_regs(struct jit *jit , struct jit_op *op ) 
{ 
  int i ;
  int skip ;
  struct jit_reg_allocator *al ;
  struct jit_func_info *info ;
  jit_reg virt_reg ;

  {
  skip = 0;
  al = jit->reg_al;
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 384U) {
    info = (struct jit_func_info *)op->arg[1];
    al->current_func_info = info;
    assign_regs_for_args(al, op);
  } else
  if (op->prev) {
    rmap_free(op->regmap);
    op->regmap = rmap_clone((op->prev)->regmap);
  }
  switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
  case 840U: 
  prepare_registers_for_call(al, op);
  break;
  case 760U: 
  skip = 1;
  break;
  case 904U: 
  skip = 1;
  break;
  case 544U: 
  skip = assign_ret_reg(op, al->ret_reg);
  break;
  case 360U: 
  skip = assign_ret_reg(op, al->fpret_reg);
  break;
  case 776U: 
  skip = assign_getarg(op, al);
  break;
  case 648U: 
  skip = assign_call(op, al);
  break;
  case 336U: 
  skip = assign_jmp(op, al);
  break;
  case 592U: 
  skip = spill_all_registers(op, al);
  break;
  case 432U: 
  skip = force_spill(op);
  break;
  case 680U: 
  skip = force_assoc(op, al);
  break;
  default: 
  break;
  }
  if (skip) {
    return;
  }
  i = 0;
  while (i < 3) {
    if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 1) {
      goto _L;
    } else
    if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 3) {
      _L: /* CIL Label */ 
      virt_reg = op->arg[i];
      if (((virt_reg >> 1) & 3L) == 2L) {
        associate_register_alias(al, op, i);
      } else {
        associate_register(al, op, i);
      }
    } else
    if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 2) {
      op->r_arg[i] = op->arg[i];
    }
    i ++;
  }
  return;
}
}
/* END FUNCTION-DEF assign_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_set_clone LOC=UNKNOWN */
__inline static jit_set *jit_set_clone(jit_set *s ) 
{ 
  jit_set *clone ;
  jit_set *tmp ;

  {
  tmp = jit_set_new();
  clone = tmp;
  clone->root = jit_tree_clone(s->root);
  return (clone);
}
}
/* END FUNCTION-DEF jit_set_clone LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF get_related_op LOC=UNKNOWN */
static jit_op *get_related_op(jit_op *op , int result_reg ) 
{ 
  jit_op *nextop ;
  int tmp ;
  int used ;
  int i ;

  {
  nextop = op->next;
  if (nextop->arg[0] != (jit_value )result_reg) {
    tmp = jit_set_get(nextop->live_out, result_reg);
    if (tmp) {
      return ((jit_op *)((void *)0));
    }
  }
  used = 0;
  i = 0;
  while (i < 3) {
    if ((((int )nextop->spec >> ((i + 1) - 1) * 2) & 3) == 1) {
      if (nextop->arg[i]) {
        used = 1;
        break;
      }
    }
    i ++;
  }
  if (used) {
    return (nextop);
  }
  return ((jit_op *)((void *)0));
}
}
/* END FUNCTION-DEF get_related_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_free LOC=UNKNOWN */
void jit_free(struct jit *jit ) 
{ 
  jit_op *tmp ;

  {
  jit_reg_allocator_free(jit->reg_al);
  tmp = jit_op_first(jit->ops);
  free_ops(tmp);
  free_labels(jit->labels);
  if (jit->buf) {
    if (jit->mmaped_buf) {
      munmap((void *)jit->buf, (size_t )jit->buf_capacity);
    } else {
      free((void *)jit->buf);
    }
  }
  free((void *)jit);
  return;
}
}
/* END FUNCTION-DEF jit_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_trace_callback LOC=UNKNOWN */
void jit_trace_callback(struct jit *jit , jit_op *op , int verbosity , int trace ) 
{ 


  {
  if (trace & 1) {
    jit_trace_op(jit, op->prev, verbosity);
  }
  if (trace & 2) {
    jit_trace_op(jit, op->next, verbosity);
  }
  return;
}
}
/* END FUNCTION-DEF jit_trace_callback LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_fret_op LOC=UNKNOWN */
static void emit_fret_op(struct jit *jit , jit_op *op ) 
{ 
  jit_value arg ;
  jit_hw_reg *ret_reg ;
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  int tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  long tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  struct jit_func_info *tmp___22 ;
  unsigned char *tmp___23 ;

  {
  arg = op->r_arg[0];
  ret_reg = (jit->reg_al)->fpret_reg;
  if ((unsigned long )op->arg_size == sizeof(float )) {
    while (1) {
      tmp = jit->ip;
      (jit->ip) ++;
      *tmp = (unsigned char)242;
      while (1) {
        if (ret_reg->id > 7) {
          tmp___0 = 4;
        } else {
          tmp___0 = 0;
        }
        if (arg > 7L) {
          tmp___1 = 1;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)15;
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)90;
      while (1) {
        while (1) {
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char )((long )((3 << 6) | ((ret_reg->id & 7) << 3)) | (arg & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else
  if ((jit_value )ret_reg->id != arg) {
    while (1) {
      tmp___6 = jit->ip;
      (jit->ip) ++;
      *tmp___6 = (unsigned char)242;
      while (1) {
        if (ret_reg->id > 7) {
          tmp___7 = 4;
        } else {
          tmp___7 = 0;
        }
        if (arg > 7L) {
          tmp___8 = 1;
        } else {
          tmp___8 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(tmp___7 | tmp___8);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___9 = jit->ip;
          (jit->ip) ++;
          *tmp___9 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      tmp___10 = jit->ip;
      (jit->ip) ++;
      *tmp___10 = (unsigned char)15;
      tmp___11 = jit->ip;
      (jit->ip) ++;
      *tmp___11 = (unsigned char)16;
      while (1) {
        while (1) {
          tmp___12 = jit->ip;
          (jit->ip) ++;
          *tmp___12 = (unsigned char )((long )((3 << 6) | ((ret_reg->id & 7) << 3)) | (arg & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  tmp___13 = emit_pop_callee_saved_regs(jit);
  jit->push_count -= tmp___13;
  tmp___22 = jit_current_func_info(jit);
  if (tmp___22->has_prolog) {
    while (1) {
      while (1) {
        _amd64_rex_bits___1 = (unsigned char)8;
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___15 = jit->ip;
          (jit->ip) ++;
          *tmp___15 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      switch (8) {
      case 1: 
      tmp___16 = jit->ip;
      (jit->ip) ++;
      *tmp___16 = (unsigned char)138;
      break;
      case 8: 
      case 4: 
      case 2: 
      tmp___17 = jit->ip;
      (jit->ip) ++;
      *tmp___17 = (unsigned char)139;
      break;
      default: 
      tmp___18 = __builtin_expect(1L, 0L);
      if (tmp___18) {
        __assert_rtn("emit_fret_op", "./jitter-amd64.c", 2317, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___19 = jit->ip;
          (jit->ip) ++;
          *tmp___19 = (unsigned char )(((3 << 6) | (4 << 3)) | 5);
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        _amd64_rex_bits___2 = (unsigned char)0;
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___20 = jit->ip;
          (jit->ip) ++;
          *tmp___20 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___21 = jit->ip;
      (jit->ip) ++;
      *tmp___21 = (unsigned char)93;
      break;
    }
  }
  while (1) {
    tmp___23 = jit->ip;
    (jit->ip) ++;
    *tmp___23 = (unsigned char)195;
    break;
  }
  return;
}
}
/* END FUNCTION-DEF emit_fret_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF ob_pad LOC=UNKNOWN */
static void ob_pad(struct output_buf *ob , int size ) 
{ 
  size_t tmp ;

  {
  while (1) {
    tmp = strlen((char const   *)ob->buf);
    if (! (tmp < (size_t )size)) {
      break;
    }
    ob_append(ob, (char *)" ");
  }
  return;
}
}
/* END FUNCTION-DEF ob_pad LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF toupper LOC=UNKNOWN */
__inline extern int toupper(int _c ) 
{ 
  __darwin_ct_rune_t tmp ;

  {
  tmp = __toupper(_c);
  return (tmp);
}
}
/* END FUNCTION-DEF toupper LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF check_data_alignment LOC=UNKNOWN */
static int check_data_alignment(jit_op *op , char *msg_buf ) 
{ 
  int tmp ;
  jit_op *prev ;
  int tmp___0 ;

  {
  tmp = jit_op_is_data_op(op);
  if (tmp) {
    return (0);
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 168U) {
    return (0);
  }
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 496U) {
    return (0);
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 344U) {
    return (0);
  }
  prev = op->prev;
  while (prev) {
    if ((unsigned int )((jit_opcode )((int )prev->code & 65528)) == 496U) {
      prev = prev->prev;
    } else
    if ((unsigned int )((jit_opcode )((int )prev->code & 65528)) == 344U) {
      prev = prev->prev;
    } else {
      break;
    }
  }
  tmp___0 = jit_op_is_data_op(prev);
  if (tmp___0) {
    append_msg(msg_buf, (char *)"instruction follows unaligned data block");
    return (16);
  }
  return (0);
}
}
/* END FUNCTION-DEF check_data_alignment LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF insert_reg_op LOC=UNKNOWN */
static void insert_reg_op(int opcode , jit_op *op , jit_value r1 , jit_value r2 ) 
{ 
  jit_op *o ;
  struct jit_op *tmp ;

  {
  tmp = jit_op_new((unsigned short )opcode, (unsigned char )((2 << 2) | 2), r1, r2,
                   0L, (unsigned char)0);
  o = tmp;
  o->r_arg[0] = o->arg[0];
  o->r_arg[1] = o->arg[1];
  jit_op_prepend(op, o);
  return;
}
}
/* END FUNCTION-DEF insert_reg_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isprint LOC=UNKNOWN */
__inline extern int isprint(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 262144UL);
  return (tmp);
}
}
/* END FUNCTION-DEF isprint LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF ob_printf LOC=UNKNOWN */
static void ob_printf(struct output_buf *ob , char const   *fmt  , ...) 
{ 
  char str[8192] ;
  va_list___0 ap ;
  int len ;
  unsigned long tmp ;
  int tmp___0 ;
  size_t tmp___1 ;
  unsigned long tmp___2 ;

  {
  __builtin_va_start(ap, fmt);
  tmp = __builtin_object_size((void *)(str), 1);
  tmp___0 = __builtin___vsnprintf_chk(str, 8192UL, 0, tmp, fmt, ap);
  len = tmp___0;
  __builtin_va_end(ap);
  tmp___1 = strlen((char const   *)(str));
  len = (int )tmp___1;
  ob_assert_space(ob, len);
  tmp___2 = __builtin_object_size((void *)ob->buf, 1);
  __builtin___strcat_chk(ob->buf, (char const   *)(str), tmp___2);
  ob->size += (size_t )len;
  return;
}
}
/* END FUNCTION-DEF ob_printf LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_memcpy LOC=UNKNOWN */
static void emit_memcpy(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                        jit_value a3 ) 
{ 


  {
  emit_transfer_init(jit, op, a1, a2, a3, 1);
  emit_transfer_loop(jit, op);
  return;
}
}
/* END FUNCTION-DEF emit_memcpy LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_dump_ops_combined LOC=UNKNOWN */
static void jit_dump_ops_combined(struct jit *jit , jit_tree *labels ) 
{ 
  FILE *f ;
  FILE *tmp ;
  jit_op *op ;
  jit_op *tmp___0 ;

  {
  tmp = open_disasm();
  f = tmp;
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".addr=%lx\n",
          (unsigned long )jit->buf);
  tmp___0 = jit_op_first(jit->ops);
  op = tmp___0;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    op = print_combined_op(f, jit, op, labels);
    if (! op) {
      break;
    }
    op = op->next;
  }
  fclose(f);
  wait((int *)((void *)0));
  return;
}
}
/* END FUNCTION-DEF jit_dump_ops_combined LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_debug_info_new LOC=UNKNOWN */
struct jit_debug_info *jit_debug_info_new(char const   *filename , char const   *function ,
                                          int lineno ) 
{ 
  struct jit_debug_info *r ;
  void *tmp ;

  {
  tmp = malloc(sizeof(struct jit_debug_info ));
  r = (struct jit_debug_info *)tmp;
  r->filename = filename;
  r->function = function;
  r->lineno = lineno;
  r->warnings = 0;
  return (r);
}
}
/* END FUNCTION-DEF jit_debug_info_new LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_tree_addall LOC=UNKNOWN */
__inline static jit_tree *jit_tree_addall(jit_tree *target , jit_tree *n ) 
{ 


  {
  if ((unsigned long )n == (unsigned long )((void *)0)) {
    return (target);
  }
  target = jit_tree_addall(target, n->left);
  target = jit_tree_insert(target, n->key, n->value, (int *)((void *)0));
  target = jit_tree_addall(target, n->right);
  return (target);
}
}
/* END FUNCTION-DEF jit_tree_addall LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_tree_walk LOC=UNKNOWN */
static void jit_tree_walk(jit_tree *h , void (*func)(jit_tree_key key , jit_tree_value value ,
                                                     void *thunk ) , void *thunk ) 
{ 


  {
  if (! h) {
    return;
  }
  jit_tree_walk(h->left, func, thunk);
  (*func)(h->key, h->value, thunk);
  jit_tree_walk(h->right, func, thunk);
  return;
}
}
/* END FUNCTION-DEF jit_tree_walk LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF color_flip LOC=UNKNOWN */
__inline static void color_flip(jit_tree *h ) 
{ 


  {
  h->color = ! h->color;
  (h->left)->color = ! (h->left)->color;
  (h->right)->color = ! (h->right)->color;
  return;
}
}
/* END FUNCTION-DEF color_flip LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF __sputc LOC=UNKNOWN */
__inline extern int ( __attribute__((__always_inline__)) __sputc)(int _c , FILE *_p ) 
{ 
  unsigned char *tmp ;
  unsigned char tmp___0 ;
  int tmp___1 ;

  {
  (_p->_w) --;
  if (_p->_w >= 0) {
    tmp = _p->_p;
    (_p->_p) ++;
    tmp___0 = (unsigned char )_c;
    *tmp = tmp___0;
    return ((int )tmp___0);
  } else
  if (_p->_w >= _p->_lbfsize) {
    if ((int )((char )_c) != 10) {
      tmp = _p->_p;
      (_p->_p) ++;
      tmp___0 = (unsigned char )_c;
      *tmp = tmp___0;
      return ((int )tmp___0);
    } else {
      tmp___1 = __swbuf(_c, _p);
      return (tmp___1);
    }
  } else {
    tmp___1 = __swbuf(_c, _p);
    return (tmp___1);
  }
}
}
/* END FUNCTION-DEF __sputc LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_fstx_op LOC=UNKNOWN */
static void emit_sse_fstx_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                             jit_value a3 ) 
{ 
  int live ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___15 ;
  int tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  x86_imm_buf imb ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___38 ;
  int tmp___39 ;
  int tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___61 ;
  int tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___68 ;
  jit_value tmp___69 ;
  int tmp___70 ;
  jit_value tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___98 ;
  int tmp___99 ;
  int tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___116 ;
  unsigned char *tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char *tmp___119 ;

  {
  if ((unsigned long )op->arg_size == sizeof(float )) {
    tmp = jit_set_get(op->live_out, (int )op->arg[2]);
    live = tmp;
    if (live) {
      while (1) {
        while (1) {
          tmp___0 = jit->ip;
          (jit->ip) ++;
          *tmp___0 = (unsigned char)102;
          while (1) {
            if (a3 > 7L) {
              tmp___1 = 4;
            } else {
              tmp___1 = 0;
            }
            if (a3 > 7L) {
              tmp___2 = 1;
            } else {
              tmp___2 = 0;
            }
            _amd64_rex_bits = (unsigned char )(tmp___1 | tmp___2);
            if ((int )_amd64_rex_bits != 0) {
              tmp___3 = jit->ip;
              (jit->ip) ++;
              *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___4 = jit->ip;
          (jit->ip) ++;
          *tmp___4 = (unsigned char)15;
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char)198;
          while (1) {
            while (1) {
              tmp___6 = jit->ip;
              (jit->ip) ++;
              *tmp___6 = (unsigned char )(((long )(3 << 6) | ((a3 & 7L) << 3)) | (a3 & 7L));
              break;
            }
            break;
          }
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)0;
          (jit->ip) ++;
          break;
        }
        break;
      }
    }
    while (1) {
      tmp___7 = jit->ip;
      (jit->ip) ++;
      *tmp___7 = (unsigned char)242;
      while (1) {
        if (a3 > 7L) {
          tmp___8 = 4;
        } else {
          tmp___8 = 0;
        }
        if (a3 > 7L) {
          tmp___9 = 1;
        } else {
          tmp___9 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(tmp___8 | tmp___9);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___10 = jit->ip;
          (jit->ip) ++;
          *tmp___10 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      tmp___11 = jit->ip;
      (jit->ip) ++;
      *tmp___11 = (unsigned char)15;
      tmp___12 = jit->ip;
      (jit->ip) ++;
      *tmp___12 = (unsigned char)90;
      while (1) {
        while (1) {
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = (unsigned char )(((long )(3 << 6) | ((a3 & 7L) << 3)) | (a3 & 7L));
          break;
        }
        break;
      }
      break;
    }
    if ((int )op->code & 2) {
      while (1) {
        tmp___14 = jit->ip;
        (jit->ip) ++;
        *tmp___14 = (unsigned char)243;
        while (1) {
          if (a3 > 7L) {
            tmp___15 = 4;
          } else {
            tmp___15 = 0;
          }
          if (a2 > 7L) {
            tmp___16 = 1;
          } else {
            tmp___16 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )(tmp___15 | tmp___16);
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___17 = jit->ip;
            (jit->ip) ++;
            *tmp___17 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___18 = jit->ip;
        (jit->ip) ++;
        *tmp___18 = (unsigned char)15;
        tmp___19 = jit->ip;
        (jit->ip) ++;
        *tmp___19 = (unsigned char)17;
        while (1) {
          if ((a2 & 7L) == 4L) {
            if (a1 == 0L) {
              while (1) {
                tmp___20 = jit->ip;
                (jit->ip) ++;
                *tmp___20 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___21 = jit->ip;
                (jit->ip) ++;
                *tmp___21 = (unsigned char )((4 << 3) | 4);
                break;
              }
            } else
            if ((int )a1 >= -128) {
              if ((int )a1 <= 127) {
                while (1) {
                  tmp___22 = jit->ip;
                  (jit->ip) ++;
                  *tmp___22 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
                  break;
                }
                while (1) {
                  tmp___23 = jit->ip;
                  (jit->ip) ++;
                  *tmp___23 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(a1 & 255L);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L;
              }
            } else {
              _L: /* CIL Label */ 
              while (1) {
                tmp___24 = jit->ip;
                (jit->ip) ++;
                *tmp___24 = (unsigned char )(((long )(2 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
                break;
              }
              while (1) {
                tmp___25 = jit->ip;
                (jit->ip) ++;
                *tmp___25 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                imb.val = (int )a1;
                tmp___26 = jit->ip;
                (jit->ip) ++;
                *tmp___26 = imb.b[0];
                tmp___27 = jit->ip;
                (jit->ip) ++;
                *tmp___27 = imb.b[1];
                tmp___28 = jit->ip;
                (jit->ip) ++;
                *tmp___28 = imb.b[2];
                tmp___29 = jit->ip;
                (jit->ip) ++;
                *tmp___29 = imb.b[3];
                break;
              }
            }
            break;
          }
          if (a1 == 0L) {
            if ((a2 & 7L) != 5L) {
              while (1) {
                tmp___30 = jit->ip;
                (jit->ip) ++;
                *tmp___30 = (unsigned char )((((a3 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                break;
              }
              break;
            }
          }
          if ((int )a1 >= -128) {
            if ((int )a1 <= 127) {
              while (1) {
                tmp___31 = jit->ip;
                (jit->ip) ++;
                *tmp___31 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(a1 & 255L);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___0;
            }
          } else {
            _L___0: /* CIL Label */ 
            while (1) {
              tmp___32 = jit->ip;
              (jit->ip) ++;
              *tmp___32 = (unsigned char )(((long )(2 << 6) | (((a3 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
              break;
            }
            while (1) {
              imb___0.val = (int )a1;
              tmp___33 = jit->ip;
              (jit->ip) ++;
              *tmp___33 = imb___0.b[0];
              tmp___34 = jit->ip;
              (jit->ip) ++;
              *tmp___34 = imb___0.b[1];
              tmp___35 = jit->ip;
              (jit->ip) ++;
              *tmp___35 = imb___0.b[2];
              tmp___36 = jit->ip;
              (jit->ip) ++;
              *tmp___36 = imb___0.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        tmp___37 = jit->ip;
        (jit->ip) ++;
        *tmp___37 = (unsigned char)243;
        while (1) {
          if (a3 > 7L) {
            tmp___38 = 4;
          } else {
            tmp___38 = 0;
          }
          if (a2 > 7L) {
            tmp___39 = 2;
          } else {
            tmp___39 = 0;
          }
          if (a1 > 7L) {
            tmp___40 = 1;
          } else {
            tmp___40 = 0;
          }
          _amd64_rex_bits___2 = (unsigned char )(((8 | tmp___38) | tmp___39) | tmp___40);
          if ((int )_amd64_rex_bits___2 != 0) {
            tmp___41 = jit->ip;
            (jit->ip) ++;
            *tmp___41 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
          }
          break;
        }
        tmp___42 = jit->ip;
        (jit->ip) ++;
        *tmp___42 = (unsigned char)15;
        tmp___43 = jit->ip;
        (jit->ip) ++;
        *tmp___43 = (unsigned char)17;
        while (1) {
          if (a1 == -1L) {
            while (1) {
              tmp___44 = jit->ip;
              (jit->ip) ++;
              *tmp___44 = (unsigned char )(((a3 & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___45 = jit->ip;
              (jit->ip) ++;
              *tmp___45 = (unsigned char )(((a2 & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb___1.val = 0;
              tmp___46 = jit->ip;
              (jit->ip) ++;
              *tmp___46 = imb___1.b[0];
              tmp___47 = jit->ip;
              (jit->ip) ++;
              *tmp___47 = imb___1.b[1];
              tmp___48 = jit->ip;
              (jit->ip) ++;
              *tmp___48 = imb___1.b[2];
              tmp___49 = jit->ip;
              (jit->ip) ++;
              *tmp___49 = imb___1.b[3];
              break;
            }
          } else
          if (a1 != 5L) {
            while (1) {
              tmp___50 = jit->ip;
              (jit->ip) ++;
              *tmp___50 = (unsigned char )(((a3 & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___51 = jit->ip;
              (jit->ip) ++;
              *tmp___51 = (unsigned char )((((a2 & 7L) & 7L) << 3) | ((a1 & 7L) & 7L));
              break;
            }
          } else {
            while (1) {
              tmp___52 = jit->ip;
              (jit->ip) ++;
              *tmp___52 = (unsigned char )(((long )(1 << 6) | ((a3 & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___53 = jit->ip;
              (jit->ip) ++;
              *tmp___53 = (unsigned char )((((a2 & 7L) & 7L) << 3) | ((a1 & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)0;
              (jit->ip) ++;
              break;
            }
          }
          break;
        }
        break;
      }
    }
    if (live) {
      while (1) {
        while (1) {
          tmp___60 = jit->ip;
          (jit->ip) ++;
          *tmp___60 = (unsigned char)102;
          while (1) {
            if (a3 > 7L) {
              tmp___61 = 4;
            } else {
              tmp___61 = 0;
            }
            if (a3 > 7L) {
              tmp___62 = 1;
            } else {
              tmp___62 = 0;
            }
            _amd64_rex_bits___3 = (unsigned char )(tmp___61 | tmp___62);
            if ((int )_amd64_rex_bits___3 != 0) {
              tmp___63 = jit->ip;
              (jit->ip) ++;
              *tmp___63 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
            }
            break;
          }
          tmp___64 = jit->ip;
          (jit->ip) ++;
          *tmp___64 = (unsigned char)15;
          tmp___65 = jit->ip;
          (jit->ip) ++;
          *tmp___65 = (unsigned char)198;
          while (1) {
            while (1) {
              tmp___66 = jit->ip;
              (jit->ip) ++;
              *tmp___66 = (unsigned char )(((long )(3 << 6) | ((a3 & 7L) << 3)) | (a3 & 7L));
              break;
            }
            break;
          }
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)1;
          (jit->ip) ++;
          break;
        }
        break;
      }
    }
  } else
  if ((int )op->code & 2) {
    while (1) {
      tmp___67 = jit->ip;
      (jit->ip) ++;
      *tmp___67 = (unsigned char)102;
      while (1) {
        if (a3 > 7L) {
          tmp___68 = 4;
        } else {
          tmp___68 = 0;
        }
        if (a2 == 16L) {
          tmp___71 = (jit_value )0;
        } else {
          tmp___71 = a2;
        }
        if (tmp___71 > 7L) {
          tmp___70 = 1;
        } else {
          tmp___70 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )(tmp___68 | tmp___70);
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___72 = jit->ip;
          (jit->ip) ++;
          *tmp___72 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      tmp___73 = jit->ip;
      (jit->ip) ++;
      *tmp___73 = (unsigned char)15;
      tmp___74 = jit->ip;
      (jit->ip) ++;
      *tmp___74 = (unsigned char)19;
      while (1) {
        if (a2 == 16L) {
          while (1) {
            tmp___75 = jit->ip;
            (jit->ip) ++;
            *tmp___75 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
            break;
          }
          while (1) {
            imb___3.val = (int )a1;
            tmp___76 = jit->ip;
            (jit->ip) ++;
            *tmp___76 = imb___3.b[0];
            tmp___77 = jit->ip;
            (jit->ip) ++;
            *tmp___77 = imb___3.b[1];
            tmp___78 = jit->ip;
            (jit->ip) ++;
            *tmp___78 = imb___3.b[2];
            tmp___79 = jit->ip;
            (jit->ip) ++;
            *tmp___79 = imb___3.b[3];
            break;
          }
        } else {
          while (1) {
            if ((a2 & 7L) == 4L) {
              if (a1 == 0L) {
                while (1) {
                  tmp___80 = jit->ip;
                  (jit->ip) ++;
                  *tmp___80 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 4L);
                  break;
                }
                while (1) {
                  tmp___81 = jit->ip;
                  (jit->ip) ++;
                  *tmp___81 = (unsigned char )((4 << 3) | 4);
                  break;
                }
              } else
              if ((int )a1 >= -128) {
                if ((int )a1 <= 127) {
                  while (1) {
                    tmp___82 = jit->ip;
                    (jit->ip) ++;
                    *tmp___82 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___83 = jit->ip;
                    (jit->ip) ++;
                    *tmp___83 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(a1 & 255L);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___1;
                }
              } else {
                _L___1: /* CIL Label */ 
                while (1) {
                  tmp___84 = jit->ip;
                  (jit->ip) ++;
                  *tmp___84 = (unsigned char )(((long )(2 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
                  break;
                }
                while (1) {
                  tmp___85 = jit->ip;
                  (jit->ip) ++;
                  *tmp___85 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  imb___4.val = (int )a1;
                  tmp___86 = jit->ip;
                  (jit->ip) ++;
                  *tmp___86 = imb___4.b[0];
                  tmp___87 = jit->ip;
                  (jit->ip) ++;
                  *tmp___87 = imb___4.b[1];
                  tmp___88 = jit->ip;
                  (jit->ip) ++;
                  *tmp___88 = imb___4.b[2];
                  tmp___89 = jit->ip;
                  (jit->ip) ++;
                  *tmp___89 = imb___4.b[3];
                  break;
                }
              }
              break;
            }
            if (a1 == 0L) {
              if ((a2 & 7L) != 5L) {
                while (1) {
                  tmp___90 = jit->ip;
                  (jit->ip) ++;
                  *tmp___90 = (unsigned char )((((a3 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                  break;
                }
                break;
              }
            }
            if ((int )a1 >= -128) {
              if ((int )a1 <= 127) {
                while (1) {
                  tmp___91 = jit->ip;
                  (jit->ip) ++;
                  *tmp___91 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(a1 & 255L);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___2;
              }
            } else {
              _L___2: /* CIL Label */ 
              while (1) {
                tmp___92 = jit->ip;
                (jit->ip) ++;
                *tmp___92 = (unsigned char )(((long )(2 << 6) | (((a3 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                break;
              }
              while (1) {
                imb___5.val = (int )a1;
                tmp___93 = jit->ip;
                (jit->ip) ++;
                *tmp___93 = imb___5.b[0];
                tmp___94 = jit->ip;
                (jit->ip) ++;
                *tmp___94 = imb___5.b[1];
                tmp___95 = jit->ip;
                (jit->ip) ++;
                *tmp___95 = imb___5.b[2];
                tmp___96 = jit->ip;
                (jit->ip) ++;
                *tmp___96 = imb___5.b[3];
                break;
              }
            }
            break;
          }
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      tmp___97 = jit->ip;
      (jit->ip) ++;
      *tmp___97 = (unsigned char)102;
      while (1) {
        if (a3 > 7L) {
          tmp___98 = 4;
        } else {
          tmp___98 = 0;
        }
        if (a2 > 7L) {
          tmp___99 = 2;
        } else {
          tmp___99 = 0;
        }
        if (a1 > 7L) {
          tmp___100 = 1;
        } else {
          tmp___100 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(((8 | tmp___98) | tmp___99) | tmp___100);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___101 = jit->ip;
          (jit->ip) ++;
          *tmp___101 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      tmp___102 = jit->ip;
      (jit->ip) ++;
      *tmp___102 = (unsigned char)15;
      tmp___103 = jit->ip;
      (jit->ip) ++;
      *tmp___103 = (unsigned char)19;
      while (1) {
        if (a1 == -1L) {
          while (1) {
            tmp___104 = jit->ip;
            (jit->ip) ++;
            *tmp___104 = (unsigned char )(((a3 & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___105 = jit->ip;
            (jit->ip) ++;
            *tmp___105 = (unsigned char )(((a2 & 7L) << 3) | 5L);
            break;
          }
          while (1) {
            imb___6.val = 0;
            tmp___106 = jit->ip;
            (jit->ip) ++;
            *tmp___106 = imb___6.b[0];
            tmp___107 = jit->ip;
            (jit->ip) ++;
            *tmp___107 = imb___6.b[1];
            tmp___108 = jit->ip;
            (jit->ip) ++;
            *tmp___108 = imb___6.b[2];
            tmp___109 = jit->ip;
            (jit->ip) ++;
            *tmp___109 = imb___6.b[3];
            break;
          }
        } else
        if (a1 != 5L) {
          while (1) {
            tmp___110 = jit->ip;
            (jit->ip) ++;
            *tmp___110 = (unsigned char )(((a3 & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___111 = jit->ip;
            (jit->ip) ++;
            *tmp___111 = (unsigned char )((((a2 & 7L) & 7L) << 3) | ((a1 & 7L) & 7L));
            break;
          }
        } else {
          while (1) {
            tmp___112 = jit->ip;
            (jit->ip) ++;
            *tmp___112 = (unsigned char )(((long )(1 << 6) | ((a3 & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            tmp___113 = jit->ip;
            (jit->ip) ++;
            *tmp___113 = (unsigned char )((((a2 & 7L) & 7L) << 3) | ((a1 & 7L) & 7L));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)0;
            (jit->ip) ++;
            break;
          }
        }
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_sse_fstx_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_round LOC=UNKNOWN */
static void emit_sse_round(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *branch1 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___6 ;
  int offset ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  x86_imm_buf imb ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *branch2 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___16 ;
  int t ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char rex_correction ;
  unsigned char *pos ;
  int disp ;
  int size ;
  long tmp___23 ;
  long tmp___24 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  long tmp___29 ;
  unsigned char rex_correction___0 ;
  unsigned char *pos___0 ;
  int disp___0 ;
  int size___0 ;
  long tmp___30 ;
  long tmp___31 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  long tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___38 ;
  int tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___45 ;
  int tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;

  {
  while (1) {
    while (1) {
      tmp = jit->ip;
      (jit->ip) ++;
      *tmp = (unsigned char)102;
      while (1) {
        if (a2 > 7L) {
          tmp___0 = 4;
        } else {
          tmp___0 = 0;
        }
        if (a2 > 7L) {
          tmp___1 = 1;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)15;
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)198;
      while (1) {
        while (1) {
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      *(jit->ip) = (unsigned char)0;
      (jit->ip) ++;
      break;
    }
    break;
  }
  sse_alu_pd_reg_safeimm(jit, op, 47, (int )a2, (double *)(& x0));
  branch1 = jit->ip;
  while (1) {
    while (1) {
      _amd64_rex_bits___0 = (unsigned char)8;
      if ((int )_amd64_rex_bits___0 != 0) {
        tmp___6 = jit->ip;
        (jit->ip) ++;
        *tmp___6 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
      }
      break;
    }
    while (1) {
      offset = -2;
      if (offset >= -128) {
        if (offset <= 127) {
          while (1) {
            tmp___8 = jit->ip;
            (jit->ip) ++;
            *tmp___8 = (unsigned char )x86_cc_unsigned_map[2];
            while (1) {
              *(jit->ip) = (unsigned char )(offset & 255);
              (jit->ip) ++;
              break;
            }
            break;
          }
        } else {
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
        offset -= 4;
        while (1) {
          tmp___9 = jit->ip;
          (jit->ip) ++;
          *tmp___9 = (unsigned char)15;
          tmp___11 = jit->ip;
          (jit->ip) ++;
          *tmp___11 = (unsigned char )((int const   )x86_cc_unsigned_map[2] + 16);
          while (1) {
            imb.val = offset;
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = imb.b[0];
            tmp___13 = jit->ip;
            (jit->ip) ++;
            *tmp___13 = imb.b[1];
            tmp___14 = jit->ip;
            (jit->ip) ++;
            *tmp___14 = imb.b[2];
            tmp___15 = jit->ip;
            (jit->ip) ++;
            *tmp___15 = imb.b[3];
            break;
          }
          break;
        }
      }
      break;
    }
    break;
  }
  sse_alu_sd_reg_safeimm(jit, op, 88, (int )a2, (double *)(& x05));
  branch2 = jit->ip;
  while (1) {
    while (1) {
      _amd64_rex_bits___1 = (unsigned char)0;
      if ((int )_amd64_rex_bits___1 != 0) {
        tmp___16 = jit->ip;
        (jit->ip) ++;
        *tmp___16 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
      }
      break;
    }
    while (1) {
      t = -2;
      if (t >= -128) {
        if (t <= 127) {
          while (1) {
            tmp___17 = jit->ip;
            (jit->ip) ++;
            *tmp___17 = (unsigned char)235;
            while (1) {
              *(jit->ip) = (unsigned char )(t & 255);
              (jit->ip) ++;
              break;
            }
            break;
          }
        } else {
          goto _L___0;
        }
      } else {
        _L___0: /* CIL Label */ 
        t -= 3;
        while (1) {
          tmp___18 = jit->ip;
          (jit->ip) ++;
          *tmp___18 = (unsigned char)233;
          while (1) {
            imb___0.val = t;
            tmp___19 = jit->ip;
            (jit->ip) ++;
            *tmp___19 = imb___0.b[0];
            tmp___20 = jit->ip;
            (jit->ip) ++;
            *tmp___20 = imb___0.b[1];
            tmp___21 = jit->ip;
            (jit->ip) ++;
            *tmp___21 = imb___0.b[2];
            tmp___22 = jit->ip;
            (jit->ip) ++;
            *tmp___22 = imb___0.b[3];
            break;
          }
          break;
        }
      }
      break;
    }
    break;
  }
  while (1) {
    rex_correction = (unsigned char)0;
    if (((int )*branch1 & 240) == 64) {
      rex_correction = (unsigned char )((int )rex_correction + 1);
    }
    pos = (branch1 + 1) + (int )rex_correction;
    size = 0;
    switch ((int )*(branch1 + (int )rex_correction)) {
    case 233: 
    case 232: 
    size ++;
    break;
    case 15: 
    if ((int )*pos >= 112) {
      if (! ((int )*pos <= 143)) {
        goto _L___1;
      }
    } else {
      _L___1: /* CIL Label */ 
      tmp___23 = __builtin_expect(1L, 0L);
      if (tmp___23) {
        __assert_rtn("emit_sse_round", "./jitter-amd64.c", 1498, "0");
      }
    }
    size ++;
    pos ++;
    break;
    case 127: 
    case 126: 
    case 125: 
    case 124: 
    case 123: 
    case 122: 
    case 121: 
    case 120: 
    case 119: 
    case 118: 
    case 117: 
    case 116: 
    case 115: 
    case 114: 
    case 113: 
    case 112: 
    case 235: 
    case 226: 
    case 225: 
    case 224: 
    break;
    default: 
    tmp___24 = __builtin_expect(1L, 0L);
    if (tmp___24) {
      __assert_rtn("emit_sse_round", "./jitter-amd64.c", 1498, "0");
    }
    }
    disp = (int )(jit->ip - pos);
    if (size) {
      while (1) {
        imb___1.val = disp - 4;
        tmp___25 = pos;
        pos ++;
        *tmp___25 = imb___1.b[0];
        tmp___26 = pos;
        pos ++;
        *tmp___26 = imb___1.b[1];
        tmp___27 = pos;
        pos ++;
        *tmp___27 = imb___1.b[2];
        tmp___28 = pos;
        pos ++;
        *tmp___28 = imb___1.b[3];
        break;
      }
    } else
    if (disp - 1 >= -128) {
      if (disp - 1 <= 127) {
        while (1) {
          *pos = (unsigned char )((disp - 1) & 255);
          pos ++;
          break;
        }
      } else {
        goto _L___2;
      }
    } else {
      _L___2: /* CIL Label */ 
      tmp___29 = __builtin_expect(1L, 0L);
      if (tmp___29) {
        __assert_rtn("emit_sse_round", "./jitter-amd64.c", 1498, "0");
      }
    }
    break;
  }
  sse_alu_sd_reg_safeimm(jit, op, 92, (int )a2, (double *)(& x05));
  while (1) {
    rex_correction___0 = (unsigned char)0;
    if (((int )*branch2 & 240) == 64) {
      rex_correction___0 = (unsigned char )((int )rex_correction___0 + 1);
    }
    pos___0 = (branch2 + 1) + (int )rex_correction___0;
    size___0 = 0;
    switch ((int )*(branch2 + (int )rex_correction___0)) {
    case 233: 
    case 232: 
    size___0 ++;
    break;
    case 15: 
    if ((int )*pos___0 >= 112) {
      if (! ((int )*pos___0 <= 143)) {
        goto _L___3;
      }
    } else {
      _L___3: /* CIL Label */ 
      tmp___30 = __builtin_expect(1L, 0L);
      if (tmp___30) {
        __assert_rtn("emit_sse_round", "./jitter-amd64.c", 1501, "0");
      }
    }
    size___0 ++;
    pos___0 ++;
    break;
    case 127: 
    case 126: 
    case 125: 
    case 124: 
    case 123: 
    case 122: 
    case 121: 
    case 120: 
    case 119: 
    case 118: 
    case 117: 
    case 116: 
    case 115: 
    case 114: 
    case 113: 
    case 112: 
    case 235: 
    case 226: 
    case 225: 
    case 224: 
    break;
    default: 
    tmp___31 = __builtin_expect(1L, 0L);
    if (tmp___31) {
      __assert_rtn("emit_sse_round", "./jitter-amd64.c", 1501, "0");
    }
    }
    disp___0 = (int )(jit->ip - pos___0);
    if (size___0) {
      while (1) {
        imb___2.val = disp___0 - 4;
        tmp___32 = pos___0;
        pos___0 ++;
        *tmp___32 = imb___2.b[0];
        tmp___33 = pos___0;
        pos___0 ++;
        *tmp___33 = imb___2.b[1];
        tmp___34 = pos___0;
        pos___0 ++;
        *tmp___34 = imb___2.b[2];
        tmp___35 = pos___0;
        pos___0 ++;
        *tmp___35 = imb___2.b[3];
        break;
      }
    } else
    if (disp___0 - 1 >= -128) {
      if (disp___0 - 1 <= 127) {
        while (1) {
          *pos___0 = (unsigned char )((disp___0 - 1) & 255);
          pos___0 ++;
          break;
        }
      } else {
        goto _L___4;
      }
    } else {
      _L___4: /* CIL Label */ 
      tmp___36 = __builtin_expect(1L, 0L);
      if (tmp___36) {
        __assert_rtn("emit_sse_round", "./jitter-amd64.c", 1501, "0");
      }
    }
    break;
  }
  while (1) {
    tmp___37 = jit->ip;
    (jit->ip) ++;
    *tmp___37 = (unsigned char)242;
    while (1) {
      if (a1 > 7L) {
        tmp___38 = 4;
      } else {
        tmp___38 = 0;
      }
      if (a2 > 7L) {
        tmp___39 = 1;
      } else {
        tmp___39 = 0;
      }
      _amd64_rex_bits___2 = (unsigned char )((8 | tmp___38) | tmp___39);
      if ((int )_amd64_rex_bits___2 != 0) {
        tmp___40 = jit->ip;
        (jit->ip) ++;
        *tmp___40 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
      }
      break;
    }
    tmp___41 = jit->ip;
    (jit->ip) ++;
    *tmp___41 = (unsigned char)15;
    tmp___42 = jit->ip;
    (jit->ip) ++;
    *tmp___42 = (unsigned char)44;
    while (1) {
      while (1) {
        tmp___43 = jit->ip;
        (jit->ip) ++;
        *tmp___43 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
        break;
      }
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      tmp___44 = jit->ip;
      (jit->ip) ++;
      *tmp___44 = (unsigned char)102;
      while (1) {
        if (a2 > 7L) {
          tmp___45 = 4;
        } else {
          tmp___45 = 0;
        }
        if (a2 > 7L) {
          tmp___46 = 1;
        } else {
          tmp___46 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )(tmp___45 | tmp___46);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___47 = jit->ip;
          (jit->ip) ++;
          *tmp___47 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      tmp___48 = jit->ip;
      (jit->ip) ++;
      *tmp___48 = (unsigned char)15;
      tmp___49 = jit->ip;
      (jit->ip) ++;
      *tmp___49 = (unsigned char)198;
      while (1) {
        while (1) {
          tmp___50 = jit->ip;
          (jit->ip) ++;
          *tmp___50 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      *(jit->ip) = (unsigned char)1;
      (jit->ip) ++;
      break;
    }
    break;
  }
  return;
}
}
/* END FUNCTION-DEF emit_sse_round LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF __darwin_fd_set LOC=UNKNOWN */
__inline extern void ( __attribute__((__always_inline__)) __darwin_fd_set)(int _fd ,
                                                                           struct fd_set * const  _p ) 
{ 
  int tmp ;

  {
  tmp = __darwin_check_fd_set(_fd, (void const   *)_p);
  if (tmp) {
    _p->fds_bits[(unsigned long )_fd / (sizeof(__int32_t ) * 8UL)] |= (__int32_t )(1UL << (unsigned long )_fd % (sizeof(__int32_t ) * 8UL));
  }
  return;
}
}
/* END FUNCTION-DEF __darwin_fd_set LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF __darwin_check_fd_set LOC=UNKNOWN */
__inline extern int ( __attribute__((__always_inline__)) __darwin_check_fd_set)(int _a ,
                                                                                void const   *_b ) 
{ 
  int tmp ;

  {
  if ((uintptr_t )(& __darwin_check_fd_set_overflow) != 0UL) {
    tmp = __darwin_check_fd_set_overflow(_a, _b, 0);
    return (tmp);
  } else {
    return (1);
  }
}
}
/* END FUNCTION-DEF __darwin_check_fd_set LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_set_free LOC=UNKNOWN */
__inline static void jit_set_free(jit_set *s ) 
{ 


  {
  jit_tree_free(s->root);
  free((void *)s);
  return;
}
}
/* END FUNCTION-DEF jit_set_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_correct_long_imms LOC=UNKNOWN */
static void jit_correct_long_imms(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  int imm_arg ;
  int i ;
  jit_value value ;
  jit_op *newop ;
  struct jit_op *tmp___0 ;
  int tmp___1 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    if (! ((int )op->code & 2)) {
      goto __Cont;
    }
    if (op->fp) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 336U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 648U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 760U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 616U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 344U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 416U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 640U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 200U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 104U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 512U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 856U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 680U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 56U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 384U) {
      goto __Cont;
    }
    i = 1;
    while (i < 4) {
      if ((((int )op->spec >> (i - 1) * 2) & 3) == 2) {
        imm_arg = i - 1;
      }
      i ++;
    }
    value = op->arg[imm_arg];
    tmp___1 = jit_imm_overflow(jit, op, value);
    if (tmp___1) {
      tmp___0 = jit_op_new((unsigned short)618, (unsigned char )((2 << 2) | 3), (long )(1 << 1),
                           value, 0L, (unsigned char )sizeof(void *));
      newop = tmp___0;
      jit_op_prepend(op, newop);
      op->code = (unsigned short )((int )op->code & -4);
      op->code = (unsigned short )((int )op->code | 1);
      op->spec = (unsigned char )((int )op->spec & ~ (3 << 2 * imm_arg));
      op->spec = (unsigned char )((int )op->spec | (1 << 2 * imm_arg));
      op->arg[imm_arg] = (jit_value )(1 << 1);
    }
    __Cont: /* CIL Label */ 
    op = op->next;
  }
  return;
}
}
/* END FUNCTION-DEF jit_correct_long_imms LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isphonogram LOC=UNKNOWN */
__inline extern int isphonogram(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 2097152UL);
  return (tmp);
}
}
/* END FUNCTION-DEF isphonogram LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF shift_index LOC=UNKNOWN */
static int shift_index(int arg ) 
{ 
  long tmp ;

  {
  if (arg == 2) {
    return (1);
  }
  if (arg == 4) {
    return (2);
  }
  if (arg == 8) {
    return (3);
  }
  tmp = __builtin_expect(1L, 0L);
  if (tmp) {
    __assert_rtn("shift_index", "./jitter-amd64.c", 1896, "0");
  }
  return (0);
}
}
/* END FUNCTION-DEF shift_index LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF spill_ret_retreg LOC=UNKNOWN */
static void spill_ret_retreg(jit_op *op , jit_hw_reg *ret_reg ) 
{ 
  jit_value r ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp ;

  {
  if (ret_reg) {
    tmp = rmap_is_associated(op->regmap, ret_reg->id, (int )ret_reg->fp, & r);
    hreg = tmp;
    if (hreg) {
      rmap_unassoc(op->regmap, r);
    }
  }
  return;
}
}
/* END FUNCTION-DEF spill_ret_retreg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_disable_optimization LOC=UNKNOWN */
void jit_disable_optimization(struct jit *jit , int opt ) 
{ 


  {
  jit->optimizations &= (unsigned int )(~ opt);
  return;
}
}
/* END FUNCTION-DEF jit_disable_optimization LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rotate_right LOC=UNKNOWN */
__inline static jit_tree *rotate_right(jit_tree *h ) 
{ 
  jit_tree *x ;

  {
  x = h->left;
  h->left = x->right;
  x->right = h;
  x->color = (x->right)->color;
  (x->right)->color = 1;
  return (x);
}
}
/* END FUNCTION-DEF rotate_right LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_optimize_unused_assignments LOC=UNKNOWN */
void jit_optimize_unused_assignments(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  int tmp___0 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    if (((int )op->spec & 3) == 3) {
      if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 464U) {
        goto __Cont;
      } else
      if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 888U) {
        goto __Cont;
      } else
      if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 328U) {
        goto __Cont;
      } else
      if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 192U) {
        goto __Cont;
      }
      tmp___0 = jit_set_get(op->live_out, (int )op->arg[0]);
      if (! tmp___0) {
        op->code = (unsigned short)392;
        op->spec = (unsigned char)0;
      }
    }
    __Cont: /* CIL Label */ 
    op = op->next;
  }
  return;
}
}
/* END FUNCTION-DEF jit_optimize_unused_assignments LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_regs_active LOC=UNKNOWN */
void jit_regs_active(jit_op *op , jit_value *dest ) 
{ 


  {
  jit_set_to_array(op->live_out, dest);
  return;
}
}
/* END FUNCTION-DEF jit_regs_active LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_proc_value LOC=UNKNOWN */
__inline static jit_value jit_proc_value(void (*f)(void) ) 
{ 
  union jit_proc_value_alias alias ;

  {
  alias.ptr = (void (*)())f;
  return (alias.num);
}
}
/* END FUNCTION-DEF jit_proc_value LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF assign_ret_reg LOC=UNKNOWN */
static int assign_ret_reg(jit_op *op , jit_hw_reg *ret_reg ) 
{ 


  {
  rmap_assoc(op->regmap, op->arg[0], ret_reg);
  return (1);
}
}
/* END FUNCTION-DEF assign_ret_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_set_addall LOC=UNKNOWN */
__inline static void jit_set_addall(jit_set *target , jit_set *s ) 
{ 


  {
  target->root = jit_tree_addall(target->root, s->root);
  return;
}
}
/* END FUNCTION-DEF jit_set_addall LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_optimize_frame_ptr LOC=UNKNOWN */
void jit_optimize_frame_ptr(struct jit *jit ) 
{ 
  struct jit_func_info *info ;
  int uses_frame_ptr ;
  jit_op *op ;
  jit_op *tmp ;

  {
  if (! (jit->optimizations & 1U)) {
    return;
  }
  info = (struct jit_func_info *)((void *)0);
  uses_frame_ptr = 0;
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while (1) {
    if (! op) {
      goto _L;
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 384U) {
      _L: /* CIL Label */ 
      if (info) {
        if (! uses_frame_ptr) {
          info->has_prolog = 0;
          uses_frame_ptr = 0;
        }
      }
      if (op) {
        info = (struct jit_func_info *)op->arg[1];
      }
    }
    if (! op) {
      break;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 520U) {
      uses_frame_ptr |= 1;
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 400U) {
      uses_frame_ptr |= 1;
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 800U) {
      uses_frame_ptr |= 1;
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 160U) {
      uses_frame_ptr |= 1;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 808U) {
      if (op->arg[0] == 2L) {
        if ((unsigned long )op->arg[1] == sizeof(float )) {
          uses_frame_ptr |= 1;
        }
      }
    }
    op = op->next;
  }
  return;
}
}
/* END FUNCTION-DEF jit_optimize_frame_ptr LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_op_delete LOC=UNKNOWN */
__inline static void jit_op_delete(jit_op *op ) 
{ 


  {
  (op->prev)->next = op->next;
  if (op->next) {
    (op->next)->prev = op->prev;
  }
  jit_free_op(op);
  return;
}
}
/* END FUNCTION-DEF jit_op_delete LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_lreg LOC=UNKNOWN */
static void emit_lreg(struct jit *jit , int hreg_id , jit_value vreg ) 
{ 
  int stack_pos ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___28 ;
  int tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  long tmp___33 ;
  unsigned char *tmp___34 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;

  {
  tmp = stack_reg_pos(jit, (int )vreg);
  stack_pos = tmp;
  if ((vreg & 1L) == 1L) {
    while (1) {
      tmp___0 = jit->ip;
      (jit->ip) ++;
      *tmp___0 = (unsigned char)102;
      while (1) {
        if (hreg_id > 7) {
          tmp___1 = 4;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )tmp___1;
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)15;
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)18;
      while (1) {
        while (1) {
          if (0) {
            if (stack_pos == 0) {
              while (1) {
                tmp___10 = jit->ip;
                (jit->ip) ++;
                *tmp___10 = (unsigned char )((((hreg_id & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___11 = jit->ip;
                (jit->ip) ++;
                *tmp___11 = (unsigned char )((4 << 3) | 4);
                break;
              }
            } else
            if (stack_pos >= -128) {
              if (stack_pos <= 127) {
                while (1) {
                  tmp___12 = jit->ip;
                  (jit->ip) ++;
                  *tmp___12 = (unsigned char )(((1 << 6) | (((hreg_id & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___13 = jit->ip;
                  (jit->ip) ++;
                  *tmp___13 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(stack_pos & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L;
              }
            } else {
              _L: /* CIL Label */ 
              while (1) {
                tmp___14 = jit->ip;
                (jit->ip) ++;
                *tmp___14 = (unsigned char )(((2 << 6) | (((hreg_id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___15 = jit->ip;
                (jit->ip) ++;
                *tmp___15 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                imb___0.val = stack_pos;
                tmp___16 = jit->ip;
                (jit->ip) ++;
                *tmp___16 = imb___0.b[0];
                tmp___17 = jit->ip;
                (jit->ip) ++;
                *tmp___17 = imb___0.b[1];
                tmp___18 = jit->ip;
                (jit->ip) ++;
                *tmp___18 = imb___0.b[2];
                tmp___19 = jit->ip;
                (jit->ip) ++;
                *tmp___19 = imb___0.b[3];
                break;
              }
            }
            break;
          }
          if (stack_pos == 0) {

          }
          if (stack_pos >= -128) {
            if (stack_pos <= 127) {
              while (1) {
                tmp___21 = jit->ip;
                (jit->ip) ++;
                *tmp___21 = (unsigned char )(((1 << 6) | (((hreg_id & 7) & 7) << 3)) | 5);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(stack_pos & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___0;
            }
          } else {
            _L___0: /* CIL Label */ 
            while (1) {
              tmp___22 = jit->ip;
              (jit->ip) ++;
              *tmp___22 = (unsigned char )(((2 << 6) | (((hreg_id & 7) & 7) << 3)) | 5);
              break;
            }
            while (1) {
              imb___1.val = stack_pos;
              tmp___23 = jit->ip;
              (jit->ip) ++;
              *tmp___23 = imb___1.b[0];
              tmp___24 = jit->ip;
              (jit->ip) ++;
              *tmp___24 = imb___1.b[1];
              tmp___25 = jit->ip;
              (jit->ip) ++;
              *tmp___25 = imb___1.b[2];
              tmp___26 = jit->ip;
              (jit->ip) ++;
              *tmp___26 = imb___1.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___27 = jit->ip;
        (jit->ip) ++;
        *tmp___27 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___28 = 8;
        } else {
          tmp___28 = 0;
        }
        if (hreg_id > 7) {
          tmp___29 = 4;
        } else {
          tmp___29 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(tmp___28 | tmp___29);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___31 = jit->ip;
      (jit->ip) ++;
      *tmp___31 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___32 = jit->ip;
      (jit->ip) ++;
      *tmp___32 = (unsigned char)139;
      break;
      default: 
      tmp___33 = __builtin_expect(1L, 0L);
      if (tmp___33) {
        __assert_rtn("emit_lreg", "./jitter-amd64.c", 2625, "0");
      }
      }
      while (1) {
        while (1) {
          if (0) {
            if (stack_pos == 0) {
              while (1) {
                tmp___39 = jit->ip;
                (jit->ip) ++;
                *tmp___39 = (unsigned char )((((hreg_id & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___40 = jit->ip;
                (jit->ip) ++;
                *tmp___40 = (unsigned char )((4 << 3) | 4);
                break;
              }
            } else
            if (stack_pos >= -128) {
              if (stack_pos <= 127) {
                while (1) {
                  tmp___41 = jit->ip;
                  (jit->ip) ++;
                  *tmp___41 = (unsigned char )(((1 << 6) | (((hreg_id & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___42 = jit->ip;
                  (jit->ip) ++;
                  *tmp___42 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(stack_pos & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___1;
              }
            } else {
              _L___1: /* CIL Label */ 
              while (1) {
                tmp___43 = jit->ip;
                (jit->ip) ++;
                *tmp___43 = (unsigned char )(((2 << 6) | (((hreg_id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___44 = jit->ip;
                (jit->ip) ++;
                *tmp___44 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                imb___3.val = stack_pos;
                tmp___45 = jit->ip;
                (jit->ip) ++;
                *tmp___45 = imb___3.b[0];
                tmp___46 = jit->ip;
                (jit->ip) ++;
                *tmp___46 = imb___3.b[1];
                tmp___47 = jit->ip;
                (jit->ip) ++;
                *tmp___47 = imb___3.b[2];
                tmp___48 = jit->ip;
                (jit->ip) ++;
                *tmp___48 = imb___3.b[3];
                break;
              }
            }
            break;
          }
          if (stack_pos == 0) {

          }
          if (stack_pos >= -128) {
            if (stack_pos <= 127) {
              while (1) {
                tmp___50 = jit->ip;
                (jit->ip) ++;
                *tmp___50 = (unsigned char )(((1 << 6) | (((hreg_id & 7) & 7) << 3)) | 5);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(stack_pos & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___2;
            }
          } else {
            _L___2: /* CIL Label */ 
            while (1) {
              tmp___51 = jit->ip;
              (jit->ip) ++;
              *tmp___51 = (unsigned char )(((2 << 6) | (((hreg_id & 7) & 7) << 3)) | 5);
              break;
            }
            while (1) {
              imb___4.val = stack_pos;
              tmp___52 = jit->ip;
              (jit->ip) ++;
              *tmp___52 = imb___4.b[0];
              tmp___53 = jit->ip;
              (jit->ip) ++;
              *tmp___53 = imb___4.b[1];
              tmp___54 = jit->ip;
              (jit->ip) ++;
              *tmp___54 = imb___4.b[2];
              tmp___55 = jit->ip;
              (jit->ip) ++;
              *tmp___55 = imb___4.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_lreg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isblank LOC=UNKNOWN */
__inline extern int isblank(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 131072UL);
  return (tmp);
}
}
/* END FUNCTION-DEF isblank LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_fst_op LOC=UNKNOWN */
static void emit_sse_fst_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) 
{ 
  int live ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  x86_imm_buf imb ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___26 ;
  int tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___49 ;
  int tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___67 ;
  jit_value tmp___68 ;
  int tmp___69 ;
  jit_value tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;

  {
  if ((unsigned long )op->arg_size == sizeof(float )) {
    tmp = jit_set_get(op->live_out, (int )op->arg[1]);
    live = tmp;
    if (live) {
      while (1) {
        while (1) {
          tmp___0 = jit->ip;
          (jit->ip) ++;
          *tmp___0 = (unsigned char)102;
          while (1) {
            if (a2 > 7L) {
              tmp___1 = 4;
            } else {
              tmp___1 = 0;
            }
            if (a2 > 7L) {
              tmp___2 = 1;
            } else {
              tmp___2 = 0;
            }
            _amd64_rex_bits = (unsigned char )(tmp___1 | tmp___2);
            if ((int )_amd64_rex_bits != 0) {
              tmp___3 = jit->ip;
              (jit->ip) ++;
              *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___4 = jit->ip;
          (jit->ip) ++;
          *tmp___4 = (unsigned char)15;
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char)198;
          while (1) {
            while (1) {
              tmp___6 = jit->ip;
              (jit->ip) ++;
              *tmp___6 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
              break;
            }
            break;
          }
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)0;
          (jit->ip) ++;
          break;
        }
        break;
      }
    }
    while (1) {
      tmp___7 = jit->ip;
      (jit->ip) ++;
      *tmp___7 = (unsigned char)242;
      while (1) {
        if (a2 > 7L) {
          tmp___8 = 4;
        } else {
          tmp___8 = 0;
        }
        if (a2 > 7L) {
          tmp___9 = 1;
        } else {
          tmp___9 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(tmp___8 | tmp___9);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___10 = jit->ip;
          (jit->ip) ++;
          *tmp___10 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      tmp___11 = jit->ip;
      (jit->ip) ++;
      *tmp___11 = (unsigned char)15;
      tmp___12 = jit->ip;
      (jit->ip) ++;
      *tmp___12 = (unsigned char)90;
      while (1) {
        while (1) {
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
    if ((int )op->code & 2) {
      while (1) {
        tmp___14 = jit->ip;
        (jit->ip) ++;
        *tmp___14 = (unsigned char)243;
        while (1) {
          if (a2 > 7L) {
            tmp___15 = 4;
          } else {
            tmp___15 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )tmp___15;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___16 = jit->ip;
            (jit->ip) ++;
            *tmp___16 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___17 = jit->ip;
        (jit->ip) ++;
        *tmp___17 = (unsigned char)15;
        tmp___18 = jit->ip;
        (jit->ip) ++;
        *tmp___18 = (unsigned char)17;
        while (1) {
          tmp___19 = jit->ip;
          (jit->ip) ++;
          *tmp___19 = (unsigned char )(((a2 & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___20 = jit->ip;
          (jit->ip) ++;
          *tmp___20 = (unsigned char )((4 << 3) | 5);
          break;
        }
        while (1) {
          imb.val = (int )a1;
          tmp___21 = jit->ip;
          (jit->ip) ++;
          *tmp___21 = imb.b[0];
          tmp___22 = jit->ip;
          (jit->ip) ++;
          *tmp___22 = imb.b[1];
          tmp___23 = jit->ip;
          (jit->ip) ++;
          *tmp___23 = imb.b[2];
          tmp___24 = jit->ip;
          (jit->ip) ++;
          *tmp___24 = imb.b[3];
          break;
        }
        break;
      }
    } else {
      while (1) {
        tmp___25 = jit->ip;
        (jit->ip) ++;
        *tmp___25 = (unsigned char)243;
        while (1) {
          if (a2 > 7L) {
            tmp___26 = 4;
          } else {
            tmp___26 = 0;
          }
          if (a1 > 7L) {
            tmp___27 = 1;
          } else {
            tmp___27 = 0;
          }
          _amd64_rex_bits___2 = (unsigned char )(tmp___26 | tmp___27);
          if ((int )_amd64_rex_bits___2 != 0) {
            tmp___28 = jit->ip;
            (jit->ip) ++;
            *tmp___28 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
          }
          break;
        }
        tmp___29 = jit->ip;
        (jit->ip) ++;
        *tmp___29 = (unsigned char)15;
        tmp___30 = jit->ip;
        (jit->ip) ++;
        *tmp___30 = (unsigned char)17;
        while (1) {
          if ((a1 & 7L) == 4L) {
            while (1) {
              tmp___31 = jit->ip;
              (jit->ip) ++;
              *tmp___31 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___32 = jit->ip;
              (jit->ip) ++;
              *tmp___32 = (unsigned char )((4 << 3) | 4);
              break;
            }
            break;
          }
          if ((a1 & 7L) != 5L) {
            while (1) {
              tmp___41 = jit->ip;
              (jit->ip) ++;
              *tmp___41 = (unsigned char )((((a2 & 7L) & 7L) << 3) | ((a1 & 7L) & 7L));
              break;
            }
            break;
          }
          while (1) {
            tmp___42 = jit->ip;
            (jit->ip) ++;
            *tmp___42 = (unsigned char )(((long )(1 << 6) | (((a2 & 7L) & 7L) << 3)) | ((a1 & 7L) & 7L));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)0;
            (jit->ip) ++;
            break;
          }
          break;
        }
        break;
      }
    }
    if (live) {
      while (1) {
        while (1) {
          tmp___48 = jit->ip;
          (jit->ip) ++;
          *tmp___48 = (unsigned char)102;
          while (1) {
            if (a2 > 7L) {
              tmp___49 = 4;
            } else {
              tmp___49 = 0;
            }
            if (a2 > 7L) {
              tmp___50 = 1;
            } else {
              tmp___50 = 0;
            }
            _amd64_rex_bits___3 = (unsigned char )(tmp___49 | tmp___50);
            if ((int )_amd64_rex_bits___3 != 0) {
              tmp___51 = jit->ip;
              (jit->ip) ++;
              *tmp___51 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
            }
            break;
          }
          tmp___52 = jit->ip;
          (jit->ip) ++;
          *tmp___52 = (unsigned char)15;
          tmp___53 = jit->ip;
          (jit->ip) ++;
          *tmp___53 = (unsigned char)198;
          while (1) {
            while (1) {
              tmp___54 = jit->ip;
              (jit->ip) ++;
              *tmp___54 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
              break;
            }
            break;
          }
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)1;
          (jit->ip) ++;
          break;
        }
        break;
      }
    }
  } else
  if ((int )op->code & 2) {
    while (1) {
      tmp___55 = jit->ip;
      (jit->ip) ++;
      *tmp___55 = (unsigned char)102;
      while (1) {
        if (a2 > 7L) {
          tmp___56 = 4;
        } else {
          tmp___56 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )tmp___56;
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___57 = jit->ip;
          (jit->ip) ++;
          *tmp___57 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      tmp___58 = jit->ip;
      (jit->ip) ++;
      *tmp___58 = (unsigned char)15;
      tmp___59 = jit->ip;
      (jit->ip) ++;
      *tmp___59 = (unsigned char)19;
      while (1) {
        tmp___60 = jit->ip;
        (jit->ip) ++;
        *tmp___60 = (unsigned char )(((a2 & 7L) << 3) | 4L);
        break;
      }
      while (1) {
        tmp___61 = jit->ip;
        (jit->ip) ++;
        *tmp___61 = (unsigned char )((4 << 3) | 5);
        break;
      }
      while (1) {
        imb___2.val = (int )a1;
        tmp___62 = jit->ip;
        (jit->ip) ++;
        *tmp___62 = imb___2.b[0];
        tmp___63 = jit->ip;
        (jit->ip) ++;
        *tmp___63 = imb___2.b[1];
        tmp___64 = jit->ip;
        (jit->ip) ++;
        *tmp___64 = imb___2.b[2];
        tmp___65 = jit->ip;
        (jit->ip) ++;
        *tmp___65 = imb___2.b[3];
        break;
      }
      break;
    }
  } else {
    while (1) {
      tmp___66 = jit->ip;
      (jit->ip) ++;
      *tmp___66 = (unsigned char)102;
      while (1) {
        if (a2 > 7L) {
          tmp___67 = 4;
        } else {
          tmp___67 = 0;
        }
        if (a1 == 16L) {
          tmp___70 = (jit_value )0;
        } else {
          tmp___70 = a1;
        }
        if (tmp___70 > 7L) {
          tmp___69 = 1;
        } else {
          tmp___69 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(tmp___67 | tmp___69);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___71 = jit->ip;
          (jit->ip) ++;
          *tmp___71 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      tmp___72 = jit->ip;
      (jit->ip) ++;
      *tmp___72 = (unsigned char)15;
      tmp___73 = jit->ip;
      (jit->ip) ++;
      *tmp___73 = (unsigned char)19;
      while (1) {
        if (a1 == 16L) {
          while (1) {
            tmp___74 = jit->ip;
            (jit->ip) ++;
            *tmp___74 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 5L);
            break;
          }
          while (1) {
            imb___3.val = 0;
            tmp___75 = jit->ip;
            (jit->ip) ++;
            *tmp___75 = imb___3.b[0];
            tmp___76 = jit->ip;
            (jit->ip) ++;
            *tmp___76 = imb___3.b[1];
            tmp___77 = jit->ip;
            (jit->ip) ++;
            *tmp___77 = imb___3.b[2];
            tmp___78 = jit->ip;
            (jit->ip) ++;
            *tmp___78 = imb___3.b[3];
            break;
          }
        } else {
          while (1) {
            if ((a1 & 7L) == 4L) {
              while (1) {
                tmp___79 = jit->ip;
                (jit->ip) ++;
                *tmp___79 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___80 = jit->ip;
                (jit->ip) ++;
                *tmp___80 = (unsigned char )((4 << 3) | 4);
                break;
              }
              break;
            }
            if ((a1 & 7L) != 5L) {
              while (1) {
                tmp___89 = jit->ip;
                (jit->ip) ++;
                *tmp___89 = (unsigned char )((((a2 & 7L) & 7L) << 3) | ((a1 & 7L) & 7L));
                break;
              }
              break;
            }
            while (1) {
              tmp___90 = jit->ip;
              (jit->ip) ++;
              *tmp___90 = (unsigned char )(((long )(1 << 6) | (((a2 & 7L) & 7L) << 3)) | ((a1 & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)0;
              (jit->ip) ++;
              break;
            }
            break;
          }
        }
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_sse_fst_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF _OSSwapInt16 LOC=UNKNOWN */
__inline static __uint16_t _OSSwapInt16(__uint16_t _data ) 
{ 


  {
  return ((__uint16_t )(((int )_data << 8) | ((int )_data >> 8)));
}
}
/* END FUNCTION-DEF _OSSwapInt16 LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_transfer_init LOC=UNKNOWN */
static void emit_transfer_init(struct jit *jit , jit_op *op , jit_value destreg ,
                               jit_value srcreg , jit_value cnt , int block_size ) 
{ 
  struct transfer_info *tinf ;
  void *tmp ;
  jit_hw_reg *scrap ;
  jit_hw_reg *tmp___0 ;
  int i ;
  jit_hw_reg *r ;
  jit_hw_reg *counter ;
  jit_hw_reg *tmp___1 ;
  int i___0 ;
  jit_hw_reg *r___0 ;
  jit_hw_reg *counter___0 ;
  jit_hw_reg *tmp___2 ;
  int tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char _amd64_rex_bits ;
  int tmp___5 ;
  int tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  long tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  x86_imm_buf imb ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___29 ;
  int tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  long tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___52 ;
  int tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  amd64_imm_buf imb___3 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  int shift ;
  long tmp___68 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___69 ;
  int tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___89 ;
  int tmp___90 ;
  int tmp___91 ;
  int tmp___92 ;
  unsigned char *tmp___93 ;
  int tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  long tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___115 ;
  int tmp___116 ;
  int tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char *tmp___119 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___122 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  unsigned char *tmp___125 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char *tmp___128 ;
  unsigned char *tmp___129 ;
  unsigned char *tmp___130 ;
  unsigned char *tmp___131 ;
  x86_imm_buf imb___10 ;
  unsigned char *tmp___132 ;
  unsigned char *tmp___133 ;
  unsigned char *tmp___134 ;
  unsigned char *tmp___135 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___136 ;
  int tmp___137 ;
  int tmp___138 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  unsigned char *tmp___141 ;
  unsigned char *tmp___142 ;
  long tmp___143 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  x86_imm_buf imb___11 ;
  unsigned char *tmp___146 ;
  unsigned char *tmp___147 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;
  unsigned char *tmp___150 ;
  unsigned char *tmp___151 ;
  unsigned char *tmp___152 ;
  unsigned char *tmp___153 ;
  unsigned char *tmp___154 ;
  unsigned char *tmp___155 ;
  x86_imm_buf imb___12 ;
  unsigned char *tmp___156 ;
  unsigned char *tmp___157 ;
  unsigned char *tmp___158 ;
  unsigned char *tmp___159 ;

  {
  tmp = malloc(sizeof(struct transfer_info ));
  tinf = (struct transfer_info *)tmp;
  tinf->sourcereg = (int )srcreg;
  tinf->destreg = (int )destreg;
  tinf->block_size = block_size;
  tmp___0 = jit_get_unused_reg_with_index(jit->reg_al, op, 0, 0);
  scrap = tmp___0;
  if (scrap) {
    tinf->scrapreg = scrap->id;
  } else {
    i = 0;
    while (i < (jit->reg_al)->gp_reg_cnt) {
      r = (jit->reg_al)->gp_regs + i;
      if ((jit_value )r->id != srcreg) {
        if ((jit_value )r->id != destreg) {
          if (! ((int )op->code & 2)) {
            if ((jit_value )r->id != cnt) {
              tinf->scrapreg = r->id;
              break;
            }
          }
        }
      }
      i ++;
    }
  }
  tinf->scrap_in_use = jit_reg_in_use(op, tinf->scrapreg, 0);
  if ((int )op->code & 2) {
    tmp___1 = jit_get_unused_reg_with_index(jit->reg_al, op, 0, 1);
    counter = tmp___1;
    if (counter) {
      tinf->counterreg = counter->id;
    } else {
      i___0 = 0;
      while (i___0 < (jit->reg_al)->gp_reg_cnt) {
        r___0 = (jit->reg_al)->gp_regs + i___0;
        if ((jit_value )r___0->id != srcreg) {
          if ((jit_value )r___0->id != destreg) {
            if (r___0->id != tinf->scrapreg) {
              tinf->counterreg = r___0->id;
              break;
            }
          }
        }
        i___0 ++;
      }
    }
    tinf->counter_in_use = jit_reg_in_use(op, tinf->counterreg, 0);
  } else {
    tmp___3 = jit_set_get(op->live_out, (int )op->arg[2]);
    if (tmp___3) {
      tmp___2 = jit_get_unused_reg_with_index(jit->reg_al, op, 0, 1);
      counter___0 = tmp___2;
      if (counter___0) {
        tinf->counterreg = counter___0->id;
      } else {
        tinf->counterreg = (int )cnt;
      }
      tinf->counter_in_use = jit_reg_in_use(op, tinf->counterreg, 0);
    } else {
      tinf->counterreg = (int )cnt;
      tinf->counter_in_use = 0;
    }
  }
  if (tinf->counter_in_use) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___5 = 8;
        } else {
          tmp___5 = 0;
        }
        if (tinf->counterreg > 7) {
          tmp___6 = 4;
        } else {
          tmp___6 = 0;
        }
        _amd64_rex_bits = (unsigned char )(tmp___5 | tmp___6);
        if ((int )_amd64_rex_bits != 0) {
          tmp___7 = jit->ip;
          (jit->ip) ++;
          *tmp___7 = (unsigned char )(64 | (int )_amd64_rex_bits);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___7 = jit->ip;
          (jit->ip) ++;
          *tmp___7 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___8 = jit->ip;
      (jit->ip) ++;
      *tmp___8 = (unsigned char)136;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___9 = jit->ip;
      (jit->ip) ++;
      *tmp___9 = (unsigned char)137;
      break;
      default: 
      tmp___10 = __builtin_expect(1L, 0L);
      if (tmp___10) {
        __assert_rtn("emit_transfer_init", "./jitter-amd64.c", 3120, "0");
      }
      }
      while (1) {
        if (- sizeof(void *) == 0UL) {
          while (1) {
            tmp___11 = jit->ip;
            (jit->ip) ++;
            *tmp___11 = (unsigned char )((((tinf->counterreg & 7) & 7) << 3) | 4);
            break;
          }
          while (1) {
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = (unsigned char )((4 << 3) | 4);
            break;
          }
        } else
        if ((int )(- sizeof(void *)) >= -128) {
          if ((int )(- sizeof(void *)) <= 127) {
            while (1) {
              tmp___13 = jit->ip;
              (jit->ip) ++;
              *tmp___13 = (unsigned char )(((1 << 6) | (((tinf->counterreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___14 = jit->ip;
              (jit->ip) ++;
              *tmp___14 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- sizeof(void *) & 255UL);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L;
          }
        } else {
          _L: /* CIL Label */ 
          while (1) {
            tmp___15 = jit->ip;
            (jit->ip) ++;
            *tmp___15 = (unsigned char )(((2 << 6) | (((tinf->counterreg & 7) & 7) << 3)) | 4);
            break;
          }
          while (1) {
            tmp___16 = jit->ip;
            (jit->ip) ++;
            *tmp___16 = (unsigned char )((4 << 3) | 4);
            break;
          }
          while (1) {
            imb.val = (int )(- sizeof(void *));
            tmp___17 = jit->ip;
            (jit->ip) ++;
            *tmp___17 = imb.b[0];
            tmp___18 = jit->ip;
            (jit->ip) ++;
            *tmp___18 = imb.b[1];
            tmp___19 = jit->ip;
            (jit->ip) ++;
            *tmp___19 = imb.b[2];
            tmp___20 = jit->ip;
            (jit->ip) ++;
            *tmp___20 = imb.b[3];
            break;
          }
        }
        break;
        if (- sizeof(void *) == 0UL) {
          while (1) {
            tmp___21 = jit->ip;
            (jit->ip) ++;
            *tmp___21 = (unsigned char )((((tinf->counterreg & 7) & 7) << 3) | 4);
            break;
          }
          break;
        }
        if ((int )(- sizeof(void *)) >= -128) {
          if ((int )(- sizeof(void *)) <= 127) {
            while (1) {
              tmp___22 = jit->ip;
              (jit->ip) ++;
              *tmp___22 = (unsigned char )(((1 << 6) | (((tinf->counterreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- sizeof(void *) & 255UL);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___0;
          }
        } else {
          _L___0: /* CIL Label */ 
          while (1) {
            tmp___23 = jit->ip;
            (jit->ip) ++;
            *tmp___23 = (unsigned char )(((2 << 6) | (((tinf->counterreg & 7) & 7) << 3)) | 4);
            break;
          }
          while (1) {
            imb___0.val = (int )(- sizeof(void *));
            tmp___24 = jit->ip;
            (jit->ip) ++;
            *tmp___24 = imb___0.b[0];
            tmp___25 = jit->ip;
            (jit->ip) ++;
            *tmp___25 = imb___0.b[1];
            tmp___26 = jit->ip;
            (jit->ip) ++;
            *tmp___26 = imb___0.b[2];
            tmp___27 = jit->ip;
            (jit->ip) ++;
            *tmp___27 = imb___0.b[3];
            break;
          }
        }
        break;
      }
      break;
    }
  }
  if (tinf->scrap_in_use) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___28 = jit->ip;
        (jit->ip) ++;
        *tmp___28 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___29 = 8;
        } else {
          tmp___29 = 0;
        }
        if (tinf->scrapreg > 7) {
          tmp___30 = 4;
        } else {
          tmp___30 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(tmp___29 | tmp___30);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___31 = jit->ip;
          (jit->ip) ++;
          *tmp___31 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___31 = jit->ip;
          (jit->ip) ++;
          *tmp___31 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___32 = jit->ip;
      (jit->ip) ++;
      *tmp___32 = (unsigned char)136;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___33 = jit->ip;
      (jit->ip) ++;
      *tmp___33 = (unsigned char)137;
      break;
      default: 
      tmp___34 = __builtin_expect(1L, 0L);
      if (tmp___34) {
        __assert_rtn("emit_transfer_init", "./jitter-amd64.c", 3121, "0");
      }
      }
      while (1) {
        if (- sizeof(void *) * 2UL == 0UL) {
          while (1) {
            tmp___35 = jit->ip;
            (jit->ip) ++;
            *tmp___35 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
            break;
          }
          while (1) {
            tmp___36 = jit->ip;
            (jit->ip) ++;
            *tmp___36 = (unsigned char )((4 << 3) | 4);
            break;
          }
        } else
        if ((int )(- sizeof(void *) * 2UL) >= -128) {
          if ((int )(- sizeof(void *) * 2UL) <= 127) {
            while (1) {
              tmp___37 = jit->ip;
              (jit->ip) ++;
              *tmp___37 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___38 = jit->ip;
              (jit->ip) ++;
              *tmp___38 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- sizeof(void *) * 2UL & 255UL);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___1;
          }
        } else {
          _L___1: /* CIL Label */ 
          while (1) {
            tmp___39 = jit->ip;
            (jit->ip) ++;
            *tmp___39 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
            break;
          }
          while (1) {
            tmp___40 = jit->ip;
            (jit->ip) ++;
            *tmp___40 = (unsigned char )((4 << 3) | 4);
            break;
          }
          while (1) {
            imb___1.val = (int )(- sizeof(void *) * 2UL);
            tmp___41 = jit->ip;
            (jit->ip) ++;
            *tmp___41 = imb___1.b[0];
            tmp___42 = jit->ip;
            (jit->ip) ++;
            *tmp___42 = imb___1.b[1];
            tmp___43 = jit->ip;
            (jit->ip) ++;
            *tmp___43 = imb___1.b[2];
            tmp___44 = jit->ip;
            (jit->ip) ++;
            *tmp___44 = imb___1.b[3];
            break;
          }
        }
        break;
        if (- sizeof(void *) * 2UL == 0UL) {
          while (1) {
            tmp___45 = jit->ip;
            (jit->ip) ++;
            *tmp___45 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
            break;
          }
          break;
        }
        if ((int )(- sizeof(void *) * 2UL) >= -128) {
          if ((int )(- sizeof(void *) * 2UL) <= 127) {
            while (1) {
              tmp___46 = jit->ip;
              (jit->ip) ++;
              *tmp___46 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- sizeof(void *) * 2UL & 255UL);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___2;
          }
        } else {
          _L___2: /* CIL Label */ 
          while (1) {
            tmp___47 = jit->ip;
            (jit->ip) ++;
            *tmp___47 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
            break;
          }
          while (1) {
            imb___2.val = (int )(- sizeof(void *) * 2UL);
            tmp___48 = jit->ip;
            (jit->ip) ++;
            *tmp___48 = imb___2.b[0];
            tmp___49 = jit->ip;
            (jit->ip) ++;
            *tmp___49 = imb___2.b[1];
            tmp___50 = jit->ip;
            (jit->ip) ++;
            *tmp___50 = imb___2.b[2];
            tmp___51 = jit->ip;
            (jit->ip) ++;
            *tmp___51 = imb___2.b[3];
            break;
          }
        }
        break;
      }
      break;
    }
  }
  if ((int )op->code & 2) {
    while (1) {
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___52 = 8;
        } else {
          tmp___52 = 0;
        }
        if (tinf->counterreg > 7) {
          tmp___53 = 1;
        } else {
          tmp___53 = 0;
        }
        _amd64_rex_bits___1 = (unsigned char )(tmp___52 | tmp___53);
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___54 = jit->ip;
          (jit->ip) ++;
          *tmp___54 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___54 = jit->ip;
          (jit->ip) ++;
          *tmp___54 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      tmp___55 = jit->ip;
      (jit->ip) ++;
      *tmp___55 = (unsigned char )(184 + (tinf->counterreg & 7));
      if (sizeof(void *) == 8UL) {
        while (1) {
          imb___3.val = (size_t )(cnt * (jit_value )block_size);
          tmp___56 = jit->ip;
          (jit->ip) ++;
          *tmp___56 = imb___3.b[0];
          tmp___57 = jit->ip;
          (jit->ip) ++;
          *tmp___57 = imb___3.b[1];
          tmp___58 = jit->ip;
          (jit->ip) ++;
          *tmp___58 = imb___3.b[2];
          tmp___59 = jit->ip;
          (jit->ip) ++;
          *tmp___59 = imb___3.b[3];
          tmp___60 = jit->ip;
          (jit->ip) ++;
          *tmp___60 = imb___3.b[4];
          tmp___61 = jit->ip;
          (jit->ip) ++;
          *tmp___61 = imb___3.b[5];
          tmp___62 = jit->ip;
          (jit->ip) ++;
          *tmp___62 = imb___3.b[6];
          tmp___63 = jit->ip;
          (jit->ip) ++;
          *tmp___63 = imb___3.b[7];
          break;
        }
      } else {
        while (1) {
          imb___4.val = (int )((size_t )(cnt * (jit_value )block_size));
          tmp___64 = jit->ip;
          (jit->ip) ++;
          *tmp___64 = imb___4.b[0];
          tmp___65 = jit->ip;
          (jit->ip) ++;
          *tmp___65 = imb___4.b[1];
          tmp___66 = jit->ip;
          (jit->ip) ++;
          *tmp___66 = imb___4.b[2];
          tmp___67 = jit->ip;
          (jit->ip) ++;
          *tmp___67 = imb___4.b[3];
          break;
        }
      }
      break;
    }
  } else
  if ((jit_value )tinf->counterreg != cnt) {
    goto _L___3;
  } else
  if (block_size > 1) {
    _L___3: /* CIL Label */ 
    if (block_size == 1) {
      shift = 0;
    } else
    if (block_size == 2) {
      shift = 1;
    } else
    if (block_size == 4) {
      shift = 2;
    } else
    if (block_size == 8) {
      shift = 3;
    } else {
      tmp___68 = __builtin_expect(1L, 0L);
      if (tmp___68) {
        __assert_rtn("emit_transfer_init", "./jitter-amd64.c", 3130, "0");
      }
    }
    while (1) {
      while (1) {
        if (tinf->counterreg > 7) {
          tmp___69 = 4;
        } else {
          tmp___69 = 0;
        }
        if (cnt > 7L) {
          tmp___70 = 2;
        } else {
          tmp___70 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )((8 | tmp___69) | tmp___70);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___71 = jit->ip;
          (jit->ip) ++;
          *tmp___71 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      while (1) {
        tmp___72 = jit->ip;
        (jit->ip) ++;
        *tmp___72 = (unsigned char)141;
        while (1) {
          while (1) {
            tmp___73 = jit->ip;
            (jit->ip) ++;
            *tmp___73 = (unsigned char )((((tinf->counterreg & 7) & 7) << 3) | 4);
            break;
          }
          while (1) {
            tmp___74 = jit->ip;
            (jit->ip) ++;
            *tmp___74 = (unsigned char )(((long )((shift & 3) << 6) | (((cnt & 7L) & 7L) << 3)) | 5L);
            break;
          }
          while (1) {
            imb___5.val = 0;
            tmp___75 = jit->ip;
            (jit->ip) ++;
            *tmp___75 = imb___5.b[0];
            tmp___76 = jit->ip;
            (jit->ip) ++;
            *tmp___76 = imb___5.b[1];
            tmp___77 = jit->ip;
            (jit->ip) ++;
            *tmp___77 = imb___5.b[2];
            tmp___78 = jit->ip;
            (jit->ip) ++;
            *tmp___78 = imb___5.b[3];
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  }
  tinf->loop_addr = jit->ip;
  op->addendum = (void *)tinf;
  if ((unsigned long )block_size == sizeof(void *)) {
    while (1) {
      while (1) {
        if (block_size > 4) {
          tmp___89 = 8;
        } else {
          tmp___89 = 0;
        }
        if (tinf->scrapreg > 7) {
          tmp___90 = 4;
        } else {
          tmp___90 = 0;
        }
        if (tinf->counterreg > 7) {
          tmp___91 = 2;
        } else {
          tmp___91 = 0;
        }
        if (srcreg > 7L) {
          tmp___92 = 1;
        } else {
          tmp___92 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )(((tmp___89 | tmp___90) | tmp___91) | tmp___92);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___93 = jit->ip;
          (jit->ip) ++;
          *tmp___93 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        } else
        if (block_size == 1) {
          tmp___93 = jit->ip;
          (jit->ip) ++;
          *tmp___93 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      while (1) {
        if (block_size == 8) {
          tmp___94 = 4;
        } else {
          tmp___94 = block_size;
        }
        switch (tmp___94) {
        case 1: 
        tmp___95 = jit->ip;
        (jit->ip) ++;
        *tmp___95 = (unsigned char)138;
        break;
        case 2: 
        tmp___96 = jit->ip;
        (jit->ip) ++;
        *tmp___96 = (unsigned char)102;
        case 4: 
        tmp___97 = jit->ip;
        (jit->ip) ++;
        *tmp___97 = (unsigned char)139;
        break;
        default: 
        tmp___98 = __builtin_expect(1L, 0L);
        if (tmp___98) {
          __assert_rtn("emit_transfer_init", "./jitter-amd64.c", 3139, "0");
        }
        }
        while (1) {
          if ((srcreg & 7L) == -1L) {
            while (1) {
              tmp___99 = jit->ip;
              (jit->ip) ++;
              *tmp___99 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___100 = jit->ip;
              (jit->ip) ++;
              *tmp___100 = (unsigned char )((((tinf->counterreg & 7) & 7) << 3) | 5);
              break;
            }
            while (1) {
              imb___7.val = - block_size;
              tmp___101 = jit->ip;
              (jit->ip) ++;
              *tmp___101 = imb___7.b[0];
              tmp___102 = jit->ip;
              (jit->ip) ++;
              *tmp___102 = imb___7.b[1];
              tmp___103 = jit->ip;
              (jit->ip) ++;
              *tmp___103 = imb___7.b[2];
              tmp___104 = jit->ip;
              (jit->ip) ++;
              *tmp___104 = imb___7.b[3];
              break;
            }
          } else
          if (- block_size == 0) {
            if ((srcreg & 7L) != 5L) {
              while (1) {
                tmp___105 = jit->ip;
                (jit->ip) ++;
                *tmp___105 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___106 = jit->ip;
                (jit->ip) ++;
                *tmp___106 = (unsigned char )((long )((((tinf->counterreg & 7) & 7) & 7) << 3) | (((srcreg & 7L) & 7L) & 7L));
                break;
              }
            } else {
              goto _L___5;
            }
          } else
          _L___5: /* CIL Label */ 
          if (- block_size >= -128) {
            if (- block_size <= 127) {
              while (1) {
                tmp___107 = jit->ip;
                (jit->ip) ++;
                *tmp___107 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___108 = jit->ip;
                (jit->ip) ++;
                *tmp___108 = (unsigned char )((long )((((tinf->counterreg & 7) & 7) & 7) << 3) | (((srcreg & 7L) & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- block_size & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___4;
            }
          } else {
            _L___4: /* CIL Label */ 
            while (1) {
              tmp___109 = jit->ip;
              (jit->ip) ++;
              *tmp___109 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___110 = jit->ip;
              (jit->ip) ++;
              *tmp___110 = (unsigned char )((long )((((tinf->counterreg & 7) & 7) & 7) << 3) | (((srcreg & 7L) & 7L) & 7L));
              break;
            }
            while (1) {
              imb___8.val = - block_size;
              tmp___111 = jit->ip;
              (jit->ip) ++;
              *tmp___111 = imb___8.b[0];
              tmp___112 = jit->ip;
              (jit->ip) ++;
              *tmp___112 = imb___8.b[1];
              tmp___113 = jit->ip;
              (jit->ip) ++;
              *tmp___113 = imb___8.b[2];
              tmp___114 = jit->ip;
              (jit->ip) ++;
              *tmp___114 = imb___8.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      if (block_size == 4) {
        while (1) {
          while (1) {
            if (tinf->scrapreg > 7) {
              tmp___115 = 4;
            } else {
              tmp___115 = 0;
            }
            if (tinf->counterreg > 7) {
              tmp___116 = 2;
            } else {
              tmp___116 = 0;
            }
            if (srcreg > 7L) {
              tmp___117 = 1;
            } else {
              tmp___117 = 0;
            }
            _amd64_rex_bits___4 = (unsigned char )(((8 | tmp___115) | tmp___116) | tmp___117);
            if ((int )_amd64_rex_bits___4 != 0) {
              tmp___118 = jit->ip;
              (jit->ip) ++;
              *tmp___118 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
            }
            break;
          }
          tmp___119 = jit->ip;
          (jit->ip) ++;
          *tmp___119 = (unsigned char)99;
          while (1) {
            if ((srcreg & 7L) == -1L) {
              while (1) {
                tmp___120 = jit->ip;
                (jit->ip) ++;
                *tmp___120 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___121 = jit->ip;
                (jit->ip) ++;
                *tmp___121 = (unsigned char )((((tinf->counterreg & 7) & 7) << 3) | 5);
                break;
              }
              while (1) {
                imb___9.val = - block_size;
                tmp___122 = jit->ip;
                (jit->ip) ++;
                *tmp___122 = imb___9.b[0];
                tmp___123 = jit->ip;
                (jit->ip) ++;
                *tmp___123 = imb___9.b[1];
                tmp___124 = jit->ip;
                (jit->ip) ++;
                *tmp___124 = imb___9.b[2];
                tmp___125 = jit->ip;
                (jit->ip) ++;
                *tmp___125 = imb___9.b[3];
                break;
              }
            } else
            if (- block_size == 0) {
              if ((srcreg & 7L) != 5L) {
                while (1) {
                  tmp___126 = jit->ip;
                  (jit->ip) ++;
                  *tmp___126 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___127 = jit->ip;
                  (jit->ip) ++;
                  *tmp___127 = (unsigned char )((long )((((tinf->counterreg & 7) & 7) & 7) << 3) | (((srcreg & 7L) & 7L) & 7L));
                  break;
                }
              } else {
                goto _L___7;
              }
            } else
            _L___7: /* CIL Label */ 
            if (- block_size >= -128) {
              if (- block_size <= 127) {
                while (1) {
                  tmp___128 = jit->ip;
                  (jit->ip) ++;
                  *tmp___128 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___129 = jit->ip;
                  (jit->ip) ++;
                  *tmp___129 = (unsigned char )((long )((((tinf->counterreg & 7) & 7) & 7) << 3) | (((srcreg & 7L) & 7L) & 7L));
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(- block_size & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___6;
              }
            } else {
              _L___6: /* CIL Label */ 
              while (1) {
                tmp___130 = jit->ip;
                (jit->ip) ++;
                *tmp___130 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___131 = jit->ip;
                (jit->ip) ++;
                *tmp___131 = (unsigned char )((long )((((tinf->counterreg & 7) & 7) & 7) << 3) | (((srcreg & 7L) & 7L) & 7L));
                break;
              }
              while (1) {
                imb___10.val = - block_size;
                tmp___132 = jit->ip;
                (jit->ip) ++;
                *tmp___132 = imb___10.b[0];
                tmp___133 = jit->ip;
                (jit->ip) ++;
                *tmp___133 = imb___10.b[1];
                tmp___134 = jit->ip;
                (jit->ip) ++;
                *tmp___134 = imb___10.b[2];
                tmp___135 = jit->ip;
                (jit->ip) ++;
                *tmp___135 = imb___10.b[3];
                break;
              }
            }
            break;
          }
          break;
        }
        break;
      }
      while (1) {
        if (tinf->scrapreg > 7) {
          tmp___136 = 4;
        } else {
          tmp___136 = 0;
        }
        if (tinf->counterreg > 7) {
          tmp___137 = 2;
        } else {
          tmp___137 = 0;
        }
        if (srcreg > 7L) {
          tmp___138 = 1;
        } else {
          tmp___138 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(((8 | tmp___136) | tmp___137) | tmp___138);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___139 = jit->ip;
          (jit->ip) ++;
          *tmp___139 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      tmp___140 = jit->ip;
      (jit->ip) ++;
      *tmp___140 = (unsigned char)15;
      switch (block_size) {
      case 1: 
      tmp___141 = jit->ip;
      (jit->ip) ++;
      *tmp___141 = (unsigned char)190;
      break;
      case 2: 
      tmp___142 = jit->ip;
      (jit->ip) ++;
      *tmp___142 = (unsigned char)191;
      break;
      default: 
      tmp___143 = __builtin_expect(1L, 0L);
      if (tmp___143) {
        __assert_rtn("emit_transfer_init", "./jitter-amd64.c", 3140, "0");
      }
      }
      while (1) {
        if ((srcreg & 7L) == -1L) {
          while (1) {
            tmp___144 = jit->ip;
            (jit->ip) ++;
            *tmp___144 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
            break;
          }
          while (1) {
            tmp___145 = jit->ip;
            (jit->ip) ++;
            *tmp___145 = (unsigned char )((((tinf->counterreg & 7) & 7) << 3) | 5);
            break;
          }
          while (1) {
            imb___11.val = - block_size;
            tmp___146 = jit->ip;
            (jit->ip) ++;
            *tmp___146 = imb___11.b[0];
            tmp___147 = jit->ip;
            (jit->ip) ++;
            *tmp___147 = imb___11.b[1];
            tmp___148 = jit->ip;
            (jit->ip) ++;
            *tmp___148 = imb___11.b[2];
            tmp___149 = jit->ip;
            (jit->ip) ++;
            *tmp___149 = imb___11.b[3];
            break;
          }
        } else
        if (- block_size == 0) {
          if ((srcreg & 7L) != 5L) {
            while (1) {
              tmp___150 = jit->ip;
              (jit->ip) ++;
              *tmp___150 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___151 = jit->ip;
              (jit->ip) ++;
              *tmp___151 = (unsigned char )((long )((((tinf->counterreg & 7) & 7) & 7) << 3) | (((srcreg & 7L) & 7L) & 7L));
              break;
            }
          } else {
            goto _L___9;
          }
        } else
        _L___9: /* CIL Label */ 
        if (- block_size >= -128) {
          if (- block_size <= 127) {
            while (1) {
              tmp___152 = jit->ip;
              (jit->ip) ++;
              *tmp___152 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___153 = jit->ip;
              (jit->ip) ++;
              *tmp___153 = (unsigned char )((long )((((tinf->counterreg & 7) & 7) & 7) << 3) | (((srcreg & 7L) & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- block_size & 255);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___8;
          }
        } else {
          _L___8: /* CIL Label */ 
          while (1) {
            tmp___154 = jit->ip;
            (jit->ip) ++;
            *tmp___154 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
            break;
          }
          while (1) {
            tmp___155 = jit->ip;
            (jit->ip) ++;
            *tmp___155 = (unsigned char )((long )((((tinf->counterreg & 7) & 7) & 7) << 3) | (((srcreg & 7L) & 7L) & 7L));
            break;
          }
          while (1) {
            imb___12.val = - block_size;
            tmp___156 = jit->ip;
            (jit->ip) ++;
            *tmp___156 = imb___12.b[0];
            tmp___157 = jit->ip;
            (jit->ip) ++;
            *tmp___157 = imb___12.b[1];
            tmp___158 = jit->ip;
            (jit->ip) ++;
            *tmp___158 = imb___12.b[2];
            tmp___159 = jit->ip;
            (jit->ip) ++;
            *tmp___159 = imb___12.b[3];
            break;
          }
        }
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_transfer_init LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_arguments LOC=UNKNOWN */
__inline static int emit_arguments(struct jit *jit ) 
{ 
  int stack_correction ;
  struct jit_out_arg *args ;
  int gp_pushed ;
  int tmp ;
  int fp_pushed ;
  int tmp___0 ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  struct jit_func_info *tmp___33 ;
  int x ;
  struct jit_out_arg *arg ;
  int fp_reg_arg_cnt ;
  int tmp___34 ;
  int _amd64_width_temp ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___35 ;
  int tmp___36 ;
  int tmp___37 ;
  unsigned char *tmp___38 ;
  int tmp___39 ;
  unsigned char *tmp___40 ;
  amd64_imm_buf imb___3 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  int tmp___53 ;
  unsigned char _amd64_rex_bits___6 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;

  {
  stack_correction = 0;
  args = jit->prepared_args.args;
  if (jit->prepared_args.gp_args - (jit->reg_al)->gp_arg_reg_cnt > 0) {
    tmp = jit->prepared_args.gp_args - (jit->reg_al)->gp_arg_reg_cnt;
  } else {
    tmp = 0;
  }
  gp_pushed = tmp;
  if (jit->prepared_args.fp_args - (jit->reg_al)->fp_arg_reg_cnt > 0) {
    tmp___0 = jit->prepared_args.fp_args - (jit->reg_al)->fp_arg_reg_cnt;
  } else {
    tmp___0 = 0;
  }
  fp_pushed = tmp___0;
  tmp___33 = jit_current_func_info(jit);
  if (tmp___33->has_prolog) {
    if (((jit->push_count + gp_pushed) + fp_pushed) % 2) {
      while (1) {
        while (1) {
          _amd64_rex_bits = (unsigned char)8;
          if ((int )_amd64_rex_bits != 0) {
            tmp___1 = jit->ip;
            (jit->ip) ++;
            *tmp___1 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        tmp___2 = jit->ip;
        (jit->ip) ++;
        *tmp___2 = (unsigned char)131;
        while (1) {
          while (1) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
            break;
          }
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)8;
          (jit->ip) ++;
          break;
        }
        break;
      }
      stack_correction = 8;
    }
  } else
  if (((jit->push_count + gp_pushed) + fp_pushed) % 2 == 0) {
    while (1) {
      while (1) {
        _amd64_rex_bits___2 = (unsigned char)8;
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___17 = jit->ip;
          (jit->ip) ++;
          *tmp___17 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___18 = jit->ip;
      (jit->ip) ++;
      *tmp___18 = (unsigned char)131;
      while (1) {
        while (1) {
          tmp___19 = jit->ip;
          (jit->ip) ++;
          *tmp___19 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
          break;
        }
        break;
      }
      while (1) {
        *(jit->ip) = (unsigned char)8;
        (jit->ip) ++;
        break;
      }
      break;
    }
    stack_correction = 8;
  }
  x = jit->prepared_args.count - 1;
  while (x >= 0) {
    arg = args + x;
    if (! arg->isfp) {
      if (arg->argpos < (jit->reg_al)->gp_arg_reg_cnt) {
        emit_set_arg(jit, arg);
      } else {
        emit_push_arg(jit, arg);
      }
    } else
    if (arg->argpos < (jit->reg_al)->fp_arg_reg_cnt) {
      emit_set_fparg(jit, arg);
    } else {
      emit_fppush_arg(jit, arg);
    }
    x --;
  }
  if (jit->prepared_args.fp_args < (jit->reg_al)->fp_arg_reg_cnt) {
    tmp___34 = jit->prepared_args.fp_args;
  } else {
    tmp___34 = (jit->reg_al)->fp_arg_reg_cnt;
  }
  fp_reg_arg_cnt = tmp___34;
  if (fp_reg_arg_cnt != 0) {
    while (1) {
      _amd64_width_temp = (size_t )fp_reg_arg_cnt == (size_t )((int )((size_t )fp_reg_arg_cnt));
      while (1) {
        while (1) {
          if (_amd64_width_temp) {
            tmp___37 = 4;
          } else {
            tmp___37 = 8;
          }
          if (tmp___37 > 4) {
            tmp___36 = 8;
          } else {
            tmp___36 = 0;
          }
          _amd64_rex_bits___5 = (unsigned char )tmp___36;
          if ((int )_amd64_rex_bits___5 != 0) {
            tmp___38 = jit->ip;
            (jit->ip) ++;
            *tmp___38 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
          } else {
            if (_amd64_width_temp) {
              tmp___39 = 4;
            } else {
              tmp___39 = 8;
            }
            if (tmp___39 == 1) {
              tmp___38 = jit->ip;
              (jit->ip) ++;
              *tmp___38 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
            }
          }
          break;
        }
        tmp___40 = jit->ip;
        (jit->ip) ++;
        *tmp___40 = (unsigned char)184;
        if (_amd64_width_temp) {
          tmp___53 = 4;
        } else {
          tmp___53 = 8;
        }
        if (tmp___53 == 8) {
          while (1) {
            imb___3.val = (size_t )fp_reg_arg_cnt;
            tmp___41 = jit->ip;
            (jit->ip) ++;
            *tmp___41 = imb___3.b[0];
            tmp___42 = jit->ip;
            (jit->ip) ++;
            *tmp___42 = imb___3.b[1];
            tmp___43 = jit->ip;
            (jit->ip) ++;
            *tmp___43 = imb___3.b[2];
            tmp___44 = jit->ip;
            (jit->ip) ++;
            *tmp___44 = imb___3.b[3];
            tmp___45 = jit->ip;
            (jit->ip) ++;
            *tmp___45 = imb___3.b[4];
            tmp___46 = jit->ip;
            (jit->ip) ++;
            *tmp___46 = imb___3.b[5];
            tmp___47 = jit->ip;
            (jit->ip) ++;
            *tmp___47 = imb___3.b[6];
            tmp___48 = jit->ip;
            (jit->ip) ++;
            *tmp___48 = imb___3.b[7];
            break;
          }
        } else {
          while (1) {
            imb___4.val = (int )((size_t )fp_reg_arg_cnt);
            tmp___49 = jit->ip;
            (jit->ip) ++;
            *tmp___49 = imb___4.b[0];
            tmp___50 = jit->ip;
            (jit->ip) ++;
            *tmp___50 = imb___4.b[1];
            tmp___51 = jit->ip;
            (jit->ip) ++;
            *tmp___51 = imb___4.b[2];
            tmp___52 = jit->ip;
            (jit->ip) ++;
            *tmp___52 = imb___4.b[3];
            break;
          }
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      while (1) {
        _amd64_rex_bits___6 = (unsigned char)0;
        if ((int )_amd64_rex_bits___6 != 0) {
          tmp___54 = jit->ip;
          (jit->ip) ++;
          *tmp___54 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
        }
        break;
      }
      tmp___55 = jit->ip;
      (jit->ip) ++;
      *tmp___55 = (unsigned char )((6 << 3) + 3);
      while (1) {
        while (1) {
          tmp___56 = jit->ip;
          (jit->ip) ++;
          *tmp___56 = (unsigned char )(3 << 6);
          break;
        }
        break;
      }
      break;
    }
  }
  return (stack_correction);
}
}
/* END FUNCTION-DEF emit_arguments LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF node_min LOC=UNKNOWN */
__inline static jit_tree_key node_min(jit_tree *x ) 
{ 
  jit_tree_key tmp ;

  {
  if ((unsigned long )x->left == (unsigned long )((void *)0)) {
    return (x->key);
  } else {
    tmp = node_min(x->left);
    return (tmp);
  }
}
}
/* END FUNCTION-DEF node_min LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_transfer_loop LOC=UNKNOWN */
static void emit_transfer_loop(struct jit *jit , jit_op *op ) 
{ 
  struct transfer_info *tinf ;
  jit_value loop ;
  unsigned char _amd64_rex_bits ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  int tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  long tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  x86_imm_buf imb ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___43 ;
  int offset ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___54 ;
  int tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  long tmp___59 ;
  unsigned char *tmp___60 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___83 ;
  int tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  long tmp___88 ;
  unsigned char *tmp___89 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;
  unsigned char *tmp___99 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;

  {
  tinf = (struct transfer_info *)op->addendum;
  loop = (jit_value )tinf->loop_addr;
  while (1) {
    while (1) {
      if (tinf->block_size > 4) {
        tmp = 8;
      } else {
        tmp = 0;
      }
      if (tinf->scrapreg > 7) {
        tmp___0 = 4;
      } else {
        tmp___0 = 0;
      }
      if (tinf->counterreg > 7) {
        tmp___1 = 2;
      } else {
        tmp___1 = 0;
      }
      if (tinf->destreg > 7) {
        tmp___2 = 1;
      } else {
        tmp___2 = 0;
      }
      _amd64_rex_bits = (unsigned char )(((tmp | tmp___0) | tmp___1) | tmp___2);
      if ((int )_amd64_rex_bits != 0) {
        tmp___3 = jit->ip;
        (jit->ip) ++;
        *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
      } else
      if (tinf->block_size == 1) {
        tmp___3 = jit->ip;
        (jit->ip) ++;
        *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
      }
      break;
    }
    while (1) {
      if (tinf->block_size == 8) {
        tmp___4 = 4;
      } else {
        tmp___4 = tinf->block_size;
      }
      switch (tmp___4) {
      case 1: 
      tmp___5 = jit->ip;
      (jit->ip) ++;
      *tmp___5 = (unsigned char)136;
      break;
      case 2: 
      tmp___6 = jit->ip;
      (jit->ip) ++;
      *tmp___6 = (unsigned char)102;
      case 4: 
      tmp___7 = jit->ip;
      (jit->ip) ++;
      *tmp___7 = (unsigned char)137;
      break;
      default: 
      tmp___8 = __builtin_expect(1L, 0L);
      if (tmp___8) {
        __assert_rtn("emit_transfer_loop", "./jitter-amd64.c", 3148, "0");
      }
      }
      while (1) {
        if ((tinf->destreg & 7) == -1) {
          while (1) {
            tmp___9 = jit->ip;
            (jit->ip) ++;
            *tmp___9 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
            break;
          }
          while (1) {
            tmp___10 = jit->ip;
            (jit->ip) ++;
            *tmp___10 = (unsigned char )((((tinf->counterreg & 7) & 7) << 3) | 5);
            break;
          }
          while (1) {
            imb.val = - tinf->block_size;
            tmp___11 = jit->ip;
            (jit->ip) ++;
            *tmp___11 = imb.b[0];
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = imb.b[1];
            tmp___13 = jit->ip;
            (jit->ip) ++;
            *tmp___13 = imb.b[2];
            tmp___14 = jit->ip;
            (jit->ip) ++;
            *tmp___14 = imb.b[3];
            break;
          }
        } else
        if (- tinf->block_size == 0) {
          if ((tinf->destreg & 7) != 5) {
            while (1) {
              tmp___15 = jit->ip;
              (jit->ip) ++;
              *tmp___15 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___16 = jit->ip;
              (jit->ip) ++;
              *tmp___16 = (unsigned char )(((((tinf->counterreg & 7) & 7) & 7) << 3) | (((tinf->destreg & 7) & 7) & 7));
              break;
            }
          } else {
            goto _L___0;
          }
        } else
        _L___0: /* CIL Label */ 
        if (- tinf->block_size >= -128) {
          if (- tinf->block_size <= 127) {
            while (1) {
              tmp___17 = jit->ip;
              (jit->ip) ++;
              *tmp___17 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___18 = jit->ip;
              (jit->ip) ++;
              *tmp___18 = (unsigned char )(((((tinf->counterreg & 7) & 7) & 7) << 3) | (((tinf->destreg & 7) & 7) & 7));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- tinf->block_size & 255);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L;
          }
        } else {
          _L: /* CIL Label */ 
          while (1) {
            tmp___19 = jit->ip;
            (jit->ip) ++;
            *tmp___19 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
            break;
          }
          while (1) {
            tmp___20 = jit->ip;
            (jit->ip) ++;
            *tmp___20 = (unsigned char )(((((tinf->counterreg & 7) & 7) & 7) << 3) | (((tinf->destreg & 7) & 7) & 7));
            break;
          }
          while (1) {
            imb___0.val = - tinf->block_size;
            tmp___21 = jit->ip;
            (jit->ip) ++;
            *tmp___21 = imb___0.b[0];
            tmp___22 = jit->ip;
            (jit->ip) ++;
            *tmp___22 = imb___0.b[1];
            tmp___23 = jit->ip;
            (jit->ip) ++;
            *tmp___23 = imb___0.b[2];
            tmp___24 = jit->ip;
            (jit->ip) ++;
            *tmp___24 = imb___0.b[3];
            break;
          }
        }
        break;
      }
      break;
    }
    break;
  }
  while (1) {
    if (tinf->block_size >= -128) {
      if (tinf->block_size <= 127) {
        while (1) {
          if (tinf->counterreg > 7) {
            tmp___25 = 1;
          } else {
            tmp___25 = 0;
          }
          _amd64_rex_bits___0 = (unsigned char )(8 | tmp___25);
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___26 = jit->ip;
            (jit->ip) ++;
            *tmp___26 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___27 = jit->ip;
        (jit->ip) ++;
        *tmp___27 = (unsigned char)131;
        while (1) {
          while (1) {
            tmp___28 = jit->ip;
            (jit->ip) ++;
            *tmp___28 = (unsigned char )(((3 << 6) | (5 << 3)) | (tinf->counterreg & 7));
            break;
          }
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char )(tinf->block_size & 255);
          (jit->ip) ++;
          break;
        }
      } else {
        goto _L___1;
      }
    } else
    _L___1: /* CIL Label */ 
    if (tinf->counterreg == 0) {
      while (1) {
        _amd64_rex_bits___1 = (unsigned char)8;
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___29 = jit->ip;
          (jit->ip) ++;
          *tmp___29 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      tmp___30 = jit->ip;
      (jit->ip) ++;
      *tmp___30 = (unsigned char )((5 << 3) + 5);
      while (1) {
        imb___1.val = tinf->block_size;
        tmp___31 = jit->ip;
        (jit->ip) ++;
        *tmp___31 = imb___1.b[0];
        tmp___32 = jit->ip;
        (jit->ip) ++;
        *tmp___32 = imb___1.b[1];
        tmp___33 = jit->ip;
        (jit->ip) ++;
        *tmp___33 = imb___1.b[2];
        tmp___34 = jit->ip;
        (jit->ip) ++;
        *tmp___34 = imb___1.b[3];
        break;
      }
    } else {
      while (1) {
        if (tinf->counterreg > 7) {
          tmp___35 = 1;
        } else {
          tmp___35 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )(8 | tmp___35);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___36 = jit->ip;
          (jit->ip) ++;
          *tmp___36 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___37 = jit->ip;
      (jit->ip) ++;
      *tmp___37 = (unsigned char)129;
      while (1) {
        while (1) {
          tmp___38 = jit->ip;
          (jit->ip) ++;
          *tmp___38 = (unsigned char )(((3 << 6) | (5 << 3)) | (tinf->counterreg & 7));
          break;
        }
        break;
      }
      while (1) {
        imb___2.val = tinf->block_size;
        tmp___39 = jit->ip;
        (jit->ip) ++;
        *tmp___39 = imb___2.b[0];
        tmp___40 = jit->ip;
        (jit->ip) ++;
        *tmp___40 = imb___2.b[1];
        tmp___41 = jit->ip;
        (jit->ip) ++;
        *tmp___41 = imb___2.b[2];
        tmp___42 = jit->ip;
        (jit->ip) ++;
        *tmp___42 = imb___2.b[3];
        break;
      }
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___3 = (unsigned char)8;
      if ((int )_amd64_rex_bits___3 != 0) {
        tmp___43 = jit->ip;
        (jit->ip) ++;
        *tmp___43 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
      }
      break;
    }
    while (1) {
      offset = (int )((loop - (jit_value )jit->ip) - 2L);
      if (offset >= -128) {
        if (offset <= 127) {
          while (1) {
            tmp___45 = jit->ip;
            (jit->ip) ++;
            *tmp___45 = (unsigned char )x86_cc_unsigned_map[1];
            while (1) {
              *(jit->ip) = (unsigned char )(offset & 255);
              (jit->ip) ++;
              break;
            }
            break;
          }
        } else {
          goto _L___2;
        }
      } else {
        _L___2: /* CIL Label */ 
        offset -= 4;
        while (1) {
          tmp___46 = jit->ip;
          (jit->ip) ++;
          *tmp___46 = (unsigned char)15;
          tmp___48 = jit->ip;
          (jit->ip) ++;
          *tmp___48 = (unsigned char )((int const   )x86_cc_unsigned_map[1] + 16);
          while (1) {
            imb___3.val = offset;
            tmp___49 = jit->ip;
            (jit->ip) ++;
            *tmp___49 = imb___3.b[0];
            tmp___50 = jit->ip;
            (jit->ip) ++;
            *tmp___50 = imb___3.b[1];
            tmp___51 = jit->ip;
            (jit->ip) ++;
            *tmp___51 = imb___3.b[2];
            tmp___52 = jit->ip;
            (jit->ip) ++;
            *tmp___52 = imb___3.b[3];
            break;
          }
          break;
        }
      }
      break;
    }
    break;
  }
  if (tinf->counter_in_use) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___53 = jit->ip;
        (jit->ip) ++;
        *tmp___53 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___54 = 8;
        } else {
          tmp___54 = 0;
        }
        if (tinf->counterreg > 7) {
          tmp___55 = 4;
        } else {
          tmp___55 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )(tmp___54 | tmp___55);
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___56 = jit->ip;
          (jit->ip) ++;
          *tmp___56 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___56 = jit->ip;
          (jit->ip) ++;
          *tmp___56 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___57 = jit->ip;
      (jit->ip) ++;
      *tmp___57 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___58 = jit->ip;
      (jit->ip) ++;
      *tmp___58 = (unsigned char)139;
      break;
      default: 
      tmp___59 = __builtin_expect(1L, 0L);
      if (tmp___59) {
        __assert_rtn("emit_transfer_loop", "./jitter-amd64.c", 3152, "0");
      }
      }
      while (1) {
        while (1) {
          if (- sizeof(void *) == 0UL) {
            while (1) {
              tmp___65 = jit->ip;
              (jit->ip) ++;
              *tmp___65 = (unsigned char )((((tinf->counterreg & 7) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___66 = jit->ip;
              (jit->ip) ++;
              *tmp___66 = (unsigned char )((4 << 3) | 4);
              break;
            }
          } else
          if ((int )(- sizeof(void *)) >= -128) {
            if ((int )(- sizeof(void *)) <= 127) {
              while (1) {
                tmp___67 = jit->ip;
                (jit->ip) ++;
                *tmp___67 = (unsigned char )(((1 << 6) | (((tinf->counterreg & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___68 = jit->ip;
                (jit->ip) ++;
                *tmp___68 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- sizeof(void *) & 255UL);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___3;
            }
          } else {
            _L___3: /* CIL Label */ 
            while (1) {
              tmp___69 = jit->ip;
              (jit->ip) ++;
              *tmp___69 = (unsigned char )(((2 << 6) | (((tinf->counterreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___70 = jit->ip;
              (jit->ip) ++;
              *tmp___70 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              imb___5.val = (int )(- sizeof(void *));
              tmp___71 = jit->ip;
              (jit->ip) ++;
              *tmp___71 = imb___5.b[0];
              tmp___72 = jit->ip;
              (jit->ip) ++;
              *tmp___72 = imb___5.b[1];
              tmp___73 = jit->ip;
              (jit->ip) ++;
              *tmp___73 = imb___5.b[2];
              tmp___74 = jit->ip;
              (jit->ip) ++;
              *tmp___74 = imb___5.b[3];
              break;
            }
          }
          break;
          if (- sizeof(void *) == 0UL) {
            while (1) {
              tmp___75 = jit->ip;
              (jit->ip) ++;
              *tmp___75 = (unsigned char )((((tinf->counterreg & 7) & 7) << 3) | 4);
              break;
            }
            break;
          }
          if ((int )(- sizeof(void *)) >= -128) {
            if ((int )(- sizeof(void *)) <= 127) {
              while (1) {
                tmp___76 = jit->ip;
                (jit->ip) ++;
                *tmp___76 = (unsigned char )(((1 << 6) | (((tinf->counterreg & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- sizeof(void *) & 255UL);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___4;
            }
          } else {
            _L___4: /* CIL Label */ 
            while (1) {
              tmp___77 = jit->ip;
              (jit->ip) ++;
              *tmp___77 = (unsigned char )(((2 << 6) | (((tinf->counterreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              imb___6.val = (int )(- sizeof(void *));
              tmp___78 = jit->ip;
              (jit->ip) ++;
              *tmp___78 = imb___6.b[0];
              tmp___79 = jit->ip;
              (jit->ip) ++;
              *tmp___79 = imb___6.b[1];
              tmp___80 = jit->ip;
              (jit->ip) ++;
              *tmp___80 = imb___6.b[2];
              tmp___81 = jit->ip;
              (jit->ip) ++;
              *tmp___81 = imb___6.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  }
  if (tinf->scrap_in_use) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___82 = jit->ip;
        (jit->ip) ++;
        *tmp___82 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___83 = 8;
        } else {
          tmp___83 = 0;
        }
        if (tinf->scrapreg > 7) {
          tmp___84 = 4;
        } else {
          tmp___84 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(tmp___83 | tmp___84);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___85 = jit->ip;
          (jit->ip) ++;
          *tmp___85 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___85 = jit->ip;
          (jit->ip) ++;
          *tmp___85 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___86 = jit->ip;
      (jit->ip) ++;
      *tmp___86 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___87 = jit->ip;
      (jit->ip) ++;
      *tmp___87 = (unsigned char)139;
      break;
      default: 
      tmp___88 = __builtin_expect(1L, 0L);
      if (tmp___88) {
        __assert_rtn("emit_transfer_loop", "./jitter-amd64.c", 3153, "0");
      }
      }
      while (1) {
        while (1) {
          if (- sizeof(void *) * 2UL == 0UL) {
            while (1) {
              tmp___94 = jit->ip;
              (jit->ip) ++;
              *tmp___94 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___95 = jit->ip;
              (jit->ip) ++;
              *tmp___95 = (unsigned char )((4 << 3) | 4);
              break;
            }
          } else
          if ((int )(- sizeof(void *) * 2UL) >= -128) {
            if ((int )(- sizeof(void *) * 2UL) <= 127) {
              while (1) {
                tmp___96 = jit->ip;
                (jit->ip) ++;
                *tmp___96 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___97 = jit->ip;
                (jit->ip) ++;
                *tmp___97 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- sizeof(void *) * 2UL & 255UL);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___5;
            }
          } else {
            _L___5: /* CIL Label */ 
            while (1) {
              tmp___98 = jit->ip;
              (jit->ip) ++;
              *tmp___98 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___99 = jit->ip;
              (jit->ip) ++;
              *tmp___99 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              imb___8.val = (int )(- sizeof(void *) * 2UL);
              tmp___100 = jit->ip;
              (jit->ip) ++;
              *tmp___100 = imb___8.b[0];
              tmp___101 = jit->ip;
              (jit->ip) ++;
              *tmp___101 = imb___8.b[1];
              tmp___102 = jit->ip;
              (jit->ip) ++;
              *tmp___102 = imb___8.b[2];
              tmp___103 = jit->ip;
              (jit->ip) ++;
              *tmp___103 = imb___8.b[3];
              break;
            }
          }
          break;
          if (- sizeof(void *) * 2UL == 0UL) {
            while (1) {
              tmp___104 = jit->ip;
              (jit->ip) ++;
              *tmp___104 = (unsigned char )((((tinf->scrapreg & 7) & 7) << 3) | 4);
              break;
            }
            break;
          }
          if ((int )(- sizeof(void *) * 2UL) >= -128) {
            if ((int )(- sizeof(void *) * 2UL) <= 127) {
              while (1) {
                tmp___105 = jit->ip;
                (jit->ip) ++;
                *tmp___105 = (unsigned char )(((1 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- sizeof(void *) * 2UL & 255UL);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___6;
            }
          } else {
            _L___6: /* CIL Label */ 
            while (1) {
              tmp___106 = jit->ip;
              (jit->ip) ++;
              *tmp___106 = (unsigned char )(((2 << 6) | (((tinf->scrapreg & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              imb___9.val = (int )(- sizeof(void *) * 2UL);
              tmp___107 = jit->ip;
              (jit->ip) ++;
              *tmp___107 = imb___9.b[0];
              tmp___108 = jit->ip;
              (jit->ip) ++;
              *tmp___108 = imb___9.b[1];
              tmp___109 = jit->ip;
              (jit->ip) ++;
              *tmp___109 = imb___9.b[2];
              tmp___110 = jit->ip;
              (jit->ip) ++;
              *tmp___110 = imb___9.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_transfer_loop LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF hints_refcount_inc LOC=UNKNOWN */
static void hints_refcount_inc(jit_tree *hints ) 
{ 


  {
  if ((unsigned long )hints == (unsigned long )((void *)0)) {
    return;
  }
  (((struct jit_allocator_hint *)hints->value)->refs) ++;
  hints_refcount_inc(hints->left);
  hints_refcount_inc(hints->right);
  return;
}
}
/* END FUNCTION-DEF hints_refcount_inc LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF assign_getarg LOC=UNKNOWN */
static int assign_getarg(jit_op *op , struct jit_reg_allocator *al ) 
{ 
  int arg_id ;
  struct jit_inp_arg *arg ;
  int reg_id ;
  int tmp ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp___0 ;
  int tmp___1 ;

  {
  arg_id = (int )op->arg[1];
  arg = (al->current_func_info)->args + arg_id;
  if ((unsigned int )arg->type == 2U) {
    tmp = 1;
  } else {
    tmp = 0;
  }
  reg_id = ((tmp & 1) | (3 << 1)) | ((arg_id & 268435455) << 4);
  tmp___1 = jit_set_get(op->live_out, reg_id);
  if (! tmp___1) {
    if ((unsigned int )arg->type != 2U) {
      if ((unsigned long )arg->size == sizeof(void *)) {
        goto _L;
      } else {
        goto _L___0;
      }
    } else
    _L___0: /* CIL Label */ 
    if ((unsigned int )arg->type == 2U) {
      _L: /* CIL Label */ 
      tmp___0 = rmap_get(op->regmap, (jit_value )reg_id);
      hreg = tmp___0;
      if (hreg) {
        rmap_unassoc(op->regmap, (jit_value )reg_id);
        rmap_assoc(op->regmap, op->arg[0], hreg);
        op->r_arg[0] = (jit_value )hreg->id;
        op->r_arg[1] = op->arg[1];
        op->code = (unsigned short)392;
        return (1);
      }
    }
  }
  return (0);
}
}
/* END FUNCTION-DEF assign_getarg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_optimize_join_addimm LOC=UNKNOWN */
int jit_optimize_join_addimm(struct jit *jit ) 
{ 
  int change ;
  jit_op *op ;
  jit_op *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  change = 0;
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    tmp___0 = join_2ops(op, 825, 826, & join_addr_addi);
    change |= tmp___0;
    tmp___1 = join_2ops(op, 825, 426, & join_addr_addi);
    change |= tmp___1;
    tmp___2 = join_2ops(op, 826, 825, & join_addi_addr);
    change |= tmp___2;
    tmp___3 = join_2ops(op, 426, 825, & join_addi_addr);
    change |= tmp___3;
    op = op->next;
  }
  return (change);
}
}
/* END FUNCTION-DEF jit_optimize_join_addimm LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rename_reg LOC=UNKNOWN */
static void rename_reg(jit_op *op , int r1 , int r2 ) 
{ 


  {
  insert_reg_op(728, op, (jit_value )r1, (jit_value )r2);
  return;
}
}
/* END FUNCTION-DEF rename_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_get_arg_from_stack LOC=UNKNOWN */
static void emit_get_arg_from_stack(struct jit *jit , int type , int size , int dreg ,
                                    int stack_reg , int stack_pos ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  long tmp___6 ;
  unsigned char *tmp___7 ;
  x86_imm_buf imb ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___29 ;
  int tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___50 ;
  int tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  long tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___75 ;
  int tmp___76 ;
  int tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  long tmp___81 ;
  unsigned char *tmp___82 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;
  unsigned char *tmp___99 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___104 ;
  int tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  long tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  unsigned char *tmp___116 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char *tmp___119 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  unsigned char *tmp___122 ;
  unsigned char *tmp___123 ;
  x86_imm_buf imb___10 ;
  unsigned char *tmp___124 ;
  unsigned char *tmp___125 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char *tmp___128 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___129 ;
  int tmp___130 ;
  unsigned char *tmp___131 ;
  unsigned char *tmp___132 ;
  unsigned char *tmp___133 ;
  unsigned char *tmp___134 ;
  x86_imm_buf imb___11 ;
  unsigned char *tmp___135 ;
  unsigned char *tmp___136 ;
  unsigned char *tmp___137 ;
  unsigned char *tmp___138 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  unsigned char *tmp___141 ;
  unsigned char *tmp___142 ;
  unsigned char *tmp___143 ;
  unsigned char *tmp___144 ;
  x86_imm_buf imb___12 ;
  unsigned char *tmp___145 ;
  unsigned char *tmp___146 ;
  unsigned char *tmp___147 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;
  unsigned char *tmp___150 ;
  unsigned char *tmp___151 ;
  x86_imm_buf imb___13 ;
  unsigned char *tmp___152 ;
  unsigned char *tmp___153 ;
  unsigned char *tmp___154 ;
  unsigned char *tmp___155 ;

  {
  if (type != 2) {
    if ((unsigned long )size == sizeof(void *)) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp = jit->ip;
          (jit->ip) ++;
          *tmp = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___0 = 8;
          } else {
            tmp___0 = 0;
          }
          if (dreg > 7) {
            tmp___1 = 4;
          } else {
            tmp___1 = 0;
          }
          if (stack_reg > 7) {
            tmp___2 = 1;
          } else {
            tmp___2 = 0;
          }
          _amd64_rex_bits = (unsigned char )((tmp___0 | tmp___1) | tmp___2);
          if ((int )_amd64_rex_bits != 0) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___5 = jit->ip;
        (jit->ip) ++;
        *tmp___5 = (unsigned char)139;
        break;
        default: 
        tmp___6 = __builtin_expect(1L, 0L);
        if (tmp___6) {
          __assert_rtn("emit_get_arg_from_stack", "./jitter-amd64.c", 2645, "0");
        }
        }
        while (1) {
          if (stack_reg == 16) {
            while (1) {
              tmp___7 = jit->ip;
              (jit->ip) ++;
              *tmp___7 = (unsigned char )((((dreg & 7) & 7) << 3) | 5);
              break;
            }
            while (1) {
              imb.val = stack_pos;
              tmp___8 = jit->ip;
              (jit->ip) ++;
              *tmp___8 = imb.b[0];
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = imb.b[1];
              tmp___10 = jit->ip;
              (jit->ip) ++;
              *tmp___10 = imb.b[2];
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = imb.b[3];
              break;
            }
          } else {
            while (1) {
              if ((stack_reg & 7) == 4) {
                if (stack_pos == 0) {
                  while (1) {
                    tmp___12 = jit->ip;
                    (jit->ip) ++;
                    *tmp___12 = (unsigned char )((((dreg & 7) & 7) << 3) | 4);
                    break;
                  }
                  while (1) {
                    tmp___13 = jit->ip;
                    (jit->ip) ++;
                    *tmp___13 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                } else
                if (stack_pos >= -128) {
                  if (stack_pos <= 127) {
                    while (1) {
                      tmp___14 = jit->ip;
                      (jit->ip) ++;
                      *tmp___14 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                      break;
                    }
                    while (1) {
                      tmp___15 = jit->ip;
                      (jit->ip) ++;
                      *tmp___15 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(stack_pos & 255);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L;
                  }
                } else {
                  _L: /* CIL Label */ 
                  while (1) {
                    tmp___16 = jit->ip;
                    (jit->ip) ++;
                    *tmp___16 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___17 = jit->ip;
                    (jit->ip) ++;
                    *tmp___17 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    imb___0.val = stack_pos;
                    tmp___18 = jit->ip;
                    (jit->ip) ++;
                    *tmp___18 = imb___0.b[0];
                    tmp___19 = jit->ip;
                    (jit->ip) ++;
                    *tmp___19 = imb___0.b[1];
                    tmp___20 = jit->ip;
                    (jit->ip) ++;
                    *tmp___20 = imb___0.b[2];
                    tmp___21 = jit->ip;
                    (jit->ip) ++;
                    *tmp___21 = imb___0.b[3];
                    break;
                  }
                }
                break;
              }
              if (stack_pos == 0) {
                if ((stack_reg & 7) != 5) {
                  while (1) {
                    tmp___22 = jit->ip;
                    (jit->ip) ++;
                    *tmp___22 = (unsigned char )((((dreg & 7) & 7) << 3) | ((stack_reg & 7) & 7));
                    break;
                  }
                  break;
                }
              }
              if (stack_pos >= -128) {
                if (stack_pos <= 127) {
                  while (1) {
                    tmp___23 = jit->ip;
                    (jit->ip) ++;
                    *tmp___23 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(stack_pos & 255);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___0;
                }
              } else {
                _L___0: /* CIL Label */ 
                while (1) {
                  tmp___24 = jit->ip;
                  (jit->ip) ++;
                  *tmp___24 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                  break;
                }
                while (1) {
                  imb___1.val = stack_pos;
                  tmp___25 = jit->ip;
                  (jit->ip) ++;
                  *tmp___25 = imb___1.b[0];
                  tmp___26 = jit->ip;
                  (jit->ip) ++;
                  *tmp___26 = imb___1.b[1];
                  tmp___27 = jit->ip;
                  (jit->ip) ++;
                  *tmp___27 = imb___1.b[2];
                  tmp___28 = jit->ip;
                  (jit->ip) ++;
                  *tmp___28 = imb___1.b[3];
                  break;
                }
              }
              break;
            }
          }
          break;
        }
        break;
      }
    } else
    if (type == 0) {
      while (1) {
        if (size == 4) {
          while (1) {
            while (1) {
              if (dreg > 7) {
                tmp___29 = 4;
              } else {
                tmp___29 = 0;
              }
              if (stack_reg > 7) {
                tmp___30 = 1;
              } else {
                tmp___30 = 0;
              }
              _amd64_rex_bits___0 = (unsigned char )((8 | tmp___29) | tmp___30);
              if ((int )_amd64_rex_bits___0 != 0) {
                tmp___31 = jit->ip;
                (jit->ip) ++;
                *tmp___31 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
              }
              break;
            }
            tmp___32 = jit->ip;
            (jit->ip) ++;
            *tmp___32 = (unsigned char)99;
            while (1) {
              if ((stack_reg & 7) == 4) {
                if (stack_pos == 0) {
                  while (1) {
                    tmp___33 = jit->ip;
                    (jit->ip) ++;
                    *tmp___33 = (unsigned char )((((dreg & 7) & 7) << 3) | 4);
                    break;
                  }
                  while (1) {
                    tmp___34 = jit->ip;
                    (jit->ip) ++;
                    *tmp___34 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                } else
                if (stack_pos >= -128) {
                  if (stack_pos <= 127) {
                    while (1) {
                      tmp___35 = jit->ip;
                      (jit->ip) ++;
                      *tmp___35 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                      break;
                    }
                    while (1) {
                      tmp___36 = jit->ip;
                      (jit->ip) ++;
                      *tmp___36 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(stack_pos & 255);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L___1;
                  }
                } else {
                  _L___1: /* CIL Label */ 
                  while (1) {
                    tmp___37 = jit->ip;
                    (jit->ip) ++;
                    *tmp___37 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___38 = jit->ip;
                    (jit->ip) ++;
                    *tmp___38 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    imb___2.val = stack_pos;
                    tmp___39 = jit->ip;
                    (jit->ip) ++;
                    *tmp___39 = imb___2.b[0];
                    tmp___40 = jit->ip;
                    (jit->ip) ++;
                    *tmp___40 = imb___2.b[1];
                    tmp___41 = jit->ip;
                    (jit->ip) ++;
                    *tmp___41 = imb___2.b[2];
                    tmp___42 = jit->ip;
                    (jit->ip) ++;
                    *tmp___42 = imb___2.b[3];
                    break;
                  }
                }
                break;
              }
              if (stack_pos == 0) {
                if ((stack_reg & 7) != 5) {
                  while (1) {
                    tmp___43 = jit->ip;
                    (jit->ip) ++;
                    *tmp___43 = (unsigned char )((((dreg & 7) & 7) << 3) | ((stack_reg & 7) & 7));
                    break;
                  }
                  break;
                }
              }
              if (stack_pos >= -128) {
                if (stack_pos <= 127) {
                  while (1) {
                    tmp___44 = jit->ip;
                    (jit->ip) ++;
                    *tmp___44 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(stack_pos & 255);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___2;
                }
              } else {
                _L___2: /* CIL Label */ 
                while (1) {
                  tmp___45 = jit->ip;
                  (jit->ip) ++;
                  *tmp___45 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                  break;
                }
                while (1) {
                  imb___3.val = stack_pos;
                  tmp___46 = jit->ip;
                  (jit->ip) ++;
                  *tmp___46 = imb___3.b[0];
                  tmp___47 = jit->ip;
                  (jit->ip) ++;
                  *tmp___47 = imb___3.b[1];
                  tmp___48 = jit->ip;
                  (jit->ip) ++;
                  *tmp___48 = imb___3.b[2];
                  tmp___49 = jit->ip;
                  (jit->ip) ++;
                  *tmp___49 = imb___3.b[3];
                  break;
                }
              }
              break;
            }
            break;
          }
          break;
        }
        while (1) {
          if (dreg > 7) {
            tmp___50 = 4;
          } else {
            tmp___50 = 0;
          }
          if (stack_reg > 7) {
            tmp___51 = 1;
          } else {
            tmp___51 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )((8 | tmp___50) | tmp___51);
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___52 = jit->ip;
            (jit->ip) ++;
            *tmp___52 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___53 = jit->ip;
        (jit->ip) ++;
        *tmp___53 = (unsigned char)15;
        switch (size) {
        case 1: 
        tmp___54 = jit->ip;
        (jit->ip) ++;
        *tmp___54 = (unsigned char)190;
        break;
        case 2: 
        tmp___55 = jit->ip;
        (jit->ip) ++;
        *tmp___55 = (unsigned char)191;
        break;
        default: 
        tmp___56 = __builtin_expect(1L, 0L);
        if (tmp___56) {
          __assert_rtn("emit_get_arg_from_stack", "./jitter-amd64.c", 2647, "0");
        }
        }
        while (1) {
          if ((stack_reg & 7) == 4) {
            if (stack_pos == 0) {
              while (1) {
                tmp___57 = jit->ip;
                (jit->ip) ++;
                *tmp___57 = (unsigned char )((((dreg & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___58 = jit->ip;
                (jit->ip) ++;
                *tmp___58 = (unsigned char )((4 << 3) | 4);
                break;
              }
            } else
            if (stack_pos >= -128) {
              if (stack_pos <= 127) {
                while (1) {
                  tmp___59 = jit->ip;
                  (jit->ip) ++;
                  *tmp___59 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___60 = jit->ip;
                  (jit->ip) ++;
                  *tmp___60 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(stack_pos & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___3;
              }
            } else {
              _L___3: /* CIL Label */ 
              while (1) {
                tmp___61 = jit->ip;
                (jit->ip) ++;
                *tmp___61 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___62 = jit->ip;
                (jit->ip) ++;
                *tmp___62 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                imb___4.val = stack_pos;
                tmp___63 = jit->ip;
                (jit->ip) ++;
                *tmp___63 = imb___4.b[0];
                tmp___64 = jit->ip;
                (jit->ip) ++;
                *tmp___64 = imb___4.b[1];
                tmp___65 = jit->ip;
                (jit->ip) ++;
                *tmp___65 = imb___4.b[2];
                tmp___66 = jit->ip;
                (jit->ip) ++;
                *tmp___66 = imb___4.b[3];
                break;
              }
            }
            break;
          }
          if (stack_pos == 0) {
            if ((stack_reg & 7) != 5) {
              while (1) {
                tmp___67 = jit->ip;
                (jit->ip) ++;
                *tmp___67 = (unsigned char )((((dreg & 7) & 7) << 3) | ((stack_reg & 7) & 7));
                break;
              }
              break;
            }
          }
          if (stack_pos >= -128) {
            if (stack_pos <= 127) {
              while (1) {
                tmp___68 = jit->ip;
                (jit->ip) ++;
                *tmp___68 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(stack_pos & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___4;
            }
          } else {
            _L___4: /* CIL Label */ 
            while (1) {
              tmp___69 = jit->ip;
              (jit->ip) ++;
              *tmp___69 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
              break;
            }
            while (1) {
              imb___5.val = stack_pos;
              tmp___70 = jit->ip;
              (jit->ip) ++;
              *tmp___70 = imb___5.b[0];
              tmp___71 = jit->ip;
              (jit->ip) ++;
              *tmp___71 = imb___5.b[1];
              tmp___72 = jit->ip;
              (jit->ip) ++;
              *tmp___72 = imb___5.b[2];
              tmp___73 = jit->ip;
              (jit->ip) ++;
              *tmp___73 = imb___5.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        if (size == 8) {
          goto _L___7;
        } else
        if (size == 4) {
          _L___7: /* CIL Label */ 
          while (1) {
            if (size == 2) {
              tmp___74 = jit->ip;
              (jit->ip) ++;
              *tmp___74 = (unsigned char)102;
            }
            while (1) {
              if (size > 4) {
                tmp___75 = 8;
              } else {
                tmp___75 = 0;
              }
              if (dreg > 7) {
                tmp___76 = 4;
              } else {
                tmp___76 = 0;
              }
              if (stack_reg > 7) {
                tmp___77 = 1;
              } else {
                tmp___77 = 0;
              }
              _amd64_rex_bits___2 = (unsigned char )((tmp___75 | tmp___76) | tmp___77);
              if ((int )_amd64_rex_bits___2 != 0) {
                tmp___78 = jit->ip;
                (jit->ip) ++;
                *tmp___78 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
              } else
              if (size == 1) {
                tmp___78 = jit->ip;
                (jit->ip) ++;
                *tmp___78 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
              }
              break;
            }
            switch (size) {
            case 1: 
            tmp___79 = jit->ip;
            (jit->ip) ++;
            *tmp___79 = (unsigned char)138;
            break;
            case 8: 
            case 4: 
            case 2: 
            tmp___80 = jit->ip;
            (jit->ip) ++;
            *tmp___80 = (unsigned char)139;
            break;
            default: 
            tmp___81 = __builtin_expect(1L, 0L);
            if (tmp___81) {
              __assert_rtn("emit_get_arg_from_stack", "./jitter-amd64.c", 2648, "0");
            }
            }
            while (1) {
              if (stack_reg == 16) {
                while (1) {
                  tmp___82 = jit->ip;
                  (jit->ip) ++;
                  *tmp___82 = (unsigned char )((((dreg & 7) & 7) << 3) | 5);
                  break;
                }
                while (1) {
                  imb___6.val = stack_pos;
                  tmp___83 = jit->ip;
                  (jit->ip) ++;
                  *tmp___83 = imb___6.b[0];
                  tmp___84 = jit->ip;
                  (jit->ip) ++;
                  *tmp___84 = imb___6.b[1];
                  tmp___85 = jit->ip;
                  (jit->ip) ++;
                  *tmp___85 = imb___6.b[2];
                  tmp___86 = jit->ip;
                  (jit->ip) ++;
                  *tmp___86 = imb___6.b[3];
                  break;
                }
              } else {
                while (1) {
                  if ((stack_reg & 7) == 4) {
                    if (stack_pos == 0) {
                      while (1) {
                        tmp___87 = jit->ip;
                        (jit->ip) ++;
                        *tmp___87 = (unsigned char )((((dreg & 7) & 7) << 3) | 4);
                        break;
                      }
                      while (1) {
                        tmp___88 = jit->ip;
                        (jit->ip) ++;
                        *tmp___88 = (unsigned char )((4 << 3) | 4);
                        break;
                      }
                    } else
                    if (stack_pos >= -128) {
                      if (stack_pos <= 127) {
                        while (1) {
                          tmp___89 = jit->ip;
                          (jit->ip) ++;
                          *tmp___89 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                          break;
                        }
                        while (1) {
                          tmp___90 = jit->ip;
                          (jit->ip) ++;
                          *tmp___90 = (unsigned char )((4 << 3) | 4);
                          break;
                        }
                        while (1) {
                          *(jit->ip) = (unsigned char )(stack_pos & 255);
                          (jit->ip) ++;
                          break;
                        }
                      } else {
                        goto _L___5;
                      }
                    } else {
                      _L___5: /* CIL Label */ 
                      while (1) {
                        tmp___91 = jit->ip;
                        (jit->ip) ++;
                        *tmp___91 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                        break;
                      }
                      while (1) {
                        tmp___92 = jit->ip;
                        (jit->ip) ++;
                        *tmp___92 = (unsigned char )((4 << 3) | 4);
                        break;
                      }
                      while (1) {
                        imb___7.val = stack_pos;
                        tmp___93 = jit->ip;
                        (jit->ip) ++;
                        *tmp___93 = imb___7.b[0];
                        tmp___94 = jit->ip;
                        (jit->ip) ++;
                        *tmp___94 = imb___7.b[1];
                        tmp___95 = jit->ip;
                        (jit->ip) ++;
                        *tmp___95 = imb___7.b[2];
                        tmp___96 = jit->ip;
                        (jit->ip) ++;
                        *tmp___96 = imb___7.b[3];
                        break;
                      }
                    }
                    break;
                  }
                  if (stack_pos == 0) {
                    if ((stack_reg & 7) != 5) {
                      while (1) {
                        tmp___97 = jit->ip;
                        (jit->ip) ++;
                        *tmp___97 = (unsigned char )((((dreg & 7) & 7) << 3) | ((stack_reg & 7) & 7));
                        break;
                      }
                      break;
                    }
                  }
                  if (stack_pos >= -128) {
                    if (stack_pos <= 127) {
                      while (1) {
                        tmp___98 = jit->ip;
                        (jit->ip) ++;
                        *tmp___98 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                        break;
                      }
                      while (1) {
                        *(jit->ip) = (unsigned char )(stack_pos & 255);
                        (jit->ip) ++;
                        break;
                      }
                    } else {
                      goto _L___6;
                    }
                  } else {
                    _L___6: /* CIL Label */ 
                    while (1) {
                      tmp___99 = jit->ip;
                      (jit->ip) ++;
                      *tmp___99 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                      break;
                    }
                    while (1) {
                      imb___8.val = stack_pos;
                      tmp___100 = jit->ip;
                      (jit->ip) ++;
                      *tmp___100 = imb___8.b[0];
                      tmp___101 = jit->ip;
                      (jit->ip) ++;
                      *tmp___101 = imb___8.b[1];
                      tmp___102 = jit->ip;
                      (jit->ip) ++;
                      *tmp___102 = imb___8.b[2];
                      tmp___103 = jit->ip;
                      (jit->ip) ++;
                      *tmp___103 = imb___8.b[3];
                      break;
                    }
                  }
                  break;
                }
              }
              break;
            }
            break;
          }
          break;
        }
        while (1) {
          if (dreg > 7) {
            tmp___104 = 4;
          } else {
            tmp___104 = 0;
          }
          if (stack_reg > 7) {
            tmp___105 = 1;
          } else {
            tmp___105 = 0;
          }
          _amd64_rex_bits___3 = (unsigned char )((8 | tmp___104) | tmp___105);
          if ((int )_amd64_rex_bits___3 != 0) {
            tmp___106 = jit->ip;
            (jit->ip) ++;
            *tmp___106 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          }
          break;
        }
        tmp___107 = jit->ip;
        (jit->ip) ++;
        *tmp___107 = (unsigned char)15;
        switch (size) {
        case 1: 
        tmp___108 = jit->ip;
        (jit->ip) ++;
        *tmp___108 = (unsigned char)182;
        break;
        case 2: 
        tmp___109 = jit->ip;
        (jit->ip) ++;
        *tmp___109 = (unsigned char)183;
        break;
        default: 
        tmp___110 = __builtin_expect(1L, 0L);
        if (tmp___110) {
          __assert_rtn("emit_get_arg_from_stack", "./jitter-amd64.c", 2648, "0");
        }
        }
        while (1) {
          if ((stack_reg & 7) == 4) {
            if (stack_pos == 0) {
              while (1) {
                tmp___111 = jit->ip;
                (jit->ip) ++;
                *tmp___111 = (unsigned char )((((dreg & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___112 = jit->ip;
                (jit->ip) ++;
                *tmp___112 = (unsigned char )((4 << 3) | 4);
                break;
              }
            } else
            if (stack_pos >= -128) {
              if (stack_pos <= 127) {
                while (1) {
                  tmp___113 = jit->ip;
                  (jit->ip) ++;
                  *tmp___113 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___114 = jit->ip;
                  (jit->ip) ++;
                  *tmp___114 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(stack_pos & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___8;
              }
            } else {
              _L___8: /* CIL Label */ 
              while (1) {
                tmp___115 = jit->ip;
                (jit->ip) ++;
                *tmp___115 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___116 = jit->ip;
                (jit->ip) ++;
                *tmp___116 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                imb___9.val = stack_pos;
                tmp___117 = jit->ip;
                (jit->ip) ++;
                *tmp___117 = imb___9.b[0];
                tmp___118 = jit->ip;
                (jit->ip) ++;
                *tmp___118 = imb___9.b[1];
                tmp___119 = jit->ip;
                (jit->ip) ++;
                *tmp___119 = imb___9.b[2];
                tmp___120 = jit->ip;
                (jit->ip) ++;
                *tmp___120 = imb___9.b[3];
                break;
              }
            }
            break;
          }
          if (stack_pos == 0) {
            if ((stack_reg & 7) != 5) {
              while (1) {
                tmp___121 = jit->ip;
                (jit->ip) ++;
                *tmp___121 = (unsigned char )((((dreg & 7) & 7) << 3) | ((stack_reg & 7) & 7));
                break;
              }
              break;
            }
          }
          if (stack_pos >= -128) {
            if (stack_pos <= 127) {
              while (1) {
                tmp___122 = jit->ip;
                (jit->ip) ++;
                *tmp___122 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(stack_pos & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___9;
            }
          } else {
            _L___9: /* CIL Label */ 
            while (1) {
              tmp___123 = jit->ip;
              (jit->ip) ++;
              *tmp___123 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
              break;
            }
            while (1) {
              imb___10.val = stack_pos;
              tmp___124 = jit->ip;
              (jit->ip) ++;
              *tmp___124 = imb___10.b[0];
              tmp___125 = jit->ip;
              (jit->ip) ++;
              *tmp___125 = imb___10.b[1];
              tmp___126 = jit->ip;
              (jit->ip) ++;
              *tmp___126 = imb___10.b[2];
              tmp___127 = jit->ip;
              (jit->ip) ++;
              *tmp___127 = imb___10.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
    }
  } else {
    while (1) {
      tmp___128 = jit->ip;
      (jit->ip) ++;
      *tmp___128 = (unsigned char)102;
      while (1) {
        if (dreg > 7) {
          tmp___129 = 4;
        } else {
          tmp___129 = 0;
        }
        if (stack_reg > 7) {
          tmp___130 = 1;
        } else {
          tmp___130 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )(tmp___129 | tmp___130);
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___131 = jit->ip;
          (jit->ip) ++;
          *tmp___131 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      tmp___132 = jit->ip;
      (jit->ip) ++;
      *tmp___132 = (unsigned char)15;
      tmp___133 = jit->ip;
      (jit->ip) ++;
      *tmp___133 = (unsigned char)18;
      while (1) {
        if (stack_reg == 16) {
          while (1) {
            tmp___134 = jit->ip;
            (jit->ip) ++;
            *tmp___134 = (unsigned char )((((dreg & 7) & 7) << 3) | 5);
            break;
          }
          while (1) {
            imb___11.val = stack_pos;
            tmp___135 = jit->ip;
            (jit->ip) ++;
            *tmp___135 = imb___11.b[0];
            tmp___136 = jit->ip;
            (jit->ip) ++;
            *tmp___136 = imb___11.b[1];
            tmp___137 = jit->ip;
            (jit->ip) ++;
            *tmp___137 = imb___11.b[2];
            tmp___138 = jit->ip;
            (jit->ip) ++;
            *tmp___138 = imb___11.b[3];
            break;
          }
        } else {
          while (1) {
            if ((stack_reg & 7) == 4) {
              if (stack_pos == 0) {
                while (1) {
                  tmp___139 = jit->ip;
                  (jit->ip) ++;
                  *tmp___139 = (unsigned char )((((dreg & 7) & 7) << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___140 = jit->ip;
                  (jit->ip) ++;
                  *tmp___140 = (unsigned char )((4 << 3) | 4);
                  break;
                }
              } else
              if (stack_pos >= -128) {
                if (stack_pos <= 127) {
                  while (1) {
                    tmp___141 = jit->ip;
                    (jit->ip) ++;
                    *tmp___141 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___142 = jit->ip;
                    (jit->ip) ++;
                    *tmp___142 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(stack_pos & 255);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___10;
                }
              } else {
                _L___10: /* CIL Label */ 
                while (1) {
                  tmp___143 = jit->ip;
                  (jit->ip) ++;
                  *tmp___143 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___144 = jit->ip;
                  (jit->ip) ++;
                  *tmp___144 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  imb___12.val = stack_pos;
                  tmp___145 = jit->ip;
                  (jit->ip) ++;
                  *tmp___145 = imb___12.b[0];
                  tmp___146 = jit->ip;
                  (jit->ip) ++;
                  *tmp___146 = imb___12.b[1];
                  tmp___147 = jit->ip;
                  (jit->ip) ++;
                  *tmp___147 = imb___12.b[2];
                  tmp___148 = jit->ip;
                  (jit->ip) ++;
                  *tmp___148 = imb___12.b[3];
                  break;
                }
              }
              break;
            }
            if (stack_pos == 0) {
              if ((stack_reg & 7) != 5) {
                while (1) {
                  tmp___149 = jit->ip;
                  (jit->ip) ++;
                  *tmp___149 = (unsigned char )((((dreg & 7) & 7) << 3) | ((stack_reg & 7) & 7));
                  break;
                }
                break;
              }
            }
            if (stack_pos >= -128) {
              if (stack_pos <= 127) {
                while (1) {
                  tmp___150 = jit->ip;
                  (jit->ip) ++;
                  *tmp___150 = (unsigned char )(((1 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(stack_pos & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___11;
              }
            } else {
              _L___11: /* CIL Label */ 
              while (1) {
                tmp___151 = jit->ip;
                (jit->ip) ++;
                *tmp___151 = (unsigned char )(((2 << 6) | (((dreg & 7) & 7) << 3)) | ((stack_reg & 7) & 7));
                break;
              }
              while (1) {
                imb___13.val = stack_pos;
                tmp___152 = jit->ip;
                (jit->ip) ++;
                *tmp___152 = imb___13.b[0];
                tmp___153 = jit->ip;
                (jit->ip) ++;
                *tmp___153 = imb___13.b[1];
                tmp___154 = jit->ip;
                (jit->ip) ++;
                *tmp___154 = imb___13.b[2];
                tmp___155 = jit->ip;
                (jit->ip) ++;
                *tmp___155 = imb___13.b[3];
                break;
              }
            }
            break;
          }
        }
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_get_arg_from_stack LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_mul_op LOC=UNKNOWN */
static void emit_mul_op(struct jit *jit , struct jit_op *op , int imm , int sign ,
                        int high_bytes ) 
{ 
  jit_value dest ;
  jit_value factor1 ;
  jit_value factor2 ;
  unsigned char _amd64_rex_bits ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  x86_imm_buf imb ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___48 ;
  int tmp___49 ;
  int tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  long tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___62 ;
  int tmp___63 ;
  int tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___84 ;
  int tmp___85 ;
  int tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  long tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___98 ;
  int tmp___99 ;
  int tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___115 ;
  unsigned char *tmp___116 ;
  unsigned char *tmp___117 ;
  unsigned char *tmp___118 ;
  int ax_in_use ;
  int tmp___119 ;
  int dx_in_use ;
  int tmp___120 ;
  unsigned char _amd64_rex_bits___8 ;
  unsigned char *tmp___121 ;
  unsigned char *tmp___122 ;
  unsigned char _amd64_rex_bits___9 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  unsigned char *tmp___125 ;
  unsigned char _amd64_rex_bits___10 ;
  int tmp___126 ;
  int tmp___127 ;
  unsigned char *tmp___128 ;
  unsigned char *tmp___129 ;
  unsigned char *tmp___130 ;
  long tmp___131 ;
  unsigned char *tmp___132 ;
  unsigned char _amd64_rex_bits___11 ;
  int tmp___133 ;
  unsigned char *tmp___134 ;
  unsigned char *tmp___135 ;
  amd64_imm_buf imb___7 ;
  unsigned char *tmp___136 ;
  unsigned char *tmp___137 ;
  unsigned char *tmp___138 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  unsigned char *tmp___141 ;
  unsigned char *tmp___142 ;
  unsigned char *tmp___143 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  unsigned char *tmp___146 ;
  unsigned char *tmp___147 ;
  unsigned char _amd64_rex_bits___12 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;
  unsigned char *tmp___150 ;
  int tmp___151 ;
  unsigned char _amd64_rex_bits___13 ;
  int tmp___152 ;
  unsigned char *tmp___153 ;
  unsigned char *tmp___154 ;
  unsigned char *tmp___155 ;
  int tmp___156 ;
  unsigned char _amd64_rex_bits___14 ;
  int tmp___157 ;
  unsigned char *tmp___158 ;
  unsigned char *tmp___159 ;
  unsigned char *tmp___160 ;
  int tmp___161 ;
  unsigned char *tmp___162 ;
  unsigned char _amd64_rex_bits___15 ;
  int tmp___163 ;
  int tmp___164 ;
  unsigned char *tmp___165 ;
  unsigned char *tmp___166 ;
  unsigned char *tmp___167 ;
  long tmp___168 ;
  unsigned char *tmp___169 ;
  unsigned char _amd64_rex_bits___16 ;
  int tmp___170 ;
  unsigned char *tmp___171 ;
  unsigned char *tmp___172 ;
  unsigned char *tmp___173 ;
  int tmp___174 ;
  unsigned char *tmp___175 ;
  unsigned char _amd64_rex_bits___17 ;
  int tmp___176 ;
  int tmp___177 ;
  unsigned char *tmp___178 ;
  unsigned char *tmp___179 ;
  unsigned char *tmp___180 ;
  long tmp___181 ;
  unsigned char *tmp___182 ;
  unsigned char *tmp___183 ;
  unsigned char _amd64_rex_bits___18 ;
  int tmp___184 ;
  int tmp___185 ;
  unsigned char *tmp___186 ;
  unsigned char *tmp___187 ;
  unsigned char *tmp___188 ;
  long tmp___189 ;
  unsigned char *tmp___190 ;
  unsigned char _amd64_rex_bits___19 ;
  unsigned char *tmp___191 ;
  unsigned char *tmp___192 ;
  unsigned char _amd64_rex_bits___20 ;
  unsigned char *tmp___193 ;
  unsigned char *tmp___194 ;

  {
  dest = op->r_arg[0];
  factor1 = op->r_arg[1];
  factor2 = op->r_arg[2];
  if (! high_bytes) {
    if (imm) {
      switch (factor2) {
      case 2L: 
      if (factor1 == dest) {
        while (1) {
          while (1) {
            if (dest > 7L) {
              tmp = 1;
            } else {
              tmp = 0;
            }
            _amd64_rex_bits = (unsigned char )(8 | tmp);
            if ((int )_amd64_rex_bits != 0) {
              tmp___0 = jit->ip;
              (jit->ip) ++;
              *tmp___0 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          while (1) {
            tmp___1 = jit->ip;
            (jit->ip) ++;
            *tmp___1 = (unsigned char)209;
            while (1) {
              while (1) {
                tmp___2 = jit->ip;
                (jit->ip) ++;
                *tmp___2 = (unsigned char )((long )((3 << 6) | (4 << 3)) | ((dest & 7L) & 7L));
                break;
              }
              break;
            }
            break;
          }
          break;
        }
      } else {
        while (1) {
          while (1) {
            if (dest > 7L) {
              tmp___5 = 4;
            } else {
              tmp___5 = 0;
            }
            if (factor1 > 7L) {
              tmp___6 = 2;
            } else {
              tmp___6 = 0;
            }
            if (factor1 > 7L) {
              tmp___7 = 1;
            } else {
              tmp___7 = 0;
            }
            _amd64_rex_bits___0 = (unsigned char )(((8 | tmp___5) | tmp___6) | tmp___7);
            if ((int )_amd64_rex_bits___0 != 0) {
              tmp___8 = jit->ip;
              (jit->ip) ++;
              *tmp___8 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
            }
            break;
          }
          while (1) {
            tmp___9 = jit->ip;
            (jit->ip) ++;
            *tmp___9 = (unsigned char)141;
            while (1) {
              if (factor1 == -1L) {
                while (1) {
                  tmp___10 = jit->ip;
                  (jit->ip) ++;
                  *tmp___10 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
                  break;
                }
                while (1) {
                  tmp___11 = jit->ip;
                  (jit->ip) ++;
                  *tmp___11 = (unsigned char )((((factor1 & 7L) & 7L) << 3) | 5L);
                  break;
                }
                while (1) {
                  imb.val = 0;
                  tmp___12 = jit->ip;
                  (jit->ip) ++;
                  *tmp___12 = imb.b[0];
                  tmp___13 = jit->ip;
                  (jit->ip) ++;
                  *tmp___13 = imb.b[1];
                  tmp___14 = jit->ip;
                  (jit->ip) ++;
                  *tmp___14 = imb.b[2];
                  tmp___15 = jit->ip;
                  (jit->ip) ++;
                  *tmp___15 = imb.b[3];
                  break;
                }
              } else
              if (factor1 != 5L) {
                while (1) {
                  tmp___16 = jit->ip;
                  (jit->ip) ++;
                  *tmp___16 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
                  break;
                }
                while (1) {
                  tmp___17 = jit->ip;
                  (jit->ip) ++;
                  *tmp___17 = (unsigned char )(((((factor1 & 7L) & 7L) & 7L) << 3) | ((factor1 & 7L) & 7L));
                  break;
                }
              } else {
                while (1) {
                  tmp___18 = jit->ip;
                  (jit->ip) ++;
                  *tmp___18 = (unsigned char )(((long )(1 << 6) | (((dest & 7L) & 7L) << 3)) | 4L);
                  break;
                }
                while (1) {
                  tmp___19 = jit->ip;
                  (jit->ip) ++;
                  *tmp___19 = (unsigned char )(((((factor1 & 7L) & 7L) & 7L) << 3) | ((factor1 & 7L) & 7L));
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char)0;
                  (jit->ip) ++;
                  break;
                }
              }
              break;
            }
            break;
          }
          break;
        }
      }
      return;
      case 3L: 
      while (1) {
        while (1) {
          if (dest > 7L) {
            tmp___26 = 4;
          } else {
            tmp___26 = 0;
          }
          if (factor1 > 7L) {
            tmp___27 = 2;
          } else {
            tmp___27 = 0;
          }
          if (factor1 > 7L) {
            tmp___28 = 1;
          } else {
            tmp___28 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )(((8 | tmp___26) | tmp___27) | tmp___28);
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___29 = jit->ip;
            (jit->ip) ++;
            *tmp___29 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        while (1) {
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = (unsigned char)141;
          while (1) {
            if (factor1 == -1L) {
              while (1) {
                tmp___31 = jit->ip;
                (jit->ip) ++;
                *tmp___31 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___32 = jit->ip;
                (jit->ip) ++;
                *tmp___32 = (unsigned char )(((long )(1 << 6) | (((factor1 & 7L) & 7L) << 3)) | 5L);
                break;
              }
              while (1) {
                imb___1.val = 0;
                tmp___33 = jit->ip;
                (jit->ip) ++;
                *tmp___33 = imb___1.b[0];
                tmp___34 = jit->ip;
                (jit->ip) ++;
                *tmp___34 = imb___1.b[1];
                tmp___35 = jit->ip;
                (jit->ip) ++;
                *tmp___35 = imb___1.b[2];
                tmp___36 = jit->ip;
                (jit->ip) ++;
                *tmp___36 = imb___1.b[3];
                break;
              }
            } else
            if (factor1 != 5L) {
              while (1) {
                tmp___37 = jit->ip;
                (jit->ip) ++;
                *tmp___37 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___38 = jit->ip;
                (jit->ip) ++;
                *tmp___38 = (unsigned char )(((long )(1 << 6) | ((((factor1 & 7L) & 7L) & 7L) << 3)) | ((factor1 & 7L) & 7L));
                break;
              }
            } else {
              while (1) {
                tmp___39 = jit->ip;
                (jit->ip) ++;
                *tmp___39 = (unsigned char )(((long )(1 << 6) | (((dest & 7L) & 7L) << 3)) | 4L);
                break;
              }
              while (1) {
                tmp___40 = jit->ip;
                (jit->ip) ++;
                *tmp___40 = (unsigned char )(((long )(1 << 6) | ((((factor1 & 7L) & 7L) & 7L) << 3)) | ((factor1 & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
            }
            break;
          }
          break;
        }
        break;
      }
      return;
      case 4L: 
      if (factor1 != dest) {
        while (1) {
          if (sizeof(void *) == 2UL) {
            tmp___47 = jit->ip;
            (jit->ip) ++;
            *tmp___47 = (unsigned char)102;
          }
          while (1) {
            if (sizeof(void *) > 4UL) {
              tmp___48 = 8;
            } else {
              tmp___48 = 0;
            }
            if (dest > 7L) {
              tmp___49 = 4;
            } else {
              tmp___49 = 0;
            }
            if (factor1 > 7L) {
              tmp___50 = 1;
            } else {
              tmp___50 = 0;
            }
            _amd64_rex_bits___2 = (unsigned char )((tmp___48 | tmp___49) | tmp___50);
            if ((int )_amd64_rex_bits___2 != 0) {
              tmp___51 = jit->ip;
              (jit->ip) ++;
              *tmp___51 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
            } else
            if (sizeof(void *) == 1UL) {
              tmp___51 = jit->ip;
              (jit->ip) ++;
              *tmp___51 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
            }
            break;
          }
          switch (sizeof(void *)) {
          case 1UL: 
          tmp___52 = jit->ip;
          (jit->ip) ++;
          *tmp___52 = (unsigned char)138;
          break;
          case 8UL: 
          case 4UL: 
          case 2UL: 
          tmp___53 = jit->ip;
          (jit->ip) ++;
          *tmp___53 = (unsigned char)139;
          break;
          default: 
          tmp___54 = __builtin_expect(1L, 0L);
          if (tmp___54) {
            __assert_rtn("emit_mul_op", "./jitter-amd64.c", 2805, "0");
          }
          }
          while (1) {
            while (1) {
              tmp___55 = jit->ip;
              (jit->ip) ++;
              *tmp___55 = (unsigned char )(((long )(3 << 6) | ((dest & 7L) << 3)) | (factor1 & 7L));
              break;
            }
            break;
          }
          break;
        }
      }
      while (1) {
        while (1) {
          if (dest > 7L) {
            tmp___56 = 1;
          } else {
            tmp___56 = 0;
          }
          _amd64_rex_bits___3 = (unsigned char )(8 | tmp___56);
          if ((int )_amd64_rex_bits___3 != 0) {
            tmp___57 = jit->ip;
            (jit->ip) ++;
            *tmp___57 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          }
          break;
        }
        while (1) {
          tmp___60 = jit->ip;
          (jit->ip) ++;
          *tmp___60 = (unsigned char)193;
          while (1) {
            while (1) {
              tmp___61 = jit->ip;
              (jit->ip) ++;
              *tmp___61 = (unsigned char )((long )((3 << 6) | (4 << 3)) | ((dest & 7L) & 7L));
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)2;
            (jit->ip) ++;
            break;
          }
          break;
        }
        break;
      }
      return;
      case 5L: 
      while (1) {
        while (1) {
          if (dest > 7L) {
            tmp___62 = 4;
          } else {
            tmp___62 = 0;
          }
          if (factor1 > 7L) {
            tmp___63 = 2;
          } else {
            tmp___63 = 0;
          }
          if (factor1 > 7L) {
            tmp___64 = 1;
          } else {
            tmp___64 = 0;
          }
          _amd64_rex_bits___4 = (unsigned char )(((8 | tmp___62) | tmp___63) | tmp___64);
          if ((int )_amd64_rex_bits___4 != 0) {
            tmp___65 = jit->ip;
            (jit->ip) ++;
            *tmp___65 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
          }
          break;
        }
        while (1) {
          tmp___66 = jit->ip;
          (jit->ip) ++;
          *tmp___66 = (unsigned char)141;
          while (1) {
            if (factor1 == -1L) {
              while (1) {
                tmp___67 = jit->ip;
                (jit->ip) ++;
                *tmp___67 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___68 = jit->ip;
                (jit->ip) ++;
                *tmp___68 = (unsigned char )(((long )(2 << 6) | (((factor1 & 7L) & 7L) << 3)) | 5L);
                break;
              }
              while (1) {
                imb___3.val = 0;
                tmp___69 = jit->ip;
                (jit->ip) ++;
                *tmp___69 = imb___3.b[0];
                tmp___70 = jit->ip;
                (jit->ip) ++;
                *tmp___70 = imb___3.b[1];
                tmp___71 = jit->ip;
                (jit->ip) ++;
                *tmp___71 = imb___3.b[2];
                tmp___72 = jit->ip;
                (jit->ip) ++;
                *tmp___72 = imb___3.b[3];
                break;
              }
            } else
            if (factor1 != 5L) {
              while (1) {
                tmp___73 = jit->ip;
                (jit->ip) ++;
                *tmp___73 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___74 = jit->ip;
                (jit->ip) ++;
                *tmp___74 = (unsigned char )(((long )(2 << 6) | ((((factor1 & 7L) & 7L) & 7L) << 3)) | ((factor1 & 7L) & 7L));
                break;
              }
            } else {
              while (1) {
                tmp___75 = jit->ip;
                (jit->ip) ++;
                *tmp___75 = (unsigned char )(((long )(1 << 6) | (((dest & 7L) & 7L) << 3)) | 4L);
                break;
              }
              while (1) {
                tmp___76 = jit->ip;
                (jit->ip) ++;
                *tmp___76 = (unsigned char )(((long )(2 << 6) | ((((factor1 & 7L) & 7L) & 7L) << 3)) | ((factor1 & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
            }
            break;
          }
          break;
        }
        break;
      }
      return;
      case 8L: 
      if (factor1 != dest) {
        while (1) {
          if (sizeof(void *) == 2UL) {
            tmp___83 = jit->ip;
            (jit->ip) ++;
            *tmp___83 = (unsigned char)102;
          }
          while (1) {
            if (sizeof(void *) > 4UL) {
              tmp___84 = 8;
            } else {
              tmp___84 = 0;
            }
            if (dest > 7L) {
              tmp___85 = 4;
            } else {
              tmp___85 = 0;
            }
            if (factor1 > 7L) {
              tmp___86 = 1;
            } else {
              tmp___86 = 0;
            }
            _amd64_rex_bits___5 = (unsigned char )((tmp___84 | tmp___85) | tmp___86);
            if ((int )_amd64_rex_bits___5 != 0) {
              tmp___87 = jit->ip;
              (jit->ip) ++;
              *tmp___87 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
            } else
            if (sizeof(void *) == 1UL) {
              tmp___87 = jit->ip;
              (jit->ip) ++;
              *tmp___87 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
            }
            break;
          }
          switch (sizeof(void *)) {
          case 1UL: 
          tmp___88 = jit->ip;
          (jit->ip) ++;
          *tmp___88 = (unsigned char)138;
          break;
          case 8UL: 
          case 4UL: 
          case 2UL: 
          tmp___89 = jit->ip;
          (jit->ip) ++;
          *tmp___89 = (unsigned char)139;
          break;
          default: 
          tmp___90 = __builtin_expect(1L, 0L);
          if (tmp___90) {
            __assert_rtn("emit_mul_op", "./jitter-amd64.c", 2810, "0");
          }
          }
          while (1) {
            while (1) {
              tmp___91 = jit->ip;
              (jit->ip) ++;
              *tmp___91 = (unsigned char )(((long )(3 << 6) | ((dest & 7L) << 3)) | (factor1 & 7L));
              break;
            }
            break;
          }
          break;
        }
      }
      while (1) {
        while (1) {
          if (dest > 7L) {
            tmp___92 = 1;
          } else {
            tmp___92 = 0;
          }
          _amd64_rex_bits___6 = (unsigned char )(8 | tmp___92);
          if ((int )_amd64_rex_bits___6 != 0) {
            tmp___93 = jit->ip;
            (jit->ip) ++;
            *tmp___93 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
          }
          break;
        }
        while (1) {
          tmp___96 = jit->ip;
          (jit->ip) ++;
          *tmp___96 = (unsigned char)193;
          while (1) {
            while (1) {
              tmp___97 = jit->ip;
              (jit->ip) ++;
              *tmp___97 = (unsigned char )((long )((3 << 6) | (4 << 3)) | ((dest & 7L) & 7L));
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)3;
            (jit->ip) ++;
            break;
          }
          break;
        }
        break;
      }
      return;
      case 9L: 
      while (1) {
        while (1) {
          if (dest > 7L) {
            tmp___98 = 4;
          } else {
            tmp___98 = 0;
          }
          if (factor1 > 7L) {
            tmp___99 = 2;
          } else {
            tmp___99 = 0;
          }
          if (factor1 > 7L) {
            tmp___100 = 1;
          } else {
            tmp___100 = 0;
          }
          _amd64_rex_bits___7 = (unsigned char )(((8 | tmp___98) | tmp___99) | tmp___100);
          if ((int )_amd64_rex_bits___7 != 0) {
            tmp___101 = jit->ip;
            (jit->ip) ++;
            *tmp___101 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
          }
          break;
        }
        while (1) {
          tmp___102 = jit->ip;
          (jit->ip) ++;
          *tmp___102 = (unsigned char)141;
          while (1) {
            if (factor1 == -1L) {
              while (1) {
                tmp___103 = jit->ip;
                (jit->ip) ++;
                *tmp___103 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___104 = jit->ip;
                (jit->ip) ++;
                *tmp___104 = (unsigned char )(((long )(3 << 6) | (((factor1 & 7L) & 7L) << 3)) | 5L);
                break;
              }
              while (1) {
                imb___5.val = 0;
                tmp___105 = jit->ip;
                (jit->ip) ++;
                *tmp___105 = imb___5.b[0];
                tmp___106 = jit->ip;
                (jit->ip) ++;
                *tmp___106 = imb___5.b[1];
                tmp___107 = jit->ip;
                (jit->ip) ++;
                *tmp___107 = imb___5.b[2];
                tmp___108 = jit->ip;
                (jit->ip) ++;
                *tmp___108 = imb___5.b[3];
                break;
              }
            } else
            if (factor1 != 5L) {
              while (1) {
                tmp___109 = jit->ip;
                (jit->ip) ++;
                *tmp___109 = (unsigned char )((((dest & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___110 = jit->ip;
                (jit->ip) ++;
                *tmp___110 = (unsigned char )(((long )(3 << 6) | ((((factor1 & 7L) & 7L) & 7L) << 3)) | ((factor1 & 7L) & 7L));
                break;
              }
            } else {
              while (1) {
                tmp___111 = jit->ip;
                (jit->ip) ++;
                *tmp___111 = (unsigned char )(((long )(1 << 6) | (((dest & 7L) & 7L) << 3)) | 4L);
                break;
              }
              while (1) {
                tmp___112 = jit->ip;
                (jit->ip) ++;
                *tmp___112 = (unsigned char )(((long )(3 << 6) | ((((factor1 & 7L) & 7L) & 7L) << 3)) | ((factor1 & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
            }
            break;
          }
          break;
        }
        break;
      }
      return;
      }
    }
  }
  tmp___119 = jit_reg_in_use(op, 0, 0);
  ax_in_use = tmp___119;
  tmp___120 = jit_reg_in_use(op, 2, 0);
  dx_in_use = tmp___120;
  if (dest != 0L) {
    if (ax_in_use) {
      while (1) {
        while (1) {
          _amd64_rex_bits___8 = (unsigned char)0;
          if ((int )_amd64_rex_bits___8 != 0) {
            tmp___121 = jit->ip;
            (jit->ip) ++;
            *tmp___121 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
          }
          break;
        }
        tmp___122 = jit->ip;
        (jit->ip) ++;
        *tmp___122 = (unsigned char)80;
        break;
      }
    }
  }
  if (dest != 2L) {
    if (dx_in_use) {
      while (1) {
        while (1) {
          _amd64_rex_bits___9 = (unsigned char)0;
          if ((int )_amd64_rex_bits___9 != 0) {
            tmp___123 = jit->ip;
            (jit->ip) ++;
            *tmp___123 = (unsigned char )(64 | (int )_amd64_rex_bits___9);
          }
          break;
        }
        tmp___124 = jit->ip;
        (jit->ip) ++;
        *tmp___124 = (unsigned char)82;
        break;
      }
    }
  }
  if (imm) {
    if (factor1 != 0L) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp___125 = jit->ip;
          (jit->ip) ++;
          *tmp___125 = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___126 = 8;
          } else {
            tmp___126 = 0;
          }
          if (factor1 > 7L) {
            tmp___127 = 1;
          } else {
            tmp___127 = 0;
          }
          _amd64_rex_bits___10 = (unsigned char )(tmp___126 | tmp___127);
          if ((int )_amd64_rex_bits___10 != 0) {
            tmp___128 = jit->ip;
            (jit->ip) ++;
            *tmp___128 = (unsigned char )(64 | (int )_amd64_rex_bits___10);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___128 = jit->ip;
            (jit->ip) ++;
            *tmp___128 = (unsigned char )(64 | (int )_amd64_rex_bits___10);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___129 = jit->ip;
        (jit->ip) ++;
        *tmp___129 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___130 = jit->ip;
        (jit->ip) ++;
        *tmp___130 = (unsigned char)139;
        break;
        default: 
        tmp___131 = __builtin_expect(1L, 0L);
        if (tmp___131) {
          __assert_rtn("emit_mul_op", "./jitter-amd64.c", 2827, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___132 = jit->ip;
            (jit->ip) ++;
            *tmp___132 = (unsigned char )((long )(3 << 6) | (factor1 & 7L));
            break;
          }
          break;
        }
        break;
      }
    }
    while (1) {
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___133 = 8;
        } else {
          tmp___133 = 0;
        }
        _amd64_rex_bits___11 = (unsigned char )tmp___133;
        if ((int )_amd64_rex_bits___11 != 0) {
          tmp___134 = jit->ip;
          (jit->ip) ++;
          *tmp___134 = (unsigned char )(64 | (int )_amd64_rex_bits___11);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___134 = jit->ip;
          (jit->ip) ++;
          *tmp___134 = (unsigned char )(64 | (int )_amd64_rex_bits___11);
        }
        break;
      }
      tmp___135 = jit->ip;
      (jit->ip) ++;
      *tmp___135 = (unsigned char)186;
      if (sizeof(void *) == 8UL) {
        while (1) {
          imb___7.val = (size_t )factor2;
          tmp___136 = jit->ip;
          (jit->ip) ++;
          *tmp___136 = imb___7.b[0];
          tmp___137 = jit->ip;
          (jit->ip) ++;
          *tmp___137 = imb___7.b[1];
          tmp___138 = jit->ip;
          (jit->ip) ++;
          *tmp___138 = imb___7.b[2];
          tmp___139 = jit->ip;
          (jit->ip) ++;
          *tmp___139 = imb___7.b[3];
          tmp___140 = jit->ip;
          (jit->ip) ++;
          *tmp___140 = imb___7.b[4];
          tmp___141 = jit->ip;
          (jit->ip) ++;
          *tmp___141 = imb___7.b[5];
          tmp___142 = jit->ip;
          (jit->ip) ++;
          *tmp___142 = imb___7.b[6];
          tmp___143 = jit->ip;
          (jit->ip) ++;
          *tmp___143 = imb___7.b[7];
          break;
        }
      } else {
        while (1) {
          imb___8.val = (int )((size_t )factor2);
          tmp___144 = jit->ip;
          (jit->ip) ++;
          *tmp___144 = imb___8.b[0];
          tmp___145 = jit->ip;
          (jit->ip) ++;
          *tmp___145 = imb___8.b[1];
          tmp___146 = jit->ip;
          (jit->ip) ++;
          *tmp___146 = imb___8.b[2];
          tmp___147 = jit->ip;
          (jit->ip) ++;
          *tmp___147 = imb___8.b[3];
          break;
        }
      }
      break;
    }
    while (1) {
      while (1) {
        _amd64_rex_bits___12 = (unsigned char)8;
        if ((int )_amd64_rex_bits___12 != 0) {
          tmp___148 = jit->ip;
          (jit->ip) ++;
          *tmp___148 = (unsigned char )(64 | (int )_amd64_rex_bits___12);
        }
        break;
      }
      while (1) {
        tmp___149 = jit->ip;
        (jit->ip) ++;
        *tmp___149 = (unsigned char)247;
        while (1) {
          while (1) {
            tmp___150 = jit->ip;
            (jit->ip) ++;
            if (sign) {
              tmp___151 = 1;
            } else {
              tmp___151 = 0;
            }
            *tmp___150 = (unsigned char )(((3 << 6) | (((4 + tmp___151) & 7) << 3)) | 2);
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  } else
  if (factor1 == 0L) {
    while (1) {
      while (1) {
        if (factor2 > 7L) {
          tmp___152 = 1;
        } else {
          tmp___152 = 0;
        }
        _amd64_rex_bits___13 = (unsigned char )(8 | tmp___152);
        if ((int )_amd64_rex_bits___13 != 0) {
          tmp___153 = jit->ip;
          (jit->ip) ++;
          *tmp___153 = (unsigned char )(64 | (int )_amd64_rex_bits___13);
        }
        break;
      }
      while (1) {
        tmp___154 = jit->ip;
        (jit->ip) ++;
        *tmp___154 = (unsigned char)247;
        while (1) {
          while (1) {
            tmp___155 = jit->ip;
            (jit->ip) ++;
            if (sign) {
              tmp___156 = 1;
            } else {
              tmp___156 = 0;
            }
            *tmp___155 = (unsigned char )((long )((3 << 6) | (((4 + tmp___156) & 7) << 3)) | ((factor2 & 7L) & 7L));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  } else
  if (factor2 == 0L) {
    while (1) {
      while (1) {
        if (factor1 > 7L) {
          tmp___157 = 1;
        } else {
          tmp___157 = 0;
        }
        _amd64_rex_bits___14 = (unsigned char )(8 | tmp___157);
        if ((int )_amd64_rex_bits___14 != 0) {
          tmp___158 = jit->ip;
          (jit->ip) ++;
          *tmp___158 = (unsigned char )(64 | (int )_amd64_rex_bits___14);
        }
        break;
      }
      while (1) {
        tmp___159 = jit->ip;
        (jit->ip) ++;
        *tmp___159 = (unsigned char)247;
        while (1) {
          while (1) {
            tmp___160 = jit->ip;
            (jit->ip) ++;
            if (sign) {
              tmp___161 = 1;
            } else {
              tmp___161 = 0;
            }
            *tmp___160 = (unsigned char )((long )((3 << 6) | (((4 + tmp___161) & 7) << 3)) | ((factor1 & 7L) & 7L));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___162 = jit->ip;
        (jit->ip) ++;
        *tmp___162 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___163 = 8;
        } else {
          tmp___163 = 0;
        }
        if (factor1 > 7L) {
          tmp___164 = 1;
        } else {
          tmp___164 = 0;
        }
        _amd64_rex_bits___15 = (unsigned char )(tmp___163 | tmp___164);
        if ((int )_amd64_rex_bits___15 != 0) {
          tmp___165 = jit->ip;
          (jit->ip) ++;
          *tmp___165 = (unsigned char )(64 | (int )_amd64_rex_bits___15);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___165 = jit->ip;
          (jit->ip) ++;
          *tmp___165 = (unsigned char )(64 | (int )_amd64_rex_bits___15);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___166 = jit->ip;
      (jit->ip) ++;
      *tmp___166 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___167 = jit->ip;
      (jit->ip) ++;
      *tmp___167 = (unsigned char)139;
      break;
      default: 
      tmp___168 = __builtin_expect(1L, 0L);
      if (tmp___168) {
        __assert_rtn("emit_mul_op", "./jitter-amd64.c", 2834, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___169 = jit->ip;
          (jit->ip) ++;
          *tmp___169 = (unsigned char )((long )(3 << 6) | (factor1 & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (factor2 > 7L) {
          tmp___170 = 1;
        } else {
          tmp___170 = 0;
        }
        _amd64_rex_bits___16 = (unsigned char )(8 | tmp___170);
        if ((int )_amd64_rex_bits___16 != 0) {
          tmp___171 = jit->ip;
          (jit->ip) ++;
          *tmp___171 = (unsigned char )(64 | (int )_amd64_rex_bits___16);
        }
        break;
      }
      while (1) {
        tmp___172 = jit->ip;
        (jit->ip) ++;
        *tmp___172 = (unsigned char)247;
        while (1) {
          while (1) {
            tmp___173 = jit->ip;
            (jit->ip) ++;
            if (sign) {
              tmp___174 = 1;
            } else {
              tmp___174 = 0;
            }
            *tmp___173 = (unsigned char )((long )((3 << 6) | (((4 + tmp___174) & 7) << 3)) | ((factor2 & 7L) & 7L));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  }
  if (! high_bytes) {
    if (dest != 0L) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp___175 = jit->ip;
          (jit->ip) ++;
          *tmp___175 = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___176 = 8;
          } else {
            tmp___176 = 0;
          }
          if (dest > 7L) {
            tmp___177 = 4;
          } else {
            tmp___177 = 0;
          }
          _amd64_rex_bits___17 = (unsigned char )(tmp___176 | tmp___177);
          if ((int )_amd64_rex_bits___17 != 0) {
            tmp___178 = jit->ip;
            (jit->ip) ++;
            *tmp___178 = (unsigned char )(64 | (int )_amd64_rex_bits___17);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___178 = jit->ip;
            (jit->ip) ++;
            *tmp___178 = (unsigned char )(64 | (int )_amd64_rex_bits___17);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___179 = jit->ip;
        (jit->ip) ++;
        *tmp___179 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___180 = jit->ip;
        (jit->ip) ++;
        *tmp___180 = (unsigned char)139;
        break;
        default: 
        tmp___181 = __builtin_expect(1L, 0L);
        if (tmp___181) {
          __assert_rtn("emit_mul_op", "./jitter-amd64.c", 2840, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___182 = jit->ip;
            (jit->ip) ++;
            *tmp___182 = (unsigned char )((long )(3 << 6) | ((dest & 7L) << 3));
            break;
          }
          break;
        }
        break;
      }
    }
  } else
  if (dest != 2L) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___183 = jit->ip;
        (jit->ip) ++;
        *tmp___183 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___184 = 8;
        } else {
          tmp___184 = 0;
        }
        if (dest > 7L) {
          tmp___185 = 4;
        } else {
          tmp___185 = 0;
        }
        _amd64_rex_bits___18 = (unsigned char )(tmp___184 | tmp___185);
        if ((int )_amd64_rex_bits___18 != 0) {
          tmp___186 = jit->ip;
          (jit->ip) ++;
          *tmp___186 = (unsigned char )(64 | (int )_amd64_rex_bits___18);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___186 = jit->ip;
          (jit->ip) ++;
          *tmp___186 = (unsigned char )(64 | (int )_amd64_rex_bits___18);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___187 = jit->ip;
      (jit->ip) ++;
      *tmp___187 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___188 = jit->ip;
      (jit->ip) ++;
      *tmp___188 = (unsigned char)139;
      break;
      default: 
      tmp___189 = __builtin_expect(1L, 0L);
      if (tmp___189) {
        __assert_rtn("emit_mul_op", "./jitter-amd64.c", 2842, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___190 = jit->ip;
          (jit->ip) ++;
          *tmp___190 = (unsigned char )(((long )(3 << 6) | ((dest & 7L) << 3)) | 2L);
          break;
        }
        break;
      }
      break;
    }
  }
  if (dest != 2L) {
    if (dx_in_use) {
      while (1) {
        while (1) {
          _amd64_rex_bits___19 = (unsigned char)0;
          if ((int )_amd64_rex_bits___19 != 0) {
            tmp___191 = jit->ip;
            (jit->ip) ++;
            *tmp___191 = (unsigned char )(64 | (int )_amd64_rex_bits___19);
          }
          break;
        }
        tmp___192 = jit->ip;
        (jit->ip) ++;
        *tmp___192 = (unsigned char)90;
        break;
      }
    }
  }
  if (dest != 0L) {
    if (ax_in_use) {
      while (1) {
        while (1) {
          _amd64_rex_bits___20 = (unsigned char)0;
          if ((int )_amd64_rex_bits___20 != 0) {
            tmp___193 = jit->ip;
            (jit->ip) ++;
            *tmp___193 = (unsigned char )(64 | (int )_amd64_rex_bits___20);
          }
          break;
        }
        tmp___194 = jit->ip;
        (jit->ip) ++;
        *tmp___194 = (unsigned char)88;
        break;
      }
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_mul_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF _cipher$_xtea_encipherBlock LOC=UNKNOWN */
void _cipher$_xtea_encipherBlock(unsigned int num_rounds , unsigned int *v , unsigned int *key ) 
{ 
  unsigned int v0 ;
  unsigned int v1 ;
  unsigned int delta ;
  unsigned int sum ;
  unsigned int i ;

  {
  v0 = v[0];
  v1 = v[1];
  delta = 2117564857;
  sum = 0;
  i = 0;
  while (i < num_rounds) {
    v0 += (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + key[sum & 3]);
    sum += delta;
    v1 += (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + key[(sum >> 11) & 3]);
    i ++;
  }
  v[0] = v0;
  v[1] = v1;
}
}
/* END FUNCTION-DEF _cipher$_xtea_encipherBlock LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_ureg LOC=UNKNOWN */
static void emit_ureg(struct jit *jit , jit_value vreg , int hreg_id ) 
{ 
  int stack_pos ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___28 ;
  int tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  long tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;

  {
  tmp = stack_reg_pos(jit, (int )vreg);
  stack_pos = tmp;
  if ((vreg & 1L) == 1L) {
    while (1) {
      tmp___0 = jit->ip;
      (jit->ip) ++;
      *tmp___0 = (unsigned char)102;
      while (1) {
        if (hreg_id > 7) {
          tmp___1 = 4;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )tmp___1;
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)15;
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)19;
      while (1) {
        while (1) {
          if (0) {
            if (stack_pos == 0) {
              while (1) {
                tmp___10 = jit->ip;
                (jit->ip) ++;
                *tmp___10 = (unsigned char )((((hreg_id & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___11 = jit->ip;
                (jit->ip) ++;
                *tmp___11 = (unsigned char )((4 << 3) | 4);
                break;
              }
            } else
            if (stack_pos >= -128) {
              if (stack_pos <= 127) {
                while (1) {
                  tmp___12 = jit->ip;
                  (jit->ip) ++;
                  *tmp___12 = (unsigned char )(((1 << 6) | (((hreg_id & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___13 = jit->ip;
                  (jit->ip) ++;
                  *tmp___13 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(stack_pos & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L;
              }
            } else {
              _L: /* CIL Label */ 
              while (1) {
                tmp___14 = jit->ip;
                (jit->ip) ++;
                *tmp___14 = (unsigned char )(((2 << 6) | (((hreg_id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___15 = jit->ip;
                (jit->ip) ++;
                *tmp___15 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                imb___0.val = stack_pos;
                tmp___16 = jit->ip;
                (jit->ip) ++;
                *tmp___16 = imb___0.b[0];
                tmp___17 = jit->ip;
                (jit->ip) ++;
                *tmp___17 = imb___0.b[1];
                tmp___18 = jit->ip;
                (jit->ip) ++;
                *tmp___18 = imb___0.b[2];
                tmp___19 = jit->ip;
                (jit->ip) ++;
                *tmp___19 = imb___0.b[3];
                break;
              }
            }
            break;
          }
          if (stack_pos == 0) {

          }
          if (stack_pos >= -128) {
            if (stack_pos <= 127) {
              while (1) {
                tmp___21 = jit->ip;
                (jit->ip) ++;
                *tmp___21 = (unsigned char )(((1 << 6) | (((hreg_id & 7) & 7) << 3)) | 5);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(stack_pos & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___0;
            }
          } else {
            _L___0: /* CIL Label */ 
            while (1) {
              tmp___22 = jit->ip;
              (jit->ip) ++;
              *tmp___22 = (unsigned char )(((2 << 6) | (((hreg_id & 7) & 7) << 3)) | 5);
              break;
            }
            while (1) {
              imb___1.val = stack_pos;
              tmp___23 = jit->ip;
              (jit->ip) ++;
              *tmp___23 = imb___1.b[0];
              tmp___24 = jit->ip;
              (jit->ip) ++;
              *tmp___24 = imb___1.b[1];
              tmp___25 = jit->ip;
              (jit->ip) ++;
              *tmp___25 = imb___1.b[2];
              tmp___26 = jit->ip;
              (jit->ip) ++;
              *tmp___26 = imb___1.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___27 = jit->ip;
        (jit->ip) ++;
        *tmp___27 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___28 = 8;
        } else {
          tmp___28 = 0;
        }
        if (hreg_id > 7) {
          tmp___29 = 4;
        } else {
          tmp___29 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(tmp___28 | tmp___29);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___31 = jit->ip;
      (jit->ip) ++;
      *tmp___31 = (unsigned char)136;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___32 = jit->ip;
      (jit->ip) ++;
      *tmp___32 = (unsigned char)137;
      break;
      default: 
      tmp___33 = __builtin_expect(1L, 0L);
      if (tmp___33) {
        __assert_rtn("emit_ureg", "./jitter-amd64.c", 2639, "0");
      }
      }
      while (1) {
        if (0) {
          if (stack_pos == 0) {
            while (1) {
              tmp___34 = jit->ip;
              (jit->ip) ++;
              *tmp___34 = (unsigned char )((((hreg_id & 7) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___35 = jit->ip;
              (jit->ip) ++;
              *tmp___35 = (unsigned char )((4 << 3) | 4);
              break;
            }
          } else
          if (stack_pos >= -128) {
            if (stack_pos <= 127) {
              while (1) {
                tmp___36 = jit->ip;
                (jit->ip) ++;
                *tmp___36 = (unsigned char )(((1 << 6) | (((hreg_id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___37 = jit->ip;
                (jit->ip) ++;
                *tmp___37 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(stack_pos & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___1;
            }
          } else {
            _L___1: /* CIL Label */ 
            while (1) {
              tmp___38 = jit->ip;
              (jit->ip) ++;
              *tmp___38 = (unsigned char )(((2 << 6) | (((hreg_id & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___39 = jit->ip;
              (jit->ip) ++;
              *tmp___39 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              imb___2.val = stack_pos;
              tmp___40 = jit->ip;
              (jit->ip) ++;
              *tmp___40 = imb___2.b[0];
              tmp___41 = jit->ip;
              (jit->ip) ++;
              *tmp___41 = imb___2.b[1];
              tmp___42 = jit->ip;
              (jit->ip) ++;
              *tmp___42 = imb___2.b[2];
              tmp___43 = jit->ip;
              (jit->ip) ++;
              *tmp___43 = imb___2.b[3];
              break;
            }
          }
          break;
        }
        if (stack_pos == 0) {

        }
        if (stack_pos >= -128) {
          if (stack_pos <= 127) {
            while (1) {
              tmp___45 = jit->ip;
              (jit->ip) ++;
              *tmp___45 = (unsigned char )(((1 << 6) | (((hreg_id & 7) & 7) << 3)) | 5);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(stack_pos & 255);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___2;
          }
        } else {
          _L___2: /* CIL Label */ 
          while (1) {
            tmp___46 = jit->ip;
            (jit->ip) ++;
            *tmp___46 = (unsigned char )(((2 << 6) | (((hreg_id & 7) & 7) << 3)) | 5);
            break;
          }
          while (1) {
            imb___3.val = stack_pos;
            tmp___47 = jit->ip;
            (jit->ip) ++;
            *tmp___47 = imb___3.b[0];
            tmp___48 = jit->ip;
            (jit->ip) ++;
            *tmp___48 = imb___3.b[1];
            tmp___49 = jit->ip;
            (jit->ip) ++;
            *tmp___49 = imb___3.b[2];
            tmp___50 = jit->ip;
            (jit->ip) ++;
            *tmp___50 = imb___3.b[3];
            break;
          }
        }
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_ureg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF join_addr_addi LOC=UNKNOWN */
static int join_addr_addi(jit_op *op , jit_op *nextop ) 
{ 
  unsigned long tmp ;

  {
  if (nextop->arg[2] >= (-0x7FFFFFFF-1)) {
    if (! (nextop->arg[2] <= 2147483647L)) {
      return (0);
    }
  } else {
    return (0);
  }
  make_nop(op);
  nextop->code = (unsigned short)864;
  nextop->spec = (unsigned char )(((1 << 4) | (1 << 2)) | 3);
  nextop->arg[2] = nextop->arg[2];
  tmp = __builtin_object_size((void *)(& nextop->flt_imm), 0);
  __builtin___memcpy_chk((void *)(& nextop->flt_imm), (void const   *)(& nextop->arg[2]),
                         sizeof(jit_value ), tmp);
  nextop->arg[1] = op->arg[1];
  nextop->arg[2] = op->arg[2];
  return (1);
}
}
/* END FUNCTION-DEF join_addr_addi LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isdigit LOC=UNKNOWN */
__inline extern int isdigit(int _c ) 
{ 
  __darwin_ct_rune_t tmp ;

  {
  tmp = __isctype(_c, 1024UL);
  return (tmp);
}
}
/* END FUNCTION-DEF isdigit LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF assign_regs_for_args LOC=UNKNOWN */
static void assign_regs_for_args(struct jit_reg_allocator *al , jit_op *op ) 
{ 
  struct jit_func_info *info ;
  int assoc_gp_regs ;
  int assoc_fp_regs ;
  int i ;
  int isfp_arg ;

  {
  info = (struct jit_func_info *)op->arg[1];
  assoc_gp_regs = 0;
  assoc_fp_regs = 0;
  i = 0;
  while (i < info->general_arg_cnt + info->float_arg_cnt) {
    isfp_arg = (unsigned int )(info->args + i)->type == 2U;
    if (! isfp_arg) {
      if (assoc_gp_regs < al->gp_arg_reg_cnt) {
        rmap_assoc(op->regmap, (jit_value )((3 << 1) | ((i & 268435455) << 4)), *(al->gp_arg_regs + assoc_gp_regs));
        assoc_gp_regs ++;
      }
    }
    if (isfp_arg) {
      if (assoc_fp_regs < al->fp_arg_reg_cnt) {
        rmap_assoc(op->regmap, (jit_value )((1 | (3 << 1)) | ((i & 268435455) << 4)),
                   *(al->fp_arg_regs + assoc_fp_regs));
        assoc_fp_regs ++;
      }
    }
    i ++;
  }
  return;
}
}
/* END FUNCTION-DEF assign_regs_for_args LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_alu_op LOC=UNKNOWN */
static void emit_sse_alu_op(struct jit *jit , jit_op *op , int sse_op ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___14 ;
  int tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___21 ;
  int tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;

  {
  if (op->r_arg[0] == op->r_arg[1]) {
    while (1) {
      tmp = jit->ip;
      (jit->ip) ++;
      *tmp = (unsigned char)242;
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___0 = 4;
        } else {
          tmp___0 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___1 = 1;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)15;
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char )sse_op;
      while (1) {
        while (1) {
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else
  if (op->r_arg[0] == op->r_arg[2]) {
    while (1) {
      tmp___6 = jit->ip;
      (jit->ip) ++;
      *tmp___6 = (unsigned char)242;
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___7 = 4;
        } else {
          tmp___7 = 0;
        }
        if (op->r_arg[1] > 7L) {
          tmp___8 = 1;
        } else {
          tmp___8 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(tmp___7 | tmp___8);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___9 = jit->ip;
          (jit->ip) ++;
          *tmp___9 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      tmp___10 = jit->ip;
      (jit->ip) ++;
      *tmp___10 = (unsigned char)15;
      tmp___11 = jit->ip;
      (jit->ip) ++;
      *tmp___11 = (unsigned char )sse_op;
      while (1) {
        while (1) {
          tmp___12 = jit->ip;
          (jit->ip) ++;
          *tmp___12 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      tmp___13 = jit->ip;
      (jit->ip) ++;
      *tmp___13 = (unsigned char)242;
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___14 = 4;
        } else {
          tmp___14 = 0;
        }
        if (op->r_arg[1] > 7L) {
          tmp___15 = 1;
        } else {
          tmp___15 = 0;
        }
        _amd64_rex_bits___1 = (unsigned char )(tmp___14 | tmp___15);
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___16 = jit->ip;
          (jit->ip) ++;
          *tmp___16 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      tmp___17 = jit->ip;
      (jit->ip) ++;
      *tmp___17 = (unsigned char)15;
      tmp___18 = jit->ip;
      (jit->ip) ++;
      *tmp___18 = (unsigned char)16;
      while (1) {
        while (1) {
          tmp___19 = jit->ip;
          (jit->ip) ++;
          *tmp___19 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      tmp___20 = jit->ip;
      (jit->ip) ++;
      *tmp___20 = (unsigned char)242;
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___21 = 4;
        } else {
          tmp___21 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___22 = 1;
        } else {
          tmp___22 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )(tmp___21 | tmp___22);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___23 = jit->ip;
          (jit->ip) ++;
          *tmp___23 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___24 = jit->ip;
      (jit->ip) ++;
      *tmp___24 = (unsigned char)15;
      tmp___25 = jit->ip;
      (jit->ip) ++;
      *tmp___25 = (unsigned char )sse_op;
      while (1) {
        while (1) {
          tmp___26 = jit->ip;
          (jit->ip) ++;
          *tmp___26 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_sse_alu_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jump_adjustment LOC=UNKNOWN */
__inline static void jump_adjustment(struct jit *jit , jit_op *op ) 
{ 
  jit_rmap *cur_regmap ;
  jit_rmap *tgt_regmap ;

  {
  if ((int )op->code == 338) {
    cur_regmap = op->regmap;
    tgt_regmap = (op->jmp_addr)->regmap;
    rmap_sync(op, cur_regmap, tgt_regmap, 1);
    rmap_sync(op, tgt_regmap, cur_regmap, 2);
  }
  return;
}
}
/* END FUNCTION-DEF jump_adjustment LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_tree_clone LOC=UNKNOWN */
__inline static jit_tree *jit_tree_clone(jit_tree *root ) 
{ 
  jit_tree *tmp ;

  {
  tmp = jit_tree_addall((jit_tree *)((void *)0), root);
  return (tmp);
}
}
/* END FUNCTION-DEF jit_tree_clone LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF required_stack_space_for_regs LOC=UNKNOWN */
static int required_stack_space_for_regs(struct jit *jit , jit_op *op ) 
{ 
  struct jit_reg_allocator *al ;
  int space ;
  struct jit_func_info *tmp ;
  int i ;
  jit_hw_reg *reg ;
  int tmp___0 ;
  int i___0 ;
  jit_hw_reg *reg___0 ;
  int tmp___1 ;

  {
  al = jit->reg_al;
  space = (int )sizeof(void *);
  tmp = jit_current_func_info(jit);
  if (! tmp->has_prolog) {
    space = (int )((unsigned long )space + sizeof(void *));
  }
  i = 0;
  while (i < al->gp_reg_cnt) {
    reg = al->gp_regs + i;
    if (! reg->callee_saved) {
      tmp___0 = is_active_register(al, reg, op);
      if (tmp___0) {
        space = (int )((unsigned long )space + sizeof(void *));
      }
    }
    i ++;
  }
  i___0 = 0;
  while (i___0 < al->fp_reg_cnt) {
    reg___0 = al->fp_regs + i___0;
    if (! reg___0->callee_saved) {
      tmp___1 = is_active_register(al, reg___0, op);
      if (tmp___1) {
        space = (int )((unsigned long )space + sizeof(double ) * 2UL);
      }
    }
    i___0 ++;
  }
  return (space);
}
}
/* END FUNCTION-DEF required_stack_space_for_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_memset LOC=UNKNOWN */
static void emit_memset(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                        jit_value a3 , int block_size ) 
{ 
  jit_hw_reg *counter ;
  jit_hw_reg *tmp ;
  int counterreg ;
  int i ;
  jit_hw_reg *r ;
  int counter_in_use ;
  int tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  long tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  jit_value loop ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___31 ;
  int tmp___32 ;
  int tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  x86_imm_buf imb ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  int tmp___91 ;
  int tmp___92 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___93 ;
  int tmp___94 ;
  int tmp___95 ;
  int tmp___96 ;
  unsigned char *tmp___97 ;
  int tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char *tmp___101 ;
  long tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___115 ;
  unsigned char *tmp___116 ;
  unsigned char *tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___119 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  unsigned char *tmp___122 ;
  unsigned char _amd64_rex_bits___7 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___125 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char *tmp___128 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___129 ;
  unsigned char *tmp___130 ;
  unsigned char *tmp___131 ;
  unsigned char *tmp___132 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___133 ;
  unsigned char *tmp___134 ;
  unsigned char *tmp___135 ;
  unsigned char *tmp___136 ;
  unsigned char _amd64_rex_bits___9 ;
  unsigned char *tmp___137 ;
  int offset ;
  unsigned char *tmp___138 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  unsigned char *tmp___141 ;
  unsigned char *tmp___142 ;
  x86_imm_buf imb___10 ;
  unsigned char *tmp___143 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  unsigned char *tmp___146 ;
  unsigned char _amd64_rex_bits___10 ;
  int tmp___147 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;

  {
  tmp = jit_get_unused_reg_with_index(jit->reg_al, op, 0, 0);
  counter = tmp;
  counterreg = 0;
  if (counter) {
    counterreg = counter->id;
  } else {
    i = 0;
    while (i < (jit->reg_al)->gp_reg_cnt) {
      r = (jit->reg_al)->gp_regs + i;
      if ((jit_value )r->id != a1) {
        if ((jit_value )r->id != a2) {
          if (! ((int )op->code & 2)) {
            if ((jit_value )r->id != a3) {
              counterreg = r->id;
              break;
            }
          }
        }
      }
      i ++;
    }
  }
  tmp___0 = jit_reg_in_use(op, counterreg, 0);
  counter_in_use = tmp___0;
  if (counter_in_use) {
    while (1) {
      while (1) {
        if (counterreg > 7) {
          tmp___1 = 1;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )tmp___1;
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char )(80 + (counterreg & 7));
      break;
    }
  }
  while (1) {
    if (sizeof(void *) == 2UL) {
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)102;
    }
    while (1) {
      if (sizeof(void *) > 4UL) {
        tmp___5 = 8;
      } else {
        tmp___5 = 0;
      }
      if (counterreg > 7) {
        tmp___6 = 4;
      } else {
        tmp___6 = 0;
      }
      if (a2 > 7L) {
        tmp___7 = 1;
      } else {
        tmp___7 = 0;
      }
      _amd64_rex_bits___0 = (unsigned char )((tmp___5 | tmp___6) | tmp___7);
      if ((int )_amd64_rex_bits___0 != 0) {
        tmp___8 = jit->ip;
        (jit->ip) ++;
        *tmp___8 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
      } else
      if (sizeof(void *) == 1UL) {
        tmp___8 = jit->ip;
        (jit->ip) ++;
        *tmp___8 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
      }
      break;
    }
    switch (sizeof(void *)) {
    case 1UL: 
    tmp___9 = jit->ip;
    (jit->ip) ++;
    *tmp___9 = (unsigned char)138;
    break;
    case 8UL: 
    case 4UL: 
    case 2UL: 
    tmp___10 = jit->ip;
    (jit->ip) ++;
    *tmp___10 = (unsigned char)139;
    break;
    default: 
    tmp___11 = __builtin_expect(1L, 0L);
    if (tmp___11) {
      __assert_rtn("emit_memset", "./jitter-amd64.c", 3203, "0");
    }
    }
    while (1) {
      while (1) {
        tmp___12 = jit->ip;
        (jit->ip) ++;
        *tmp___12 = (unsigned char )((long )((3 << 6) | ((counterreg & 7) << 3)) | (a2 & 7L));
        break;
      }
      break;
    }
    break;
  }
  if (block_size == 2) {
    while (1) {
      while (1) {
        if (counterreg > 7) {
          tmp___13 = 1;
        } else {
          tmp___13 = 0;
        }
        _amd64_rex_bits___1 = (unsigned char )(8 | tmp___13);
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      while (1) {
        tmp___15 = jit->ip;
        (jit->ip) ++;
        *tmp___15 = (unsigned char)209;
        while (1) {
          while (1) {
            tmp___16 = jit->ip;
            (jit->ip) ++;
            *tmp___16 = (unsigned char )(((3 << 6) | (4 << 3)) | ((counterreg & 7) & 7));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  }
  if (block_size == 4) {
    while (1) {
      while (1) {
        if (counterreg > 7) {
          tmp___19 = 1;
        } else {
          tmp___19 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )(8 | tmp___19);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___20 = jit->ip;
          (jit->ip) ++;
          *tmp___20 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      while (1) {
        tmp___23 = jit->ip;
        (jit->ip) ++;
        *tmp___23 = (unsigned char)193;
        while (1) {
          while (1) {
            tmp___24 = jit->ip;
            (jit->ip) ++;
            *tmp___24 = (unsigned char )(((3 << 6) | (4 << 3)) | ((counterreg & 7) & 7));
            break;
          }
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)2;
          (jit->ip) ++;
          break;
        }
        break;
      }
      break;
    }
  }
  if (block_size == 8) {
    while (1) {
      while (1) {
        if (counterreg > 7) {
          tmp___25 = 1;
        } else {
          tmp___25 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )(8 | tmp___25);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___26 = jit->ip;
          (jit->ip) ++;
          *tmp___26 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      while (1) {
        tmp___29 = jit->ip;
        (jit->ip) ++;
        *tmp___29 = (unsigned char)193;
        while (1) {
          while (1) {
            tmp___30 = jit->ip;
            (jit->ip) ++;
            *tmp___30 = (unsigned char )(((3 << 6) | (4 << 3)) | ((counterreg & 7) & 7));
            break;
          }
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)3;
          (jit->ip) ++;
          break;
        }
        break;
      }
      break;
    }
  }
  loop = (jit_value )jit->ip;
  if ((int )op->code & 2) {
    while (1) {
      while (1) {
        if (block_size > 4) {
          tmp___31 = 8;
        } else {
          tmp___31 = 0;
        }
        if (counterreg > 7) {
          tmp___32 = 2;
        } else {
          tmp___32 = 0;
        }
        if (a1 > 7L) {
          tmp___33 = 1;
        } else {
          tmp___33 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )((tmp___31 | tmp___32) | tmp___33);
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___34 = jit->ip;
          (jit->ip) ++;
          *tmp___34 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        } else
        if (block_size == 1) {
          tmp___34 = jit->ip;
          (jit->ip) ++;
          *tmp___34 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      while (1) {
        if (block_size == 8) {
          tmp___92 = 4;
        } else {
          tmp___92 = block_size;
        }
        if (tmp___92 == 1) {
          tmp___35 = jit->ip;
          (jit->ip) ++;
          *tmp___35 = (unsigned char)198;
          while (1) {
            if ((a1 & 7L) == -1L) {
              while (1) {
                tmp___36 = jit->ip;
                (jit->ip) ++;
                *tmp___36 = (unsigned char)4;
                break;
              }
              while (1) {
                tmp___37 = jit->ip;
                (jit->ip) ++;
                *tmp___37 = (unsigned char )((((counterreg & 7) & 7) << 3) | 5);
                break;
              }
              while (1) {
                imb.val = - block_size;
                tmp___38 = jit->ip;
                (jit->ip) ++;
                *tmp___38 = imb.b[0];
                tmp___39 = jit->ip;
                (jit->ip) ++;
                *tmp___39 = imb.b[1];
                tmp___40 = jit->ip;
                (jit->ip) ++;
                *tmp___40 = imb.b[2];
                tmp___41 = jit->ip;
                (jit->ip) ++;
                *tmp___41 = imb.b[3];
                break;
              }
            } else
            if (- block_size == 0) {
              if ((a1 & 7L) != 5L) {
                while (1) {
                  tmp___42 = jit->ip;
                  (jit->ip) ++;
                  *tmp___42 = (unsigned char)4;
                  break;
                }
                while (1) {
                  tmp___43 = jit->ip;
                  (jit->ip) ++;
                  *tmp___43 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                  break;
                }
              } else {
                goto _L___0;
              }
            } else
            _L___0: /* CIL Label */ 
            if (- block_size >= -128) {
              if (- block_size <= 127) {
                while (1) {
                  tmp___44 = jit->ip;
                  (jit->ip) ++;
                  *tmp___44 = (unsigned char )((1 << 6) | 4);
                  break;
                }
                while (1) {
                  tmp___45 = jit->ip;
                  (jit->ip) ++;
                  *tmp___45 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(- block_size & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L;
              }
            } else {
              _L: /* CIL Label */ 
              while (1) {
                tmp___46 = jit->ip;
                (jit->ip) ++;
                *tmp___46 = (unsigned char )((2 << 6) | 4);
                break;
              }
              while (1) {
                tmp___47 = jit->ip;
                (jit->ip) ++;
                *tmp___47 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                break;
              }
              while (1) {
                imb___0.val = - block_size;
                tmp___48 = jit->ip;
                (jit->ip) ++;
                *tmp___48 = imb___0.b[0];
                tmp___49 = jit->ip;
                (jit->ip) ++;
                *tmp___49 = imb___0.b[1];
                tmp___50 = jit->ip;
                (jit->ip) ++;
                *tmp___50 = imb___0.b[2];
                tmp___51 = jit->ip;
                (jit->ip) ++;
                *tmp___51 = imb___0.b[3];
                break;
              }
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(a3 & 255L);
            (jit->ip) ++;
            break;
          }
        } else {
          if (block_size == 8) {
            tmp___91 = 4;
          } else {
            tmp___91 = block_size;
          }
          if (tmp___91 == 2) {
            tmp___52 = jit->ip;
            (jit->ip) ++;
            *tmp___52 = (unsigned char)102;
            tmp___53 = jit->ip;
            (jit->ip) ++;
            *tmp___53 = (unsigned char)199;
            while (1) {
              if ((a1 & 7L) == -1L) {
                while (1) {
                  tmp___54 = jit->ip;
                  (jit->ip) ++;
                  *tmp___54 = (unsigned char)4;
                  break;
                }
                while (1) {
                  tmp___55 = jit->ip;
                  (jit->ip) ++;
                  *tmp___55 = (unsigned char )((((counterreg & 7) & 7) << 3) | 5);
                  break;
                }
                while (1) {
                  imb___1.val = - block_size;
                  tmp___56 = jit->ip;
                  (jit->ip) ++;
                  *tmp___56 = imb___1.b[0];
                  tmp___57 = jit->ip;
                  (jit->ip) ++;
                  *tmp___57 = imb___1.b[1];
                  tmp___58 = jit->ip;
                  (jit->ip) ++;
                  *tmp___58 = imb___1.b[2];
                  tmp___59 = jit->ip;
                  (jit->ip) ++;
                  *tmp___59 = imb___1.b[3];
                  break;
                }
              } else
              if (- block_size == 0) {
                if ((a1 & 7L) != 5L) {
                  while (1) {
                    tmp___60 = jit->ip;
                    (jit->ip) ++;
                    *tmp___60 = (unsigned char)4;
                    break;
                  }
                  while (1) {
                    tmp___61 = jit->ip;
                    (jit->ip) ++;
                    *tmp___61 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                    break;
                  }
                } else {
                  goto _L___2;
                }
              } else
              _L___2: /* CIL Label */ 
              if (- block_size >= -128) {
                if (- block_size <= 127) {
                  while (1) {
                    tmp___62 = jit->ip;
                    (jit->ip) ++;
                    *tmp___62 = (unsigned char )((1 << 6) | 4);
                    break;
                  }
                  while (1) {
                    tmp___63 = jit->ip;
                    (jit->ip) ++;
                    *tmp___63 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(- block_size & 255);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___1;
                }
              } else {
                _L___1: /* CIL Label */ 
                while (1) {
                  tmp___64 = jit->ip;
                  (jit->ip) ++;
                  *tmp___64 = (unsigned char )((2 << 6) | 4);
                  break;
                }
                while (1) {
                  tmp___65 = jit->ip;
                  (jit->ip) ++;
                  *tmp___65 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                  break;
                }
                while (1) {
                  imb___2.val = - block_size;
                  tmp___66 = jit->ip;
                  (jit->ip) ++;
                  *tmp___66 = imb___2.b[0];
                  tmp___67 = jit->ip;
                  (jit->ip) ++;
                  *tmp___67 = imb___2.b[1];
                  tmp___68 = jit->ip;
                  (jit->ip) ++;
                  *tmp___68 = imb___2.b[2];
                  tmp___69 = jit->ip;
                  (jit->ip) ++;
                  *tmp___69 = imb___2.b[3];
                  break;
                }
              }
              break;
            }
            while (1) {
              *((short *)jit->ip) = (short )a3;
              jit->ip += 2;
              break;
            }
          } else {
            tmp___70 = jit->ip;
            (jit->ip) ++;
            *tmp___70 = (unsigned char)199;
            while (1) {
              if ((a1 & 7L) == -1L) {
                while (1) {
                  tmp___71 = jit->ip;
                  (jit->ip) ++;
                  *tmp___71 = (unsigned char)4;
                  break;
                }
                while (1) {
                  tmp___72 = jit->ip;
                  (jit->ip) ++;
                  *tmp___72 = (unsigned char )((((counterreg & 7) & 7) << 3) | 5);
                  break;
                }
                while (1) {
                  imb___3.val = - block_size;
                  tmp___73 = jit->ip;
                  (jit->ip) ++;
                  *tmp___73 = imb___3.b[0];
                  tmp___74 = jit->ip;
                  (jit->ip) ++;
                  *tmp___74 = imb___3.b[1];
                  tmp___75 = jit->ip;
                  (jit->ip) ++;
                  *tmp___75 = imb___3.b[2];
                  tmp___76 = jit->ip;
                  (jit->ip) ++;
                  *tmp___76 = imb___3.b[3];
                  break;
                }
              } else
              if (- block_size == 0) {
                if ((a1 & 7L) != 5L) {
                  while (1) {
                    tmp___77 = jit->ip;
                    (jit->ip) ++;
                    *tmp___77 = (unsigned char)4;
                    break;
                  }
                  while (1) {
                    tmp___78 = jit->ip;
                    (jit->ip) ++;
                    *tmp___78 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                    break;
                  }
                } else {
                  goto _L___4;
                }
              } else
              _L___4: /* CIL Label */ 
              if (- block_size >= -128) {
                if (- block_size <= 127) {
                  while (1) {
                    tmp___79 = jit->ip;
                    (jit->ip) ++;
                    *tmp___79 = (unsigned char )((1 << 6) | 4);
                    break;
                  }
                  while (1) {
                    tmp___80 = jit->ip;
                    (jit->ip) ++;
                    *tmp___80 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(- block_size & 255);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___3;
                }
              } else {
                _L___3: /* CIL Label */ 
                while (1) {
                  tmp___81 = jit->ip;
                  (jit->ip) ++;
                  *tmp___81 = (unsigned char )((2 << 6) | 4);
                  break;
                }
                while (1) {
                  tmp___82 = jit->ip;
                  (jit->ip) ++;
                  *tmp___82 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                  break;
                }
                while (1) {
                  imb___4.val = - block_size;
                  tmp___83 = jit->ip;
                  (jit->ip) ++;
                  *tmp___83 = imb___4.b[0];
                  tmp___84 = jit->ip;
                  (jit->ip) ++;
                  *tmp___84 = imb___4.b[1];
                  tmp___85 = jit->ip;
                  (jit->ip) ++;
                  *tmp___85 = imb___4.b[2];
                  tmp___86 = jit->ip;
                  (jit->ip) ++;
                  *tmp___86 = imb___4.b[3];
                  break;
                }
              }
              break;
            }
            while (1) {
              imb___5.val = (int )a3;
              tmp___87 = jit->ip;
              (jit->ip) ++;
              *tmp___87 = imb___5.b[0];
              tmp___88 = jit->ip;
              (jit->ip) ++;
              *tmp___88 = imb___5.b[1];
              tmp___89 = jit->ip;
              (jit->ip) ++;
              *tmp___89 = imb___5.b[2];
              tmp___90 = jit->ip;
              (jit->ip) ++;
              *tmp___90 = imb___5.b[3];
              break;
            }
          }
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      while (1) {
        if (block_size > 4) {
          tmp___93 = 8;
        } else {
          tmp___93 = 0;
        }
        if (a3 > 7L) {
          tmp___94 = 4;
        } else {
          tmp___94 = 0;
        }
        if (counterreg > 7) {
          tmp___95 = 2;
        } else {
          tmp___95 = 0;
        }
        if (a1 > 7L) {
          tmp___96 = 1;
        } else {
          tmp___96 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(((tmp___93 | tmp___94) | tmp___95) | tmp___96);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___97 = jit->ip;
          (jit->ip) ++;
          *tmp___97 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        } else
        if (block_size == 1) {
          tmp___97 = jit->ip;
          (jit->ip) ++;
          *tmp___97 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      while (1) {
        if (block_size == 8) {
          tmp___98 = 4;
        } else {
          tmp___98 = block_size;
        }
        switch (tmp___98) {
        case 1: 
        tmp___99 = jit->ip;
        (jit->ip) ++;
        *tmp___99 = (unsigned char)136;
        break;
        case 2: 
        tmp___100 = jit->ip;
        (jit->ip) ++;
        *tmp___100 = (unsigned char)102;
        case 4: 
        tmp___101 = jit->ip;
        (jit->ip) ++;
        *tmp___101 = (unsigned char)137;
        break;
        default: 
        tmp___102 = __builtin_expect(1L, 0L);
        if (tmp___102) {
          __assert_rtn("emit_memset", "./jitter-amd64.c", 3213, "0");
        }
        }
        while (1) {
          if ((a1 & 7L) == -1L) {
            while (1) {
              tmp___103 = jit->ip;
              (jit->ip) ++;
              *tmp___103 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___104 = jit->ip;
              (jit->ip) ++;
              *tmp___104 = (unsigned char )((((counterreg & 7) & 7) << 3) | 5);
              break;
            }
            while (1) {
              imb___6.val = - block_size;
              tmp___105 = jit->ip;
              (jit->ip) ++;
              *tmp___105 = imb___6.b[0];
              tmp___106 = jit->ip;
              (jit->ip) ++;
              *tmp___106 = imb___6.b[1];
              tmp___107 = jit->ip;
              (jit->ip) ++;
              *tmp___107 = imb___6.b[2];
              tmp___108 = jit->ip;
              (jit->ip) ++;
              *tmp___108 = imb___6.b[3];
              break;
            }
          } else
          if (- block_size == 0) {
            if ((a1 & 7L) != 5L) {
              while (1) {
                tmp___109 = jit->ip;
                (jit->ip) ++;
                *tmp___109 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___110 = jit->ip;
                (jit->ip) ++;
                *tmp___110 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                break;
              }
            } else {
              goto _L___6;
            }
          } else
          _L___6: /* CIL Label */ 
          if (- block_size >= -128) {
            if (- block_size <= 127) {
              while (1) {
                tmp___111 = jit->ip;
                (jit->ip) ++;
                *tmp___111 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
                break;
              }
              while (1) {
                tmp___112 = jit->ip;
                (jit->ip) ++;
                *tmp___112 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- block_size & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___5;
            }
          } else {
            _L___5: /* CIL Label */ 
            while (1) {
              tmp___113 = jit->ip;
              (jit->ip) ++;
              *tmp___113 = (unsigned char )(((long )(2 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___114 = jit->ip;
              (jit->ip) ++;
              *tmp___114 = (unsigned char )((long )((((counterreg & 7) & 7) & 7) << 3) | (((a1 & 7L) & 7L) & 7L));
              break;
            }
            while (1) {
              imb___7.val = - block_size;
              tmp___115 = jit->ip;
              (jit->ip) ++;
              *tmp___115 = imb___7.b[0];
              tmp___116 = jit->ip;
              (jit->ip) ++;
              *tmp___116 = imb___7.b[1];
              tmp___117 = jit->ip;
              (jit->ip) ++;
              *tmp___117 = imb___7.b[2];
              tmp___118 = jit->ip;
              (jit->ip) ++;
              *tmp___118 = imb___7.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  }
  while (1) {
    if (block_size >= -128) {
      if (block_size <= 127) {
        while (1) {
          if (counterreg > 7) {
            tmp___119 = 1;
          } else {
            tmp___119 = 0;
          }
          _amd64_rex_bits___6 = (unsigned char )(8 | tmp___119);
          if ((int )_amd64_rex_bits___6 != 0) {
            tmp___120 = jit->ip;
            (jit->ip) ++;
            *tmp___120 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
          }
          break;
        }
        tmp___121 = jit->ip;
        (jit->ip) ++;
        *tmp___121 = (unsigned char)131;
        while (1) {
          while (1) {
            tmp___122 = jit->ip;
            (jit->ip) ++;
            *tmp___122 = (unsigned char )(((3 << 6) | (5 << 3)) | (counterreg & 7));
            break;
          }
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char )(block_size & 255);
          (jit->ip) ++;
          break;
        }
      } else {
        goto _L___7;
      }
    } else
    _L___7: /* CIL Label */ 
    if (counterreg == 0) {
      while (1) {
        _amd64_rex_bits___7 = (unsigned char)8;
        if ((int )_amd64_rex_bits___7 != 0) {
          tmp___123 = jit->ip;
          (jit->ip) ++;
          *tmp___123 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
        }
        break;
      }
      tmp___124 = jit->ip;
      (jit->ip) ++;
      *tmp___124 = (unsigned char )((5 << 3) + 5);
      while (1) {
        imb___8.val = block_size;
        tmp___125 = jit->ip;
        (jit->ip) ++;
        *tmp___125 = imb___8.b[0];
        tmp___126 = jit->ip;
        (jit->ip) ++;
        *tmp___126 = imb___8.b[1];
        tmp___127 = jit->ip;
        (jit->ip) ++;
        *tmp___127 = imb___8.b[2];
        tmp___128 = jit->ip;
        (jit->ip) ++;
        *tmp___128 = imb___8.b[3];
        break;
      }
    } else {
      while (1) {
        if (counterreg > 7) {
          tmp___129 = 1;
        } else {
          tmp___129 = 0;
        }
        _amd64_rex_bits___8 = (unsigned char )(8 | tmp___129);
        if ((int )_amd64_rex_bits___8 != 0) {
          tmp___130 = jit->ip;
          (jit->ip) ++;
          *tmp___130 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
        }
        break;
      }
      tmp___131 = jit->ip;
      (jit->ip) ++;
      *tmp___131 = (unsigned char)129;
      while (1) {
        while (1) {
          tmp___132 = jit->ip;
          (jit->ip) ++;
          *tmp___132 = (unsigned char )(((3 << 6) | (5 << 3)) | (counterreg & 7));
          break;
        }
        break;
      }
      while (1) {
        imb___9.val = block_size;
        tmp___133 = jit->ip;
        (jit->ip) ++;
        *tmp___133 = imb___9.b[0];
        tmp___134 = jit->ip;
        (jit->ip) ++;
        *tmp___134 = imb___9.b[1];
        tmp___135 = jit->ip;
        (jit->ip) ++;
        *tmp___135 = imb___9.b[2];
        tmp___136 = jit->ip;
        (jit->ip) ++;
        *tmp___136 = imb___9.b[3];
        break;
      }
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___9 = (unsigned char)8;
      if ((int )_amd64_rex_bits___9 != 0) {
        tmp___137 = jit->ip;
        (jit->ip) ++;
        *tmp___137 = (unsigned char )(64 | (int )_amd64_rex_bits___9);
      }
      break;
    }
    while (1) {
      offset = (int )((loop - (jit_value )jit->ip) - 2L);
      if (offset >= -128) {
        if (offset <= 127) {
          while (1) {
            tmp___139 = jit->ip;
            (jit->ip) ++;
            *tmp___139 = (unsigned char )x86_cc_unsigned_map[1];
            while (1) {
              *(jit->ip) = (unsigned char )(offset & 255);
              (jit->ip) ++;
              break;
            }
            break;
          }
        } else {
          goto _L___8;
        }
      } else {
        _L___8: /* CIL Label */ 
        offset -= 4;
        while (1) {
          tmp___140 = jit->ip;
          (jit->ip) ++;
          *tmp___140 = (unsigned char)15;
          tmp___142 = jit->ip;
          (jit->ip) ++;
          *tmp___142 = (unsigned char )((int const   )x86_cc_unsigned_map[1] + 16);
          while (1) {
            imb___10.val = offset;
            tmp___143 = jit->ip;
            (jit->ip) ++;
            *tmp___143 = imb___10.b[0];
            tmp___144 = jit->ip;
            (jit->ip) ++;
            *tmp___144 = imb___10.b[1];
            tmp___145 = jit->ip;
            (jit->ip) ++;
            *tmp___145 = imb___10.b[2];
            tmp___146 = jit->ip;
            (jit->ip) ++;
            *tmp___146 = imb___10.b[3];
            break;
          }
          break;
        }
      }
      break;
    }
    break;
  }
  if (counter_in_use) {
    while (1) {
      while (1) {
        if (counterreg > 7) {
          tmp___147 = 1;
        } else {
          tmp___147 = 0;
        }
        _amd64_rex_bits___10 = (unsigned char )tmp___147;
        if ((int )_amd64_rex_bits___10 != 0) {
          tmp___148 = jit->ip;
          (jit->ip) ++;
          *tmp___148 = (unsigned char )(64 | (int )_amd64_rex_bits___10);
        }
        break;
      }
      tmp___149 = jit->ip;
      (jit->ip) ++;
      *tmp___149 = (unsigned char )(88 + (counterreg & 7));
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_memset LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF unload_reg LOC=UNKNOWN */
static void unload_reg(jit_op *op , jit_hw_reg *hreg , long virt_reg ) 
{ 


  {
  insert_reg_op(400, op, virt_reg, (jit_value )hreg->id);
  return;
}
}
/* END FUNCTION-DEF unload_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_fldx_op LOC=UNKNOWN */
static void emit_sse_fldx_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                             jit_value a3 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  jit_value tmp___1 ;
  int tmp___2 ;
  jit_value tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  x86_imm_buf imb ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___53 ;
  int tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___81 ;
  int tmp___82 ;
  int tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;

  {
  if ((unsigned long )op->arg_size == sizeof(float )) {
    if ((int )op->code & 2) {
      while (1) {
        tmp = jit->ip;
        (jit->ip) ++;
        *tmp = (unsigned char)243;
        while (1) {
          if (a1 > 7L) {
            tmp___0 = 4;
          } else {
            tmp___0 = 0;
          }
          if (a2 == 16L) {
            tmp___3 = (jit_value )0;
          } else {
            tmp___3 = a2;
          }
          if (tmp___3 > 7L) {
            tmp___2 = 1;
          } else {
            tmp___2 = 0;
          }
          _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___2);
          if ((int )_amd64_rex_bits != 0) {
            tmp___4 = jit->ip;
            (jit->ip) ++;
            *tmp___4 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        tmp___5 = jit->ip;
        (jit->ip) ++;
        *tmp___5 = (unsigned char)15;
        tmp___6 = jit->ip;
        (jit->ip) ++;
        *tmp___6 = (unsigned char)90;
        while (1) {
          if (a2 == 16L) {
            while (1) {
              tmp___7 = jit->ip;
              (jit->ip) ++;
              *tmp___7 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb.val = (int )a3;
              tmp___8 = jit->ip;
              (jit->ip) ++;
              *tmp___8 = imb.b[0];
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = imb.b[1];
              tmp___10 = jit->ip;
              (jit->ip) ++;
              *tmp___10 = imb.b[2];
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = imb.b[3];
              break;
            }
          } else {
            while (1) {
              if ((a2 & 7L) == 4L) {
                if (a3 == 0L) {
                  while (1) {
                    tmp___12 = jit->ip;
                    (jit->ip) ++;
                    *tmp___12 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___13 = jit->ip;
                    (jit->ip) ++;
                    *tmp___13 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                } else
                if ((int )a3 >= -128) {
                  if ((int )a3 <= 127) {
                    while (1) {
                      tmp___14 = jit->ip;
                      (jit->ip) ++;
                      *tmp___14 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                      break;
                    }
                    while (1) {
                      tmp___15 = jit->ip;
                      (jit->ip) ++;
                      *tmp___15 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(a3 & 255L);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L;
                  }
                } else {
                  _L: /* CIL Label */ 
                  while (1) {
                    tmp___16 = jit->ip;
                    (jit->ip) ++;
                    *tmp___16 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___17 = jit->ip;
                    (jit->ip) ++;
                    *tmp___17 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    imb___0.val = (int )a3;
                    tmp___18 = jit->ip;
                    (jit->ip) ++;
                    *tmp___18 = imb___0.b[0];
                    tmp___19 = jit->ip;
                    (jit->ip) ++;
                    *tmp___19 = imb___0.b[1];
                    tmp___20 = jit->ip;
                    (jit->ip) ++;
                    *tmp___20 = imb___0.b[2];
                    tmp___21 = jit->ip;
                    (jit->ip) ++;
                    *tmp___21 = imb___0.b[3];
                    break;
                  }
                }
                break;
              }
              if (a3 == 0L) {
                if ((a2 & 7L) != 5L) {
                  while (1) {
                    tmp___22 = jit->ip;
                    (jit->ip) ++;
                    *tmp___22 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                    break;
                  }
                  break;
                }
              }
              if ((int )a3 >= -128) {
                if ((int )a3 <= 127) {
                  while (1) {
                    tmp___23 = jit->ip;
                    (jit->ip) ++;
                    *tmp___23 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(a3 & 255L);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___0;
                }
              } else {
                _L___0: /* CIL Label */ 
                while (1) {
                  tmp___24 = jit->ip;
                  (jit->ip) ++;
                  *tmp___24 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                  break;
                }
                while (1) {
                  imb___1.val = (int )a3;
                  tmp___25 = jit->ip;
                  (jit->ip) ++;
                  *tmp___25 = imb___1.b[0];
                  tmp___26 = jit->ip;
                  (jit->ip) ++;
                  *tmp___26 = imb___1.b[1];
                  tmp___27 = jit->ip;
                  (jit->ip) ++;
                  *tmp___27 = imb___1.b[2];
                  tmp___28 = jit->ip;
                  (jit->ip) ++;
                  *tmp___28 = imb___1.b[3];
                  break;
                }
              }
              break;
            }
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        tmp___29 = jit->ip;
        (jit->ip) ++;
        *tmp___29 = (unsigned char)243;
        while (1) {
          if (a1 > 7L) {
            tmp___30 = 4;
          } else {
            tmp___30 = 0;
          }
          if (a3 > 7L) {
            tmp___31 = 2;
          } else {
            tmp___31 = 0;
          }
          if (a2 > 7L) {
            tmp___32 = 1;
          } else {
            tmp___32 = 0;
          }
          _amd64_rex_bits___0 = (unsigned char )(((8 | tmp___30) | tmp___31) | tmp___32);
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___33 = jit->ip;
            (jit->ip) ++;
            *tmp___33 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___34 = jit->ip;
        (jit->ip) ++;
        *tmp___34 = (unsigned char)15;
        tmp___35 = jit->ip;
        (jit->ip) ++;
        *tmp___35 = (unsigned char)90;
        while (1) {
          if (a2 == -1L) {
            while (1) {
              tmp___36 = jit->ip;
              (jit->ip) ++;
              *tmp___36 = (unsigned char )(((a1 & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___37 = jit->ip;
              (jit->ip) ++;
              *tmp___37 = (unsigned char )(((a3 & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb___2.val = 0;
              tmp___38 = jit->ip;
              (jit->ip) ++;
              *tmp___38 = imb___2.b[0];
              tmp___39 = jit->ip;
              (jit->ip) ++;
              *tmp___39 = imb___2.b[1];
              tmp___40 = jit->ip;
              (jit->ip) ++;
              *tmp___40 = imb___2.b[2];
              tmp___41 = jit->ip;
              (jit->ip) ++;
              *tmp___41 = imb___2.b[3];
              break;
            }
          } else
          if (a2 != 5L) {
            while (1) {
              tmp___42 = jit->ip;
              (jit->ip) ++;
              *tmp___42 = (unsigned char )(((a1 & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___43 = jit->ip;
              (jit->ip) ++;
              *tmp___43 = (unsigned char )((((a3 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
              break;
            }
          } else {
            while (1) {
              tmp___44 = jit->ip;
              (jit->ip) ++;
              *tmp___44 = (unsigned char )(((long )(1 << 6) | ((a1 & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___45 = jit->ip;
              (jit->ip) ++;
              *tmp___45 = (unsigned char )((((a3 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)0;
              (jit->ip) ++;
              break;
            }
          }
          break;
        }
        break;
      }
    }
  } else
  if ((int )op->code & 2) {
    while (1) {
      tmp___52 = jit->ip;
      (jit->ip) ++;
      *tmp___52 = (unsigned char)102;
      while (1) {
        if (a1 > 7L) {
          tmp___53 = 4;
        } else {
          tmp___53 = 0;
        }
        if (a2 > 7L) {
          tmp___54 = 1;
        } else {
          tmp___54 = 0;
        }
        _amd64_rex_bits___1 = (unsigned char )(tmp___53 | tmp___54);
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___55 = jit->ip;
          (jit->ip) ++;
          *tmp___55 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      tmp___56 = jit->ip;
      (jit->ip) ++;
      *tmp___56 = (unsigned char)15;
      tmp___57 = jit->ip;
      (jit->ip) ++;
      *tmp___57 = (unsigned char)18;
      while (1) {
        if (a2 == 16L) {
          while (1) {
            tmp___58 = jit->ip;
            (jit->ip) ++;
            *tmp___58 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
            break;
          }
          while (1) {
            imb___4.val = (int )a3;
            tmp___59 = jit->ip;
            (jit->ip) ++;
            *tmp___59 = imb___4.b[0];
            tmp___60 = jit->ip;
            (jit->ip) ++;
            *tmp___60 = imb___4.b[1];
            tmp___61 = jit->ip;
            (jit->ip) ++;
            *tmp___61 = imb___4.b[2];
            tmp___62 = jit->ip;
            (jit->ip) ++;
            *tmp___62 = imb___4.b[3];
            break;
          }
        } else {
          while (1) {
            if ((a2 & 7L) == 4L) {
              if (a3 == 0L) {
                while (1) {
                  tmp___63 = jit->ip;
                  (jit->ip) ++;
                  *tmp___63 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                  break;
                }
                while (1) {
                  tmp___64 = jit->ip;
                  (jit->ip) ++;
                  *tmp___64 = (unsigned char )((4 << 3) | 4);
                  break;
                }
              } else
              if ((int )a3 >= -128) {
                if ((int )a3 <= 127) {
                  while (1) {
                    tmp___65 = jit->ip;
                    (jit->ip) ++;
                    *tmp___65 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___66 = jit->ip;
                    (jit->ip) ++;
                    *tmp___66 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(a3 & 255L);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___1;
                }
              } else {
                _L___1: /* CIL Label */ 
                while (1) {
                  tmp___67 = jit->ip;
                  (jit->ip) ++;
                  *tmp___67 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                  break;
                }
                while (1) {
                  tmp___68 = jit->ip;
                  (jit->ip) ++;
                  *tmp___68 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  imb___5.val = (int )a3;
                  tmp___69 = jit->ip;
                  (jit->ip) ++;
                  *tmp___69 = imb___5.b[0];
                  tmp___70 = jit->ip;
                  (jit->ip) ++;
                  *tmp___70 = imb___5.b[1];
                  tmp___71 = jit->ip;
                  (jit->ip) ++;
                  *tmp___71 = imb___5.b[2];
                  tmp___72 = jit->ip;
                  (jit->ip) ++;
                  *tmp___72 = imb___5.b[3];
                  break;
                }
              }
              break;
            }
            if (a3 == 0L) {
              if ((a2 & 7L) != 5L) {
                while (1) {
                  tmp___73 = jit->ip;
                  (jit->ip) ++;
                  *tmp___73 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                  break;
                }
                break;
              }
            }
            if ((int )a3 >= -128) {
              if ((int )a3 <= 127) {
                while (1) {
                  tmp___74 = jit->ip;
                  (jit->ip) ++;
                  *tmp___74 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(a3 & 255L);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___2;
              }
            } else {
              _L___2: /* CIL Label */ 
              while (1) {
                tmp___75 = jit->ip;
                (jit->ip) ++;
                *tmp___75 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                break;
              }
              while (1) {
                imb___6.val = (int )a3;
                tmp___76 = jit->ip;
                (jit->ip) ++;
                *tmp___76 = imb___6.b[0];
                tmp___77 = jit->ip;
                (jit->ip) ++;
                *tmp___77 = imb___6.b[1];
                tmp___78 = jit->ip;
                (jit->ip) ++;
                *tmp___78 = imb___6.b[2];
                tmp___79 = jit->ip;
                (jit->ip) ++;
                *tmp___79 = imb___6.b[3];
                break;
              }
            }
            break;
          }
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      tmp___80 = jit->ip;
      (jit->ip) ++;
      *tmp___80 = (unsigned char)102;
      while (1) {
        if (a1 > 7L) {
          tmp___81 = 4;
        } else {
          tmp___81 = 0;
        }
        if (a3 > 7L) {
          tmp___82 = 2;
        } else {
          tmp___82 = 0;
        }
        if (a2 > 7L) {
          tmp___83 = 1;
        } else {
          tmp___83 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )(((8 | tmp___81) | tmp___82) | tmp___83);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___84 = jit->ip;
          (jit->ip) ++;
          *tmp___84 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___85 = jit->ip;
      (jit->ip) ++;
      *tmp___85 = (unsigned char)15;
      tmp___86 = jit->ip;
      (jit->ip) ++;
      *tmp___86 = (unsigned char)18;
      while (1) {
        if (a2 == -1L) {
          while (1) {
            tmp___87 = jit->ip;
            (jit->ip) ++;
            *tmp___87 = (unsigned char )(((a1 & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___88 = jit->ip;
            (jit->ip) ++;
            *tmp___88 = (unsigned char )(((a3 & 7L) << 3) | 5L);
            break;
          }
          while (1) {
            imb___7.val = 0;
            tmp___89 = jit->ip;
            (jit->ip) ++;
            *tmp___89 = imb___7.b[0];
            tmp___90 = jit->ip;
            (jit->ip) ++;
            *tmp___90 = imb___7.b[1];
            tmp___91 = jit->ip;
            (jit->ip) ++;
            *tmp___91 = imb___7.b[2];
            tmp___92 = jit->ip;
            (jit->ip) ++;
            *tmp___92 = imb___7.b[3];
            break;
          }
        } else
        if (a2 != 5L) {
          while (1) {
            tmp___93 = jit->ip;
            (jit->ip) ++;
            *tmp___93 = (unsigned char )(((a1 & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___94 = jit->ip;
            (jit->ip) ++;
            *tmp___94 = (unsigned char )((((a3 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
            break;
          }
        } else {
          while (1) {
            tmp___95 = jit->ip;
            (jit->ip) ++;
            *tmp___95 = (unsigned char )(((long )(1 << 6) | ((a1 & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            tmp___96 = jit->ip;
            (jit->ip) ++;
            *tmp___96 = (unsigned char )((((a3 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)0;
            (jit->ip) ++;
            break;
          }
        }
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_sse_fldx_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_reg_in_use LOC=UNKNOWN */
int jit_reg_in_use(jit_op *op , int reg , int fp ) 
{ 
  jit_value virt_reg ;
  jit_hw_reg *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = rmap_is_associated(op->regmap, reg, fp, & virt_reg);
  if (tmp) {
    tmp___0 = jit_set_get(op->live_in, (int )virt_reg);
    if (tmp___0) {
      return (1);
    } else {
      tmp___1 = jit_set_get(op->live_out, (int )virt_reg);
      if (tmp___1) {
        return (1);
      } else {
        return (0);
      }
    }
  } else {
    return (0);
  }
}
}
/* END FUNCTION-DEF jit_reg_in_use LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isupper LOC=UNKNOWN */
__inline extern int isupper(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 32768UL);
  return (tmp);
}
}
/* END FUNCTION-DEF isupper LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF check_register_types LOC=UNKNOWN */
static int check_register_types(struct jit *jit , jit_op *op , char *msg_buf ) 
{ 
  struct jit_func_info *info ;
  struct jit_func_info *tmp ;

  {
  switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
  case 776U: 
  tmp = jit_current_func_info(jit);
  info = tmp;
  if ((unsigned int )(info->args + op->arg[1])->type == 2U) {
    if (((int )op->spec & 3) != 1) {
      if (((int )op->spec & 3) != 3) {
        return (0);
      } else {
        goto _L;
      }
    } else
    _L: /* CIL Label */ 
    if ((op->arg[0] & 1L) == 1L) {
      return (0);
    }
  } else
  if (((int )op->spec & 3) != 1) {
    if (((int )op->spec & 3) != 3) {
      return (0);
    } else {
      goto _L___0;
    }
  } else
  _L___0: /* CIL Label */ 
  if ((op->arg[0] & 1L) == 0L) {
    return (0);
  }
  break;
  case 664U: 
  case 584U: 
  case 848U: 
  case 8U: 
  case 16U: 
  if (((int )op->spec & 3) != 1) {
    if (((int )op->spec & 3) != 3) {
      goto _L___2;
    } else {
      goto _L___3;
    }
  } else
  _L___3: /* CIL Label */ 
  if ((op->arg[0] & 1L) == 0L) {
    _L___2: /* CIL Label */ 
    if ((((int )op->spec >> 2) & 3) != 1) {
      if ((((int )op->spec >> 2) & 3) != 3) {
        return (0);
      } else {
        goto _L___1;
      }
    } else
    _L___1: /* CIL Label */ 
    if ((op->arg[1] & 1L) == 1L) {
      return (0);
    }
  }
  break;
  case 48U: 
  case 408U: 
  if (((int )op->spec & 3) != 1) {
    if (((int )op->spec & 3) != 3) {
      goto _L___5;
    } else {
      goto _L___6;
    }
  } else
  _L___6: /* CIL Label */ 
  if ((op->arg[0] & 1L) == 1L) {
    _L___5: /* CIL Label */ 
    if ((((int )op->spec >> 2) & 3) != 1) {
      if ((((int )op->spec >> 2) & 3) != 3) {
        return (0);
      } else {
        goto _L___4;
      }
    } else
    _L___4: /* CIL Label */ 
    if ((op->arg[1] & 1L) == 0L) {
      return (0);
    }
  }
  break;
  case 672U: 
  if (((int )op->spec & 3) != 1) {
    if (((int )op->spec & 3) != 3) {
      goto _L___10;
    } else {
      goto _L___11;
    }
  } else
  _L___11: /* CIL Label */ 
  if ((op->arg[0] & 1L) == 1L) {
    _L___10: /* CIL Label */ 
    if ((((int )op->spec >> 2) & 3) != 1) {
      if ((((int )op->spec >> 2) & 3) != 3) {
        goto _L___8;
      } else {
        goto _L___9;
      }
    } else
    _L___9: /* CIL Label */ 
    if ((op->arg[1] & 1L) == 0L) {
      _L___8: /* CIL Label */ 
      if ((((int )op->spec >> 4) & 3) != 1) {
        if ((((int )op->spec >> 4) & 3) != 3) {
          return (0);
        } else {
          goto _L___7;
        }
      } else
      _L___7: /* CIL Label */ 
      if ((op->arg[2] & 1L) == 0L) {
        return (0);
      }
    }
  }
  break;
  case 120U: 
  if (((int )op->spec & 3) != 1) {
    if (((int )op->spec & 3) != 3) {
      goto _L___15;
    } else {
      goto _L___16;
    }
  } else
  _L___16: /* CIL Label */ 
  if ((op->arg[0] & 1L) == 0L) {
    _L___15: /* CIL Label */ 
    if ((((int )op->spec >> 2) & 3) != 1) {
      if ((((int )op->spec >> 2) & 3) != 3) {
        goto _L___13;
      } else {
        goto _L___14;
      }
    } else
    _L___14: /* CIL Label */ 
    if ((op->arg[1] & 1L) == 0L) {
      _L___13: /* CIL Label */ 
      if ((((int )op->spec >> 4) & 3) != 1) {
        if ((((int )op->spec >> 4) & 3) != 3) {
          return (0);
        } else {
          goto _L___12;
        }
      } else
      _L___12: /* CIL Label */ 
      if ((op->arg[2] & 1L) == 1L) {
        return (0);
      }
    }
  }
  break;
  case 680U: 
  case 432U: 
  return (0);
  default: 
  if (! op->fp) {
    if (((int )op->spec & 3) != 1) {
      if (((int )op->spec & 3) != 3) {
        goto _L___20;
      } else {
        goto _L___21;
      }
    } else
    _L___21: /* CIL Label */ 
    if ((op->arg[0] & 1L) == 0L) {
      _L___20: /* CIL Label */ 
      if ((((int )op->spec >> 2) & 3) != 1) {
        if ((((int )op->spec >> 2) & 3) != 3) {
          goto _L___18;
        } else {
          goto _L___19;
        }
      } else
      _L___19: /* CIL Label */ 
      if ((op->arg[1] & 1L) == 0L) {
        _L___18: /* CIL Label */ 
        if ((((int )op->spec >> 4) & 3) != 1) {
          if ((((int )op->spec >> 4) & 3) != 3) {
            return (0);
          } else {
            goto _L___17;
          }
        } else
        _L___17: /* CIL Label */ 
        if ((op->arg[2] & 1L) == 0L) {
          return (0);
        }
      }
    }
  }
  if (op->fp) {
    if (((int )op->spec & 3) != 1) {
      if (((int )op->spec & 3) != 3) {
        goto _L___25;
      } else {
        goto _L___26;
      }
    } else
    _L___26: /* CIL Label */ 
    if ((op->arg[0] & 1L) == 1L) {
      _L___25: /* CIL Label */ 
      if ((((int )op->spec >> 2) & 3) != 1) {
        if ((((int )op->spec >> 2) & 3) != 3) {
          goto _L___23;
        } else {
          goto _L___24;
        }
      } else
      _L___24: /* CIL Label */ 
      if ((op->arg[1] & 1L) == 1L) {
        _L___23: /* CIL Label */ 
        if ((((int )op->spec >> 4) & 3) != 1) {
          if ((((int )op->spec >> 4) & 3) != 3) {
            return (0);
          } else {
            goto _L___22;
          }
        } else
        _L___22: /* CIL Label */ 
        if ((op->arg[2] & 1L) == 1L) {
          return (0);
        }
      }
    }
  }
  }
  append_msg(msg_buf, (char *)"register type mismatch");
  return (256);
}
}
/* END FUNCTION-DEF check_register_types LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_change_sign LOC=UNKNOWN */
static void emit_sse_change_sign(struct jit *jit , jit_op *op , int reg ) 
{ 
  unsigned char *tmp ;

  {
  tmp = emit_sse_get_sign_mask();
  sse_alu_pd_reg_safeimm(jit, op, 87, reg, (double *)tmp);
  return;
}
}
/* END FUNCTION-DEF emit_sse_change_sign LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_sync_aux LOC=UNKNOWN */
static void rmap_sync_aux(jit_tree *current , jit_tree *target , jit_op *op , int mode ) 
{ 
  int tmp ;
  int tmp___0 ;
  jit_tree *found ;
  jit_tree *tmp___1 ;
  int i ;
  jit_hw_reg *hreg ;
  long tmp___2 ;

  {
  if ((unsigned long )current == (unsigned long )((void *)0)) {
    return;
  }
  if (mode == 2) {
    tmp = jit_set_get(op->live_out, (int )current->key);
    if (! tmp) {
      goto skip;
    }
  }
  if (mode == 1) {
    tmp___0 = jit_set_get((op->jmp_addr)->live_in, (int )current->key);
    if (! tmp___0) {
      goto skip;
    }
  }
  tmp___1 = jit_tree_search(target, current->key);
  found = tmp___1;
  i = (int )current->key;
  if (! found) {
    goto _L;
  } else
  if ((unsigned long )current->value != (unsigned long )found->value) {
    _L: /* CIL Label */ 
    hreg = (jit_hw_reg *)current->value;
    switch (mode) {
    case 1: 
    unload_reg(op, hreg, (long )i);
    break;
    case 2: 
    load_reg(op, hreg, (long )i);
    break;
    default: 
    tmp___2 = __builtin_expect(1L, 0L);
    if (tmp___2) {
      __assert_rtn("rmap_sync_aux", "./jitter-amd64.c", 4951, "0");
    }
    }
  }
  skip: 
  rmap_sync_aux(current->left, target, op, mode);
  rmap_sync_aux(current->right, target, op, mode);
  return;
}
}
/* END FUNCTION-DEF rmap_sync_aux LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF _cipher$_xtea_decipherBlock LOC=UNKNOWN */
void _cipher$_xtea_decipherBlock(unsigned int num_rounds , unsigned int *v , unsigned int *key ) 
{ 
  unsigned int v0 ;
  unsigned int v1 ;
  unsigned int delta ;
  unsigned int sum ;
  unsigned int i ;

  {
  v0 = v[0];
  v1 = v[1];
  delta = 2117564857;
  sum = delta * num_rounds;
  i = 0;
  while (i < num_rounds) {
    v1 -= (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + key[(sum >> 11) & 3]);
    sum -= delta;
    v0 -= (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + key[sum & 3]);
    i ++;
  }
  v[0] = v0;
  v[1] = v1;
}
}
/* END FUNCTION-DEF _cipher$_xtea_decipherBlock LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF __darwin_fd_clr LOC=UNKNOWN */
__inline extern void ( __attribute__((__always_inline__)) __darwin_fd_clr)(int _fd ,
                                                                           struct fd_set * const  _p ) 
{ 
  int tmp ;

  {
  tmp = __darwin_check_fd_set(_fd, (void const   *)_p);
  if (tmp) {
    _p->fds_bits[(unsigned long )_fd / (sizeof(__int32_t ) * 8UL)] &= ~ ((__int32_t )(1UL << (unsigned long )_fd % (sizeof(__int32_t ) * 8UL)));
  }
  return;
}
}
/* END FUNCTION-DEF __darwin_fd_clr LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF mark_livecode LOC=UNKNOWN */
__inline static void mark_livecode(jit_op *op ) 
{ 


  {
  while (op) {
    if (op->in_use) {
      return;
    }
    op->in_use = (unsigned char)1;
    if (op->jmp_addr) {
      mark_livecode(op->jmp_addr);
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 792U) {
      return;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 304U) {
      return;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 336U) {
      return;
    }
    op = op->next;
  }
  return;
}
}
/* END FUNCTION-DEF mark_livecode LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_set_arg LOC=UNKNOWN */
__inline static void emit_set_arg(struct jit *jit , struct jit_out_arg *arg ) 
{ 
  int sreg ;
  int reg ;
  jit_value value ;
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  long tmp___5 ;
  unsigned char *tmp___6 ;
  x86_imm_buf imb ;
  int tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  int tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  x86_imm_buf imb___0 ;
  int tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  int tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  unsigned char *tmp___27 ;
  int tmp___28 ;
  unsigned char *tmp___29 ;
  int tmp___30 ;
  unsigned char *tmp___31 ;
  x86_imm_buf imb___1 ;
  int tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  int tmp___37 ;
  int tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___40 ;
  int tmp___41 ;
  int tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  long tmp___46 ;
  unsigned char *tmp___47 ;
  int tmp___48 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  amd64_imm_buf imb___2 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;

  {
  reg = (*((jit->reg_al)->gp_arg_regs + arg->argpos))->id;
  value = arg->value.generic;
  if (arg->isreg) {
    tmp___48 = is_spilled(value, jit->prepared_args.op, & sreg);
    if (tmp___48) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp = jit->ip;
          (jit->ip) ++;
          *tmp = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___0 = 8;
          } else {
            tmp___0 = 0;
          }
          if (reg > 7) {
            tmp___1 = 4;
          } else {
            tmp___1 = 0;
          }
          _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
          if ((int )_amd64_rex_bits != 0) {
            tmp___2 = jit->ip;
            (jit->ip) ++;
            *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___2 = jit->ip;
            (jit->ip) ++;
            *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___3 = jit->ip;
        (jit->ip) ++;
        *tmp___3 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char)139;
        break;
        default: 
        tmp___5 = __builtin_expect(1L, 0L);
        if (tmp___5) {
          __assert_rtn("emit_set_arg", "./jitter-amd64.c", 2057, "0");
        }
        }
        while (1) {
          while (1) {
            if (0) {
              tmp___26 = stack_reg_pos(jit, (int )value);
              if (tmp___26 == 0) {
                while (1) {
                  tmp___12 = jit->ip;
                  (jit->ip) ++;
                  *tmp___12 = (unsigned char )((((reg & 7) & 7) << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___13 = jit->ip;
                  (jit->ip) ++;
                  *tmp___13 = (unsigned char )((4 << 3) | 4);
                  break;
                }
              } else {
                tmp___24 = stack_reg_pos(jit, (int )value);
                if (tmp___24 >= -128) {
                  tmp___25 = stack_reg_pos(jit, (int )value);
                  if (tmp___25 <= 127) {
                    while (1) {
                      tmp___14 = jit->ip;
                      (jit->ip) ++;
                      *tmp___14 = (unsigned char )(((1 << 6) | (((reg & 7) & 7) << 3)) | 4);
                      break;
                    }
                    while (1) {
                      tmp___15 = jit->ip;
                      (jit->ip) ++;
                      *tmp___15 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      tmp___16 = stack_reg_pos(jit, (int )value);
                      *(jit->ip) = (unsigned char )(tmp___16 & 255);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L;
                  }
                } else {
                  _L: /* CIL Label */ 
                  while (1) {
                    tmp___17 = jit->ip;
                    (jit->ip) ++;
                    *tmp___17 = (unsigned char )(((2 << 6) | (((reg & 7) & 7) << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___18 = jit->ip;
                    (jit->ip) ++;
                    *tmp___18 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    tmp___19 = stack_reg_pos(jit, (int )value);
                    imb___0.val = tmp___19;
                    tmp___20 = jit->ip;
                    (jit->ip) ++;
                    *tmp___20 = imb___0.b[0];
                    tmp___21 = jit->ip;
                    (jit->ip) ++;
                    *tmp___21 = imb___0.b[1];
                    tmp___22 = jit->ip;
                    (jit->ip) ++;
                    *tmp___22 = imb___0.b[2];
                    tmp___23 = jit->ip;
                    (jit->ip) ++;
                    *tmp___23 = imb___0.b[3];
                    break;
                  }
                }
              }
              break;
            }
            tmp___28 = stack_reg_pos(jit, (int )value);
            if (tmp___28 == 0) {

            }
            tmp___37 = stack_reg_pos(jit, (int )value);
            if (tmp___37 >= -128) {
              tmp___38 = stack_reg_pos(jit, (int )value);
              if (tmp___38 <= 127) {
                while (1) {
                  tmp___29 = jit->ip;
                  (jit->ip) ++;
                  *tmp___29 = (unsigned char )(((1 << 6) | (((reg & 7) & 7) << 3)) | 5);
                  break;
                }
                while (1) {
                  tmp___30 = stack_reg_pos(jit, (int )value);
                  *(jit->ip) = (unsigned char )(tmp___30 & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___0;
              }
            } else {
              _L___0: /* CIL Label */ 
              while (1) {
                tmp___31 = jit->ip;
                (jit->ip) ++;
                *tmp___31 = (unsigned char )(((2 << 6) | (((reg & 7) & 7) << 3)) | 5);
                break;
              }
              while (1) {
                tmp___32 = stack_reg_pos(jit, (int )value);
                imb___1.val = tmp___32;
                tmp___33 = jit->ip;
                (jit->ip) ++;
                *tmp___33 = imb___1.b[0];
                tmp___34 = jit->ip;
                (jit->ip) ++;
                *tmp___34 = imb___1.b[1];
                tmp___35 = jit->ip;
                (jit->ip) ++;
                *tmp___35 = imb___1.b[2];
                tmp___36 = jit->ip;
                (jit->ip) ++;
                *tmp___36 = imb___1.b[3];
                break;
              }
            }
            break;
          }
          break;
        }
        break;
      }
    } else
    if (reg != sreg) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp___39 = jit->ip;
          (jit->ip) ++;
          *tmp___39 = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___40 = 8;
          } else {
            tmp___40 = 0;
          }
          if (reg > 7) {
            tmp___41 = 4;
          } else {
            tmp___41 = 0;
          }
          if (sreg > 7) {
            tmp___42 = 1;
          } else {
            tmp___42 = 0;
          }
          _amd64_rex_bits___0 = (unsigned char )((tmp___40 | tmp___41) | tmp___42);
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___43 = jit->ip;
            (jit->ip) ++;
            *tmp___43 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___43 = jit->ip;
            (jit->ip) ++;
            *tmp___43 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___44 = jit->ip;
        (jit->ip) ++;
        *tmp___44 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___45 = jit->ip;
        (jit->ip) ++;
        *tmp___45 = (unsigned char)139;
        break;
        default: 
        tmp___46 = __builtin_expect(1L, 0L);
        if (tmp___46) {
          __assert_rtn("emit_set_arg", "./jitter-amd64.c", 2059, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___47 = jit->ip;
            (jit->ip) ++;
            *tmp___47 = (unsigned char )(((3 << 6) | ((reg & 7) << 3)) | (sreg & 7));
            break;
          }
          break;
        }
        break;
      }
    }
  } else {
    while (1) {
      while (1) {
        if (reg > 7) {
          tmp___49 = 1;
        } else {
          tmp___49 = 0;
        }
        _amd64_rex_bits___1 = (unsigned char )(8 | tmp___49);
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___50 = jit->ip;
          (jit->ip) ++;
          *tmp___50 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      tmp___51 = jit->ip;
      (jit->ip) ++;
      *tmp___51 = (unsigned char )(184 + (reg & 7));
      while (1) {
        imb___2.val = (size_t )value;
        tmp___52 = jit->ip;
        (jit->ip) ++;
        *tmp___52 = imb___2.b[0];
        tmp___53 = jit->ip;
        (jit->ip) ++;
        *tmp___53 = imb___2.b[1];
        tmp___54 = jit->ip;
        (jit->ip) ++;
        *tmp___54 = imb___2.b[2];
        tmp___55 = jit->ip;
        (jit->ip) ++;
        *tmp___55 = imb___2.b[3];
        tmp___56 = jit->ip;
        (jit->ip) ++;
        *tmp___56 = imb___2.b[4];
        tmp___57 = jit->ip;
        (jit->ip) ++;
        *tmp___57 = imb___2.b[5];
        tmp___58 = jit->ip;
        (jit->ip) ++;
        *tmp___58 = imb___2.b[6];
        tmp___59 = jit->ip;
        (jit->ip) ++;
        *tmp___59 = imb___2.b[7];
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_set_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF platform_id LOC=UNKNOWN */
static char *platform_id(void) 
{ 


  {
  return ((char *)"amd64");
}
}
/* END FUNCTION-DEF platform_id LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_op_last_fun LOC=UNKNOWN */
__inline static jit_op *jit_op_last_fun(jit_op *op ) 
{ 


  {
  while (1) {
    if ((unsigned long )op->next != (unsigned long )((void *)0)) {
      if (! ((unsigned int )((jit_opcode )((int )(op->next)->code & 65528)) != 384U)) {
        break;
      }
    } else {
      break;
    }
    op = op->next;
  }
  return (op);
}
}
/* END FUNCTION-DEF jit_op_last_fun LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_ld_op LOC=UNKNOWN */
static void emit_ld_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  long tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  x86_imm_buf imb ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___13 ;
  int tmp___14 ;
  int tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  long tmp___19 ;
  unsigned char *tmp___20 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  long tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___64 ;
  int tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  long tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  long tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___88 ;
  int tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___109 ;
  int tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  long tmp___115 ;
  unsigned char *tmp___116 ;
  unsigned char *tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char *tmp___119 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___122 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  unsigned char *tmp___125 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char *tmp___128 ;
  x86_imm_buf imb___10 ;
  unsigned char *tmp___129 ;
  unsigned char *tmp___130 ;
  unsigned char *tmp___131 ;
  unsigned char *tmp___132 ;
  unsigned char *tmp___133 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___134 ;
  int tmp___135 ;
  int tmp___136 ;
  unsigned char *tmp___137 ;
  unsigned char *tmp___138 ;
  unsigned char *tmp___139 ;
  long tmp___140 ;
  unsigned char *tmp___141 ;
  x86_imm_buf imb___11 ;
  unsigned char *tmp___142 ;
  unsigned char *tmp___143 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  unsigned char *tmp___146 ;
  unsigned char *tmp___147 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;
  unsigned char *tmp___150 ;
  unsigned char *tmp___151 ;
  x86_imm_buf imb___12 ;
  unsigned char *tmp___152 ;
  unsigned char *tmp___153 ;
  unsigned char *tmp___154 ;
  unsigned char *tmp___155 ;
  unsigned char *tmp___156 ;
  unsigned char *tmp___157 ;
  unsigned char *tmp___158 ;
  x86_imm_buf imb___13 ;
  unsigned char *tmp___159 ;
  unsigned char *tmp___160 ;
  unsigned char *tmp___161 ;
  unsigned char *tmp___162 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___163 ;
  int tmp___164 ;
  unsigned char *tmp___165 ;
  unsigned char *tmp___166 ;
  unsigned char *tmp___167 ;
  unsigned char *tmp___168 ;
  long tmp___169 ;
  unsigned char *tmp___170 ;
  unsigned char *tmp___171 ;
  unsigned char *tmp___172 ;
  unsigned char *tmp___173 ;
  unsigned char *tmp___174 ;
  unsigned char *tmp___175 ;
  x86_imm_buf imb___14 ;
  unsigned char *tmp___176 ;
  unsigned char *tmp___177 ;
  unsigned char *tmp___178 ;
  unsigned char *tmp___179 ;
  unsigned char *tmp___180 ;
  unsigned char *tmp___181 ;
  unsigned char *tmp___182 ;
  x86_imm_buf imb___15 ;
  unsigned char *tmp___183 ;
  unsigned char *tmp___184 ;
  unsigned char *tmp___185 ;
  unsigned char *tmp___186 ;
  long tmp___187 ;

  {
  if ((unsigned long )op->arg_size == sizeof(void *)) {
    if ((int )op->code & 2) {
      while (1) {
        if ((int )op->arg_size == 2) {
          tmp = jit->ip;
          (jit->ip) ++;
          *tmp = (unsigned char)102;
        }
        while (1) {
          if ((int )op->arg_size > 4) {
            tmp___0 = 8;
          } else {
            tmp___0 = 0;
          }
          if (a1 > 7L) {
            tmp___1 = 4;
          } else {
            tmp___1 = 0;
          }
          _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
          if ((int )_amd64_rex_bits != 0) {
            tmp___2 = jit->ip;
            (jit->ip) ++;
            *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
          } else
          if ((int )op->arg_size == 1) {
            tmp___2 = jit->ip;
            (jit->ip) ++;
            *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        switch ((int )op->arg_size) {
        case 1: 
        tmp___3 = jit->ip;
        (jit->ip) ++;
        *tmp___3 = (unsigned char)138;
        break;
        case 8: 
        case 4: 
        case 2: 
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char)139;
        break;
        default: 
        tmp___5 = __builtin_expect(1L, 0L);
        if (tmp___5) {
          __assert_rtn("emit_ld_op", "./jitter-amd64.c", 3029, "0");
        }
        }
        while (1) {
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = (unsigned char )(((a1 & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___7 = jit->ip;
          (jit->ip) ++;
          *tmp___7 = (unsigned char )((4 << 3) | 5);
          break;
        }
        while (1) {
          imb.val = (int )a2;
          tmp___8 = jit->ip;
          (jit->ip) ++;
          *tmp___8 = imb.b[0];
          tmp___9 = jit->ip;
          (jit->ip) ++;
          *tmp___9 = imb.b[1];
          tmp___10 = jit->ip;
          (jit->ip) ++;
          *tmp___10 = imb.b[2];
          tmp___11 = jit->ip;
          (jit->ip) ++;
          *tmp___11 = imb.b[3];
          break;
        }
        break;
      }
    } else {
      while (1) {
        if ((int )op->arg_size == 2) {
          tmp___12 = jit->ip;
          (jit->ip) ++;
          *tmp___12 = (unsigned char)102;
        }
        while (1) {
          if ((int )op->arg_size > 4) {
            tmp___13 = 8;
          } else {
            tmp___13 = 0;
          }
          if (a1 > 7L) {
            tmp___14 = 4;
          } else {
            tmp___14 = 0;
          }
          if (a2 > 7L) {
            tmp___15 = 1;
          } else {
            tmp___15 = 0;
          }
          _amd64_rex_bits___0 = (unsigned char )((tmp___13 | tmp___14) | tmp___15);
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___16 = jit->ip;
            (jit->ip) ++;
            *tmp___16 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          } else
          if ((int )op->arg_size == 1) {
            tmp___16 = jit->ip;
            (jit->ip) ++;
            *tmp___16 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        switch ((int )op->arg_size) {
        case 1: 
        tmp___17 = jit->ip;
        (jit->ip) ++;
        *tmp___17 = (unsigned char)138;
        break;
        case 8: 
        case 4: 
        case 2: 
        tmp___18 = jit->ip;
        (jit->ip) ++;
        *tmp___18 = (unsigned char)139;
        break;
        default: 
        tmp___19 = __builtin_expect(1L, 0L);
        if (tmp___19) {
          __assert_rtn("emit_ld_op", "./jitter-amd64.c", 3030, "0");
        }
        }
        while (1) {
          if (a2 == 16L) {
            while (1) {
              tmp___20 = jit->ip;
              (jit->ip) ++;
              *tmp___20 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb___0.val = 0;
              tmp___21 = jit->ip;
              (jit->ip) ++;
              *tmp___21 = imb___0.b[0];
              tmp___22 = jit->ip;
              (jit->ip) ++;
              *tmp___22 = imb___0.b[1];
              tmp___23 = jit->ip;
              (jit->ip) ++;
              *tmp___23 = imb___0.b[2];
              tmp___24 = jit->ip;
              (jit->ip) ++;
              *tmp___24 = imb___0.b[3];
              break;
            }
          } else {
            while (1) {
              if ((a2 & 7L) == 4L) {
                while (1) {
                  tmp___25 = jit->ip;
                  (jit->ip) ++;
                  *tmp___25 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                  break;
                }
                while (1) {
                  tmp___26 = jit->ip;
                  (jit->ip) ++;
                  *tmp___26 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                break;
              }
              if ((a2 & 7L) != 5L) {
                while (1) {
                  tmp___35 = jit->ip;
                  (jit->ip) ++;
                  *tmp___35 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                  break;
                }
                break;
              }
              while (1) {
                tmp___36 = jit->ip;
                (jit->ip) ++;
                *tmp___36 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
              break;
            }
          }
          break;
        }
        break;
      }
    }
    return;
  }
  switch ((int )op->code) {
  case 26: 
  while (1) {
    if ((int )op->arg_size == 4) {
      while (1) {
        while (1) {
          if (a1 > 7L) {
            tmp___42 = 4;
          } else {
            tmp___42 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )(8 | tmp___42);
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___43 = jit->ip;
            (jit->ip) ++;
            *tmp___43 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___44 = jit->ip;
        (jit->ip) ++;
        *tmp___44 = (unsigned char)99;
        while (1) {
          tmp___45 = jit->ip;
          (jit->ip) ++;
          *tmp___45 = (unsigned char )(((a1 & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___46 = jit->ip;
          (jit->ip) ++;
          *tmp___46 = (unsigned char )((4 << 3) | 5);
          break;
        }
        while (1) {
          imb___3.val = (int )a2;
          tmp___47 = jit->ip;
          (jit->ip) ++;
          *tmp___47 = imb___3.b[0];
          tmp___48 = jit->ip;
          (jit->ip) ++;
          *tmp___48 = imb___3.b[1];
          tmp___49 = jit->ip;
          (jit->ip) ++;
          *tmp___49 = imb___3.b[2];
          tmp___50 = jit->ip;
          (jit->ip) ++;
          *tmp___50 = imb___3.b[3];
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      if (a1 > 7L) {
        tmp___51 = 4;
      } else {
        tmp___51 = 0;
      }
      _amd64_rex_bits___2 = (unsigned char )(8 | tmp___51);
      if ((int )_amd64_rex_bits___2 != 0) {
        tmp___52 = jit->ip;
        (jit->ip) ++;
        *tmp___52 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
      }
      break;
    }
    tmp___53 = jit->ip;
    (jit->ip) ++;
    *tmp___53 = (unsigned char)15;
    switch ((int )op->arg_size) {
    case 1: 
    tmp___54 = jit->ip;
    (jit->ip) ++;
    *tmp___54 = (unsigned char)190;
    break;
    case 2: 
    tmp___55 = jit->ip;
    (jit->ip) ++;
    *tmp___55 = (unsigned char)191;
    break;
    default: 
    tmp___56 = __builtin_expect(1L, 0L);
    if (tmp___56) {
      __assert_rtn("emit_ld_op", "./jitter-amd64.c", 3035, "0");
    }
    }
    while (1) {
      tmp___57 = jit->ip;
      (jit->ip) ++;
      *tmp___57 = (unsigned char )(((a1 & 7L) << 3) | 4L);
      break;
    }
    while (1) {
      tmp___58 = jit->ip;
      (jit->ip) ++;
      *tmp___58 = (unsigned char )((4 << 3) | 5);
      break;
    }
    while (1) {
      imb___4.val = (int )a2;
      tmp___59 = jit->ip;
      (jit->ip) ++;
      *tmp___59 = imb___4.b[0];
      tmp___60 = jit->ip;
      (jit->ip) ++;
      *tmp___60 = imb___4.b[1];
      tmp___61 = jit->ip;
      (jit->ip) ++;
      *tmp___61 = imb___4.b[2];
      tmp___62 = jit->ip;
      (jit->ip) ++;
      *tmp___62 = imb___4.b[3];
      break;
    }
    break;
  }
  break;
  case 30: 
  while (1) {
    if ((int )op->arg_size == 8) {
      goto _L;
    } else
    if ((int )op->arg_size == 4) {
      _L: /* CIL Label */ 
      while (1) {
        if ((int )op->arg_size == 2) {
          tmp___63 = jit->ip;
          (jit->ip) ++;
          *tmp___63 = (unsigned char)102;
        }
        while (1) {
          if ((int )op->arg_size > 4) {
            tmp___64 = 8;
          } else {
            tmp___64 = 0;
          }
          if (a1 > 7L) {
            tmp___65 = 4;
          } else {
            tmp___65 = 0;
          }
          _amd64_rex_bits___3 = (unsigned char )(tmp___64 | tmp___65);
          if ((int )_amd64_rex_bits___3 != 0) {
            tmp___66 = jit->ip;
            (jit->ip) ++;
            *tmp___66 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          } else
          if ((int )op->arg_size == 1) {
            tmp___66 = jit->ip;
            (jit->ip) ++;
            *tmp___66 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          }
          break;
        }
        switch ((int )op->arg_size) {
        case 1: 
        tmp___67 = jit->ip;
        (jit->ip) ++;
        *tmp___67 = (unsigned char)138;
        break;
        case 8: 
        case 4: 
        case 2: 
        tmp___68 = jit->ip;
        (jit->ip) ++;
        *tmp___68 = (unsigned char)139;
        break;
        default: 
        tmp___69 = __builtin_expect(1L, 0L);
        if (tmp___69) {
          __assert_rtn("emit_ld_op", "./jitter-amd64.c", 3036, "0");
        }
        }
        while (1) {
          tmp___70 = jit->ip;
          (jit->ip) ++;
          *tmp___70 = (unsigned char )(((a1 & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___71 = jit->ip;
          (jit->ip) ++;
          *tmp___71 = (unsigned char )((4 << 3) | 5);
          break;
        }
        while (1) {
          imb___5.val = (int )a2;
          tmp___72 = jit->ip;
          (jit->ip) ++;
          *tmp___72 = imb___5.b[0];
          tmp___73 = jit->ip;
          (jit->ip) ++;
          *tmp___73 = imb___5.b[1];
          tmp___74 = jit->ip;
          (jit->ip) ++;
          *tmp___74 = imb___5.b[2];
          tmp___75 = jit->ip;
          (jit->ip) ++;
          *tmp___75 = imb___5.b[3];
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      if (a1 > 7L) {
        tmp___76 = 4;
      } else {
        tmp___76 = 0;
      }
      _amd64_rex_bits___4 = (unsigned char )(8 | tmp___76);
      if ((int )_amd64_rex_bits___4 != 0) {
        tmp___77 = jit->ip;
        (jit->ip) ++;
        *tmp___77 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
      }
      break;
    }
    tmp___78 = jit->ip;
    (jit->ip) ++;
    *tmp___78 = (unsigned char)15;
    switch ((int )op->arg_size) {
    case 1: 
    tmp___79 = jit->ip;
    (jit->ip) ++;
    *tmp___79 = (unsigned char)182;
    break;
    case 2: 
    tmp___80 = jit->ip;
    (jit->ip) ++;
    *tmp___80 = (unsigned char)183;
    break;
    default: 
    tmp___81 = __builtin_expect(1L, 0L);
    if (tmp___81) {
      __assert_rtn("emit_ld_op", "./jitter-amd64.c", 3036, "0");
    }
    }
    while (1) {
      tmp___82 = jit->ip;
      (jit->ip) ++;
      *tmp___82 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
      break;
    }
    while (1) {
      tmp___83 = jit->ip;
      (jit->ip) ++;
      *tmp___83 = (unsigned char )((4 << 3) | 5);
      break;
    }
    while (1) {
      imb___6.val = (int )a2;
      tmp___84 = jit->ip;
      (jit->ip) ++;
      *tmp___84 = imb___6.b[0];
      tmp___85 = jit->ip;
      (jit->ip) ++;
      *tmp___85 = imb___6.b[1];
      tmp___86 = jit->ip;
      (jit->ip) ++;
      *tmp___86 = imb___6.b[2];
      tmp___87 = jit->ip;
      (jit->ip) ++;
      *tmp___87 = imb___6.b[3];
      break;
    }
    break;
  }
  break;
  case 25: 
  while (1) {
    if ((int )op->arg_size == 4) {
      while (1) {
        while (1) {
          if (a1 > 7L) {
            tmp___88 = 4;
          } else {
            tmp___88 = 0;
          }
          if (a2 > 7L) {
            tmp___89 = 1;
          } else {
            tmp___89 = 0;
          }
          _amd64_rex_bits___5 = (unsigned char )((8 | tmp___88) | tmp___89);
          if ((int )_amd64_rex_bits___5 != 0) {
            tmp___90 = jit->ip;
            (jit->ip) ++;
            *tmp___90 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
          }
          break;
        }
        tmp___91 = jit->ip;
        (jit->ip) ++;
        *tmp___91 = (unsigned char)99;
        while (1) {
          if ((a2 & 7L) == 4L) {
            while (1) {
              tmp___92 = jit->ip;
              (jit->ip) ++;
              *tmp___92 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___93 = jit->ip;
              (jit->ip) ++;
              *tmp___93 = (unsigned char )((4 << 3) | 4);
              break;
            }
            break;
          }
          if ((a2 & 7L) != 5L) {
            while (1) {
              tmp___102 = jit->ip;
              (jit->ip) ++;
              *tmp___102 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
              break;
            }
            break;
          }
          while (1) {
            tmp___103 = jit->ip;
            (jit->ip) ++;
            *tmp___103 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)0;
            (jit->ip) ++;
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      if (a1 > 7L) {
        tmp___109 = 4;
      } else {
        tmp___109 = 0;
      }
      if (a2 > 7L) {
        tmp___110 = 1;
      } else {
        tmp___110 = 0;
      }
      _amd64_rex_bits___6 = (unsigned char )((8 | tmp___109) | tmp___110);
      if ((int )_amd64_rex_bits___6 != 0) {
        tmp___111 = jit->ip;
        (jit->ip) ++;
        *tmp___111 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
      }
      break;
    }
    tmp___112 = jit->ip;
    (jit->ip) ++;
    *tmp___112 = (unsigned char)15;
    switch ((int )op->arg_size) {
    case 1: 
    tmp___113 = jit->ip;
    (jit->ip) ++;
    *tmp___113 = (unsigned char)190;
    break;
    case 2: 
    tmp___114 = jit->ip;
    (jit->ip) ++;
    *tmp___114 = (unsigned char)191;
    break;
    default: 
    tmp___115 = __builtin_expect(1L, 0L);
    if (tmp___115) {
      __assert_rtn("emit_ld_op", "./jitter-amd64.c", 3037, "0");
    }
    }
    while (1) {
      if ((a2 & 7L) == 4L) {
        while (1) {
          tmp___116 = jit->ip;
          (jit->ip) ++;
          *tmp___116 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___117 = jit->ip;
          (jit->ip) ++;
          *tmp___117 = (unsigned char )((4 << 3) | 4);
          break;
        }
        break;
      }
      if ((a2 & 7L) != 5L) {
        while (1) {
          tmp___126 = jit->ip;
          (jit->ip) ++;
          *tmp___126 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
          break;
        }
        break;
      }
      while (1) {
        tmp___127 = jit->ip;
        (jit->ip) ++;
        *tmp___127 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
        break;
      }
      while (1) {
        *(jit->ip) = (unsigned char)0;
        (jit->ip) ++;
        break;
      }
      break;
    }
    break;
  }
  break;
  case 29: 
  while (1) {
    if ((int )op->arg_size == 8) {
      goto _L___0;
    } else
    if ((int )op->arg_size == 4) {
      _L___0: /* CIL Label */ 
      while (1) {
        if ((int )op->arg_size == 2) {
          tmp___133 = jit->ip;
          (jit->ip) ++;
          *tmp___133 = (unsigned char)102;
        }
        while (1) {
          if ((int )op->arg_size > 4) {
            tmp___134 = 8;
          } else {
            tmp___134 = 0;
          }
          if (a1 > 7L) {
            tmp___135 = 4;
          } else {
            tmp___135 = 0;
          }
          if (a2 > 7L) {
            tmp___136 = 1;
          } else {
            tmp___136 = 0;
          }
          _amd64_rex_bits___7 = (unsigned char )((tmp___134 | tmp___135) | tmp___136);
          if ((int )_amd64_rex_bits___7 != 0) {
            tmp___137 = jit->ip;
            (jit->ip) ++;
            *tmp___137 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
          } else
          if ((int )op->arg_size == 1) {
            tmp___137 = jit->ip;
            (jit->ip) ++;
            *tmp___137 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
          }
          break;
        }
        switch ((int )op->arg_size) {
        case 1: 
        tmp___138 = jit->ip;
        (jit->ip) ++;
        *tmp___138 = (unsigned char)138;
        break;
        case 8: 
        case 4: 
        case 2: 
        tmp___139 = jit->ip;
        (jit->ip) ++;
        *tmp___139 = (unsigned char)139;
        break;
        default: 
        tmp___140 = __builtin_expect(1L, 0L);
        if (tmp___140) {
          __assert_rtn("emit_ld_op", "./jitter-amd64.c", 3038, "0");
        }
        }
        while (1) {
          if (a2 == 16L) {
            while (1) {
              tmp___141 = jit->ip;
              (jit->ip) ++;
              *tmp___141 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb___11.val = 0;
              tmp___142 = jit->ip;
              (jit->ip) ++;
              *tmp___142 = imb___11.b[0];
              tmp___143 = jit->ip;
              (jit->ip) ++;
              *tmp___143 = imb___11.b[1];
              tmp___144 = jit->ip;
              (jit->ip) ++;
              *tmp___144 = imb___11.b[2];
              tmp___145 = jit->ip;
              (jit->ip) ++;
              *tmp___145 = imb___11.b[3];
              break;
            }
          } else {
            while (1) {
              if ((a2 & 7L) == 4L) {
                while (1) {
                  tmp___146 = jit->ip;
                  (jit->ip) ++;
                  *tmp___146 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                  break;
                }
                while (1) {
                  tmp___147 = jit->ip;
                  (jit->ip) ++;
                  *tmp___147 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                break;
              }
              if ((a2 & 7L) != 5L) {
                while (1) {
                  tmp___156 = jit->ip;
                  (jit->ip) ++;
                  *tmp___156 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                  break;
                }
                break;
              }
              while (1) {
                tmp___157 = jit->ip;
                (jit->ip) ++;
                *tmp___157 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      if (a1 > 7L) {
        tmp___163 = 4;
      } else {
        tmp___163 = 0;
      }
      if (a2 > 7L) {
        tmp___164 = 1;
      } else {
        tmp___164 = 0;
      }
      _amd64_rex_bits___8 = (unsigned char )((8 | tmp___163) | tmp___164);
      if ((int )_amd64_rex_bits___8 != 0) {
        tmp___165 = jit->ip;
        (jit->ip) ++;
        *tmp___165 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
      }
      break;
    }
    tmp___166 = jit->ip;
    (jit->ip) ++;
    *tmp___166 = (unsigned char)15;
    switch ((int )op->arg_size) {
    case 1: 
    tmp___167 = jit->ip;
    (jit->ip) ++;
    *tmp___167 = (unsigned char)182;
    break;
    case 2: 
    tmp___168 = jit->ip;
    (jit->ip) ++;
    *tmp___168 = (unsigned char)183;
    break;
    default: 
    tmp___169 = __builtin_expect(1L, 0L);
    if (tmp___169) {
      __assert_rtn("emit_ld_op", "./jitter-amd64.c", 3038, "0");
    }
    }
    while (1) {
      if ((a2 & 7L) == 4L) {
        while (1) {
          tmp___170 = jit->ip;
          (jit->ip) ++;
          *tmp___170 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___171 = jit->ip;
          (jit->ip) ++;
          *tmp___171 = (unsigned char )((4 << 3) | 4);
          break;
        }
        break;
      }
      if ((a2 & 7L) != 5L) {
        while (1) {
          tmp___180 = jit->ip;
          (jit->ip) ++;
          *tmp___180 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
          break;
        }
        break;
      }
      while (1) {
        tmp___181 = jit->ip;
        (jit->ip) ++;
        *tmp___181 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
        break;
      }
      while (1) {
        *(jit->ip) = (unsigned char)0;
        (jit->ip) ++;
        break;
      }
      break;
    }
    break;
  }
  break;
  default: 
  tmp___187 = __builtin_expect(1L, 0L);
  if (tmp___187) {
    __assert_rtn("emit_ld_op", "./jitter-amd64.c", 3039, "0");
  }
  }
  return;
}
}
/* END FUNCTION-DEF emit_ld_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF init_tigress LOC=UNKNOWN */
void init_tigress(void) 
{ 
  struct __2_init_tigress_1_opaque_NodeStruct *p1 ;
  int i2 ;
  struct __2_init_tigress_1_opaque_NodeStruct *p3 ;

  {
  while (1) {
    __asm__ volatile ("##_ANNOTATION_INITIALREGION_--2-init-tigress--2":);
    {
    {
    while (1) {
      __asm__ volatile ("##_ANNOTATION_ATOMICREGION_--2-init-tigress--1":);
      p1 = (struct __2_init_tigress_1_opaque_NodeStruct *)malloc(sizeof(struct __2_init_tigress_1_opaque_NodeStruct ));
      p1->next = p1;
      p1->prev = p1;
      __2_init_tigress_1_opaque_list_1 = p1;
      i2 = 0;
      while (i2 < 2) {
        p3 = (struct __2_init_tigress_1_opaque_NodeStruct *)malloc(sizeof(struct __2_init_tigress_1_opaque_NodeStruct ));
        p3->data = i2 * (((__1_entropy + 10) + 1UL) + ((- __1_entropy - 1UL) | (- 10 - 1UL)));
        p3->next = __2_init_tigress_1_opaque_list_1->next;
        p3->prev = __2_init_tigress_1_opaque_list_1;
        (__2_init_tigress_1_opaque_list_1->next)->prev = p3;
        __2_init_tigress_1_opaque_list_1->next = p3;
        i2 ++;
      }
      __2_init_tigress_1_opaque_ptr_1 = __2_init_tigress_1_opaque_list_1->next;
      __2_init_tigress_1_opaque_ptr_2 = __2_init_tigress_1_opaque_ptr_1;
      __2_init_tigress_1_opaque_ptr_2 = __2_init_tigress_1_opaque_ptr_2->next;
      break;
    }
    }
    }
    break;
  }
  return;
}
}
/* END FUNCTION-DEF init_tigress LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_tree_insert LOC=UNKNOWN */
static jit_tree *jit_tree_insert(jit_tree *root , jit_tree_key key , jit_tree_value value ,
                                 int *found ) 
{ 


  {
  if (found) {
    *found = 0;
  }
  root = node_insert(root, key, value, found);
  root->color = 0;
  return (root);
}
}
/* END FUNCTION-DEF jit_tree_insert LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isgraph LOC=UNKNOWN */
__inline extern int isgraph(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 2048UL);
  return (tmp);
}
}
/* END FUNCTION-DEF isgraph LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF spill_all_registers LOC=UNKNOWN */
static int spill_all_registers(jit_op *op , struct jit_reg_allocator *al ) 
{ 
  jit_value reg ;
  int i ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp ;
  int tmp___0 ;
  int i___0 ;
  jit_hw_reg *hreg___0 ;
  jit_hw_reg *tmp___1 ;
  int tmp___2 ;

  {
  i = 0;
  while (i < al->gp_reg_cnt) {
    tmp = rmap_is_associated(op->regmap, (al->gp_regs + i)->id, 0, & reg);
    hreg = tmp;
    if (hreg) {
      tmp___0 = jit_set_get(op->live_out, (int )reg);
      if (tmp___0) {
        if (op->in_use) {
          unload_reg(op, hreg, reg);
        }
        rmap_unassoc(op->regmap, reg);
      }
    }
    i ++;
  }
  i___0 = 0;
  while (i___0 < al->fp_reg_cnt) {
    tmp___1 = rmap_is_associated(op->regmap, (al->fp_regs + i___0)->id, 1, & reg);
    hreg___0 = tmp___1;
    if (hreg___0) {
      tmp___2 = jit_set_get(op->live_out, (int )reg);
      if (tmp___2) {
        if (op->in_use) {
          unload_reg(op, hreg___0, reg);
        }
        rmap_unassoc(op->regmap, reg);
      }
    }
    i___0 ++;
  }
  return (1);
}
}
/* END FUNCTION-DEF spill_all_registers LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_branch_op LOC=UNKNOWN */
static void emit_branch_op(struct jit *jit , struct jit_op *op , int cond , int imm ,
                           int sign ) 
{ 
  unsigned char _amd64_rex_bits ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  x86_imm_buf imb ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___17 ;
  int tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___22 ;
  int offset ;
  int tmp___23 ;
  jit_value tmp___24 ;
  int tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;

  {
  if (imm) {
    while (1) {
      if ((int )op->r_arg[2] >= -128) {
        if ((int )op->r_arg[2] <= 127) {
          while (1) {
            if (op->r_arg[1] > 7L) {
              tmp = 1;
            } else {
              tmp = 0;
            }
            _amd64_rex_bits = (unsigned char )(8 | tmp);
            if ((int )_amd64_rex_bits != 0) {
              tmp___0 = jit->ip;
              (jit->ip) ++;
              *tmp___0 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___1 = jit->ip;
          (jit->ip) ++;
          *tmp___1 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___2 = jit->ip;
              (jit->ip) ++;
              *tmp___2 = (unsigned char )((long )((3 << 6) | (7 << 3)) | (op->r_arg[1] & 7L));
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(op->r_arg[2] & 255L);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else
      _L: /* CIL Label */ 
      if (op->r_arg[1] == 0L) {
        while (1) {
          _amd64_rex_bits___0 = (unsigned char)8;
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char )((7 << 3) + 5);
        while (1) {
          imb.val = (int )op->r_arg[2];
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = imb.b[0];
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = imb.b[1];
          tmp___7 = jit->ip;
          (jit->ip) ++;
          *tmp___7 = imb.b[2];
          tmp___8 = jit->ip;
          (jit->ip) ++;
          *tmp___8 = imb.b[3];
          break;
        }
      } else {
        while (1) {
          if (op->r_arg[1] > 7L) {
            tmp___9 = 1;
          } else {
            tmp___9 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )(8 | tmp___9);
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___10 = jit->ip;
            (jit->ip) ++;
            *tmp___10 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___11 = jit->ip;
        (jit->ip) ++;
        *tmp___11 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = (unsigned char )((long )((3 << 6) | (7 << 3)) | (op->r_arg[1] & 7L));
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = (int )op->r_arg[2];
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = imb___0.b[0];
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = imb___0.b[1];
          tmp___15 = jit->ip;
          (jit->ip) ++;
          *tmp___15 = imb___0.b[2];
          tmp___16 = jit->ip;
          (jit->ip) ++;
          *tmp___16 = imb___0.b[3];
          break;
        }
      }
      break;
    }
  } else {
    while (1) {
      while (1) {
        if (op->r_arg[1] > 7L) {
          tmp___17 = 4;
        } else {
          tmp___17 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___18 = 1;
        } else {
          tmp___18 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )((8 | tmp___17) | tmp___18);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___19 = jit->ip;
          (jit->ip) ++;
          *tmp___19 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___20 = jit->ip;
      (jit->ip) ++;
      *tmp___20 = (unsigned char )((7 << 3) + 3);
      while (1) {
        while (1) {
          tmp___21 = jit->ip;
          (jit->ip) ++;
          *tmp___21 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[1] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
  while (1) {
    while (1) {
      _amd64_rex_bits___3 = (unsigned char)8;
      if ((int )_amd64_rex_bits___3 != 0) {
        tmp___22 = jit->ip;
        (jit->ip) ++;
        *tmp___22 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
      }
      break;
    }
    while (1) {
      tmp___25 = jit_is_label(jit, (void *)op->r_arg[0]);
      if (tmp___25) {
        tmp___24 = ((jit_value )jit->buf + ((jit_label *)op->r_arg[0])->pos) - (jit_value )jit->ip;
      } else {
        tmp___24 = op->r_arg[0];
      }
      offset = (int )(tmp___24 - 6L);
      while (1) {
        tmp___26 = jit->ip;
        (jit->ip) ++;
        *tmp___26 = (unsigned char)15;
        if (sign) {
          tmp___27 = jit->ip;
          (jit->ip) ++;
          *tmp___27 = (unsigned char )((int const   )x86_cc_signed_map[cond] + 16);
        } else {
          tmp___28 = jit->ip;
          (jit->ip) ++;
          *tmp___28 = (unsigned char )((int const   )x86_cc_unsigned_map[cond] + 16);
        }
        while (1) {
          imb___1.val = offset;
          tmp___29 = jit->ip;
          (jit->ip) ++;
          *tmp___29 = imb___1.b[0];
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = imb___1.b[1];
          tmp___31 = jit->ip;
          (jit->ip) ++;
          *tmp___31 = imb___1.b[2];
          tmp___32 = jit->ip;
          (jit->ip) ++;
          *tmp___32 = imb___1.b[3];
          break;
        }
        break;
      }
      break;
    }
    break;
  }
  return;
}
}
/* END FUNCTION-DEF emit_branch_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_init_arg_params LOC=UNKNOWN */
void jit_init_arg_params(struct jit *jit , struct jit_func_info *info , int p , int *phys_reg ) 
{ 
  struct jit_arg_layout *layout ;
  struct jit_arg_layout *tmp ;
  struct jit_inp_arg *a ;
  struct jit_arg_layout_location *location ;

  {
  tmp = jit_arg_layout_create_input(jit, info, p);
  layout = tmp;
  a = info->args + p;
  location = & layout->arguments[p];
  a->passed_by_reg = location->passed_in_reg;
  a->overflow = 0;
  if (! location->passed_in_reg) {
    a->location.stack_pos = (int )((unsigned long )(2 + location->index) * sizeof(void *));
    a->spill_pos = a->location.stack_pos;
  } else
  if (! location->isfp) {
    a->location.reg = (*((jit->reg_al)->gp_arg_regs + location->index))->id;
    a->spill_pos = stack_arg_pos(jit, info, a->gp_pos);
  } else {
    a->location.reg = (*((jit->reg_al)->fp_arg_regs + location->index))->id;
    a->spill_pos = stack_fparg_pos(jit, info, a->fp_pos);
  }
  free((void *)layout);
  return;
}
}
/* END FUNCTION-DEF jit_init_arg_params LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_get_op_name LOC=UNKNOWN */
char *jit_get_op_name(struct jit_op *op ) 
{ 


  {
  switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
  case 616U: 
  return ((char *)"mov");
  case 24U: 
  return ((char *)"ld");
  case 112U: 
  return ((char *)"ldx");
  case 480U: 
  return ((char *)"st");
  case 752U: 
  return ((char *)"stx");
  case 296U: 
  return ((char *)"memcpy");
  case 136U: 
  return ((char *)"memset");
  case 336U: 
  return ((char *)"jmp");
  case 344U: 
  return ((char *)".patch");
  case 840U: 
  return ((char *)"prepare");
  case 760U: 
  return ((char *)"putarg");
  case 648U: 
  return ((char *)"call");
  case 792U: 
  return ((char *)"ret");
  case 384U: 
  return ((char *)"prolog");
  case 776U: 
  return ((char *)"getarg");
  case 544U: 
  return ((char *)"retval");
  case 520U: 
  return ((char *)"alloca");
  case 808U: 
  return ((char *)"declare_arg");
  case 824U: 
  return ((char *)"add");
  case 464U: 
  return ((char *)"addc");
  case 888U: 
  return ((char *)"addx");
  case 424U: 
  return ((char *)"sub");
  case 328U: 
  return ((char *)"subc");
  case 192U: 
  return ((char *)"subx");
  case 656U: 
  return ((char *)"rsb");
  case 232U: 
  return ((char *)"neg");
  case 96U: 
  return ((char *)"mul");
  case 352U: 
  return ((char *)"hmul");
  case 688U: 
  return ((char *)"div");
  case 832U: 
  return ((char *)"mod");
  case 536U: 
  return ((char *)"or");
  case 704U: 
  return ((char *)"xor");
  case 552U: 
  return ((char *)"and");
  case 720U: 
  return ((char *)"lsh");
  case 712U: 
  return ((char *)"rsh");
  case 784U: 
  return ((char *)"not");
  case 312U: 
  return ((char *)"lt");
  case 632U: 
  return ((char *)"le");
  case 696U: 
  return ((char *)"gt");
  case 456U: 
  return ((char *)"ge");
  case 560U: 
  return ((char *)"eq");
  case 568U: 
  return ((char *)"ne");
  case 504U: 
  return ((char *)"blt");
  case 376U: 
  return ((char *)"ble");
  case 768U: 
  return ((char *)"bgt");
  case 176U: 
  return ((char *)"bge");
  case 80U: 
  return ((char *)"beq");
  case 528U: 
  return ((char *)"bne");
  case 264U: 
  return ((char *)"bms");
  case 896U: 
  return ((char *)"bmc");
  case 208U: 
  return ((char *)"boadd");
  case 872U: 
  return ((char *)"bosub");
  case 736U: 
  return ((char *)"bnoadd");
  case 128U: 
  return ((char *)"bnosub");
  case 400U: 
  return ((char *)".ureg");
  case 800U: 
  return ((char *)".lreg");
  case 216U: 
  return ((char *)".code");
  case 496U: 
  return ((char *)".label");
  case 160U: 
  return ((char *)".syncreg");
  case 728U: 
  return ((char *)".renamereg");
  case 416U: 
  return ((char *)"msg");
  case 640U: 
  return ((char *)".comment");
  case 392U: 
  return ((char *)"nop");
  case 168U: 
  return ((char *)".align");
  case 488U: 
  return ((char *)".byte");
  case 880U: 
  return ((char *)".bytes");
  case 200U: 
  return ((char *)".ref_code");
  case 104U: 
  return ((char *)".ref_data");
  case 856U: 
  return ((char *)"ref_code");
  case 512U: 
  return ((char *)"ref_data");
  case 592U: 
  return ((char *)".full_spill");
  case 56U: 
  return ((char *)".trace");
  case 432U: 
  return ((char *)"force_spill");
  case 680U: 
  return ((char *)"force_assoc");
  case 320U: 
  return ((char *)"mark");
  case 88U: 
  return ((char *)"touch");
  case 184U: 
  return ((char *)"transfer");
  case 472U: 
  return ((char *)"transfer_cpy");
  case 448U: 
  return ((char *)"transfer_and");
  case 600U: 
  return ((char *)"transfer_or");
  case 224U: 
  return ((char *)"transfer_xor");
  case 272U: 
  return ((char *)"transfer_add");
  case 152U: 
  return ((char *)"transfer_sub");
  case 256U: 
  return ((char *)"fmov");
  case 144U: 
  return ((char *)"fadd");
  case 624U: 
  return ((char *)"fsub");
  case 744U: 
  return ((char *)"frsb");
  case 248U: 
  return ((char *)"fmul");
  case 72U: 
  return ((char *)"fdiv");
  case 64U: 
  return ((char *)"fneg");
  case 360U: 
  return ((char *)"fretval");
  case 904U: 
  return ((char *)"fputarg");
  case 408U: 
  return ((char *)"ext");
  case 584U: 
  return ((char *)"round");
  case 8U: 
  return ((char *)"trunc");
  case 664U: 
  return ((char *)"floor");
  case 848U: 
  return ((char *)"ceil");
  case 288U: 
  return ((char *)"fblt");
  case 440U: 
  return ((char *)"fble");
  case 240U: 
  return ((char *)"fbgt");
  case 576U: 
  return ((char *)"fbge");
  case 0U: 
  return ((char *)"fbeq");
  case 280U: 
  return ((char *)"fbne");
  case 48U: 
  return ((char *)"fld");
  case 672U: 
  return ((char *)"fldx");
  case 16U: 
  return ((char *)"fst");
  case 120U: 
  return ((char *)"fstx");
  case 304U: 
  return ((char *)"fret");
  default: 
  return ((char *)"(unknown)");
  }
}
}
/* END FUNCTION-DEF jit_get_op_name LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF islower LOC=UNKNOWN */
__inline extern int islower(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 4096UL);
  return (tmp);
}
}
/* END FUNCTION-DEF islower LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_addr LOC=UNKNOWN */
__inline static void print_addr(struct jit_disasm *disasm , struct output_buf *buf ,
                                jit_tree *labels , jit_op *op , int arg_pos ) 
{ 
  void *arg ;
  jit_tree *label_item ;
  jit_tree *tmp ;

  {
  arg = (void *)op->arg[arg_pos];
  tmp = jit_tree_search(labels, (long )op);
  label_item = tmp;
  if (label_item) {
    ob_printf(buf, (char const   *)disasm->label_forward_template, - ((long )label_item->value));
  } else {
    label_item = jit_tree_search(labels, (long )arg);
    if (label_item) {
      ob_printf(buf, (char const   *)disasm->label_template, (long )label_item->value);
    } else {
      ob_printf(buf, (char const   *)disasm->generic_addr_template, arg);
    }
  }
  return;
}
}
/* END FUNCTION-DEF print_addr LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_prepare_arguments LOC=UNKNOWN */
__inline static void jit_prepare_arguments(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  struct jit_func_info *info ;
  int gp_arg_pos ;
  int fp_arg_pos ;
  int argpos ;
  int phys_reg ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  info = (struct jit_func_info *)((void *)0);
  gp_arg_pos = 0;
  fp_arg_pos = 0;
  argpos = 0;
  phys_reg = 0;
  while (op) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 384U) {
      info = (struct jit_func_info *)op->arg[1];
      info->has_prolog = 1;
      gp_arg_pos = 0;
      fp_arg_pos = 0;
      argpos = 0;
      phys_reg = 0;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 808U) {
      (info->args + argpos)->type = (enum jit_inp_type )op->arg[0];
      (info->args + argpos)->size = (int )op->arg[1];
      if (op->arg[0] == 2L) {
        (info->args + argpos)->gp_pos = gp_arg_pos;
        tmp___0 = fp_arg_pos;
        fp_arg_pos ++;
        (info->args + argpos)->fp_pos = tmp___0;
      } else {
        tmp___1 = gp_arg_pos;
        gp_arg_pos ++;
        (info->args + argpos)->gp_pos = tmp___1;
        (info->args + argpos)->fp_pos = fp_arg_pos;
      }
      jit_init_arg_params(jit, info, argpos, & phys_reg);
      argpos ++;
    }
    op = op->next;
  }
  return;
}
}
/* END FUNCTION-DEF jit_prepare_arguments LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF sse_alu_sd_reg_safeimm LOC=UNKNOWN */
static void sse_alu_sd_reg_safeimm(struct jit *jit , jit_op *op , int op_id , int reg ,
                                   double *imm ) 
{ 
  jit_hw_reg *r ;
  jit_hw_reg *tmp ;
  int _amd64_width_temp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  unsigned char *tmp___4 ;
  int tmp___5 ;
  unsigned char *tmp___6 ;
  amd64_imm_buf imb ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  int tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  int _amd64_width_temp___0 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  unsigned char *tmp___55 ;
  int tmp___56 ;
  unsigned char *tmp___57 ;
  amd64_imm_buf imb___4 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  int tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;

  {
  if ((jit_unsigned_value )imm > 4294967295UL) {
    tmp = jit_get_unused_reg(jit->reg_al, op, 0);
    r = tmp;
    if (r) {
      while (1) {
        _amd64_width_temp = (size_t )((long )imm) == (size_t )((int )((size_t )((long )imm)));
        while (1) {
          while (1) {
            if (_amd64_width_temp) {
              tmp___2 = 4;
            } else {
              tmp___2 = 8;
            }
            if (tmp___2 > 4) {
              tmp___1 = 8;
            } else {
              tmp___1 = 0;
            }
            if (r->id > 7) {
              tmp___3 = 1;
            } else {
              tmp___3 = 0;
            }
            _amd64_rex_bits = (unsigned char )(tmp___1 | tmp___3);
            if ((int )_amd64_rex_bits != 0) {
              tmp___4 = jit->ip;
              (jit->ip) ++;
              *tmp___4 = (unsigned char )(64 | (int )_amd64_rex_bits);
            } else {
              if (_amd64_width_temp) {
                tmp___5 = 4;
              } else {
                tmp___5 = 8;
              }
              if (tmp___5 == 1) {
                tmp___4 = jit->ip;
                (jit->ip) ++;
                *tmp___4 = (unsigned char )(64 | (int )_amd64_rex_bits);
              }
            }
            break;
          }
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = (unsigned char )(184 + (r->id & 7));
          if (_amd64_width_temp) {
            tmp___19 = 4;
          } else {
            tmp___19 = 8;
          }
          if (tmp___19 == 8) {
            while (1) {
              imb.val = (size_t )((long )imm);
              tmp___7 = jit->ip;
              (jit->ip) ++;
              *tmp___7 = imb.b[0];
              tmp___8 = jit->ip;
              (jit->ip) ++;
              *tmp___8 = imb.b[1];
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = imb.b[2];
              tmp___10 = jit->ip;
              (jit->ip) ++;
              *tmp___10 = imb.b[3];
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = imb.b[4];
              tmp___12 = jit->ip;
              (jit->ip) ++;
              *tmp___12 = imb.b[5];
              tmp___13 = jit->ip;
              (jit->ip) ++;
              *tmp___13 = imb.b[6];
              tmp___14 = jit->ip;
              (jit->ip) ++;
              *tmp___14 = imb.b[7];
              break;
            }
          } else {
            while (1) {
              imb___0.val = (int )((size_t )((long )imm));
              tmp___15 = jit->ip;
              (jit->ip) ++;
              *tmp___15 = imb___0.b[0];
              tmp___16 = jit->ip;
              (jit->ip) ++;
              *tmp___16 = imb___0.b[1];
              tmp___17 = jit->ip;
              (jit->ip) ++;
              *tmp___17 = imb___0.b[2];
              tmp___18 = jit->ip;
              (jit->ip) ++;
              *tmp___18 = imb___0.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      while (1) {
        tmp___20 = jit->ip;
        (jit->ip) ++;
        *tmp___20 = (unsigned char)242;
        while (1) {
          if (reg > 7) {
            tmp___21 = 4;
          } else {
            tmp___21 = 0;
          }
          if (r->id == 16) {
            tmp___24 = 0;
          } else {
            tmp___24 = r->id;
          }
          if (tmp___24 > 7) {
            tmp___23 = 1;
          } else {
            tmp___23 = 0;
          }
          _amd64_rex_bits___0 = (unsigned char )(tmp___21 | tmp___23);
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___25 = jit->ip;
            (jit->ip) ++;
            *tmp___25 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___26 = jit->ip;
        (jit->ip) ++;
        *tmp___26 = (unsigned char)15;
        tmp___27 = jit->ip;
        (jit->ip) ++;
        *tmp___27 = (unsigned char )op_id;
        while (1) {
          if (r->id == 16) {
            while (1) {
              tmp___28 = jit->ip;
              (jit->ip) ++;
              *tmp___28 = (unsigned char )((((reg & 7) & 7) << 3) | 5);
              break;
            }
            while (1) {
              imb___1.val = 0;
              tmp___29 = jit->ip;
              (jit->ip) ++;
              *tmp___29 = imb___1.b[0];
              tmp___30 = jit->ip;
              (jit->ip) ++;
              *tmp___30 = imb___1.b[1];
              tmp___31 = jit->ip;
              (jit->ip) ++;
              *tmp___31 = imb___1.b[2];
              tmp___32 = jit->ip;
              (jit->ip) ++;
              *tmp___32 = imb___1.b[3];
              break;
            }
          } else {
            while (1) {
              if ((r->id & 7) == 4) {
                while (1) {
                  tmp___33 = jit->ip;
                  (jit->ip) ++;
                  *tmp___33 = (unsigned char )((((reg & 7) & 7) << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___34 = jit->ip;
                  (jit->ip) ++;
                  *tmp___34 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                break;
              }
              if ((r->id & 7) != 5) {
                while (1) {
                  tmp___43 = jit->ip;
                  (jit->ip) ++;
                  *tmp___43 = (unsigned char )((((reg & 7) & 7) << 3) | ((r->id & 7) & 7));
                  break;
                }
                break;
              }
              while (1) {
                tmp___44 = jit->ip;
                (jit->ip) ++;
                *tmp___44 = (unsigned char )(((1 << 6) | (((reg & 7) & 7) << 3)) | ((r->id & 7) & 7));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
              break;
            }
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)0;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___50 = jit->ip;
            (jit->ip) ++;
            *tmp___50 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___51 = jit->ip;
        (jit->ip) ++;
        *tmp___51 = (unsigned char)80;
        break;
      }
      while (1) {
        _amd64_width_temp___0 = (size_t )((long )imm) == (size_t )((int )((size_t )((long )imm)));
        while (1) {
          while (1) {
            if (_amd64_width_temp___0) {
              tmp___54 = 4;
            } else {
              tmp___54 = 8;
            }
            if (tmp___54 > 4) {
              tmp___53 = 8;
            } else {
              tmp___53 = 0;
            }
            _amd64_rex_bits___2 = (unsigned char )tmp___53;
            if ((int )_amd64_rex_bits___2 != 0) {
              tmp___55 = jit->ip;
              (jit->ip) ++;
              *tmp___55 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
            } else {
              if (_amd64_width_temp___0) {
                tmp___56 = 4;
              } else {
                tmp___56 = 8;
              }
              if (tmp___56 == 1) {
                tmp___55 = jit->ip;
                (jit->ip) ++;
                *tmp___55 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
              }
            }
            break;
          }
          tmp___57 = jit->ip;
          (jit->ip) ++;
          *tmp___57 = (unsigned char)184;
          if (_amd64_width_temp___0) {
            tmp___70 = 4;
          } else {
            tmp___70 = 8;
          }
          if (tmp___70 == 8) {
            while (1) {
              imb___4.val = (size_t )((long )imm);
              tmp___58 = jit->ip;
              (jit->ip) ++;
              *tmp___58 = imb___4.b[0];
              tmp___59 = jit->ip;
              (jit->ip) ++;
              *tmp___59 = imb___4.b[1];
              tmp___60 = jit->ip;
              (jit->ip) ++;
              *tmp___60 = imb___4.b[2];
              tmp___61 = jit->ip;
              (jit->ip) ++;
              *tmp___61 = imb___4.b[3];
              tmp___62 = jit->ip;
              (jit->ip) ++;
              *tmp___62 = imb___4.b[4];
              tmp___63 = jit->ip;
              (jit->ip) ++;
              *tmp___63 = imb___4.b[5];
              tmp___64 = jit->ip;
              (jit->ip) ++;
              *tmp___64 = imb___4.b[6];
              tmp___65 = jit->ip;
              (jit->ip) ++;
              *tmp___65 = imb___4.b[7];
              break;
            }
          } else {
            while (1) {
              imb___5.val = (int )((size_t )((long )imm));
              tmp___66 = jit->ip;
              (jit->ip) ++;
              *tmp___66 = imb___5.b[0];
              tmp___67 = jit->ip;
              (jit->ip) ++;
              *tmp___67 = imb___5.b[1];
              tmp___68 = jit->ip;
              (jit->ip) ++;
              *tmp___68 = imb___5.b[2];
              tmp___69 = jit->ip;
              (jit->ip) ++;
              *tmp___69 = imb___5.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      while (1) {
        tmp___71 = jit->ip;
        (jit->ip) ++;
        *tmp___71 = (unsigned char)242;
        while (1) {
          if (reg > 7) {
            tmp___72 = 4;
          } else {
            tmp___72 = 0;
          }
          _amd64_rex_bits___3 = (unsigned char )tmp___72;
          if ((int )_amd64_rex_bits___3 != 0) {
            tmp___73 = jit->ip;
            (jit->ip) ++;
            *tmp___73 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          }
          break;
        }
        tmp___74 = jit->ip;
        (jit->ip) ++;
        *tmp___74 = (unsigned char)15;
        tmp___75 = jit->ip;
        (jit->ip) ++;
        *tmp___75 = (unsigned char )op_id;
        while (1) {
          while (1) {
            while (1) {
              tmp___91 = jit->ip;
              (jit->ip) ++;
              *tmp___91 = (unsigned char )(((reg & 7) & 7) << 3);
              break;
            }
            break;
            while (1) {
              tmp___92 = jit->ip;
              (jit->ip) ++;
              *tmp___92 = (unsigned char )((1 << 6) | (((reg & 7) & 7) << 3));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)0;
              (jit->ip) ++;
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      while (1) {
        while (1) {
          _amd64_rex_bits___4 = (unsigned char)0;
          if ((int )_amd64_rex_bits___4 != 0) {
            tmp___98 = jit->ip;
            (jit->ip) ++;
            *tmp___98 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
          }
          break;
        }
        tmp___99 = jit->ip;
        (jit->ip) ++;
        *tmp___99 = (unsigned char)88;
        break;
      }
    }
  } else {
    while (1) {
      tmp___100 = jit->ip;
      (jit->ip) ++;
      *tmp___100 = (unsigned char)242;
      while (1) {
        if (reg > 7) {
          tmp___101 = 4;
        } else {
          tmp___101 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(8 | tmp___101);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___102 = jit->ip;
          (jit->ip) ++;
          *tmp___102 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      tmp___103 = jit->ip;
      (jit->ip) ++;
      *tmp___103 = (unsigned char)15;
      tmp___104 = jit->ip;
      (jit->ip) ++;
      *tmp___104 = (unsigned char )op_id;
      while (1) {
        tmp___105 = jit->ip;
        (jit->ip) ++;
        *tmp___105 = (unsigned char )(((reg & 7) << 3) | 4);
        break;
      }
      while (1) {
        tmp___106 = jit->ip;
        (jit->ip) ++;
        *tmp___106 = (unsigned char )((4 << 3) | 5);
        break;
      }
      while (1) {
        imb___9.val = (int )((long )imm);
        tmp___107 = jit->ip;
        (jit->ip) ++;
        *tmp___107 = imb___9.b[0];
        tmp___108 = jit->ip;
        (jit->ip) ++;
        *tmp___108 = imb___9.b[1];
        tmp___109 = jit->ip;
        (jit->ip) ++;
        *tmp___109 = imb___9.b[2];
        tmp___110 = jit->ip;
        (jit->ip) ++;
        *tmp___110 = imb___9.b[3];
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF sse_alu_sd_reg_safeimm LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF flw_analyze_prolog LOC=UNKNOWN */
__inline static void flw_analyze_prolog(struct jit *jit , jit_op *op , struct jit_func_info *func_info ) 
{ 
  int i ;

  {
  i = 0;
  while (i < func_info->general_arg_cnt + func_info->float_arg_cnt) {
    if ((unsigned int )(func_info->args + i)->type == 2U) {
      jit_set_remove(op->live_in, (1 | (3 << 1)) | ((i & 268435455) << 4));
    } else {
      jit_set_remove(op->live_in, (3 << 1) | ((i & 268435455) << 4));
    }
    i ++;
  }
  return;
}
}
/* END FUNCTION-DEF flw_analyze_prolog LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_prolog_op LOC=UNKNOWN */
static void emit_prolog_op(struct jit *jit , jit_op *op ) 
{ 
  struct jit_func_info *info ;
  struct jit_func_info *tmp ;
  int prolog ;
  struct jit_func_info *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  long tmp___8 ;
  unsigned char *tmp___9 ;
  int stack_mem ;
  int tmp___10 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  x86_imm_buf imb ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  int i ;
  struct jit_inp_arg a ;
  unsigned char *tmp___27 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___28 ;
  int tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char _amd64_rex_bits___6 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;

  {
  jit->current_func = op;
  tmp = jit_current_func_info(jit);
  info = tmp;
  tmp___0 = jit_current_func_info(jit);
  prolog = tmp___0->has_prolog;
  while ((jit_value )jit->ip % 16L) {
    while (1) {
      while (1) {
        tmp___1 = jit->ip;
        (jit->ip) ++;
        *tmp___1 = (unsigned char)144;
        break;
      }
      break;
    }
  }
  op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
  if (prolog) {
    while (1) {
      while (1) {
        _amd64_rex_bits = (unsigned char)0;
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)85;
      break;
    }
    while (1) {
      while (1) {
        _amd64_rex_bits___0 = (unsigned char)8;
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      switch (8) {
      case 1: 
      tmp___6 = jit->ip;
      (jit->ip) ++;
      *tmp___6 = (unsigned char)138;
      break;
      case 8: 
      case 4: 
      case 2: 
      tmp___7 = jit->ip;
      (jit->ip) ++;
      *tmp___7 = (unsigned char)139;
      break;
      default: 
      tmp___8 = __builtin_expect(1L, 0L);
      if (tmp___8) {
        __assert_rtn("emit_prolog_op", "./jitter-amd64.c", 2240, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___9 = jit->ip;
          (jit->ip) ++;
          *tmp___9 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
          break;
        }
        break;
      }
      break;
    }
  }
  tmp___10 = get_frame_size(jit, info);
  stack_mem = tmp___10;
  if (prolog) {
    while (1) {
      if (stack_mem >= -128) {
        if (stack_mem <= 127) {
          while (1) {
            _amd64_rex_bits___1 = (unsigned char)8;
            if ((int )_amd64_rex_bits___1 != 0) {
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
            }
            break;
          }
          tmp___12 = jit->ip;
          (jit->ip) ++;
          *tmp___12 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___13 = jit->ip;
              (jit->ip) ++;
              *tmp___13 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(stack_mem & 255);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
        while (1) {
          _amd64_rex_bits___3 = (unsigned char)8;
          if ((int )_amd64_rex_bits___3 != 0) {
            tmp___20 = jit->ip;
            (jit->ip) ++;
            *tmp___20 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          }
          break;
        }
        tmp___21 = jit->ip;
        (jit->ip) ++;
        *tmp___21 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___22 = jit->ip;
            (jit->ip) ++;
            *tmp___22 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = stack_mem;
          tmp___23 = jit->ip;
          (jit->ip) ++;
          *tmp___23 = imb___0.b[0];
          tmp___24 = jit->ip;
          (jit->ip) ++;
          *tmp___24 = imb___0.b[1];
          tmp___25 = jit->ip;
          (jit->ip) ++;
          *tmp___25 = imb___0.b[2];
          tmp___26 = jit->ip;
          (jit->ip) ++;
          *tmp___26 = imb___0.b[3];
          break;
        }
      }
      break;
    }
  }
  jit->push_count = emit_push_callee_saved_regs(jit, op);
  i = 0;
  while (i < info->general_arg_cnt + info->float_arg_cnt) {
    a = *(info->args + i);
    if ((unsigned int )a.type == 2U) {
      if ((unsigned long )a.size == sizeof(float )) {
        if (a.passed_by_reg) {
          while (1) {
            tmp___27 = jit->ip;
            (jit->ip) ++;
            *tmp___27 = (unsigned char)243;
            while (1) {
              if (a.location.reg > 7) {
                tmp___28 = 4;
              } else {
                tmp___28 = 0;
              }
              if (a.location.reg > 7) {
                tmp___29 = 1;
              } else {
                tmp___29 = 0;
              }
              _amd64_rex_bits___4 = (unsigned char )(tmp___28 | tmp___29);
              if ((int )_amd64_rex_bits___4 != 0) {
                tmp___30 = jit->ip;
                (jit->ip) ++;
                *tmp___30 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
              }
              break;
            }
            tmp___31 = jit->ip;
            (jit->ip) ++;
            *tmp___31 = (unsigned char)15;
            tmp___32 = jit->ip;
            (jit->ip) ++;
            *tmp___32 = (unsigned char)90;
            while (1) {
              while (1) {
                tmp___33 = jit->ip;
                (jit->ip) ++;
                *tmp___33 = (unsigned char )(((3 << 6) | ((a.location.reg & 7) << 3)) | (a.location.reg & 7));
                break;
              }
              break;
            }
            break;
          }
        } else {
          while (1) {
            tmp___34 = jit->ip;
            (jit->ip) ++;
            *tmp___34 = (unsigned char)243;
            while (1) {
              _amd64_rex_bits___5 = (unsigned char)4;
              if ((int )_amd64_rex_bits___5 != 0) {
                tmp___35 = jit->ip;
                (jit->ip) ++;
                *tmp___35 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
              }
              break;
            }
            tmp___36 = jit->ip;
            (jit->ip) ++;
            *tmp___36 = (unsigned char)15;
            tmp___37 = jit->ip;
            (jit->ip) ++;
            *tmp___37 = (unsigned char)90;
            while (1) {
              while (1) {
                if (0) {
                  if (a.spill_pos == 0) {
                    while (1) {
                      tmp___43 = jit->ip;
                      (jit->ip) ++;
                      *tmp___43 = (unsigned char )((7 << 3) | 4);
                      break;
                    }
                    while (1) {
                      tmp___44 = jit->ip;
                      (jit->ip) ++;
                      *tmp___44 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                  } else
                  if (a.spill_pos >= -128) {
                    if (a.spill_pos <= 127) {
                      while (1) {
                        tmp___45 = jit->ip;
                        (jit->ip) ++;
                        *tmp___45 = (unsigned char )(((1 << 6) | (7 << 3)) | 4);
                        break;
                      }
                      while (1) {
                        tmp___46 = jit->ip;
                        (jit->ip) ++;
                        *tmp___46 = (unsigned char )((4 << 3) | 4);
                        break;
                      }
                      while (1) {
                        *(jit->ip) = (unsigned char )(a.spill_pos & 255);
                        (jit->ip) ++;
                        break;
                      }
                    } else {
                      goto _L___0;
                    }
                  } else {
                    _L___0: /* CIL Label */ 
                    while (1) {
                      tmp___47 = jit->ip;
                      (jit->ip) ++;
                      *tmp___47 = (unsigned char )(((2 << 6) | (7 << 3)) | 4);
                      break;
                    }
                    while (1) {
                      tmp___48 = jit->ip;
                      (jit->ip) ++;
                      *tmp___48 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      imb___2.val = a.spill_pos;
                      tmp___49 = jit->ip;
                      (jit->ip) ++;
                      *tmp___49 = imb___2.b[0];
                      tmp___50 = jit->ip;
                      (jit->ip) ++;
                      *tmp___50 = imb___2.b[1];
                      tmp___51 = jit->ip;
                      (jit->ip) ++;
                      *tmp___51 = imb___2.b[2];
                      tmp___52 = jit->ip;
                      (jit->ip) ++;
                      *tmp___52 = imb___2.b[3];
                      break;
                    }
                  }
                  break;
                }
                if (a.spill_pos == 0) {

                }
                if (a.spill_pos >= -128) {
                  if (a.spill_pos <= 127) {
                    while (1) {
                      tmp___54 = jit->ip;
                      (jit->ip) ++;
                      *tmp___54 = (unsigned char )(((1 << 6) | (7 << 3)) | 5);
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(a.spill_pos & 255);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L___1;
                  }
                } else {
                  _L___1: /* CIL Label */ 
                  while (1) {
                    tmp___55 = jit->ip;
                    (jit->ip) ++;
                    *tmp___55 = (unsigned char )(((2 << 6) | (7 << 3)) | 5);
                    break;
                  }
                  while (1) {
                    imb___3.val = a.spill_pos;
                    tmp___56 = jit->ip;
                    (jit->ip) ++;
                    *tmp___56 = imb___3.b[0];
                    tmp___57 = jit->ip;
                    (jit->ip) ++;
                    *tmp___57 = imb___3.b[1];
                    tmp___58 = jit->ip;
                    (jit->ip) ++;
                    *tmp___58 = imb___3.b[2];
                    tmp___59 = jit->ip;
                    (jit->ip) ++;
                    *tmp___59 = imb___3.b[3];
                    break;
                  }
                }
                break;
              }
              break;
            }
            break;
          }
          while (1) {
            tmp___60 = jit->ip;
            (jit->ip) ++;
            *tmp___60 = (unsigned char)102;
            while (1) {
              _amd64_rex_bits___6 = (unsigned char)4;
              if ((int )_amd64_rex_bits___6 != 0) {
                tmp___61 = jit->ip;
                (jit->ip) ++;
                *tmp___61 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
              }
              break;
            }
            tmp___62 = jit->ip;
            (jit->ip) ++;
            *tmp___62 = (unsigned char)15;
            tmp___63 = jit->ip;
            (jit->ip) ++;
            *tmp___63 = (unsigned char)19;
            while (1) {
              while (1) {
                if (0) {
                  if (a.spill_pos == 0) {
                    while (1) {
                      tmp___69 = jit->ip;
                      (jit->ip) ++;
                      *tmp___69 = (unsigned char )((7 << 3) | 4);
                      break;
                    }
                    while (1) {
                      tmp___70 = jit->ip;
                      (jit->ip) ++;
                      *tmp___70 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                  } else
                  if (a.spill_pos >= -128) {
                    if (a.spill_pos <= 127) {
                      while (1) {
                        tmp___71 = jit->ip;
                        (jit->ip) ++;
                        *tmp___71 = (unsigned char )(((1 << 6) | (7 << 3)) | 4);
                        break;
                      }
                      while (1) {
                        tmp___72 = jit->ip;
                        (jit->ip) ++;
                        *tmp___72 = (unsigned char )((4 << 3) | 4);
                        break;
                      }
                      while (1) {
                        *(jit->ip) = (unsigned char )(a.spill_pos & 255);
                        (jit->ip) ++;
                        break;
                      }
                    } else {
                      goto _L___2;
                    }
                  } else {
                    _L___2: /* CIL Label */ 
                    while (1) {
                      tmp___73 = jit->ip;
                      (jit->ip) ++;
                      *tmp___73 = (unsigned char )(((2 << 6) | (7 << 3)) | 4);
                      break;
                    }
                    while (1) {
                      tmp___74 = jit->ip;
                      (jit->ip) ++;
                      *tmp___74 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      imb___5.val = a.spill_pos;
                      tmp___75 = jit->ip;
                      (jit->ip) ++;
                      *tmp___75 = imb___5.b[0];
                      tmp___76 = jit->ip;
                      (jit->ip) ++;
                      *tmp___76 = imb___5.b[1];
                      tmp___77 = jit->ip;
                      (jit->ip) ++;
                      *tmp___77 = imb___5.b[2];
                      tmp___78 = jit->ip;
                      (jit->ip) ++;
                      *tmp___78 = imb___5.b[3];
                      break;
                    }
                  }
                  break;
                }
                if (a.spill_pos == 0) {

                }
                if (a.spill_pos >= -128) {
                  if (a.spill_pos <= 127) {
                    while (1) {
                      tmp___80 = jit->ip;
                      (jit->ip) ++;
                      *tmp___80 = (unsigned char )(((1 << 6) | (7 << 3)) | 5);
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(a.spill_pos & 255);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L___3;
                  }
                } else {
                  _L___3: /* CIL Label */ 
                  while (1) {
                    tmp___81 = jit->ip;
                    (jit->ip) ++;
                    *tmp___81 = (unsigned char )(((2 << 6) | (7 << 3)) | 5);
                    break;
                  }
                  while (1) {
                    imb___6.val = a.spill_pos;
                    tmp___82 = jit->ip;
                    (jit->ip) ++;
                    *tmp___82 = imb___6.b[0];
                    tmp___83 = jit->ip;
                    (jit->ip) ++;
                    *tmp___83 = imb___6.b[1];
                    tmp___84 = jit->ip;
                    (jit->ip) ++;
                    *tmp___84 = imb___6.b[2];
                    tmp___85 = jit->ip;
                    (jit->ip) ++;
                    *tmp___85 = imb___6.b[3];
                    break;
                  }
                }
                break;
              }
              break;
            }
            break;
          }
        }
      }
    }
    i ++;
  }
  return;
}
}
/* END FUNCTION-DEF emit_prolog_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF main LOC=UNKNOWN */
int main(int argc , char **argv , char **_formal_envp ) 
{ 


  {
  {
  {
  {
  {
  jit_debugging_disasm.indent_template = (char *)"    ";
  jit_debugging_disasm.reg_template = (char *)"r%i";
  jit_debugging_disasm.freg_template = (char *)"fr%i";
  jit_debugging_disasm.arg_template = (char *)"arg%i";
  jit_debugging_disasm.farg_template = (char *)"farg%i";
  jit_debugging_disasm.reg_fp_template = (char *)"fp";
  jit_debugging_disasm.reg_out_template = (char *)"out";
  jit_debugging_disasm.reg_imm_template = (char *)"imm";
  jit_debugging_disasm.reg_fimm_template = (char *)"fimm";
  jit_debugging_disasm.reg_unknown_template = (char *)"(unknown reg.)";
  jit_debugging_disasm.label_template = (char *)"<label>";
  jit_debugging_disasm.label_forward_template = (char *)"<label>";
  jit_debugging_disasm.generic_addr_template = (char *)"<addr: 0x%lx>";
  jit_debugging_disasm.generic_value_template = (char *)"0x%lx";
  goto jit_debugging_disasm_i$nit_INLINE_jit_debugging_disasm_i$nit;
  }
  jit_debugging_disasm_i$nit_INLINE_jit_debugging_disasm_i$nit: /* CIL Label */ ;
  }
  {
  {
  jit_disasm_compilable.indent_template = (char *)"    ";
  jit_disasm_compilable.reg_template = (char *)"R(%i)";
  jit_disasm_compilable.freg_template = (char *)"FR(%i)";
  jit_disasm_compilable.arg_template = (char *)"arg(%i)";
  jit_disasm_compilable.farg_template = (char *)"farg(%i)";
  jit_disasm_compilable.reg_fp_template = (char *)"R_FP";
  jit_disasm_compilable.reg_out_template = (char *)"R_OUT";
  jit_disasm_compilable.reg_imm_template = (char *)"R_IMM";
  jit_disasm_compilable.reg_fimm_template = (char *)"FR_IMM";
  jit_disasm_compilable.reg_unknown_template = (char *)"(unknown reg.)";
  jit_disasm_compilable.label_template = (char *)"label_%03i";
  jit_disasm_compilable.label_forward_template = (char *)"/* label_%03i */ JIT_FORWARD";
  jit_disasm_compilable.generic_addr_template = (char *)"<addr: 0x%lx>";
  jit_disasm_compilable.generic_value_template = (char *)"%li";
  goto jit_disasm_compilable_i$nit_INLINE_jit_disasm_compilable_i$nit;
  }
  jit_disasm_compilable_i$nit_INLINE_jit_disasm_compilable_i$nit: /* CIL Label */ ;
  }
  {
  {
  jit_disasm_general.indent_template = (char *)"    ";
  jit_disasm_general.reg_template = (char *)"r%i";
  jit_disasm_general.freg_template = (char *)"fr%i";
  jit_disasm_general.arg_template = (char *)"arg%i";
  jit_disasm_general.farg_template = (char *)"farg%i";
  jit_disasm_general.reg_fp_template = (char *)"fp";
  jit_disasm_general.reg_out_template = (char *)"out";
  jit_disasm_general.reg_imm_template = (char *)"imm";
  jit_disasm_general.reg_fimm_template = (char *)"fimm";
  jit_disasm_general.reg_unknown_template = (char *)"(unknown reg.)";
  jit_disasm_general.label_template = (char *)"L%i";
  jit_disasm_general.label_forward_template = (char *)"L%i";
  jit_disasm_general.generic_addr_template = (char *)"<addr: 0x%lx>";
  jit_disasm_general.generic_value_template = (char *)"0x%lx";
  goto jit_disasm_general_i$nit_INLINE_jit_disasm_general_i$nit;
  }
  jit_disasm_general_i$nit_INLINE_jit_disasm_general_i$nit: /* CIL Label */ ;
  }
  {
  {
  x05 = (double const   )0.5;
  goto x05_i$nit_INLINE_x05_i$nit;
  }
  x05_i$nit_INLINE_x05_i$nit: /* CIL Label */ ;
  }
  {
  {
  goto x0_i$nit_INLINE_x0_i$nit;
  }
  x0_i$nit_INLINE_x0_i$nit: /* CIL Label */ ;
  }
  {
  {
  x86_cc_signed_map[0] = (unsigned char const   )116;
  x86_cc_signed_map[1] = (unsigned char const   )117;
  x86_cc_signed_map[2] = (unsigned char const   )124;
  x86_cc_signed_map[3] = (unsigned char const   )126;
  x86_cc_signed_map[4] = (unsigned char const   )127;
  x86_cc_signed_map[5] = (unsigned char const   )125;
  x86_cc_signed_map[6] = (unsigned char const   )120;
  x86_cc_signed_map[7] = (unsigned char const   )121;
  x86_cc_signed_map[8] = (unsigned char const   )122;
  x86_cc_signed_map[9] = (unsigned char const   )123;
  x86_cc_signed_map[10] = (unsigned char const   )112;
  x86_cc_signed_map[11] = (unsigned char const   )113;
  goto x86_cc_signed_map_i$nit_INLINE_x86_cc_signed_map_i$nit;
  }
  x86_cc_signed_map_i$nit_INLINE_x86_cc_signed_map_i$nit: /* CIL Label */ ;
  }
  {
  {
  x86_cc_unsigned_map[0] = (unsigned char const   )116;
  x86_cc_unsigned_map[1] = (unsigned char const   )117;
  x86_cc_unsigned_map[2] = (unsigned char const   )114;
  x86_cc_unsigned_map[3] = (unsigned char const   )118;
  x86_cc_unsigned_map[4] = (unsigned char const   )119;
  x86_cc_unsigned_map[5] = (unsigned char const   )115;
  x86_cc_unsigned_map[6] = (unsigned char const   )120;
  x86_cc_unsigned_map[7] = (unsigned char const   )121;
  x86_cc_unsigned_map[8] = (unsigned char const   )122;
  x86_cc_unsigned_map[9] = (unsigned char const   )123;
  x86_cc_unsigned_map[10] = (unsigned char const   )112;
  x86_cc_unsigned_map[11] = (unsigned char const   )113;
  goto x86_cc_unsigned_map_i$nit_INLINE_x86_cc_unsigned_map_i$nit;
  }
  x86_cc_unsigned_map_i$nit_INLINE_x86_cc_unsigned_map_i$nit: /* CIL Label */ ;
  }
  {
  {
  goto _global_envp_i$nit_INLINE__global_envp_i$nit;
  }
  _global_envp_i$nit_INLINE__global_envp_i$nit: /* CIL Label */ ;
  }
  {
  {
  goto _global_argv_i$nit_INLINE__global_argv_i$nit;
  }
  _global_argv_i$nit_INLINE__global_argv_i$nit: /* CIL Label */ ;
  }
  {
  {
  goto _global_argc_i$nit_INLINE__global_argc_i$nit;
  }
  _global_argc_i$nit_INLINE__global_argc_i$nit: /* CIL Label */ ;
  }
  goto megaInit_INLINE_megaInit;
  }
  megaInit_INLINE_megaInit: /* CIL Label */ ;
  }
  while (1) {
    __asm__ volatile ("##_ANNOTATION_INITIALREGION_prefix-0":);
    _global_argc = argc;
    _global_argv = argv;
    _global_envp = _formal_envp;
    break;
  }
  init_tigress();
  fac(10);
  fib(10);
  return (0);
}
}
/* END FUNCTION-DEF main LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF ispunct LOC=UNKNOWN */
__inline extern int ispunct(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 8192UL);
  return (tmp);
}
}
/* END FUNCTION-DEF ispunct LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF __istype LOC=UNKNOWN */
__inline extern int __istype(__darwin_ct_rune_t _c , unsigned long _f ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  tmp___3 = isascii(_c);
  if (tmp___3) {
    tmp___2 = ! (! ((unsigned long )_DefaultRuneLocale.__runetype[_c] & _f));
  } else {
    tmp___0 = __maskrune(_c, _f);
    if (tmp___0) {
      tmp___1 = 1;
    } else {
      tmp___1 = 0;
    }
    tmp___2 = tmp___1;
  }
  return (tmp___2);
}
}
/* END FUNCTION-DEF __istype LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_gen_op LOC=UNKNOWN */
void jit_gen_op(struct jit *jit , struct jit_op *op ) 
{ 
  jit_value a1 ;
  jit_value a2 ;
  jit_value a3 ;
  int imm ;
  int sign ;
  int found ;
  unsigned char _amd64_rex_bits ;
  int tmp ;
  int tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  x86_imm_buf imb ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___47 ;
  int tmp___48 ;
  int tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  long tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___60 ;
  int tmp___61 ;
  int tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  long tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  int tmp___72 ;
  struct jit_op *target ;
  jit_value pa ;
  unsigned char rex_correction ;
  unsigned char *pos ;
  int disp ;
  int size ;
  long tmp___73 ;
  long tmp___74 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  long tmp___79 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char _amd64_rex_bits___6 ;
  unsigned char *tmp___84 ;
  int t ;
  int tmp___85 ;
  jit_value tmp___86 ;
  int tmp___87 ;
  unsigned char *tmp___88 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___94 ;
  int tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;
  long tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  amd64_imm_buf imb___6 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;
  unsigned char *tmp___111 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  unsigned char *tmp___116 ;
  unsigned char _amd64_rex_bits___9 ;
  int tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char *tmp___119 ;
  unsigned char *tmp___120 ;
  long tmp___121 ;
  unsigned char *tmp___122 ;
  unsigned char _amd64_rex_bits___10 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  struct jit_func_info *tmp___125 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char *tmp___128 ;
  unsigned char _amd64_rex_bits___11 ;
  int tmp___129 ;
  int tmp___130 ;
  unsigned char *tmp___131 ;
  unsigned char *tmp___132 ;
  amd64_imm_buf imb___8 ;
  unsigned char *tmp___133 ;
  unsigned char *tmp___134 ;
  unsigned char *tmp___135 ;
  unsigned char *tmp___136 ;
  unsigned char *tmp___137 ;
  unsigned char *tmp___138 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___141 ;
  unsigned char *tmp___142 ;
  unsigned char *tmp___143 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  unsigned char _amd64_rex_bits___12 ;
  int tmp___146 ;
  int tmp___147 ;
  int tmp___148 ;
  unsigned char *tmp___149 ;
  unsigned char *tmp___150 ;
  unsigned char *tmp___151 ;
  long tmp___152 ;
  unsigned char *tmp___153 ;
  unsigned char _amd64_rex_bits___13 ;
  int tmp___154 ;
  int tmp___155 ;
  unsigned char *tmp___156 ;
  unsigned char *tmp___157 ;
  unsigned char *tmp___158 ;
  unsigned char _amd64_rex_bits___14 ;
  int tmp___159 ;
  unsigned char *tmp___160 ;
  unsigned char *tmp___161 ;
  amd64_imm_buf imb___10 ;
  unsigned char *tmp___162 ;
  unsigned char *tmp___163 ;
  unsigned char *tmp___164 ;
  unsigned char *tmp___165 ;
  unsigned char *tmp___166 ;
  unsigned char *tmp___167 ;
  unsigned char *tmp___168 ;
  unsigned char *tmp___169 ;
  x86_imm_buf imb___11 ;
  unsigned char *tmp___170 ;
  unsigned char *tmp___171 ;
  unsigned char *tmp___172 ;
  unsigned char *tmp___173 ;
  int tmp___174 ;
  unsigned char *tmp___175 ;
  unsigned char _amd64_rex_bits___15 ;
  int tmp___176 ;
  int tmp___177 ;
  unsigned char *tmp___178 ;
  unsigned char *tmp___179 ;
  unsigned char *tmp___180 ;
  long tmp___181 ;
  unsigned char *tmp___182 ;
  unsigned char *tmp___183 ;
  x86_imm_buf imb___12 ;
  unsigned char *tmp___184 ;
  unsigned char *tmp___185 ;
  unsigned char *tmp___186 ;
  unsigned char *tmp___187 ;
  unsigned char *tmp___188 ;
  unsigned char _amd64_rex_bits___16 ;
  int tmp___189 ;
  int tmp___190 ;
  int tmp___191 ;
  unsigned char *tmp___192 ;
  unsigned char *tmp___193 ;
  unsigned char *tmp___194 ;
  long tmp___195 ;
  unsigned char *tmp___196 ;
  unsigned char *tmp___197 ;
  unsigned char *tmp___198 ;
  unsigned char *tmp___199 ;
  unsigned char *tmp___200 ;
  unsigned char *tmp___201 ;
  x86_imm_buf imb___13 ;
  unsigned char *tmp___202 ;
  unsigned char *tmp___203 ;
  unsigned char *tmp___204 ;
  unsigned char *tmp___205 ;
  unsigned char *tmp___206 ;
  unsigned char *tmp___207 ;
  unsigned char *tmp___208 ;
  x86_imm_buf imb___14 ;
  unsigned char *tmp___209 ;
  unsigned char *tmp___210 ;
  unsigned char *tmp___211 ;
  unsigned char *tmp___212 ;
  unsigned char *tmp___213 ;
  unsigned char _amd64_rex_bits___17 ;
  int tmp___214 ;
  int tmp___215 ;
  int tmp___216 ;
  unsigned char *tmp___217 ;
  unsigned char *tmp___218 ;
  unsigned char *tmp___219 ;
  long tmp___220 ;
  unsigned char *tmp___221 ;
  unsigned char *tmp___222 ;
  unsigned char *tmp___223 ;
  unsigned char *tmp___224 ;
  unsigned char *tmp___225 ;
  unsigned char *tmp___226 ;
  x86_imm_buf imb___15 ;
  unsigned char *tmp___227 ;
  unsigned char *tmp___228 ;
  unsigned char *tmp___229 ;
  unsigned char *tmp___230 ;
  unsigned char *tmp___231 ;
  unsigned char *tmp___232 ;
  unsigned char *tmp___233 ;
  x86_imm_buf imb___16 ;
  unsigned char *tmp___234 ;
  unsigned char *tmp___235 ;
  unsigned char *tmp___236 ;
  unsigned char *tmp___237 ;
  unsigned char _amd64_rex_bits___18 ;
  int tmp___238 ;
  int tmp___239 ;
  int tmp___240 ;
  int tmp___241 ;
  unsigned char *tmp___242 ;
  int tmp___243 ;
  unsigned char *tmp___244 ;
  unsigned char *tmp___245 ;
  unsigned char *tmp___246 ;
  long tmp___247 ;
  unsigned char *tmp___248 ;
  unsigned char *tmp___249 ;
  x86_imm_buf imb___17 ;
  unsigned char *tmp___250 ;
  unsigned char *tmp___251 ;
  unsigned char *tmp___252 ;
  unsigned char *tmp___253 ;
  unsigned char *tmp___254 ;
  unsigned char *tmp___255 ;
  unsigned char *tmp___256 ;
  unsigned char *tmp___257 ;
  unsigned char *tmp___258 ;
  unsigned char *tmp___259 ;
  x86_imm_buf imb___18 ;
  unsigned char *tmp___260 ;
  unsigned char *tmp___261 ;
  unsigned char *tmp___262 ;
  unsigned char *tmp___263 ;
  unsigned char *tmp___264 ;
  unsigned char _amd64_rex_bits___19 ;
  int tmp___265 ;
  int tmp___266 ;
  unsigned char *tmp___267 ;
  unsigned char *tmp___268 ;
  unsigned char *tmp___269 ;
  unsigned char *tmp___270 ;
  unsigned char *tmp___271 ;
  unsigned char _amd64_rex_bits___20 ;
  int tmp___272 ;
  int tmp___273 ;
  unsigned char *tmp___274 ;
  unsigned char *tmp___275 ;
  unsigned char *tmp___276 ;
  unsigned char *tmp___277 ;
  unsigned char *tmp___278 ;
  unsigned char _amd64_rex_bits___21 ;
  int tmp___279 ;
  int tmp___280 ;
  unsigned char *tmp___281 ;
  unsigned char *tmp___282 ;
  unsigned char *tmp___283 ;
  unsigned char *tmp___284 ;
  unsigned char *tmp___285 ;
  unsigned char _amd64_rex_bits___22 ;
  int tmp___286 ;
  int tmp___287 ;
  int tmp___288 ;
  unsigned char *tmp___289 ;
  unsigned char *tmp___290 ;
  unsigned char *tmp___291 ;
  long tmp___292 ;
  unsigned char *tmp___293 ;
  unsigned char _amd64_rex_bits___23 ;
  int tmp___294 ;
  unsigned char *tmp___295 ;
  unsigned char *tmp___296 ;
  unsigned char *tmp___297 ;
  unsigned char *tmp___298 ;
  x86_imm_buf imb___19 ;
  unsigned char *tmp___299 ;
  unsigned char *tmp___300 ;
  unsigned char *tmp___301 ;
  unsigned char *tmp___302 ;
  unsigned char *tmp___303 ;
  unsigned char *tmp___304 ;
  unsigned char *tmp___305 ;
  unsigned char *tmp___306 ;
  x86_imm_buf imb___20 ;
  unsigned char *tmp___307 ;
  unsigned char *tmp___308 ;
  unsigned char *tmp___309 ;
  unsigned char *tmp___310 ;
  unsigned char *tmp___311 ;
  unsigned char *tmp___312 ;
  unsigned char *tmp___313 ;
  x86_imm_buf imb___21 ;
  unsigned char *tmp___314 ;
  unsigned char *tmp___315 ;
  unsigned char *tmp___316 ;
  unsigned char *tmp___317 ;
  x86_imm_buf imb___22 ;
  unsigned char *tmp___318 ;
  unsigned char *tmp___319 ;
  unsigned char *tmp___320 ;
  unsigned char *tmp___321 ;
  unsigned char *tmp___322 ;
  unsigned char _amd64_rex_bits___24 ;
  int tmp___323 ;
  int tmp___324 ;
  int tmp___325 ;
  int tmp___326 ;
  unsigned char *tmp___327 ;
  int tmp___328 ;
  unsigned char *tmp___329 ;
  unsigned char *tmp___330 ;
  unsigned char *tmp___331 ;
  unsigned char *tmp___332 ;
  unsigned char *tmp___333 ;
  unsigned char *tmp___334 ;
  unsigned char *tmp___335 ;
  x86_imm_buf imb___23 ;
  unsigned char *tmp___336 ;
  unsigned char *tmp___337 ;
  unsigned char *tmp___338 ;
  unsigned char *tmp___339 ;
  unsigned char *tmp___340 ;
  unsigned char *tmp___341 ;
  unsigned char *tmp___342 ;
  x86_imm_buf imb___24 ;
  unsigned char *tmp___343 ;
  unsigned char *tmp___344 ;
  unsigned char *tmp___345 ;
  unsigned char *tmp___346 ;
  unsigned char *tmp___347 ;
  unsigned char *tmp___348 ;
  unsigned char *tmp___349 ;
  unsigned char *tmp___350 ;
  unsigned char *tmp___351 ;
  unsigned char *tmp___352 ;
  unsigned char *tmp___353 ;
  x86_imm_buf imb___25 ;
  unsigned char *tmp___354 ;
  unsigned char *tmp___355 ;
  unsigned char *tmp___356 ;
  unsigned char *tmp___357 ;
  unsigned char *tmp___358 ;
  unsigned char *tmp___359 ;
  unsigned char *tmp___360 ;
  x86_imm_buf imb___26 ;
  unsigned char *tmp___361 ;
  unsigned char *tmp___362 ;
  unsigned char *tmp___363 ;
  unsigned char *tmp___364 ;
  unsigned char *tmp___365 ;
  unsigned char *tmp___366 ;
  unsigned char *tmp___367 ;
  unsigned char *tmp___368 ;
  unsigned char *tmp___369 ;
  unsigned char *tmp___370 ;
  unsigned char *tmp___371 ;
  x86_imm_buf imb___27 ;
  unsigned char *tmp___372 ;
  unsigned char *tmp___373 ;
  unsigned char *tmp___374 ;
  unsigned char *tmp___375 ;
  unsigned char *tmp___376 ;
  unsigned char *tmp___377 ;
  unsigned char *tmp___378 ;
  x86_imm_buf imb___28 ;
  unsigned char *tmp___379 ;
  unsigned char *tmp___380 ;
  unsigned char *tmp___381 ;
  unsigned char *tmp___382 ;
  x86_imm_buf imb___29 ;
  unsigned char *tmp___383 ;
  unsigned char *tmp___384 ;
  unsigned char *tmp___385 ;
  unsigned char *tmp___386 ;
  unsigned char *tmp___387 ;
  unsigned char _amd64_rex_bits___25 ;
  int tmp___388 ;
  int tmp___389 ;
  int tmp___390 ;
  int tmp___391 ;
  unsigned char *tmp___392 ;
  int tmp___393 ;
  unsigned char *tmp___394 ;
  unsigned char *tmp___395 ;
  unsigned char *tmp___396 ;
  unsigned char *tmp___397 ;
  unsigned char *tmp___398 ;
  unsigned char *tmp___399 ;
  unsigned char *tmp___400 ;
  x86_imm_buf imb___30 ;
  unsigned char *tmp___401 ;
  unsigned char *tmp___402 ;
  unsigned char *tmp___403 ;
  unsigned char *tmp___404 ;
  unsigned char *tmp___405 ;
  unsigned char *tmp___406 ;
  unsigned char *tmp___407 ;
  x86_imm_buf imb___31 ;
  unsigned char *tmp___408 ;
  unsigned char *tmp___409 ;
  unsigned char *tmp___410 ;
  unsigned char *tmp___411 ;
  unsigned char *tmp___412 ;
  unsigned char *tmp___413 ;
  unsigned char *tmp___414 ;
  unsigned char *tmp___415 ;
  unsigned char *tmp___416 ;
  unsigned char *tmp___417 ;
  unsigned char *tmp___418 ;
  x86_imm_buf imb___32 ;
  unsigned char *tmp___419 ;
  unsigned char *tmp___420 ;
  unsigned char *tmp___421 ;
  unsigned char *tmp___422 ;
  unsigned char *tmp___423 ;
  unsigned char *tmp___424 ;
  unsigned char *tmp___425 ;
  x86_imm_buf imb___33 ;
  unsigned char *tmp___426 ;
  unsigned char *tmp___427 ;
  unsigned char *tmp___428 ;
  unsigned char *tmp___429 ;
  unsigned char *tmp___430 ;
  unsigned char *tmp___431 ;
  unsigned char *tmp___432 ;
  unsigned char *tmp___433 ;
  unsigned char *tmp___434 ;
  unsigned char *tmp___435 ;
  unsigned char *tmp___436 ;
  x86_imm_buf imb___34 ;
  unsigned char *tmp___437 ;
  unsigned char *tmp___438 ;
  unsigned char *tmp___439 ;
  unsigned char *tmp___440 ;
  unsigned char *tmp___441 ;
  unsigned char *tmp___442 ;
  unsigned char *tmp___443 ;
  x86_imm_buf imb___35 ;
  unsigned char *tmp___444 ;
  unsigned char *tmp___445 ;
  unsigned char *tmp___446 ;
  unsigned char *tmp___447 ;
  x86_imm_buf imb___36 ;
  unsigned char *tmp___448 ;
  unsigned char *tmp___449 ;
  unsigned char *tmp___450 ;
  unsigned char *tmp___451 ;
  unsigned char _amd64_rex_bits___26 ;
  int tmp___452 ;
  int tmp___453 ;
  int tmp___454 ;
  unsigned char *tmp___455 ;
  unsigned char *tmp___456 ;
  unsigned char *tmp___457 ;
  unsigned char *tmp___458 ;
  x86_imm_buf imb___37 ;
  unsigned char *tmp___459 ;
  unsigned char *tmp___460 ;
  unsigned char *tmp___461 ;
  unsigned char *tmp___462 ;
  unsigned char *tmp___463 ;
  unsigned char *tmp___464 ;
  unsigned char *tmp___465 ;
  unsigned char *tmp___466 ;
  unsigned char *tmp___467 ;
  unsigned char *tmp___468 ;
  x86_imm_buf imb___38 ;
  unsigned char *tmp___469 ;
  unsigned char *tmp___470 ;
  unsigned char *tmp___471 ;
  unsigned char *tmp___472 ;
  unsigned char *tmp___473 ;
  unsigned char *tmp___474 ;
  unsigned char *tmp___475 ;
  unsigned char *tmp___476 ;
  x86_imm_buf imb___39 ;
  unsigned char *tmp___477 ;
  unsigned char *tmp___478 ;
  unsigned char *tmp___479 ;
  unsigned char *tmp___480 ;
  unsigned char *tmp___481 ;
  unsigned char *tmp___482 ;
  unsigned char *tmp___483 ;
  unsigned char *tmp___484 ;
  unsigned char *tmp___485 ;
  unsigned char *tmp___486 ;
  x86_imm_buf imb___40 ;
  unsigned char *tmp___487 ;
  unsigned char *tmp___488 ;
  unsigned char *tmp___489 ;
  unsigned char *tmp___490 ;
  unsigned char *tmp___491 ;
  unsigned char *tmp___492 ;
  unsigned char *tmp___493 ;
  x86_imm_buf imb___41 ;
  unsigned char *tmp___494 ;
  unsigned char *tmp___495 ;
  unsigned char *tmp___496 ;
  unsigned char *tmp___497 ;
  unsigned char *tmp___498 ;
  unsigned char *tmp___499 ;
  unsigned char *tmp___500 ;
  unsigned char *tmp___501 ;
  unsigned char *tmp___502 ;
  unsigned char *tmp___503 ;
  x86_imm_buf imb___42 ;
  unsigned char *tmp___504 ;
  unsigned char *tmp___505 ;
  unsigned char *tmp___506 ;
  unsigned char *tmp___507 ;
  x86_imm_buf imb___43 ;
  unsigned char *tmp___508 ;
  unsigned char *tmp___509 ;
  unsigned char *tmp___510 ;
  unsigned char *tmp___511 ;
  int tmp___512 ;
  int tmp___513 ;
  unsigned char _amd64_rex_bits___27 ;
  int tmp___514 ;
  int tmp___515 ;
  int tmp___516 ;
  unsigned char *tmp___517 ;
  unsigned char *tmp___518 ;
  unsigned char *tmp___519 ;
  unsigned char *tmp___520 ;
  x86_imm_buf imb___44 ;
  unsigned char *tmp___521 ;
  unsigned char *tmp___522 ;
  unsigned char *tmp___523 ;
  unsigned char *tmp___524 ;
  unsigned char *tmp___525 ;
  unsigned char *tmp___526 ;
  unsigned char *tmp___527 ;
  unsigned char *tmp___528 ;
  unsigned char *tmp___529 ;
  unsigned char *tmp___530 ;
  x86_imm_buf imb___45 ;
  unsigned char *tmp___531 ;
  unsigned char *tmp___532 ;
  unsigned char *tmp___533 ;
  unsigned char *tmp___534 ;
  unsigned char _amd64_rex_bits___28 ;
  int tmp___535 ;
  int tmp___536 ;
  unsigned char *tmp___537 ;
  unsigned char *tmp___538 ;
  unsigned char *tmp___539 ;
  unsigned char *tmp___540 ;
  x86_imm_buf imb___46 ;
  unsigned char *tmp___541 ;
  unsigned char *tmp___542 ;
  unsigned char *tmp___543 ;
  unsigned char *tmp___544 ;
  unsigned char *tmp___545 ;
  unsigned char *tmp___546 ;
  unsigned char *tmp___547 ;
  unsigned char *tmp___548 ;
  unsigned char *tmp___549 ;
  unsigned char *tmp___550 ;
  x86_imm_buf imb___47 ;
  unsigned char *tmp___551 ;
  unsigned char *tmp___552 ;
  unsigned char *tmp___553 ;
  unsigned char *tmp___554 ;
  jit_value tmp___555 ;
  unsigned long tmp___556 ;
  unsigned char _amd64_rex_bits___29 ;
  int tmp___557 ;
  int tmp___558 ;
  int tmp___559 ;
  unsigned char *tmp___560 ;
  unsigned char *tmp___561 ;
  unsigned char *tmp___562 ;
  unsigned char *tmp___563 ;
  x86_imm_buf imb___48 ;
  unsigned char *tmp___564 ;
  unsigned char *tmp___565 ;
  unsigned char *tmp___566 ;
  unsigned char *tmp___567 ;
  unsigned char *tmp___568 ;
  unsigned char *tmp___569 ;
  unsigned char *tmp___570 ;
  unsigned char *tmp___571 ;
  unsigned char *tmp___572 ;
  unsigned char *tmp___573 ;
  x86_imm_buf imb___49 ;
  unsigned char *tmp___574 ;
  unsigned char *tmp___575 ;
  unsigned char *tmp___576 ;
  unsigned char *tmp___577 ;

  {
  a1 = op->r_arg[0];
  a2 = op->r_arg[1];
  a3 = op->r_arg[2];
  imm = (int )op->code & 2;
  sign = ! ((int )op->code & 4);
  found = 1;
  switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
  case 824U: 
  if (a1 != a2) {
    if (a1 != a3) {
      if (imm) {
        while (1) {
          while (1) {
            if (a1 > 7L) {
              tmp = 4;
            } else {
              tmp = 0;
            }
            if (a2 > 7L) {
              tmp___0 = 1;
            } else {
              tmp___0 = 0;
            }
            _amd64_rex_bits = (unsigned char )((8 | tmp) | tmp___0);
            if ((int )_amd64_rex_bits != 0) {
              tmp___1 = jit->ip;
              (jit->ip) ++;
              *tmp___1 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char)141;
          while (1) {
            if (a2 == 16L) {
              while (1) {
                tmp___3 = jit->ip;
                (jit->ip) ++;
                *tmp___3 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
                break;
              }
              while (1) {
                imb.val = (int )a3;
                tmp___4 = jit->ip;
                (jit->ip) ++;
                *tmp___4 = imb.b[0];
                tmp___5 = jit->ip;
                (jit->ip) ++;
                *tmp___5 = imb.b[1];
                tmp___6 = jit->ip;
                (jit->ip) ++;
                *tmp___6 = imb.b[2];
                tmp___7 = jit->ip;
                (jit->ip) ++;
                *tmp___7 = imb.b[3];
                break;
              }
            } else {
              while (1) {
                if ((a2 & 7L) == 4L) {
                  if (a3 == 0L) {
                    while (1) {
                      tmp___8 = jit->ip;
                      (jit->ip) ++;
                      *tmp___8 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                      break;
                    }
                    while (1) {
                      tmp___9 = jit->ip;
                      (jit->ip) ++;
                      *tmp___9 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                  } else
                  if ((int )a3 >= -128) {
                    if ((int )a3 <= 127) {
                      while (1) {
                        tmp___10 = jit->ip;
                        (jit->ip) ++;
                        *tmp___10 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                        break;
                      }
                      while (1) {
                        tmp___11 = jit->ip;
                        (jit->ip) ++;
                        *tmp___11 = (unsigned char )((4 << 3) | 4);
                        break;
                      }
                      while (1) {
                        *(jit->ip) = (unsigned char )(a3 & 255L);
                        (jit->ip) ++;
                        break;
                      }
                    } else {
                      goto _L;
                    }
                  } else {
                    _L: /* CIL Label */ 
                    while (1) {
                      tmp___12 = jit->ip;
                      (jit->ip) ++;
                      *tmp___12 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                      break;
                    }
                    while (1) {
                      tmp___13 = jit->ip;
                      (jit->ip) ++;
                      *tmp___13 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      imb___0.val = (int )a3;
                      tmp___14 = jit->ip;
                      (jit->ip) ++;
                      *tmp___14 = imb___0.b[0];
                      tmp___15 = jit->ip;
                      (jit->ip) ++;
                      *tmp___15 = imb___0.b[1];
                      tmp___16 = jit->ip;
                      (jit->ip) ++;
                      *tmp___16 = imb___0.b[2];
                      tmp___17 = jit->ip;
                      (jit->ip) ++;
                      *tmp___17 = imb___0.b[3];
                      break;
                    }
                  }
                  break;
                }
                if (a3 == 0L) {
                  if ((a2 & 7L) != 5L) {
                    while (1) {
                      tmp___18 = jit->ip;
                      (jit->ip) ++;
                      *tmp___18 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                      break;
                    }
                    break;
                  }
                }
                if ((int )a3 >= -128) {
                  if ((int )a3 <= 127) {
                    while (1) {
                      tmp___19 = jit->ip;
                      (jit->ip) ++;
                      *tmp___19 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(a3 & 255L);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L___0;
                  }
                } else {
                  _L___0: /* CIL Label */ 
                  while (1) {
                    tmp___20 = jit->ip;
                    (jit->ip) ++;
                    *tmp___20 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                    break;
                  }
                  while (1) {
                    imb___1.val = (int )a3;
                    tmp___21 = jit->ip;
                    (jit->ip) ++;
                    *tmp___21 = imb___1.b[0];
                    tmp___22 = jit->ip;
                    (jit->ip) ++;
                    *tmp___22 = imb___1.b[1];
                    tmp___23 = jit->ip;
                    (jit->ip) ++;
                    *tmp___23 = imb___1.b[2];
                    tmp___24 = jit->ip;
                    (jit->ip) ++;
                    *tmp___24 = imb___1.b[3];
                    break;
                  }
                }
                break;
              }
            }
            break;
          }
          break;
        }
      } else {
        while (1) {
          while (1) {
            if (a1 > 7L) {
              tmp___25 = 4;
            } else {
              tmp___25 = 0;
            }
            if (a3 > 7L) {
              tmp___26 = 2;
            } else {
              tmp___26 = 0;
            }
            if (a2 > 7L) {
              tmp___27 = 1;
            } else {
              tmp___27 = 0;
            }
            _amd64_rex_bits___0 = (unsigned char )(((8 | tmp___25) | tmp___26) | tmp___27);
            if ((int )_amd64_rex_bits___0 != 0) {
              tmp___28 = jit->ip;
              (jit->ip) ++;
              *tmp___28 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
            }
            break;
          }
          while (1) {
            tmp___29 = jit->ip;
            (jit->ip) ++;
            *tmp___29 = (unsigned char)141;
            while (1) {
              if (a2 == -1L) {
                while (1) {
                  tmp___30 = jit->ip;
                  (jit->ip) ++;
                  *tmp___30 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                  break;
                }
                while (1) {
                  tmp___31 = jit->ip;
                  (jit->ip) ++;
                  *tmp___31 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
                  break;
                }
                while (1) {
                  imb___2.val = 0;
                  tmp___32 = jit->ip;
                  (jit->ip) ++;
                  *tmp___32 = imb___2.b[0];
                  tmp___33 = jit->ip;
                  (jit->ip) ++;
                  *tmp___33 = imb___2.b[1];
                  tmp___34 = jit->ip;
                  (jit->ip) ++;
                  *tmp___34 = imb___2.b[2];
                  tmp___35 = jit->ip;
                  (jit->ip) ++;
                  *tmp___35 = imb___2.b[3];
                  break;
                }
              } else
              if (a2 != 5L) {
                while (1) {
                  tmp___36 = jit->ip;
                  (jit->ip) ++;
                  *tmp___36 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                  break;
                }
                while (1) {
                  tmp___37 = jit->ip;
                  (jit->ip) ++;
                  *tmp___37 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                  break;
                }
              } else {
                while (1) {
                  tmp___38 = jit->ip;
                  (jit->ip) ++;
                  *tmp___38 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                  break;
                }
                while (1) {
                  tmp___39 = jit->ip;
                  (jit->ip) ++;
                  *tmp___39 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char)0;
                  (jit->ip) ++;
                  break;
                }
              }
              break;
            }
            break;
          }
          break;
        }
      }
    } else {
      emit_alu_op(jit, op, 0, imm);
    }
  } else {
    emit_alu_op(jit, op, 0, imm);
  }
  break;
  case 464U: 
  emit_alu_op(jit, op, 0, imm);
  break;
  case 888U: 
  emit_alu_op(jit, op, 2, imm);
  break;
  case 424U: 
  emit_sub_op(jit, op, imm);
  break;
  case 328U: 
  emit_subx_op(jit, op, 5, imm);
  break;
  case 192U: 
  emit_subx_op(jit, op, 3, imm);
  break;
  case 656U: 
  emit_rsb_op(jit, op, imm);
  break;
  case 232U: 
  if (a1 != a2) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___46 = jit->ip;
        (jit->ip) ++;
        *tmp___46 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___47 = 8;
        } else {
          tmp___47 = 0;
        }
        if (a1 > 7L) {
          tmp___48 = 4;
        } else {
          tmp___48 = 0;
        }
        if (a2 > 7L) {
          tmp___49 = 1;
        } else {
          tmp___49 = 0;
        }
        _amd64_rex_bits___1 = (unsigned char )((tmp___47 | tmp___48) | tmp___49);
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___50 = jit->ip;
          (jit->ip) ++;
          *tmp___50 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___50 = jit->ip;
          (jit->ip) ++;
          *tmp___50 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___51 = jit->ip;
      (jit->ip) ++;
      *tmp___51 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___52 = jit->ip;
      (jit->ip) ++;
      *tmp___52 = (unsigned char)139;
      break;
      default: 
      tmp___53 = __builtin_expect(1L, 0L);
      if (tmp___53) {
        __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3279, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___54 = jit->ip;
          (jit->ip) ++;
          *tmp___54 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  while (1) {
    while (1) {
      if (a1 > 7L) {
        tmp___55 = 1;
      } else {
        tmp___55 = 0;
      }
      _amd64_rex_bits___2 = (unsigned char )(8 | tmp___55);
      if ((int )_amd64_rex_bits___2 != 0) {
        tmp___56 = jit->ip;
        (jit->ip) ++;
        *tmp___56 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
      }
      break;
    }
    while (1) {
      tmp___57 = jit->ip;
      (jit->ip) ++;
      *tmp___57 = (unsigned char)247;
      while (1) {
        while (1) {
          tmp___58 = jit->ip;
          (jit->ip) ++;
          *tmp___58 = (unsigned char )((long )((3 << 6) | (3 << 3)) | ((a1 & 7L) & 7L));
          break;
        }
        break;
      }
      break;
    }
    break;
  }
  break;
  case 536U: 
  emit_alu_op(jit, op, 1, imm);
  break;
  case 704U: 
  emit_alu_op(jit, op, 6, imm);
  break;
  case 552U: 
  emit_alu_op(jit, op, 4, imm);
  break;
  case 784U: 
  if (a1 != a2) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___59 = jit->ip;
        (jit->ip) ++;
        *tmp___59 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___60 = 8;
        } else {
          tmp___60 = 0;
        }
        if (a1 > 7L) {
          tmp___61 = 4;
        } else {
          tmp___61 = 0;
        }
        if (a2 > 7L) {
          tmp___62 = 1;
        } else {
          tmp___62 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )((tmp___60 | tmp___61) | tmp___62);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___63 = jit->ip;
          (jit->ip) ++;
          *tmp___63 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___63 = jit->ip;
          (jit->ip) ++;
          *tmp___63 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___64 = jit->ip;
      (jit->ip) ++;
      *tmp___64 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___65 = jit->ip;
      (jit->ip) ++;
      *tmp___65 = (unsigned char)139;
      break;
      default: 
      tmp___66 = __builtin_expect(1L, 0L);
      if (tmp___66) {
        __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3285, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___67 = jit->ip;
          (jit->ip) ++;
          *tmp___67 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  while (1) {
    while (1) {
      if (a1 > 7L) {
        tmp___68 = 1;
      } else {
        tmp___68 = 0;
      }
      _amd64_rex_bits___4 = (unsigned char )(8 | tmp___68);
      if ((int )_amd64_rex_bits___4 != 0) {
        tmp___69 = jit->ip;
        (jit->ip) ++;
        *tmp___69 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
      }
      break;
    }
    while (1) {
      tmp___70 = jit->ip;
      (jit->ip) ++;
      *tmp___70 = (unsigned char)247;
      while (1) {
        while (1) {
          tmp___71 = jit->ip;
          (jit->ip) ++;
          *tmp___71 = (unsigned char )((long )((3 << 6) | (2 << 3)) | ((a1 & 7L) & 7L));
          break;
        }
        break;
      }
      break;
    }
    break;
  }
  break;
  case 720U: 
  emit_shift_op(jit, op, 4, imm);
  break;
  case 712U: 
  if (sign) {
    tmp___72 = 7;
  } else {
    tmp___72 = 5;
  }
  emit_shift_op(jit, op, tmp___72, imm);
  break;
  case 312U: 
  emit_cond_op(jit, op, 2, imm, sign);
  break;
  case 632U: 
  emit_cond_op(jit, op, 3, imm, sign);
  break;
  case 696U: 
  emit_cond_op(jit, op, 4, imm, sign);
  break;
  case 456U: 
  emit_cond_op(jit, op, 5, imm, sign);
  break;
  case 560U: 
  emit_cond_op(jit, op, 0, imm, sign);
  break;
  case 568U: 
  emit_cond_op(jit, op, 1, imm, sign);
  break;
  case 504U: 
  emit_branch_op(jit, op, 2, imm, sign);
  break;
  case 376U: 
  emit_branch_op(jit, op, 3, imm, sign);
  break;
  case 768U: 
  emit_branch_op(jit, op, 4, imm, sign);
  break;
  case 176U: 
  emit_branch_op(jit, op, 5, imm, sign);
  break;
  case 80U: 
  emit_branch_op(jit, op, 0, imm, sign);
  break;
  case 528U: 
  emit_branch_op(jit, op, 1, imm, sign);
  break;
  case 264U: 
  emit_branch_mask_op(jit, op, 1, imm);
  break;
  case 896U: 
  emit_branch_mask_op(jit, op, 0, imm);
  break;
  case 208U: 
  emit_branch_overflow_op(jit, op, 0, imm, 0);
  break;
  case 872U: 
  emit_branch_overflow_op(jit, op, 5, imm, 0);
  break;
  case 736U: 
  emit_branch_overflow_op(jit, op, 0, imm, 1);
  break;
  case 128U: 
  emit_branch_overflow_op(jit, op, 5, imm, 1);
  break;
  case 96U: 
  emit_mul_op(jit, op, imm, sign, 0);
  break;
  case 352U: 
  emit_mul_op(jit, op, imm, sign, 1);
  break;
  case 688U: 
  emit_div_op(jit, op, imm, sign, 0);
  break;
  case 832U: 
  emit_div_op(jit, op, imm, sign, 1);
  break;
  case 648U: 
  emit_funcall(jit, op, imm);
  break;
  case 344U: 
  while (1) {
    target = (struct jit_op *)a1;
    if (! target->in_use) {
      break;
    }
    switch ((unsigned int )((jit_opcode )((int )target->code & 65528))) {
    case 512U: 
    case 856U: 
    target->arg[1] = (jit_value )jit->ip - (jit_value )jit->buf;
    break;
    case 104U: 
    case 200U: 
    target->arg[0] = (jit_value )jit->ip - (jit_value )jit->buf;
    break;
    default: 
    pa = target->patch_addr;
    while (1) {
      rex_correction = (unsigned char)0;
      if (((int )*(jit->buf + pa) & 240) == 64) {
        rex_correction = (unsigned char )((int )rex_correction + 1);
      }
      pos = ((jit->buf + pa) + 1) + (int )rex_correction;
      size = 0;
      switch ((int )*((jit->buf + pa) + (int )rex_correction)) {
      case 233: 
      case 232: 
      size ++;
      break;
      case 15: 
      if ((int )*pos >= 112) {
        if (! ((int )*pos <= 143)) {
          goto _L___1;
        }
      } else {
        _L___1: /* CIL Label */ 
        tmp___73 = __builtin_expect(1L, 0L);
        if (tmp___73) {
          __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3334, "0");
        }
      }
      size ++;
      pos ++;
      break;
      case 127: 
      case 126: 
      case 125: 
      case 124: 
      case 123: 
      case 122: 
      case 121: 
      case 120: 
      case 119: 
      case 118: 
      case 117: 
      case 116: 
      case 115: 
      case 114: 
      case 113: 
      case 112: 
      case 235: 
      case 226: 
      case 225: 
      case 224: 
      break;
      default: 
      tmp___74 = __builtin_expect(1L, 0L);
      if (tmp___74) {
        __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3334, "0");
      }
      }
      disp = (int )(jit->ip - pos);
      if (size) {
        while (1) {
          imb___4.val = disp - 4;
          tmp___75 = pos;
          pos ++;
          *tmp___75 = imb___4.b[0];
          tmp___76 = pos;
          pos ++;
          *tmp___76 = imb___4.b[1];
          tmp___77 = pos;
          pos ++;
          *tmp___77 = imb___4.b[2];
          tmp___78 = pos;
          pos ++;
          *tmp___78 = imb___4.b[3];
          break;
        }
      } else
      if (disp - 1 >= -128) {
        if (disp - 1 <= 127) {
          while (1) {
            *pos = (unsigned char )((disp - 1) & 255);
            pos ++;
            break;
          }
        } else {
          goto _L___2;
        }
      } else {
        _L___2: /* CIL Label */ 
        tmp___79 = __builtin_expect(1L, 0L);
        if (tmp___79) {
          __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3334, "0");
        }
      }
      break;
    }
    }
    break;
  }
  break;
  case 336U: 
  op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
  if ((int )op->code & 1) {
    while (1) {
      while (1) {
        if (a1 > 7L) {
          tmp___80 = 1;
        } else {
          tmp___80 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )tmp___80;
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___81 = jit->ip;
          (jit->ip) ++;
          *tmp___81 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      while (1) {
        tmp___82 = jit->ip;
        (jit->ip) ++;
        *tmp___82 = (unsigned char)255;
        while (1) {
          while (1) {
            tmp___83 = jit->ip;
            (jit->ip) ++;
            *tmp___83 = (unsigned char )((long )((3 << 6) | (4 << 3)) | ((a1 & 7L) & 7L));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      while (1) {
        _amd64_rex_bits___6 = (unsigned char)0;
        if ((int )_amd64_rex_bits___6 != 0) {
          tmp___84 = jit->ip;
          (jit->ip) ++;
          *tmp___84 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
        }
        break;
      }
      while (1) {
        tmp___87 = jit_is_label(jit, (void *)a1);
        if (tmp___87) {
          tmp___86 = ((jit_value )jit->buf + ((jit_label *)a1)->pos) - (jit_value )jit->ip;
        } else {
          tmp___86 = a1;
        }
        t = (int )(tmp___86 - 5L);
        while (1) {
          tmp___88 = jit->ip;
          (jit->ip) ++;
          *tmp___88 = (unsigned char)233;
          while (1) {
            imb___5.val = t;
            tmp___89 = jit->ip;
            (jit->ip) ++;
            *tmp___89 = imb___5.b[0];
            tmp___90 = jit->ip;
            (jit->ip) ++;
            *tmp___90 = imb___5.b[1];
            tmp___91 = jit->ip;
            (jit->ip) ++;
            *tmp___91 = imb___5.b[2];
            tmp___92 = jit->ip;
            (jit->ip) ++;
            *tmp___92 = imb___5.b[3];
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  }
  break;
  case 792U: 
  if (! imm) {
    if (a1 != 0L) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp___93 = jit->ip;
          (jit->ip) ++;
          *tmp___93 = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___94 = 8;
          } else {
            tmp___94 = 0;
          }
          if (a1 > 7L) {
            tmp___95 = 1;
          } else {
            tmp___95 = 0;
          }
          _amd64_rex_bits___7 = (unsigned char )(tmp___94 | tmp___95);
          if ((int )_amd64_rex_bits___7 != 0) {
            tmp___96 = jit->ip;
            (jit->ip) ++;
            *tmp___96 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___96 = jit->ip;
            (jit->ip) ++;
            *tmp___96 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___97 = jit->ip;
        (jit->ip) ++;
        *tmp___97 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___98 = jit->ip;
        (jit->ip) ++;
        *tmp___98 = (unsigned char)139;
        break;
        default: 
        tmp___99 = __builtin_expect(1L, 0L);
        if (tmp___99) {
          __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3346, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___100 = jit->ip;
            (jit->ip) ++;
            *tmp___100 = (unsigned char )((long )(3 << 6) | (a1 & 7L));
            break;
          }
          break;
        }
        break;
      }
    }
  }
  if (imm) {
    while (1) {
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___101 = 8;
        } else {
          tmp___101 = 0;
        }
        _amd64_rex_bits___8 = (unsigned char )tmp___101;
        if ((int )_amd64_rex_bits___8 != 0) {
          tmp___102 = jit->ip;
          (jit->ip) ++;
          *tmp___102 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___102 = jit->ip;
          (jit->ip) ++;
          *tmp___102 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
        }
        break;
      }
      tmp___103 = jit->ip;
      (jit->ip) ++;
      *tmp___103 = (unsigned char)184;
      if (sizeof(void *) == 8UL) {
        while (1) {
          imb___6.val = (size_t )a1;
          tmp___104 = jit->ip;
          (jit->ip) ++;
          *tmp___104 = imb___6.b[0];
          tmp___105 = jit->ip;
          (jit->ip) ++;
          *tmp___105 = imb___6.b[1];
          tmp___106 = jit->ip;
          (jit->ip) ++;
          *tmp___106 = imb___6.b[2];
          tmp___107 = jit->ip;
          (jit->ip) ++;
          *tmp___107 = imb___6.b[3];
          tmp___108 = jit->ip;
          (jit->ip) ++;
          *tmp___108 = imb___6.b[4];
          tmp___109 = jit->ip;
          (jit->ip) ++;
          *tmp___109 = imb___6.b[5];
          tmp___110 = jit->ip;
          (jit->ip) ++;
          *tmp___110 = imb___6.b[6];
          tmp___111 = jit->ip;
          (jit->ip) ++;
          *tmp___111 = imb___6.b[7];
          break;
        }
      } else {
        while (1) {
          imb___7.val = (int )((size_t )a1);
          tmp___112 = jit->ip;
          (jit->ip) ++;
          *tmp___112 = imb___7.b[0];
          tmp___113 = jit->ip;
          (jit->ip) ++;
          *tmp___113 = imb___7.b[1];
          tmp___114 = jit->ip;
          (jit->ip) ++;
          *tmp___114 = imb___7.b[2];
          tmp___115 = jit->ip;
          (jit->ip) ++;
          *tmp___115 = imb___7.b[3];
          break;
        }
      }
      break;
    }
  }
  emit_pop_callee_saved_regs(jit);
  tmp___125 = jit_current_func_info(jit);
  if (tmp___125->has_prolog) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___116 = jit->ip;
        (jit->ip) ++;
        *tmp___116 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___117 = 8;
        } else {
          tmp___117 = 0;
        }
        _amd64_rex_bits___9 = (unsigned char )tmp___117;
        if ((int )_amd64_rex_bits___9 != 0) {
          tmp___118 = jit->ip;
          (jit->ip) ++;
          *tmp___118 = (unsigned char )(64 | (int )_amd64_rex_bits___9);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___118 = jit->ip;
          (jit->ip) ++;
          *tmp___118 = (unsigned char )(64 | (int )_amd64_rex_bits___9);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___119 = jit->ip;
      (jit->ip) ++;
      *tmp___119 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___120 = jit->ip;
      (jit->ip) ++;
      *tmp___120 = (unsigned char)139;
      break;
      default: 
      tmp___121 = __builtin_expect(1L, 0L);
      if (tmp___121) {
        __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3350, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___122 = jit->ip;
          (jit->ip) ++;
          *tmp___122 = (unsigned char )(((3 << 6) | (4 << 3)) | 5);
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        _amd64_rex_bits___10 = (unsigned char)0;
        if ((int )_amd64_rex_bits___10 != 0) {
          tmp___123 = jit->ip;
          (jit->ip) ++;
          *tmp___123 = (unsigned char )(64 | (int )_amd64_rex_bits___10);
        }
        break;
      }
      tmp___124 = jit->ip;
      (jit->ip) ++;
      *tmp___124 = (unsigned char)93;
      break;
    }
  }
  while (1) {
    tmp___126 = jit->ip;
    (jit->ip) ++;
    *tmp___126 = (unsigned char)195;
    break;
  }
  break;
  case 760U: 
  funcall_put_arg(jit, op);
  break;
  case 904U: 
  funcall_fput_arg(jit, op);
  break;
  case 776U: 
  emit_get_arg(jit, op);
  break;
  case 416U: 
  emit_msg_op(jit, op);
  break;
  case 56U: 
  emit_trace_op(jit, op);
  while ((unsigned long )jit->ip % 16UL) {
    while (1) {
      while (1) {
        tmp___127 = jit->ip;
        (jit->ip) ++;
        *tmp___127 = (unsigned char)144;
        break;
      }
      break;
    }
  }
  break;
  case 24U: 
  emit_ld_op(jit, op, a1, a2);
  break;
  case 112U: 
  emit_ldx_op(jit, op, a1, a2, a3);
  break;
  case 16U: 
  emit_sse_fst_op(jit, op, a1, a2);
  break;
  case 120U: 
  emit_sse_fstx_op(jit, op, a1, a2, a3);
  break;
  case 48U: 
  emit_sse_fld_op(jit, op, a1, a2);
  break;
  case 672U: 
  emit_sse_fldx_op(jit, op, a1, a2, a3);
  break;
  case 296U: 
  emit_memcpy(jit, op, a1, a2, a3);
  break;
  case 136U: 
  emit_memset(jit, op, a1, a2, a3, (int )op->arg_size);
  break;
  case 184U: 
  emit_transfer_init(jit, op, a1, a2, a3, (int )op->arg_size);
  break;
  case 472U: 
  emit_transfer_loop(jit, (jit_op *)a1);
  break;
  case 224U: 
  emit_transfer_op(jit, op, 6);
  break;
  case 448U: 
  emit_transfer_op(jit, op, 4);
  break;
  case 600U: 
  emit_transfer_op(jit, op, 1);
  break;
  case 272U: 
  emit_transfer_op(jit, op, 0);
  break;
  case 152U: 
  emit_transfer_op(jit, op, 5);
  break;
  case 520U: 
  break;
  case 808U: 
  break;
  case 544U: 
  break;
  case 496U: 
  ((jit_label *)a1)->pos = (jit_value )jit->ip - (jit_value )jit->buf;
  break;
  case 168U: 
  while ((unsigned long )jit->ip % (unsigned long )op->arg[0]) {
    while (1) {
      while (1) {
        tmp___128 = jit->ip;
        (jit->ip) ++;
        *tmp___128 = (unsigned char)144;
        break;
      }
      break;
    }
  }
  break;
  case 512U: 
  case 856U: 
  op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
  while (1) {
    while (1) {
      if (sizeof(void *) > 4UL) {
        tmp___129 = 8;
      } else {
        tmp___129 = 0;
      }
      if (a1 > 7L) {
        tmp___130 = 1;
      } else {
        tmp___130 = 0;
      }
      _amd64_rex_bits___11 = (unsigned char )(tmp___129 | tmp___130);
      if ((int )_amd64_rex_bits___11 != 0) {
        tmp___131 = jit->ip;
        (jit->ip) ++;
        *tmp___131 = (unsigned char )(64 | (int )_amd64_rex_bits___11);
      } else
      if (sizeof(void *) == 1UL) {
        tmp___131 = jit->ip;
        (jit->ip) ++;
        *tmp___131 = (unsigned char )(64 | (int )_amd64_rex_bits___11);
      }
      break;
    }
    tmp___132 = jit->ip;
    (jit->ip) ++;
    *tmp___132 = (unsigned char )(184L + (a1 & 7L));
    if (sizeof(void *) == 8UL) {
      while (1) {
        imb___8.val = 0xdeadbeefcafebabeUL;
        tmp___133 = jit->ip;
        (jit->ip) ++;
        *tmp___133 = imb___8.b[0];
        tmp___134 = jit->ip;
        (jit->ip) ++;
        *tmp___134 = imb___8.b[1];
        tmp___135 = jit->ip;
        (jit->ip) ++;
        *tmp___135 = imb___8.b[2];
        tmp___136 = jit->ip;
        (jit->ip) ++;
        *tmp___136 = imb___8.b[3];
        tmp___137 = jit->ip;
        (jit->ip) ++;
        *tmp___137 = imb___8.b[4];
        tmp___138 = jit->ip;
        (jit->ip) ++;
        *tmp___138 = imb___8.b[5];
        tmp___139 = jit->ip;
        (jit->ip) ++;
        *tmp___139 = imb___8.b[6];
        tmp___140 = jit->ip;
        (jit->ip) ++;
        *tmp___140 = imb___8.b[7];
        break;
      }
    } else {
      while (1) {
        imb___9.val = -889275714;
        tmp___141 = jit->ip;
        (jit->ip) ++;
        *tmp___141 = imb___9.b[0];
        tmp___142 = jit->ip;
        (jit->ip) ++;
        *tmp___142 = imb___9.b[1];
        tmp___143 = jit->ip;
        (jit->ip) ++;
        *tmp___143 = imb___9.b[2];
        tmp___144 = jit->ip;
        (jit->ip) ++;
        *tmp___144 = imb___9.b[3];
        break;
      }
    }
    break;
  }
  break;
  case 488U: 
  break;
  case 592U: 
  break;
  default: 
  found = 0;
  }
  if (found) {
    return;
  }
  switch ((int )op->code) {
  case 617: 
  if (a1 != a2) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___145 = jit->ip;
        (jit->ip) ++;
        *tmp___145 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___146 = 8;
        } else {
          tmp___146 = 0;
        }
        if (a1 > 7L) {
          tmp___147 = 4;
        } else {
          tmp___147 = 0;
        }
        if (a2 > 7L) {
          tmp___148 = 1;
        } else {
          tmp___148 = 0;
        }
        _amd64_rex_bits___12 = (unsigned char )((tmp___146 | tmp___147) | tmp___148);
        if ((int )_amd64_rex_bits___12 != 0) {
          tmp___149 = jit->ip;
          (jit->ip) ++;
          *tmp___149 = (unsigned char )(64 | (int )_amd64_rex_bits___12);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___149 = jit->ip;
          (jit->ip) ++;
          *tmp___149 = (unsigned char )(64 | (int )_amd64_rex_bits___12);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___150 = jit->ip;
      (jit->ip) ++;
      *tmp___150 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___151 = jit->ip;
      (jit->ip) ++;
      *tmp___151 = (unsigned char)139;
      break;
      default: 
      tmp___152 = __builtin_expect(1L, 0L);
      if (tmp___152) {
        __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3409, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___153 = jit->ip;
          (jit->ip) ++;
          *tmp___153 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  break;
  case 618: 
  if (a2 == 0L) {
    while (1) {
      while (1) {
        if (a1 > 7L) {
          tmp___154 = 4;
        } else {
          tmp___154 = 0;
        }
        if (a1 > 7L) {
          tmp___155 = 1;
        } else {
          tmp___155 = 0;
        }
        _amd64_rex_bits___13 = (unsigned char )((8 | tmp___154) | tmp___155);
        if ((int )_amd64_rex_bits___13 != 0) {
          tmp___156 = jit->ip;
          (jit->ip) ++;
          *tmp___156 = (unsigned char )(64 | (int )_amd64_rex_bits___13);
        }
        break;
      }
      tmp___157 = jit->ip;
      (jit->ip) ++;
      *tmp___157 = (unsigned char )((6 << 3) + 3);
      while (1) {
        while (1) {
          tmp___158 = jit->ip;
          (jit->ip) ++;
          *tmp___158 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a1 & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      while (1) {
        if (a1 > 7L) {
          tmp___159 = 1;
        } else {
          tmp___159 = 0;
        }
        _amd64_rex_bits___14 = (unsigned char )(8 | tmp___159);
        if ((int )_amd64_rex_bits___14 != 0) {
          tmp___160 = jit->ip;
          (jit->ip) ++;
          *tmp___160 = (unsigned char )(64 | (int )_amd64_rex_bits___14);
        }
        break;
      }
      tmp___161 = jit->ip;
      (jit->ip) ++;
      *tmp___161 = (unsigned char )(184L + (a1 & 7L));
      while (1) {
        imb___10.val = (size_t )a2;
        tmp___162 = jit->ip;
        (jit->ip) ++;
        *tmp___162 = imb___10.b[0];
        tmp___163 = jit->ip;
        (jit->ip) ++;
        *tmp___163 = imb___10.b[1];
        tmp___164 = jit->ip;
        (jit->ip) ++;
        *tmp___164 = imb___10.b[2];
        tmp___165 = jit->ip;
        (jit->ip) ++;
        *tmp___165 = imb___10.b[3];
        tmp___166 = jit->ip;
        (jit->ip) ++;
        *tmp___166 = imb___10.b[4];
        tmp___167 = jit->ip;
        (jit->ip) ++;
        *tmp___167 = imb___10.b[5];
        tmp___168 = jit->ip;
        (jit->ip) ++;
        *tmp___168 = imb___10.b[6];
        tmp___169 = jit->ip;
        (jit->ip) ++;
        *tmp___169 = imb___10.b[7];
        break;
      }
      break;
    }
  }
  break;
  case 840: 
  funcall_prepare(jit, op, (int )(a1 + a2));
  tmp___174 = emit_push_caller_saved_regs(jit, op);
  jit->push_count += tmp___174;
  break;
  case 384: 
  emit_prolog_op(jit, op);
  break;
  case 482: 
  while (1) {
    if ((int )op->arg_size == 2) {
      tmp___175 = jit->ip;
      (jit->ip) ++;
      *tmp___175 = (unsigned char)102;
    }
    while (1) {
      if ((int )op->arg_size > 4) {
        tmp___176 = 8;
      } else {
        tmp___176 = 0;
      }
      if (a2 > 7L) {
        tmp___177 = 4;
      } else {
        tmp___177 = 0;
      }
      _amd64_rex_bits___15 = (unsigned char )(tmp___176 | tmp___177);
      if ((int )_amd64_rex_bits___15 != 0) {
        tmp___178 = jit->ip;
        (jit->ip) ++;
        *tmp___178 = (unsigned char )(64 | (int )_amd64_rex_bits___15);
      } else
      if ((int )op->arg_size == 1) {
        tmp___178 = jit->ip;
        (jit->ip) ++;
        *tmp___178 = (unsigned char )(64 | (int )_amd64_rex_bits___15);
      }
      break;
    }
    switch ((int )op->arg_size) {
    case 1: 
    tmp___179 = jit->ip;
    (jit->ip) ++;
    *tmp___179 = (unsigned char)136;
    break;
    case 8: 
    case 4: 
    case 2: 
    tmp___180 = jit->ip;
    (jit->ip) ++;
    *tmp___180 = (unsigned char)137;
    break;
    default: 
    tmp___181 = __builtin_expect(1L, 0L);
    if (tmp___181) {
      __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3420, "0");
    }
    }
    while (1) {
      tmp___182 = jit->ip;
      (jit->ip) ++;
      *tmp___182 = (unsigned char )(((a2 & 7L) << 3) | 4L);
      break;
    }
    while (1) {
      tmp___183 = jit->ip;
      (jit->ip) ++;
      *tmp___183 = (unsigned char )((4 << 3) | 5);
      break;
    }
    while (1) {
      imb___12.val = (int )a1;
      tmp___184 = jit->ip;
      (jit->ip) ++;
      *tmp___184 = imb___12.b[0];
      tmp___185 = jit->ip;
      (jit->ip) ++;
      *tmp___185 = imb___12.b[1];
      tmp___186 = jit->ip;
      (jit->ip) ++;
      *tmp___186 = imb___12.b[2];
      tmp___187 = jit->ip;
      (jit->ip) ++;
      *tmp___187 = imb___12.b[3];
      break;
    }
    break;
  }
  break;
  case 481: 
  while (1) {
    if ((int )op->arg_size == 2) {
      tmp___188 = jit->ip;
      (jit->ip) ++;
      *tmp___188 = (unsigned char)102;
    }
    while (1) {
      if ((int )op->arg_size > 4) {
        tmp___189 = 8;
      } else {
        tmp___189 = 0;
      }
      if (a2 > 7L) {
        tmp___190 = 4;
      } else {
        tmp___190 = 0;
      }
      if (a1 > 7L) {
        tmp___191 = 1;
      } else {
        tmp___191 = 0;
      }
      _amd64_rex_bits___16 = (unsigned char )((tmp___189 | tmp___190) | tmp___191);
      if ((int )_amd64_rex_bits___16 != 0) {
        tmp___192 = jit->ip;
        (jit->ip) ++;
        *tmp___192 = (unsigned char )(64 | (int )_amd64_rex_bits___16);
      } else
      if ((int )op->arg_size == 1) {
        tmp___192 = jit->ip;
        (jit->ip) ++;
        *tmp___192 = (unsigned char )(64 | (int )_amd64_rex_bits___16);
      }
      break;
    }
    switch ((int )op->arg_size) {
    case 1: 
    tmp___193 = jit->ip;
    (jit->ip) ++;
    *tmp___193 = (unsigned char)136;
    break;
    case 8: 
    case 4: 
    case 2: 
    tmp___194 = jit->ip;
    (jit->ip) ++;
    *tmp___194 = (unsigned char)137;
    break;
    default: 
    tmp___195 = __builtin_expect(1L, 0L);
    if (tmp___195) {
      __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3421, "0");
    }
    }
    while (1) {
      if ((a1 & 7L) == 4L) {
        while (1) {
          tmp___196 = jit->ip;
          (jit->ip) ++;
          *tmp___196 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___197 = jit->ip;
          (jit->ip) ++;
          *tmp___197 = (unsigned char )((4 << 3) | 4);
          break;
        }
        break;
      }
      if ((a1 & 7L) != 5L) {
        while (1) {
          tmp___206 = jit->ip;
          (jit->ip) ++;
          *tmp___206 = (unsigned char )((((a2 & 7L) & 7L) << 3) | ((a1 & 7L) & 7L));
          break;
        }
        break;
      }
      while (1) {
        tmp___207 = jit->ip;
        (jit->ip) ++;
        *tmp___207 = (unsigned char )(((long )(1 << 6) | (((a2 & 7L) & 7L) << 3)) | ((a1 & 7L) & 7L));
        break;
      }
      while (1) {
        *(jit->ip) = (unsigned char)0;
        (jit->ip) ++;
        break;
      }
      break;
    }
    break;
  }
  break;
  case 754: 
  while (1) {
    if ((int )op->arg_size == 2) {
      tmp___213 = jit->ip;
      (jit->ip) ++;
      *tmp___213 = (unsigned char)102;
    }
    while (1) {
      if ((int )op->arg_size > 4) {
        tmp___214 = 8;
      } else {
        tmp___214 = 0;
      }
      if (a3 > 7L) {
        tmp___215 = 4;
      } else {
        tmp___215 = 0;
      }
      if (a2 > 7L) {
        tmp___216 = 1;
      } else {
        tmp___216 = 0;
      }
      _amd64_rex_bits___17 = (unsigned char )((tmp___214 | tmp___215) | tmp___216);
      if ((int )_amd64_rex_bits___17 != 0) {
        tmp___217 = jit->ip;
        (jit->ip) ++;
        *tmp___217 = (unsigned char )(64 | (int )_amd64_rex_bits___17);
      } else
      if ((int )op->arg_size == 1) {
        tmp___217 = jit->ip;
        (jit->ip) ++;
        *tmp___217 = (unsigned char )(64 | (int )_amd64_rex_bits___17);
      }
      break;
    }
    switch ((int )op->arg_size) {
    case 1: 
    tmp___218 = jit->ip;
    (jit->ip) ++;
    *tmp___218 = (unsigned char)136;
    break;
    case 8: 
    case 4: 
    case 2: 
    tmp___219 = jit->ip;
    (jit->ip) ++;
    *tmp___219 = (unsigned char)137;
    break;
    default: 
    tmp___220 = __builtin_expect(1L, 0L);
    if (tmp___220) {
      __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3422, "0");
    }
    }
    while (1) {
      if ((a2 & 7L) == 4L) {
        if (a1 == 0L) {
          while (1) {
            tmp___221 = jit->ip;
            (jit->ip) ++;
            *tmp___221 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___222 = jit->ip;
            (jit->ip) ++;
            *tmp___222 = (unsigned char )((4 << 3) | 4);
            break;
          }
        } else
        if ((int )a1 >= -128) {
          if ((int )a1 <= 127) {
            while (1) {
              tmp___223 = jit->ip;
              (jit->ip) ++;
              *tmp___223 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___224 = jit->ip;
              (jit->ip) ++;
              *tmp___224 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(a1 & 255L);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___3;
          }
        } else {
          _L___3: /* CIL Label */ 
          while (1) {
            tmp___225 = jit->ip;
            (jit->ip) ++;
            *tmp___225 = (unsigned char )(((long )(2 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            tmp___226 = jit->ip;
            (jit->ip) ++;
            *tmp___226 = (unsigned char )((4 << 3) | 4);
            break;
          }
          while (1) {
            imb___15.val = (int )a1;
            tmp___227 = jit->ip;
            (jit->ip) ++;
            *tmp___227 = imb___15.b[0];
            tmp___228 = jit->ip;
            (jit->ip) ++;
            *tmp___228 = imb___15.b[1];
            tmp___229 = jit->ip;
            (jit->ip) ++;
            *tmp___229 = imb___15.b[2];
            tmp___230 = jit->ip;
            (jit->ip) ++;
            *tmp___230 = imb___15.b[3];
            break;
          }
        }
        break;
      }
      if (a1 == 0L) {
        if ((a2 & 7L) != 5L) {
          while (1) {
            tmp___231 = jit->ip;
            (jit->ip) ++;
            *tmp___231 = (unsigned char )((((a3 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
            break;
          }
          break;
        }
      }
      if ((int )a1 >= -128) {
        if ((int )a1 <= 127) {
          while (1) {
            tmp___232 = jit->ip;
            (jit->ip) ++;
            *tmp___232 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(a1 & 255L);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L___4;
        }
      } else {
        _L___4: /* CIL Label */ 
        while (1) {
          tmp___233 = jit->ip;
          (jit->ip) ++;
          *tmp___233 = (unsigned char )(((long )(2 << 6) | (((a3 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
          break;
        }
        while (1) {
          imb___16.val = (int )a1;
          tmp___234 = jit->ip;
          (jit->ip) ++;
          *tmp___234 = imb___16.b[0];
          tmp___235 = jit->ip;
          (jit->ip) ++;
          *tmp___235 = imb___16.b[1];
          tmp___236 = jit->ip;
          (jit->ip) ++;
          *tmp___236 = imb___16.b[2];
          tmp___237 = jit->ip;
          (jit->ip) ++;
          *tmp___237 = imb___16.b[3];
          break;
        }
      }
      break;
    }
    break;
  }
  break;
  case 753: 
  while (1) {
    while (1) {
      if ((int )op->arg_size > 4) {
        tmp___238 = 8;
      } else {
        tmp___238 = 0;
      }
      if (a3 > 7L) {
        tmp___239 = 4;
      } else {
        tmp___239 = 0;
      }
      if (a2 > 7L) {
        tmp___240 = 2;
      } else {
        tmp___240 = 0;
      }
      if (a1 > 7L) {
        tmp___241 = 1;
      } else {
        tmp___241 = 0;
      }
      _amd64_rex_bits___18 = (unsigned char )(((tmp___238 | tmp___239) | tmp___240) | tmp___241);
      if ((int )_amd64_rex_bits___18 != 0) {
        tmp___242 = jit->ip;
        (jit->ip) ++;
        *tmp___242 = (unsigned char )(64 | (int )_amd64_rex_bits___18);
      } else
      if ((int )op->arg_size == 1) {
        tmp___242 = jit->ip;
        (jit->ip) ++;
        *tmp___242 = (unsigned char )(64 | (int )_amd64_rex_bits___18);
      }
      break;
    }
    while (1) {
      if ((int )op->arg_size == 8) {
        tmp___243 = 4;
      } else {
        tmp___243 = (int )op->arg_size;
      }
      switch (tmp___243) {
      case 1: 
      tmp___244 = jit->ip;
      (jit->ip) ++;
      *tmp___244 = (unsigned char)136;
      break;
      case 2: 
      tmp___245 = jit->ip;
      (jit->ip) ++;
      *tmp___245 = (unsigned char)102;
      case 4: 
      tmp___246 = jit->ip;
      (jit->ip) ++;
      *tmp___246 = (unsigned char)137;
      break;
      default: 
      tmp___247 = __builtin_expect(1L, 0L);
      if (tmp___247) {
        __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3423, "0");
      }
      }
      while (1) {
        if ((a1 & 7L) == -1L) {
          while (1) {
            tmp___248 = jit->ip;
            (jit->ip) ++;
            *tmp___248 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___249 = jit->ip;
            (jit->ip) ++;
            *tmp___249 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 5L);
            break;
          }
          while (1) {
            imb___17.val = 0;
            tmp___250 = jit->ip;
            (jit->ip) ++;
            *tmp___250 = imb___17.b[0];
            tmp___251 = jit->ip;
            (jit->ip) ++;
            *tmp___251 = imb___17.b[1];
            tmp___252 = jit->ip;
            (jit->ip) ++;
            *tmp___252 = imb___17.b[2];
            tmp___253 = jit->ip;
            (jit->ip) ++;
            *tmp___253 = imb___17.b[3];
            break;
          }
        } else
        if ((a1 & 7L) != 5L) {
          while (1) {
            tmp___254 = jit->ip;
            (jit->ip) ++;
            *tmp___254 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___255 = jit->ip;
            (jit->ip) ++;
            *tmp___255 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
            break;
          }
        } else {
          while (1) {
            tmp___256 = jit->ip;
            (jit->ip) ++;
            *tmp___256 = (unsigned char )(((long )(1 << 6) | (((a3 & 7L) & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            tmp___257 = jit->ip;
            (jit->ip) ++;
            *tmp___257 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)0;
            (jit->ip) ++;
            break;
          }
        }
        break;
      }
      break;
    }
    break;
  }
  break;
  case 257: 
  while (1) {
    tmp___264 = jit->ip;
    (jit->ip) ++;
    *tmp___264 = (unsigned char)242;
    while (1) {
      if (a1 > 7L) {
        tmp___265 = 4;
      } else {
        tmp___265 = 0;
      }
      if (a2 > 7L) {
        tmp___266 = 1;
      } else {
        tmp___266 = 0;
      }
      _amd64_rex_bits___19 = (unsigned char )(tmp___265 | tmp___266);
      if ((int )_amd64_rex_bits___19 != 0) {
        tmp___267 = jit->ip;
        (jit->ip) ++;
        *tmp___267 = (unsigned char )(64 | (int )_amd64_rex_bits___19);
      }
      break;
    }
    tmp___268 = jit->ip;
    (jit->ip) ++;
    *tmp___268 = (unsigned char)15;
    tmp___269 = jit->ip;
    (jit->ip) ++;
    *tmp___269 = (unsigned char)16;
    while (1) {
      while (1) {
        tmp___270 = jit->ip;
        (jit->ip) ++;
        *tmp___270 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
        break;
      }
      break;
    }
    break;
  }
  break;
  case 258: 
  sse_mov_reg_safeimm(jit, op, a1, & op->flt_imm);
  break;
  case 145: 
  emit_sse_alu_op(jit, op, 88);
  break;
  case 625: 
  emit_sse_sub_op(jit, op, a1, a2, a3);
  break;
  case 745: 
  emit_sse_sub_op(jit, op, a1, a3, a2);
  break;
  case 249: 
  emit_sse_alu_op(jit, op, 89);
  break;
  case 73: 
  emit_sse_div_op(jit, a1, a2, a3);
  break;
  case 65: 
  emit_sse_neg_op(jit, op, a1, a2);
  break;
  case 289: 
  emit_sse_branch(jit, op, a1, a2, a3, 2);
  break;
  case 241: 
  emit_sse_branch(jit, op, a1, a2, a3, 4);
  break;
  case 577: 
  emit_sse_branch(jit, op, a1, a2, a3, 5);
  break;
  case 441: 
  emit_sse_branch(jit, op, a1, a3, a2, 5);
  break;
  case 1: 
  emit_sse_branch(jit, op, a1, a3, a2, 0);
  break;
  case 281: 
  emit_sse_branch(jit, op, a1, a3, a2, 1);
  break;
  case 409: 
  while (1) {
    tmp___271 = jit->ip;
    (jit->ip) ++;
    *tmp___271 = (unsigned char)242;
    while (1) {
      if (a1 > 7L) {
        tmp___272 = 4;
      } else {
        tmp___272 = 0;
      }
      if (a2 > 7L) {
        tmp___273 = 1;
      } else {
        tmp___273 = 0;
      }
      _amd64_rex_bits___20 = (unsigned char )((8 | tmp___272) | tmp___273);
      if ((int )_amd64_rex_bits___20 != 0) {
        tmp___274 = jit->ip;
        (jit->ip) ++;
        *tmp___274 = (unsigned char )(64 | (int )_amd64_rex_bits___20);
      }
      break;
    }
    tmp___275 = jit->ip;
    (jit->ip) ++;
    *tmp___275 = (unsigned char)15;
    tmp___276 = jit->ip;
    (jit->ip) ++;
    *tmp___276 = (unsigned char)42;
    while (1) {
      while (1) {
        tmp___277 = jit->ip;
        (jit->ip) ++;
        *tmp___277 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
        break;
      }
      break;
    }
    break;
  }
  break;
  case 9: 
  while (1) {
    tmp___278 = jit->ip;
    (jit->ip) ++;
    *tmp___278 = (unsigned char)242;
    while (1) {
      if (a1 > 7L) {
        tmp___279 = 4;
      } else {
        tmp___279 = 0;
      }
      if (a2 > 7L) {
        tmp___280 = 1;
      } else {
        tmp___280 = 0;
      }
      _amd64_rex_bits___21 = (unsigned char )((8 | tmp___279) | tmp___280);
      if ((int )_amd64_rex_bits___21 != 0) {
        tmp___281 = jit->ip;
        (jit->ip) ++;
        *tmp___281 = (unsigned char )(64 | (int )_amd64_rex_bits___21);
      }
      break;
    }
    tmp___282 = jit->ip;
    (jit->ip) ++;
    *tmp___282 = (unsigned char)15;
    tmp___283 = jit->ip;
    (jit->ip) ++;
    *tmp___283 = (unsigned char)44;
    while (1) {
      while (1) {
        tmp___284 = jit->ip;
        (jit->ip) ++;
        *tmp___284 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
        break;
      }
      break;
    }
    break;
  }
  break;
  case 849: 
  emit_sse_floor(jit, a1, a2, 0);
  break;
  case 665: 
  emit_sse_floor(jit, a1, a2, 1);
  break;
  case 585: 
  emit_sse_round(jit, op, a1, a2);
  break;
  case 305: 
  emit_fret_op(jit, op);
  break;
  case 360: 
  emit_fretval_op(jit, op);
  break;
  case 400: 
  emit_ureg(jit, a1, (int )a2);
  break;
  case 800: 
  emit_lreg(jit, (int )a1, a2);
  break;
  case 160: 
  emit_ureg(jit, a1, (int )a2);
  break;
  case 728: 
  while (1) {
    if (sizeof(void *) == 2UL) {
      tmp___285 = jit->ip;
      (jit->ip) ++;
      *tmp___285 = (unsigned char)102;
    }
    while (1) {
      if (sizeof(void *) > 4UL) {
        tmp___286 = 8;
      } else {
        tmp___286 = 0;
      }
      if (a1 > 7L) {
        tmp___287 = 4;
      } else {
        tmp___287 = 0;
      }
      if (a2 > 7L) {
        tmp___288 = 1;
      } else {
        tmp___288 = 0;
      }
      _amd64_rex_bits___22 = (unsigned char )((tmp___286 | tmp___287) | tmp___288);
      if ((int )_amd64_rex_bits___22 != 0) {
        tmp___289 = jit->ip;
        (jit->ip) ++;
        *tmp___289 = (unsigned char )(64 | (int )_amd64_rex_bits___22);
      } else
      if (sizeof(void *) == 1UL) {
        tmp___289 = jit->ip;
        (jit->ip) ++;
        *tmp___289 = (unsigned char )(64 | (int )_amd64_rex_bits___22);
      }
      break;
    }
    switch (sizeof(void *)) {
    case 1UL: 
    tmp___290 = jit->ip;
    (jit->ip) ++;
    *tmp___290 = (unsigned char)138;
    break;
    case 8UL: 
    case 4UL: 
    case 2UL: 
    tmp___291 = jit->ip;
    (jit->ip) ++;
    *tmp___291 = (unsigned char)139;
    break;
    default: 
    tmp___292 = __builtin_expect(1L, 0L);
    if (tmp___292) {
      __assert_rtn("jit_gen_op", "./jitter-amd64.c", 3455, "0");
    }
    }
    while (1) {
      while (1) {
        tmp___293 = jit->ip;
        (jit->ip) ++;
        *tmp___293 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
        break;
      }
      break;
    }
    break;
  }
  break;
  case 216: 
  break;
  case 392: 
  break;
  case 42: 
  while (1) {
    while (1) {
      if ((int )op->arg_size > 4) {
        tmp___294 = 8;
      } else {
        tmp___294 = 0;
      }
      _amd64_rex_bits___23 = (unsigned char )tmp___294;
      if ((int )_amd64_rex_bits___23 != 0) {
        tmp___295 = jit->ip;
        (jit->ip) ++;
        *tmp___295 = (unsigned char )(64 | (int )_amd64_rex_bits___23);
      } else
      if ((int )op->arg_size == 1) {
        tmp___295 = jit->ip;
        (jit->ip) ++;
        *tmp___295 = (unsigned char )(64 | (int )_amd64_rex_bits___23);
      }
      break;
    }
    if ((int )op->arg_size == 1) {
      tmp___296 = jit->ip;
      (jit->ip) ++;
      *tmp___296 = (unsigned char)198;
      while (1) {
        tmp___297 = jit->ip;
        (jit->ip) ++;
        *tmp___297 = (unsigned char)4;
        tmp___298 = jit->ip;
        (jit->ip) ++;
        *tmp___298 = (unsigned char)37;
        while (1) {
          imb___19.val = (int )a1;
          tmp___299 = jit->ip;
          (jit->ip) ++;
          *tmp___299 = imb___19.b[0];
          tmp___300 = jit->ip;
          (jit->ip) ++;
          *tmp___300 = imb___19.b[1];
          tmp___301 = jit->ip;
          (jit->ip) ++;
          *tmp___301 = imb___19.b[2];
          tmp___302 = jit->ip;
          (jit->ip) ++;
          *tmp___302 = imb___19.b[3];
          break;
        }
        break;
      }
      while (1) {
        *(jit->ip) = (unsigned char )(a2 & 255L);
        (jit->ip) ++;
        break;
      }
    } else
    if ((int )op->arg_size == 2) {
      tmp___303 = jit->ip;
      (jit->ip) ++;
      *tmp___303 = (unsigned char)102;
      tmp___304 = jit->ip;
      (jit->ip) ++;
      *tmp___304 = (unsigned char)199;
      while (1) {
        tmp___305 = jit->ip;
        (jit->ip) ++;
        *tmp___305 = (unsigned char)4;
        tmp___306 = jit->ip;
        (jit->ip) ++;
        *tmp___306 = (unsigned char)37;
        while (1) {
          imb___20.val = (int )a1;
          tmp___307 = jit->ip;
          (jit->ip) ++;
          *tmp___307 = imb___20.b[0];
          tmp___308 = jit->ip;
          (jit->ip) ++;
          *tmp___308 = imb___20.b[1];
          tmp___309 = jit->ip;
          (jit->ip) ++;
          *tmp___309 = imb___20.b[2];
          tmp___310 = jit->ip;
          (jit->ip) ++;
          *tmp___310 = imb___20.b[3];
          break;
        }
        break;
      }
      while (1) {
        *((short *)jit->ip) = (short )a2;
        jit->ip += 2;
        break;
      }
    } else {
      tmp___311 = jit->ip;
      (jit->ip) ++;
      *tmp___311 = (unsigned char)199;
      while (1) {
        tmp___312 = jit->ip;
        (jit->ip) ++;
        *tmp___312 = (unsigned char)4;
        tmp___313 = jit->ip;
        (jit->ip) ++;
        *tmp___313 = (unsigned char)37;
        while (1) {
          imb___21.val = (int )a1;
          tmp___314 = jit->ip;
          (jit->ip) ++;
          *tmp___314 = imb___21.b[0];
          tmp___315 = jit->ip;
          (jit->ip) ++;
          *tmp___315 = imb___21.b[1];
          tmp___316 = jit->ip;
          (jit->ip) ++;
          *tmp___316 = imb___21.b[2];
          tmp___317 = jit->ip;
          (jit->ip) ++;
          *tmp___317 = imb___21.b[3];
          break;
        }
        break;
      }
      while (1) {
        imb___22.val = (int )a2;
        tmp___318 = jit->ip;
        (jit->ip) ++;
        *tmp___318 = imb___22.b[0];
        tmp___319 = jit->ip;
        (jit->ip) ++;
        *tmp___319 = imb___22.b[1];
        tmp___320 = jit->ip;
        (jit->ip) ++;
        *tmp___320 = imb___22.b[2];
        tmp___321 = jit->ip;
        (jit->ip) ++;
        *tmp___321 = imb___22.b[3];
        break;
      }
    }
    break;
  }
  break;
  case 41: 
  while (1) {
    if ((int )op->arg_size == 2) {
      tmp___322 = jit->ip;
      (jit->ip) ++;
      *tmp___322 = (unsigned char)102;
    }
    while (1) {
      if ((int )op->arg_size == 1) {
        tmp___325 = 0;
      } else {
        tmp___325 = (int )op->arg_size;
      }
      if (tmp___325 > 4) {
        tmp___324 = 8;
      } else {
        tmp___324 = 0;
      }
      if (a1 > 7L) {
        tmp___326 = 1;
      } else {
        tmp___326 = 0;
      }
      _amd64_rex_bits___24 = (unsigned char )(tmp___324 | tmp___326);
      if ((int )_amd64_rex_bits___24 != 0) {
        tmp___327 = jit->ip;
        (jit->ip) ++;
        *tmp___327 = (unsigned char )(64 | (int )_amd64_rex_bits___24);
      } else {
        if ((int )op->arg_size == 1) {
          tmp___328 = 0;
        } else {
          tmp___328 = (int )op->arg_size;
        }
        if (tmp___328 == 1) {
          tmp___327 = jit->ip;
          (jit->ip) ++;
          *tmp___327 = (unsigned char )(64 | (int )_amd64_rex_bits___24);
        }
      }
      break;
    }
    if ((int )op->arg_size == 1) {
      tmp___329 = jit->ip;
      (jit->ip) ++;
      *tmp___329 = (unsigned char)198;
      while (1) {
        if ((a1 & 7L) == 4L) {
          while (1) {
            tmp___330 = jit->ip;
            (jit->ip) ++;
            *tmp___330 = (unsigned char)4;
            break;
          }
          while (1) {
            tmp___331 = jit->ip;
            (jit->ip) ++;
            *tmp___331 = (unsigned char )((4 << 3) | 4);
            break;
          }
          break;
        }
        if ((a1 & 7L) != 5L) {
          while (1) {
            tmp___340 = jit->ip;
            (jit->ip) ++;
            *tmp___340 = (unsigned char )((a1 & 7L) & 7L);
            break;
          }
          break;
        }
        while (1) {
          tmp___341 = jit->ip;
          (jit->ip) ++;
          *tmp___341 = (unsigned char )((long )(1 << 6) | ((a1 & 7L) & 7L));
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)0;
          (jit->ip) ++;
          break;
        }
        break;
      }
      while (1) {
        *(jit->ip) = (unsigned char )(a2 & 255L);
        (jit->ip) ++;
        break;
      }
    } else
    if ((int )op->arg_size == 2) {
      tmp___347 = jit->ip;
      (jit->ip) ++;
      *tmp___347 = (unsigned char)199;
      while (1) {
        if ((a1 & 7L) == 4L) {
          while (1) {
            tmp___348 = jit->ip;
            (jit->ip) ++;
            *tmp___348 = (unsigned char)4;
            break;
          }
          while (1) {
            tmp___349 = jit->ip;
            (jit->ip) ++;
            *tmp___349 = (unsigned char )((4 << 3) | 4);
            break;
          }
          break;
        }
        if ((a1 & 7L) != 5L) {
          while (1) {
            tmp___358 = jit->ip;
            (jit->ip) ++;
            *tmp___358 = (unsigned char )((a1 & 7L) & 7L);
            break;
          }
          break;
        }
        while (1) {
          tmp___359 = jit->ip;
          (jit->ip) ++;
          *tmp___359 = (unsigned char )((long )(1 << 6) | ((a1 & 7L) & 7L));
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)0;
          (jit->ip) ++;
          break;
        }
        break;
      }
      while (1) {
        *((short *)jit->ip) = (short )a2;
        jit->ip += 2;
        break;
      }
    } else {
      tmp___365 = jit->ip;
      (jit->ip) ++;
      *tmp___365 = (unsigned char)199;
      while (1) {
        if ((a1 & 7L) == 4L) {
          while (1) {
            tmp___366 = jit->ip;
            (jit->ip) ++;
            *tmp___366 = (unsigned char)4;
            break;
          }
          while (1) {
            tmp___367 = jit->ip;
            (jit->ip) ++;
            *tmp___367 = (unsigned char )((4 << 3) | 4);
            break;
          }
          break;
        }
        if ((a1 & 7L) != 5L) {
          while (1) {
            tmp___376 = jit->ip;
            (jit->ip) ++;
            *tmp___376 = (unsigned char )((a1 & 7L) & 7L);
            break;
          }
          break;
        }
        while (1) {
          tmp___377 = jit->ip;
          (jit->ip) ++;
          *tmp___377 = (unsigned char )((long )(1 << 6) | ((a1 & 7L) & 7L));
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)0;
          (jit->ip) ++;
          break;
        }
        break;
      }
      while (1) {
        imb___29.val = (int )a2;
        tmp___383 = jit->ip;
        (jit->ip) ++;
        *tmp___383 = imb___29.b[0];
        tmp___384 = jit->ip;
        (jit->ip) ++;
        *tmp___384 = imb___29.b[1];
        tmp___385 = jit->ip;
        (jit->ip) ++;
        *tmp___385 = imb___29.b[2];
        tmp___386 = jit->ip;
        (jit->ip) ++;
        *tmp___386 = imb___29.b[3];
        break;
      }
    }
    break;
  }
  break;
  case 610: 
  while (1) {
    if ((int )op->arg_size == 2) {
      tmp___387 = jit->ip;
      (jit->ip) ++;
      *tmp___387 = (unsigned char)102;
    }
    while (1) {
      if ((int )op->arg_size == 1) {
        tmp___390 = 0;
      } else {
        tmp___390 = (int )op->arg_size;
      }
      if (tmp___390 > 4) {
        tmp___389 = 8;
      } else {
        tmp___389 = 0;
      }
      if (a2 > 7L) {
        tmp___391 = 1;
      } else {
        tmp___391 = 0;
      }
      _amd64_rex_bits___25 = (unsigned char )(tmp___389 | tmp___391);
      if ((int )_amd64_rex_bits___25 != 0) {
        tmp___392 = jit->ip;
        (jit->ip) ++;
        *tmp___392 = (unsigned char )(64 | (int )_amd64_rex_bits___25);
      } else {
        if ((int )op->arg_size == 1) {
          tmp___393 = 0;
        } else {
          tmp___393 = (int )op->arg_size;
        }
        if (tmp___393 == 1) {
          tmp___392 = jit->ip;
          (jit->ip) ++;
          *tmp___392 = (unsigned char )(64 | (int )_amd64_rex_bits___25);
        }
      }
      break;
    }
    if ((int )op->arg_size == 1) {
      tmp___394 = jit->ip;
      (jit->ip) ++;
      *tmp___394 = (unsigned char)198;
      while (1) {
        if ((a2 & 7L) == 4L) {
          if (a1 == 0L) {
            while (1) {
              tmp___395 = jit->ip;
              (jit->ip) ++;
              *tmp___395 = (unsigned char)4;
              break;
            }
            while (1) {
              tmp___396 = jit->ip;
              (jit->ip) ++;
              *tmp___396 = (unsigned char )((4 << 3) | 4);
              break;
            }
          } else
          if ((int )a1 >= -128) {
            if ((int )a1 <= 127) {
              while (1) {
                tmp___397 = jit->ip;
                (jit->ip) ++;
                *tmp___397 = (unsigned char )((1 << 6) | 4);
                break;
              }
              while (1) {
                tmp___398 = jit->ip;
                (jit->ip) ++;
                *tmp___398 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(a1 & 255L);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___5;
            }
          } else {
            _L___5: /* CIL Label */ 
            while (1) {
              tmp___399 = jit->ip;
              (jit->ip) ++;
              *tmp___399 = (unsigned char )((2 << 6) | 4);
              break;
            }
            while (1) {
              tmp___400 = jit->ip;
              (jit->ip) ++;
              *tmp___400 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              imb___30.val = (int )a1;
              tmp___401 = jit->ip;
              (jit->ip) ++;
              *tmp___401 = imb___30.b[0];
              tmp___402 = jit->ip;
              (jit->ip) ++;
              *tmp___402 = imb___30.b[1];
              tmp___403 = jit->ip;
              (jit->ip) ++;
              *tmp___403 = imb___30.b[2];
              tmp___404 = jit->ip;
              (jit->ip) ++;
              *tmp___404 = imb___30.b[3];
              break;
            }
          }
          break;
        }
        if (a1 == 0L) {
          if ((a2 & 7L) != 5L) {
            while (1) {
              tmp___405 = jit->ip;
              (jit->ip) ++;
              *tmp___405 = (unsigned char )((a2 & 7L) & 7L);
              break;
            }
            break;
          }
        }
        if ((int )a1 >= -128) {
          if ((int )a1 <= 127) {
            while (1) {
              tmp___406 = jit->ip;
              (jit->ip) ++;
              *tmp___406 = (unsigned char )((long )(1 << 6) | ((a2 & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(a1 & 255L);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___6;
          }
        } else {
          _L___6: /* CIL Label */ 
          while (1) {
            tmp___407 = jit->ip;
            (jit->ip) ++;
            *tmp___407 = (unsigned char )((long )(2 << 6) | ((a2 & 7L) & 7L));
            break;
          }
          while (1) {
            imb___31.val = (int )a1;
            tmp___408 = jit->ip;
            (jit->ip) ++;
            *tmp___408 = imb___31.b[0];
            tmp___409 = jit->ip;
            (jit->ip) ++;
            *tmp___409 = imb___31.b[1];
            tmp___410 = jit->ip;
            (jit->ip) ++;
            *tmp___410 = imb___31.b[2];
            tmp___411 = jit->ip;
            (jit->ip) ++;
            *tmp___411 = imb___31.b[3];
            break;
          }
        }
        break;
      }
      while (1) {
        *(jit->ip) = (unsigned char )(a3 & 255L);
        (jit->ip) ++;
        break;
      }
    } else
    if ((int )op->arg_size == 2) {
      tmp___412 = jit->ip;
      (jit->ip) ++;
      *tmp___412 = (unsigned char)199;
      while (1) {
        if ((a2 & 7L) == 4L) {
          if (a1 == 0L) {
            while (1) {
              tmp___413 = jit->ip;
              (jit->ip) ++;
              *tmp___413 = (unsigned char)4;
              break;
            }
            while (1) {
              tmp___414 = jit->ip;
              (jit->ip) ++;
              *tmp___414 = (unsigned char )((4 << 3) | 4);
              break;
            }
          } else
          if ((int )a1 >= -128) {
            if ((int )a1 <= 127) {
              while (1) {
                tmp___415 = jit->ip;
                (jit->ip) ++;
                *tmp___415 = (unsigned char )((1 << 6) | 4);
                break;
              }
              while (1) {
                tmp___416 = jit->ip;
                (jit->ip) ++;
                *tmp___416 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(a1 & 255L);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___7;
            }
          } else {
            _L___7: /* CIL Label */ 
            while (1) {
              tmp___417 = jit->ip;
              (jit->ip) ++;
              *tmp___417 = (unsigned char )((2 << 6) | 4);
              break;
            }
            while (1) {
              tmp___418 = jit->ip;
              (jit->ip) ++;
              *tmp___418 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              imb___32.val = (int )a1;
              tmp___419 = jit->ip;
              (jit->ip) ++;
              *tmp___419 = imb___32.b[0];
              tmp___420 = jit->ip;
              (jit->ip) ++;
              *tmp___420 = imb___32.b[1];
              tmp___421 = jit->ip;
              (jit->ip) ++;
              *tmp___421 = imb___32.b[2];
              tmp___422 = jit->ip;
              (jit->ip) ++;
              *tmp___422 = imb___32.b[3];
              break;
            }
          }
          break;
        }
        if (a1 == 0L) {
          if ((a2 & 7L) != 5L) {
            while (1) {
              tmp___423 = jit->ip;
              (jit->ip) ++;
              *tmp___423 = (unsigned char )((a2 & 7L) & 7L);
              break;
            }
            break;
          }
        }
        if ((int )a1 >= -128) {
          if ((int )a1 <= 127) {
            while (1) {
              tmp___424 = jit->ip;
              (jit->ip) ++;
              *tmp___424 = (unsigned char )((long )(1 << 6) | ((a2 & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(a1 & 255L);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___8;
          }
        } else {
          _L___8: /* CIL Label */ 
          while (1) {
            tmp___425 = jit->ip;
            (jit->ip) ++;
            *tmp___425 = (unsigned char )((long )(2 << 6) | ((a2 & 7L) & 7L));
            break;
          }
          while (1) {
            imb___33.val = (int )a1;
            tmp___426 = jit->ip;
            (jit->ip) ++;
            *tmp___426 = imb___33.b[0];
            tmp___427 = jit->ip;
            (jit->ip) ++;
            *tmp___427 = imb___33.b[1];
            tmp___428 = jit->ip;
            (jit->ip) ++;
            *tmp___428 = imb___33.b[2];
            tmp___429 = jit->ip;
            (jit->ip) ++;
            *tmp___429 = imb___33.b[3];
            break;
          }
        }
        break;
      }
      while (1) {
        *((short *)jit->ip) = (short )a3;
        jit->ip += 2;
        break;
      }
    } else {
      tmp___430 = jit->ip;
      (jit->ip) ++;
      *tmp___430 = (unsigned char)199;
      while (1) {
        if ((a2 & 7L) == 4L) {
          if (a1 == 0L) {
            while (1) {
              tmp___431 = jit->ip;
              (jit->ip) ++;
              *tmp___431 = (unsigned char)4;
              break;
            }
            while (1) {
              tmp___432 = jit->ip;
              (jit->ip) ++;
              *tmp___432 = (unsigned char )((4 << 3) | 4);
              break;
            }
          } else
          if ((int )a1 >= -128) {
            if ((int )a1 <= 127) {
              while (1) {
                tmp___433 = jit->ip;
                (jit->ip) ++;
                *tmp___433 = (unsigned char )((1 << 6) | 4);
                break;
              }
              while (1) {
                tmp___434 = jit->ip;
                (jit->ip) ++;
                *tmp___434 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(a1 & 255L);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___9;
            }
          } else {
            _L___9: /* CIL Label */ 
            while (1) {
              tmp___435 = jit->ip;
              (jit->ip) ++;
              *tmp___435 = (unsigned char )((2 << 6) | 4);
              break;
            }
            while (1) {
              tmp___436 = jit->ip;
              (jit->ip) ++;
              *tmp___436 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              imb___34.val = (int )a1;
              tmp___437 = jit->ip;
              (jit->ip) ++;
              *tmp___437 = imb___34.b[0];
              tmp___438 = jit->ip;
              (jit->ip) ++;
              *tmp___438 = imb___34.b[1];
              tmp___439 = jit->ip;
              (jit->ip) ++;
              *tmp___439 = imb___34.b[2];
              tmp___440 = jit->ip;
              (jit->ip) ++;
              *tmp___440 = imb___34.b[3];
              break;
            }
          }
          break;
        }
        if (a1 == 0L) {
          if ((a2 & 7L) != 5L) {
            while (1) {
              tmp___441 = jit->ip;
              (jit->ip) ++;
              *tmp___441 = (unsigned char )((a2 & 7L) & 7L);
              break;
            }
            break;
          }
        }
        if ((int )a1 >= -128) {
          if ((int )a1 <= 127) {
            while (1) {
              tmp___442 = jit->ip;
              (jit->ip) ++;
              *tmp___442 = (unsigned char )((long )(1 << 6) | ((a2 & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(a1 & 255L);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___10;
          }
        } else {
          _L___10: /* CIL Label */ 
          while (1) {
            tmp___443 = jit->ip;
            (jit->ip) ++;
            *tmp___443 = (unsigned char )((long )(2 << 6) | ((a2 & 7L) & 7L));
            break;
          }
          while (1) {
            imb___35.val = (int )a1;
            tmp___444 = jit->ip;
            (jit->ip) ++;
            *tmp___444 = imb___35.b[0];
            tmp___445 = jit->ip;
            (jit->ip) ++;
            *tmp___445 = imb___35.b[1];
            tmp___446 = jit->ip;
            (jit->ip) ++;
            *tmp___446 = imb___35.b[2];
            tmp___447 = jit->ip;
            (jit->ip) ++;
            *tmp___447 = imb___35.b[3];
            break;
          }
        }
        break;
      }
      while (1) {
        imb___36.val = (int )a3;
        tmp___448 = jit->ip;
        (jit->ip) ++;
        *tmp___448 = imb___36.b[0];
        tmp___449 = jit->ip;
        (jit->ip) ++;
        *tmp___449 = imb___36.b[1];
        tmp___450 = jit->ip;
        (jit->ip) ++;
        *tmp___450 = imb___36.b[2];
        tmp___451 = jit->ip;
        (jit->ip) ++;
        *tmp___451 = imb___36.b[3];
        break;
      }
    }
    break;
  }
  break;
  case 609: 
  while (1) {
    while (1) {
      if ((int )op->arg_size > 4) {
        tmp___452 = 8;
      } else {
        tmp___452 = 0;
      }
      if (a2 > 7L) {
        tmp___453 = 2;
      } else {
        tmp___453 = 0;
      }
      if (a1 > 7L) {
        tmp___454 = 1;
      } else {
        tmp___454 = 0;
      }
      _amd64_rex_bits___26 = (unsigned char )((tmp___452 | tmp___453) | tmp___454);
      if ((int )_amd64_rex_bits___26 != 0) {
        tmp___455 = jit->ip;
        (jit->ip) ++;
        *tmp___455 = (unsigned char )(64 | (int )_amd64_rex_bits___26);
      } else
      if ((int )op->arg_size == 1) {
        tmp___455 = jit->ip;
        (jit->ip) ++;
        *tmp___455 = (unsigned char )(64 | (int )_amd64_rex_bits___26);
      }
      break;
    }
    while (1) {
      if ((int )op->arg_size == 8) {
        tmp___513 = 4;
      } else {
        tmp___513 = (int )op->arg_size;
      }
      if (tmp___513 == 1) {
        tmp___456 = jit->ip;
        (jit->ip) ++;
        *tmp___456 = (unsigned char)198;
        while (1) {
          if ((a1 & 7L) == -1L) {
            while (1) {
              tmp___457 = jit->ip;
              (jit->ip) ++;
              *tmp___457 = (unsigned char)4;
              break;
            }
            while (1) {
              tmp___458 = jit->ip;
              (jit->ip) ++;
              *tmp___458 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb___37.val = 0;
              tmp___459 = jit->ip;
              (jit->ip) ++;
              *tmp___459 = imb___37.b[0];
              tmp___460 = jit->ip;
              (jit->ip) ++;
              *tmp___460 = imb___37.b[1];
              tmp___461 = jit->ip;
              (jit->ip) ++;
              *tmp___461 = imb___37.b[2];
              tmp___462 = jit->ip;
              (jit->ip) ++;
              *tmp___462 = imb___37.b[3];
              break;
            }
          } else
          if ((a1 & 7L) != 5L) {
            while (1) {
              tmp___463 = jit->ip;
              (jit->ip) ++;
              *tmp___463 = (unsigned char)4;
              break;
            }
            while (1) {
              tmp___464 = jit->ip;
              (jit->ip) ++;
              *tmp___464 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
              break;
            }
          } else {
            while (1) {
              tmp___465 = jit->ip;
              (jit->ip) ++;
              *tmp___465 = (unsigned char )((1 << 6) | 4);
              break;
            }
            while (1) {
              tmp___466 = jit->ip;
              (jit->ip) ++;
              *tmp___466 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)0;
              (jit->ip) ++;
              break;
            }
          }
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char )(a3 & 255L);
          (jit->ip) ++;
          break;
        }
      } else {
        if ((int )op->arg_size == 8) {
          tmp___512 = 4;
        } else {
          tmp___512 = (int )op->arg_size;
        }
        if (tmp___512 == 2) {
          tmp___473 = jit->ip;
          (jit->ip) ++;
          *tmp___473 = (unsigned char)102;
          tmp___474 = jit->ip;
          (jit->ip) ++;
          *tmp___474 = (unsigned char)199;
          while (1) {
            if ((a1 & 7L) == -1L) {
              while (1) {
                tmp___475 = jit->ip;
                (jit->ip) ++;
                *tmp___475 = (unsigned char)4;
                break;
              }
              while (1) {
                tmp___476 = jit->ip;
                (jit->ip) ++;
                *tmp___476 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 5L);
                break;
              }
              while (1) {
                imb___39.val = 0;
                tmp___477 = jit->ip;
                (jit->ip) ++;
                *tmp___477 = imb___39.b[0];
                tmp___478 = jit->ip;
                (jit->ip) ++;
                *tmp___478 = imb___39.b[1];
                tmp___479 = jit->ip;
                (jit->ip) ++;
                *tmp___479 = imb___39.b[2];
                tmp___480 = jit->ip;
                (jit->ip) ++;
                *tmp___480 = imb___39.b[3];
                break;
              }
            } else
            if ((a1 & 7L) != 5L) {
              while (1) {
                tmp___481 = jit->ip;
                (jit->ip) ++;
                *tmp___481 = (unsigned char)4;
                break;
              }
              while (1) {
                tmp___482 = jit->ip;
                (jit->ip) ++;
                *tmp___482 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
                break;
              }
            } else {
              while (1) {
                tmp___483 = jit->ip;
                (jit->ip) ++;
                *tmp___483 = (unsigned char )((1 << 6) | 4);
                break;
              }
              while (1) {
                tmp___484 = jit->ip;
                (jit->ip) ++;
                *tmp___484 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
            }
            break;
          }
          while (1) {
            *((short *)jit->ip) = (short )a3;
            jit->ip += 2;
            break;
          }
        } else {
          tmp___491 = jit->ip;
          (jit->ip) ++;
          *tmp___491 = (unsigned char)199;
          while (1) {
            if ((a1 & 7L) == -1L) {
              while (1) {
                tmp___492 = jit->ip;
                (jit->ip) ++;
                *tmp___492 = (unsigned char)4;
                break;
              }
              while (1) {
                tmp___493 = jit->ip;
                (jit->ip) ++;
                *tmp___493 = (unsigned char )((((a2 & 7L) & 7L) << 3) | 5L);
                break;
              }
              while (1) {
                imb___41.val = 0;
                tmp___494 = jit->ip;
                (jit->ip) ++;
                *tmp___494 = imb___41.b[0];
                tmp___495 = jit->ip;
                (jit->ip) ++;
                *tmp___495 = imb___41.b[1];
                tmp___496 = jit->ip;
                (jit->ip) ++;
                *tmp___496 = imb___41.b[2];
                tmp___497 = jit->ip;
                (jit->ip) ++;
                *tmp___497 = imb___41.b[3];
                break;
              }
            } else
            if ((a1 & 7L) != 5L) {
              while (1) {
                tmp___498 = jit->ip;
                (jit->ip) ++;
                *tmp___498 = (unsigned char)4;
                break;
              }
              while (1) {
                tmp___499 = jit->ip;
                (jit->ip) ++;
                *tmp___499 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
                break;
              }
            } else {
              while (1) {
                tmp___500 = jit->ip;
                (jit->ip) ++;
                *tmp___500 = (unsigned char )((1 << 6) | 4);
                break;
              }
              while (1) {
                tmp___501 = jit->ip;
                (jit->ip) ++;
                *tmp___501 = (unsigned char )(((((a2 & 7L) & 7L) & 7L) << 3) | (((a1 & 7L) & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
            }
            break;
          }
          while (1) {
            imb___43.val = (int )a3;
            tmp___508 = jit->ip;
            (jit->ip) ++;
            *tmp___508 = imb___43.b[0];
            tmp___509 = jit->ip;
            (jit->ip) ++;
            *tmp___509 = imb___43.b[1];
            tmp___510 = jit->ip;
            (jit->ip) ++;
            *tmp___510 = imb___43.b[2];
            tmp___511 = jit->ip;
            (jit->ip) ++;
            *tmp___511 = imb___43.b[3];
            break;
          }
        }
      }
      break;
    }
    break;
  }
  break;
  case 369: 
  while (1) {
    while (1) {
      if (a1 > 7L) {
        tmp___514 = 4;
      } else {
        tmp___514 = 0;
      }
      if (a3 > 7L) {
        tmp___515 = 2;
      } else {
        tmp___515 = 0;
      }
      if (a2 > 7L) {
        tmp___516 = 1;
      } else {
        tmp___516 = 0;
      }
      _amd64_rex_bits___27 = (unsigned char )(((8 | tmp___514) | tmp___515) | tmp___516);
      if ((int )_amd64_rex_bits___27 != 0) {
        tmp___517 = jit->ip;
        (jit->ip) ++;
        *tmp___517 = (unsigned char )(64 | (int )_amd64_rex_bits___27);
      }
      break;
    }
    while (1) {
      tmp___518 = jit->ip;
      (jit->ip) ++;
      *tmp___518 = (unsigned char)141;
      while (1) {
        if (a2 == -1L) {
          while (1) {
            tmp___519 = jit->ip;
            (jit->ip) ++;
            *tmp___519 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___520 = jit->ip;
            (jit->ip) ++;
            *tmp___520 = (unsigned char )(((long )(((int )op->arg_size & 3) << 6) | (((a3 & 7L) & 7L) << 3)) | 5L);
            break;
          }
          while (1) {
            imb___44.val = 0;
            tmp___521 = jit->ip;
            (jit->ip) ++;
            *tmp___521 = imb___44.b[0];
            tmp___522 = jit->ip;
            (jit->ip) ++;
            *tmp___522 = imb___44.b[1];
            tmp___523 = jit->ip;
            (jit->ip) ++;
            *tmp___523 = imb___44.b[2];
            tmp___524 = jit->ip;
            (jit->ip) ++;
            *tmp___524 = imb___44.b[3];
            break;
          }
        } else
        if (a2 != 5L) {
          while (1) {
            tmp___525 = jit->ip;
            (jit->ip) ++;
            *tmp___525 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___526 = jit->ip;
            (jit->ip) ++;
            *tmp___526 = (unsigned char )(((long )(((int )op->arg_size & 3) << 6) | ((((a3 & 7L) & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
            break;
          }
        } else {
          while (1) {
            tmp___527 = jit->ip;
            (jit->ip) ++;
            *tmp___527 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            tmp___528 = jit->ip;
            (jit->ip) ++;
            *tmp___528 = (unsigned char )(((long )(((int )op->arg_size & 3) << 6) | ((((a3 & 7L) & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)0;
            (jit->ip) ++;
            break;
          }
        }
        break;
      }
      break;
    }
    break;
  }
  break;
  case 370: 
  while (1) {
    while (1) {
      if (a1 > 7L) {
        tmp___535 = 4;
      } else {
        tmp___535 = 0;
      }
      if (a2 > 7L) {
        tmp___536 = 2;
      } else {
        tmp___536 = 0;
      }
      _amd64_rex_bits___28 = (unsigned char )((8 | tmp___535) | tmp___536);
      if ((int )_amd64_rex_bits___28 != 0) {
        tmp___537 = jit->ip;
        (jit->ip) ++;
        *tmp___537 = (unsigned char )(64 | (int )_amd64_rex_bits___28);
      }
      break;
    }
    while (1) {
      tmp___538 = jit->ip;
      (jit->ip) ++;
      *tmp___538 = (unsigned char)141;
      while (1) {
        if (1) {
          while (1) {
            tmp___539 = jit->ip;
            (jit->ip) ++;
            *tmp___539 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___540 = jit->ip;
            (jit->ip) ++;
            *tmp___540 = (unsigned char )(((long )(((int )op->arg_size & 3) << 6) | (((a2 & 7L) & 7L) << 3)) | 5L);
            break;
          }
          while (1) {
            imb___46.val = (int )a3;
            tmp___541 = jit->ip;
            (jit->ip) ++;
            *tmp___541 = imb___46.b[0];
            tmp___542 = jit->ip;
            (jit->ip) ++;
            *tmp___542 = imb___46.b[1];
            tmp___543 = jit->ip;
            (jit->ip) ++;
            *tmp___543 = imb___46.b[2];
            tmp___544 = jit->ip;
            (jit->ip) ++;
            *tmp___544 = imb___46.b[3];
            break;
          }
        } else
        if (a3 == 0L) {
          while (1) {
            tmp___545 = jit->ip;
            (jit->ip) ++;
            *tmp___545 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___546 = jit->ip;
            (jit->ip) ++;
            *tmp___546 = (unsigned char )(((long )(((int )op->arg_size & 3) << 6) | ((((a2 & 7L) & 7L) & 7L) << 3)) | 7L);
            break;
          }
        } else
        _L___12: /* CIL Label */ 
        if ((int )a3 >= -128) {
          if ((int )a3 <= 127) {
            while (1) {
              tmp___547 = jit->ip;
              (jit->ip) ++;
              *tmp___547 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___548 = jit->ip;
              (jit->ip) ++;
              *tmp___548 = (unsigned char )(((long )(((int )op->arg_size & 3) << 6) | ((((a2 & 7L) & 7L) & 7L) << 3)) | 7L);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(a3 & 255L);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___11;
          }
        } else {
          _L___11: /* CIL Label */ 
          while (1) {
            tmp___549 = jit->ip;
            (jit->ip) ++;
            *tmp___549 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            tmp___550 = jit->ip;
            (jit->ip) ++;
            *tmp___550 = (unsigned char )(((long )(((int )op->arg_size & 3) << 6) | ((((a2 & 7L) & 7L) & 7L) << 3)) | 7L);
            break;
          }
          while (1) {
            imb___47.val = (int )a3;
            tmp___551 = jit->ip;
            (jit->ip) ++;
            *tmp___551 = imb___47.b[0];
            tmp___552 = jit->ip;
            (jit->ip) ++;
            *tmp___552 = imb___47.b[1];
            tmp___553 = jit->ip;
            (jit->ip) ++;
            *tmp___553 = imb___47.b[2];
            tmp___554 = jit->ip;
            (jit->ip) ++;
            *tmp___554 = imb___47.b[3];
            break;
          }
        }
        break;
      }
      break;
    }
    break;
  }
  break;
  case 864: 
  tmp___556 = __builtin_object_size((void *)(& tmp___555), 0);
  __builtin___memcpy_chk((void *)(& tmp___555), (void const   *)(& op->flt_imm), sizeof(jit_value ),
                         tmp___556);
  while (1) {
    while (1) {
      if (a1 > 7L) {
        tmp___557 = 4;
      } else {
        tmp___557 = 0;
      }
      if (a3 > 7L) {
        tmp___558 = 2;
      } else {
        tmp___558 = 0;
      }
      if (a2 > 7L) {
        tmp___559 = 1;
      } else {
        tmp___559 = 0;
      }
      _amd64_rex_bits___29 = (unsigned char )(((8 | tmp___557) | tmp___558) | tmp___559);
      if ((int )_amd64_rex_bits___29 != 0) {
        tmp___560 = jit->ip;
        (jit->ip) ++;
        *tmp___560 = (unsigned char )(64 | (int )_amd64_rex_bits___29);
      }
      break;
    }
    while (1) {
      tmp___561 = jit->ip;
      (jit->ip) ++;
      *tmp___561 = (unsigned char)141;
      while (1) {
        if (a2 == -1L) {
          while (1) {
            tmp___562 = jit->ip;
            (jit->ip) ++;
            *tmp___562 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___563 = jit->ip;
            (jit->ip) ++;
            *tmp___563 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
            break;
          }
          while (1) {
            imb___48.val = (int )tmp___555;
            tmp___564 = jit->ip;
            (jit->ip) ++;
            *tmp___564 = imb___48.b[0];
            tmp___565 = jit->ip;
            (jit->ip) ++;
            *tmp___565 = imb___48.b[1];
            tmp___566 = jit->ip;
            (jit->ip) ++;
            *tmp___566 = imb___48.b[2];
            tmp___567 = jit->ip;
            (jit->ip) ++;
            *tmp___567 = imb___48.b[3];
            break;
          }
        } else
        if (tmp___555 == 0L) {
          if (a2 != 5L) {
            while (1) {
              tmp___568 = jit->ip;
              (jit->ip) ++;
              *tmp___568 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___569 = jit->ip;
              (jit->ip) ++;
              *tmp___569 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
              break;
            }
          } else {
            goto _L___14;
          }
        } else
        _L___14: /* CIL Label */ 
        if ((int )tmp___555 >= -128) {
          if ((int )tmp___555 <= 127) {
            while (1) {
              tmp___570 = jit->ip;
              (jit->ip) ++;
              *tmp___570 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___571 = jit->ip;
              (jit->ip) ++;
              *tmp___571 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(tmp___555 & 255L);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___13;
          }
        } else {
          _L___13: /* CIL Label */ 
          while (1) {
            tmp___572 = jit->ip;
            (jit->ip) ++;
            *tmp___572 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            tmp___573 = jit->ip;
            (jit->ip) ++;
            *tmp___573 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
            break;
          }
          while (1) {
            imb___49.val = (int )tmp___555;
            tmp___574 = jit->ip;
            (jit->ip) ++;
            *tmp___574 = imb___49.b[0];
            tmp___575 = jit->ip;
            (jit->ip) ++;
            *tmp___575 = imb___49.b[1];
            tmp___576 = jit->ip;
            (jit->ip) ++;
            *tmp___576 = imb___49.b[2];
            tmp___577 = jit->ip;
            (jit->ip) ++;
            *tmp___577 = imb___49.b[3];
            break;
          }
        }
        break;
      }
      break;
    }
    break;
  }
  break;
  default: 
  printf((char const   */* __restrict  */)"common86: unknown operation (opcode: 0x%x)\n",
         (unsigned int )((jit_opcode )((int )op->code & 65528)) >> 3);
  }
  return;
}
}
/* END FUNCTION-DEF jit_gen_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF node_insert LOC=UNKNOWN */
static jit_tree *node_insert(jit_tree *h , jit_tree_key key , jit_tree_value value ,
                             int *found ) 
{ 
  jit_tree *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  jit_tree *tmp___2 ;

  {
  if ((unsigned long )h == (unsigned long )((void *)0)) {
    tmp = node_new(key, value);
    return (tmp);
  }
  tmp___0 = is_red(h->left);
  if (tmp___0) {
    tmp___1 = is_red(h->right);
    if (tmp___1) {
      color_flip(h);
    }
  }
  if (h->key == key) {
    h->value = value;
    if (found) {
      *found = 1;
    }
  } else
  if (h->key > key) {
    h->left = node_insert(h->left, key, value, found);
  } else {
    h->right = node_insert(h->right, key, value, found);
  }
  tmp___2 = fixup(h);
  return (tmp___2);
}
}
/* END FUNCTION-DEF node_insert LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF stack_arg_pos LOC=UNKNOWN */
__inline static int stack_arg_pos(struct jit *jit , struct jit_func_info *info , int arg ) 
{ 
  int tmp ;

  {
  if (info->float_arg_cnt < (jit->reg_al)->fp_arg_reg_cnt) {
    tmp = info->float_arg_cnt;
  } else {
    tmp = (jit->reg_al)->fp_arg_reg_cnt;
  }
  return ((int )(- ((unsigned long )info->allocai_mem + (unsigned long )((((info->gp_reg_count + info->fp_reg_count) + tmp) + arg) + 1) * sizeof(void *))));
}
}
/* END FUNCTION-DEF stack_arg_pos LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_add_fop LOC=UNKNOWN */
struct jit_op *jit_add_fop(struct jit *jit , unsigned short code , unsigned char spec ,
                           long arg1 , long arg2 , long arg3 , double flt_imm , unsigned char arg_size ,
                           struct jit_debug_info *debug_info ) 
{ 
  struct jit_op *r ;
  struct jit_op *tmp ;

  {
  tmp = jit_add_op(jit, code, spec, arg1, arg2, arg3, arg_size, debug_info);
  r = tmp;
  r->fp = (unsigned char)1;
  r->flt_imm = flt_imm;
  return (r);
}
}
/* END FUNCTION-DEF jit_add_fop LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_op_prepend LOC=UNKNOWN */
__inline static void jit_op_prepend(jit_op *op , jit_op *prepended ) 
{ 


  {
  prepended->prev = op->prev;
  if ((unsigned long )op->prev != (unsigned long )((void *)0)) {
    (op->prev)->next = prepended;
  }
  prepended->next = op;
  op->prev = prepended;
  return;
}
}
/* END FUNCTION-DEF jit_op_prepend LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_reg_allocator_free LOC=UNKNOWN */
void jit_reg_allocator_free(struct jit_reg_allocator *a ) 
{ 


  {
  if (a->fp_regs) {
    free((void *)a->fp_regs);
  }
  free((void *)a->gp_regs);
  if (a->fp_arg_regs) {
    free((void *)a->fp_arg_regs);
  }
  if (a->gp_arg_regs) {
    free((void *)a->gp_arg_regs);
  }
  free((void *)a);
  return;
}
}
/* END FUNCTION-DEF jit_reg_allocator_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF fib LOC=UNKNOWN */
void fib(int n ) 
{ 
  static struct jit *p20  = (struct jit *)0;
  static void (*__4_fib___foo)(int n ) ;
  int localSize22 ;
  unsigned int KEY_2361574150_1396617483_1581137383_3655160479[4]  = {2361574150U,
                                                                      1396617483U,
                                                                      1581137383U,
                                                                      3655160479U};
  unsigned int __4_fib__block_18_363[10]  = {3765036052, 3020797635, 1564759057U,
                                             1420116987U, 2114876975U, 2650891476,
                                             1613856698U, 2236274176, 1754808729U,
                                             3364339417};
  unsigned int __4_fib__block_4_364[48]  = {3325505908, 3603643650, 2564538657, 4261898869,
                                            1025355090U, 3274047680, 908665609U, 2128167136U,
                                            2908598884, 2620341729, 3731042842, 1699388476U,
                                            2005060277U, 4159861746, 2148698808, 3699839039,
                                            538111537U, 2825219011, 3110182999, 1371213129U,
                                            2968508902, 628485715U, 3473694437, 185977742U,
                                            1140691330U, 4110555030, 910120343U, 4182493470,
                                            3040552892, 779960194U, 540510425U, 1417487032U,
                                            2041727157U, 972846179U, 1158662166U,
                                            423785706U, 2271698800, 3115129754, 3993882223,
                                            871834337U, 306139851U, 564592353U, 2527508717,
                                            67127703U, 1295963305U, 2036702417U, 1876871328U,
                                            2830521199};
  unsigned int __4_fib__block_15_365[32]  = {3325505908, 3603643650, 2564538657, 4261898869,
                                             1025355090U, 3274047680, 908665609U,
                                             2128167136U, 2908598884, 2620341729,
                                             3731042842, 1699388476U, 2005060277U,
                                             4159861746, 2148698808, 3699839039, 538111537U,
                                             2825219011, 1085318984U, 2056928218U,
                                             4236390104, 563326302U, 95234975U, 3857734168,
                                             3043461469, 220244534U, 538111537U, 2825219011,
                                             1858533899U, 2557688309, 3135169058,
                                             2947652662};
  unsigned int __4_fib__block_3_366[64]  = {3325505908, 3603643650, 2564538657, 4261898869,
                                            1025355090U, 3274047680, 384776535U, 1974805533U,
                                            1579574926U, 3033341072, 3731042842, 1699388476U,
                                            901029695U, 2417435702, 2563919313, 892345222U,
                                            1583569807U, 1507672457U, 209049578U,
                                            2284544197, 4009548074, 2810209208, 348748635U,
                                            3406523572, 550456658U, 187410243U, 3962159231,
                                            3652288918, 1994422104U, 1866619833U,
                                            436506216U, 4132097694, 2884708305, 1054132724U,
                                            2855363460, 2050476381U, 1309237151U,
                                            39098123U, 117244628U, 3875755687, 538111537U,
                                            2825219011, 2146455044U, 1469971380U,
                                            3094340884, 727385201U, 2382299580, 3300317895,
                                            985695592U, 896637085U, 3396930477, 3533147053,
                                            853513103U, 4285671494, 2709533060, 3996965837,
                                            1094657744U, 2947793542, 3080595502, 969987178U,
                                            4014115643, 3852101421, 976781304U, 3075176614};
  unsigned int __4_fib__block_16_367[22]  = {3325505908, 3603643650, 2564538657, 4261898869,
                                             1025355090U, 3274047680, 384776535U,
                                             1974805533U, 1579574926U, 3033341072,
                                             3731042842, 1699388476U, 2005060277U,
                                             4159861746, 2148698808, 3699839039, 538111537U,
                                             2825219011, 2227455428, 1748240542U,
                                             1029232890U, 3702029463};
  unsigned int __4_fib__block_21_368[10]  = {3325505908, 3603643650, 2564538657, 4261898869,
                                             1025355090U, 3274047680, 384776535U,
                                             1974805533U, 976781304U, 3075176614};
  unsigned int __4_fib__block_36_369[4]  = {26935898U, 2224996208, 3219575804, 3139118211};
  unsigned int __4_fib__block_26_370[54]  = {3325505908, 3603643650, 2564538657, 4261898869,
                                             1025355090U, 3274047680, 384776535U,
                                             1974805533U, 1579574926U, 3033341072,
                                             3731042842, 1699388476U, 11594033U, 490603444U,
                                             1059235152U, 3963255396, 1583569807U,
                                             1507672457U, 209049578U, 2284544197,
                                             1417104256U, 2358727748, 3669817214,
                                             4199876923, 2779891076, 2808453450, 1023601126U,
                                             584900745U, 3373852800, 1365832342U,
                                             485914143U, 85781116U, 1485596169U, 1344725287U,
                                             2269677905, 828172540U, 2434413126, 435371967U,
                                             1583569807U, 1507672457U, 2099413729U,
                                             1428570601U, 93279069U, 3142541555, 3325505908,
                                             3603643650, 2564538657, 4261898869, 1025355090U,
                                             3274047680, 384776535U, 1974805533U,
                                             976781304U, 3075176614};
  unsigned int __4_fib__block_19_371[10]  = {3325505908, 3603643650, 2564538657, 4261898869,
                                             1025355090U, 3274047680, 384776535U,
                                             1974805533U, 976781304U, 3075176614};
  unsigned int __4_fib__block_27_372[52]  = {3325505908, 3603643650, 2564538657, 4261898869,
                                             1025355090U, 3274047680, 384776535U,
                                             1974805533U, 1579574926U, 3033341072,
                                             3731042842, 1699388476U, 11594033U, 490603444U,
                                             1059235152U, 3963255396, 1583569807U,
                                             1507672457U, 209049578U, 2284544197,
                                             1417104256U, 2358727748, 1602793909U,
                                             1352681751U, 2248860529, 666573053U,
                                             778612261U, 2831887714, 435839633U, 2226575842,
                                             4250605701, 4293962870, 2361214535, 1157370927U,
                                             4031145900, 3545422220, 1068845273U,
                                             3089895887, 3040552892, 779960194U, 3130377313,
                                             2133922395U, 1487242573U, 121803556U,
                                             1773516871U, 4014623909, 1726729673U,
                                             1056965982U, 3302757912, 1748015228U,
                                             3443699091, 897887281U};
  unsigned int __4_fib__block_34_373[4]  = {26935898U, 2224996208, 3219575804, 3139118211};
  unsigned int __4_fib__block_28_374[20]  = {3325505908, 3603643650, 2564538657, 4261898869,
                                             1025355090U, 3274047680, 384776535U,
                                             1974805533U, 1579574926U, 3033341072,
                                             2156541852, 411701083U, 3779285299, 1644767039U,
                                             3106144931, 2377203333, 3721381391, 2524638970,
                                             1486754605U, 4216124022};
  unsigned int __4_fib__block_44_375[4]  = {26935898U, 2224996208, 3219575804, 3139118211};
  unsigned int __4_fib__block_5_376[50]  = {3325505908, 3603643650, 2564538657, 4261898869,
                                            1025355090U, 3274047680, 384776535U, 1974805533U,
                                            1579574926U, 3033341072, 3731042842, 1699388476U,
                                            11594033U, 490603444U, 1059235152U, 3963255396,
                                            1583569807U, 1507672457U, 209049578U,
                                            2284544197, 29628860U, 774331026U, 3274878784,
                                            3181762557, 2601113227, 80724999U, 1158662166U,
                                            423785706U, 2378143818, 1863324650U, 1105893890U,
                                            3981217934, 306139851U, 564592353U, 2527508717,
                                            67127703U, 3195868280, 1790766792U, 537072875U,
                                            1570380202U, 3532747987, 2808233080, 1839588061U,
                                            1709442010U, 57333534U, 43771291U, 3677988561,
                                            3394676071, 839697046U, 2923955622};
  unsigned int __4_fib__block_7_377[40]  = {2349474028, 903614847U, 2629832830, 2860638251,
                                            1677772365U, 3988890658, 3297763975, 3310842266,
                                            841877702U, 1317126341U, 3460212500, 2587866687,
                                            161836371U, 340561578U, 3169717257, 1408283451U,
                                            2797083119, 895961362U, 474082775U, 2863493497,
                                            553414922U, 2995917811, 132588015U, 583783462U,
                                            2398780391, 2429466880, 4087566296, 4007134674,
                                            4195171886, 2798604269, 1079775569U, 2326657178,
                                            1645410629U, 2585142340, 3834273981, 3524788724,
                                            1182237859U, 3735429967, 1929924199U,
                                            3387963935};
  unsigned int __4_fib__block_20_378[16]  = {435839633U, 2226575842, 4250605701, 4293962870,
                                             3625297912, 2875253389, 2612102357, 3030831984,
                                             1068845273U, 3089895887, 3040552892,
                                             779960194U, 3130377313, 2133922395U,
                                             963834124U, 4109046196};
  unsigned int __4_fib__block_25_379[32]  = {3325505908, 3603643650, 2564538657, 4261898869,
                                             1025355090U, 3274047680, 384776535U,
                                             1974805533U, 1579574926U, 3033341072,
                                             3731042842, 1699388476U, 2005060277U,
                                             4159861746, 2148698808, 3699839039, 538111537U,
                                             2825219011, 743901539U, 1978787688U,
                                             1863595338U, 3327725142, 1993288788U,
                                             2079606064U, 3080595502, 969987178U,
                                             2070464246U, 22102500U, 4242159709, 1150363512U,
                                             1710638828U, 1368152052U};
  unsigned int __4_fib__block_52_380[4]  = {26935898U, 2224996208, 3219575804, 3139118211};
  unsigned int __4_fib__block_14_381[10]  = {3325505908, 3603643650, 2564538657, 4261898869,
                                             1025355090U, 3274047680, 384776535U,
                                             1974805533U, 976781304U, 3075176614};
  unsigned int __4_fib__block_23_382[48]  = {3325505908, 3603643650, 2564538657, 4261898869,
                                             1025355090U, 3274047680, 384776535U,
                                             1974805533U, 1579574926U, 3033341072,
                                             3731042842, 1699388476U, 2005060277U,
                                             4159861746, 2148698808, 3699839039, 538111537U,
                                             2825219011, 1147950012U, 972551760U,
                                             3329778930, 3988812513, 927865072U, 3620516227,
                                             2135026270U, 2288999038, 1920270848U,
                                             972178313U, 2527508717, 67127703U, 441751371U,
                                             893484224U, 1815924678U, 1167131659U,
                                             485914143U, 85781116U, 1485596169U, 1344725287U,
                                             1879180228U, 4228908774, 2285717757,
                                             1647194849U, 1583569807U, 1507672457U,
                                             2099413729U, 1428570601U, 93279069U,
                                             3142541555};
  unsigned int __4_fib__block_24_383[60]  = {3325505908, 3603643650, 2564538657, 4261898869,
                                             1025355090U, 3274047680, 384776535U,
                                             1974805533U, 1579574926U, 3033341072,
                                             3731042842, 1699388476U, 901029695U,
                                             2417435702, 2563919313, 892345222U, 1583569807U,
                                             1507672457U, 209049578U, 2284544197,
                                             4009548074, 2810209208, 975403037U, 69934546U,
                                             1593048743U, 1209922469U, 1634944296U,
                                             4080152683, 3080595502, 969987178U, 801266538U,
                                             19558442U, 889146044U, 3743712799, 4105601324,
                                             4259443615, 1759115192U, 3165284229,
                                             1583569807U, 1507672457U, 3597510788,
                                             2593416989, 629438876U, 4290282398, 732814129U,
                                             2508764288, 485914143U, 85781116U, 1485596169U,
                                             1344725287U, 404634641U, 2874847599,
                                             2285717757, 1647194849U, 1583569807U,
                                             1507672457U, 2099413729U, 1428570601U,
                                             93279069U, 3142541555};
  unsigned int __4_fib__block_51_384[4]  = {26935898U, 2224996208, 3219575804, 3139118211};
  unsigned int __4_fib__block_40_385[4]  = {26935898U, 2224996208, 3219575804, 3139118211};
  unsigned int __4_fib__block_38_386[4]  = {26935898U, 2224996208, 3219575804, 3139118211};
  unsigned int __4_fib__block_48_387[4]  = {26935898U, 2224996208, 3219575804, 3139118211};
  unsigned int __4_fib__block_37_388[4]  = {26935898U, 2224996208, 3219575804, 3139118211};
  unsigned int __4_fib__block_41_389[4]  = {26935898U, 2224996208, 3219575804, 3139118211};
  unsigned int __4_fib__block_42_390[4]  = {26935898U, 2224996208, 3219575804, 3139118211};
  unsigned int __4_fib__block_46_391[4]  = {26935898U, 2224996208, 3219575804, 3139118211};
  unsigned int __4_fib__block_35_392[4]  = {26935898U, 2224996208, 3219575804, 3139118211};
  unsigned int __4_fib__block_29_393[54]  = {3325505908, 3603643650, 2564538657, 4261898869,
                                             1025355090U, 3274047680, 384776535U,
                                             1974805533U, 1579574926U, 3033341072,
                                             3731042842, 1699388476U, 11594033U, 490603444U,
                                             1059235152U, 3963255396, 1583569807U,
                                             1507672457U, 209049578U, 2284544197,
                                             2389627373, 1654515211U, 3089542615,
                                             566825125U, 4176516087, 4290140837, 4292928810,
                                             1885606210U, 2872525679, 1312095790U,
                                             4032707872, 2610332255, 2564538657, 4261898869,
                                             1025355090U, 3274047680, 3348831326,
                                             2936552994, 1729487698U, 3247971358,
                                             1479737525U, 1506644841U, 1204568856U,
                                             3046019371, 3884676018, 476643054U, 2269677905,
                                             828172540U, 1206404964U, 2426158460,
                                             909670219U, 1437365899U, 963834124U,
                                             4109046196};
  unsigned int __4_fib__block_43_394[4]  = {26935898U, 2224996208, 3219575804, 3139118211};
  struct jit_label *self395 ;
  struct jit_op *op396 ;
  struct jit_label *label397 ;
  struct jit_op *op398 ;
  struct jit_label *label399 ;
  struct jit_op *op400 ;
  struct jit_op *op401 ;
  struct jit_label *label402 ;
  struct jit_op *op403 ;
  struct jit_op *op404 ;
  struct jit_label *label405 ;
  struct jit_op *op406 ;
  struct jit_label *label407 ;
  struct jit_op *op408 ;
  struct jit_op *op409 ;
  struct jit_label *label410 ;
  struct jit_op *op411 ;
  struct jit_op *op412 ;
  struct jit_label *label413 ;
  struct jit_op *op414 ;
  struct jit_label *label415 ;
  struct jit_op *op416 ;
  struct jit_op *op417 ;
  struct jit_label *label418 ;
  struct jit_label *label419 ;
  struct jit_op *op420 ;
  struct jit_op *op421 ;
  struct jit_label *label422 ;
  struct jit_op *op423 ;
  struct jit_op *op424 ;
  struct jit_op *op425 ;
  struct jit_op *op426 ;
  struct jit_op *op427 ;
  struct jit_op *op428 ;
  struct jit_op *op429 ;
  struct jit_op *op430 ;
  struct jit_op *op431 ;
  struct jit_op *op432 ;
  struct jit_op *op433 ;
  struct jit_op *op434 ;
  struct jit_op *op435 ;
  struct jit_op *op436 ;
  struct jit_op *op437 ;
  struct jit_op *op438 ;
  struct jit_op *op439 ;
  struct jit_op *op440 ;
  struct jit_op *op441 ;
  struct jit_op *op442 ;
  struct jit_op *op443 ;
  struct jit_op *op444 ;
  struct jit_op *op445 ;
  struct jit_op *op446 ;
  struct jit_op *op447 ;
  struct jit_op *op448 ;
  struct jit_op *op449 ;
  struct jit_op *op450 ;
  struct jit_op *op451 ;
  struct jit_op *op452 ;
  struct jit_op *op453 ;
  struct jit_op *op454 ;
  struct jit_op *op455 ;
  struct jit_op *op456 ;
  struct jit_op *op457 ;
  struct jit_op *op458 ;
  struct jit_op *op459 ;
  struct jit_op *op460 ;
  struct jit_op *op461 ;
  struct jit_op *op462 ;
  struct jit_op *op463 ;
  struct jit_op *op464 ;
  struct jit_op *op465 ;
  struct jit_op *op466 ;
  struct jit_op *op467 ;
  struct jit_op *op468 ;
  struct jit_op *op469 ;
  struct jit_op *op470 ;
  struct jit_op *op471 ;
  struct jit_op *op472 ;
  struct jit_op *op473 ;
  struct jit_label *label474 ;
  struct jit_op *op475 ;
  struct jit_op *op476 ;
  struct jit_label *label477 ;
  struct jit_op *op478 ;
  struct jit_label *label479 ;
  struct jit_op *op480 ;
  struct jit_label *label481 ;
  struct jit_op *op482 ;
  struct jit_label *label483 ;
  struct jit_label *label484 ;
  struct jit_op *op485 ;
  struct jit_label *label486 ;
  struct jit_op *op487 ;
  struct jit_label *label488 ;
  struct jit_op *op489 ;
  struct jit_label *label490 ;
  struct jit_op *op491 ;
  struct jit_op *op492 ;
  struct jit_label *label493 ;
  struct jit_op *op494 ;
  struct jit_op *op495 ;
  struct jit_label *label496 ;
  struct jit_op *op497 ;
  struct jit_label *label498 ;
  struct jit_op *op499 ;
  struct jit_op *op500 ;
  struct jit_label *label501 ;
  struct jit_op *op502 ;
  struct jit_label *label503 ;
  struct jit_op *op504 ;
  struct jit_op *op505 ;
  struct jit_label *label506 ;
  struct jit_label *label507 ;
  struct jit_op *op508 ;
  struct jit_op *op509 ;
  struct jit_label *label510 ;
  struct jit_op *op511 ;
  struct jit_label *label512 ;
  struct jit_op *op513 ;
  struct jit_label *label514 ;
  struct jit_op *op515 ;
  struct jit_op *op516 ;
  struct jit_label *label517 ;
  struct jit_op *op518 ;
  struct jit_op *op519 ;
  struct jit_label *label520 ;
  struct jit_label *label521 ;
  struct jit_op *op522 ;
  struct jit_op *op523 ;
  struct jit_label *label524 ;
  struct jit_op *op525 ;
  struct jit_label *label526 ;
  struct jit_op *op527 ;
  struct jit_label *label528 ;
  struct jit_label *label529 ;
  struct jit_op *op530 ;
  struct jit_label *label531 ;
  struct jit_op *op532 ;
  struct jit_op *op533 ;
  struct jit_label *label534 ;
  struct jit_op *op535 ;
  struct jit_label *label536 ;
  struct jit_op *op537 ;
  struct jit_label *label538 ;
  struct jit_op *op539 ;
  struct jit_label *label540 ;
  struct jit_op *op541 ;
  struct jit_op *op542 ;
  struct jit_label *label543 ;
  struct jit_op *op544 ;
  struct jit_op *op545 ;
  struct jit_label *label546 ;
  struct jit_op *op547 ;
  struct jit_label *label548 ;
  struct jit_label *label549 ;
  struct jit_op *op550 ;
  struct jit_op *op551 ;
  struct jit_label *label552 ;
  struct jit_op *op553 ;
  struct jit_label *label554 ;
  struct jit_label *label555 ;
  struct jit_label *label556 ;
  struct jit_op *op557 ;
  struct jit_op *op558 ;
  struct jit_label *label559 ;
  struct jit_label *label560 ;
  struct jit_label *label561 ;
  struct jit_label *label562 ;
  struct jit_label *label563 ;
  struct jit_op *op564 ;
  struct jit_op *op565 ;
  struct jit_label *label566 ;
  struct jit_op *op567 ;
  struct jit_label *label568 ;
  struct jit_op *op569 ;
  struct jit_label *label570 ;
  struct jit_op *op571 ;
  struct jit_label *label572 ;
  struct jit_label *label573 ;
  struct jit_label *label574 ;
  struct jit_label *label575 ;
  struct jit_label *label576 ;
  struct jit_op *op577 ;
  struct jit_label *label578 ;
  struct jit_op *op579 ;
  struct jit_op *op580 ;
  struct jit_label *label581 ;
  struct jit_label *label582 ;
  struct jit_label *label583 ;
  struct jit_op *op584 ;
  struct jit_label *label585 ;
  struct jit_op *op586 ;
  struct jit_label *label587 ;
  struct jit_label *label588 ;
  struct jit_label *label589 ;
  struct jit_op *op590 ;
  struct jit_label *label591 ;
  struct jit_label *label592 ;
  struct jit_op *op593 ;
  struct jit_label *label594 ;
  struct jit_label *label595 ;
  struct jit_label *label596 ;
  struct jit_label *label597 ;
  struct jit_op *op598 ;
  struct jit_op *op599 ;
  struct jit_label *label600 ;
  struct jit_label *label601 ;
  struct jit_label *label602 ;
  struct jit_label *label603 ;
  struct jit_label *label604 ;
  struct jit_label *label605 ;
  struct jit_op *op606 ;
  struct jit_op *op607 ;
  struct jit_label *label608 ;
  struct jit_op *op609 ;
  struct jit_label *label610 ;
  struct jit_label *label611 ;
  struct jit_label *label612 ;
  struct jit_label *label613 ;
  struct jit_label *label614 ;
  struct jit_label *label615 ;
  struct jit_label *label616 ;
  struct jit_label *label617 ;
  struct jit_label *label618 ;
  struct jit_op *op619 ;
  struct jit_label *label620 ;
  struct jit_label *label621 ;
  struct jit_op *op622 ;
  struct jit_label *label623 ;
  struct jit_label *label624 ;
  struct jit_op *op625 ;
  struct jit_label *label626 ;
  struct jit_op *op627 ;
  struct jit_op *op628 ;
  struct jit_label *label629 ;
  struct jit_label *label630 ;
  struct jit_op *op631 ;
  struct jit_label *label632 ;
  struct jit_label *label633 ;
  struct jit_label *label634 ;
  struct jit_label *label635 ;
  struct jit_label *label636 ;
  struct jit_label *label637 ;
  struct jit_label *label638 ;
  struct jit_label *label639 ;
  struct jit_label *label640 ;
  struct jit_label *label641 ;
  struct jit_label *label642 ;
  struct jit_label *label643 ;
  struct jit_label *label644 ;
  struct jit_label *label645 ;
  struct jit_label *label646 ;
  struct jit_label *label647 ;
  struct jit_label *label648 ;
  struct jit_label *label649 ;
  struct jit_label *label650 ;
  int measure_iter651 ;
  unsigned int low652 ;
  unsigned int high653 ;
  unsigned int low654 ;
  unsigned int high655 ;
  struct timeval __cil_tmp656 ;
  int __cil_tmp657 ;
  struct timeval __cil_tmp658 ;
  int __cil_tmp659 ;
  struct timeval res660 ;
  struct timeval t0661 ;
  struct timeval t1662 ;
  struct timeval t0663 ;

  {
  __cil_tmp657 = gettimeofday(& __cil_tmp656, 0);
  __asm__ volatile ("cpuid\n"
                    "rdtsc\n": "=a" (low652), "=d" (high653));
  measure_iter651 = 0;
  while (measure_iter651 < 100) {
    if (__4_fib___freq % 1 == 0) {
      if (p20 != 0) {
        jit_free(p20);
        p20 = 0;
      } else {

      }
      p20 = jit_init();
      jit_enable_optimization(p20, 1L);
      jit_enable_optimization(p20, 2L);
      jit_enable_optimization(p20, 4L);
      jit_enable_optimization(p20, 8L);
      self395 = jit_get_label(p20);
      jit_add_prolog(p20, & __4_fib___foo, 0);
      localSize22 = jit_allocai(p20, 1396L);
      jit_add_op(p20, JIT_DECL_ARG, ((0 << 4) | (2 << 2)) | 2, 0, 4, 0L, 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1336),
                 0L, 0);
      jit_add_op(p20, JIT_GETARG, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), 0L, 4, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1376),
                 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (jit_value )(& printf), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1360),
                 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((6 & 268435455) << 4)),
                 (jit_value )(& __3_fib_$strings), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((6 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((7 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1384),
                 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((8 & 268435455) << 4)),
                 (jit_value )(& __4_fib___t), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((7 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((8 & 268435455) << 4)), 0L, 8, 0);
      op396 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label397 = jit_get_label(p20);
      jit_data_bytes(p20, 40L, (unsigned char *)(__4_fib__block_18_363));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op398 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label399 = jit_get_label(p20);
      op400 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 7L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 160L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op401 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label402 = jit_get_label(p20);
      op403 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 20L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 64L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op404 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label405 = jit_get_label(p20);
      jit_data_bytes(p20, 192L, (unsigned char *)(__4_fib__block_4_364));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op406 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label407 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op398,
                 0L, 0L, 0L, 0);
      op408 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 20L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 64L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op409 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label410 = jit_get_label(p20);
      op411 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 43L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op412 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label413 = jit_get_label(p20);
      jit_data_bytes(p20, 128L, (unsigned char *)(__4_fib__block_15_365));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op414 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label415 = jit_get_label(p20);
      op416 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op417 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label418 = jit_get_label(p20);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label405,
                 0L, 0L, 0L, 0);
      label419 = jit_get_label(p20);
      op420 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 46L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op421 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label422 = jit_get_label(p20);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 752L, 0L, 0);
      op423 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 744L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 1L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 736L, 0L, 0);
      op424 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 728L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 1L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 720L, 0L, 0);
      op425 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 712L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 1L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 704L, 0L, 0);
      op426 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 696L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (jit_value )label418, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 688L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 548L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 680L, 0L, 0);
      op427 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 672L, 0L, 0);
      op428 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 664L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 528L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 656L, 0L, 0);
      op429 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 648L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (jit_value )label418, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 640L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 544L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 632L, 0L, 0);
      op430 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 624L, 0L, 0);
      op431 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 616L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 608L, 0L, 0);
      op432 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 600L, 0L, 0);
      op433 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 592L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 536L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 584L, 0L, 0);
      op434 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 576L, 0L, 0);
      op435 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 568L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 560L, 0L, 0);
      op436 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 552L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 4294967249L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 544L, 0L, 0);
      op437 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 536L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 4294967251L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 528L, 0L, 0);
      op438 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 520L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (jit_value )label418, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 512L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 532L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 504L, 0L, 0);
      op439 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 496L, 0L, 0);
      op440 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 488L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 1L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 480L, 0L, 0);
      op441 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 472L, 0L, 0);
      op442 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 464L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 532L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 456L, 0L, 0);
      op443 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 448L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (jit_value )label418, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 440L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 524L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 432L, 0L, 0);
      op444 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 424L, 0L, 0);
      op445 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 416L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 528L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 408L, 0L, 0);
      op446 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 400L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (jit_value )label418, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 392L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 520L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 384L, 0L, 0);
      op447 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 376L, 0L, 0);
      op448 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 368L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 524L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 360L, 0L, 0);
      op449 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 352L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (jit_value )label418, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 344L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 528L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 336L, 0L, 0);
      op450 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 328L, 0L, 0);
      op451 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 320L, 0L, 0);
      op452 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 312L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 524L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 304L, 0L, 0);
      op453 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 296L, 0L, 0);
      op454 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 288L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 520L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 280L, 0L, 0);
      op455 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 272L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 36L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 264L, 0L, 0);
      op456 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 256L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 1L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 248L, 0L, 0);
      op457 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 240L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 5L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 232L, 0L, 0);
      op458 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 224L, 0L, 0);
      op459 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 216L, 0L, 0);
      op460 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 208L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 532L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 200L, 0L, 0);
      op461 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 192L, 0L, 0);
      op462 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 184L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 176L, 0L, 0);
      op463 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 168L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 1L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 160L, 0L, 0);
      op464 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 152L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (jit_value )label418, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 144L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 532L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 136L, 0L, 0);
      op465 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 128L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 1L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 120L, 0L, 0);
      op466 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 112L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (jit_value )label418, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 104L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 528L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 96L, 0L, 0);
      op467 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 88L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 1L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 80L, 0L, 0);
      op468 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 72L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (jit_value )label418, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 64L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 524L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 56L, 0L, 0);
      op469 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 48L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 1L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 40L, 0L, 0);
      op470 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 32L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (jit_value )label418, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 24L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 520L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 16L, 0L, 0);
      op471 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 8L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      op472 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 760),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 768),
                 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 8L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ADD | 1, ((1 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1320),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 0),
                 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1328),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 768),
                 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ADD | 1, ((1 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1328),
                 0L, 0);
      jit_add_op(p20, JIT_LD | (1 | 4), ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1336),
                 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 8, 0);
      op473 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label474 = jit_get_label(p20);
      op475 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 36L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op476 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label477 = jit_get_label(p20);
      jit_data_bytes(p20, 256L, (unsigned char *)(__4_fib__block_3_366));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op478 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label479 = jit_get_label(p20);
      jit_data_bytes(p20, 88L, (unsigned char *)(__4_fib__block_16_367));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op480 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label481 = jit_get_label(p20);
      jit_data_bytes(p20, 40L, (unsigned char *)(__4_fib__block_21_368));
      op482 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label483 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op475,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p20, 16L, (unsigned char *)(__4_fib__block_36_369));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      label484 = jit_get_label(p20);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label413, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 15L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 128L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op485 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label486 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op436,
                 0L, 0L, 0L, 0);
      op487 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label488 = jit_get_label(p20);
      op489 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label419,
                 0L, 0L, 0L, 0);
      label490 = jit_get_label(p20);
      op491 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 27L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 208L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op492 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label493 = jit_get_label(p20);
      op494 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 25L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 128L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op495 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label496 = jit_get_label(p20);
      jit_data_bytes(p20, 216L, (unsigned char *)(__4_fib__block_26_370));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op497 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label498 = jit_get_label(p20);
      op499 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 38L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op500 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label501 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op458,
                 0L, 0L, 0L, 0);
      op502 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label503 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op417,
                 0L, 0L, 0L, 0);
      op504 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 35L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op505 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label506 = jit_get_label(p20);
      jit_data_bytes(p20, 40L, (unsigned char *)(__4_fib__block_19_371));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label407,
                 0L, 0L, 0L, 0);
      label507 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op476,
                 0L, 0L, 0L, 0);
      op508 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 51L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op509 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label510 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op433,
                 0L, 0L, 0L, 0);
      op511 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label512 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op491,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p20, 208L, (unsigned char *)(__4_fib__block_27_372));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op513 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label514 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op500,
                 0L, 0L, 0L, 0);
      op515 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 29L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 216L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op516 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label517 = jit_get_label(p20);
      op518 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 24L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 240L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op519 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label520 = jit_get_label(p20);
      jit_data_bytes(p20, 16L, (unsigned char *)(__4_fib__block_34_373));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      label521 = jit_get_label(p20);
      op522 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 14L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op523 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label524 = jit_get_label(p20);
      jit_data_bytes(p20, 80L, (unsigned char *)(__4_fib__block_28_374));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op525 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label526 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op423,
                 0L, 0L, 0L, 0);
      op527 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label528 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op478,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p20, 16L, (unsigned char *)(__4_fib__block_44_375));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label529 = jit_get_label(p20);
      jit_data_bytes(p20, 200L, (unsigned char *)(__4_fib__block_5_376));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op530 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label531 = jit_get_label(p20);
      op532 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 42L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op533 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label534 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op404,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label506, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 19L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op535 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label536 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op451,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op440,
                 0L, 0L, 0L, 0);
      op537 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label538 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op527,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label481, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 21L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op539 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label540 = jit_get_label(p20);
      op541 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 42L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op542 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label543 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op533,
                 0L, 0L, 0L, 0);
      op544 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 23L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 192L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op545 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label546 = jit_get_label(p20);
      op547 = jit_add_op(p20, JIT_DATA_REF_CODE | 2, ((0 << 4) | (0 << 2)) | 2, 0,
                         0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label548 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op400,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p20, 160L, (unsigned char *)(__4_fib__block_7_377));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label399,
                 0L, 0L, 0L, 0);
      label549 = jit_get_label(p20);
      op550 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 29L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 216L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op551 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label552 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op539,
                 0L, 0L, 0L, 0);
      op553 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 35L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label481,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label554 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op409,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op408,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op403,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p20, 64L, (unsigned char *)(__4_fib__block_20_378));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label402,
                 0L, 0L, 0L, 0);
      label555 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op492,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label496, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 26L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 216L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label540,
                 0L, 0L, 0L, 0);
      label556 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op551,
                 0L, 0L, 0L, 0);
      op557 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 37L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op558 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label559 = jit_get_label(p20);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label496, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 26L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 216L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label493,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label560 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op494,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p20, 128L, (unsigned char *)(__4_fib__block_25_379));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label520,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label561 = jit_get_label(p20);
      jit_data_bytes(p20, 16L, (unsigned char *)(__4_fib__block_52_380));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      label562 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op459,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label477,
                 0L, 0L, 0L, 0);
      label563 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op545,
                 0L, 0L, 0L, 0);
      op564 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 38L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op565 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label566 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op522,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op401,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p20, 40L, (unsigned char *)(__4_fib__block_14_381));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op567 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label568 = jit_get_label(p20);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label477, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 3L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 256L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op569 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label570 = jit_get_label(p20);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label529, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 5L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 200L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op571 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label572 = jit_get_label(p20);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label524, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 28L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 80L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label484,
                 0L, 0L, 0L, 0);
      label573 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op505,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label520, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 34L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label498,
                 0L, 0L, 0L, 0);
      label574 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op426,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label521,
                 0L, 0L, 0L, 0);
      label575 = jit_get_label(p20);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label548, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 7L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 160L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label548,
                 0L, 0L, 0L, 0);
      label576 = jit_get_label(p20);
      jit_add_op(p20, JIT_BGT | (2 | 0), ((2 << 4) | (1 << 2)) | 2, (jit_value )label566,
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 1L, 0L, 0);
      op577 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label578 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op516,
                 0L, 0L, 0L, 0);
      op579 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 43L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op580 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label581 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op535,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label479, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 88L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label561,
                 0L, 0L, 0L, 0);
      label582 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op480,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((9 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1392),
                 0L, 0);
      jit_add_op(p20, JIT_LD | (1 | 0), ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((10 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((9 & 268435455) << 4)), 0L, 4, 0);
      jit_add_op(p20, JIT_BNE | 2, ((2 << 4) | (1 << 2)) | 2, (jit_value )label397,
                 (0 & 1) | (((0 & 3) << 1) | ((10 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label506,
                 0L, 0L, 0L, 0);
      label583 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op558,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label483, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 36L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op584 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label585 = jit_get_label(p20);
      op586 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 51L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label570,
                 0L, 0L, 0L, 0);
      label587 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op569,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label529, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 5L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 200L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label422,
                 0L, 0L, 0L, 0);
      label588 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op567,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label566, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 14L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label483,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label589 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op544,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op511,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p20, 192L, (unsigned char *)(__4_fib__block_23_382));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      op590 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label591 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op547,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label575,
                 0L, 0L, 0L, 0);
      label592 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op482,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label524, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 28L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 80L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op593 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label594 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op518,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p20, 240L, (unsigned char *)(__4_fib__block_24_383));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label517,
                 0L, 0L, 0L, 0);
      label595 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op495,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label481, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 21L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label410,
                 0L, 0L, 0L, 0);
      label596 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op396,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label397, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 18L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label474,
                 0L, 0L, 0L, 0);
      label597 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op565,
                 0L, 0L, 0L, 0);
      op598 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 41L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op599 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label600 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op462,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op460,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op454,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op452,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op448,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op445,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op442,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op431,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op428,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label413,
                 0L, 0L, 0L, 0);
      label601 = jit_get_label(p20);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label528, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 44L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label531,
                 0L, 0L, 0L, 0);
      label602 = jit_get_label(p20);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1320),
                 0L, 0);
      jit_add_op(p20, JIT_LD | (1 | 4), ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_LD | (1 | 0), ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), 0L, 4, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_BLT | (2 | 0), ((2 << 4) | (1 << 2)) | 2, (jit_value )label566,
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 1L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label576,
                 0L, 0L, 0L, 0);
      label603 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op577,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_DATA, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)),
                 (jit_value )label546, 0L, 0L, 0);
      jit_add_op(p20, JIT_SUB | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 1L, 0L, 0);
      jit_add_op(p20, JIT_MUL | (2 | 0), ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 8L, 0L, 0);
      jit_add_op(p20, JIT_LDX | (1 | 4), ((1 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((6 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)), (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 8, 0);
      jit_add_op(p20, JIT_JMP | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((6 & 268435455) << 4)),
                 0, 0L, 0L, 0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label604 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op586,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op508,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p20, 16L, (unsigned char *)(__4_fib__block_51_384));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      label605 = jit_get_label(p20);
      op606 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 37L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op607 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label608 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op421,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label520, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 34L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      op609 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label610 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op489,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op473,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op416,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p20, 16L, (unsigned char *)(__4_fib__block_40_385));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      label611 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op599,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label413, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 15L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 128L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label559,
                 0L, 0L, 0L, 0);
      label612 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op593,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label397, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 18L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label549,
                 0L, 0L, 0L, 0);
      label613 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op464,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op457,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op456,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op438,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op437,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op425,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op424,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label524,
                 0L, 0L, 0L, 0);
      label614 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op523,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1320),
                 0L, 0);
      jit_add_op(p20, JIT_ADD | 2, ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)),
                 (0 & 1) | (((2 & 3) << 1) | ((0 & 268435455) << 4)), (jit_value )(localSize22 + 1320),
                 0L, 0);
      jit_add_op(p20, JIT_LD | (1 | 4), ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((2 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)),
                 1L, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 1, ((0 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((4 & 268435455) << 4)), 0L, 0L, 0);
      jit_add_op(p20, JIT_MUL | (2 | 4), ((2 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((6 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((5 & 268435455) << 4)), 8L, 0L, 0);
      jit_add_op(p20, JIT_ADD | 1, ((1 << 4) | (1 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((7 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((3 & 268435455) << 4)), (0 & 1) | (((0 & 3) << 1) | ((6 & 268435455) << 4)),
                 0L, 0);
      jit_add_op(p20, JIT_ST | 1, ((0 << 4) | (1 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((1 & 268435455) << 4)),
                 (0 & 1) | (((0 & 3) << 1) | ((7 & 268435455) << 4)), 0L, 8, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label602,
                 0L, 0L, 0L, 0);
      label615 = jit_get_label(p20);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label405, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 192L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label488,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label616 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op564,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op513,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op499,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p20, 16L, (unsigned char *)(__4_fib__block_38_386));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      label617 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op472,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op470,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op468,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op466,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op441,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label529,
                 0L, 0L, 0L, 0);
      label618 = jit_get_label(p20);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label561, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 52L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op619 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label620 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op471,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op469,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op467,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op465,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op461,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op455,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op453,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op450,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op449,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op447,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op446,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op444,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op443,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op439,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op434,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op430,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op429,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op427,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label512,
                 0L, 0L, 0L, 0);
      label621 = jit_get_label(p20);
      op622 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 48L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label585,
                 0L, 0L, 0L, 0);
      label623 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op584,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label477, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 3L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 256L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label601,
                 0L, 0L, 0L, 0);
      label624 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op619,
                 0L, 0L, 0L, 0);
      op625 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 41L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label568,
                 0L, 0L, 0L, 0);
      label626 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op607,
                 0L, 0L, 0L, 0);
      op627 = jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                         0, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 46L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op628 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label629 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op622,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op497,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p20, 16L, (unsigned char *)(__4_fib__block_48_387));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      label630 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op502,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label506, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 19L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 40L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      op631 = jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, 0, 0L, 0L, 0L,
                         0);
      label632 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op435,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label560,
                 0L, 0L, 0L, 0);
      label633 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op542,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label629, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 48L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label605,
                 0L, 0L, 0L, 0);
      label634 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op580,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label589, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 23L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 192L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label572,
                 0L, 0L, 0L, 0);
      label635 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op485,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label528, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 44L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label490,
                 0L, 0L, 0L, 0);
      label636 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op509,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label560, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 25L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 128L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label415,
                 0L, 0L, 0L, 0);
      label637 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op571,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label561, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 52L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label615,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label638 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op606,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op557,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op414,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p20, 16L, (unsigned char *)(__4_fib__block_37_388));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label639 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op625,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op598,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op525,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p20, 16L, (unsigned char *)(__4_fib__block_41_389));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      label640 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op631,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label479, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 16L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 88L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label479,
                 0L, 0L, 0L, 0);
      label641 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op628,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label405, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 192L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label618,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label642 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op590,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op541,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op532,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p20, 16L, (unsigned char *)(__4_fib__block_42_390));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label643 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op627,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op519,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op420,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p20, 16L, (unsigned char *)(__4_fib__block_46_391));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      label644 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op463,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op432,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label496,
                 0L, 0L, 0L, 0);
      label645 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op537,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label594, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 24L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 240L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_decipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label594,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label646 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op553,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op504,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op406,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p20, 16L, (unsigned char *)(__4_fib__block_35_392));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label647 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op550,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op515,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op487,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p20, 216L, (unsigned char *)(__4_fib__block_29_393));
      jit_add_op(p20, JIT_TOUCH, ((0 << 4) | (0 << 2)) | 3, 4L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label604,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_CODE_ALIGN | 2, ((0 << 4) | (0 << 2)) | 2, 8L, 0L, 0L, 0L,
                 0);
      label648 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op579,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op530,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op411,
                 0L, 0L, 0L, 0);
      jit_data_bytes(p20, 16L, (unsigned char *)(__4_fib__block_43_394));
      label649 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op412,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_REF_CODE, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 (jit_value )label512, 0L, 0L, 0);
      jit_add_op(p20, JIT_MOV | 2, ((0 << 4) | (2 << 2)) | 3, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 (jit_value )(KEY_2361574150_1396617483_1581137383_3655160479), 0L,
                 0L, 0);
      jit_add_op(p20, JIT_PREPARE, ((0 << 4) | (2 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 27L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 32L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((22 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 1, ((0 << 4) | (0 << 2)) | 1, (0 & 1) | (((0 & 3) << 1) | ((23 & 268435455) << 4)),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_PUTARG | 2, ((0 << 4) | (0 << 2)) | 2, 208L, 0L, 0L, 0L,
                 0);
      jit_add_op(p20, JIT_CALL | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )(& _cipher$_xtea_encipher),
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_JMP | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )label621,
                 0L, 0L, 0L, 0);
      label650 = jit_get_label(p20);
      jit_add_op(p20, JIT_PATCH | 2, ((0 << 4) | (0 << 2)) | 2, (jit_value )op609,
                 0L, 0L, 0L, 0);
      jit_add_op(p20, JIT_RET | 2, ((0 << 4) | (0 << 2)) | 2, 0L, 0L, 0L, 0L, 0);
      jit_generate_code(p20);
      __4_fib___freq ++;
    } else {

    }
    (*__4_fib___foo)(n);


    measure_iter651 ++;
  }
  __asm__ volatile ("cpuid\n"
                    "rdtsc\n": "=a" (low654), "=d" (high655));
  printf("MEASURE,fib,timingCounter,%f\n", (double )((((unsigned long )high655 << 32) | (unsigned long )low654) - (((unsigned long )high653 << 32) | (unsigned long )low652)));
  __cil_tmp659 = gettimeofday(& __cil_tmp658, 0);
  t0661 = __cil_tmp658;
  t1662 = __cil_tmp656;
  res660.tv_sec = t0661.tv_sec - t1662.tv_sec;
  res660.tv_usec = t0661.tv_usec - t1662.tv_usec;
  if (res660.tv_usec < 0) {
    (res660.tv_sec) --;
    res660.tv_usec += 1000000;
  } else {

  }
  t0663 = res660;
  printf("MEASURE,fib,timingGetTimeOfDay,%f\n", (double )t0663.tv_sec + (double )t0663.tv_usec / 1000000.);
  return;
}
}
/* END FUNCTION-DEF fib LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_ldx_op LOC=UNKNOWN */
static void emit_ldx_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ,
                        jit_value a3 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  long tmp___6 ;
  unsigned char *tmp___7 ;
  x86_imm_buf imb ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  int tmp___32 ;
  unsigned char *tmp___33 ;
  int tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  long tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___55 ;
  int tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___76 ;
  int tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  long tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___101 ;
  int tmp___102 ;
  int tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  long tmp___107 ;
  unsigned char *tmp___108 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;
  unsigned char *tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  unsigned char *tmp___116 ;
  unsigned char *tmp___117 ;
  unsigned char *tmp___118 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___119 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  unsigned char *tmp___122 ;
  unsigned char *tmp___123 ;
  unsigned char *tmp___124 ;
  unsigned char *tmp___125 ;
  x86_imm_buf imb___10 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char *tmp___128 ;
  unsigned char *tmp___129 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___130 ;
  int tmp___131 ;
  unsigned char *tmp___132 ;
  unsigned char *tmp___133 ;
  unsigned char *tmp___134 ;
  unsigned char *tmp___135 ;
  long tmp___136 ;
  unsigned char *tmp___137 ;
  unsigned char *tmp___138 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  unsigned char *tmp___141 ;
  unsigned char *tmp___142 ;
  x86_imm_buf imb___11 ;
  unsigned char *tmp___143 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  unsigned char *tmp___146 ;
  unsigned char *tmp___147 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;
  x86_imm_buf imb___12 ;
  unsigned char *tmp___150 ;
  unsigned char *tmp___151 ;
  unsigned char *tmp___152 ;
  unsigned char *tmp___153 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___154 ;
  int tmp___155 ;
  int tmp___156 ;
  unsigned char *tmp___157 ;
  unsigned char *tmp___158 ;
  unsigned char *tmp___159 ;
  unsigned char *tmp___160 ;
  x86_imm_buf imb___13 ;
  unsigned char *tmp___161 ;
  unsigned char *tmp___162 ;
  unsigned char *tmp___163 ;
  unsigned char *tmp___164 ;
  unsigned char *tmp___165 ;
  unsigned char *tmp___166 ;
  unsigned char *tmp___167 ;
  unsigned char *tmp___168 ;
  unsigned char *tmp___169 ;
  unsigned char *tmp___170 ;
  x86_imm_buf imb___14 ;
  unsigned char *tmp___171 ;
  unsigned char *tmp___172 ;
  unsigned char *tmp___173 ;
  unsigned char *tmp___174 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___175 ;
  int tmp___176 ;
  int tmp___177 ;
  unsigned char *tmp___178 ;
  unsigned char *tmp___179 ;
  unsigned char *tmp___180 ;
  unsigned char *tmp___181 ;
  long tmp___182 ;
  unsigned char *tmp___183 ;
  unsigned char *tmp___184 ;
  x86_imm_buf imb___15 ;
  unsigned char *tmp___185 ;
  unsigned char *tmp___186 ;
  unsigned char *tmp___187 ;
  unsigned char *tmp___188 ;
  unsigned char *tmp___189 ;
  unsigned char *tmp___190 ;
  unsigned char *tmp___191 ;
  unsigned char *tmp___192 ;
  unsigned char *tmp___193 ;
  unsigned char *tmp___194 ;
  x86_imm_buf imb___16 ;
  unsigned char *tmp___195 ;
  unsigned char *tmp___196 ;
  unsigned char *tmp___197 ;
  unsigned char *tmp___198 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___199 ;
  int tmp___200 ;
  int tmp___201 ;
  int tmp___202 ;
  unsigned char *tmp___203 ;
  int tmp___204 ;
  unsigned char *tmp___205 ;
  unsigned char *tmp___206 ;
  unsigned char *tmp___207 ;
  long tmp___208 ;
  unsigned char *tmp___209 ;
  unsigned char *tmp___210 ;
  x86_imm_buf imb___17 ;
  unsigned char *tmp___211 ;
  unsigned char *tmp___212 ;
  unsigned char *tmp___213 ;
  unsigned char *tmp___214 ;
  unsigned char *tmp___215 ;
  unsigned char *tmp___216 ;
  unsigned char *tmp___217 ;
  unsigned char *tmp___218 ;
  unsigned char *tmp___219 ;
  unsigned char *tmp___220 ;
  x86_imm_buf imb___18 ;
  unsigned char *tmp___221 ;
  unsigned char *tmp___222 ;
  unsigned char *tmp___223 ;
  unsigned char *tmp___224 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___225 ;
  int tmp___226 ;
  int tmp___227 ;
  unsigned char *tmp___228 ;
  unsigned char *tmp___229 ;
  unsigned char *tmp___230 ;
  unsigned char *tmp___231 ;
  long tmp___232 ;
  unsigned char *tmp___233 ;
  unsigned char *tmp___234 ;
  x86_imm_buf imb___19 ;
  unsigned char *tmp___235 ;
  unsigned char *tmp___236 ;
  unsigned char *tmp___237 ;
  unsigned char *tmp___238 ;
  unsigned char *tmp___239 ;
  unsigned char *tmp___240 ;
  unsigned char *tmp___241 ;
  unsigned char *tmp___242 ;
  unsigned char *tmp___243 ;
  unsigned char *tmp___244 ;
  x86_imm_buf imb___20 ;
  unsigned char *tmp___245 ;
  unsigned char *tmp___246 ;
  unsigned char *tmp___247 ;
  unsigned char *tmp___248 ;
  long tmp___249 ;

  {
  if ((unsigned long )op->arg_size == sizeof(void *)) {
    if ((int )op->code & 2) {
      while (1) {
        if ((int )op->arg_size == 2) {
          tmp = jit->ip;
          (jit->ip) ++;
          *tmp = (unsigned char)102;
        }
        while (1) {
          if ((int )op->arg_size > 4) {
            tmp___0 = 8;
          } else {
            tmp___0 = 0;
          }
          if (a1 > 7L) {
            tmp___1 = 4;
          } else {
            tmp___1 = 0;
          }
          if (a2 > 7L) {
            tmp___2 = 1;
          } else {
            tmp___2 = 0;
          }
          _amd64_rex_bits = (unsigned char )((tmp___0 | tmp___1) | tmp___2);
          if ((int )_amd64_rex_bits != 0) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
          } else
          if ((int )op->arg_size == 1) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        switch ((int )op->arg_size) {
        case 1: 
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char)138;
        break;
        case 8: 
        case 4: 
        case 2: 
        tmp___5 = jit->ip;
        (jit->ip) ++;
        *tmp___5 = (unsigned char)139;
        break;
        default: 
        tmp___6 = __builtin_expect(1L, 0L);
        if (tmp___6) {
          __assert_rtn("emit_ldx_op", "./jitter-amd64.c", 3049, "0");
        }
        }
        while (1) {
          if (a2 == 16L) {
            while (1) {
              tmp___7 = jit->ip;
              (jit->ip) ++;
              *tmp___7 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb.val = (int )a3;
              tmp___8 = jit->ip;
              (jit->ip) ++;
              *tmp___8 = imb.b[0];
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = imb.b[1];
              tmp___10 = jit->ip;
              (jit->ip) ++;
              *tmp___10 = imb.b[2];
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = imb.b[3];
              break;
            }
          } else {
            while (1) {
              if ((a2 & 7L) == 4L) {
                if (a3 == 0L) {
                  while (1) {
                    tmp___12 = jit->ip;
                    (jit->ip) ++;
                    *tmp___12 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___13 = jit->ip;
                    (jit->ip) ++;
                    *tmp___13 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                } else
                if ((int )a3 >= -128) {
                  if ((int )a3 <= 127) {
                    while (1) {
                      tmp___14 = jit->ip;
                      (jit->ip) ++;
                      *tmp___14 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                      break;
                    }
                    while (1) {
                      tmp___15 = jit->ip;
                      (jit->ip) ++;
                      *tmp___15 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(a3 & 255L);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L;
                  }
                } else {
                  _L: /* CIL Label */ 
                  while (1) {
                    tmp___16 = jit->ip;
                    (jit->ip) ++;
                    *tmp___16 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___17 = jit->ip;
                    (jit->ip) ++;
                    *tmp___17 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    imb___0.val = (int )a3;
                    tmp___18 = jit->ip;
                    (jit->ip) ++;
                    *tmp___18 = imb___0.b[0];
                    tmp___19 = jit->ip;
                    (jit->ip) ++;
                    *tmp___19 = imb___0.b[1];
                    tmp___20 = jit->ip;
                    (jit->ip) ++;
                    *tmp___20 = imb___0.b[2];
                    tmp___21 = jit->ip;
                    (jit->ip) ++;
                    *tmp___21 = imb___0.b[3];
                    break;
                  }
                }
                break;
              }
              if (a3 == 0L) {
                if ((a2 & 7L) != 5L) {
                  while (1) {
                    tmp___22 = jit->ip;
                    (jit->ip) ++;
                    *tmp___22 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                    break;
                  }
                  break;
                }
              }
              if ((int )a3 >= -128) {
                if ((int )a3 <= 127) {
                  while (1) {
                    tmp___23 = jit->ip;
                    (jit->ip) ++;
                    *tmp___23 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(a3 & 255L);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___0;
                }
              } else {
                _L___0: /* CIL Label */ 
                while (1) {
                  tmp___24 = jit->ip;
                  (jit->ip) ++;
                  *tmp___24 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                  break;
                }
                while (1) {
                  imb___1.val = (int )a3;
                  tmp___25 = jit->ip;
                  (jit->ip) ++;
                  *tmp___25 = imb___1.b[0];
                  tmp___26 = jit->ip;
                  (jit->ip) ++;
                  *tmp___26 = imb___1.b[1];
                  tmp___27 = jit->ip;
                  (jit->ip) ++;
                  *tmp___27 = imb___1.b[2];
                  tmp___28 = jit->ip;
                  (jit->ip) ++;
                  *tmp___28 = imb___1.b[3];
                  break;
                }
              }
              break;
            }
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          if ((int )op->arg_size > 4) {
            tmp___29 = 8;
          } else {
            tmp___29 = 0;
          }
          if (a1 > 7L) {
            tmp___30 = 4;
          } else {
            tmp___30 = 0;
          }
          if (a3 > 7L) {
            tmp___31 = 2;
          } else {
            tmp___31 = 0;
          }
          if (a2 > 7L) {
            tmp___32 = 1;
          } else {
            tmp___32 = 0;
          }
          _amd64_rex_bits___0 = (unsigned char )(((tmp___29 | tmp___30) | tmp___31) | tmp___32);
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___33 = jit->ip;
            (jit->ip) ++;
            *tmp___33 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          } else
          if ((int )op->arg_size == 1) {
            tmp___33 = jit->ip;
            (jit->ip) ++;
            *tmp___33 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        while (1) {
          if ((int )op->arg_size == 8) {
            tmp___34 = 4;
          } else {
            tmp___34 = (int )op->arg_size;
          }
          switch (tmp___34) {
          case 1: 
          tmp___35 = jit->ip;
          (jit->ip) ++;
          *tmp___35 = (unsigned char)138;
          break;
          case 2: 
          tmp___36 = jit->ip;
          (jit->ip) ++;
          *tmp___36 = (unsigned char)102;
          case 4: 
          tmp___37 = jit->ip;
          (jit->ip) ++;
          *tmp___37 = (unsigned char)139;
          break;
          default: 
          tmp___38 = __builtin_expect(1L, 0L);
          if (tmp___38) {
            __assert_rtn("emit_ldx_op", "./jitter-amd64.c", 3050, "0");
          }
          }
          while (1) {
            if ((a2 & 7L) == -1L) {
              while (1) {
                tmp___39 = jit->ip;
                (jit->ip) ++;
                *tmp___39 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___40 = jit->ip;
                (jit->ip) ++;
                *tmp___40 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
                break;
              }
              while (1) {
                imb___2.val = 0;
                tmp___41 = jit->ip;
                (jit->ip) ++;
                *tmp___41 = imb___2.b[0];
                tmp___42 = jit->ip;
                (jit->ip) ++;
                *tmp___42 = imb___2.b[1];
                tmp___43 = jit->ip;
                (jit->ip) ++;
                *tmp___43 = imb___2.b[2];
                tmp___44 = jit->ip;
                (jit->ip) ++;
                *tmp___44 = imb___2.b[3];
                break;
              }
            } else
            if ((a2 & 7L) != 5L) {
              while (1) {
                tmp___45 = jit->ip;
                (jit->ip) ++;
                *tmp___45 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___46 = jit->ip;
                (jit->ip) ++;
                *tmp___46 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
                break;
              }
            } else {
              while (1) {
                tmp___47 = jit->ip;
                (jit->ip) ++;
                *tmp___47 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                break;
              }
              while (1) {
                tmp___48 = jit->ip;
                (jit->ip) ++;
                *tmp___48 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
            }
            break;
          }
          break;
        }
        break;
      }
    }
    return;
  }
  switch ((int )op->code) {
  case 114: 
  while (1) {
    if ((int )op->arg_size == 4) {
      while (1) {
        while (1) {
          if (a1 > 7L) {
            tmp___55 = 4;
          } else {
            tmp___55 = 0;
          }
          if (a2 > 7L) {
            tmp___56 = 1;
          } else {
            tmp___56 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )((8 | tmp___55) | tmp___56);
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___57 = jit->ip;
            (jit->ip) ++;
            *tmp___57 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___58 = jit->ip;
        (jit->ip) ++;
        *tmp___58 = (unsigned char)99;
        while (1) {
          if ((a2 & 7L) == 4L) {
            if (a3 == 0L) {
              while (1) {
                tmp___59 = jit->ip;
                (jit->ip) ++;
                *tmp___59 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___60 = jit->ip;
                (jit->ip) ++;
                *tmp___60 = (unsigned char )((4 << 3) | 4);
                break;
              }
            } else
            if ((int )a3 >= -128) {
              if ((int )a3 <= 127) {
                while (1) {
                  tmp___61 = jit->ip;
                  (jit->ip) ++;
                  *tmp___61 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                  break;
                }
                while (1) {
                  tmp___62 = jit->ip;
                  (jit->ip) ++;
                  *tmp___62 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(a3 & 255L);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___1;
              }
            } else {
              _L___1: /* CIL Label */ 
              while (1) {
                tmp___63 = jit->ip;
                (jit->ip) ++;
                *tmp___63 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                break;
              }
              while (1) {
                tmp___64 = jit->ip;
                (jit->ip) ++;
                *tmp___64 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                imb___4.val = (int )a3;
                tmp___65 = jit->ip;
                (jit->ip) ++;
                *tmp___65 = imb___4.b[0];
                tmp___66 = jit->ip;
                (jit->ip) ++;
                *tmp___66 = imb___4.b[1];
                tmp___67 = jit->ip;
                (jit->ip) ++;
                *tmp___67 = imb___4.b[2];
                tmp___68 = jit->ip;
                (jit->ip) ++;
                *tmp___68 = imb___4.b[3];
                break;
              }
            }
            break;
          }
          if (a3 == 0L) {
            if ((a2 & 7L) != 5L) {
              while (1) {
                tmp___69 = jit->ip;
                (jit->ip) ++;
                *tmp___69 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                break;
              }
              break;
            }
          }
          if ((int )a3 >= -128) {
            if ((int )a3 <= 127) {
              while (1) {
                tmp___70 = jit->ip;
                (jit->ip) ++;
                *tmp___70 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(a3 & 255L);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___2;
            }
          } else {
            _L___2: /* CIL Label */ 
            while (1) {
              tmp___71 = jit->ip;
              (jit->ip) ++;
              *tmp___71 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
              break;
            }
            while (1) {
              imb___5.val = (int )a3;
              tmp___72 = jit->ip;
              (jit->ip) ++;
              *tmp___72 = imb___5.b[0];
              tmp___73 = jit->ip;
              (jit->ip) ++;
              *tmp___73 = imb___5.b[1];
              tmp___74 = jit->ip;
              (jit->ip) ++;
              *tmp___74 = imb___5.b[2];
              tmp___75 = jit->ip;
              (jit->ip) ++;
              *tmp___75 = imb___5.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      if (a1 > 7L) {
        tmp___76 = 4;
      } else {
        tmp___76 = 0;
      }
      if (a2 > 7L) {
        tmp___77 = 1;
      } else {
        tmp___77 = 0;
      }
      _amd64_rex_bits___2 = (unsigned char )((8 | tmp___76) | tmp___77);
      if ((int )_amd64_rex_bits___2 != 0) {
        tmp___78 = jit->ip;
        (jit->ip) ++;
        *tmp___78 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
      }
      break;
    }
    tmp___79 = jit->ip;
    (jit->ip) ++;
    *tmp___79 = (unsigned char)15;
    switch ((int )op->arg_size) {
    case 1: 
    tmp___80 = jit->ip;
    (jit->ip) ++;
    *tmp___80 = (unsigned char)190;
    break;
    case 2: 
    tmp___81 = jit->ip;
    (jit->ip) ++;
    *tmp___81 = (unsigned char)191;
    break;
    default: 
    tmp___82 = __builtin_expect(1L, 0L);
    if (tmp___82) {
      __assert_rtn("emit_ldx_op", "./jitter-amd64.c", 3055, "0");
    }
    }
    while (1) {
      if ((a2 & 7L) == 4L) {
        if (a3 == 0L) {
          while (1) {
            tmp___83 = jit->ip;
            (jit->ip) ++;
            *tmp___83 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___84 = jit->ip;
            (jit->ip) ++;
            *tmp___84 = (unsigned char )((4 << 3) | 4);
            break;
          }
        } else
        if ((int )a3 >= -128) {
          if ((int )a3 <= 127) {
            while (1) {
              tmp___85 = jit->ip;
              (jit->ip) ++;
              *tmp___85 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___86 = jit->ip;
              (jit->ip) ++;
              *tmp___86 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(a3 & 255L);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___3;
          }
        } else {
          _L___3: /* CIL Label */ 
          while (1) {
            tmp___87 = jit->ip;
            (jit->ip) ++;
            *tmp___87 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            tmp___88 = jit->ip;
            (jit->ip) ++;
            *tmp___88 = (unsigned char )((4 << 3) | 4);
            break;
          }
          while (1) {
            imb___6.val = (int )a3;
            tmp___89 = jit->ip;
            (jit->ip) ++;
            *tmp___89 = imb___6.b[0];
            tmp___90 = jit->ip;
            (jit->ip) ++;
            *tmp___90 = imb___6.b[1];
            tmp___91 = jit->ip;
            (jit->ip) ++;
            *tmp___91 = imb___6.b[2];
            tmp___92 = jit->ip;
            (jit->ip) ++;
            *tmp___92 = imb___6.b[3];
            break;
          }
        }
        break;
      }
      if (a3 == 0L) {
        if ((a2 & 7L) != 5L) {
          while (1) {
            tmp___93 = jit->ip;
            (jit->ip) ++;
            *tmp___93 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
            break;
          }
          break;
        }
      }
      if ((int )a3 >= -128) {
        if ((int )a3 <= 127) {
          while (1) {
            tmp___94 = jit->ip;
            (jit->ip) ++;
            *tmp___94 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(a3 & 255L);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L___4;
        }
      } else {
        _L___4: /* CIL Label */ 
        while (1) {
          tmp___95 = jit->ip;
          (jit->ip) ++;
          *tmp___95 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
          break;
        }
        while (1) {
          imb___7.val = (int )a3;
          tmp___96 = jit->ip;
          (jit->ip) ++;
          *tmp___96 = imb___7.b[0];
          tmp___97 = jit->ip;
          (jit->ip) ++;
          *tmp___97 = imb___7.b[1];
          tmp___98 = jit->ip;
          (jit->ip) ++;
          *tmp___98 = imb___7.b[2];
          tmp___99 = jit->ip;
          (jit->ip) ++;
          *tmp___99 = imb___7.b[3];
          break;
        }
      }
      break;
    }
    break;
  }
  break;
  case 118: 
  while (1) {
    if ((int )op->arg_size == 8) {
      goto _L___7;
    } else
    if ((int )op->arg_size == 4) {
      _L___7: /* CIL Label */ 
      while (1) {
        if ((int )op->arg_size == 2) {
          tmp___100 = jit->ip;
          (jit->ip) ++;
          *tmp___100 = (unsigned char)102;
        }
        while (1) {
          if ((int )op->arg_size > 4) {
            tmp___101 = 8;
          } else {
            tmp___101 = 0;
          }
          if (a1 > 7L) {
            tmp___102 = 4;
          } else {
            tmp___102 = 0;
          }
          if (a2 > 7L) {
            tmp___103 = 1;
          } else {
            tmp___103 = 0;
          }
          _amd64_rex_bits___3 = (unsigned char )((tmp___101 | tmp___102) | tmp___103);
          if ((int )_amd64_rex_bits___3 != 0) {
            tmp___104 = jit->ip;
            (jit->ip) ++;
            *tmp___104 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          } else
          if ((int )op->arg_size == 1) {
            tmp___104 = jit->ip;
            (jit->ip) ++;
            *tmp___104 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          }
          break;
        }
        switch ((int )op->arg_size) {
        case 1: 
        tmp___105 = jit->ip;
        (jit->ip) ++;
        *tmp___105 = (unsigned char)138;
        break;
        case 8: 
        case 4: 
        case 2: 
        tmp___106 = jit->ip;
        (jit->ip) ++;
        *tmp___106 = (unsigned char)139;
        break;
        default: 
        tmp___107 = __builtin_expect(1L, 0L);
        if (tmp___107) {
          __assert_rtn("emit_ldx_op", "./jitter-amd64.c", 3056, "0");
        }
        }
        while (1) {
          if (a2 == 16L) {
            while (1) {
              tmp___108 = jit->ip;
              (jit->ip) ++;
              *tmp___108 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb___8.val = (int )a3;
              tmp___109 = jit->ip;
              (jit->ip) ++;
              *tmp___109 = imb___8.b[0];
              tmp___110 = jit->ip;
              (jit->ip) ++;
              *tmp___110 = imb___8.b[1];
              tmp___111 = jit->ip;
              (jit->ip) ++;
              *tmp___111 = imb___8.b[2];
              tmp___112 = jit->ip;
              (jit->ip) ++;
              *tmp___112 = imb___8.b[3];
              break;
            }
          } else {
            while (1) {
              if ((a2 & 7L) == 4L) {
                if (a3 == 0L) {
                  while (1) {
                    tmp___113 = jit->ip;
                    (jit->ip) ++;
                    *tmp___113 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___114 = jit->ip;
                    (jit->ip) ++;
                    *tmp___114 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                } else
                if ((int )a3 >= -128) {
                  if ((int )a3 <= 127) {
                    while (1) {
                      tmp___115 = jit->ip;
                      (jit->ip) ++;
                      *tmp___115 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                      break;
                    }
                    while (1) {
                      tmp___116 = jit->ip;
                      (jit->ip) ++;
                      *tmp___116 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(a3 & 255L);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L___5;
                  }
                } else {
                  _L___5: /* CIL Label */ 
                  while (1) {
                    tmp___117 = jit->ip;
                    (jit->ip) ++;
                    *tmp___117 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___118 = jit->ip;
                    (jit->ip) ++;
                    *tmp___118 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    imb___9.val = (int )a3;
                    tmp___119 = jit->ip;
                    (jit->ip) ++;
                    *tmp___119 = imb___9.b[0];
                    tmp___120 = jit->ip;
                    (jit->ip) ++;
                    *tmp___120 = imb___9.b[1];
                    tmp___121 = jit->ip;
                    (jit->ip) ++;
                    *tmp___121 = imb___9.b[2];
                    tmp___122 = jit->ip;
                    (jit->ip) ++;
                    *tmp___122 = imb___9.b[3];
                    break;
                  }
                }
                break;
              }
              if (a3 == 0L) {
                if ((a2 & 7L) != 5L) {
                  while (1) {
                    tmp___123 = jit->ip;
                    (jit->ip) ++;
                    *tmp___123 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                    break;
                  }
                  break;
                }
              }
              if ((int )a3 >= -128) {
                if ((int )a3 <= 127) {
                  while (1) {
                    tmp___124 = jit->ip;
                    (jit->ip) ++;
                    *tmp___124 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(a3 & 255L);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___6;
                }
              } else {
                _L___6: /* CIL Label */ 
                while (1) {
                  tmp___125 = jit->ip;
                  (jit->ip) ++;
                  *tmp___125 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                  break;
                }
                while (1) {
                  imb___10.val = (int )a3;
                  tmp___126 = jit->ip;
                  (jit->ip) ++;
                  *tmp___126 = imb___10.b[0];
                  tmp___127 = jit->ip;
                  (jit->ip) ++;
                  *tmp___127 = imb___10.b[1];
                  tmp___128 = jit->ip;
                  (jit->ip) ++;
                  *tmp___128 = imb___10.b[2];
                  tmp___129 = jit->ip;
                  (jit->ip) ++;
                  *tmp___129 = imb___10.b[3];
                  break;
                }
              }
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      if (a1 > 7L) {
        tmp___130 = 4;
      } else {
        tmp___130 = 0;
      }
      if (a2 > 7L) {
        tmp___131 = 1;
      } else {
        tmp___131 = 0;
      }
      _amd64_rex_bits___4 = (unsigned char )((8 | tmp___130) | tmp___131);
      if ((int )_amd64_rex_bits___4 != 0) {
        tmp___132 = jit->ip;
        (jit->ip) ++;
        *tmp___132 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
      }
      break;
    }
    tmp___133 = jit->ip;
    (jit->ip) ++;
    *tmp___133 = (unsigned char)15;
    switch ((int )op->arg_size) {
    case 1: 
    tmp___134 = jit->ip;
    (jit->ip) ++;
    *tmp___134 = (unsigned char)182;
    break;
    case 2: 
    tmp___135 = jit->ip;
    (jit->ip) ++;
    *tmp___135 = (unsigned char)183;
    break;
    default: 
    tmp___136 = __builtin_expect(1L, 0L);
    if (tmp___136) {
      __assert_rtn("emit_ldx_op", "./jitter-amd64.c", 3056, "0");
    }
    }
    while (1) {
      if ((a2 & 7L) == 4L) {
        if (a3 == 0L) {
          while (1) {
            tmp___137 = jit->ip;
            (jit->ip) ++;
            *tmp___137 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___138 = jit->ip;
            (jit->ip) ++;
            *tmp___138 = (unsigned char )((4 << 3) | 4);
            break;
          }
        } else
        if ((int )a3 >= -128) {
          if ((int )a3 <= 127) {
            while (1) {
              tmp___139 = jit->ip;
              (jit->ip) ++;
              *tmp___139 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___140 = jit->ip;
              (jit->ip) ++;
              *tmp___140 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(a3 & 255L);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___8;
          }
        } else {
          _L___8: /* CIL Label */ 
          while (1) {
            tmp___141 = jit->ip;
            (jit->ip) ++;
            *tmp___141 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            tmp___142 = jit->ip;
            (jit->ip) ++;
            *tmp___142 = (unsigned char )((4 << 3) | 4);
            break;
          }
          while (1) {
            imb___11.val = (int )a3;
            tmp___143 = jit->ip;
            (jit->ip) ++;
            *tmp___143 = imb___11.b[0];
            tmp___144 = jit->ip;
            (jit->ip) ++;
            *tmp___144 = imb___11.b[1];
            tmp___145 = jit->ip;
            (jit->ip) ++;
            *tmp___145 = imb___11.b[2];
            tmp___146 = jit->ip;
            (jit->ip) ++;
            *tmp___146 = imb___11.b[3];
            break;
          }
        }
        break;
      }
      if (a3 == 0L) {
        if ((a2 & 7L) != 5L) {
          while (1) {
            tmp___147 = jit->ip;
            (jit->ip) ++;
            *tmp___147 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
            break;
          }
          break;
        }
      }
      if ((int )a3 >= -128) {
        if ((int )a3 <= 127) {
          while (1) {
            tmp___148 = jit->ip;
            (jit->ip) ++;
            *tmp___148 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(a3 & 255L);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L___9;
        }
      } else {
        _L___9: /* CIL Label */ 
        while (1) {
          tmp___149 = jit->ip;
          (jit->ip) ++;
          *tmp___149 = (unsigned char )(((long )(2 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
          break;
        }
        while (1) {
          imb___12.val = (int )a3;
          tmp___150 = jit->ip;
          (jit->ip) ++;
          *tmp___150 = imb___12.b[0];
          tmp___151 = jit->ip;
          (jit->ip) ++;
          *tmp___151 = imb___12.b[1];
          tmp___152 = jit->ip;
          (jit->ip) ++;
          *tmp___152 = imb___12.b[2];
          tmp___153 = jit->ip;
          (jit->ip) ++;
          *tmp___153 = imb___12.b[3];
          break;
        }
      }
      break;
    }
    break;
  }
  break;
  case 113: 
  while (1) {
    if ((int )op->arg_size == 4) {
      while (1) {
        while (1) {
          if (a1 > 7L) {
            tmp___154 = 4;
          } else {
            tmp___154 = 0;
          }
          if (a3 > 7L) {
            tmp___155 = 2;
          } else {
            tmp___155 = 0;
          }
          if (a2 > 7L) {
            tmp___156 = 1;
          } else {
            tmp___156 = 0;
          }
          _amd64_rex_bits___5 = (unsigned char )(((8 | tmp___154) | tmp___155) | tmp___156);
          if ((int )_amd64_rex_bits___5 != 0) {
            tmp___157 = jit->ip;
            (jit->ip) ++;
            *tmp___157 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
          }
          break;
        }
        tmp___158 = jit->ip;
        (jit->ip) ++;
        *tmp___158 = (unsigned char)99;
        while (1) {
          if ((a2 & 7L) == -1L) {
            while (1) {
              tmp___159 = jit->ip;
              (jit->ip) ++;
              *tmp___159 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___160 = jit->ip;
              (jit->ip) ++;
              *tmp___160 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb___13.val = 0;
              tmp___161 = jit->ip;
              (jit->ip) ++;
              *tmp___161 = imb___13.b[0];
              tmp___162 = jit->ip;
              (jit->ip) ++;
              *tmp___162 = imb___13.b[1];
              tmp___163 = jit->ip;
              (jit->ip) ++;
              *tmp___163 = imb___13.b[2];
              tmp___164 = jit->ip;
              (jit->ip) ++;
              *tmp___164 = imb___13.b[3];
              break;
            }
          } else
          if ((a2 & 7L) != 5L) {
            while (1) {
              tmp___165 = jit->ip;
              (jit->ip) ++;
              *tmp___165 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___166 = jit->ip;
              (jit->ip) ++;
              *tmp___166 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
              break;
            }
          } else {
            while (1) {
              tmp___167 = jit->ip;
              (jit->ip) ++;
              *tmp___167 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___168 = jit->ip;
              (jit->ip) ++;
              *tmp___168 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)0;
              (jit->ip) ++;
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      if (a1 > 7L) {
        tmp___175 = 4;
      } else {
        tmp___175 = 0;
      }
      if (a3 > 7L) {
        tmp___176 = 2;
      } else {
        tmp___176 = 0;
      }
      if (a2 > 7L) {
        tmp___177 = 1;
      } else {
        tmp___177 = 0;
      }
      _amd64_rex_bits___6 = (unsigned char )(((8 | tmp___175) | tmp___176) | tmp___177);
      if ((int )_amd64_rex_bits___6 != 0) {
        tmp___178 = jit->ip;
        (jit->ip) ++;
        *tmp___178 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
      }
      break;
    }
    tmp___179 = jit->ip;
    (jit->ip) ++;
    *tmp___179 = (unsigned char)15;
    switch ((int )op->arg_size) {
    case 1: 
    tmp___180 = jit->ip;
    (jit->ip) ++;
    *tmp___180 = (unsigned char)190;
    break;
    case 2: 
    tmp___181 = jit->ip;
    (jit->ip) ++;
    *tmp___181 = (unsigned char)191;
    break;
    default: 
    tmp___182 = __builtin_expect(1L, 0L);
    if (tmp___182) {
      __assert_rtn("emit_ldx_op", "./jitter-amd64.c", 3057, "0");
    }
    }
    while (1) {
      if ((a2 & 7L) == -1L) {
        while (1) {
          tmp___183 = jit->ip;
          (jit->ip) ++;
          *tmp___183 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___184 = jit->ip;
          (jit->ip) ++;
          *tmp___184 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
          break;
        }
        while (1) {
          imb___15.val = 0;
          tmp___185 = jit->ip;
          (jit->ip) ++;
          *tmp___185 = imb___15.b[0];
          tmp___186 = jit->ip;
          (jit->ip) ++;
          *tmp___186 = imb___15.b[1];
          tmp___187 = jit->ip;
          (jit->ip) ++;
          *tmp___187 = imb___15.b[2];
          tmp___188 = jit->ip;
          (jit->ip) ++;
          *tmp___188 = imb___15.b[3];
          break;
        }
      } else
      if ((a2 & 7L) != 5L) {
        while (1) {
          tmp___189 = jit->ip;
          (jit->ip) ++;
          *tmp___189 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___190 = jit->ip;
          (jit->ip) ++;
          *tmp___190 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
          break;
        }
      } else {
        while (1) {
          tmp___191 = jit->ip;
          (jit->ip) ++;
          *tmp___191 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
          break;
        }
        while (1) {
          tmp___192 = jit->ip;
          (jit->ip) ++;
          *tmp___192 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)0;
          (jit->ip) ++;
          break;
        }
      }
      break;
    }
    break;
  }
  break;
  case 117: 
  while (1) {
    if ((int )op->arg_size == 8) {
      goto _L___10;
    } else
    if ((int )op->arg_size == 4) {
      _L___10: /* CIL Label */ 
      while (1) {
        while (1) {
          if ((int )op->arg_size > 4) {
            tmp___199 = 8;
          } else {
            tmp___199 = 0;
          }
          if (a1 > 7L) {
            tmp___200 = 4;
          } else {
            tmp___200 = 0;
          }
          if (a3 > 7L) {
            tmp___201 = 2;
          } else {
            tmp___201 = 0;
          }
          if (a2 > 7L) {
            tmp___202 = 1;
          } else {
            tmp___202 = 0;
          }
          _amd64_rex_bits___7 = (unsigned char )(((tmp___199 | tmp___200) | tmp___201) | tmp___202);
          if ((int )_amd64_rex_bits___7 != 0) {
            tmp___203 = jit->ip;
            (jit->ip) ++;
            *tmp___203 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
          } else
          if ((int )op->arg_size == 1) {
            tmp___203 = jit->ip;
            (jit->ip) ++;
            *tmp___203 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
          }
          break;
        }
        while (1) {
          if ((int )op->arg_size == 8) {
            tmp___204 = 4;
          } else {
            tmp___204 = (int )op->arg_size;
          }
          switch (tmp___204) {
          case 1: 
          tmp___205 = jit->ip;
          (jit->ip) ++;
          *tmp___205 = (unsigned char)138;
          break;
          case 2: 
          tmp___206 = jit->ip;
          (jit->ip) ++;
          *tmp___206 = (unsigned char)102;
          case 4: 
          tmp___207 = jit->ip;
          (jit->ip) ++;
          *tmp___207 = (unsigned char)139;
          break;
          default: 
          tmp___208 = __builtin_expect(1L, 0L);
          if (tmp___208) {
            __assert_rtn("emit_ldx_op", "./jitter-amd64.c", 3058, "0");
          }
          }
          while (1) {
            if ((a2 & 7L) == -1L) {
              while (1) {
                tmp___209 = jit->ip;
                (jit->ip) ++;
                *tmp___209 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___210 = jit->ip;
                (jit->ip) ++;
                *tmp___210 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
                break;
              }
              while (1) {
                imb___17.val = 0;
                tmp___211 = jit->ip;
                (jit->ip) ++;
                *tmp___211 = imb___17.b[0];
                tmp___212 = jit->ip;
                (jit->ip) ++;
                *tmp___212 = imb___17.b[1];
                tmp___213 = jit->ip;
                (jit->ip) ++;
                *tmp___213 = imb___17.b[2];
                tmp___214 = jit->ip;
                (jit->ip) ++;
                *tmp___214 = imb___17.b[3];
                break;
              }
            } else
            if ((a2 & 7L) != 5L) {
              while (1) {
                tmp___215 = jit->ip;
                (jit->ip) ++;
                *tmp___215 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___216 = jit->ip;
                (jit->ip) ++;
                *tmp___216 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
                break;
              }
            } else {
              while (1) {
                tmp___217 = jit->ip;
                (jit->ip) ++;
                *tmp___217 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
                break;
              }
              while (1) {
                tmp___218 = jit->ip;
                (jit->ip) ++;
                *tmp___218 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      if (a1 > 7L) {
        tmp___225 = 4;
      } else {
        tmp___225 = 0;
      }
      if (a3 > 7L) {
        tmp___226 = 2;
      } else {
        tmp___226 = 0;
      }
      if (a2 > 7L) {
        tmp___227 = 1;
      } else {
        tmp___227 = 0;
      }
      _amd64_rex_bits___8 = (unsigned char )(((8 | tmp___225) | tmp___226) | tmp___227);
      if ((int )_amd64_rex_bits___8 != 0) {
        tmp___228 = jit->ip;
        (jit->ip) ++;
        *tmp___228 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
      }
      break;
    }
    tmp___229 = jit->ip;
    (jit->ip) ++;
    *tmp___229 = (unsigned char)15;
    switch ((int )op->arg_size) {
    case 1: 
    tmp___230 = jit->ip;
    (jit->ip) ++;
    *tmp___230 = (unsigned char)182;
    break;
    case 2: 
    tmp___231 = jit->ip;
    (jit->ip) ++;
    *tmp___231 = (unsigned char)183;
    break;
    default: 
    tmp___232 = __builtin_expect(1L, 0L);
    if (tmp___232) {
      __assert_rtn("emit_ldx_op", "./jitter-amd64.c", 3058, "0");
    }
    }
    while (1) {
      if ((a2 & 7L) == -1L) {
        while (1) {
          tmp___233 = jit->ip;
          (jit->ip) ++;
          *tmp___233 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___234 = jit->ip;
          (jit->ip) ++;
          *tmp___234 = (unsigned char )((((a3 & 7L) & 7L) << 3) | 5L);
          break;
        }
        while (1) {
          imb___19.val = 0;
          tmp___235 = jit->ip;
          (jit->ip) ++;
          *tmp___235 = imb___19.b[0];
          tmp___236 = jit->ip;
          (jit->ip) ++;
          *tmp___236 = imb___19.b[1];
          tmp___237 = jit->ip;
          (jit->ip) ++;
          *tmp___237 = imb___19.b[2];
          tmp___238 = jit->ip;
          (jit->ip) ++;
          *tmp___238 = imb___19.b[3];
          break;
        }
      } else
      if ((a2 & 7L) != 5L) {
        while (1) {
          tmp___239 = jit->ip;
          (jit->ip) ++;
          *tmp___239 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___240 = jit->ip;
          (jit->ip) ++;
          *tmp___240 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
          break;
        }
      } else {
        while (1) {
          tmp___241 = jit->ip;
          (jit->ip) ++;
          *tmp___241 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | 4L);
          break;
        }
        while (1) {
          tmp___242 = jit->ip;
          (jit->ip) ++;
          *tmp___242 = (unsigned char )(((((a3 & 7L) & 7L) & 7L) << 3) | (((a2 & 7L) & 7L) & 7L));
          break;
        }
        while (1) {
          *(jit->ip) = (unsigned char)0;
          (jit->ip) ++;
          break;
        }
      }
      break;
    }
    break;
  }
  break;
  default: 
  tmp___249 = __builtin_expect(1L, 0L);
  if (tmp___249) {
    __assert_rtn("emit_ldx_op", "./jitter-amd64.c", 3059, "0");
  }
  }
  return;
}
}
/* END FUNCTION-DEF emit_ldx_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF free_labels LOC=UNKNOWN */
static void free_labels(jit_label *lab ) 
{ 


  {
  if ((unsigned long )lab == (unsigned long )((void *)0)) {
    return;
  }
  free_labels(lab->next);
  free((void *)lab);
  return;
}
}
/* END FUNCTION-DEF free_labels LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_op_first LOC=UNKNOWN */
__inline static jit_op *jit_op_first(jit_op *op ) 
{ 


  {
  while ((unsigned long )op->prev != (unsigned long )((void *)0)) {
    op = op->prev;
  }
  return (op);
}
}
/* END FUNCTION-DEF jit_op_first LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_regs_active_count LOC=UNKNOWN */
int jit_regs_active_count(jit_op *op ) 
{ 
  int tmp ;

  {
  tmp = jit_set_size(op->live_out);
  return (tmp);
}
}
/* END FUNCTION-DEF jit_regs_active_count LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF funcall_fput_arg LOC=UNKNOWN */
__inline static void funcall_fput_arg(struct jit *jit , jit_op *op ) 
{ 
  int pos ;
  struct jit_out_arg *arg ;
  int tmp ;

  {
  pos = jit->prepared_args.ready;
  arg = jit->prepared_args.args + pos;
  arg->isreg = (char )(! ((int )op->code & 2));
  arg->isfp = (char)1;
  arg->isref = (char )((int )op->spec == ((2 << 2) | 2));
  arg->size = (char )op->arg_size;
  tmp = jit->prepared_args.fp_args;
  (jit->prepared_args.fp_args) ++;
  arg->argpos = tmp;
  if (arg->isref) {
    arg->value.label = (jit_label *)op->arg[1];
  } else
  if ((int )op->code & 2) {
    arg->value.fp = op->flt_imm;
  } else {
    arg->value.generic = op->arg[0];
  }
  (jit->prepared_args.ready) ++;
  if (jit->prepared_args.fp_args > (jit->reg_al)->fp_arg_reg_cnt) {
    jit->prepared_args.stack_size = (int )((unsigned long )jit->prepared_args.stack_size + sizeof(void *));
  }
  return;
}
}
/* END FUNCTION-DEF funcall_fput_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF funcall_put_arg LOC=UNKNOWN */
__inline static void funcall_put_arg(struct jit *jit , jit_op *op ) 
{ 
  int pos ;
  struct jit_out_arg *arg ;
  int tmp ;

  {
  pos = jit->prepared_args.ready;
  arg = jit->prepared_args.args + pos;
  arg->isreg = (char )(! ((int )op->code & 2));
  arg->isfp = (char)0;
  arg->isref = (char )((int )op->spec == ((2 << 2) | 2));
  arg->value.generic = op->arg[0];
  tmp = jit->prepared_args.gp_args;
  (jit->prepared_args.gp_args) ++;
  arg->argpos = tmp;
  (jit->prepared_args.ready) ++;
  if (jit->prepared_args.gp_args > (jit->reg_al)->gp_arg_reg_cnt) {
    jit->prepared_args.stack_size = (int )((unsigned long )jit->prepared_args.stack_size + sizeof(void *));
  }
  return;
}
}
/* END FUNCTION-DEF funcall_put_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_dump_ops_compilable LOC=UNKNOWN */
static void jit_dump_ops_compilable(struct jit *jit , jit_tree *labels ) 
{ 
  jit_op *op ;
  jit_op *tmp ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    print_op_compilable(& jit_disasm_compilable, op, labels);
    printf((char const   */* __restrict  */)"\n");
    op = op->next;
  }
  return;
}
}
/* END FUNCTION-DEF jit_dump_ops_compilable LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_set_equal LOC=UNKNOWN */
__inline static int jit_set_equal(jit_set *s1 , jit_set *s2 ) 
{ 
  int tmp ;

  {
  tmp = jit_tree_equal(s1->root, s2->root);
  return (tmp);
}
}
/* END FUNCTION-DEF jit_set_equal LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_messager LOC=UNKNOWN */
void jit_messager(struct jit *j , char *s , int i ) 
{ 
  struct jit_debug_info *tmp ;

  {
  tmp = jit_debug_info_new("head.c", "jit_messager", 23);
  jit_add_op(j, (unsigned short)417, (unsigned char )((1 << 2) | 2), (jit_value )s,
             (long )((i & 268435455) << 4), 0L, (unsigned char)0, tmp);
  return;
}
}
/* END FUNCTION-DEF jit_messager LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF _bit_pop LOC=UNKNOWN */
__inline static int _bit_pop(unsigned int x ) 
{ 


  {
  x = (x & 1431655765U) + ((x >> 1) & 1431655765U);
  x = (x & 858993459U) + ((x >> 2) & 858993459U);
  x = (x & 252645135U) + ((x >> 4) & 252645135U);
  x = (x & 16711935U) + ((x >> 8) & 16711935U);
  x = (x & 65535U) + ((x >> 16) & 65535U);
  return ((int )x);
}
}
/* END FUNCTION-DEF _bit_pop LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_value_align LOC=UNKNOWN */
__inline static jit_value jit_value_align(jit_value value , jit_value alignment ) 
{ 


  {
  return ((value + (alignment - 1L)) & - alignment);
}
}
/* END FUNCTION-DEF jit_value_align LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_is_label LOC=UNKNOWN */
__inline static int jit_is_label(struct jit *jit , void *ptr ) 
{ 
  jit_label *lab ;

  {
  lab = jit->labels;
  while (1) {
    if ((unsigned long )lab == (unsigned long )((void *)0)) {
      return (0);
    }
    if ((unsigned long )lab == (unsigned long )ptr) {
      return (1);
    }
    lab = lab->next;
  }
}
}
/* END FUNCTION-DEF jit_is_label LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF __wcwidth LOC=UNKNOWN */
__inline extern int __wcwidth(__darwin_ct_rune_t _c ) 
{ 
  unsigned int _x ;
  int tmp ;
  int tmp___0 ;

  {
  if (_c == 0) {
    return (0);
  }
  tmp = __maskrune(_c, 3758358528UL);
  _x = (unsigned int )tmp;
  if (((long )_x & 3758096384L) != 0L) {
    return ((int )(((long )_x & 3758096384L) >> 30));
  }
  if (((long )_x & 262144L) != 0L) {
    tmp___0 = 1;
  } else {
    tmp___0 = -1;
  }
  return (tmp___0);
}
}
/* END FUNCTION-DEF __wcwidth LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_is_associated_aux LOC=UNKNOWN */
__inline static jit_hw_reg *rmap_is_associated_aux(jit_tree *n , int reg_id , int fp ,
                                                   jit_value *virt_reg ) 
{ 
  jit_hw_reg *r ;
  jit_hw_reg *tmp ;

  {
  if ((unsigned long )n == (unsigned long )((void *)0)) {
    return ((jit_hw_reg *)((void *)0));
  }
  r = (jit_hw_reg *)n->value;
  if ((int )r->fp == fp) {
    if (r->id == reg_id) {
      if (virt_reg) {
        *virt_reg = n->key;
      }
      return (r);
    }
  }
  r = rmap_is_associated_aux(n->left, reg_id, fp, virt_reg);
  if (r) {
    return (r);
  } else {
    tmp = rmap_is_associated_aux(n->right, reg_id, fp, virt_reg);
    return (tmp);
  }
}
}
/* END FUNCTION-DEF rmap_is_associated_aux LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF move_red_left LOC=UNKNOWN */
__inline static jit_tree *move_red_left(jit_tree *h ) 
{ 
  int tmp ;

  {
  color_flip(h);
  tmp = is_red((h->right)->left);
  if (tmp) {
    h->right = rotate_right(h->right);
    h = rotate_left(h);
    color_flip(h);
  }
  return (h);
}
}
/* END FUNCTION-DEF move_red_left LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF check_dead_code LOC=UNKNOWN */
static int check_dead_code(jit_op *op , char *msg_buf ) 
{ 


  {
  if (! op->in_use) {
    append_msg(msg_buf, (char *)"unreachable operation");
    return (1);
  }
  return (0);
}
}
/* END FUNCTION-DEF check_dead_code LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF is_suitable_mul LOC=UNKNOWN */
__inline static int is_suitable_mul(jit_op *op ) 
{ 
  jit_value arg ;
  int tmp ;

  {
  arg = op->arg[2];
  if ((int )op->code == 98) {
    if (arg == 2L) {
      tmp = 1;
    } else
    if (arg == 4L) {
      tmp = 1;
    } else
    if (arg == 8L) {
      tmp = 1;
    } else {
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
  if ((int )op->code == 722) {
    if (arg == 1L) {
      tmp = 1;
    } else
    if (arg == 2L) {
      tmp = 1;
    } else
    if (arg == 3L) {
      tmp = 1;
    } else {
      tmp = 0;
    }
  } else {
    tmp = 0;
  }
  return (tmp);
}
}
/* END FUNCTION-DEF is_suitable_mul LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_get_reg_name LOC=UNKNOWN */
void jit_get_reg_name(struct jit_disasm *disasm , char *r , int reg ) 
{ 
  unsigned long tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;
  unsigned long tmp___2 ;
  unsigned long tmp___3 ;
  unsigned long tmp___4 ;
  unsigned long tmp___5 ;
  unsigned long tmp___6 ;
  unsigned long tmp___7 ;

  {
  if (reg == 2 << 1) {
    tmp = __builtin_object_size((void *)r, 1);
    __builtin___strcpy_chk(r, (char const   *)disasm->reg_fp_template, tmp);
  } else
  if (reg == ((2 << 1) | (1 << 4))) {
    tmp___0 = __builtin_object_size((void *)r, 1);
    __builtin___strcpy_chk(r, (char const   *)disasm->reg_out_template, tmp___0);
  } else
  if (reg == 1 << 1) {
    tmp___1 = __builtin_object_size((void *)r, 1);
    __builtin___strcpy_chk(r, (char const   *)disasm->reg_imm_template, tmp___1);
  } else
  if (reg == (1 | (1 << 1))) {
    tmp___2 = __builtin_object_size((void *)r, 1);
    __builtin___strcpy_chk(r, (char const   *)disasm->reg_fimm_template, tmp___2);
  } else
  if (((reg >> 1) & 3) == 0) {
    if ((reg & 1) == 0) {
      tmp___3 = __builtin_object_size((void *)r, 1);
      __builtin___sprintf_chk(r, 0, tmp___3, (char const   *)disasm->reg_template,
                              (reg >> 4) & 268435455);
    } else {
      tmp___4 = __builtin_object_size((void *)r, 1);
      __builtin___sprintf_chk(r, 0, tmp___4, (char const   *)disasm->freg_template,
                              (reg >> 4) & 268435455);
    }
  } else
  if (((reg >> 1) & 3) == 3) {
    if ((reg & 1) == 0) {
      tmp___5 = __builtin_object_size((void *)r, 1);
      __builtin___sprintf_chk(r, 0, tmp___5, (char const   *)disasm->arg_template,
                              (reg >> 4) & 268435455);
    } else {
      tmp___6 = __builtin_object_size((void *)r, 1);
      __builtin___sprintf_chk(r, 0, tmp___6, (char const   *)disasm->farg_template,
                              (reg >> 4) & 268435455);
    }
  } else {
    tmp___7 = __builtin_object_size((void *)r, 1);
    __builtin___sprintf_chk(r, 0, tmp___7, "%s", disasm->reg_unknown_template);
  }
  return;
}
}
/* END FUNCTION-DEF jit_get_reg_name LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_prepare_reg_counts LOC=UNKNOWN */
__inline static void jit_prepare_reg_counts(struct jit *jit ) 
{ 
  int declared_args ;
  int last_gp ;
  int last_fp ;
  int gp_args ;
  int fp_args ;
  struct jit_func_info *info ;
  jit_op *op ;
  jit_op *tmp ;
  void *tmp___0 ;
  int i ;
  jit_reg r ;
  jit_op *xop ;
  jit_opcode next_code ;

  {
  declared_args = 0;
  last_gp = -1;
  last_fp = -1;
  gp_args = 0;
  fp_args = 0;
  info = (struct jit_func_info *)((void *)0);
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while (1) {
    if (! op) {
      goto _L;
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 384U) {
      _L: /* CIL Label */ 
      if (info) {
        info->gp_reg_count = last_gp + 1;
        info->fp_reg_count = last_fp + 1;
        info->general_arg_cnt = gp_args;
        info->float_arg_cnt = fp_args;
        while ((info->gp_reg_count + info->fp_reg_count) % 2) {
          (info->gp_reg_count) ++;
        }
        tmp___0 = malloc(sizeof(struct jit_inp_arg ) * (unsigned long )declared_args);
        info->args = (struct jit_inp_arg *)tmp___0;
      }
      if (op) {
        declared_args = 0;
        last_gp = -1;
        last_fp = -1;
        gp_args = 0;
        fp_args = 0;
        info = (struct jit_func_info *)op->arg[1];
      }
      if (! op) {
        break;
      }
    }
    i = 0;
    while (i < 3) {
      if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 3) {
        goto _L___0;
      } else
      if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 1) {
        _L___0: /* CIL Label */ 
        r = op->arg[i];
        if ((r & 1L) == 0L) {
          if (((r >> 4) & 268435455L) > (long )last_gp) {
            last_gp = (int )((r >> 4) & 268435455L);
          }
        }
        if ((r & 1L) == 1L) {
          if (((r >> 4) & 268435455L) > (long )last_fp) {
            last_fp = (int )((r >> 4) & 268435455L);
          }
        }
      }
      i ++;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 808U) {
      declared_args ++;
      if (op->arg[0] == 2L) {
        fp_args ++;
      } else {
        gp_args ++;
      }
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 840U) {
      xop = op;
      while (1) {
        if ((unsigned int )((jit_opcode )((int )(op->next)->code & 65528)) == 760U) {
          (xop->arg[0]) ++;
        } else
        if ((unsigned int )((jit_opcode )((int )(op->next)->code & 65528)) == 904U) {
          (xop->arg[1]) ++;
        } else {
          next_code = (jit_opcode )((int )(op->next)->code & 65528);
          if ((unsigned int )next_code == 648U) {
            break;
          }
          if ((unsigned int )next_code != 56U) {
            if ((unsigned int )next_code != 168U) {
              if ((unsigned int )next_code != 400U) {
                if ((unsigned int )next_code != 800U) {
                  if ((unsigned int )next_code != 728U) {
                    if ((unsigned int )next_code != 160U) {
                      printf((char const   */* __restrict  */)"Garbage in the prepare-call block. Opcode: %x\n",
                             (unsigned int )next_code >> 3);
                      abort();
                    }
                  }
                }
              }
            }
          }
        }
        op = op->next;
      }
    }
    op = op->next;
  }
  return;
}
}
/* END FUNCTION-DEF jit_prepare_reg_counts LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF ishexnumber LOC=UNKNOWN */
__inline extern int ishexnumber(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 65536UL);
  return (tmp);
}
}
/* END FUNCTION-DEF ishexnumber LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_fretval_op LOC=UNKNOWN */
static void emit_fretval_op(struct jit *jit , jit_op *op ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;

  {
  if ((unsigned long )op->arg_size == sizeof(float )) {
    while (1) {
      tmp = jit->ip;
      (jit->ip) ++;
      *tmp = (unsigned char)243;
      while (1) {
        _amd64_rex_bits = (unsigned char)0;
        if ((int )_amd64_rex_bits != 0) {
          tmp___0 = jit->ip;
          (jit->ip) ++;
          *tmp___0 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___1 = jit->ip;
      (jit->ip) ++;
      *tmp___1 = (unsigned char)15;
      tmp___2 = jit->ip;
      (jit->ip) ++;
      *tmp___2 = (unsigned char)90;
      while (1) {
        while (1) {
          tmp___3 = jit->ip;
          (jit->ip) ++;
          *tmp___3 = (unsigned char )(3 << 6);
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_fretval_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_combined_op LOC=UNKNOWN */
static jit_op *print_combined_op(FILE *f , struct jit *jit , struct jit_op *op , jit_tree *labels ) 
{ 
  jit_opcode opcode ;
  int i ;
  char *tmp ;

  {
  opcode = (jit_opcode )((int )op->code & 65528);
  if ((unsigned int )opcode == 488U) {
    goto _L;
  } else
  if ((unsigned int )opcode == 880U) {
    _L: /* CIL Label */ 
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".text\n%s.byte\n",
            jit_disasm_general.indent_template);
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".data\n");
    while (1) {
      if (op) {
        if (! ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 488U)) {
          if (! ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 880U)) {
            break;
          }
        }
      } else {
        break;
      }
      if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 488U) {
        fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"%02x ",
                (int )((unsigned char )op->arg[0]));
      }
      if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 880U) {
        i = 0;
        while ((jit_value )i < op->arg[0]) {
          fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"%02x ",
                  (int )*((unsigned char *)op->addendum + i));
          i ++;
        }
      }
      op = op->next;
    }
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"\n");
    if (! op) {
      return ((jit_op *)((void *)0));
    }
    op = op->prev;
    return (op);
  }
  if ((unsigned int )opcode == 640U) {
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".comment\n");
    print_op(f, & jit_disasm_general, op, labels, 256);
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"\n");
    return (op);
  }
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".text\n");
  print_op(f, & jit_disasm_general, op, labels, 256);
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"\n");
  switch ((unsigned int )opcode) {
  case 168U: 
  if (op->next) {
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"\n.nl\n");
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".addr=%lx\n",
            (unsigned long )(jit->buf + (op->next)->code_offset));
  }
  break;
  case 104U: 
  case 200U: 
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".data\n");
  print_op_bytes(f, jit, op);
  break;
  default: 
  if (! op->code_length) {
    break;
  }
  tmp = platform_id();
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".%s\n", tmp);
  print_op_bytes(f, jit, op);
  }
  return (op);
}
}
/* END FUNCTION-DEF print_combined_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_sub_op LOC=UNKNOWN */
static void emit_sse_sub_op(struct jit *jit , jit_op *op , long a1 , long a2 , long a3 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___7 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___14 ;
  int tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___21 ;
  int tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;

  {
  if (a1 == a2) {
    while (1) {
      tmp = jit->ip;
      (jit->ip) ++;
      *tmp = (unsigned char)242;
      while (1) {
        if (a1 > 7L) {
          tmp___0 = 4;
        } else {
          tmp___0 = 0;
        }
        if (a3 > 7L) {
          tmp___1 = 1;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)15;
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)92;
      while (1) {
        while (1) {
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a3 & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else
  if (a1 == a3) {
    while (1) {
      tmp___6 = jit->ip;
      (jit->ip) ++;
      *tmp___6 = (unsigned char)242;
      while (1) {
        if (a1 > 7L) {
          tmp___7 = 4;
        } else {
          tmp___7 = 0;
        }
        if (a2 > 7L) {
          tmp___8 = 1;
        } else {
          tmp___8 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(tmp___7 | tmp___8);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___9 = jit->ip;
          (jit->ip) ++;
          *tmp___9 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      tmp___10 = jit->ip;
      (jit->ip) ++;
      *tmp___10 = (unsigned char)15;
      tmp___11 = jit->ip;
      (jit->ip) ++;
      *tmp___11 = (unsigned char)92;
      while (1) {
        while (1) {
          tmp___12 = jit->ip;
          (jit->ip) ++;
          *tmp___12 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
    emit_sse_change_sign(jit, op, (int )a1);
  } else {
    while (1) {
      tmp___13 = jit->ip;
      (jit->ip) ++;
      *tmp___13 = (unsigned char)242;
      while (1) {
        if (a1 > 7L) {
          tmp___14 = 4;
        } else {
          tmp___14 = 0;
        }
        if (a2 > 7L) {
          tmp___15 = 1;
        } else {
          tmp___15 = 0;
        }
        _amd64_rex_bits___1 = (unsigned char )(tmp___14 | tmp___15);
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___16 = jit->ip;
          (jit->ip) ++;
          *tmp___16 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      tmp___17 = jit->ip;
      (jit->ip) ++;
      *tmp___17 = (unsigned char)15;
      tmp___18 = jit->ip;
      (jit->ip) ++;
      *tmp___18 = (unsigned char)16;
      while (1) {
        while (1) {
          tmp___19 = jit->ip;
          (jit->ip) ++;
          *tmp___19 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      tmp___20 = jit->ip;
      (jit->ip) ++;
      *tmp___20 = (unsigned char)242;
      while (1) {
        if (a1 > 7L) {
          tmp___21 = 4;
        } else {
          tmp___21 = 0;
        }
        if (a3 > 7L) {
          tmp___22 = 1;
        } else {
          tmp___22 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )(tmp___21 | tmp___22);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___23 = jit->ip;
          (jit->ip) ++;
          *tmp___23 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___24 = jit->ip;
      (jit->ip) ++;
      *tmp___24 = (unsigned char)15;
      tmp___25 = jit->ip;
      (jit->ip) ++;
      *tmp___25 = (unsigned char)92;
      while (1) {
        while (1) {
          tmp___26 = jit->ip;
          (jit->ip) ++;
          *tmp___26 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a3 & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_sse_sub_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF load_reg LOC=UNKNOWN */
static void load_reg(struct jit_op *op , jit_hw_reg *hreg , long reg ) 
{ 


  {
  insert_reg_op(800, op, (jit_value )hreg->id, reg);
  return;
}
}
/* END FUNCTION-DEF load_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF delete_min LOC=UNKNOWN */
static jit_tree *delete_min(jit_tree *h ) 
{ 
  int tmp ;
  int tmp___0 ;
  jit_tree *tmp___1 ;

  {
  if ((unsigned long )h->left == (unsigned long )((void *)0)) {
    free((void *)h);
    return ((jit_tree *)((void *)0));
  }
  tmp = is_red(h->left);
  if (! tmp) {
    tmp___0 = is_red((h->left)->left);
    if (! tmp___0) {
      h = move_red_left(h);
    }
  }
  h->left = delete_min(h->left);
  tmp___1 = fixup(h);
  return (tmp___1);
}
}
/* END FUNCTION-DEF delete_min LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF check_data_references LOC=UNKNOWN */
static int check_data_references(jit_op *op , char *msg_buf ) 
{ 
  int tmp ;

  {
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 512U) {
    goto _L;
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 104U) {
    _L: /* CIL Label */ 
    tmp = jit_op_is_data_op(op->jmp_addr);
    if (! tmp) {
      append_msg(msg_buf, (char *)"invalid data reference");
      return (64);
    }
  }
  return (0);
}
}
/* END FUNCTION-DEF check_data_references LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF fac LOC=UNKNOWN */
void fac(int n ) 
{ 
  int s ;
  int i ;

  {
  s = 1;
  i = 2;
  while (i <= n) {
    s *= i;
    i ++;
  }
  printf((char const   */* __restrict  */)"fac(%i)=%i\n", n, s);
  return;
}
}
/* END FUNCTION-DEF fac LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_args LOC=UNKNOWN */
static void print_args(struct jit_disasm *disasm , struct output_buf *linebuf , jit_op *op ,
                       jit_tree *labels ) 
{ 
  int i ;
  char const   *tmp ;
  int tmp___0 ;

  {
  i = 1;
  while (i <= 3) {
    if ((((int )op->spec >> (i - 1) * 2) & 3) == 0) {
      goto __Cont;
    }
    if (i == 1) {
      tmp = " ";
    } else {
      tmp = ", ";
    }
    ob_append(linebuf, (char *)tmp);
    if (i == 1) {
      tmp___0 = jit_op_is_cflow(op);
      if (tmp___0) {
        print_addr(disasm, linebuf, labels, op, 0);
      } else {
        print_arg(disasm, linebuf, op, i);
      }
    } else {
      print_arg(disasm, linebuf, op, i);
    }
    __Cont: /* CIL Label */ 
    i ++;
  }
  return;
}
}
/* END FUNCTION-DEF print_args LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF report_warning LOC=UNKNOWN */
static void report_warning(struct jit *jit , jit_op *op , char *desc ) 
{ 


  {
  fprintf((FILE */* __restrict  */)__stdoutp, (char const   */* __restrict  */)"%s at function `%s\' (%s:%i)\n",
          desc, (op->debug_info)->function, (op->debug_info)->filename, (op->debug_info)->lineno);
  print_op(__stdoutp, & jit_debugging_disasm, op, (jit_tree *)((void *)0), 0);
  fprintf((FILE */* __restrict  */)__stdoutp, (char const   */* __restrict  */)"\n");
  return;
}
}
/* END FUNCTION-DEF report_warning LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_op_append LOC=UNKNOWN */
__inline static void jit_op_append(jit_op *op , jit_op *appended ) 
{ 


  {
  appended->next = op->next;
  if ((unsigned long )op->next != (unsigned long )((void *)0)) {
    (op->next)->prev = appended;
  }
  appended->prev = op;
  op->next = appended;
  return;
}
}
/* END FUNCTION-DEF jit_op_append LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_allocator_hints_free LOC=UNKNOWN */
void jit_allocator_hints_free(jit_tree *hints ) 
{ 
  int refs ;

  {
  if ((unsigned long )hints == (unsigned long )((void *)0)) {
    return;
  }
  jit_allocator_hints_free(hints->left);
  jit_allocator_hints_free(hints->right);
  (((struct jit_allocator_hint *)hints->value)->refs) --;
  refs = ((struct jit_allocator_hint *)hints->value)->refs;
  if (refs == 0) {
    free(hints->value);
  }
  free((void *)hints);
  return;
}
}
/* END FUNCTION-DEF jit_allocator_hints_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_neg_op LOC=UNKNOWN */
static void emit_sse_neg_op(struct jit *jit , jit_op *op , long a1 , long a2 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;

  {
  if (a1 != a2) {
    while (1) {
      tmp = jit->ip;
      (jit->ip) ++;
      *tmp = (unsigned char)242;
      while (1) {
        if (a1 > 7L) {
          tmp___0 = 4;
        } else {
          tmp___0 = 0;
        }
        if (a2 > 7L) {
          tmp___1 = 1;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)15;
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)16;
      while (1) {
        while (1) {
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  emit_sse_change_sign(jit, op, (int )a1);
  return;
}
}
/* END FUNCTION-DEF emit_sse_neg_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_div_op LOC=UNKNOWN */
static void emit_sse_div_op(struct jit *jit , long a1 , long a2 , long a3 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___12 ;
  int tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___19 ;
  int tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___31 ;
  int tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___38 ;
  int tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;

  {
  if (a1 == a2) {
    while (1) {
      tmp = jit->ip;
      (jit->ip) ++;
      *tmp = (unsigned char)242;
      while (1) {
        if (a1 > 7L) {
          tmp___0 = 4;
        } else {
          tmp___0 = 0;
        }
        if (a3 > 7L) {
          tmp___1 = 1;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)15;
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)94;
      while (1) {
        while (1) {
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a3 & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else
  if (a1 == a3) {
    while (1) {
      while (1) {
        tmp___6 = jit->ip;
        (jit->ip) ++;
        *tmp___6 = (unsigned char)102;
        while (1) {
          tmp___7 = jit->ip;
          (jit->ip) ++;
          *tmp___7 = (unsigned char)15;
          tmp___8 = jit->ip;
          (jit->ip) ++;
          *tmp___8 = (unsigned char)198;
          while (1) {
            while (1) {
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      tmp___10 = jit->ip;
      (jit->ip) ++;
      *tmp___10 = (unsigned char)0;
      break;
    }
    while (1) {
      tmp___11 = jit->ip;
      (jit->ip) ++;
      *tmp___11 = (unsigned char)242;
      while (1) {
        if (a2 > 7L) {
          tmp___12 = 4;
        } else {
          tmp___12 = 0;
        }
        if (a3 > 7L) {
          tmp___13 = 1;
        } else {
          tmp___13 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(tmp___12 | tmp___13);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      tmp___15 = jit->ip;
      (jit->ip) ++;
      *tmp___15 = (unsigned char)15;
      tmp___16 = jit->ip;
      (jit->ip) ++;
      *tmp___16 = (unsigned char)94;
      while (1) {
        while (1) {
          tmp___17 = jit->ip;
          (jit->ip) ++;
          *tmp___17 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a3 & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      tmp___18 = jit->ip;
      (jit->ip) ++;
      *tmp___18 = (unsigned char)242;
      while (1) {
        if (a1 > 7L) {
          tmp___19 = 4;
        } else {
          tmp___19 = 0;
        }
        if (a2 > 7L) {
          tmp___20 = 1;
        } else {
          tmp___20 = 0;
        }
        _amd64_rex_bits___1 = (unsigned char )(tmp___19 | tmp___20);
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___21 = jit->ip;
          (jit->ip) ++;
          *tmp___21 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      tmp___22 = jit->ip;
      (jit->ip) ++;
      *tmp___22 = (unsigned char)15;
      tmp___23 = jit->ip;
      (jit->ip) ++;
      *tmp___23 = (unsigned char)16;
      while (1) {
        while (1) {
          tmp___24 = jit->ip;
          (jit->ip) ++;
          *tmp___24 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        tmp___25 = jit->ip;
        (jit->ip) ++;
        *tmp___25 = (unsigned char)102;
        while (1) {
          tmp___26 = jit->ip;
          (jit->ip) ++;
          *tmp___26 = (unsigned char)15;
          tmp___27 = jit->ip;
          (jit->ip) ++;
          *tmp___27 = (unsigned char)198;
          while (1) {
            while (1) {
              tmp___28 = jit->ip;
              (jit->ip) ++;
              *tmp___28 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      tmp___29 = jit->ip;
      (jit->ip) ++;
      *tmp___29 = (unsigned char)1;
      break;
    }
  } else {
    while (1) {
      tmp___30 = jit->ip;
      (jit->ip) ++;
      *tmp___30 = (unsigned char)242;
      while (1) {
        if (a1 > 7L) {
          tmp___31 = 4;
        } else {
          tmp___31 = 0;
        }
        if (a2 > 7L) {
          tmp___32 = 1;
        } else {
          tmp___32 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )(tmp___31 | tmp___32);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___33 = jit->ip;
          (jit->ip) ++;
          *tmp___33 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___34 = jit->ip;
      (jit->ip) ++;
      *tmp___34 = (unsigned char)15;
      tmp___35 = jit->ip;
      (jit->ip) ++;
      *tmp___35 = (unsigned char)16;
      while (1) {
        while (1) {
          tmp___36 = jit->ip;
          (jit->ip) ++;
          *tmp___36 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      tmp___37 = jit->ip;
      (jit->ip) ++;
      *tmp___37 = (unsigned char)242;
      while (1) {
        if (a1 > 7L) {
          tmp___38 = 4;
        } else {
          tmp___38 = 0;
        }
        if (a3 > 7L) {
          tmp___39 = 1;
        } else {
          tmp___39 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )(tmp___38 | tmp___39);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___40 = jit->ip;
          (jit->ip) ++;
          *tmp___40 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      tmp___41 = jit->ip;
      (jit->ip) ++;
      *tmp___41 = (unsigned char)15;
      tmp___42 = jit->ip;
      (jit->ip) ++;
      *tmp___42 = (unsigned char)94;
      while (1) {
        while (1) {
          tmp___43 = jit->ip;
          (jit->ip) ++;
          *tmp___43 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a3 & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_sse_div_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_sync LOC=UNKNOWN */
static void rmap_sync(jit_op *op , jit_rmap *current , jit_rmap *target , int mode ) 
{ 


  {
  rmap_sync_aux(current->map, target->map, op, mode);
  return;
}
}
/* END FUNCTION-DEF rmap_sync LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_get_arg LOC=UNKNOWN */
static void emit_get_arg(struct jit *jit , jit_op *op ) 
{ 
  struct jit_func_info *info ;
  struct jit_func_info *tmp ;
  int dreg ;
  int arg_id ;
  struct jit_inp_arg *arg ;
  int size ;
  int type ;
  int reg_id ;
  int tmp___0 ;
  int read_from_stack ;
  int stack_pos ;
  struct jit_func_info *tmp___1 ;
  jit_hw_reg *tmp___2 ;
  jit_hw_reg *arg_reg ;
  jit_hw_reg *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char _amd64_rex_bits ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  long tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___13 ;
  int tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___19 ;
  int tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  long tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___29 ;
  int tmp___30 ;
  int tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  long tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___38 ;
  int tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  long tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___48 ;
  int tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;

  {
  tmp = jit_current_func_info(jit);
  info = tmp;
  dreg = (int )op->r_arg[0];
  arg_id = (int )op->r_arg[1];
  arg = info->args + arg_id;
  size = arg->size;
  type = (int )arg->type;
  if (type == 2) {
    tmp___0 = 1;
  } else {
    tmp___0 = 0;
  }
  reg_id = ((tmp___0 & 1) | (3 << 1)) | ((arg_id & 268435455) << 4);
  read_from_stack = 0;
  if (! arg->passed_by_reg) {
    read_from_stack = 1;
    stack_pos = arg->location.stack_pos;
    tmp___1 = jit_current_func_info(jit);
    if (! tmp___1->has_prolog) {
      stack_pos = (int )((unsigned long )stack_pos - sizeof(void *));
      stack_pos = (int )((unsigned long )stack_pos + (unsigned long )jit->push_count * sizeof(void *));
      emit_get_arg_from_stack(jit, type, size, dreg, 4, stack_pos);
      return;
    }
  }
  if (arg->passed_by_reg) {
    tmp___2 = rmap_get(op->regmap, (jit_value )reg_id);
    if ((unsigned long )tmp___2 == (unsigned long )((void *)0)) {
      read_from_stack = 1;
      stack_pos = arg->spill_pos;
    }
  }
  if (read_from_stack) {
    stack_pos = arg->spill_pos;
    emit_get_arg_from_stack(jit, type, size, dreg, 5, stack_pos);
    return;
  }
  tmp___3 = rmap_get(op->regmap, (jit_value )reg_id);
  arg_reg = tmp___3;
  if (type != 2) {
    if ((unsigned long )size == sizeof(void *)) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp___4 = jit->ip;
          (jit->ip) ++;
          *tmp___4 = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___5 = 8;
          } else {
            tmp___5 = 0;
          }
          if (dreg > 7) {
            tmp___6 = 4;
          } else {
            tmp___6 = 0;
          }
          if (arg_reg->id > 7) {
            tmp___7 = 1;
          } else {
            tmp___7 = 0;
          }
          _amd64_rex_bits = (unsigned char )((tmp___5 | tmp___6) | tmp___7);
          if ((int )_amd64_rex_bits != 0) {
            tmp___8 = jit->ip;
            (jit->ip) ++;
            *tmp___8 = (unsigned char )(64 | (int )_amd64_rex_bits);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___8 = jit->ip;
            (jit->ip) ++;
            *tmp___8 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___9 = jit->ip;
        (jit->ip) ++;
        *tmp___9 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___10 = jit->ip;
        (jit->ip) ++;
        *tmp___10 = (unsigned char)139;
        break;
        default: 
        tmp___11 = __builtin_expect(1L, 0L);
        if (tmp___11) {
          __assert_rtn("emit_get_arg", "./jitter-amd64.c", 2696, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = (unsigned char )(((3 << 6) | ((dreg & 7) << 3)) | (arg_reg->id & 7));
            break;
          }
          break;
        }
        break;
      }
    } else
    if (type == 0) {
      while (1) {
        if (size == 4) {
          while (1) {
            while (1) {
              if (dreg > 7) {
                tmp___13 = 4;
              } else {
                tmp___13 = 0;
              }
              if (arg_reg->id > 7) {
                tmp___14 = 1;
              } else {
                tmp___14 = 0;
              }
              _amd64_rex_bits___0 = (unsigned char )((8 | tmp___13) | tmp___14);
              if ((int )_amd64_rex_bits___0 != 0) {
                tmp___15 = jit->ip;
                (jit->ip) ++;
                *tmp___15 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
              }
              break;
            }
            tmp___16 = jit->ip;
            (jit->ip) ++;
            *tmp___16 = (unsigned char)99;
            while (1) {
              while (1) {
                tmp___17 = jit->ip;
                (jit->ip) ++;
                *tmp___17 = (unsigned char )(((3 << 6) | (((dreg & 7) & 7) << 3)) | ((arg_reg->id & 7) & 7));
                break;
              }
              break;
            }
            break;
          }
          break;
        }
        if (size == 2) {
          tmp___18 = jit->ip;
          (jit->ip) ++;
          *tmp___18 = (unsigned char)102;
        }
        while (1) {
          if (dreg > 7) {
            tmp___19 = 4;
          } else {
            tmp___19 = 0;
          }
          if (arg_reg->id > 7) {
            tmp___20 = 1;
          } else {
            tmp___20 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )((8 | tmp___19) | tmp___20);
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___21 = jit->ip;
            (jit->ip) ++;
            *tmp___21 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        switch (size) {
        case 1: 
        tmp___22 = jit->ip;
        (jit->ip) ++;
        *tmp___22 = (unsigned char)15;
        tmp___23 = jit->ip;
        (jit->ip) ++;
        *tmp___23 = (unsigned char)190;
        break;
        case 2: 
        tmp___24 = jit->ip;
        (jit->ip) ++;
        *tmp___24 = (unsigned char)15;
        tmp___25 = jit->ip;
        (jit->ip) ++;
        *tmp___25 = (unsigned char)191;
        break;
        default: 
        tmp___26 = __builtin_expect(1L, 0L);
        if (tmp___26) {
          __assert_rtn("emit_get_arg", "./jitter-amd64.c", 2697, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___27 = jit->ip;
            (jit->ip) ++;
            *tmp___27 = (unsigned char )(((3 << 6) | ((dreg & 7) << 3)) | (arg_reg->id & 7));
            break;
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        if (size == 8) {
          goto _L;
        } else
        if (size == 4) {
          _L: /* CIL Label */ 
          while (1) {
            if (size == 2) {
              tmp___28 = jit->ip;
              (jit->ip) ++;
              *tmp___28 = (unsigned char)102;
            }
            while (1) {
              if (size > 4) {
                tmp___29 = 8;
              } else {
                tmp___29 = 0;
              }
              if (dreg > 7) {
                tmp___30 = 4;
              } else {
                tmp___30 = 0;
              }
              if (arg_reg->id > 7) {
                tmp___31 = 1;
              } else {
                tmp___31 = 0;
              }
              _amd64_rex_bits___2 = (unsigned char )((tmp___29 | tmp___30) | tmp___31);
              if ((int )_amd64_rex_bits___2 != 0) {
                tmp___32 = jit->ip;
                (jit->ip) ++;
                *tmp___32 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
              } else
              if (size == 1) {
                tmp___32 = jit->ip;
                (jit->ip) ++;
                *tmp___32 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
              }
              break;
            }
            switch (size) {
            case 1: 
            tmp___33 = jit->ip;
            (jit->ip) ++;
            *tmp___33 = (unsigned char)138;
            break;
            case 8: 
            case 4: 
            case 2: 
            tmp___34 = jit->ip;
            (jit->ip) ++;
            *tmp___34 = (unsigned char)139;
            break;
            default: 
            tmp___35 = __builtin_expect(1L, 0L);
            if (tmp___35) {
              __assert_rtn("emit_get_arg", "./jitter-amd64.c", 2698, "0");
            }
            }
            while (1) {
              while (1) {
                tmp___36 = jit->ip;
                (jit->ip) ++;
                *tmp___36 = (unsigned char )(((3 << 6) | ((dreg & 7) << 3)) | (arg_reg->id & 7));
                break;
              }
              break;
            }
            break;
          }
          break;
        }
        if (size == 2) {
          tmp___37 = jit->ip;
          (jit->ip) ++;
          *tmp___37 = (unsigned char)102;
        }
        while (1) {
          if (dreg > 7) {
            tmp___38 = 4;
          } else {
            tmp___38 = 0;
          }
          if (arg_reg->id > 7) {
            tmp___39 = 1;
          } else {
            tmp___39 = 0;
          }
          _amd64_rex_bits___3 = (unsigned char )((8 | tmp___38) | tmp___39);
          if ((int )_amd64_rex_bits___3 != 0) {
            tmp___40 = jit->ip;
            (jit->ip) ++;
            *tmp___40 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          }
          break;
        }
        switch (size) {
        case 1: 
        tmp___41 = jit->ip;
        (jit->ip) ++;
        *tmp___41 = (unsigned char)15;
        tmp___42 = jit->ip;
        (jit->ip) ++;
        *tmp___42 = (unsigned char)182;
        break;
        case 2: 
        tmp___43 = jit->ip;
        (jit->ip) ++;
        *tmp___43 = (unsigned char)15;
        tmp___44 = jit->ip;
        (jit->ip) ++;
        *tmp___44 = (unsigned char)183;
        break;
        default: 
        tmp___45 = __builtin_expect(1L, 0L);
        if (tmp___45) {
          __assert_rtn("emit_get_arg", "./jitter-amd64.c", 2698, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___46 = jit->ip;
            (jit->ip) ++;
            *tmp___46 = (unsigned char )(((3 << 6) | ((dreg & 7) << 3)) | (arg_reg->id & 7));
            break;
          }
          break;
        }
        break;
      }
    }
  } else {
    while (1) {
      tmp___47 = jit->ip;
      (jit->ip) ++;
      *tmp___47 = (unsigned char)242;
      while (1) {
        if (dreg > 7) {
          tmp___48 = 4;
        } else {
          tmp___48 = 0;
        }
        if (arg_reg->id > 7) {
          tmp___49 = 1;
        } else {
          tmp___49 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )(tmp___48 | tmp___49);
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___50 = jit->ip;
          (jit->ip) ++;
          *tmp___50 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      tmp___51 = jit->ip;
      (jit->ip) ++;
      *tmp___51 = (unsigned char)15;
      tmp___52 = jit->ip;
      (jit->ip) ++;
      *tmp___52 = (unsigned char)16;
      while (1) {
        while (1) {
          tmp___53 = jit->ip;
          (jit->ip) ++;
          *tmp___53 = (unsigned char )(((3 << 6) | ((dreg & 7) << 3)) | (arg_reg->id & 7));
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_get_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF tolower LOC=UNKNOWN */
__inline extern int tolower(int _c ) 
{ 
  __darwin_ct_rune_t tmp ;

  {
  tmp = __tolower(_c);
  return (tmp);
}
}
/* END FUNCTION-DEF tolower LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_arg_layout_create_input LOC=UNKNOWN */
static struct jit_arg_layout *jit_arg_layout_create_input(struct jit *jit , struct jit_func_info *info ,
                                                          int arg_cnt ) 
{ 
  struct jit_arg_layout *layout ;
  struct jit_arg_layout *tmp ;
  int i ;
  struct jit_inp_arg *arg ;

  {
  tmp = jit_arg_layout_create(jit, arg_cnt + 1);
  layout = tmp;
  i = 0;
  while (i <= arg_cnt) {
    arg = info->args + i;
    jit_arg_layout_add(layout, (unsigned int )arg->type == 2U, (struct jit_out_arg *)((void *)0));
    i ++;
  }
  return (layout);
}
}
/* END FUNCTION-DEF jit_arg_layout_create_input LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_collect_statistics LOC=UNKNOWN */
void jit_collect_statistics(struct jit *jit ) 
{ 
  int i ;
  int j ;
  int ops_from_return ;
  jit_tree *last_hints ;
  jit_op *op ;
  jit_op *tmp ;
  jit_tree *new_hints ;
  jit_tree *tmp___0 ;
  jit_value regs[3] ;
  int found_regs ;
  int found ;
  jit_value reg ;
  int tmp___1 ;
  jit_value reg___0 ;
  jit_tree *hint ;
  jit_tree *tmp___2 ;
  struct jit_allocator_hint *new_hint ;
  void *tmp___3 ;
  unsigned long tmp___4 ;

  {
  ops_from_return = 0;
  last_hints = (jit_tree *)((void *)0);
  tmp = jit_op_last(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    tmp___0 = jit_tree_clone(last_hints);
    new_hints = tmp___0;
    op->normalized_pos = ops_from_return;
    found_regs = 0;
    i = 0;
    while (i < 3) {
      if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 1) {
        goto _L;
      } else
      if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 3) {
        _L: /* CIL Label */ 
        found = 0;
        reg = op->arg[i];
        j = 0;
        while (j < found_regs) {
          if (regs[j] == reg) {
            found = 1;
            break;
          }
          j ++;
        }
        if (! found) {
          tmp___1 = found_regs;
          found_regs ++;
          regs[tmp___1] = reg;
        }
      }
      i ++;
    }
    i = 0;
    while (i < found_regs) {
      reg___0 = regs[i];
      tmp___2 = jit_tree_search(new_hints, reg___0);
      hint = tmp___2;
      tmp___3 = malloc(sizeof(struct jit_allocator_hint ));
      new_hint = (struct jit_allocator_hint *)tmp___3;
      if (hint) {
        tmp___4 = __builtin_object_size((void *)new_hint, 0);
        __builtin___memcpy_chk((void *)new_hint, (void const   *)hint->value, sizeof(struct jit_allocator_hint ),
                               tmp___4);
      } else {
        new_hint->last_pos = 0;
        new_hint->should_be_calleesaved = 0;
        new_hint->should_be_eax = 0;
      }
      new_hint->refs = 0;
      new_hint->last_pos = ops_from_return;
      if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 544U) {
        (new_hint->should_be_eax) ++;
      } else
      if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 792U) {
        (new_hint->should_be_eax) ++;
      }
      new_hints = jit_tree_insert(new_hints, reg___0, (jit_tree_value )new_hint, (int *)((void *)0));
      i ++;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 648U) {
      mark_calleesaved_regs(new_hints, op);
    }
    hints_refcount_inc(new_hints);
    op->allocator_hints = new_hints;
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 384U) {
      last_hints = (jit_tree *)((void *)0);
      ops_from_return = 0;
    } else {
      last_hints = new_hints;
      ops_from_return ++;
    }
    op = op->prev;
  }
  return;
}
}
/* END FUNCTION-DEF jit_collect_statistics LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF sse_mov_reg_safeimm LOC=UNKNOWN */
static void sse_mov_reg_safeimm(struct jit *jit , jit_op *op , jit_value reg , double *imm ) 
{ 
  jit_hw_reg *r ;
  jit_hw_reg *tmp ;
  int _amd64_width_temp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  unsigned char *tmp___4 ;
  int tmp___5 ;
  unsigned char *tmp___6 ;
  amd64_imm_buf imb ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  int tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___21 ;
  int tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  int _amd64_width_temp___0 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___45 ;
  int tmp___46 ;
  int tmp___47 ;
  unsigned char *tmp___48 ;
  int tmp___49 ;
  unsigned char *tmp___50 ;
  amd64_imm_buf imb___3 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  int tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char *tmp___98 ;

  {
  if ((jit_unsigned_value )imm > 4294967295UL) {
    tmp = jit_get_unused_reg(jit->reg_al, op, 0);
    r = tmp;
    if (r) {
      while (1) {
        _amd64_width_temp = (size_t )((jit_value )imm) == (size_t )((int )((size_t )((jit_value )imm)));
        while (1) {
          while (1) {
            if (_amd64_width_temp) {
              tmp___2 = 4;
            } else {
              tmp___2 = 8;
            }
            if (tmp___2 > 4) {
              tmp___1 = 8;
            } else {
              tmp___1 = 0;
            }
            if (r->id > 7) {
              tmp___3 = 1;
            } else {
              tmp___3 = 0;
            }
            _amd64_rex_bits = (unsigned char )(tmp___1 | tmp___3);
            if ((int )_amd64_rex_bits != 0) {
              tmp___4 = jit->ip;
              (jit->ip) ++;
              *tmp___4 = (unsigned char )(64 | (int )_amd64_rex_bits);
            } else {
              if (_amd64_width_temp) {
                tmp___5 = 4;
              } else {
                tmp___5 = 8;
              }
              if (tmp___5 == 1) {
                tmp___4 = jit->ip;
                (jit->ip) ++;
                *tmp___4 = (unsigned char )(64 | (int )_amd64_rex_bits);
              }
            }
            break;
          }
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = (unsigned char )(184 + (r->id & 7));
          if (_amd64_width_temp) {
            tmp___19 = 4;
          } else {
            tmp___19 = 8;
          }
          if (tmp___19 == 8) {
            while (1) {
              imb.val = (size_t )((jit_value )imm);
              tmp___7 = jit->ip;
              (jit->ip) ++;
              *tmp___7 = imb.b[0];
              tmp___8 = jit->ip;
              (jit->ip) ++;
              *tmp___8 = imb.b[1];
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = imb.b[2];
              tmp___10 = jit->ip;
              (jit->ip) ++;
              *tmp___10 = imb.b[3];
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = imb.b[4];
              tmp___12 = jit->ip;
              (jit->ip) ++;
              *tmp___12 = imb.b[5];
              tmp___13 = jit->ip;
              (jit->ip) ++;
              *tmp___13 = imb.b[6];
              tmp___14 = jit->ip;
              (jit->ip) ++;
              *tmp___14 = imb.b[7];
              break;
            }
          } else {
            while (1) {
              imb___0.val = (int )((size_t )((jit_value )imm));
              tmp___15 = jit->ip;
              (jit->ip) ++;
              *tmp___15 = imb___0.b[0];
              tmp___16 = jit->ip;
              (jit->ip) ++;
              *tmp___16 = imb___0.b[1];
              tmp___17 = jit->ip;
              (jit->ip) ++;
              *tmp___17 = imb___0.b[2];
              tmp___18 = jit->ip;
              (jit->ip) ++;
              *tmp___18 = imb___0.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      while (1) {
        tmp___20 = jit->ip;
        (jit->ip) ++;
        *tmp___20 = (unsigned char)242;
        while (1) {
          if (reg > 7L) {
            tmp___21 = 4;
          } else {
            tmp___21 = 0;
          }
          if (r->id > 7) {
            tmp___22 = 1;
          } else {
            tmp___22 = 0;
          }
          _amd64_rex_bits___0 = (unsigned char )(tmp___21 | tmp___22);
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___23 = jit->ip;
            (jit->ip) ++;
            *tmp___23 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___24 = jit->ip;
        (jit->ip) ++;
        *tmp___24 = (unsigned char)15;
        tmp___25 = jit->ip;
        (jit->ip) ++;
        *tmp___25 = (unsigned char)16;
        while (1) {
          if ((r->id & 7) == 4) {
            while (1) {
              tmp___26 = jit->ip;
              (jit->ip) ++;
              *tmp___26 = (unsigned char )((((reg & 7L) & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___27 = jit->ip;
              (jit->ip) ++;
              *tmp___27 = (unsigned char )((4 << 3) | 4);
              break;
            }
            break;
          }
          if ((r->id & 7) != 5) {
            while (1) {
              tmp___36 = jit->ip;
              (jit->ip) ++;
              *tmp___36 = (unsigned char )((((reg & 7L) & 7L) << 3) | (long )((r->id & 7) & 7));
              break;
            }
            break;
          }
          while (1) {
            tmp___37 = jit->ip;
            (jit->ip) ++;
            *tmp___37 = (unsigned char )(((long )(1 << 6) | (((reg & 7L) & 7L) << 3)) | (long )((r->id & 7) & 7));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)0;
            (jit->ip) ++;
            break;
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)0;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___43 = jit->ip;
            (jit->ip) ++;
            *tmp___43 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___44 = jit->ip;
        (jit->ip) ++;
        *tmp___44 = (unsigned char)80;
        break;
      }
      while (1) {
        _amd64_width_temp___0 = (size_t )((jit_value )imm) == (size_t )((int )((size_t )((jit_value )imm)));
        while (1) {
          while (1) {
            if (_amd64_width_temp___0) {
              tmp___47 = 4;
            } else {
              tmp___47 = 8;
            }
            if (tmp___47 > 4) {
              tmp___46 = 8;
            } else {
              tmp___46 = 0;
            }
            _amd64_rex_bits___2 = (unsigned char )tmp___46;
            if ((int )_amd64_rex_bits___2 != 0) {
              tmp___48 = jit->ip;
              (jit->ip) ++;
              *tmp___48 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
            } else {
              if (_amd64_width_temp___0) {
                tmp___49 = 4;
              } else {
                tmp___49 = 8;
              }
              if (tmp___49 == 1) {
                tmp___48 = jit->ip;
                (jit->ip) ++;
                *tmp___48 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
              }
            }
            break;
          }
          tmp___50 = jit->ip;
          (jit->ip) ++;
          *tmp___50 = (unsigned char)184;
          if (_amd64_width_temp___0) {
            tmp___63 = 4;
          } else {
            tmp___63 = 8;
          }
          if (tmp___63 == 8) {
            while (1) {
              imb___3.val = (size_t )((jit_value )imm);
              tmp___51 = jit->ip;
              (jit->ip) ++;
              *tmp___51 = imb___3.b[0];
              tmp___52 = jit->ip;
              (jit->ip) ++;
              *tmp___52 = imb___3.b[1];
              tmp___53 = jit->ip;
              (jit->ip) ++;
              *tmp___53 = imb___3.b[2];
              tmp___54 = jit->ip;
              (jit->ip) ++;
              *tmp___54 = imb___3.b[3];
              tmp___55 = jit->ip;
              (jit->ip) ++;
              *tmp___55 = imb___3.b[4];
              tmp___56 = jit->ip;
              (jit->ip) ++;
              *tmp___56 = imb___3.b[5];
              tmp___57 = jit->ip;
              (jit->ip) ++;
              *tmp___57 = imb___3.b[6];
              tmp___58 = jit->ip;
              (jit->ip) ++;
              *tmp___58 = imb___3.b[7];
              break;
            }
          } else {
            while (1) {
              imb___4.val = (int )((size_t )((jit_value )imm));
              tmp___59 = jit->ip;
              (jit->ip) ++;
              *tmp___59 = imb___4.b[0];
              tmp___60 = jit->ip;
              (jit->ip) ++;
              *tmp___60 = imb___4.b[1];
              tmp___61 = jit->ip;
              (jit->ip) ++;
              *tmp___61 = imb___4.b[2];
              tmp___62 = jit->ip;
              (jit->ip) ++;
              *tmp___62 = imb___4.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      while (1) {
        tmp___64 = jit->ip;
        (jit->ip) ++;
        *tmp___64 = (unsigned char)242;
        while (1) {
          if (reg > 7L) {
            tmp___65 = 4;
          } else {
            tmp___65 = 0;
          }
          _amd64_rex_bits___3 = (unsigned char )tmp___65;
          if ((int )_amd64_rex_bits___3 != 0) {
            tmp___66 = jit->ip;
            (jit->ip) ++;
            *tmp___66 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          }
          break;
        }
        tmp___67 = jit->ip;
        (jit->ip) ++;
        *tmp___67 = (unsigned char)15;
        tmp___68 = jit->ip;
        (jit->ip) ++;
        *tmp___68 = (unsigned char)16;
        while (1) {
          while (1) {
            tmp___79 = jit->ip;
            (jit->ip) ++;
            *tmp___79 = (unsigned char )(((reg & 7L) & 7L) << 3);
            break;
          }
          break;
          while (1) {
            tmp___80 = jit->ip;
            (jit->ip) ++;
            *tmp___80 = (unsigned char )((long )(1 << 6) | (((reg & 7L) & 7L) << 3));
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)0;
            (jit->ip) ++;
            break;
          }
          break;
        }
        break;
      }
      while (1) {
        while (1) {
          _amd64_rex_bits___4 = (unsigned char)0;
          if ((int )_amd64_rex_bits___4 != 0) {
            tmp___86 = jit->ip;
            (jit->ip) ++;
            *tmp___86 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
          }
          break;
        }
        tmp___87 = jit->ip;
        (jit->ip) ++;
        *tmp___87 = (unsigned char)88;
        break;
      }
    }
  } else {
    while (1) {
      tmp___88 = jit->ip;
      (jit->ip) ++;
      *tmp___88 = (unsigned char)242;
      while (1) {
        if (reg > 7L) {
          tmp___89 = 4;
        } else {
          tmp___89 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )tmp___89;
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___90 = jit->ip;
          (jit->ip) ++;
          *tmp___90 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      tmp___91 = jit->ip;
      (jit->ip) ++;
      *tmp___91 = (unsigned char)15;
      tmp___92 = jit->ip;
      (jit->ip) ++;
      *tmp___92 = (unsigned char)16;
      while (1) {
        tmp___93 = jit->ip;
        (jit->ip) ++;
        *tmp___93 = (unsigned char )(((reg & 7L) << 3) | 4L);
        break;
      }
      while (1) {
        tmp___94 = jit->ip;
        (jit->ip) ++;
        *tmp___94 = (unsigned char )((4 << 3) | 5);
        break;
      }
      while (1) {
        imb___7.val = (int )((jit_value )imm);
        tmp___95 = jit->ip;
        (jit->ip) ++;
        *tmp___95 = imb___7.b[0];
        tmp___96 = jit->ip;
        (jit->ip) ++;
        *tmp___96 = imb___7.b[1];
        tmp___97 = jit->ip;
        (jit->ip) ++;
        *tmp___97 = imb___7.b[2];
        tmp___98 = jit->ip;
        (jit->ip) ++;
        *tmp___98 = imb___7.b[3];
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF sse_mov_reg_safeimm LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_push_caller_saved_regs LOC=UNKNOWN */
static int emit_push_caller_saved_regs(struct jit *jit , jit_op *op ) 
{ 
  int stack_offset ;
  struct jit_reg_allocator *al ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  x86_imm_buf imb ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  int count ;

  {
  stack_offset = 0;
  al = jit->reg_al;
  while (op) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 648U) {
      break;
    }
    op = op->next;
  }
  stack_offset = generic_push_caller_saved_regs(jit, op, al->gp_reg_cnt, al->gp_regs,
                                                0, al->ret_reg, stack_offset);
  stack_offset = generic_push_caller_saved_regs(jit, op, al->fp_reg_cnt, al->fp_regs,
                                                1, al->fpret_reg, stack_offset);
  if (stack_offset) {
    while (1) {
      if (stack_offset >= -128) {
        if (stack_offset <= 127) {
          while (1) {
            _amd64_rex_bits = (unsigned char)8;
            if ((int )_amd64_rex_bits != 0) {
              tmp = jit->ip;
              (jit->ip) ++;
              *tmp = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___0 = jit->ip;
          (jit->ip) ++;
          *tmp___0 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___1 = jit->ip;
              (jit->ip) ++;
              *tmp___1 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(stack_offset & 255);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)8;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___8 = jit->ip;
            (jit->ip) ++;
            *tmp___8 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___9 = jit->ip;
        (jit->ip) ++;
        *tmp___9 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___10 = jit->ip;
            (jit->ip) ++;
            *tmp___10 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = stack_offset;
          tmp___11 = jit->ip;
          (jit->ip) ++;
          *tmp___11 = imb___0.b[0];
          tmp___12 = jit->ip;
          (jit->ip) ++;
          *tmp___12 = imb___0.b[1];
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = imb___0.b[2];
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = imb___0.b[3];
          break;
        }
      }
      break;
    }
  }
  count = (int )((unsigned long )stack_offset / sizeof(void *));
  return (count);
}
}
/* END FUNCTION-DEF emit_push_caller_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF check_uninitialized_registers LOC=UNKNOWN */
static int check_uninitialized_registers(jit_op *op , char *msg_buf ) 
{ 
  char buf[4096] ;
  size_t tmp ;

  {
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) != 384U) {
    return (0);
  }
  if ((unsigned long )(op->live_in)->root != (unsigned long )((void *)0)) {
    buf[0] = (char )'\000';
    jit_tree_walk((op->live_in)->root, & print_regs, (void *)(buf));
    tmp = strlen((char const   *)(buf));
    if (tmp) {
      append_msg(msg_buf, (char *)"uninitialized register(s): %s", buf);
      return (8);
    }
  }
  return (0);
}
}
/* END FUNCTION-DEF check_uninitialized_registers LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_cond_op LOC=UNKNOWN */
static void emit_cond_op(struct jit *jit , struct jit_op *op , int amd64_cond , int imm ,
                         int sign ) 
{ 
  unsigned char _amd64_rex_bits ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  x86_imm_buf imb ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___17 ;
  int tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___22 ;
  int tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  amd64_imm_buf imb___1 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___38 ;
  unsigned char *tmp___39 ;
  long tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___45 ;
  int tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned long tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  amd64_imm_buf imb___3 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char _amd64_rex_bits___7 ;
  unsigned char *tmp___67 ;
  long tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___73 ;
  int tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned long tmp___78 ;
  unsigned char *tmp___79 ;

  {
  if (imm) {
    while (1) {
      if ((int )op->r_arg[2] >= -128) {
        if ((int )op->r_arg[2] <= 127) {
          while (1) {
            if (op->r_arg[1] > 7L) {
              tmp = 1;
            } else {
              tmp = 0;
            }
            _amd64_rex_bits = (unsigned char )(8 | tmp);
            if ((int )_amd64_rex_bits != 0) {
              tmp___0 = jit->ip;
              (jit->ip) ++;
              *tmp___0 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___1 = jit->ip;
          (jit->ip) ++;
          *tmp___1 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___2 = jit->ip;
              (jit->ip) ++;
              *tmp___2 = (unsigned char )((long )((3 << 6) | (7 << 3)) | (op->r_arg[1] & 7L));
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(op->r_arg[2] & 255L);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else
      _L: /* CIL Label */ 
      if (op->r_arg[1] == 0L) {
        while (1) {
          _amd64_rex_bits___0 = (unsigned char)8;
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char )((7 << 3) + 5);
        while (1) {
          imb.val = (int )op->r_arg[2];
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = imb.b[0];
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = imb.b[1];
          tmp___7 = jit->ip;
          (jit->ip) ++;
          *tmp___7 = imb.b[2];
          tmp___8 = jit->ip;
          (jit->ip) ++;
          *tmp___8 = imb.b[3];
          break;
        }
      } else {
        while (1) {
          if (op->r_arg[1] > 7L) {
            tmp___9 = 1;
          } else {
            tmp___9 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )(8 | tmp___9);
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___10 = jit->ip;
            (jit->ip) ++;
            *tmp___10 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___11 = jit->ip;
        (jit->ip) ++;
        *tmp___11 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = (unsigned char )((long )((3 << 6) | (7 << 3)) | (op->r_arg[1] & 7L));
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = (int )op->r_arg[2];
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = imb___0.b[0];
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = imb___0.b[1];
          tmp___15 = jit->ip;
          (jit->ip) ++;
          *tmp___15 = imb___0.b[2];
          tmp___16 = jit->ip;
          (jit->ip) ++;
          *tmp___16 = imb___0.b[3];
          break;
        }
      }
      break;
    }
  } else {
    while (1) {
      while (1) {
        if (op->r_arg[1] > 7L) {
          tmp___17 = 4;
        } else {
          tmp___17 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___18 = 1;
        } else {
          tmp___18 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )((8 | tmp___17) | tmp___18);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___19 = jit->ip;
          (jit->ip) ++;
          *tmp___19 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___20 = jit->ip;
      (jit->ip) ++;
      *tmp___20 = (unsigned char )((7 << 3) + 3);
      while (1) {
        while (1) {
          tmp___21 = jit->ip;
          (jit->ip) ++;
          *tmp___21 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[1] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  if (op->r_arg[0] != 6L) {
    if (op->r_arg[0] != 7L) {
      while (1) {
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___22 = 8;
          } else {
            tmp___22 = 0;
          }
          if (op->r_arg[0] > 7L) {
            tmp___23 = 1;
          } else {
            tmp___23 = 0;
          }
          _amd64_rex_bits___3 = (unsigned char )(tmp___22 | tmp___23);
          if ((int )_amd64_rex_bits___3 != 0) {
            tmp___24 = jit->ip;
            (jit->ip) ++;
            *tmp___24 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___24 = jit->ip;
            (jit->ip) ++;
            *tmp___24 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          }
          break;
        }
        tmp___25 = jit->ip;
        (jit->ip) ++;
        *tmp___25 = (unsigned char )(184L + (op->r_arg[0] & 7L));
        if (sizeof(void *) == 8UL) {
          while (1) {
            imb___1.val = (size_t )0;
            tmp___26 = jit->ip;
            (jit->ip) ++;
            *tmp___26 = imb___1.b[0];
            tmp___27 = jit->ip;
            (jit->ip) ++;
            *tmp___27 = imb___1.b[1];
            tmp___28 = jit->ip;
            (jit->ip) ++;
            *tmp___28 = imb___1.b[2];
            tmp___29 = jit->ip;
            (jit->ip) ++;
            *tmp___29 = imb___1.b[3];
            tmp___30 = jit->ip;
            (jit->ip) ++;
            *tmp___30 = imb___1.b[4];
            tmp___31 = jit->ip;
            (jit->ip) ++;
            *tmp___31 = imb___1.b[5];
            tmp___32 = jit->ip;
            (jit->ip) ++;
            *tmp___32 = imb___1.b[6];
            tmp___33 = jit->ip;
            (jit->ip) ++;
            *tmp___33 = imb___1.b[7];
            break;
          }
        } else {
          while (1) {
            imb___2.val = (int )((size_t )0);
            tmp___34 = jit->ip;
            (jit->ip) ++;
            *tmp___34 = imb___2.b[0];
            tmp___35 = jit->ip;
            (jit->ip) ++;
            *tmp___35 = imb___2.b[1];
            tmp___36 = jit->ip;
            (jit->ip) ++;
            *tmp___36 = imb___2.b[2];
            tmp___37 = jit->ip;
            (jit->ip) ++;
            *tmp___37 = imb___2.b[3];
            break;
          }
        }
        break;
      }
      while (1) {
        while (1) {
          if (op->r_arg[0] > 7L) {
            tmp___38 = 1;
          } else {
            tmp___38 = 0;
          }
          _amd64_rex_bits___4 = (unsigned char )tmp___38;
          if ((int )_amd64_rex_bits___4 != 0) {
            tmp___39 = jit->ip;
            (jit->ip) ++;
            *tmp___39 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
          } else {
            tmp___39 = jit->ip;
            (jit->ip) ++;
            *tmp___39 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
          }
          break;
        }
        while (1) {
          tmp___40 = __builtin_expect(0L, 0L);
          if (tmp___40) {
            __assert_rtn("emit_cond_op", "./jitter-amd64.c", 2968, "1");
          }
          tmp___41 = jit->ip;
          (jit->ip) ++;
          *tmp___41 = (unsigned char)15;
          if (sign) {
            tmp___42 = jit->ip;
            (jit->ip) ++;
            *tmp___42 = (unsigned char )((int const   )x86_cc_signed_map[amd64_cond] + 32);
          } else {
            tmp___43 = jit->ip;
            (jit->ip) ++;
            *tmp___43 = (unsigned char )((int const   )x86_cc_unsigned_map[amd64_cond] + 32);
          }
          while (1) {
            while (1) {
              tmp___44 = jit->ip;
              (jit->ip) ++;
              *tmp___44 = (unsigned char )((long )(3 << 6) | ((op->r_arg[0] & 7L) & 7L));
              break;
            }
            break;
          }
          break;
        }
        break;
      }
    } else {
      goto _L___0;
    }
  } else {
    _L___0: /* CIL Label */ 
    while (1) {
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___45 = 8;
        } else {
          tmp___45 = 0;
        }
        if (op->r_arg[0] > 7L) {
          tmp___46 = 1;
        } else {
          tmp___46 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(tmp___45 | tmp___46);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___47 = jit->ip;
          (jit->ip) ++;
          *tmp___47 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___47 = jit->ip;
          (jit->ip) ++;
          *tmp___47 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      while (1) {
        if (sizeof(void *) == 8UL) {
          tmp___50 = 4UL;
        } else {
          tmp___50 = sizeof(void *);
        }
        if (tmp___50 == 1UL) {
          tmp___48 = jit->ip;
          (jit->ip) ++;
          *tmp___48 = (unsigned char)134;
        } else {
          tmp___49 = jit->ip;
          (jit->ip) ++;
          *tmp___49 = (unsigned char)135;
        }
        while (1) {
          while (1) {
            tmp___51 = jit->ip;
            (jit->ip) ++;
            *tmp___51 = (unsigned char )((long )(3 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___52 = 8;
        } else {
          tmp___52 = 0;
        }
        _amd64_rex_bits___6 = (unsigned char )tmp___52;
        if ((int )_amd64_rex_bits___6 != 0) {
          tmp___53 = jit->ip;
          (jit->ip) ++;
          *tmp___53 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___53 = jit->ip;
          (jit->ip) ++;
          *tmp___53 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
        }
        break;
      }
      tmp___54 = jit->ip;
      (jit->ip) ++;
      *tmp___54 = (unsigned char)184;
      if (sizeof(void *) == 8UL) {
        while (1) {
          imb___3.val = (size_t )0;
          tmp___55 = jit->ip;
          (jit->ip) ++;
          *tmp___55 = imb___3.b[0];
          tmp___56 = jit->ip;
          (jit->ip) ++;
          *tmp___56 = imb___3.b[1];
          tmp___57 = jit->ip;
          (jit->ip) ++;
          *tmp___57 = imb___3.b[2];
          tmp___58 = jit->ip;
          (jit->ip) ++;
          *tmp___58 = imb___3.b[3];
          tmp___59 = jit->ip;
          (jit->ip) ++;
          *tmp___59 = imb___3.b[4];
          tmp___60 = jit->ip;
          (jit->ip) ++;
          *tmp___60 = imb___3.b[5];
          tmp___61 = jit->ip;
          (jit->ip) ++;
          *tmp___61 = imb___3.b[6];
          tmp___62 = jit->ip;
          (jit->ip) ++;
          *tmp___62 = imb___3.b[7];
          break;
        }
      } else {
        while (1) {
          imb___4.val = (int )((size_t )0);
          tmp___63 = jit->ip;
          (jit->ip) ++;
          *tmp___63 = imb___4.b[0];
          tmp___64 = jit->ip;
          (jit->ip) ++;
          *tmp___64 = imb___4.b[1];
          tmp___65 = jit->ip;
          (jit->ip) ++;
          *tmp___65 = imb___4.b[2];
          tmp___66 = jit->ip;
          (jit->ip) ++;
          *tmp___66 = imb___4.b[3];
          break;
        }
      }
      break;
    }
    while (1) {
      while (1) {
        _amd64_rex_bits___7 = (unsigned char)0;
        if ((int )_amd64_rex_bits___7 != 0) {
          tmp___67 = jit->ip;
          (jit->ip) ++;
          *tmp___67 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
        } else {
          tmp___67 = jit->ip;
          (jit->ip) ++;
          *tmp___67 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
        }
        break;
      }
      while (1) {
        tmp___68 = __builtin_expect(0L, 0L);
        if (tmp___68) {
          __assert_rtn("emit_cond_op", "./jitter-amd64.c", 2972, "1");
        }
        tmp___69 = jit->ip;
        (jit->ip) ++;
        *tmp___69 = (unsigned char)15;
        if (sign) {
          tmp___70 = jit->ip;
          (jit->ip) ++;
          *tmp___70 = (unsigned char )((int const   )x86_cc_signed_map[amd64_cond] + 32);
        } else {
          tmp___71 = jit->ip;
          (jit->ip) ++;
          *tmp___71 = (unsigned char )((int const   )x86_cc_unsigned_map[amd64_cond] + 32);
        }
        while (1) {
          while (1) {
            tmp___72 = jit->ip;
            (jit->ip) ++;
            *tmp___72 = (unsigned char )(3 << 6);
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___73 = 8;
        } else {
          tmp___73 = 0;
        }
        if (op->r_arg[0] > 7L) {
          tmp___74 = 1;
        } else {
          tmp___74 = 0;
        }
        _amd64_rex_bits___8 = (unsigned char )(tmp___73 | tmp___74);
        if ((int )_amd64_rex_bits___8 != 0) {
          tmp___75 = jit->ip;
          (jit->ip) ++;
          *tmp___75 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___75 = jit->ip;
          (jit->ip) ++;
          *tmp___75 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
        }
        break;
      }
      while (1) {
        if (sizeof(void *) == 8UL) {
          tmp___78 = 4UL;
        } else {
          tmp___78 = sizeof(void *);
        }
        if (tmp___78 == 1UL) {
          tmp___76 = jit->ip;
          (jit->ip) ++;
          *tmp___76 = (unsigned char)134;
        } else {
          tmp___77 = jit->ip;
          (jit->ip) ++;
          *tmp___77 = (unsigned char)135;
        }
        while (1) {
          while (1) {
            tmp___79 = jit->ip;
            (jit->ip) ++;
            *tmp___79 = (unsigned char )((long )(3 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_cond_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF join_muli_addr LOC=UNKNOWN */
static int join_muli_addr(jit_op *op , jit_op *nextop ) 
{ 
  int tmp ;
  jit_value add_reg ;
  jit_value tmp___0 ;
  int tmp___1 ;

  {
  tmp = is_suitable_mul(op);
  if (tmp) {
    if (nextop->arg[1] == nextop->arg[2]) {
      return (0);
    }
  } else {
    return (0);
  }
  if (nextop->arg[1] == op->arg[0]) {
    tmp___0 = nextop->arg[2];
  } else {
    tmp___0 = nextop->arg[1];
  }
  add_reg = tmp___0;
  nextop->code = (unsigned short)369;
  nextop->spec = (unsigned char )(((1 << 4) | (1 << 2)) | 3);
  nextop->arg[1] = add_reg;
  nextop->arg[2] = op->arg[1];
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 96U) {
    tmp___1 = shift_index((int )op->arg[2]);
    nextop->arg_size = (unsigned char )tmp___1;
  } else {
    nextop->arg_size = (unsigned char )op->arg[2];
  }
  make_nop(op);
  return (1);
}
}
/* END FUNCTION-DEF join_muli_addr LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF compiler_based_debugger LOC=UNKNOWN */
static void compiler_based_debugger(struct jit *jit ) 
{ 
  char obj_file_name[12] ;
  int obj_file_fd ;
  int tmp ;
  char *cmd1_fmt ;
  char *cmd2_fmt ;
  size_t tmp___0 ;
  size_t tmp___1 ;
  char *cmd1 ;
  unsigned long __lengthofcmd1 ;
  void *tmp___2 ;
  size_t tmp___3 ;
  size_t tmp___4 ;
  char *cmd2 ;
  unsigned long __lengthofcmd2 ;
  void *tmp___5 ;
  unsigned long tmp___6 ;
  FILE *f ;
  FILE *tmp___7 ;
  int size ;
  int i ;
  unsigned long tmp___8 ;

  {
  obj_file_name[0] = (char )'m';
  obj_file_name[1] = (char )'y';
  obj_file_name[2] = (char )'j';
  obj_file_name[3] = (char )'i';
  obj_file_name[4] = (char )'t';
  obj_file_name[5] = (char )'X';
  obj_file_name[6] = (char )'X';
  obj_file_name[7] = (char )'X';
  obj_file_name[8] = (char )'X';
  obj_file_name[9] = (char )'X';
  obj_file_name[10] = (char )'X';
  obj_file_name[11] = (char )'\000';
  tmp = mkstemp(obj_file_name);
  obj_file_fd = tmp;
  cmd1_fmt = (char *)"cc -x assembler -c -o %s -";
  cmd2_fmt = (char *)"otool -tvVj %s";
  tmp___0 = strlen((char const   *)cmd1_fmt);
  tmp___1 = strlen((char const   *)(obj_file_name));
  __lengthofcmd1 = (tmp___0 + tmp___1) + 1UL;
  tmp___2 = __builtin_alloca(sizeof(*cmd1) * __lengthofcmd1);
  cmd1 = (char *)tmp___2;
  tmp___3 = strlen((char const   *)cmd2_fmt);
  tmp___4 = strlen((char const   *)(obj_file_name));
  __lengthofcmd2 = (tmp___3 + tmp___4) + 1UL;
  tmp___5 = __builtin_alloca(sizeof(*cmd2) * __lengthofcmd2);
  cmd2 = (char *)tmp___5;
  tmp___6 = __builtin_object_size((void *)cmd1, 1);
  __builtin___sprintf_chk(cmd1, 0, tmp___6, (char const   *)cmd1_fmt, obj_file_name);
  tmp___7 = popen((char const   *)cmd1, "w");
  f = tmp___7;
  size = (int )(jit->ip - jit->buf);
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".text\n.align 4\n.globl main\n\nmain:\n");
  i = 0;
  while (i < size) {
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)".byte 0x%x\n",
            (unsigned int )*(jit->buf + i));
    i ++;
  }
  pclose(f);
  tmp___8 = __builtin_object_size((void *)cmd2, 1);
  __builtin___sprintf_chk(cmd2, 0, tmp___8, (char const   *)cmd2_fmt, obj_file_name);
  system((char const   *)cmd2);
  close(obj_file_fd);
  unlink((char const   *)(obj_file_name));
  return;
}
}
/* END FUNCTION-DEF compiler_based_debugger LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_flw_initialize LOC=UNKNOWN */
__inline static void jit_flw_initialize(struct jit *jit ) 
{ 
  struct jit_func_info *func_info ;
  jit_op *op ;
  jit_op *tmp ;
  int i ;
  int arg_id ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while (op) {
    op->live_in = jit_set_new();
    op->live_out = jit_set_new();
    i = 0;
    while (i < 3) {
      if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 1) {
        jit_set_add(op->live_in, (int )op->arg[i]);
      }
      i ++;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 384U) {
      func_info = (struct jit_func_info *)op->arg[1];
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 776U) {
      arg_id = (int )op->arg[1];
      if ((unsigned int )(func_info->args + arg_id)->type != 2U) {
        jit_set_add(op->live_in, (3 << 1) | ((arg_id & 268435455) << 4));
      } else {
        jit_set_add(op->live_in, (1 | (3 << 1)) | ((arg_id & 268435455) << 4));
        if ((func_info->args + arg_id)->overflow) {
          jit_set_add(op->live_in, ((1 | (3 << 1)) | (1 << 3)) | ((arg_id & 268435455) << 4));
        }
      }
    }
    op = op->next;
  }
  return;
}
}
/* END FUNCTION-DEF jit_flw_initialize LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_subx_op LOC=UNKNOWN */
static void emit_subx_op(struct jit *jit , struct jit_op *op , int x86_op , int imm ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  long tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  x86_imm_buf imb ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___26 ;
  int tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___32 ;
  int tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  long tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___56 ;
  int tmp___57 ;
  int tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  long tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___85 ;
  int tmp___86 ;
  int tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  long tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___93 ;
  int tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;

  {
  if (imm) {
    if (op->r_arg[0] != op->r_arg[1]) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp = jit->ip;
          (jit->ip) ++;
          *tmp = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___0 = 8;
          } else {
            tmp___0 = 0;
          }
          if (op->r_arg[0] > 7L) {
            tmp___1 = 4;
          } else {
            tmp___1 = 0;
          }
          if (op->r_arg[1] > 7L) {
            tmp___2 = 1;
          } else {
            tmp___2 = 0;
          }
          _amd64_rex_bits = (unsigned char )((tmp___0 | tmp___1) | tmp___2);
          if ((int )_amd64_rex_bits != 0) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___5 = jit->ip;
        (jit->ip) ++;
        *tmp___5 = (unsigned char)139;
        break;
        default: 
        tmp___6 = __builtin_expect(1L, 0L);
        if (tmp___6) {
          __assert_rtn("emit_subx_op", "./jitter-amd64.c", 2751, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___7 = jit->ip;
            (jit->ip) ++;
            *tmp___7 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
            break;
          }
          break;
        }
        break;
      }
    }
    while (1) {
      if ((int )op->r_arg[2] >= -128) {
        if ((int )op->r_arg[2] <= 127) {
          while (1) {
            if (op->r_arg[0] > 7L) {
              tmp___8 = 1;
            } else {
              tmp___8 = 0;
            }
            _amd64_rex_bits___0 = (unsigned char )(8 | tmp___8);
            if ((int )_amd64_rex_bits___0 != 0) {
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
            }
            break;
          }
          tmp___10 = jit->ip;
          (jit->ip) ++;
          *tmp___10 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = (unsigned char )((long )((3 << 6) | ((x86_op & 7) << 3)) | (op->r_arg[0] & 7L));
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(op->r_arg[2] & 255L);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else
      _L: /* CIL Label */ 
      if (op->r_arg[0] == 0L) {
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)8;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___13 = jit->ip;
        (jit->ip) ++;
        *tmp___13 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 5);
        while (1) {
          imb.val = (int )op->r_arg[2];
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = imb.b[0];
          tmp___15 = jit->ip;
          (jit->ip) ++;
          *tmp___15 = imb.b[1];
          tmp___16 = jit->ip;
          (jit->ip) ++;
          *tmp___16 = imb.b[2];
          tmp___17 = jit->ip;
          (jit->ip) ++;
          *tmp___17 = imb.b[3];
          break;
        }
      } else {
        while (1) {
          if (op->r_arg[0] > 7L) {
            tmp___18 = 1;
          } else {
            tmp___18 = 0;
          }
          _amd64_rex_bits___2 = (unsigned char )(8 | tmp___18);
          if ((int )_amd64_rex_bits___2 != 0) {
            tmp___19 = jit->ip;
            (jit->ip) ++;
            *tmp___19 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
          }
          break;
        }
        tmp___20 = jit->ip;
        (jit->ip) ++;
        *tmp___20 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___21 = jit->ip;
            (jit->ip) ++;
            *tmp___21 = (unsigned char )((long )((3 << 6) | ((x86_op & 7) << 3)) | (op->r_arg[0] & 7L));
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = (int )op->r_arg[2];
          tmp___22 = jit->ip;
          (jit->ip) ++;
          *tmp___22 = imb___0.b[0];
          tmp___23 = jit->ip;
          (jit->ip) ++;
          *tmp___23 = imb___0.b[1];
          tmp___24 = jit->ip;
          (jit->ip) ++;
          *tmp___24 = imb___0.b[2];
          tmp___25 = jit->ip;
          (jit->ip) ++;
          *tmp___25 = imb___0.b[3];
          break;
        }
      }
      break;
    }
    return;
  }
  if (op->r_arg[0] == op->r_arg[1]) {
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___26 = 4;
        } else {
          tmp___26 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___27 = 1;
        } else {
          tmp___27 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )((8 | tmp___26) | tmp___27);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___28 = jit->ip;
          (jit->ip) ++;
          *tmp___28 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      tmp___29 = jit->ip;
      (jit->ip) ++;
      *tmp___29 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 3);
      while (1) {
        while (1) {
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else
  if (op->r_arg[0] == op->r_arg[2]) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___31 = jit->ip;
        (jit->ip) ++;
        *tmp___31 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___32 = 8;
        } else {
          tmp___32 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___33 = 4;
        } else {
          tmp___33 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )(tmp___32 | tmp___33);
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___34 = jit->ip;
          (jit->ip) ++;
          *tmp___34 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___34 = jit->ip;
          (jit->ip) ++;
          *tmp___34 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___35 = jit->ip;
      (jit->ip) ++;
      *tmp___35 = (unsigned char)136;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___36 = jit->ip;
      (jit->ip) ++;
      *tmp___36 = (unsigned char)137;
      break;
      default: 
      tmp___37 = __builtin_expect(1L, 0L);
      if (tmp___37) {
        __assert_rtn("emit_subx_op", "./jitter-amd64.c", 2759, "0");
      }
      }
      while (1) {
        if (- sizeof(void *) == 0UL) {
          while (1) {
            tmp___38 = jit->ip;
            (jit->ip) ++;
            *tmp___38 = (unsigned char )((((op->r_arg[2] & 7L) & 7L) << 3) | 4L);
            break;
          }
          while (1) {
            tmp___39 = jit->ip;
            (jit->ip) ++;
            *tmp___39 = (unsigned char )((4 << 3) | 4);
            break;
          }
        } else
        if ((int )(- sizeof(void *)) >= -128) {
          if ((int )(- sizeof(void *)) <= 127) {
            while (1) {
              tmp___40 = jit->ip;
              (jit->ip) ++;
              *tmp___40 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[2] & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___41 = jit->ip;
              (jit->ip) ++;
              *tmp___41 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- sizeof(void *) & 255UL);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___0;
          }
        } else {
          _L___0: /* CIL Label */ 
          while (1) {
            tmp___42 = jit->ip;
            (jit->ip) ++;
            *tmp___42 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[2] & 7L) & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            tmp___43 = jit->ip;
            (jit->ip) ++;
            *tmp___43 = (unsigned char )((4 << 3) | 4);
            break;
          }
          while (1) {
            imb___1.val = (int )(- sizeof(void *));
            tmp___44 = jit->ip;
            (jit->ip) ++;
            *tmp___44 = imb___1.b[0];
            tmp___45 = jit->ip;
            (jit->ip) ++;
            *tmp___45 = imb___1.b[1];
            tmp___46 = jit->ip;
            (jit->ip) ++;
            *tmp___46 = imb___1.b[2];
            tmp___47 = jit->ip;
            (jit->ip) ++;
            *tmp___47 = imb___1.b[3];
            break;
          }
        }
        break;
        if (- sizeof(void *) == 0UL) {
          while (1) {
            tmp___48 = jit->ip;
            (jit->ip) ++;
            *tmp___48 = (unsigned char )((((op->r_arg[2] & 7L) & 7L) << 3) | 4L);
            break;
          }
          break;
        }
        if ((int )(- sizeof(void *)) >= -128) {
          if ((int )(- sizeof(void *)) <= 127) {
            while (1) {
              tmp___49 = jit->ip;
              (jit->ip) ++;
              *tmp___49 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[2] & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- sizeof(void *) & 255UL);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___1;
          }
        } else {
          _L___1: /* CIL Label */ 
          while (1) {
            tmp___50 = jit->ip;
            (jit->ip) ++;
            *tmp___50 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[2] & 7L) & 7L) << 3)) | 4L);
            break;
          }
          while (1) {
            imb___2.val = (int )(- sizeof(void *));
            tmp___51 = jit->ip;
            (jit->ip) ++;
            *tmp___51 = imb___2.b[0];
            tmp___52 = jit->ip;
            (jit->ip) ++;
            *tmp___52 = imb___2.b[1];
            tmp___53 = jit->ip;
            (jit->ip) ++;
            *tmp___53 = imb___2.b[2];
            tmp___54 = jit->ip;
            (jit->ip) ++;
            *tmp___54 = imb___2.b[3];
            break;
          }
        }
        break;
      }
      break;
    }
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___55 = jit->ip;
        (jit->ip) ++;
        *tmp___55 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___56 = 8;
        } else {
          tmp___56 = 0;
        }
        if (op->r_arg[0] > 7L) {
          tmp___57 = 4;
        } else {
          tmp___57 = 0;
        }
        if (op->r_arg[1] > 7L) {
          tmp___58 = 1;
        } else {
          tmp___58 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )((tmp___56 | tmp___57) | tmp___58);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___59 = jit->ip;
          (jit->ip) ++;
          *tmp___59 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___59 = jit->ip;
          (jit->ip) ++;
          *tmp___59 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___60 = jit->ip;
      (jit->ip) ++;
      *tmp___60 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___61 = jit->ip;
      (jit->ip) ++;
      *tmp___61 = (unsigned char)139;
      break;
      default: 
      tmp___62 = __builtin_expect(1L, 0L);
      if (tmp___62) {
        __assert_rtn("emit_subx_op", "./jitter-amd64.c", 2760, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___63 = jit->ip;
          (jit->ip) ++;
          *tmp___63 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___64 = 4;
        } else {
          tmp___64 = 0;
        }
        _amd64_rex_bits___6 = (unsigned char )(8 | tmp___64);
        if ((int )_amd64_rex_bits___6 != 0) {
          tmp___65 = jit->ip;
          (jit->ip) ++;
          *tmp___65 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
        }
        break;
      }
      while (1) {
        tmp___66 = jit->ip;
        (jit->ip) ++;
        *tmp___66 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 3);
        while (1) {
          if (- sizeof(void *) == 0UL) {
            while (1) {
              tmp___67 = jit->ip;
              (jit->ip) ++;
              *tmp___67 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | 4L);
              break;
            }
            while (1) {
              tmp___68 = jit->ip;
              (jit->ip) ++;
              *tmp___68 = (unsigned char )((4 << 3) | 4);
              break;
            }
          } else
          if ((int )(- sizeof(void *)) >= -128) {
            if ((int )(- sizeof(void *)) <= 127) {
              while (1) {
                tmp___69 = jit->ip;
                (jit->ip) ++;
                *tmp___69 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
                break;
              }
              while (1) {
                tmp___70 = jit->ip;
                (jit->ip) ++;
                *tmp___70 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- sizeof(void *) & 255UL);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___2;
            }
          } else {
            _L___2: /* CIL Label */ 
            while (1) {
              tmp___71 = jit->ip;
              (jit->ip) ++;
              *tmp___71 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              tmp___72 = jit->ip;
              (jit->ip) ++;
              *tmp___72 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              imb___3.val = (int )(- sizeof(void *));
              tmp___73 = jit->ip;
              (jit->ip) ++;
              *tmp___73 = imb___3.b[0];
              tmp___74 = jit->ip;
              (jit->ip) ++;
              *tmp___74 = imb___3.b[1];
              tmp___75 = jit->ip;
              (jit->ip) ++;
              *tmp___75 = imb___3.b[2];
              tmp___76 = jit->ip;
              (jit->ip) ++;
              *tmp___76 = imb___3.b[3];
              break;
            }
          }
          break;
          if (- sizeof(void *) == 0UL) {
            while (1) {
              tmp___77 = jit->ip;
              (jit->ip) ++;
              *tmp___77 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | 4L);
              break;
            }
            break;
          }
          if ((int )(- sizeof(void *)) >= -128) {
            if ((int )(- sizeof(void *)) <= 127) {
              while (1) {
                tmp___78 = jit->ip;
                (jit->ip) ++;
                *tmp___78 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- sizeof(void *) & 255UL);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___3;
            }
          } else {
            _L___3: /* CIL Label */ 
            while (1) {
              tmp___79 = jit->ip;
              (jit->ip) ++;
              *tmp___79 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
              break;
            }
            while (1) {
              imb___4.val = (int )(- sizeof(void *));
              tmp___80 = jit->ip;
              (jit->ip) ++;
              *tmp___80 = imb___4.b[0];
              tmp___81 = jit->ip;
              (jit->ip) ++;
              *tmp___81 = imb___4.b[1];
              tmp___82 = jit->ip;
              (jit->ip) ++;
              *tmp___82 = imb___4.b[2];
              tmp___83 = jit->ip;
              (jit->ip) ++;
              *tmp___83 = imb___4.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___84 = jit->ip;
        (jit->ip) ++;
        *tmp___84 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___85 = 8;
        } else {
          tmp___85 = 0;
        }
        if (op->r_arg[0] > 7L) {
          tmp___86 = 4;
        } else {
          tmp___86 = 0;
        }
        if (op->r_arg[1] > 7L) {
          tmp___87 = 1;
        } else {
          tmp___87 = 0;
        }
        _amd64_rex_bits___7 = (unsigned char )((tmp___85 | tmp___86) | tmp___87);
        if ((int )_amd64_rex_bits___7 != 0) {
          tmp___88 = jit->ip;
          (jit->ip) ++;
          *tmp___88 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___88 = jit->ip;
          (jit->ip) ++;
          *tmp___88 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___89 = jit->ip;
      (jit->ip) ++;
      *tmp___89 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___90 = jit->ip;
      (jit->ip) ++;
      *tmp___90 = (unsigned char)139;
      break;
      default: 
      tmp___91 = __builtin_expect(1L, 0L);
      if (tmp___91) {
        __assert_rtn("emit_subx_op", "./jitter-amd64.c", 2763, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___92 = jit->ip;
          (jit->ip) ++;
          *tmp___92 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___93 = 4;
        } else {
          tmp___93 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___94 = 1;
        } else {
          tmp___94 = 0;
        }
        _amd64_rex_bits___8 = (unsigned char )((8 | tmp___93) | tmp___94);
        if ((int )_amd64_rex_bits___8 != 0) {
          tmp___95 = jit->ip;
          (jit->ip) ++;
          *tmp___95 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
        }
        break;
      }
      tmp___96 = jit->ip;
      (jit->ip) ++;
      *tmp___96 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 3);
      while (1) {
        while (1) {
          tmp___97 = jit->ip;
          (jit->ip) ++;
          *tmp___97 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_subx_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_set_add LOC=UNKNOWN */
__inline static void jit_set_add(jit_set *s , int value ) 
{ 


  {
  s->root = jit_tree_insert(s->root, (jit_tree_key )value, (void *)1, (int *)((void *)0));
  return;
}
}
/* END FUNCTION-DEF jit_set_add LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF is_cond_branch_op LOC=UNKNOWN */
static int is_cond_branch_op(jit_op *op ) 
{ 
  jit_opcode code ;
  int tmp ;

  {
  code = (jit_opcode )((int )op->code & 65528);
  if ((unsigned int )code == 504U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 376U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 768U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 176U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 80U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 528U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 288U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 440U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 240U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 576U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 0U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 280U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 208U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 872U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 736U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 128U) {
    tmp = 1;
  } else {
    tmp = 0;
  }
  return (tmp);
}
}
/* END FUNCTION-DEF is_cond_branch_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_rsb_op LOC=UNKNOWN */
static void emit_rsb_op(struct jit *jit , struct jit_op *op , int imm ) 
{ 
  unsigned char _amd64_rex_bits ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  x86_imm_buf imb ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___17 ;
  int tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___47 ;
  int tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___56 ;
  int tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___62 ;
  int tmp___63 ;
  int tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  long tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___70 ;
  int tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;

  {
  if (imm) {
    if (op->r_arg[0] == op->r_arg[1]) {
      while (1) {
        if ((int )(- op->r_arg[2]) >= -128) {
          if ((int )(- op->r_arg[2]) <= 127) {
            while (1) {
              if (op->r_arg[0] > 7L) {
                tmp = 1;
              } else {
                tmp = 0;
              }
              _amd64_rex_bits = (unsigned char )(8 | tmp);
              if ((int )_amd64_rex_bits != 0) {
                tmp___0 = jit->ip;
                (jit->ip) ++;
                *tmp___0 = (unsigned char )(64 | (int )_amd64_rex_bits);
              }
              break;
            }
            tmp___1 = jit->ip;
            (jit->ip) ++;
            *tmp___1 = (unsigned char)131;
            while (1) {
              while (1) {
                tmp___2 = jit->ip;
                (jit->ip) ++;
                *tmp___2 = (unsigned char )((long )(3 << 6) | (op->r_arg[0] & 7L));
                break;
              }
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- op->r_arg[2] & 255L);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L;
          }
        } else
        _L: /* CIL Label */ 
        if (op->r_arg[0] == 0L) {
          while (1) {
            _amd64_rex_bits___0 = (unsigned char)8;
            if ((int )_amd64_rex_bits___0 != 0) {
              tmp___3 = jit->ip;
              (jit->ip) ++;
              *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
            }
            break;
          }
          tmp___4 = jit->ip;
          (jit->ip) ++;
          *tmp___4 = (unsigned char)5;
          while (1) {
            imb.val = (int )(- op->r_arg[2]);
            tmp___5 = jit->ip;
            (jit->ip) ++;
            *tmp___5 = imb.b[0];
            tmp___6 = jit->ip;
            (jit->ip) ++;
            *tmp___6 = imb.b[1];
            tmp___7 = jit->ip;
            (jit->ip) ++;
            *tmp___7 = imb.b[2];
            tmp___8 = jit->ip;
            (jit->ip) ++;
            *tmp___8 = imb.b[3];
            break;
          }
        } else {
          while (1) {
            if (op->r_arg[0] > 7L) {
              tmp___9 = 1;
            } else {
              tmp___9 = 0;
            }
            _amd64_rex_bits___1 = (unsigned char )(8 | tmp___9);
            if ((int )_amd64_rex_bits___1 != 0) {
              tmp___10 = jit->ip;
              (jit->ip) ++;
              *tmp___10 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
            }
            break;
          }
          tmp___11 = jit->ip;
          (jit->ip) ++;
          *tmp___11 = (unsigned char)129;
          while (1) {
            while (1) {
              tmp___12 = jit->ip;
              (jit->ip) ++;
              *tmp___12 = (unsigned char )((long )(3 << 6) | (op->r_arg[0] & 7L));
              break;
            }
            break;
          }
          while (1) {
            imb___0.val = (int )(- op->r_arg[2]);
            tmp___13 = jit->ip;
            (jit->ip) ++;
            *tmp___13 = imb___0.b[0];
            tmp___14 = jit->ip;
            (jit->ip) ++;
            *tmp___14 = imb___0.b[1];
            tmp___15 = jit->ip;
            (jit->ip) ++;
            *tmp___15 = imb___0.b[2];
            tmp___16 = jit->ip;
            (jit->ip) ++;
            *tmp___16 = imb___0.b[3];
            break;
          }
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          if (op->r_arg[0] > 7L) {
            tmp___17 = 4;
          } else {
            tmp___17 = 0;
          }
          if (op->r_arg[1] > 7L) {
            tmp___18 = 1;
          } else {
            tmp___18 = 0;
          }
          _amd64_rex_bits___2 = (unsigned char )((8 | tmp___17) | tmp___18);
          if ((int )_amd64_rex_bits___2 != 0) {
            tmp___19 = jit->ip;
            (jit->ip) ++;
            *tmp___19 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
          }
          break;
        }
        tmp___20 = jit->ip;
        (jit->ip) ++;
        *tmp___20 = (unsigned char)141;
        while (1) {
          if (op->r_arg[1] == 16L) {
            while (1) {
              tmp___21 = jit->ip;
              (jit->ip) ++;
              *tmp___21 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb___1.val = (int )(- op->r_arg[2]);
              tmp___22 = jit->ip;
              (jit->ip) ++;
              *tmp___22 = imb___1.b[0];
              tmp___23 = jit->ip;
              (jit->ip) ++;
              *tmp___23 = imb___1.b[1];
              tmp___24 = jit->ip;
              (jit->ip) ++;
              *tmp___24 = imb___1.b[2];
              tmp___25 = jit->ip;
              (jit->ip) ++;
              *tmp___25 = imb___1.b[3];
              break;
            }
          } else {
            while (1) {
              if ((op->r_arg[1] & 7L) == 4L) {
                if (- op->r_arg[2] == 0L) {
                  while (1) {
                    tmp___26 = jit->ip;
                    (jit->ip) ++;
                    *tmp___26 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___27 = jit->ip;
                    (jit->ip) ++;
                    *tmp___27 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                } else
                if ((int )(- op->r_arg[2]) >= -128) {
                  if ((int )(- op->r_arg[2]) <= 127) {
                    while (1) {
                      tmp___28 = jit->ip;
                      (jit->ip) ++;
                      *tmp___28 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
                      break;
                    }
                    while (1) {
                      tmp___29 = jit->ip;
                      (jit->ip) ++;
                      *tmp___29 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      *(jit->ip) = (unsigned char )(- op->r_arg[2] & 255L);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L___0;
                  }
                } else {
                  _L___0: /* CIL Label */ 
                  while (1) {
                    tmp___30 = jit->ip;
                    (jit->ip) ++;
                    *tmp___30 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | 4L);
                    break;
                  }
                  while (1) {
                    tmp___31 = jit->ip;
                    (jit->ip) ++;
                    *tmp___31 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    imb___2.val = (int )(- op->r_arg[2]);
                    tmp___32 = jit->ip;
                    (jit->ip) ++;
                    *tmp___32 = imb___2.b[0];
                    tmp___33 = jit->ip;
                    (jit->ip) ++;
                    *tmp___33 = imb___2.b[1];
                    tmp___34 = jit->ip;
                    (jit->ip) ++;
                    *tmp___34 = imb___2.b[2];
                    tmp___35 = jit->ip;
                    (jit->ip) ++;
                    *tmp___35 = imb___2.b[3];
                    break;
                  }
                }
                break;
              }
              if (- op->r_arg[2] == 0L) {
                if ((op->r_arg[1] & 7L) != 5L) {
                  while (1) {
                    tmp___36 = jit->ip;
                    (jit->ip) ++;
                    *tmp___36 = (unsigned char )((((op->r_arg[0] & 7L) & 7L) << 3) | ((op->r_arg[1] & 7L) & 7L));
                    break;
                  }
                  break;
                }
              }
              if ((int )(- op->r_arg[2]) >= -128) {
                if ((int )(- op->r_arg[2]) <= 127) {
                  while (1) {
                    tmp___37 = jit->ip;
                    (jit->ip) ++;
                    *tmp___37 = (unsigned char )(((long )(1 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | ((op->r_arg[1] & 7L) & 7L));
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(- op->r_arg[2] & 255L);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L___1;
                }
              } else {
                _L___1: /* CIL Label */ 
                while (1) {
                  tmp___38 = jit->ip;
                  (jit->ip) ++;
                  *tmp___38 = (unsigned char )(((long )(2 << 6) | (((op->r_arg[0] & 7L) & 7L) << 3)) | ((op->r_arg[1] & 7L) & 7L));
                  break;
                }
                while (1) {
                  imb___3.val = (int )(- op->r_arg[2]);
                  tmp___39 = jit->ip;
                  (jit->ip) ++;
                  *tmp___39 = imb___3.b[0];
                  tmp___40 = jit->ip;
                  (jit->ip) ++;
                  *tmp___40 = imb___3.b[1];
                  tmp___41 = jit->ip;
                  (jit->ip) ++;
                  *tmp___41 = imb___3.b[2];
                  tmp___42 = jit->ip;
                  (jit->ip) ++;
                  *tmp___42 = imb___3.b[3];
                  break;
                }
              }
              break;
            }
          }
          break;
        }
        break;
      }
    }
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___43 = 1;
        } else {
          tmp___43 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )(8 | tmp___43);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___44 = jit->ip;
          (jit->ip) ++;
          *tmp___44 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      while (1) {
        tmp___45 = jit->ip;
        (jit->ip) ++;
        *tmp___45 = (unsigned char)247;
        while (1) {
          while (1) {
            tmp___46 = jit->ip;
            (jit->ip) ++;
            *tmp___46 = (unsigned char )((long )((3 << 6) | (3 << 3)) | ((op->r_arg[0] & 7L) & 7L));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
    return;
  }
  if (op->r_arg[0] == op->r_arg[1]) {
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___47 = 4;
        } else {
          tmp___47 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___48 = 1;
        } else {
          tmp___48 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )((8 | tmp___47) | tmp___48);
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___49 = jit->ip;
          (jit->ip) ++;
          *tmp___49 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      tmp___50 = jit->ip;
      (jit->ip) ++;
      *tmp___50 = (unsigned char )((5 << 3) + 3);
      while (1) {
        while (1) {
          tmp___51 = jit->ip;
          (jit->ip) ++;
          *tmp___51 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___52 = 1;
        } else {
          tmp___52 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(8 | tmp___52);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___53 = jit->ip;
          (jit->ip) ++;
          *tmp___53 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      while (1) {
        tmp___54 = jit->ip;
        (jit->ip) ++;
        *tmp___54 = (unsigned char)247;
        while (1) {
          while (1) {
            tmp___55 = jit->ip;
            (jit->ip) ++;
            *tmp___55 = (unsigned char )((long )((3 << 6) | (3 << 3)) | ((op->r_arg[0] & 7L) & 7L));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  } else
  if (op->r_arg[0] == op->r_arg[2]) {
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___56 = 4;
        } else {
          tmp___56 = 0;
        }
        if (op->r_arg[1] > 7L) {
          tmp___57 = 1;
        } else {
          tmp___57 = 0;
        }
        _amd64_rex_bits___6 = (unsigned char )((8 | tmp___56) | tmp___57);
        if ((int )_amd64_rex_bits___6 != 0) {
          tmp___58 = jit->ip;
          (jit->ip) ++;
          *tmp___58 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
        }
        break;
      }
      tmp___59 = jit->ip;
      (jit->ip) ++;
      *tmp___59 = (unsigned char )((5 << 3) + 3);
      while (1) {
        while (1) {
          tmp___60 = jit->ip;
          (jit->ip) ++;
          *tmp___60 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___61 = jit->ip;
        (jit->ip) ++;
        *tmp___61 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___62 = 8;
        } else {
          tmp___62 = 0;
        }
        if (op->r_arg[0] > 7L) {
          tmp___63 = 4;
        } else {
          tmp___63 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___64 = 1;
        } else {
          tmp___64 = 0;
        }
        _amd64_rex_bits___7 = (unsigned char )((tmp___62 | tmp___63) | tmp___64);
        if ((int )_amd64_rex_bits___7 != 0) {
          tmp___65 = jit->ip;
          (jit->ip) ++;
          *tmp___65 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___65 = jit->ip;
          (jit->ip) ++;
          *tmp___65 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___66 = jit->ip;
      (jit->ip) ++;
      *tmp___66 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___67 = jit->ip;
      (jit->ip) ++;
      *tmp___67 = (unsigned char)139;
      break;
      default: 
      tmp___68 = __builtin_expect(1L, 0L);
      if (tmp___68) {
        __assert_rtn("emit_rsb_op", "./jitter-amd64.c", 2786, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___69 = jit->ip;
          (jit->ip) ++;
          *tmp___69 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___70 = 4;
        } else {
          tmp___70 = 0;
        }
        if (op->r_arg[1] > 7L) {
          tmp___71 = 1;
        } else {
          tmp___71 = 0;
        }
        _amd64_rex_bits___8 = (unsigned char )((8 | tmp___70) | tmp___71);
        if ((int )_amd64_rex_bits___8 != 0) {
          tmp___72 = jit->ip;
          (jit->ip) ++;
          *tmp___72 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
        }
        break;
      }
      tmp___73 = jit->ip;
      (jit->ip) ++;
      *tmp___73 = (unsigned char )((5 << 3) + 3);
      while (1) {
        while (1) {
          tmp___74 = jit->ip;
          (jit->ip) ++;
          *tmp___74 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_rsb_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_trace_op LOC=UNKNOWN */
static void emit_trace_op(struct jit *jit , jit_op *op ) 
{ 
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp ;
  unsigned char *tmp___0 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  long tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  x86_imm_buf imb ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char _amd64_rex_bits___6 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  int trace ;
  jit_opcode prev_code ;
  jit_opcode next_code ;
  unsigned char _amd64_rex_bits___7 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  amd64_imm_buf imb___3 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char _amd64_rex_bits___8 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  amd64_imm_buf imb___5 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char _amd64_rex_bits___9 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  amd64_imm_buf imb___7 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char _amd64_rex_bits___10 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  amd64_imm_buf imb___9 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  x86_imm_buf imb___10 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char _amd64_rex_bits___11 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  int _amd64_width_temp ;
  unsigned char _amd64_rex_bits___12 ;
  int tmp___98 ;
  int tmp___99 ;
  int tmp___100 ;
  unsigned char *tmp___101 ;
  int tmp___102 ;
  unsigned char *tmp___103 ;
  amd64_imm_buf imb___11 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;
  unsigned char *tmp___111 ;
  x86_imm_buf imb___12 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  int tmp___116 ;
  unsigned char _amd64_rex_bits___13 ;
  unsigned char *tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char *tmp___119 ;
  unsigned char _amd64_rex_bits___14 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  unsigned char *tmp___122 ;
  unsigned char *tmp___123 ;
  long tmp___124 ;
  unsigned char *tmp___125 ;
  unsigned char _amd64_rex_bits___15 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;

  {
  emit_save_all_regs(jit, op);
  while (1) {
    while (1) {
      _amd64_rex_bits = (unsigned char)0;
      if ((int )_amd64_rex_bits != 0) {
        tmp = jit->ip;
        (jit->ip) ++;
        *tmp = (unsigned char )(64 | (int )_amd64_rex_bits);
      }
      break;
    }
    tmp___0 = jit->ip;
    (jit->ip) ++;
    *tmp___0 = (unsigned char)83;
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___0 = (unsigned char)8;
      if ((int )_amd64_rex_bits___0 != 0) {
        tmp___1 = jit->ip;
        (jit->ip) ++;
        *tmp___1 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
      }
      break;
    }
    while (1) {
      switch (4) {
      case 1: 
      tmp___2 = jit->ip;
      (jit->ip) ++;
      *tmp___2 = (unsigned char)138;
      break;
      case 2: 
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)102;
      case 4: 
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)139;
      break;
      default: 
      tmp___5 = __builtin_expect(1L, 0L);
      if (tmp___5) {
        __assert_rtn("emit_trace_op", "./jitter-amd64.c", 2282, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = (unsigned char )(((3 << 6) | (3 << 3)) | 4);
          break;
        }
        break;
      }
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___1 = (unsigned char)8;
      if ((int )_amd64_rex_bits___1 != 0) {
        tmp___7 = jit->ip;
        (jit->ip) ++;
        *tmp___7 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
      }
      break;
    }
    tmp___8 = jit->ip;
    (jit->ip) ++;
    *tmp___8 = (unsigned char)131;
    while (1) {
      while (1) {
        tmp___9 = jit->ip;
        (jit->ip) ++;
        *tmp___9 = (unsigned char )(((3 << 6) | (4 << 3)) | 4);
        break;
      }
      break;
    }
    while (1) {
      *(jit->ip) = (unsigned char)240;
      (jit->ip) ++;
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___4 = (unsigned char)8;
      if ((int )_amd64_rex_bits___4 != 0) {
        tmp___23 = jit->ip;
        (jit->ip) ++;
        *tmp___23 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
      }
      break;
    }
    tmp___24 = jit->ip;
    (jit->ip) ++;
    *tmp___24 = (unsigned char)131;
    while (1) {
      while (1) {
        tmp___25 = jit->ip;
        (jit->ip) ++;
        *tmp___25 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
        break;
      }
      break;
    }
    while (1) {
      *(jit->ip) = (unsigned char)16;
      (jit->ip) ++;
      break;
    }
    break;
  }
  trace = 0;
  prev_code = (jit_opcode )((int )(op->prev)->code & 65528);
  next_code = (jit_opcode )((int )(op->next)->code & 65528);
  if ((unsigned int )prev_code == 384U) {
    trace |= 1;
  } else
  if ((unsigned int )prev_code == 496U) {
    trace |= 1;
  } else
  if ((unsigned int )prev_code == 344U) {
    trace |= 1;
  }
  if ((unsigned int )next_code != 384U) {
    if ((unsigned int )next_code != 496U) {
      if ((unsigned int )next_code != 344U) {
        trace |= 2;
      }
    }
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___7 = (unsigned char)8;
      if ((int )_amd64_rex_bits___7 != 0) {
        tmp___39 = jit->ip;
        (jit->ip) ++;
        *tmp___39 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
      }
      break;
    }
    tmp___40 = jit->ip;
    (jit->ip) ++;
    *tmp___40 = (unsigned char)191;
    while (1) {
      imb___3.val = (size_t )jit;
      tmp___41 = jit->ip;
      (jit->ip) ++;
      *tmp___41 = imb___3.b[0];
      tmp___42 = jit->ip;
      (jit->ip) ++;
      *tmp___42 = imb___3.b[1];
      tmp___43 = jit->ip;
      (jit->ip) ++;
      *tmp___43 = imb___3.b[2];
      tmp___44 = jit->ip;
      (jit->ip) ++;
      *tmp___44 = imb___3.b[3];
      tmp___45 = jit->ip;
      (jit->ip) ++;
      *tmp___45 = imb___3.b[4];
      tmp___46 = jit->ip;
      (jit->ip) ++;
      *tmp___46 = imb___3.b[5];
      tmp___47 = jit->ip;
      (jit->ip) ++;
      *tmp___47 = imb___3.b[6];
      tmp___48 = jit->ip;
      (jit->ip) ++;
      *tmp___48 = imb___3.b[7];
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___8 = (unsigned char)8;
      if ((int )_amd64_rex_bits___8 != 0) {
        tmp___53 = jit->ip;
        (jit->ip) ++;
        *tmp___53 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
      }
      break;
    }
    tmp___54 = jit->ip;
    (jit->ip) ++;
    *tmp___54 = (unsigned char)190;
    while (1) {
      imb___5.val = (size_t )op;
      tmp___55 = jit->ip;
      (jit->ip) ++;
      *tmp___55 = imb___5.b[0];
      tmp___56 = jit->ip;
      (jit->ip) ++;
      *tmp___56 = imb___5.b[1];
      tmp___57 = jit->ip;
      (jit->ip) ++;
      *tmp___57 = imb___5.b[2];
      tmp___58 = jit->ip;
      (jit->ip) ++;
      *tmp___58 = imb___5.b[3];
      tmp___59 = jit->ip;
      (jit->ip) ++;
      *tmp___59 = imb___5.b[4];
      tmp___60 = jit->ip;
      (jit->ip) ++;
      *tmp___60 = imb___5.b[5];
      tmp___61 = jit->ip;
      (jit->ip) ++;
      *tmp___61 = imb___5.b[6];
      tmp___62 = jit->ip;
      (jit->ip) ++;
      *tmp___62 = imb___5.b[7];
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___9 = (unsigned char)0;
      if ((int )_amd64_rex_bits___9 != 0) {
        tmp___67 = jit->ip;
        (jit->ip) ++;
        *tmp___67 = (unsigned char )(64 | (int )_amd64_rex_bits___9);
      }
      break;
    }
    tmp___68 = jit->ip;
    (jit->ip) ++;
    *tmp___68 = (unsigned char)186;
    while (1) {
      imb___8.val = (int )((size_t )op->r_arg[0]);
      tmp___77 = jit->ip;
      (jit->ip) ++;
      *tmp___77 = imb___8.b[0];
      tmp___78 = jit->ip;
      (jit->ip) ++;
      *tmp___78 = imb___8.b[1];
      tmp___79 = jit->ip;
      (jit->ip) ++;
      *tmp___79 = imb___8.b[2];
      tmp___80 = jit->ip;
      (jit->ip) ++;
      *tmp___80 = imb___8.b[3];
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___10 = (unsigned char)0;
      if ((int )_amd64_rex_bits___10 != 0) {
        tmp___81 = jit->ip;
        (jit->ip) ++;
        *tmp___81 = (unsigned char )(64 | (int )_amd64_rex_bits___10);
      }
      break;
    }
    tmp___82 = jit->ip;
    (jit->ip) ++;
    *tmp___82 = (unsigned char)185;
    while (1) {
      imb___10.val = (int )((size_t )trace);
      tmp___91 = jit->ip;
      (jit->ip) ++;
      *tmp___91 = imb___10.b[0];
      tmp___92 = jit->ip;
      (jit->ip) ++;
      *tmp___92 = imb___10.b[1];
      tmp___93 = jit->ip;
      (jit->ip) ++;
      *tmp___93 = imb___10.b[2];
      tmp___94 = jit->ip;
      (jit->ip) ++;
      *tmp___94 = imb___10.b[3];
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___11 = (unsigned char)8;
      if ((int )_amd64_rex_bits___11 != 0) {
        tmp___95 = jit->ip;
        (jit->ip) ++;
        *tmp___95 = (unsigned char )(64 | (int )_amd64_rex_bits___11);
      }
      break;
    }
    tmp___96 = jit->ip;
    (jit->ip) ++;
    *tmp___96 = (unsigned char )((6 << 3) + 3);
    while (1) {
      while (1) {
        tmp___97 = jit->ip;
        (jit->ip) ++;
        *tmp___97 = (unsigned char )(3 << 6);
        break;
      }
      break;
    }
    break;
  }
  while (1) {
    _amd64_width_temp = (size_t )(& jit_trace_callback) == (size_t )((int )((size_t )(& jit_trace_callback)));
    while (1) {
      while (1) {
        if (_amd64_width_temp) {
          tmp___100 = 4;
        } else {
          tmp___100 = 8;
        }
        if (tmp___100 > 4) {
          tmp___99 = 8;
        } else {
          tmp___99 = 0;
        }
        _amd64_rex_bits___12 = (unsigned char )(tmp___99 | 1);
        if ((int )_amd64_rex_bits___12 != 0) {
          tmp___101 = jit->ip;
          (jit->ip) ++;
          *tmp___101 = (unsigned char )(64 | (int )_amd64_rex_bits___12);
        } else {
          if (_amd64_width_temp) {
            tmp___102 = 4;
          } else {
            tmp___102 = 8;
          }
          if (tmp___102 == 1) {
            tmp___101 = jit->ip;
            (jit->ip) ++;
            *tmp___101 = (unsigned char )(64 | (int )_amd64_rex_bits___12);
          }
        }
        break;
      }
      tmp___103 = jit->ip;
      (jit->ip) ++;
      *tmp___103 = (unsigned char)184;
      if (_amd64_width_temp) {
        tmp___116 = 4;
      } else {
        tmp___116 = 8;
      }
      if (tmp___116 == 8) {
        while (1) {
          imb___11.val = (size_t )(& jit_trace_callback);
          tmp___104 = jit->ip;
          (jit->ip) ++;
          *tmp___104 = imb___11.b[0];
          tmp___105 = jit->ip;
          (jit->ip) ++;
          *tmp___105 = imb___11.b[1];
          tmp___106 = jit->ip;
          (jit->ip) ++;
          *tmp___106 = imb___11.b[2];
          tmp___107 = jit->ip;
          (jit->ip) ++;
          *tmp___107 = imb___11.b[3];
          tmp___108 = jit->ip;
          (jit->ip) ++;
          *tmp___108 = imb___11.b[4];
          tmp___109 = jit->ip;
          (jit->ip) ++;
          *tmp___109 = imb___11.b[5];
          tmp___110 = jit->ip;
          (jit->ip) ++;
          *tmp___110 = imb___11.b[6];
          tmp___111 = jit->ip;
          (jit->ip) ++;
          *tmp___111 = imb___11.b[7];
          break;
        }
      } else {
        while (1) {
          imb___12.val = (int )((size_t )(& jit_trace_callback));
          tmp___112 = jit->ip;
          (jit->ip) ++;
          *tmp___112 = imb___12.b[0];
          tmp___113 = jit->ip;
          (jit->ip) ++;
          *tmp___113 = imb___12.b[1];
          tmp___114 = jit->ip;
          (jit->ip) ++;
          *tmp___114 = imb___12.b[2];
          tmp___115 = jit->ip;
          (jit->ip) ++;
          *tmp___115 = imb___12.b[3];
          break;
        }
      }
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___13 = (unsigned char)1;
      if ((int )_amd64_rex_bits___13 != 0) {
        tmp___117 = jit->ip;
        (jit->ip) ++;
        *tmp___117 = (unsigned char )(64 | (int )_amd64_rex_bits___13);
      }
      break;
    }
    tmp___118 = jit->ip;
    (jit->ip) ++;
    *tmp___118 = (unsigned char)255;
    while (1) {
      while (1) {
        tmp___119 = jit->ip;
        (jit->ip) ++;
        *tmp___119 = (unsigned char )((3 << 6) | (2 << 3));
        break;
      }
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___14 = (unsigned char)8;
      if ((int )_amd64_rex_bits___14 != 0) {
        tmp___120 = jit->ip;
        (jit->ip) ++;
        *tmp___120 = (unsigned char )(64 | (int )_amd64_rex_bits___14);
      }
      break;
    }
    while (1) {
      switch (4) {
      case 1: 
      tmp___121 = jit->ip;
      (jit->ip) ++;
      *tmp___121 = (unsigned char)138;
      break;
      case 2: 
      tmp___122 = jit->ip;
      (jit->ip) ++;
      *tmp___122 = (unsigned char)102;
      case 4: 
      tmp___123 = jit->ip;
      (jit->ip) ++;
      *tmp___123 = (unsigned char)139;
      break;
      default: 
      tmp___124 = __builtin_expect(1L, 0L);
      if (tmp___124) {
        __assert_rtn("emit_trace_op", "./jitter-amd64.c", 2300, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___125 = jit->ip;
          (jit->ip) ++;
          *tmp___125 = (unsigned char )(((3 << 6) | (4 << 3)) | 3);
          break;
        }
        break;
      }
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      _amd64_rex_bits___15 = (unsigned char)0;
      if ((int )_amd64_rex_bits___15 != 0) {
        tmp___126 = jit->ip;
        (jit->ip) ++;
        *tmp___126 = (unsigned char )(64 | (int )_amd64_rex_bits___15);
      }
      break;
    }
    tmp___127 = jit->ip;
    (jit->ip) ++;
    *tmp___127 = (unsigned char)91;
    break;
  }
  emit_restore_all_regs(jit, op);
  return;
}
}
/* END FUNCTION-DEF emit_trace_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_spill_candidate LOC=UNKNOWN */
static jit_hw_reg *rmap_spill_candidate(struct jit_reg_allocator *al , jit_op *op ,
                                        jit_value virtreg , int *spill , jit_value *reg_to_spill ,
                                        int callee_saved ) 
{ 
  jit_reg r ;
  jit_hw_reg *regs ;
  int reg_count ;
  jit_hw_reg *result ;
  int best_score ;
  int sp ;
  int i ;
  jit_value assoc ;
  int score ;
  int tmp ;

  {
  r = virtreg;
  result = (jit_hw_reg *)((void *)0);
  best_score = (-0x7FFFFFFF-1);
  if ((r & 1L) == 0L) {
    regs = al->gp_regs;
    reg_count = al->gp_reg_cnt;
  } else {
    regs = al->fp_regs;
    reg_count = al->fp_reg_cnt;
  }
  sp = 0;
  i = 0;
  while (i < reg_count) {
    if (callee_saved) {
      if (! (regs + i)->callee_saved) {
        goto __Cont;
      }
    }
    assoc = (jit_value )0;
    tmp = candidate_score(op, virtreg, regs + i, & sp, & assoc);
    score = tmp;
    if (score > best_score) {
      if (sp) {
        *reg_to_spill = assoc;
        *spill = sp;
      } else {
        *reg_to_spill = (jit_value )-1;
        *spill = 0;
      }
      result = regs + i;
      best_score = score;
    }
    __Cont: /* CIL Label */ 
    i ++;
  }
  return (result);
}
}
/* END FUNCTION-DEF rmap_spill_candidate LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF assign_jmp LOC=UNKNOWN */
static int assign_jmp(jit_op *op , struct jit_reg_allocator *al ) 
{ 
  jit_value reg ;
  int i ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp ;
  int tmp___0 ;
  int i___0 ;
  jit_hw_reg *hreg___0 ;
  jit_hw_reg *tmp___1 ;
  int tmp___2 ;

  {
  if ((int )op->code == 338) {
    return (0);
  }
  i = 0;
  while (i < al->gp_reg_cnt) {
    tmp = rmap_is_associated(op->regmap, (al->gp_regs + i)->id, 0, & reg);
    hreg = tmp;
    if (hreg) {
      tmp___0 = jit_set_get(op->live_out, (int )reg);
      if (tmp___0) {
        sync_reg(op, hreg, reg);
      }
    }
    i ++;
  }
  i___0 = 0;
  while (i___0 < al->fp_reg_cnt) {
    tmp___1 = rmap_is_associated(op->regmap, (al->fp_regs + i___0)->id, 1, & reg);
    hreg___0 = tmp___1;
    if (hreg___0) {
      tmp___2 = jit_set_get(op->live_out, (int )reg);
      if (tmp___2) {
        sync_reg(op, hreg___0, reg);
      }
    }
    i___0 ++;
  }
  return (0);
}
}
/* END FUNCTION-DEF assign_jmp LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF join_muli_addi LOC=UNKNOWN */
static int join_muli_addi(jit_op *op , jit_op *nextop ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  if (nextop->arg[2] >= (-0x7FFFFFFF-1)) {
    if (! (nextop->arg[2] <= 2147483647L)) {
      return (0);
    }
  } else {
    return (0);
  }
  tmp = is_suitable_mul(op);
  if (! tmp) {
    return (0);
  }
  tmp___0 = make_addmuli(op, nextop);
  return (tmp___0);
}
}
/* END FUNCTION-DEF join_muli_addi LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF toascii LOC=UNKNOWN */
__inline extern int toascii(int _c ) 
{ 


  {
  return (_c & 127);
}
}
/* END FUNCTION-DEF toascii LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isideogram LOC=UNKNOWN */
__inline extern int isideogram(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 524288UL);
  return (tmp);
}
}
/* END FUNCTION-DEF isideogram LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF is_active_register LOC=UNKNOWN */
static int is_active_register(struct jit_reg_allocator *al , jit_hw_reg *reg , jit_op *op ) 
{ 
  jit_value vreg ;
  jit_hw_reg *hw ;
  jit_hw_reg *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  if ((unsigned long )op->next == (unsigned long )((void *)0)) {
    return (0);
  }
  if ((unsigned int )((jit_opcode )((int )(op->next)->code & 65528)) == 760U) {
    return (1);
  } else
  if ((unsigned int )((jit_opcode )((int )(op->next)->code & 65528)) == 904U) {
    return (1);
  } else
  if ((unsigned int )((jit_opcode )((int )(op->next)->code & 65528)) == 648U) {
    return (1);
  }
  if ((unsigned int )((jit_opcode )((int )(op->next)->code & 65528)) == 544U) {
    if ((unsigned long )reg == (unsigned long )al->ret_reg) {
      return (1);
    }
  }
  if ((unsigned long )(op->next)->regmap == (unsigned long )((void *)0)) {
    return (1);
  }
  if ((unsigned long )(op->prev)->regmap == (unsigned long )((void *)0)) {
    return (1);
  }
  tmp = rmap_is_associated(op->regmap, reg->id, (int )reg->fp, & vreg);
  hw = tmp;
  if (hw) {
    if (op->prev) {
      if ((op->prev)->live_in) {
        tmp___0 = jit_set_get((op->prev)->live_in, (int )vreg);
        if (tmp___0) {
          return (1);
        } else {
          goto _L;
        }
      } else
      _L: /* CIL Label */ 
      if ((op->prev)->live_out) {
        tmp___1 = jit_set_get((op->prev)->live_out, (int )vreg);
        if (tmp___1) {
          return (1);
        }
      }
    }
    if (op->next) {
      if ((op->next)->live_in) {
        tmp___2 = jit_set_get((op->next)->live_in, (int )vreg);
        if (tmp___2) {
          return (1);
        } else {
          goto _L___0;
        }
      } else
      _L___0: /* CIL Label */ 
      if ((op->next)->live_out) {
        tmp___3 = jit_set_get((op->next)->live_out, (int )vreg);
        if (tmp___3) {
          return (1);
        }
      }
    }
    return (0);
  }
  return (0);
}
}
/* END FUNCTION-DEF is_active_register LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_subset LOC=UNKNOWN */
static int rmap_subset(jit_op *op , jit_tree *current , jit_tree *target ) 
{ 
  jit_set *tgt_livein ;
  int tmp ;
  jit_tree *found ;
  jit_tree *tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;

  {
  if ((unsigned long )current == (unsigned long )((void *)0)) {
    return (1);
  }
  tgt_livein = (op->jmp_addr)->live_in;
  tmp = jit_set_get(tgt_livein, (int )current->key);
  if (! tmp) {
    goto skip;
  }
  tmp___0 = jit_tree_search(target, current->key);
  found = tmp___0;
  if (! found) {
    return (0);
  } else
  if ((unsigned long )current->value != (unsigned long )found->value) {
    return (0);
  }
  skip: 
  tmp___1 = rmap_subset(op, current->left, target);
  if (tmp___1) {
    tmp___2 = rmap_subset(op, current->right, target);
    if (tmp___2) {
      tmp___3 = 1;
    } else {
      tmp___3 = 0;
    }
  } else {
    tmp___3 = 0;
  }
  return (tmp___3);
}
}
/* END FUNCTION-DEF rmap_subset LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_branch_mask_op LOC=UNKNOWN */
static void emit_branch_mask_op(struct jit *jit , struct jit_op *op , int cond , int imm ) 
{ 
  unsigned char _amd64_rex_bits ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  x86_imm_buf imb ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___13 ;
  int offset ;
  int tmp___14 ;
  jit_value tmp___15 ;
  int tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;

  {
  if (imm) {
    while (1) {
      while (1) {
        if (op->r_arg[1] > 7L) {
          tmp = 1;
        } else {
          tmp = 0;
        }
        _amd64_rex_bits = (unsigned char )(8 | tmp);
        if ((int )_amd64_rex_bits != 0) {
          tmp___0 = jit->ip;
          (jit->ip) ++;
          *tmp___0 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      while (1) {
        if ((op->r_arg[1] & 7L) == 0L) {
          tmp___1 = jit->ip;
          (jit->ip) ++;
          *tmp___1 = (unsigned char)169;
        } else {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char)247;
          while (1) {
            while (1) {
              tmp___3 = jit->ip;
              (jit->ip) ++;
              *tmp___3 = (unsigned char )((long )(3 << 6) | ((op->r_arg[1] & 7L) & 7L));
              break;
            }
            break;
          }
        }
        while (1) {
          imb.val = (int )op->r_arg[2];
          tmp___4 = jit->ip;
          (jit->ip) ++;
          *tmp___4 = imb.b[0];
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = imb.b[1];
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = imb.b[2];
          tmp___7 = jit->ip;
          (jit->ip) ++;
          *tmp___7 = imb.b[3];
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      while (1) {
        if (op->r_arg[1] > 7L) {
          tmp___8 = 4;
        } else {
          tmp___8 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___9 = 1;
        } else {
          tmp___9 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )((8 | tmp___8) | tmp___9);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___10 = jit->ip;
          (jit->ip) ++;
          *tmp___10 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      while (1) {
        tmp___11 = jit->ip;
        (jit->ip) ++;
        *tmp___11 = (unsigned char)133;
        while (1) {
          while (1) {
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = (unsigned char )(((long )(3 << 6) | (((op->r_arg[2] & 7L) & 7L) << 3)) | ((op->r_arg[1] & 7L) & 7L));
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  }
  op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
  while (1) {
    while (1) {
      _amd64_rex_bits___1 = (unsigned char)8;
      if ((int )_amd64_rex_bits___1 != 0) {
        tmp___13 = jit->ip;
        (jit->ip) ++;
        *tmp___13 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
      }
      break;
    }
    while (1) {
      tmp___16 = jit_is_label(jit, (void *)op->r_arg[0]);
      if (tmp___16) {
        tmp___15 = ((jit_value )jit->buf + ((jit_label *)op->r_arg[0])->pos) - (jit_value )jit->ip;
      } else {
        tmp___15 = op->r_arg[0];
      }
      offset = (int )(tmp___15 - 6L);
      while (1) {
        tmp___17 = jit->ip;
        (jit->ip) ++;
        *tmp___17 = (unsigned char)15;
        tmp___19 = jit->ip;
        (jit->ip) ++;
        *tmp___19 = (unsigned char )((int const   )x86_cc_unsigned_map[cond] + 16);
        while (1) {
          imb___0.val = offset;
          tmp___20 = jit->ip;
          (jit->ip) ++;
          *tmp___20 = imb___0.b[0];
          tmp___21 = jit->ip;
          (jit->ip) ++;
          *tmp___21 = imb___0.b[1];
          tmp___22 = jit->ip;
          (jit->ip) ++;
          *tmp___22 = imb___0.b[2];
          tmp___23 = jit->ip;
          (jit->ip) ++;
          *tmp___23 = imb___0.b[3];
          break;
        }
        break;
      }
      break;
    }
    break;
  }
  return;
}
}
/* END FUNCTION-DEF emit_branch_mask_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF open_disasm LOC=UNKNOWN */
static FILE *open_disasm(void) 
{ 
  int fds[2] ;
  pid_t child ;
  pid_t tmp ;
  char *path ;
  FILE *f ;
  FILE *tmp___0 ;

  {
  pipe((int *)(fds));
  tmp = fork();
  child = tmp;
  if (child == 0) {
    close(fds[1]);
    dup2(fds[0], 0);
    path = (char *)"./myjit-disasm";
    execlp((char const   *)path, (char const   *)path, (void *)0);
    path = (char *)"myjit-disasm";
    execlp((char const   *)path, (char const   *)path, (void *)0);
    path = getenv("MYJIT_DISASM");
    if (path) {
      execlp((char const   *)path, (char const   *)path, (void *)0);
    }
    printf((char const   */* __restrict  */)"myjit-disasm not found\n\n");
    printf((char const   */* __restrict  */)"In order to list myjit operations along with the machine code, the MyJIT disassembler has to be present in the current directory or its path has to be specified in the MYJIT_DISASM environment variable.\nThe disassembler\'s source code can be found in the \"disasm/\" directory.\n\n");
    exit(1);
  }
  close(fds[0]);
  tmp___0 = fdopen(fds[1], "w");
  f = tmp___0;
  return (f);
}
}
/* END FUNCTION-DEF open_disasm LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_arg LOC=UNKNOWN */
__inline static void print_arg(struct jit_disasm *disasm , struct output_buf *buf ,
                               struct jit_op *op , int arg ) 
{ 
  long a ;
  char value[256] ;

  {
  a = op->arg[arg - 1];
  if ((((int )op->spec >> (arg - 1) * 2) & 3) == 2) {
    ob_printf(buf, (char const   *)disasm->generic_value_template, a);
  }
  if ((((int )op->spec >> (arg - 1) * 2) & 3) == 1) {
    jit_get_reg_name(disasm, value, (int )a);
    ob_append(buf, value);
  } else
  if ((((int )op->spec >> (arg - 1) * 2) & 3) == 3) {
    jit_get_reg_name(disasm, value, (int )a);
    ob_append(buf, value);
  }
  return;
}
}
/* END FUNCTION-DEF print_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isspace LOC=UNKNOWN */
__inline extern int isspace(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 16384UL);
  return (tmp);
}
}
/* END FUNCTION-DEF isspace LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_add_prolog LOC=UNKNOWN */
jit_op *jit_add_prolog(struct jit *jit , void *func , struct jit_debug_info *debug_info ) 
{ 
  jit_op *op ;
  struct jit_op *tmp ;
  struct jit_func_info *info ;
  void *tmp___0 ;

  {
  tmp = jit_add_op(jit, (unsigned short)384, (unsigned char)2, (long )func, 0L, 0L,
                   (unsigned char)0, (struct jit_debug_info *)((void *)0));
  op = tmp;
  tmp___0 = malloc(sizeof(struct jit_func_info ));
  info = (struct jit_func_info *)tmp___0;
  op->arg[1] = (long )info;
  op->debug_info = debug_info;
  jit->current_func = op;
  info->first_op = op;
  info->allocai_mem = 0L;
  info->general_arg_cnt = 0;
  info->float_arg_cnt = 0;
  return (op);
}
}
/* END FUNCTION-DEF jit_add_prolog LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_set_to_array LOC=UNKNOWN */
__inline static void jit_set_to_array(jit_set *s , jit_value *dest ) 
{ 
  struct copy_target t ;

  {
  t.target = dest;
  t.index = 0;
  jit_tree_walk(s->root, & copy_reg_to_array, (void *)(& t));
  return;
}
}
/* END FUNCTION-DEF jit_set_to_array LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_reg_liveness_callback LOC=UNKNOWN */
static void print_reg_liveness_callback(jit_tree_key key , jit_tree_value value ,
                                        void *disasm ) 
{ 
  char buf[256] ;

  {
  jit_get_reg_name((struct jit_disasm *)disasm, buf, (int )key);
  printf((char const   */* __restrict  */)"%s ", buf);
  return;
}
}
/* END FUNCTION-DEF print_reg_liveness_callback LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF sync_reg LOC=UNKNOWN */
static void sync_reg(jit_op *op , jit_hw_reg *hreg , jit_value virt_reg ) 
{ 


  {
  insert_reg_op(160, op, virt_reg, (jit_value )hreg->id);
  return;
}
}
/* END FUNCTION-DEF sync_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isalpha LOC=UNKNOWN */
__inline extern int isalpha(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 256UL);
  return (tmp);
}
}
/* END FUNCTION-DEF isalpha LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF initialize_code_refs LOC=UNKNOWN */
__inline static void initialize_code_refs(struct code_refs_cache *code_refs , struct jit_func_info *func_info ) 
{ 
  jit_op *op ;
  void *tmp ;
  int i ;
  int tmp___0 ;

  {
  op = (func_info->first_op)->next;
  code_refs->size = 0;
  while (1) {
    if (op) {
      if (! ((unsigned int )((jit_opcode )((int )op->code & 65528)) != 384U)) {
        break;
      }
    } else {
      break;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 856U) {
      (code_refs->size) ++;
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 200U) {
      (code_refs->size) ++;
    }
    op = op->next;
  }
  tmp = malloc(sizeof(jit_op *) * (unsigned long )code_refs->size);
  code_refs->ops = (jit_op **)tmp;
  op = (func_info->first_op)->next;
  i = 0;
  while (1) {
    if (op) {
      if (! ((unsigned int )((jit_opcode )((int )op->code & 65528)) != 384U)) {
        break;
      }
    } else {
      break;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 856U) {
      tmp___0 = i;
      i ++;
      *(code_refs->ops + tmp___0) = op;
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 200U) {
      tmp___0 = i;
      i ++;
      *(code_refs->ops + tmp___0) = op;
    }
    op = op->next;
  }
  return;
}
}
/* END FUNCTION-DEF initialize_code_refs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_arg_layout_create_output LOC=UNKNOWN */
static struct jit_arg_layout *jit_arg_layout_create_output(struct jit *jit , struct jit_prepared_args *prepared_args ) 
{ 
  int arg_cnt ;
  struct jit_arg_layout *layout ;
  struct jit_arg_layout *tmp ;
  struct jit_out_arg *args ;
  int i ;
  struct jit_out_arg *arg ;

  {
  arg_cnt = jit->prepared_args.count;
  tmp = jit_arg_layout_create(jit, arg_cnt);
  layout = tmp;
  args = prepared_args->args;
  i = 0;
  while (i < arg_cnt) {
    arg = args + i;
    jit_arg_layout_add(layout, (int )arg->isfp, arg);
    i ++;
  }
  return (layout);
}
}
/* END FUNCTION-DEF jit_arg_layout_create_output LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF node_new LOC=UNKNOWN */
__inline static jit_tree *node_new(jit_tree_key key , jit_tree_value value ) 
{ 
  jit_tree *res ;
  void *tmp ;

  {
  tmp = malloc(sizeof(jit_tree ));
  res = (jit_tree *)tmp;
  res->key = key;
  res->value = value;
  res->color = 1;
  res->left = (struct jit_tree *)((void *)0);
  res->right = (struct jit_tree *)((void *)0);
  return (res);
}
}
/* END FUNCTION-DEF node_new LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF candidate_score LOC=UNKNOWN */
static int candidate_score(jit_op *op , jit_value virtreg , jit_hw_reg *hreg , int *spill ,
                           jit_value *associated_virtreg ) 
{ 
  int score ;
  jit_value x ;
  int hw_associated ;
  jit_hw_reg *tmp ;
  int alive ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  jit_tree *hint_node ;
  jit_tree *tmp___3 ;
  int is_to_be_used ;
  struct jit_allocator_hint *hint ;
  int used_in_steps ;
  jit_tree *hint_node___0 ;
  jit_tree *tmp___4 ;
  struct jit_allocator_hint *hint___0 ;

  {
  score = 0;
  score -= (int )hreg->priority;
  tmp = rmap_is_associated(op->regmap, hreg->id, (int )hreg->fp, & x);
  hw_associated = (unsigned long )tmp != (unsigned long )((void *)0);
  alive = 0;
  if (hw_associated) {
    tmp___0 = jit_set_get(op->live_in, (int )x);
    if (tmp___0) {
      tmp___2 = 1;
    } else {
      tmp___1 = jit_set_get(op->live_out, (int )x);
      if (tmp___1) {
        tmp___2 = 1;
      } else {
        tmp___2 = 0;
      }
    }
    alive = tmp___2;
  }
  if (! alive) {
    score += 10000;
  }
  *spill = 0;
  if (hw_associated) {
    score -= 100000;
    *spill = 1;
    *associated_virtreg = x;
    tmp___3 = jit_tree_search(op->allocator_hints, x);
    hint_node = tmp___3;
    is_to_be_used = (unsigned long )hint_node != (unsigned long )((void *)0);
    if (! is_to_be_used) {
      score += 50000;
    } else {
      hint = (struct jit_allocator_hint *)hint_node->value;
      used_in_steps = - (hint->last_pos - op->normalized_pos);
      if (hw_associated) {
        if (used_in_steps == 0) {
          return ((-0x7FFFFFFF-1));
        } else {
          score += used_in_steps * 5;
        }
      } else {
        score += used_in_steps * 5;
      }
    }
  }
  tmp___4 = jit_tree_search(op->allocator_hints, virtreg);
  hint_node___0 = tmp___4;
  if (hint_node___0) {
    hint___0 = (struct jit_allocator_hint *)hint_node___0->value;
    if ((int )hreg->fp == 0) {
      if (hreg->id == 0) {
        score += hint___0->should_be_eax * 5;
      }
    }
    if (hreg->callee_saved) {
      score += (hint___0->should_be_calleesaved - 1) * 15;
    }
  }
  return (score);
}
}
/* END FUNCTION-DEF candidate_score LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_data_bytes LOC=UNKNOWN */
jit_op *jit_data_bytes(struct jit *jit , jit_value count , unsigned char *data ) 
{ 
  jit_op *op ;
  struct jit_op *tmp ;
  unsigned long tmp___0 ;

  {
  tmp = jit_add_op(jit, (unsigned short)882, (unsigned char)2, count, (jit_value )0,
                   (jit_value )0, (unsigned char)0, (struct jit_debug_info *)((void *)0));
  op = tmp;
  op->addendum = malloc((size_t )count);
  tmp___0 = __builtin_object_size(op->addendum, 0);
  __builtin___memcpy_chk(op->addendum, (void const   *)data, (unsigned long )count,
                         tmp___0);
  return (op);
}
}
/* END FUNCTION-DEF jit_data_bytes LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_get_unused_reg LOC=UNKNOWN */
jit_hw_reg *jit_get_unused_reg(struct jit_reg_allocator *al , jit_op *op , int fp ) 
{ 
  jit_hw_reg *tmp ;

  {
  tmp = jit_get_unused_reg_with_index(al, op, fp, 0);
  return (tmp);
}
}
/* END FUNCTION-DEF jit_get_unused_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_get_sign_mask LOC=UNKNOWN */
static unsigned char *emit_sse_get_sign_mask(void) 
{ 
  unsigned char *buf ;
  unsigned long long *bit_mask ;

  {
  buf = bufx + 1;
  while ((long )buf % 16L) {
    buf ++;
  }
  bit_mask = (unsigned long long *)buf;
  *bit_mask = 1ULL << 63;
  return (buf);
}
}
/* END FUNCTION-DEF emit_sse_get_sign_mask LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF flw_analyze_op LOC=UNKNOWN */
__inline static int flw_analyze_op(struct jit *jit , jit_op *op , struct jit_func_info *func_info ,
                                   int changed , struct code_refs_cache *code_refs ) 
{ 
  int live_out_size ;
  int tmp ;
  int live_in_size ;
  int tmp___0 ;
  int i ;
  int i___0 ;
  int i___1 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  tmp = jit_set_size(op->live_out);
  live_out_size = tmp;
  tmp___0 = jit_set_size(op->live_in);
  live_in_size = tmp___0;
  if (op->jmp_addr) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) != 856U) {
      if ((unsigned int )((jit_opcode )((int )op->code & 65528)) != 200U) {
        jit_set_addall(op->live_out, (op->jmp_addr)->live_in);
      }
    }
  }
  if ((int )op->code == 337) {
    if (code_refs->size < 0) {
      initialize_code_refs(code_refs, func_info);
    }
    i = 0;
    while (i < code_refs->size) {
      jit_set_addall(op->live_out, ((*(code_refs->ops + i))->jmp_addr)->live_in);
      i ++;
    }
    goto skip;
  }
  if ((int )op->code == 338) {
    goto skip;
  }
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 792U) {
    op->live_out = jit_set_new();
    goto skip;
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 304U) {
    op->live_out = jit_set_new();
    goto skip;
  }
  if (op->next) {
    jit_set_addall(op->live_out, (op->next)->live_in);
  }
  skip: 
  jit_set_addall(op->live_in, op->live_out);
  i___0 = 0;
  while (i___0 < 3) {
    if ((((int )op->spec >> ((i___0 + 1) - 1) * 2) & 3) == 3) {
      jit_set_remove(op->live_in, (int )op->arg[i___0]);
    }
    i___0 ++;
  }
  i___1 = 0;
  while (i___1 < 3) {
    if ((((int )op->spec >> ((i___1 + 1) - 1) * 2) & 3) == 1) {
      jit_set_add(op->live_in, (int )op->arg[i___1]);
    }
    i___1 ++;
  }
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 384U) {
    flw_analyze_prolog(jit, op, func_info);
  }
  if (changed) {
    return (changed);
  }
  tmp___1 = jit_set_size(op->live_out);
  if (live_out_size != tmp___1) {
    return (1);
  }
  tmp___2 = jit_set_size(op->live_in);
  if (live_in_size != tmp___2) {
    return (1);
  }
  return (0);
}
}
/* END FUNCTION-DEF flw_analyze_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_patch_external_calls LOC=UNKNOWN */
void jit_patch_external_calls(struct jit *jit ) 
{ 


  {
  return;
}
}
/* END FUNCTION-DEF jit_patch_external_calls LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_imm_overflow LOC=UNKNOWN */
static int jit_imm_overflow(struct jit *jit , jit_op *op , long value ) 
{ 
  unsigned long mask ;
  unsigned long high_bits ;

  {
  mask = ~ ((1UL << 31) - 1UL);
  high_bits = (unsigned long )value & mask;
  if (! ((int )op->code & 4)) {
    if (high_bits != 0UL) {
      if (high_bits != mask) {
        return (1);
      }
    }
  } else
  if (high_bits != 0UL) {
    return (1);
  }
  return (0);
}
}
/* END FUNCTION-DEF jit_imm_overflow LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_trace LOC=UNKNOWN */
void jit_trace(struct jit *jit , int verbosity ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  jit_op *o ;
  struct jit_op *tmp___0 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp->next;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 384U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 488U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 200U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 104U) {
      goto __Cont;
    }
    tmp___0 = jit_op_new((unsigned short)56, (unsigned char)2, (long )verbosity, 0L,
                         0L, (unsigned char)0);
    o = tmp___0;
    o->r_arg[0] = o->arg[0];
    jit_op_prepend(op, o);
    __Cont: /* CIL Label */ 
    op = op->next;
  }
  return;
}
}
/* END FUNCTION-DEF jit_trace LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF join_addi_addr LOC=UNKNOWN */
static int join_addi_addr(jit_op *op , jit_op *nextop ) 
{ 
  unsigned long tmp ;

  {
  if (op->arg[2] >= (-0x7FFFFFFF-1)) {
    if (! (op->arg[2] <= 2147483647L)) {
      return (0);
    }
  } else {
    return (0);
  }
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 424U) {
    op->arg[2] = - op->arg[2];
  }
  make_nop(op);
  nextop->code = (unsigned short)864;
  nextop->spec = (unsigned char )(((1 << 4) | (1 << 2)) | 3);
  if (nextop->arg[1] == nextop->arg[2]) {
    op->arg[2] *= 2L;
  }
  tmp = __builtin_object_size((void *)(& nextop->flt_imm), 0);
  __builtin___memcpy_chk((void *)(& nextop->flt_imm), (void const   *)(& op->arg[2]),
                         sizeof(jit_value ), tmp);
  if (nextop->arg[1] == op->arg[0]) {
    nextop->arg[1] = op->arg[1];
  }
  if (nextop->arg[2] == op->arg[0]) {
    nextop->arg[2] = op->arg[1];
  }
  return (1);
}
}
/* END FUNCTION-DEF join_addi_addr LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_op_new LOC=UNKNOWN */
static struct jit_op *jit_op_new(unsigned short code , unsigned char spec , long arg1 ,
                                 long arg2 , long arg3 , unsigned char arg_size ) 
{ 
  struct jit_op *r ;
  void *tmp ;

  {
  tmp = malloc(sizeof(struct jit_op ));
  r = (struct jit_op *)tmp;
  r->code = code;
  r->spec = spec;
  r->fp = (unsigned char)0;
  r->arg[0] = arg1;
  r->arg[1] = arg2;
  r->arg[2] = arg3;
  r->r_arg[0] = (jit_value )-1;
  r->r_arg[1] = (jit_value )-1;
  r->r_arg[2] = (jit_value )-1;
  r->assigned = (unsigned char)0;
  r->in_use = (unsigned char)1;
  r->arg_size = arg_size;
  r->next = (struct jit_op *)((void *)0);
  r->prev = (struct jit_op *)((void *)0);
  r->patch_addr = 0L;
  r->jmp_addr = (struct jit_op *)((void *)0);
  r->regmap = (struct jit_rmap *)((void *)0);
  r->live_in = (struct jit_set *)((void *)0);
  r->live_out = (struct jit_set *)((void *)0);
  r->allocator_hints = (struct jit_tree *)((void *)0);
  r->debug_info = (struct jit_debug_info *)((void *)0);
  r->addendum = (void *)0;
  return (r);
}
}
/* END FUNCTION-DEF jit_op_new LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_free_op LOC=UNKNOWN */
__inline static void jit_free_op(struct jit_op *op ) 
{ 
  struct jit_func_info *info ;

  {
  if (op->live_in) {
    jit_set_free(op->live_in);
  }
  if (op->live_out) {
    jit_set_free(op->live_out);
  }
  rmap_free(op->regmap);
  jit_allocator_hints_free(op->allocator_hints);
  if (op->debug_info) {
    free((void *)op->debug_info);
  }
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 384U) {
    info = (struct jit_func_info *)op->arg[1];
    free((void *)info->args);
    free((void *)info);
  }
  free((void *)op);
  return;
}
}
/* END FUNCTION-DEF jit_free_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF _cipher$_xtea_decipher LOC=UNKNOWN */
void _cipher$_xtea_decipher(unsigned int block_no , unsigned int num_rounds , unsigned int *v ,
                            unsigned int *key , unsigned int size ) 
{ 
  unsigned int i ;

  {
  i = 0;
  while (i < size / 8) {
    _cipher$_xtea_decipherBlock(num_rounds, v, key);
    v += 2;
    i ++;
  }
}
}
/* END FUNCTION-DEF _cipher$_xtea_decipher LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_comment LOC=UNKNOWN */
void print_comment(struct output_buf *linebuf , jit_op *op ) 
{ 
  char *str ;
  int i ;
  size_t tmp ;

  {
  str = (char *)op->arg[0];
  ob_append(linebuf, (char *)"// ");
  i = 0;
  while (1) {
    tmp = strlen((char const   *)str);
    if (! ((size_t )i < tmp)) {
      break;
    }
    if ((int )*(str + i) == 13) {
      ob_append(linebuf, (char *)"\n// ");
    } else
    if ((int )*(str + i) == 10) {
      ob_append(linebuf, (char *)"\n// ");
    } else {
      ob_printf(linebuf, "%c", (int )*(str + i));
    }
    i ++;
  }
  return;
}
}
/* END FUNCTION-DEF print_comment LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_optimize_st_ops LOC=UNKNOWN */
void jit_optimize_st_ops(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 480U) {
      if (op->prev) {
        if ((int )(op->prev)->code == 618) {
          if (op->arg[1] == (op->prev)->arg[0]) {
            if ((op->prev)->arg[1] >= (-0x7FFFFFFF-1)) {
              if ((op->prev)->arg[1] <= 2147483647L) {
                tmp___0 = jit_set_get(op->live_out, (int )op->arg[1]);
                if (! tmp___0) {
                  if (! ((int )op->code & 2)) {
                    op->code = (unsigned short)41;
                    op->spec = (unsigned char )((2 << 2) | 1);
                  } else {
                    op->code = (unsigned short)42;
                    op->spec = (unsigned char )((2 << 2) | 2);
                  }
                  op->arg[1] = (op->prev)->arg[1];
                  (op->prev)->code = (unsigned short)392;
                  (op->prev)->spec = (unsigned char)0;
                }
              }
            }
          }
        }
      }
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 752U) {
      if (op->prev) {
        if ((int )(op->prev)->code == 618) {
          if (op->arg[2] == (op->prev)->arg[0]) {
            if ((op->prev)->arg[1] >= (-0x7FFFFFFF-1)) {
              if ((op->prev)->arg[1] <= 2147483647L) {
                tmp___1 = jit_set_get(op->live_out, (int )op->arg[2]);
                if (! tmp___1) {
                  if (! ((int )op->code & 2)) {
                    op->code = (unsigned short)609;
                    op->spec = (unsigned char )(((2 << 4) | (1 << 2)) | 1);
                  } else {
                    op->code = (unsigned short)610;
                    op->spec = (unsigned char )(((2 << 4) | (1 << 2)) | 2);
                  }
                  op->arg[2] = (op->prev)->arg[1];
                  (op->prev)->code = (unsigned short)392;
                  (op->prev)->spec = (unsigned char)0;
                }
              }
            }
          }
        }
      }
    }
    op = op->next;
  }
  return;
}
}
/* END FUNCTION-DEF jit_optimize_st_ops LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_op_bytes LOC=UNKNOWN */
__inline static void print_op_bytes(FILE *f , struct jit *jit , jit_op *op ) 
{ 
  int i ;

  {
  i = 0;
  while ((unsigned long )i < op->code_length) {
    fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)" %02x",
            (int )*(jit->buf + (op->code_offset + (unsigned long )i)));
    i ++;
  }
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"\n.nl\n");
  return;
}
}
/* END FUNCTION-DEF print_op_bytes LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF cleanup LOC=UNKNOWN */
static void cleanup(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  struct jit_func_info *info ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while (op) {
    if (op->live_in) {
      jit_set_free(op->live_in);
      op->live_in = (struct jit_set *)((void *)0);
    }
    if (op->live_out) {
      jit_set_free(op->live_out);
      op->live_out = (struct jit_set *)((void *)0);
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 384U) {
      if (op->arg[1]) {
        info = (struct jit_func_info *)op->arg[1];
        free((void *)info->args);
        info->args = (struct jit_inp_arg *)((void *)0);
      }
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 840U) {
      op->arg[0] = (jit_value )0;
      op->arg[1] = (jit_value )0;
    }
    op = op->next;
  }
  return;
}
}
/* END FUNCTION-DEF cleanup LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_shift_op LOC=UNKNOWN */
static void emit_shift_op(struct jit *jit , struct jit_op *op , int shift_op , int imm ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  long tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  int destreg ;
  int valreg ;
  int shiftreg ;
  int cx_in_use ;
  int tmp___14 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___18 ;
  int tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  long tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___26 ;
  int tmp___27 ;
  int tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  long tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___35 ;
  int tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  long tmp___40 ;
  unsigned char *tmp___41 ;
  x86_imm_buf imb ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char _amd64_rex_bits___6 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  jit_hw_reg *tmp___69 ;
  jit_hw_reg *tmp___70 ;
  int tmpreg ;
  int tmp___71 ;
  int tmp_in_use ;
  int tmp___72 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___77 ;
  int tmp___78 ;
  int tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  long tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char _amd64_rex_bits___9 ;
  int tmp___86 ;
  int tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  long tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char _amd64_rex_bits___10 ;
  int tmp___93 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char _amd64_rex_bits___11 ;
  int tmp___98 ;
  int tmp___99 ;
  int tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  long tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char _amd64_rex_bits___12 ;
  int tmp___106 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;

  {
  if (imm) {
    if (op->r_arg[0] != op->r_arg[1]) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp = jit->ip;
          (jit->ip) ++;
          *tmp = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___0 = 8;
          } else {
            tmp___0 = 0;
          }
          if (op->r_arg[0] > 7L) {
            tmp___1 = 4;
          } else {
            tmp___1 = 0;
          }
          if (op->r_arg[1] > 7L) {
            tmp___2 = 1;
          } else {
            tmp___2 = 0;
          }
          _amd64_rex_bits = (unsigned char )((tmp___0 | tmp___1) | tmp___2);
          if ((int )_amd64_rex_bits != 0) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___5 = jit->ip;
        (jit->ip) ++;
        *tmp___5 = (unsigned char)139;
        break;
        default: 
        tmp___6 = __builtin_expect(1L, 0L);
        if (tmp___6) {
          __assert_rtn("emit_shift_op", "./jitter-amd64.c", 2924, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___7 = jit->ip;
            (jit->ip) ++;
            *tmp___7 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
            break;
          }
          break;
        }
        break;
      }
    }
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___8 = 1;
        } else {
          tmp___8 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(8 | tmp___8);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___9 = jit->ip;
          (jit->ip) ++;
          *tmp___9 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      while (1) {
        if (op->r_arg[2] == 1L) {
          tmp___10 = jit->ip;
          (jit->ip) ++;
          *tmp___10 = (unsigned char)209;
          while (1) {
            while (1) {
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = (unsigned char )((long )((3 << 6) | ((shift_op & 7) << 3)) | ((op->r_arg[0] & 7L) & 7L));
              break;
            }
            break;
          }
        } else {
          tmp___12 = jit->ip;
          (jit->ip) ++;
          *tmp___12 = (unsigned char)193;
          while (1) {
            while (1) {
              tmp___13 = jit->ip;
              (jit->ip) ++;
              *tmp___13 = (unsigned char )((long )((3 << 6) | ((shift_op & 7) << 3)) | ((op->r_arg[0] & 7L) & 7L));
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(op->r_arg[2] & 255L);
            (jit->ip) ++;
            break;
          }
        }
        break;
      }
      break;
    }
  } else {
    destreg = (int )op->r_arg[0];
    valreg = (int )op->r_arg[1];
    shiftreg = (int )op->r_arg[2];
    if (destreg != 1) {
      tmp___14 = jit_reg_in_use(op, 1, 0);
      cx_in_use = tmp___14;
      if (cx_in_use) {
        if (shiftreg != 1) {
          while (1) {
            while (1) {
              _amd64_rex_bits___1 = (unsigned char)0;
              if ((int )_amd64_rex_bits___1 != 0) {
                tmp___15 = jit->ip;
                (jit->ip) ++;
                *tmp___15 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
              }
              break;
            }
            tmp___16 = jit->ip;
            (jit->ip) ++;
            *tmp___16 = (unsigned char)81;
            break;
          }
        }
      }
      if (shiftreg != 1) {
        while (1) {
          if (sizeof(void *) == 2UL) {
            tmp___17 = jit->ip;
            (jit->ip) ++;
            *tmp___17 = (unsigned char)102;
          }
          while (1) {
            if (sizeof(void *) > 4UL) {
              tmp___18 = 8;
            } else {
              tmp___18 = 0;
            }
            if (shiftreg > 7) {
              tmp___19 = 1;
            } else {
              tmp___19 = 0;
            }
            _amd64_rex_bits___2 = (unsigned char )(tmp___18 | tmp___19);
            if ((int )_amd64_rex_bits___2 != 0) {
              tmp___20 = jit->ip;
              (jit->ip) ++;
              *tmp___20 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
            } else
            if (sizeof(void *) == 1UL) {
              tmp___20 = jit->ip;
              (jit->ip) ++;
              *tmp___20 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
            }
            break;
          }
          switch (sizeof(void *)) {
          case 1UL: 
          tmp___21 = jit->ip;
          (jit->ip) ++;
          *tmp___21 = (unsigned char)138;
          break;
          case 8UL: 
          case 4UL: 
          case 2UL: 
          tmp___22 = jit->ip;
          (jit->ip) ++;
          *tmp___22 = (unsigned char)139;
          break;
          default: 
          tmp___23 = __builtin_expect(1L, 0L);
          if (tmp___23) {
            __assert_rtn("emit_shift_op", "./jitter-amd64.c", 2936, "0");
          }
          }
          while (1) {
            while (1) {
              tmp___24 = jit->ip;
              (jit->ip) ++;
              *tmp___24 = (unsigned char )(((3 << 6) | (1 << 3)) | (shiftreg & 7));
              break;
            }
            break;
          }
          break;
        }
      }
      if (destreg != valreg) {
        if (valreg != 1) {
          while (1) {
            if (sizeof(void *) == 2UL) {
              tmp___25 = jit->ip;
              (jit->ip) ++;
              *tmp___25 = (unsigned char)102;
            }
            while (1) {
              if (sizeof(void *) > 4UL) {
                tmp___26 = 8;
              } else {
                tmp___26 = 0;
              }
              if (destreg > 7) {
                tmp___27 = 4;
              } else {
                tmp___27 = 0;
              }
              if (valreg > 7) {
                tmp___28 = 1;
              } else {
                tmp___28 = 0;
              }
              _amd64_rex_bits___3 = (unsigned char )((tmp___26 | tmp___27) | tmp___28);
              if ((int )_amd64_rex_bits___3 != 0) {
                tmp___29 = jit->ip;
                (jit->ip) ++;
                *tmp___29 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
              } else
              if (sizeof(void *) == 1UL) {
                tmp___29 = jit->ip;
                (jit->ip) ++;
                *tmp___29 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
              }
              break;
            }
            switch (sizeof(void *)) {
            case 1UL: 
            tmp___30 = jit->ip;
            (jit->ip) ++;
            *tmp___30 = (unsigned char)138;
            break;
            case 8UL: 
            case 4UL: 
            case 2UL: 
            tmp___31 = jit->ip;
            (jit->ip) ++;
            *tmp___31 = (unsigned char)139;
            break;
            default: 
            tmp___32 = __builtin_expect(1L, 0L);
            if (tmp___32) {
              __assert_rtn("emit_shift_op", "./jitter-amd64.c", 2938, "0");
            }
            }
            while (1) {
              while (1) {
                tmp___33 = jit->ip;
                (jit->ip) ++;
                *tmp___33 = (unsigned char )(((3 << 6) | ((destreg & 7) << 3)) | (valreg & 7));
                break;
              }
              break;
            }
            break;
          }
        } else {
          while (1) {
            if (sizeof(void *) == 2UL) {
              tmp___34 = jit->ip;
              (jit->ip) ++;
              *tmp___34 = (unsigned char)102;
            }
            while (1) {
              if (sizeof(void *) > 4UL) {
                tmp___35 = 8;
              } else {
                tmp___35 = 0;
              }
              if (destreg > 7) {
                tmp___36 = 4;
              } else {
                tmp___36 = 0;
              }
              _amd64_rex_bits___4 = (unsigned char )(tmp___35 | tmp___36);
              if ((int )_amd64_rex_bits___4 != 0) {
                tmp___37 = jit->ip;
                (jit->ip) ++;
                *tmp___37 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
              } else
              if (sizeof(void *) == 1UL) {
                tmp___37 = jit->ip;
                (jit->ip) ++;
                *tmp___37 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
              }
              break;
            }
            switch (sizeof(void *)) {
            case 1UL: 
            tmp___38 = jit->ip;
            (jit->ip) ++;
            *tmp___38 = (unsigned char)138;
            break;
            case 8UL: 
            case 4UL: 
            case 2UL: 
            tmp___39 = jit->ip;
            (jit->ip) ++;
            *tmp___39 = (unsigned char)139;
            break;
            default: 
            tmp___40 = __builtin_expect(1L, 0L);
            if (tmp___40) {
              __assert_rtn("emit_shift_op", "./jitter-amd64.c", 2939, "0");
            }
            }
            while (1) {
              while (1) {
                while (1) {
                  tmp___46 = jit->ip;
                  (jit->ip) ++;
                  *tmp___46 = (unsigned char )((((destreg & 7) & 7) << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___47 = jit->ip;
                  (jit->ip) ++;
                  *tmp___47 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                break;
                while (1) {
                  tmp___56 = jit->ip;
                  (jit->ip) ++;
                  *tmp___56 = (unsigned char )((((destreg & 7) & 7) << 3) | 4);
                  break;
                }
                break;
                while (1) {
                  tmp___57 = jit->ip;
                  (jit->ip) ++;
                  *tmp___57 = (unsigned char )(((1 << 6) | (((destreg & 7) & 7) << 3)) | 4);
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char)0;
                  (jit->ip) ++;
                  break;
                }
                break;
              }
              break;
            }
            break;
          }
        }
      }
      while (1) {
        while (1) {
          if (destreg > 7) {
            tmp___63 = 1;
          } else {
            tmp___63 = 0;
          }
          _amd64_rex_bits___5 = (unsigned char )(8 | tmp___63);
          if ((int )_amd64_rex_bits___5 != 0) {
            tmp___64 = jit->ip;
            (jit->ip) ++;
            *tmp___64 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
          }
          break;
        }
        while (1) {
          tmp___65 = jit->ip;
          (jit->ip) ++;
          *tmp___65 = (unsigned char)211;
          while (1) {
            while (1) {
              tmp___66 = jit->ip;
              (jit->ip) ++;
              *tmp___66 = (unsigned char )(((3 << 6) | ((shift_op & 7) << 3)) | ((destreg & 7) & 7));
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      if (cx_in_use) {
        if (shiftreg != 1) {
          while (1) {
            while (1) {
              _amd64_rex_bits___6 = (unsigned char)0;
              if ((int )_amd64_rex_bits___6 != 0) {
                tmp___67 = jit->ip;
                (jit->ip) ++;
                *tmp___67 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
              }
              break;
            }
            tmp___68 = jit->ip;
            (jit->ip) ++;
            *tmp___68 = (unsigned char)89;
            break;
          }
        }
      }
    } else {
      tmp___70 = jit_get_unused_reg(jit->reg_al, op, 0);
      tmp___69 = tmp___70;
      if (tmp___69) {
        tmp___71 = tmp___69->id;
      } else {
        tmp___71 = 0;
      }
      tmpreg = tmp___71;
      tmp___72 = jit_reg_in_use(op, tmpreg, 0);
      tmp_in_use = tmp___72;
      if (tmp_in_use) {
        while (1) {
          while (1) {
            if (tmpreg > 7) {
              tmp___73 = 1;
            } else {
              tmp___73 = 0;
            }
            _amd64_rex_bits___7 = (unsigned char )tmp___73;
            if ((int )_amd64_rex_bits___7 != 0) {
              tmp___74 = jit->ip;
              (jit->ip) ++;
              *tmp___74 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
            }
            break;
          }
          tmp___75 = jit->ip;
          (jit->ip) ++;
          *tmp___75 = (unsigned char )(80 + (tmpreg & 7));
          break;
        }
      }
      if (tmpreg != valreg) {
        while (1) {
          if (sizeof(void *) == 2UL) {
            tmp___76 = jit->ip;
            (jit->ip) ++;
            *tmp___76 = (unsigned char)102;
          }
          while (1) {
            if (sizeof(void *) > 4UL) {
              tmp___77 = 8;
            } else {
              tmp___77 = 0;
            }
            if (tmpreg > 7) {
              tmp___78 = 4;
            } else {
              tmp___78 = 0;
            }
            if (valreg > 7) {
              tmp___79 = 1;
            } else {
              tmp___79 = 0;
            }
            _amd64_rex_bits___8 = (unsigned char )((tmp___77 | tmp___78) | tmp___79);
            if ((int )_amd64_rex_bits___8 != 0) {
              tmp___80 = jit->ip;
              (jit->ip) ++;
              *tmp___80 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
            } else
            if (sizeof(void *) == 1UL) {
              tmp___80 = jit->ip;
              (jit->ip) ++;
              *tmp___80 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
            }
            break;
          }
          switch (sizeof(void *)) {
          case 1UL: 
          tmp___81 = jit->ip;
          (jit->ip) ++;
          *tmp___81 = (unsigned char)138;
          break;
          case 8UL: 
          case 4UL: 
          case 2UL: 
          tmp___82 = jit->ip;
          (jit->ip) ++;
          *tmp___82 = (unsigned char)139;
          break;
          default: 
          tmp___83 = __builtin_expect(1L, 0L);
          if (tmp___83) {
            __assert_rtn("emit_shift_op", "./jitter-amd64.c", 2952, "0");
          }
          }
          while (1) {
            while (1) {
              tmp___84 = jit->ip;
              (jit->ip) ++;
              *tmp___84 = (unsigned char )(((3 << 6) | ((tmpreg & 7) << 3)) | (valreg & 7));
              break;
            }
            break;
          }
          break;
        }
      }
      if (shiftreg != 1) {
        while (1) {
          if (sizeof(void *) == 2UL) {
            tmp___85 = jit->ip;
            (jit->ip) ++;
            *tmp___85 = (unsigned char)102;
          }
          while (1) {
            if (sizeof(void *) > 4UL) {
              tmp___86 = 8;
            } else {
              tmp___86 = 0;
            }
            if (shiftreg > 7) {
              tmp___87 = 1;
            } else {
              tmp___87 = 0;
            }
            _amd64_rex_bits___9 = (unsigned char )(tmp___86 | tmp___87);
            if ((int )_amd64_rex_bits___9 != 0) {
              tmp___88 = jit->ip;
              (jit->ip) ++;
              *tmp___88 = (unsigned char )(64 | (int )_amd64_rex_bits___9);
            } else
            if (sizeof(void *) == 1UL) {
              tmp___88 = jit->ip;
              (jit->ip) ++;
              *tmp___88 = (unsigned char )(64 | (int )_amd64_rex_bits___9);
            }
            break;
          }
          switch (sizeof(void *)) {
          case 1UL: 
          tmp___89 = jit->ip;
          (jit->ip) ++;
          *tmp___89 = (unsigned char)138;
          break;
          case 8UL: 
          case 4UL: 
          case 2UL: 
          tmp___90 = jit->ip;
          (jit->ip) ++;
          *tmp___90 = (unsigned char)139;
          break;
          default: 
          tmp___91 = __builtin_expect(1L, 0L);
          if (tmp___91) {
            __assert_rtn("emit_shift_op", "./jitter-amd64.c", 2953, "0");
          }
          }
          while (1) {
            while (1) {
              tmp___92 = jit->ip;
              (jit->ip) ++;
              *tmp___92 = (unsigned char )(((3 << 6) | (1 << 3)) | (shiftreg & 7));
              break;
            }
            break;
          }
          break;
        }
      }
      while (1) {
        while (1) {
          if (tmpreg > 7) {
            tmp___93 = 1;
          } else {
            tmp___93 = 0;
          }
          _amd64_rex_bits___10 = (unsigned char )(8 | tmp___93);
          if ((int )_amd64_rex_bits___10 != 0) {
            tmp___94 = jit->ip;
            (jit->ip) ++;
            *tmp___94 = (unsigned char )(64 | (int )_amd64_rex_bits___10);
          }
          break;
        }
        while (1) {
          tmp___95 = jit->ip;
          (jit->ip) ++;
          *tmp___95 = (unsigned char)211;
          while (1) {
            while (1) {
              tmp___96 = jit->ip;
              (jit->ip) ++;
              *tmp___96 = (unsigned char )(((3 << 6) | ((shift_op & 7) << 3)) | ((tmpreg & 7) & 7));
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp___97 = jit->ip;
          (jit->ip) ++;
          *tmp___97 = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___98 = 8;
          } else {
            tmp___98 = 0;
          }
          if (destreg > 7) {
            tmp___99 = 4;
          } else {
            tmp___99 = 0;
          }
          if (tmpreg > 7) {
            tmp___100 = 1;
          } else {
            tmp___100 = 0;
          }
          _amd64_rex_bits___11 = (unsigned char )((tmp___98 | tmp___99) | tmp___100);
          if ((int )_amd64_rex_bits___11 != 0) {
            tmp___101 = jit->ip;
            (jit->ip) ++;
            *tmp___101 = (unsigned char )(64 | (int )_amd64_rex_bits___11);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___101 = jit->ip;
            (jit->ip) ++;
            *tmp___101 = (unsigned char )(64 | (int )_amd64_rex_bits___11);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___102 = jit->ip;
        (jit->ip) ++;
        *tmp___102 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___103 = jit->ip;
        (jit->ip) ++;
        *tmp___103 = (unsigned char)139;
        break;
        default: 
        tmp___104 = __builtin_expect(1L, 0L);
        if (tmp___104) {
          __assert_rtn("emit_shift_op", "./jitter-amd64.c", 2955, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___105 = jit->ip;
            (jit->ip) ++;
            *tmp___105 = (unsigned char )(((3 << 6) | ((destreg & 7) << 3)) | (tmpreg & 7));
            break;
          }
          break;
        }
        break;
      }
      if (tmp_in_use) {
        while (1) {
          while (1) {
            if (tmpreg > 7) {
              tmp___106 = 1;
            } else {
              tmp___106 = 0;
            }
            _amd64_rex_bits___12 = (unsigned char )tmp___106;
            if ((int )_amd64_rex_bits___12 != 0) {
              tmp___107 = jit->ip;
              (jit->ip) ++;
              *tmp___107 = (unsigned char )(64 | (int )_amd64_rex_bits___12);
            }
            break;
          }
          tmp___108 = jit->ip;
          (jit->ip) ++;
          *tmp___108 = (unsigned char )(88 + (tmpreg & 7));
          break;
        }
      }
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_shift_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF _cipher$_xtea_encipher LOC=UNKNOWN */
void _cipher$_xtea_encipher(unsigned int block_no , unsigned int num_rounds , unsigned int *v ,
                            unsigned int *key , unsigned int size ) 
{ 
  unsigned int i ;

  {
  i = 0;
  while (i < size / 8) {
    _cipher$_xtea_encipherBlock(num_rounds, v, key);
    v += 2;
    i ++;
  }
}
}
/* END FUNCTION-DEF _cipher$_xtea_encipher LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_tree_size LOC=UNKNOWN */
static int jit_tree_size(jit_tree *h ) 
{ 
  int tmp ;
  int tmp___0 ;

  {
  if ((unsigned long )h == (unsigned long )((void *)0)) {
    return (0);
  }
  tmp = jit_tree_size(h->left);
  tmp___0 = jit_tree_size(h->right);
  return ((tmp + tmp___0) + 1);
}
}
/* END FUNCTION-DEF jit_tree_size LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_prepare_spills_on_jmpr_targets LOC=UNKNOWN */
__inline static void jit_prepare_spills_on_jmpr_targets(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  jit_op *newop ;
  struct jit_op *tmp___0 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 856U) {
      tmp___0 = jit_op_new((unsigned short)594, (unsigned char)0, 0L, 0L, 0L, (unsigned char)0);
      newop = tmp___0;
      jit_op_prepend(op->jmp_addr, newop);
    } else
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 200U) {
      tmp___0 = jit_op_new((unsigned short)594, (unsigned char)0, 0L, 0L, 0L, (unsigned char)0);
      newop = tmp___0;
      jit_op_prepend(op->jmp_addr, newop);
    }
    op = op->next;
  }
  return;
}
}
/* END FUNCTION-DEF jit_prepare_spills_on_jmpr_targets LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_is_associated LOC=UNKNOWN */
static jit_hw_reg *rmap_is_associated(jit_rmap *rmap , int reg_id , int fp , jit_value *virt_reg ) 
{ 
  jit_hw_reg *tmp ;

  {
  tmp = rmap_is_associated_aux(rmap->map, reg_id, fp, virt_reg);
  return (tmp);
}
}
/* END FUNCTION-DEF rmap_is_associated LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_assign_regs LOC=UNKNOWN */
void jit_assign_regs(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  jit_op *op___0 ;
  jit_op *tmp___0 ;
  jit_op *op___1 ;
  jit_op *tmp___1 ;
  jit_op *op___2 ;
  jit_op *tmp___2 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    op->regmap = rmap_init();
    op = op->next;
  }
  tmp___0 = jit_op_first(jit->ops);
  op___0 = tmp___0;
  while ((unsigned long )op___0 != (unsigned long )((void *)0)) {
    assign_regs(jit, op___0);
    op___0 = op___0->next;
  }
  tmp___1 = jit_op_first(jit->ops);
  op___1 = tmp___1;
  while ((unsigned long )op___1 != (unsigned long )((void *)0)) {
    branch_adjustment(jit, op___1);
    op___1 = op___1->next;
  }
  tmp___2 = jit_op_first(jit->ops);
  op___2 = tmp___2;
  while ((unsigned long )op___2 != (unsigned long )((void *)0)) {
    jump_adjustment(jit, op___2);
    op___2 = op___2->next;
  }
  return;
}
}
/* END FUNCTION-DEF jit_assign_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_init LOC=UNKNOWN */
__inline static jit_rmap *rmap_init(void) 
{ 
  jit_rmap *res ;
  void *tmp ;

  {
  tmp = malloc(sizeof(jit_rmap ));
  res = (jit_rmap *)tmp;
  res->map = (jit_tree *)((void *)0);
  return (res);
}
}
/* END FUNCTION-DEF rmap_init LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF delete_node LOC=UNKNOWN */
static jit_tree *delete_node(jit_tree *h , jit_tree_key key , int *found ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  jit_tree_key tmp___4 ;
  jit_tree *tmp___5 ;
  jit_tree *tmp___6 ;

  {
  if ((unsigned long )h == (unsigned long )((void *)0)) {
    if (found) {
      *found = 0;
    }
    return ((jit_tree *)((void *)0));
  }
  if (key < h->key) {
    tmp = is_red(h->left);
    if (! tmp) {
      if (h->left) {
        tmp___0 = is_red((h->left)->left);
        if (! tmp___0) {
          h = move_red_left(h);
        }
      }
    }
    h->left = delete_node(h->left, key, found);
  } else {
    tmp___1 = is_red(h->left);
    if (tmp___1) {
      h = rotate_right(h);
    }
    if (key == h->key) {
      if ((unsigned long )h->right == (unsigned long )((void *)0)) {
        free((void *)h);
        if (found) {
          *found = 1;
        }
        return ((jit_tree *)((void *)0));
      }
    }
    tmp___2 = is_red(h->right);
    if (! tmp___2) {
      if (h->right) {
        tmp___3 = is_red((h->right)->left);
        if (! tmp___3) {
          h = move_red_right(h);
        }
      }
    }
    if (key == h->key) {
      tmp___4 = node_min(h->right);
      tmp___5 = jit_tree_search(h->right, tmp___4);
      h->value = tmp___5->value;
      h->key = node_min(h->right);
      h->right = delete_min(h->right);
      if (found) {
        *found = 1;
      }
    } else {
      h->right = delete_node(h->right, key, found);
    }
  }
  tmp___6 = fixup(h);
  return (tmp___6);
}
}
/* END FUNCTION-DEF delete_node LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_dump_ops LOC=UNKNOWN */
void jit_dump_ops(struct jit *jit , int verbosity ) 
{ 
  jit_tree *labels ;
  jit_tree *tmp ;

  {
  if (! (verbosity & 14)) {
    verbosity |= 1;
  }
  tmp = prepare_labels(jit);
  labels = tmp;
  if (verbosity & 1) {
    jit_dump_ops_general(jit, labels, verbosity);
  }
  if (verbosity & 2) {
    compiler_based_debugger(jit);
  }
  if (verbosity & 8) {
    jit_dump_ops_compilable(jit, labels);
  }
  if (verbosity & 4) {
    jit_dump_ops_combined(jit, labels);
  }
  jit_tree_free(labels);
  return;
}
}
/* END FUNCTION-DEF jit_dump_ops LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_get LOC=UNKNOWN */
static jit_hw_reg *rmap_get(jit_rmap *rmap , jit_value reg ) 
{ 
  jit_tree *found ;
  jit_tree *tmp ;

  {
  tmp = jit_tree_search(rmap->map, reg);
  found = tmp;
  if (found) {
    return ((jit_hw_reg *)found->value);
  }
  return ((jit_hw_reg *)((void *)0));
}
}
/* END FUNCTION-DEF rmap_get LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_set_new LOC=UNKNOWN */
__inline static jit_set *jit_set_new(void) 
{ 
  jit_set *s ;
  void *tmp ;

  {
  tmp = malloc(sizeof(jit_set ));
  s = (jit_set *)tmp;
  s->root = (jit_tree *)((void *)0);
  return (s);
}
}
/* END FUNCTION-DEF jit_set_new LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_assoc LOC=UNKNOWN */
static void rmap_assoc(jit_rmap *rmap , jit_value reg , jit_hw_reg *hreg ) 
{ 


  {
  rmap->map = jit_tree_insert(rmap->map, reg, (jit_tree_value )hreg, (int *)((void *)0));
  return;
}
}
/* END FUNCTION-DEF rmap_assoc LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF prepare_registers_for_call LOC=UNKNOWN */
static void prepare_registers_for_call(struct jit_reg_allocator *al , jit_op *op ) 
{ 
  jit_value r ;
  jit_value reg ;
  jit_hw_reg *hreg ;
  int alive ;
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int spill ;
  jit_value spill_reg ;
  jit_hw_reg *freereg ;
  jit_hw_reg *tmp___2 ;
  int args ;
  jit_value tmp___3 ;
  int q ;
  jit_hw_reg *hreg___0 ;
  jit_hw_reg *tmp___4 ;
  int tmp___5 ;
  int q___0 ;
  jit_hw_reg *hreg___1 ;
  jit_hw_reg *tmp___6 ;
  int tmp___7 ;

  {
  hreg = (jit_hw_reg *)((void *)0);
  if (al->ret_reg) {
    hreg = rmap_is_associated(op->regmap, (al->ret_reg)->id, 0, & r);
  }
  if (hreg) {
    tmp = jit_set_get(op->live_out, (int )r);
    if (tmp) {
      tmp___1 = 1;
    } else {
      tmp___0 = jit_set_get(op->live_in, (int )r);
      if (tmp___0) {
        tmp___1 = 1;
      } else {
        tmp___1 = 0;
      }
    }
    alive = tmp___1;
    if (! alive) {
      goto skip;
    }
    tmp___2 = rmap_spill_candidate(al, op, r, & spill, & spill_reg, 1);
    freereg = tmp___2;
    if (freereg) {
      if (! spill) {
        rename_reg(op, freereg->id, (al->ret_reg)->id);
        rmap_unassoc(op->regmap, r);
        rmap_assoc(op->regmap, r, freereg);
      } else {
        sync_reg(op, hreg, r);
      }
    } else {
      sync_reg(op, hreg, r);
    }
  }
  skip: 
  if (al->fpret_reg) {
    hreg = rmap_is_associated(op->regmap, (al->fpret_reg)->id, 1, & r);
    if (hreg) {
      sync_reg(op, hreg, r);
    }
  }
  if (op->arg[0] < (jit_value )al->gp_arg_reg_cnt) {
    tmp___3 = op->arg[0];
  } else {
    tmp___3 = (jit_value )al->gp_arg_reg_cnt;
  }
  args = (int )tmp___3;
  q = 0;
  while (q < args) {
    tmp___4 = rmap_is_associated(op->regmap, (*(al->gp_arg_regs + q))->id, 0, & reg);
    hreg___0 = tmp___4;
    if (hreg___0) {
      tmp___5 = jit_set_get(op->live_out, (int )reg);
      if (tmp___5) {
        unload_reg(op, hreg___0, reg);
      }
      rmap_unassoc(op->regmap, reg);
    }
    q ++;
  }
  if (op->arg[1] < (jit_value )al->fp_arg_reg_cnt) {
    args = (int )op->arg[1];
  } else {
    args = al->fp_arg_reg_cnt;
  }
  q___0 = 0;
  while (q___0 < args) {
    tmp___6 = rmap_is_associated(op->regmap, (*(al->fp_arg_regs + q___0))->id, 1,
                                 & reg);
    hreg___1 = tmp___6;
    if (hreg___1) {
      if (hreg___1->id != (al->fpret_reg)->id) {
        tmp___7 = jit_set_get(op->live_out, (int )reg);
        if (tmp___7) {
          unload_reg(op, hreg___1, reg);
        }
      }
      rmap_unassoc(op->regmap, reg);
    }
    q___0 ++;
  }
  return;
}
}
/* END FUNCTION-DEF prepare_registers_for_call LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isxdigit LOC=UNKNOWN */
__inline extern int isxdigit(int _c ) 
{ 
  __darwin_ct_rune_t tmp ;

  {
  tmp = __isctype(_c, 65536UL);
  return (tmp);
}
}
/* END FUNCTION-DEF isxdigit LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_floor LOC=UNKNOWN */
static void emit_sse_floor(struct jit *jit , jit_value a1 , jit_value a2 , int floor ) 
{ 
  int tmp_reg ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___15 ;
  int tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___22 ;
  int tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___29 ;
  int tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  x86_imm_buf imb ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___54 ;
  int tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char _amd64_rex_bits___8 ;
  int tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char _amd64_rex_bits___9 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char _amd64_rex_bits___10 ;
  int tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char _amd64_rex_bits___11 ;
  int tmp___79 ;
  int tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char _amd64_rex_bits___12 ;
  int tmp___86 ;
  int tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;

  {
  if (a2 == 7L) {
    tmp = 0;
  } else {
    tmp = 7;
  }
  tmp_reg = tmp;
  while (1) {
    while (1) {
      tmp___0 = jit->ip;
      (jit->ip) ++;
      *tmp___0 = (unsigned char)102;
      while (1) {
        if (a2 > 7L) {
          tmp___1 = 4;
        } else {
          tmp___1 = 0;
        }
        if (a2 > 7L) {
          tmp___2 = 1;
        } else {
          tmp___2 = 0;
        }
        _amd64_rex_bits = (unsigned char )(tmp___1 | tmp___2);
        if ((int )_amd64_rex_bits != 0) {
          tmp___3 = jit->ip;
          (jit->ip) ++;
          *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)15;
      tmp___5 = jit->ip;
      (jit->ip) ++;
      *tmp___5 = (unsigned char)198;
      while (1) {
        while (1) {
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      *(jit->ip) = (unsigned char)0;
      (jit->ip) ++;
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      tmp___7 = jit->ip;
      (jit->ip) ++;
      *tmp___7 = (unsigned char)102;
      while (1) {
        if (tmp_reg > 7) {
          tmp___8 = 4;
        } else {
          tmp___8 = 0;
        }
        if (tmp_reg > 7) {
          tmp___9 = 1;
        } else {
          tmp___9 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )(tmp___8 | tmp___9);
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___10 = jit->ip;
          (jit->ip) ++;
          *tmp___10 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      tmp___11 = jit->ip;
      (jit->ip) ++;
      *tmp___11 = (unsigned char)15;
      tmp___12 = jit->ip;
      (jit->ip) ++;
      *tmp___12 = (unsigned char)198;
      while (1) {
        while (1) {
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = (unsigned char )(((3 << 6) | ((tmp_reg & 7) << 3)) | (tmp_reg & 7));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      *(jit->ip) = (unsigned char)0;
      (jit->ip) ++;
      break;
    }
    break;
  }
  while (1) {
    tmp___14 = jit->ip;
    (jit->ip) ++;
    *tmp___14 = (unsigned char)242;
    while (1) {
      if (a1 > 7L) {
        tmp___15 = 4;
      } else {
        tmp___15 = 0;
      }
      if (a2 > 7L) {
        tmp___16 = 1;
      } else {
        tmp___16 = 0;
      }
      _amd64_rex_bits___1 = (unsigned char )((8 | tmp___15) | tmp___16);
      if ((int )_amd64_rex_bits___1 != 0) {
        tmp___17 = jit->ip;
        (jit->ip) ++;
        *tmp___17 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
      }
      break;
    }
    tmp___18 = jit->ip;
    (jit->ip) ++;
    *tmp___18 = (unsigned char)15;
    tmp___19 = jit->ip;
    (jit->ip) ++;
    *tmp___19 = (unsigned char)44;
    while (1) {
      while (1) {
        tmp___20 = jit->ip;
        (jit->ip) ++;
        *tmp___20 = (unsigned char )(((long )(3 << 6) | ((a1 & 7L) << 3)) | (a2 & 7L));
        break;
      }
      break;
    }
    break;
  }
  while (1) {
    tmp___21 = jit->ip;
    (jit->ip) ++;
    *tmp___21 = (unsigned char)242;
    while (1) {
      if (tmp_reg > 7) {
        tmp___22 = 4;
      } else {
        tmp___22 = 0;
      }
      if (a1 > 7L) {
        tmp___23 = 1;
      } else {
        tmp___23 = 0;
      }
      _amd64_rex_bits___2 = (unsigned char )((8 | tmp___22) | tmp___23);
      if ((int )_amd64_rex_bits___2 != 0) {
        tmp___24 = jit->ip;
        (jit->ip) ++;
        *tmp___24 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
      }
      break;
    }
    tmp___25 = jit->ip;
    (jit->ip) ++;
    *tmp___25 = (unsigned char)15;
    tmp___26 = jit->ip;
    (jit->ip) ++;
    *tmp___26 = (unsigned char)42;
    while (1) {
      while (1) {
        tmp___27 = jit->ip;
        (jit->ip) ++;
        *tmp___27 = (unsigned char )((long )((3 << 6) | ((tmp_reg & 7) << 3)) | (a1 & 7L));
        break;
      }
      break;
    }
    break;
  }
  if (floor) {
    while (1) {
      tmp___28 = jit->ip;
      (jit->ip) ++;
      *tmp___28 = (unsigned char)102;
      while (1) {
        if (a2 > 7L) {
          tmp___29 = 4;
        } else {
          tmp___29 = 0;
        }
        if (tmp_reg > 7) {
          tmp___30 = 1;
        } else {
          tmp___30 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )(tmp___29 | tmp___30);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___31 = jit->ip;
          (jit->ip) ++;
          *tmp___31 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      tmp___32 = jit->ip;
      (jit->ip) ++;
      *tmp___32 = (unsigned char)15;
      tmp___33 = jit->ip;
      (jit->ip) ++;
      *tmp___33 = (unsigned char)47;
      while (1) {
        while (1) {
          tmp___34 = jit->ip;
          (jit->ip) ++;
          *tmp___34 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (long )(tmp_reg & 7));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (a1 > 7L) {
          tmp___35 = 1;
        } else {
          tmp___35 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )(8 | tmp___35);
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___36 = jit->ip;
          (jit->ip) ++;
          *tmp___36 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      tmp___37 = jit->ip;
      (jit->ip) ++;
      *tmp___37 = (unsigned char)131;
      while (1) {
        while (1) {
          tmp___38 = jit->ip;
          (jit->ip) ++;
          *tmp___38 = (unsigned char )((long )((3 << 6) | (3 << 3)) | (a1 & 7L));
          break;
        }
        break;
      }
      while (1) {
        *(jit->ip) = (unsigned char)0;
        (jit->ip) ++;
        break;
      }
      break;
    }
  } else {
    while (1) {
      tmp___53 = jit->ip;
      (jit->ip) ++;
      *tmp___53 = (unsigned char)102;
      while (1) {
        if (tmp_reg > 7) {
          tmp___54 = 4;
        } else {
          tmp___54 = 0;
        }
        if (a2 > 7L) {
          tmp___55 = 1;
        } else {
          tmp___55 = 0;
        }
        _amd64_rex_bits___7 = (unsigned char )(tmp___54 | tmp___55);
        if ((int )_amd64_rex_bits___7 != 0) {
          tmp___56 = jit->ip;
          (jit->ip) ++;
          *tmp___56 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
        }
        break;
      }
      tmp___57 = jit->ip;
      (jit->ip) ++;
      *tmp___57 = (unsigned char)15;
      tmp___58 = jit->ip;
      (jit->ip) ++;
      *tmp___58 = (unsigned char)47;
      while (1) {
        while (1) {
          tmp___59 = jit->ip;
          (jit->ip) ++;
          *tmp___59 = (unsigned char )((long )((3 << 6) | ((tmp_reg & 7) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (a1 > 7L) {
          tmp___60 = 1;
        } else {
          tmp___60 = 0;
        }
        _amd64_rex_bits___8 = (unsigned char )(8 | tmp___60);
        if ((int )_amd64_rex_bits___8 != 0) {
          tmp___61 = jit->ip;
          (jit->ip) ++;
          *tmp___61 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
        }
        break;
      }
      tmp___62 = jit->ip;
      (jit->ip) ++;
      *tmp___62 = (unsigned char)131;
      while (1) {
        while (1) {
          tmp___63 = jit->ip;
          (jit->ip) ++;
          *tmp___63 = (unsigned char )((long )((3 << 6) | (2 << 3)) | (a1 & 7L));
          break;
        }
        break;
      }
      while (1) {
        *(jit->ip) = (unsigned char)0;
        (jit->ip) ++;
        break;
      }
      break;
    }
  }
  while (1) {
    while (1) {
      tmp___78 = jit->ip;
      (jit->ip) ++;
      *tmp___78 = (unsigned char)102;
      while (1) {
        if (a2 > 7L) {
          tmp___79 = 4;
        } else {
          tmp___79 = 0;
        }
        if (a2 > 7L) {
          tmp___80 = 1;
        } else {
          tmp___80 = 0;
        }
        _amd64_rex_bits___11 = (unsigned char )(tmp___79 | tmp___80);
        if ((int )_amd64_rex_bits___11 != 0) {
          tmp___81 = jit->ip;
          (jit->ip) ++;
          *tmp___81 = (unsigned char )(64 | (int )_amd64_rex_bits___11);
        }
        break;
      }
      tmp___82 = jit->ip;
      (jit->ip) ++;
      *tmp___82 = (unsigned char)15;
      tmp___83 = jit->ip;
      (jit->ip) ++;
      *tmp___83 = (unsigned char)198;
      while (1) {
        while (1) {
          tmp___84 = jit->ip;
          (jit->ip) ++;
          *tmp___84 = (unsigned char )(((long )(3 << 6) | ((a2 & 7L) << 3)) | (a2 & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      *(jit->ip) = (unsigned char)1;
      (jit->ip) ++;
      break;
    }
    break;
  }
  while (1) {
    while (1) {
      tmp___85 = jit->ip;
      (jit->ip) ++;
      *tmp___85 = (unsigned char)102;
      while (1) {
        if (tmp_reg > 7) {
          tmp___86 = 4;
        } else {
          tmp___86 = 0;
        }
        if (tmp_reg > 7) {
          tmp___87 = 1;
        } else {
          tmp___87 = 0;
        }
        _amd64_rex_bits___12 = (unsigned char )(tmp___86 | tmp___87);
        if ((int )_amd64_rex_bits___12 != 0) {
          tmp___88 = jit->ip;
          (jit->ip) ++;
          *tmp___88 = (unsigned char )(64 | (int )_amd64_rex_bits___12);
        }
        break;
      }
      tmp___89 = jit->ip;
      (jit->ip) ++;
      *tmp___89 = (unsigned char)15;
      tmp___90 = jit->ip;
      (jit->ip) ++;
      *tmp___90 = (unsigned char)198;
      while (1) {
        while (1) {
          tmp___91 = jit->ip;
          (jit->ip) ++;
          *tmp___91 = (unsigned char )(((3 << 6) | ((tmp_reg & 7) << 3)) | (tmp_reg & 7));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      *(jit->ip) = (unsigned char)1;
      (jit->ip) ++;
      break;
    }
    break;
  }
  return;
}
}
/* END FUNCTION-DEF emit_sse_floor LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_set_size LOC=UNKNOWN */
__inline static int jit_set_size(jit_set *s ) 
{ 
  int tmp ;

  {
  tmp = jit_tree_size(s->root);
  return (tmp);
}
}
/* END FUNCTION-DEF jit_set_size LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF get_frame_size LOC=UNKNOWN */
static int get_frame_size(struct jit *jit , struct jit_func_info *info ) 
{ 
  int stack_mem ;
  int tmp ;
  int tmp___0 ;
  jit_value tmp___1 ;

  {
  stack_mem = 0;
  stack_mem = (int )((long )stack_mem + info->allocai_mem);
  stack_mem = (int )((unsigned long )stack_mem + (unsigned long )info->gp_reg_count * sizeof(void *));
  stack_mem = (int )((unsigned long )stack_mem + (unsigned long )info->fp_reg_count * sizeof(double ));
  if ((jit->reg_al)->gp_arg_reg_cnt < info->general_arg_cnt) {
    tmp = (jit->reg_al)->gp_arg_reg_cnt;
  } else {
    tmp = info->general_arg_cnt;
  }
  stack_mem = (int )((unsigned long )stack_mem + (unsigned long )tmp * sizeof(void *));
  if ((jit->reg_al)->fp_arg_reg_cnt < info->float_arg_cnt) {
    tmp___0 = (jit->reg_al)->fp_arg_reg_cnt;
  } else {
    tmp___0 = info->float_arg_cnt;
  }
  stack_mem = (int )((unsigned long )stack_mem + (unsigned long )tmp___0 * sizeof(void *));
  tmp___1 = jit_value_align((jit_value )stack_mem, (jit_value )16);
  return ((int )tmp___1);
}
}
/* END FUNCTION-DEF get_frame_size LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isascii LOC=UNKNOWN */
__inline extern int isascii(int _c ) 
{ 


  {
  return ((_c & -128) == 0);
}
}
/* END FUNCTION-DEF isascii LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF copy_reg_to_array LOC=UNKNOWN */
static void copy_reg_to_array(jit_tree_key key , jit_tree_value value , void *target ) 
{ 
  struct copy_target *t ;

  {
  t = (struct copy_target *)target;
  *(t->target + t->index) = key;
  (t->index) ++;
  return;
}
}
/* END FUNCTION-DEF copy_reg_to_array LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF append_msg LOC=UNKNOWN */
static void append_msg(char *buf , char *format  , ...) 
{ 
  va_list___0 ap ;
  unsigned long tmp ;
  size_t tmp___0 ;
  size_t tmp___1 ;
  size_t tmp___2 ;

  {
  tmp___0 = strlen((char const   *)buf);
  if (tmp___0) {
    tmp = __builtin_object_size((void *)buf, 1);
    __builtin___strcat_chk(buf, ", ", tmp);
  }
  __builtin_va_start(ap, format);
  tmp___2 = strlen((char const   *)buf);
  __builtin___vsprintf_chk(buf + tmp___2, 0, 18446744073709551615, (char const   *)format,
                           ap);
  __builtin_va_end(ap);
  return;
}
}
/* END FUNCTION-DEF append_msg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF digittoint LOC=UNKNOWN */
__inline extern int digittoint(int _c ) 
{ 
  int tmp ;

  {
  tmp = __maskrune(_c, 15UL);
  return (tmp);
}
}
/* END FUNCTION-DEF digittoint LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF sse_alu_pd_reg_safeimm LOC=UNKNOWN */
static void sse_alu_pd_reg_safeimm(struct jit *jit , jit_op *op , int op_id , int reg ,
                                   double *imm ) 
{ 
  jit_hw_reg *r ;
  jit_hw_reg *tmp ;
  int _amd64_width_temp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  unsigned char *tmp___4 ;
  int tmp___5 ;
  unsigned char *tmp___6 ;
  amd64_imm_buf imb ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  int tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___21 ;
  int tmp___22 ;
  int tmp___23 ;
  int tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  int _amd64_width_temp___0 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___52 ;
  int tmp___53 ;
  int tmp___54 ;
  unsigned char *tmp___55 ;
  int tmp___56 ;
  unsigned char *tmp___57 ;
  amd64_imm_buf imb___4 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  int tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  unsigned char *tmp___86 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  x86_imm_buf imb___8 ;
  unsigned char *tmp___94 ;
  unsigned char *tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___101 ;
  unsigned char *tmp___102 ;
  unsigned char *tmp___103 ;
  unsigned char *tmp___104 ;
  unsigned char *tmp___105 ;
  unsigned char *tmp___106 ;
  x86_imm_buf imb___9 ;
  unsigned char *tmp___107 ;
  unsigned char *tmp___108 ;
  unsigned char *tmp___109 ;
  unsigned char *tmp___110 ;

  {
  if ((jit_unsigned_value )imm > 4294967295UL) {
    tmp = jit_get_unused_reg(jit->reg_al, op, 0);
    r = tmp;
    if (r) {
      while (1) {
        _amd64_width_temp = (size_t )((long )imm) == (size_t )((int )((size_t )((long )imm)));
        while (1) {
          while (1) {
            if (_amd64_width_temp) {
              tmp___2 = 4;
            } else {
              tmp___2 = 8;
            }
            if (tmp___2 > 4) {
              tmp___1 = 8;
            } else {
              tmp___1 = 0;
            }
            if (r->id > 7) {
              tmp___3 = 1;
            } else {
              tmp___3 = 0;
            }
            _amd64_rex_bits = (unsigned char )(tmp___1 | tmp___3);
            if ((int )_amd64_rex_bits != 0) {
              tmp___4 = jit->ip;
              (jit->ip) ++;
              *tmp___4 = (unsigned char )(64 | (int )_amd64_rex_bits);
            } else {
              if (_amd64_width_temp) {
                tmp___5 = 4;
              } else {
                tmp___5 = 8;
              }
              if (tmp___5 == 1) {
                tmp___4 = jit->ip;
                (jit->ip) ++;
                *tmp___4 = (unsigned char )(64 | (int )_amd64_rex_bits);
              }
            }
            break;
          }
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = (unsigned char )(184 + (r->id & 7));
          if (_amd64_width_temp) {
            tmp___19 = 4;
          } else {
            tmp___19 = 8;
          }
          if (tmp___19 == 8) {
            while (1) {
              imb.val = (size_t )((long )imm);
              tmp___7 = jit->ip;
              (jit->ip) ++;
              *tmp___7 = imb.b[0];
              tmp___8 = jit->ip;
              (jit->ip) ++;
              *tmp___8 = imb.b[1];
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = imb.b[2];
              tmp___10 = jit->ip;
              (jit->ip) ++;
              *tmp___10 = imb.b[3];
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = imb.b[4];
              tmp___12 = jit->ip;
              (jit->ip) ++;
              *tmp___12 = imb.b[5];
              tmp___13 = jit->ip;
              (jit->ip) ++;
              *tmp___13 = imb.b[6];
              tmp___14 = jit->ip;
              (jit->ip) ++;
              *tmp___14 = imb.b[7];
              break;
            }
          } else {
            while (1) {
              imb___0.val = (int )((size_t )((long )imm));
              tmp___15 = jit->ip;
              (jit->ip) ++;
              *tmp___15 = imb___0.b[0];
              tmp___16 = jit->ip;
              (jit->ip) ++;
              *tmp___16 = imb___0.b[1];
              tmp___17 = jit->ip;
              (jit->ip) ++;
              *tmp___17 = imb___0.b[2];
              tmp___18 = jit->ip;
              (jit->ip) ++;
              *tmp___18 = imb___0.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      while (1) {
        tmp___20 = jit->ip;
        (jit->ip) ++;
        *tmp___20 = (unsigned char)102;
        while (1) {
          if (reg > 7) {
            tmp___21 = 4;
          } else {
            tmp___21 = 0;
          }
          if (r->id == 16) {
            tmp___24 = 0;
          } else {
            tmp___24 = r->id;
          }
          if (tmp___24 > 7) {
            tmp___23 = 1;
          } else {
            tmp___23 = 0;
          }
          _amd64_rex_bits___0 = (unsigned char )(tmp___21 | tmp___23);
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___25 = jit->ip;
            (jit->ip) ++;
            *tmp___25 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___26 = jit->ip;
        (jit->ip) ++;
        *tmp___26 = (unsigned char)15;
        tmp___27 = jit->ip;
        (jit->ip) ++;
        *tmp___27 = (unsigned char )op_id;
        while (1) {
          if (r->id == 16) {
            while (1) {
              tmp___28 = jit->ip;
              (jit->ip) ++;
              *tmp___28 = (unsigned char )((((reg & 7) & 7) << 3) | 5);
              break;
            }
            while (1) {
              imb___1.val = 0;
              tmp___29 = jit->ip;
              (jit->ip) ++;
              *tmp___29 = imb___1.b[0];
              tmp___30 = jit->ip;
              (jit->ip) ++;
              *tmp___30 = imb___1.b[1];
              tmp___31 = jit->ip;
              (jit->ip) ++;
              *tmp___31 = imb___1.b[2];
              tmp___32 = jit->ip;
              (jit->ip) ++;
              *tmp___32 = imb___1.b[3];
              break;
            }
          } else {
            while (1) {
              if ((r->id & 7) == 4) {
                while (1) {
                  tmp___33 = jit->ip;
                  (jit->ip) ++;
                  *tmp___33 = (unsigned char )((((reg & 7) & 7) << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___34 = jit->ip;
                  (jit->ip) ++;
                  *tmp___34 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                break;
              }
              if ((r->id & 7) != 5) {
                while (1) {
                  tmp___43 = jit->ip;
                  (jit->ip) ++;
                  *tmp___43 = (unsigned char )((((reg & 7) & 7) << 3) | ((r->id & 7) & 7));
                  break;
                }
                break;
              }
              while (1) {
                tmp___44 = jit->ip;
                (jit->ip) ++;
                *tmp___44 = (unsigned char )(((1 << 6) | (((reg & 7) & 7) << 3)) | ((r->id & 7) & 7));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
              break;
            }
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)0;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___50 = jit->ip;
            (jit->ip) ++;
            *tmp___50 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___51 = jit->ip;
        (jit->ip) ++;
        *tmp___51 = (unsigned char)80;
        break;
      }
      while (1) {
        _amd64_width_temp___0 = (size_t )((long )imm) == (size_t )((int )((size_t )((long )imm)));
        while (1) {
          while (1) {
            if (_amd64_width_temp___0) {
              tmp___54 = 4;
            } else {
              tmp___54 = 8;
            }
            if (tmp___54 > 4) {
              tmp___53 = 8;
            } else {
              tmp___53 = 0;
            }
            _amd64_rex_bits___2 = (unsigned char )tmp___53;
            if ((int )_amd64_rex_bits___2 != 0) {
              tmp___55 = jit->ip;
              (jit->ip) ++;
              *tmp___55 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
            } else {
              if (_amd64_width_temp___0) {
                tmp___56 = 4;
              } else {
                tmp___56 = 8;
              }
              if (tmp___56 == 1) {
                tmp___55 = jit->ip;
                (jit->ip) ++;
                *tmp___55 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
              }
            }
            break;
          }
          tmp___57 = jit->ip;
          (jit->ip) ++;
          *tmp___57 = (unsigned char)184;
          if (_amd64_width_temp___0) {
            tmp___70 = 4;
          } else {
            tmp___70 = 8;
          }
          if (tmp___70 == 8) {
            while (1) {
              imb___4.val = (size_t )((long )imm);
              tmp___58 = jit->ip;
              (jit->ip) ++;
              *tmp___58 = imb___4.b[0];
              tmp___59 = jit->ip;
              (jit->ip) ++;
              *tmp___59 = imb___4.b[1];
              tmp___60 = jit->ip;
              (jit->ip) ++;
              *tmp___60 = imb___4.b[2];
              tmp___61 = jit->ip;
              (jit->ip) ++;
              *tmp___61 = imb___4.b[3];
              tmp___62 = jit->ip;
              (jit->ip) ++;
              *tmp___62 = imb___4.b[4];
              tmp___63 = jit->ip;
              (jit->ip) ++;
              *tmp___63 = imb___4.b[5];
              tmp___64 = jit->ip;
              (jit->ip) ++;
              *tmp___64 = imb___4.b[6];
              tmp___65 = jit->ip;
              (jit->ip) ++;
              *tmp___65 = imb___4.b[7];
              break;
            }
          } else {
            while (1) {
              imb___5.val = (int )((size_t )((long )imm));
              tmp___66 = jit->ip;
              (jit->ip) ++;
              *tmp___66 = imb___5.b[0];
              tmp___67 = jit->ip;
              (jit->ip) ++;
              *tmp___67 = imb___5.b[1];
              tmp___68 = jit->ip;
              (jit->ip) ++;
              *tmp___68 = imb___5.b[2];
              tmp___69 = jit->ip;
              (jit->ip) ++;
              *tmp___69 = imb___5.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      while (1) {
        tmp___71 = jit->ip;
        (jit->ip) ++;
        *tmp___71 = (unsigned char)102;
        while (1) {
          if (reg > 7) {
            tmp___72 = 4;
          } else {
            tmp___72 = 0;
          }
          _amd64_rex_bits___3 = (unsigned char )tmp___72;
          if ((int )_amd64_rex_bits___3 != 0) {
            tmp___73 = jit->ip;
            (jit->ip) ++;
            *tmp___73 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
          }
          break;
        }
        tmp___74 = jit->ip;
        (jit->ip) ++;
        *tmp___74 = (unsigned char)15;
        tmp___75 = jit->ip;
        (jit->ip) ++;
        *tmp___75 = (unsigned char )op_id;
        while (1) {
          while (1) {
            while (1) {
              tmp___91 = jit->ip;
              (jit->ip) ++;
              *tmp___91 = (unsigned char )(((reg & 7) & 7) << 3);
              break;
            }
            break;
            while (1) {
              tmp___92 = jit->ip;
              (jit->ip) ++;
              *tmp___92 = (unsigned char )((1 << 6) | (((reg & 7) & 7) << 3));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)0;
              (jit->ip) ++;
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      while (1) {
        while (1) {
          _amd64_rex_bits___4 = (unsigned char)0;
          if ((int )_amd64_rex_bits___4 != 0) {
            tmp___98 = jit->ip;
            (jit->ip) ++;
            *tmp___98 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
          }
          break;
        }
        tmp___99 = jit->ip;
        (jit->ip) ++;
        *tmp___99 = (unsigned char)88;
        break;
      }
    }
  } else {
    while (1) {
      tmp___100 = jit->ip;
      (jit->ip) ++;
      *tmp___100 = (unsigned char)102;
      while (1) {
        if (reg > 7) {
          tmp___101 = 4;
        } else {
          tmp___101 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )(8 | tmp___101);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___102 = jit->ip;
          (jit->ip) ++;
          *tmp___102 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      tmp___103 = jit->ip;
      (jit->ip) ++;
      *tmp___103 = (unsigned char)15;
      tmp___104 = jit->ip;
      (jit->ip) ++;
      *tmp___104 = (unsigned char )op_id;
      while (1) {
        tmp___105 = jit->ip;
        (jit->ip) ++;
        *tmp___105 = (unsigned char )(((reg & 7) << 3) | 4);
        break;
      }
      while (1) {
        tmp___106 = jit->ip;
        (jit->ip) ++;
        *tmp___106 = (unsigned char )((4 << 3) | 5);
        break;
      }
      while (1) {
        imb___9.val = (int )((long )imm);
        tmp___107 = jit->ip;
        (jit->ip) ++;
        *tmp___107 = imb___9.b[0];
        tmp___108 = jit->ip;
        (jit->ip) ++;
        *tmp___108 = imb___9.b[1];
        tmp___109 = jit->ip;
        (jit->ip) ++;
        *tmp___109 = imb___9.b[2];
        tmp___110 = jit->ip;
        (jit->ip) ++;
        *tmp___110 = imb___9.b[3];
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF sse_alu_pd_reg_safeimm LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_load_op LOC=UNKNOWN */
static int print_load_op(struct jit_disasm *disasm , struct output_buf *linebuf ,
                         jit_op *op ) 
{ 
  char rbuf[256] ;
  char *tmp ;
  char *tmp___0 ;
  jit_value reg ;
  char *tmp___1 ;
  char *tmp___2 ;

  {
  switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
  case 800U: 
  ob_append(linebuf, disasm->indent_template);
  tmp = jit_get_op_name(op);
  ob_append(linebuf, tmp);
  ob_pad(linebuf, 13);
  jit_get_reg_name(disasm, rbuf, (int )op->arg[1]);
  ob_append(linebuf, rbuf);
  return (1);
  case 160U: 
  case 400U: 
  ob_append(linebuf, disasm->indent_template);
  tmp___0 = jit_get_op_name(op);
  ob_append(linebuf, tmp___0);
  ob_pad(linebuf, 13);
  jit_get_reg_name(disasm, rbuf, (int )op->arg[0]);
  ob_append(linebuf, rbuf);
  return (1);
  case 728U: 
  rmap_is_associated((op->prev)->regmap, (int )op->arg[1], 0, & reg);
  ob_append(linebuf, disasm->indent_template);
  tmp___1 = jit_get_op_name(op);
  ob_append(linebuf, tmp___1);
  ob_append(linebuf, (char *)" ");
  ob_pad(linebuf, 13);
  jit_get_reg_name(disasm, rbuf, (int )reg);
  ob_append(linebuf, rbuf);
  return (1);
  case 592U: 
  ob_append(linebuf, disasm->indent_template);
  tmp___2 = jit_get_op_name(op);
  ob_append(linebuf, tmp___2);
  return (1);
  default: 
  return (0);
  }
}
}
/* END FUNCTION-DEF print_load_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF move_red_right LOC=UNKNOWN */
__inline static jit_tree *move_red_right(jit_tree *h ) 
{ 
  int tmp ;

  {
  color_flip(h);
  tmp = is_red((h->left)->left);
  if (tmp) {
    h = rotate_right(h);
    color_flip(h);
  }
  return (h);
}
}
/* END FUNCTION-DEF move_red_right LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_sse_fld_op LOC=UNKNOWN */
static void emit_sse_fld_op(struct jit *jit , jit_op *op , jit_value a1 , jit_value a2 ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  x86_imm_buf imb ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___11 ;
  jit_value tmp___12 ;
  int tmp___13 ;
  jit_value tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___52 ;
  int tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;

  {
  if ((unsigned long )op->arg_size == sizeof(float )) {
    if ((int )op->code & 2) {
      while (1) {
        tmp = jit->ip;
        (jit->ip) ++;
        *tmp = (unsigned char)243;
        while (1) {
          if (a1 > 7L) {
            tmp___0 = 4;
          } else {
            tmp___0 = 0;
          }
          _amd64_rex_bits = (unsigned char )tmp___0;
          if ((int )_amd64_rex_bits != 0) {
            tmp___1 = jit->ip;
            (jit->ip) ++;
            *tmp___1 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        tmp___2 = jit->ip;
        (jit->ip) ++;
        *tmp___2 = (unsigned char)15;
        tmp___3 = jit->ip;
        (jit->ip) ++;
        *tmp___3 = (unsigned char)90;
        while (1) {
          tmp___4 = jit->ip;
          (jit->ip) ++;
          *tmp___4 = (unsigned char )(((a1 & 7L) << 3) | 4L);
          break;
        }
        while (1) {
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = (unsigned char )((4 << 3) | 5);
          break;
        }
        while (1) {
          imb.val = (int )a2;
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = imb.b[0];
          tmp___7 = jit->ip;
          (jit->ip) ++;
          *tmp___7 = imb.b[1];
          tmp___8 = jit->ip;
          (jit->ip) ++;
          *tmp___8 = imb.b[2];
          tmp___9 = jit->ip;
          (jit->ip) ++;
          *tmp___9 = imb.b[3];
          break;
        }
        break;
      }
    } else {
      while (1) {
        tmp___10 = jit->ip;
        (jit->ip) ++;
        *tmp___10 = (unsigned char)243;
        while (1) {
          if (a1 > 7L) {
            tmp___11 = 4;
          } else {
            tmp___11 = 0;
          }
          if (a2 == 16L) {
            tmp___14 = (jit_value )0;
          } else {
            tmp___14 = a2;
          }
          if (tmp___14 > 7L) {
            tmp___13 = 1;
          } else {
            tmp___13 = 0;
          }
          _amd64_rex_bits___0 = (unsigned char )(tmp___11 | tmp___13);
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___15 = jit->ip;
            (jit->ip) ++;
            *tmp___15 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___16 = jit->ip;
        (jit->ip) ++;
        *tmp___16 = (unsigned char)15;
        tmp___17 = jit->ip;
        (jit->ip) ++;
        *tmp___17 = (unsigned char)90;
        while (1) {
          if (a2 == 16L) {
            while (1) {
              tmp___18 = jit->ip;
              (jit->ip) ++;
              *tmp___18 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
              break;
            }
            while (1) {
              imb___0.val = 0;
              tmp___19 = jit->ip;
              (jit->ip) ++;
              *tmp___19 = imb___0.b[0];
              tmp___20 = jit->ip;
              (jit->ip) ++;
              *tmp___20 = imb___0.b[1];
              tmp___21 = jit->ip;
              (jit->ip) ++;
              *tmp___21 = imb___0.b[2];
              tmp___22 = jit->ip;
              (jit->ip) ++;
              *tmp___22 = imb___0.b[3];
              break;
            }
          } else {
            while (1) {
              if ((a2 & 7L) == 4L) {
                while (1) {
                  tmp___23 = jit->ip;
                  (jit->ip) ++;
                  *tmp___23 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                  break;
                }
                while (1) {
                  tmp___24 = jit->ip;
                  (jit->ip) ++;
                  *tmp___24 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                break;
              }
              if ((a2 & 7L) != 5L) {
                while (1) {
                  tmp___33 = jit->ip;
                  (jit->ip) ++;
                  *tmp___33 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                  break;
                }
                break;
              }
              while (1) {
                tmp___34 = jit->ip;
                (jit->ip) ++;
                *tmp___34 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
              break;
            }
          }
          break;
        }
        break;
      }
    }
  } else
  if ((int )op->code & 2) {
    while (1) {
      tmp___40 = jit->ip;
      (jit->ip) ++;
      *tmp___40 = (unsigned char)242;
      while (1) {
        if (a1 > 7L) {
          tmp___41 = 4;
        } else {
          tmp___41 = 0;
        }
        _amd64_rex_bits___1 = (unsigned char )tmp___41;
        if ((int )_amd64_rex_bits___1 != 0) {
          tmp___42 = jit->ip;
          (jit->ip) ++;
          *tmp___42 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
        }
        break;
      }
      tmp___43 = jit->ip;
      (jit->ip) ++;
      *tmp___43 = (unsigned char)15;
      tmp___44 = jit->ip;
      (jit->ip) ++;
      *tmp___44 = (unsigned char)16;
      while (1) {
        tmp___45 = jit->ip;
        (jit->ip) ++;
        *tmp___45 = (unsigned char )(((a1 & 7L) << 3) | 4L);
        break;
      }
      while (1) {
        tmp___46 = jit->ip;
        (jit->ip) ++;
        *tmp___46 = (unsigned char )((4 << 3) | 5);
        break;
      }
      while (1) {
        imb___3.val = (int )a2;
        tmp___47 = jit->ip;
        (jit->ip) ++;
        *tmp___47 = imb___3.b[0];
        tmp___48 = jit->ip;
        (jit->ip) ++;
        *tmp___48 = imb___3.b[1];
        tmp___49 = jit->ip;
        (jit->ip) ++;
        *tmp___49 = imb___3.b[2];
        tmp___50 = jit->ip;
        (jit->ip) ++;
        *tmp___50 = imb___3.b[3];
        break;
      }
      break;
    }
  } else {
    while (1) {
      tmp___51 = jit->ip;
      (jit->ip) ++;
      *tmp___51 = (unsigned char)102;
      while (1) {
        if (a1 > 7L) {
          tmp___52 = 4;
        } else {
          tmp___52 = 0;
        }
        if (a2 > 7L) {
          tmp___53 = 1;
        } else {
          tmp___53 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )(tmp___52 | tmp___53);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___54 = jit->ip;
          (jit->ip) ++;
          *tmp___54 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___55 = jit->ip;
      (jit->ip) ++;
      *tmp___55 = (unsigned char)15;
      tmp___56 = jit->ip;
      (jit->ip) ++;
      *tmp___56 = (unsigned char)18;
      while (1) {
        if (a2 == 16L) {
          while (1) {
            tmp___57 = jit->ip;
            (jit->ip) ++;
            *tmp___57 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 5L);
            break;
          }
          while (1) {
            imb___4.val = 0;
            tmp___58 = jit->ip;
            (jit->ip) ++;
            *tmp___58 = imb___4.b[0];
            tmp___59 = jit->ip;
            (jit->ip) ++;
            *tmp___59 = imb___4.b[1];
            tmp___60 = jit->ip;
            (jit->ip) ++;
            *tmp___60 = imb___4.b[2];
            tmp___61 = jit->ip;
            (jit->ip) ++;
            *tmp___61 = imb___4.b[3];
            break;
          }
        } else {
          while (1) {
            if ((a2 & 7L) == 4L) {
              while (1) {
                tmp___62 = jit->ip;
                (jit->ip) ++;
                *tmp___62 = (unsigned char )((((a1 & 7L) & 7L) << 3) | 4L);
                break;
              }
              while (1) {
                tmp___63 = jit->ip;
                (jit->ip) ++;
                *tmp___63 = (unsigned char )((4 << 3) | 4);
                break;
              }
              break;
            }
            if ((a2 & 7L) != 5L) {
              while (1) {
                tmp___72 = jit->ip;
                (jit->ip) ++;
                *tmp___72 = (unsigned char )((((a1 & 7L) & 7L) << 3) | ((a2 & 7L) & 7L));
                break;
              }
              break;
            }
            while (1) {
              tmp___73 = jit->ip;
              (jit->ip) ++;
              *tmp___73 = (unsigned char )(((long )(1 << 6) | (((a1 & 7L) & 7L) << 3)) | ((a2 & 7L) & 7L));
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char)0;
              (jit->ip) ++;
              break;
            }
            break;
          }
        }
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_sse_fld_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF make_addmuli LOC=UNKNOWN */
__inline static int make_addmuli(jit_op *op , jit_op *nextop ) 
{ 
  int tmp ;

  {
  nextop->code = (unsigned short)370;
  nextop->spec = (unsigned char )(((2 << 4) | (1 << 2)) | 3);
  nextop->arg[1] = op->arg[1];
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 96U) {
    tmp = shift_index((int )op->arg[2]);
    nextop->arg_size = (unsigned char )tmp;
  } else {
    nextop->arg_size = (unsigned char )op->arg[2];
  }
  make_nop(op);
  return (1);
}
}
/* END FUNCTION-DEF make_addmuli LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF stack_fparg_pos LOC=UNKNOWN */
__inline static int stack_fparg_pos(struct jit *jit , struct jit_func_info *info ,
                                    int arg ) 
{ 


  {
  return ((int )(- ((unsigned long )info->allocai_mem + (unsigned long )(((info->gp_reg_count + info->fp_reg_count) + arg) + 1) * sizeof(void *))));
}
}
/* END FUNCTION-DEF stack_fparg_pos LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_get_label LOC=UNKNOWN */
jit_label *jit_get_label(struct jit *jit ) 
{ 
  jit_label *r ;
  void *tmp ;

  {
  tmp = malloc(sizeof(jit_label ));
  r = (jit_label *)tmp;
  jit_add_op(jit, (unsigned short)496, (unsigned char)2, (long )r, 0L, 0L, (unsigned char)0,
             (struct jit_debug_info *)((void *)0));
  r->next = jit->labels;
  jit->labels = r;
  return (r);
}
}
/* END FUNCTION-DEF jit_get_label LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF funcall_prepare LOC=UNKNOWN */
__inline static void funcall_prepare(struct jit *jit , jit_op *op , int count ) 
{ 
  void *tmp ;

  {
  tmp = malloc(sizeof(struct jit_out_arg ) * (unsigned long )count);
  jit->prepared_args.args = (struct jit_out_arg *)tmp;
  jit->prepared_args.count = count;
  jit->prepared_args.ready = 0;
  jit->prepared_args.stack_size = 0;
  jit->prepared_args.op = op;
  jit->prepared_args.gp_args = 0;
  jit->prepared_args.fp_args = 0;
  return;
}
}
/* END FUNCTION-DEF funcall_prepare LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF valid_fsize LOC=UNKNOWN */
static int valid_fsize(int size ) 
{ 
  int tmp ;

  {
  if (size == 4) {
    tmp = 1;
  } else
  if (size == 8) {
    tmp = 1;
  } else {
    tmp = 0;
  }
  return (tmp);
}
}
/* END FUNCTION-DEF valid_fsize LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF generic_push_caller_saved_regs LOC=UNKNOWN */
static int generic_push_caller_saved_regs(struct jit *jit , jit_op *op , int reg_count ,
                                          jit_hw_reg *regs , int fp , jit_hw_reg *skip_reg ,
                                          int stack_offset ) 
{ 
  jit_value reg ;
  int skip_reg_id ;
  int tmp ;
  int i ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp___0 ;
  int tmp___1 ;

  {
  if (skip_reg) {
    tmp = skip_reg->id;
  } else {
    tmp = -1;
  }
  skip_reg_id = tmp;
  i = 0;
  while (i < reg_count) {
    if ((regs + i)->id == skip_reg_id) {
      goto __Cont;
    } else
    if ((regs + i)->callee_saved) {
      goto __Cont;
    }
    tmp___0 = rmap_is_associated(op->regmap, (regs + i)->id, fp, & reg);
    hreg = tmp___0;
    if (hreg) {
      tmp___1 = jit_set_get(op->live_in, (int )reg);
      if (tmp___1) {
        stack_offset = emit_push_reg(jit, hreg, stack_offset);
      }
    }
    __Cont: /* CIL Label */ 
    i ++;
  }
  return (stack_offset);
}
}
/* END FUNCTION-DEF generic_push_caller_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_set_get LOC=UNKNOWN */
__inline static int jit_set_get(jit_set *s , int value ) 
{ 
  jit_tree *tmp ;

  {
  tmp = jit_tree_search(s->root, (jit_tree_key )value);
  return ((unsigned long )tmp != (unsigned long )((void *)0));
}
}
/* END FUNCTION-DEF jit_set_get LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_fppush_arg LOC=UNKNOWN */
__inline static void emit_fppush_arg(struct jit *jit , struct jit_out_arg *arg ) 
{ 
  int sreg ;
  int pos ;
  int tmp ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  x86_imm_buf imb ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  int tmp___62 ;
  double b ;
  unsigned long tmp___63 ;
  unsigned long tmp___64 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___65 ;
  unsigned char *tmp___66 ;
  amd64_imm_buf imb___6 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  x86_imm_buf imb___7 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  unsigned char *tmp___78 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  unsigned char _amd64_rex_bits___6 ;
  unsigned char *tmp___82 ;
  unsigned char *tmp___83 ;
  unsigned char *tmp___84 ;
  unsigned char *tmp___85 ;
  x86_imm_buf imb___8 ;
  int tmp___86 ;
  unsigned char *tmp___87 ;
  unsigned char *tmp___88 ;
  unsigned char *tmp___89 ;
  unsigned char *tmp___90 ;
  unsigned char *tmp___91 ;
  unsigned char *tmp___92 ;
  unsigned char *tmp___93 ;
  unsigned char *tmp___94 ;
  int tmp___95 ;
  unsigned char *tmp___96 ;
  unsigned char *tmp___97 ;
  x86_imm_buf imb___9 ;
  int tmp___98 ;
  unsigned char *tmp___99 ;
  unsigned char *tmp___100 ;
  unsigned char *tmp___101 ;
  unsigned char *tmp___102 ;
  int tmp___103 ;
  int tmp___104 ;
  int tmp___105 ;
  unsigned char *tmp___106 ;
  int tmp___107 ;
  unsigned char *tmp___108 ;
  int tmp___109 ;
  unsigned char *tmp___110 ;
  x86_imm_buf imb___10 ;
  int tmp___111 ;
  unsigned char *tmp___112 ;
  unsigned char *tmp___113 ;
  unsigned char *tmp___114 ;
  unsigned char *tmp___115 ;
  int tmp___116 ;
  int tmp___117 ;
  unsigned char *tmp___118 ;
  unsigned char _amd64_rex_bits___7 ;
  int tmp___119 ;
  unsigned char *tmp___120 ;
  unsigned char *tmp___121 ;
  unsigned char *tmp___122 ;
  unsigned char *tmp___123 ;
  int tmp___124 ;
  unsigned char _amd64_rex_bits___8 ;
  unsigned char *tmp___125 ;
  unsigned char *tmp___126 ;
  unsigned char *tmp___127 ;
  unsigned char _amd64_rex_bits___9 ;
  unsigned char *tmp___128 ;
  unsigned char *tmp___129 ;
  x86_imm_buf imb___11 ;
  unsigned char *tmp___130 ;
  unsigned char *tmp___131 ;
  unsigned char *tmp___132 ;
  unsigned char *tmp___133 ;
  unsigned char _amd64_rex_bits___10 ;
  unsigned char *tmp___134 ;
  unsigned char *tmp___135 ;
  unsigned char *tmp___136 ;
  x86_imm_buf imb___12 ;
  unsigned char *tmp___137 ;
  unsigned char *tmp___138 ;
  unsigned char *tmp___139 ;
  unsigned char *tmp___140 ;
  unsigned char *tmp___141 ;
  unsigned char _amd64_rex_bits___11 ;
  unsigned char *tmp___142 ;
  unsigned char *tmp___143 ;
  unsigned char *tmp___144 ;
  unsigned char *tmp___145 ;
  x86_imm_buf imb___13 ;
  unsigned char *tmp___146 ;
  unsigned char *tmp___147 ;
  unsigned char *tmp___148 ;
  unsigned char *tmp___149 ;
  unsigned char *tmp___150 ;
  unsigned char *tmp___151 ;
  unsigned char *tmp___152 ;
  unsigned char *tmp___153 ;
  unsigned char *tmp___154 ;
  unsigned char *tmp___155 ;
  x86_imm_buf imb___14 ;
  unsigned char *tmp___156 ;
  unsigned char *tmp___157 ;
  unsigned char *tmp___158 ;
  unsigned char *tmp___159 ;
  unsigned char *tmp___160 ;
  unsigned char *tmp___161 ;
  unsigned char *tmp___162 ;
  x86_imm_buf imb___15 ;
  unsigned char *tmp___163 ;
  unsigned char *tmp___164 ;
  unsigned char *tmp___165 ;
  unsigned char *tmp___166 ;
  float b___0 ;
  unsigned long tmp___167 ;
  unsigned long tmp___168 ;
  unsigned char _amd64_rex_bits___12 ;
  unsigned char *tmp___169 ;
  unsigned char *tmp___170 ;
  amd64_imm_buf imb___16 ;
  unsigned char *tmp___171 ;
  unsigned char *tmp___172 ;
  unsigned char *tmp___173 ;
  unsigned char *tmp___174 ;
  unsigned char *tmp___175 ;
  unsigned char *tmp___176 ;
  unsigned char *tmp___177 ;
  unsigned char *tmp___178 ;
  x86_imm_buf imb___17 ;
  unsigned char *tmp___179 ;
  unsigned char *tmp___180 ;
  unsigned char *tmp___181 ;
  unsigned char *tmp___182 ;
  unsigned char _amd64_rex_bits___13 ;
  unsigned char *tmp___183 ;
  unsigned char *tmp___184 ;

  {
  if ((unsigned long )arg->size == sizeof(double )) {
    if (arg->isreg) {
      tmp___62 = is_spilled(arg->value.generic, jit->prepared_args.op, & sreg);
      if (tmp___62) {
        tmp = stack_reg_pos(jit, (int )arg->value.generic);
        pos = tmp;
        while (1) {
          while (1) {
            _amd64_rex_bits = (unsigned char)0;
            if ((int )_amd64_rex_bits != 0) {
              tmp___0 = jit->ip;
              (jit->ip) ++;
              *tmp___0 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___1 = jit->ip;
          (jit->ip) ++;
          *tmp___1 = (unsigned char)255;
          while (1) {
            if (0) {
              if (pos == 0) {
                while (1) {
                  tmp___2 = jit->ip;
                  (jit->ip) ++;
                  *tmp___2 = (unsigned char )((6 << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___3 = jit->ip;
                  (jit->ip) ++;
                  *tmp___3 = (unsigned char )((4 << 3) | 4);
                  break;
                }
              } else
              if (pos >= -128) {
                if (pos <= 127) {
                  while (1) {
                    tmp___4 = jit->ip;
                    (jit->ip) ++;
                    *tmp___4 = (unsigned char )(((1 << 6) | (6 << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___5 = jit->ip;
                    (jit->ip) ++;
                    *tmp___5 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    *(jit->ip) = (unsigned char )(pos & 255);
                    (jit->ip) ++;
                    break;
                  }
                } else {
                  goto _L;
                }
              } else {
                _L: /* CIL Label */ 
                while (1) {
                  tmp___6 = jit->ip;
                  (jit->ip) ++;
                  *tmp___6 = (unsigned char )(((2 << 6) | (6 << 3)) | 4);
                  break;
                }
                while (1) {
                  tmp___7 = jit->ip;
                  (jit->ip) ++;
                  *tmp___7 = (unsigned char )((4 << 3) | 4);
                  break;
                }
                while (1) {
                  imb.val = pos;
                  tmp___8 = jit->ip;
                  (jit->ip) ++;
                  *tmp___8 = imb.b[0];
                  tmp___9 = jit->ip;
                  (jit->ip) ++;
                  *tmp___9 = imb.b[1];
                  tmp___10 = jit->ip;
                  (jit->ip) ++;
                  *tmp___10 = imb.b[2];
                  tmp___11 = jit->ip;
                  (jit->ip) ++;
                  *tmp___11 = imb.b[3];
                  break;
                }
              }
              break;
            }
            if (pos == 0) {

            }
            if (pos >= -128) {
              if (pos <= 127) {
                while (1) {
                  tmp___13 = jit->ip;
                  (jit->ip) ++;
                  *tmp___13 = (unsigned char )(((1 << 6) | (6 << 3)) | 5);
                  break;
                }
                while (1) {
                  *(jit->ip) = (unsigned char )(pos & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___0;
              }
            } else {
              _L___0: /* CIL Label */ 
              while (1) {
                tmp___14 = jit->ip;
                (jit->ip) ++;
                *tmp___14 = (unsigned char )(((2 << 6) | (6 << 3)) | 5);
                break;
              }
              while (1) {
                imb___0.val = pos;
                tmp___15 = jit->ip;
                (jit->ip) ++;
                *tmp___15 = imb___0.b[0];
                tmp___16 = jit->ip;
                (jit->ip) ++;
                *tmp___16 = imb___0.b[1];
                tmp___17 = jit->ip;
                (jit->ip) ++;
                *tmp___17 = imb___0.b[2];
                tmp___18 = jit->ip;
                (jit->ip) ++;
                *tmp___18 = imb___0.b[3];
                break;
              }
            }
            break;
          }
          break;
        }
      } else {
        while (1) {
          while (1) {
            _amd64_rex_bits___0 = (unsigned char)8;
            if ((int )_amd64_rex_bits___0 != 0) {
              tmp___19 = jit->ip;
              (jit->ip) ++;
              *tmp___19 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
            }
            break;
          }
          tmp___20 = jit->ip;
          (jit->ip) ++;
          *tmp___20 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___21 = jit->ip;
              (jit->ip) ++;
              *tmp___21 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)8;
            (jit->ip) ++;
            break;
          }
          break;
        }
        while (1) {
          tmp___35 = jit->ip;
          (jit->ip) ++;
          *tmp___35 = (unsigned char)102;
          while (1) {
            if (sreg > 7) {
              tmp___36 = 4;
            } else {
              tmp___36 = 0;
            }
            _amd64_rex_bits___3 = (unsigned char )tmp___36;
            if ((int )_amd64_rex_bits___3 != 0) {
              tmp___37 = jit->ip;
              (jit->ip) ++;
              *tmp___37 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
            }
            break;
          }
          tmp___38 = jit->ip;
          (jit->ip) ++;
          *tmp___38 = (unsigned char)15;
          tmp___39 = jit->ip;
          (jit->ip) ++;
          *tmp___39 = (unsigned char)19;
          while (1) {
            while (1) {
              while (1) {
                tmp___45 = jit->ip;
                (jit->ip) ++;
                *tmp___45 = (unsigned char )((((sreg & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___46 = jit->ip;
                (jit->ip) ++;
                *tmp___46 = (unsigned char )((4 << 3) | 4);
                break;
              }
              break;
              while (1) {
                tmp___55 = jit->ip;
                (jit->ip) ++;
                *tmp___55 = (unsigned char )((((sreg & 7) & 7) << 3) | 4);
                break;
              }
              break;
              while (1) {
                tmp___56 = jit->ip;
                (jit->ip) ++;
                *tmp___56 = (unsigned char )(((1 << 6) | (((sreg & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
              break;
            }
            break;
          }
          break;
        }
      }
    } else {
      b = arg->value.fp;
      tmp___64 = __builtin_object_size((void *)(& tmp___63), 0);
      __builtin___memcpy_chk((void *)(& tmp___63), (void const   *)(& b), sizeof(double ),
                             tmp___64);
      while (1) {
        while (1) {
          _amd64_rex_bits___4 = (unsigned char)8;
          if ((int )_amd64_rex_bits___4 != 0) {
            tmp___65 = jit->ip;
            (jit->ip) ++;
            *tmp___65 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
          }
          break;
        }
        tmp___66 = jit->ip;
        (jit->ip) ++;
        *tmp___66 = (unsigned char)184;
        while (1) {
          imb___6.val = tmp___63;
          tmp___67 = jit->ip;
          (jit->ip) ++;
          *tmp___67 = imb___6.b[0];
          tmp___68 = jit->ip;
          (jit->ip) ++;
          *tmp___68 = imb___6.b[1];
          tmp___69 = jit->ip;
          (jit->ip) ++;
          *tmp___69 = imb___6.b[2];
          tmp___70 = jit->ip;
          (jit->ip) ++;
          *tmp___70 = imb___6.b[3];
          tmp___71 = jit->ip;
          (jit->ip) ++;
          *tmp___71 = imb___6.b[4];
          tmp___72 = jit->ip;
          (jit->ip) ++;
          *tmp___72 = imb___6.b[5];
          tmp___73 = jit->ip;
          (jit->ip) ++;
          *tmp___73 = imb___6.b[6];
          tmp___74 = jit->ip;
          (jit->ip) ++;
          *tmp___74 = imb___6.b[7];
          break;
        }
        break;
      }
      while (1) {
        while (1) {
          _amd64_rex_bits___5 = (unsigned char)0;
          if ((int )_amd64_rex_bits___5 != 0) {
            tmp___79 = jit->ip;
            (jit->ip) ++;
            *tmp___79 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
          }
          break;
        }
        tmp___80 = jit->ip;
        (jit->ip) ++;
        *tmp___80 = (unsigned char)80;
        break;
      }
    }
  } else
  if (arg->isreg) {
    tmp___124 = is_spilled(arg->value.generic, jit->prepared_args.op, & sreg);
    if (tmp___124) {
      while (1) {
        tmp___81 = jit->ip;
        (jit->ip) ++;
        *tmp___81 = (unsigned char)242;
        while (1) {
          _amd64_rex_bits___6 = (unsigned char)0;
          if ((int )_amd64_rex_bits___6 != 0) {
            tmp___82 = jit->ip;
            (jit->ip) ++;
            *tmp___82 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
          }
          break;
        }
        tmp___83 = jit->ip;
        (jit->ip) ++;
        *tmp___83 = (unsigned char)15;
        tmp___84 = jit->ip;
        (jit->ip) ++;
        *tmp___84 = (unsigned char)90;
        while (1) {
          while (1) {
            if (0) {
              tmp___105 = stack_reg_pos(jit, (int )arg->value.generic);
              if (tmp___105 == 0) {
                while (1) {
                  tmp___91 = jit->ip;
                  (jit->ip) ++;
                  *tmp___91 = (unsigned char)4;
                  break;
                }
                while (1) {
                  tmp___92 = jit->ip;
                  (jit->ip) ++;
                  *tmp___92 = (unsigned char )((4 << 3) | 4);
                  break;
                }
              } else {
                tmp___103 = stack_reg_pos(jit, (int )arg->value.generic);
                if (tmp___103 >= -128) {
                  tmp___104 = stack_reg_pos(jit, (int )arg->value.generic);
                  if (tmp___104 <= 127) {
                    while (1) {
                      tmp___93 = jit->ip;
                      (jit->ip) ++;
                      *tmp___93 = (unsigned char )((1 << 6) | 4);
                      break;
                    }
                    while (1) {
                      tmp___94 = jit->ip;
                      (jit->ip) ++;
                      *tmp___94 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      tmp___95 = stack_reg_pos(jit, (int )arg->value.generic);
                      *(jit->ip) = (unsigned char )(tmp___95 & 255);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L___1;
                  }
                } else {
                  _L___1: /* CIL Label */ 
                  while (1) {
                    tmp___96 = jit->ip;
                    (jit->ip) ++;
                    *tmp___96 = (unsigned char )((2 << 6) | 4);
                    break;
                  }
                  while (1) {
                    tmp___97 = jit->ip;
                    (jit->ip) ++;
                    *tmp___97 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    tmp___98 = stack_reg_pos(jit, (int )arg->value.generic);
                    imb___9.val = tmp___98;
                    tmp___99 = jit->ip;
                    (jit->ip) ++;
                    *tmp___99 = imb___9.b[0];
                    tmp___100 = jit->ip;
                    (jit->ip) ++;
                    *tmp___100 = imb___9.b[1];
                    tmp___101 = jit->ip;
                    (jit->ip) ++;
                    *tmp___101 = imb___9.b[2];
                    tmp___102 = jit->ip;
                    (jit->ip) ++;
                    *tmp___102 = imb___9.b[3];
                    break;
                  }
                }
              }
              break;
            }
            tmp___107 = stack_reg_pos(jit, (int )arg->value.generic);
            if (tmp___107 == 0) {

            }
            tmp___116 = stack_reg_pos(jit, (int )arg->value.generic);
            if (tmp___116 >= -128) {
              tmp___117 = stack_reg_pos(jit, (int )arg->value.generic);
              if (tmp___117 <= 127) {
                while (1) {
                  tmp___108 = jit->ip;
                  (jit->ip) ++;
                  *tmp___108 = (unsigned char )((1 << 6) | 5);
                  break;
                }
                while (1) {
                  tmp___109 = stack_reg_pos(jit, (int )arg->value.generic);
                  *(jit->ip) = (unsigned char )(tmp___109 & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___2;
              }
            } else {
              _L___2: /* CIL Label */ 
              while (1) {
                tmp___110 = jit->ip;
                (jit->ip) ++;
                *tmp___110 = (unsigned char )((2 << 6) | 5);
                break;
              }
              while (1) {
                tmp___111 = stack_reg_pos(jit, (int )arg->value.generic);
                imb___10.val = tmp___111;
                tmp___112 = jit->ip;
                (jit->ip) ++;
                *tmp___112 = imb___10.b[0];
                tmp___113 = jit->ip;
                (jit->ip) ++;
                *tmp___113 = imb___10.b[1];
                tmp___114 = jit->ip;
                (jit->ip) ++;
                *tmp___114 = imb___10.b[2];
                tmp___115 = jit->ip;
                (jit->ip) ++;
                *tmp___115 = imb___10.b[3];
                break;
              }
            }
            break;
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        tmp___118 = jit->ip;
        (jit->ip) ++;
        *tmp___118 = (unsigned char)242;
        while (1) {
          if (sreg > 7) {
            tmp___119 = 1;
          } else {
            tmp___119 = 0;
          }
          _amd64_rex_bits___7 = (unsigned char )tmp___119;
          if ((int )_amd64_rex_bits___7 != 0) {
            tmp___120 = jit->ip;
            (jit->ip) ++;
            *tmp___120 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
          }
          break;
        }
        tmp___121 = jit->ip;
        (jit->ip) ++;
        *tmp___121 = (unsigned char)15;
        tmp___122 = jit->ip;
        (jit->ip) ++;
        *tmp___122 = (unsigned char)90;
        while (1) {
          while (1) {
            tmp___123 = jit->ip;
            (jit->ip) ++;
            *tmp___123 = (unsigned char )((3 << 6) | (sreg & 7));
            break;
          }
          break;
        }
        break;
      }
    }
    while (1) {
      while (1) {
        _amd64_rex_bits___8 = (unsigned char)8;
        if ((int )_amd64_rex_bits___8 != 0) {
          tmp___125 = jit->ip;
          (jit->ip) ++;
          *tmp___125 = (unsigned char )(64 | (int )_amd64_rex_bits___8);
        }
        break;
      }
      tmp___126 = jit->ip;
      (jit->ip) ++;
      *tmp___126 = (unsigned char)131;
      while (1) {
        while (1) {
          tmp___127 = jit->ip;
          (jit->ip) ++;
          *tmp___127 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
          break;
        }
        break;
      }
      while (1) {
        *(jit->ip) = (unsigned char)8;
        (jit->ip) ++;
        break;
      }
      break;
    }
    while (1) {
      tmp___141 = jit->ip;
      (jit->ip) ++;
      *tmp___141 = (unsigned char)102;
      while (1) {
        _amd64_rex_bits___11 = (unsigned char)0;
        if ((int )_amd64_rex_bits___11 != 0) {
          tmp___142 = jit->ip;
          (jit->ip) ++;
          *tmp___142 = (unsigned char )(64 | (int )_amd64_rex_bits___11);
        }
        break;
      }
      tmp___143 = jit->ip;
      (jit->ip) ++;
      *tmp___143 = (unsigned char)15;
      tmp___144 = jit->ip;
      (jit->ip) ++;
      *tmp___144 = (unsigned char)19;
      while (1) {
        while (1) {
          while (1) {
            tmp___150 = jit->ip;
            (jit->ip) ++;
            *tmp___150 = (unsigned char)4;
            break;
          }
          while (1) {
            tmp___151 = jit->ip;
            (jit->ip) ++;
            *tmp___151 = (unsigned char )((4 << 3) | 4);
            break;
          }
          break;
          while (1) {
            tmp___160 = jit->ip;
            (jit->ip) ++;
            *tmp___160 = (unsigned char)4;
            break;
          }
          break;
          while (1) {
            tmp___161 = jit->ip;
            (jit->ip) ++;
            *tmp___161 = (unsigned char )((1 << 6) | 4);
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)0;
            (jit->ip) ++;
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  } else {
    b___0 = (float )arg->value.fp;
    tmp___167 = 0UL;
    tmp___168 = __builtin_object_size((void *)(& tmp___167), 0);
    __builtin___memcpy_chk((void *)(& tmp___167), (void const   *)(& b___0), sizeof(float ),
                           tmp___168);
    while (1) {
      while (1) {
        _amd64_rex_bits___12 = (unsigned char)8;
        if ((int )_amd64_rex_bits___12 != 0) {
          tmp___169 = jit->ip;
          (jit->ip) ++;
          *tmp___169 = (unsigned char )(64 | (int )_amd64_rex_bits___12);
        }
        break;
      }
      tmp___170 = jit->ip;
      (jit->ip) ++;
      *tmp___170 = (unsigned char)184;
      while (1) {
        imb___16.val = tmp___167;
        tmp___171 = jit->ip;
        (jit->ip) ++;
        *tmp___171 = imb___16.b[0];
        tmp___172 = jit->ip;
        (jit->ip) ++;
        *tmp___172 = imb___16.b[1];
        tmp___173 = jit->ip;
        (jit->ip) ++;
        *tmp___173 = imb___16.b[2];
        tmp___174 = jit->ip;
        (jit->ip) ++;
        *tmp___174 = imb___16.b[3];
        tmp___175 = jit->ip;
        (jit->ip) ++;
        *tmp___175 = imb___16.b[4];
        tmp___176 = jit->ip;
        (jit->ip) ++;
        *tmp___176 = imb___16.b[5];
        tmp___177 = jit->ip;
        (jit->ip) ++;
        *tmp___177 = imb___16.b[6];
        tmp___178 = jit->ip;
        (jit->ip) ++;
        *tmp___178 = imb___16.b[7];
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        _amd64_rex_bits___13 = (unsigned char)0;
        if ((int )_amd64_rex_bits___13 != 0) {
          tmp___183 = jit->ip;
          (jit->ip) ++;
          *tmp___183 = (unsigned char )(64 | (int )_amd64_rex_bits___13);
        }
        break;
      }
      tmp___184 = jit->ip;
      (jit->ip) ++;
      *tmp___184 = (unsigned char)80;
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_fppush_arg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_alu_op LOC=UNKNOWN */
static void emit_alu_op(struct jit *jit , struct jit_op *op , int x86_op , int imm ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  long tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  x86_imm_buf imb ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char _amd64_rex_bits___3 ;
  int tmp___26 ;
  int tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___31 ;
  int tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char _amd64_rex_bits___5 ;
  int tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  long tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char _amd64_rex_bits___6 ;
  int tmp___45 ;
  int tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;

  {
  if (imm) {
    if (op->r_arg[0] != op->r_arg[1]) {
      while (1) {
        if (sizeof(void *) == 2UL) {
          tmp = jit->ip;
          (jit->ip) ++;
          *tmp = (unsigned char)102;
        }
        while (1) {
          if (sizeof(void *) > 4UL) {
            tmp___0 = 8;
          } else {
            tmp___0 = 0;
          }
          if (op->r_arg[0] > 7L) {
            tmp___1 = 4;
          } else {
            tmp___1 = 0;
          }
          if (op->r_arg[1] > 7L) {
            tmp___2 = 1;
          } else {
            tmp___2 = 0;
          }
          _amd64_rex_bits = (unsigned char )((tmp___0 | tmp___1) | tmp___2);
          if ((int )_amd64_rex_bits != 0) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
          } else
          if (sizeof(void *) == 1UL) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        switch (sizeof(void *)) {
        case 1UL: 
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char)138;
        break;
        case 8UL: 
        case 4UL: 
        case 2UL: 
        tmp___5 = jit->ip;
        (jit->ip) ++;
        *tmp___5 = (unsigned char)139;
        break;
        default: 
        tmp___6 = __builtin_expect(1L, 0L);
        if (tmp___6) {
          __assert_rtn("emit_alu_op", "./jitter-amd64.c", 2706, "0");
        }
        }
        while (1) {
          while (1) {
            tmp___7 = jit->ip;
            (jit->ip) ++;
            *tmp___7 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
            break;
          }
          break;
        }
        break;
      }
    }
    while (1) {
      if ((int )op->r_arg[2] >= -128) {
        if ((int )op->r_arg[2] <= 127) {
          while (1) {
            if (op->r_arg[0] > 7L) {
              tmp___8 = 1;
            } else {
              tmp___8 = 0;
            }
            _amd64_rex_bits___0 = (unsigned char )(8 | tmp___8);
            if ((int )_amd64_rex_bits___0 != 0) {
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
            }
            break;
          }
          tmp___10 = jit->ip;
          (jit->ip) ++;
          *tmp___10 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = (unsigned char )((long )((3 << 6) | ((x86_op & 7) << 3)) | (op->r_arg[0] & 7L));
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(op->r_arg[2] & 255L);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else
      _L: /* CIL Label */ 
      if (op->r_arg[0] == 0L) {
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)8;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___13 = jit->ip;
        (jit->ip) ++;
        *tmp___13 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 5);
        while (1) {
          imb.val = (int )op->r_arg[2];
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = imb.b[0];
          tmp___15 = jit->ip;
          (jit->ip) ++;
          *tmp___15 = imb.b[1];
          tmp___16 = jit->ip;
          (jit->ip) ++;
          *tmp___16 = imb.b[2];
          tmp___17 = jit->ip;
          (jit->ip) ++;
          *tmp___17 = imb.b[3];
          break;
        }
      } else {
        while (1) {
          if (op->r_arg[0] > 7L) {
            tmp___18 = 1;
          } else {
            tmp___18 = 0;
          }
          _amd64_rex_bits___2 = (unsigned char )(8 | tmp___18);
          if ((int )_amd64_rex_bits___2 != 0) {
            tmp___19 = jit->ip;
            (jit->ip) ++;
            *tmp___19 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
          }
          break;
        }
        tmp___20 = jit->ip;
        (jit->ip) ++;
        *tmp___20 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___21 = jit->ip;
            (jit->ip) ++;
            *tmp___21 = (unsigned char )((long )((3 << 6) | ((x86_op & 7) << 3)) | (op->r_arg[0] & 7L));
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = (int )op->r_arg[2];
          tmp___22 = jit->ip;
          (jit->ip) ++;
          *tmp___22 = imb___0.b[0];
          tmp___23 = jit->ip;
          (jit->ip) ++;
          *tmp___23 = imb___0.b[1];
          tmp___24 = jit->ip;
          (jit->ip) ++;
          *tmp___24 = imb___0.b[2];
          tmp___25 = jit->ip;
          (jit->ip) ++;
          *tmp___25 = imb___0.b[3];
          break;
        }
      }
      break;
    }
  } else
  if (op->r_arg[0] == op->r_arg[1]) {
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___26 = 4;
        } else {
          tmp___26 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___27 = 1;
        } else {
          tmp___27 = 0;
        }
        _amd64_rex_bits___3 = (unsigned char )((8 | tmp___26) | tmp___27);
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___28 = jit->ip;
          (jit->ip) ++;
          *tmp___28 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      tmp___29 = jit->ip;
      (jit->ip) ++;
      *tmp___29 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 3);
      while (1) {
        while (1) {
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else
  if (op->r_arg[0] == op->r_arg[2]) {
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___31 = 4;
        } else {
          tmp___31 = 0;
        }
        if (op->r_arg[1] > 7L) {
          tmp___32 = 1;
        } else {
          tmp___32 = 0;
        }
        _amd64_rex_bits___4 = (unsigned char )((8 | tmp___31) | tmp___32);
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___33 = jit->ip;
          (jit->ip) ++;
          *tmp___33 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      tmp___34 = jit->ip;
      (jit->ip) ++;
      *tmp___34 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 3);
      while (1) {
        while (1) {
          tmp___35 = jit->ip;
          (jit->ip) ++;
          *tmp___35 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp___36 = jit->ip;
        (jit->ip) ++;
        *tmp___36 = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___37 = 8;
        } else {
          tmp___37 = 0;
        }
        if (op->r_arg[0] > 7L) {
          tmp___38 = 4;
        } else {
          tmp___38 = 0;
        }
        if (op->r_arg[1] > 7L) {
          tmp___39 = 1;
        } else {
          tmp___39 = 0;
        }
        _amd64_rex_bits___5 = (unsigned char )((tmp___37 | tmp___38) | tmp___39);
        if ((int )_amd64_rex_bits___5 != 0) {
          tmp___40 = jit->ip;
          (jit->ip) ++;
          *tmp___40 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___40 = jit->ip;
          (jit->ip) ++;
          *tmp___40 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___41 = jit->ip;
      (jit->ip) ++;
      *tmp___41 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___42 = jit->ip;
      (jit->ip) ++;
      *tmp___42 = (unsigned char)139;
      break;
      default: 
      tmp___43 = __builtin_expect(1L, 0L);
      if (tmp___43) {
        __assert_rtn("emit_alu_op", "./jitter-amd64.c", 2715, "0");
      }
      }
      while (1) {
        while (1) {
          tmp___44 = jit->ip;
          (jit->ip) ++;
          *tmp___44 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[1] & 7L));
          break;
        }
        break;
      }
      break;
    }
    while (1) {
      while (1) {
        if (op->r_arg[0] > 7L) {
          tmp___45 = 4;
        } else {
          tmp___45 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___46 = 1;
        } else {
          tmp___46 = 0;
        }
        _amd64_rex_bits___6 = (unsigned char )((8 | tmp___45) | tmp___46);
        if ((int )_amd64_rex_bits___6 != 0) {
          tmp___47 = jit->ip;
          (jit->ip) ++;
          *tmp___47 = (unsigned char )(64 | (int )_amd64_rex_bits___6);
        }
        break;
      }
      tmp___48 = jit->ip;
      (jit->ip) ++;
      *tmp___48 = (unsigned char )(((int )((unsigned char )x86_op) << 3) + 3);
      while (1) {
        while (1) {
          tmp___49 = jit->ip;
          (jit->ip) ++;
          *tmp___49 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[0] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_alu_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_pop_caller_saved_regs LOC=UNKNOWN */
static int emit_pop_caller_saved_regs(struct jit *jit , jit_op *op ) 
{ 
  struct jit_reg_allocator *al ;
  int stack_offset ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  x86_imm_buf imb ;
  unsigned char *tmp___4 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  int count ;

  {
  al = jit->reg_al;
  stack_offset = 0;
  stack_offset = generic_pop_caller_saved_regs(jit, op, al->fp_reg_cnt, al->fp_regs,
                                               1, al->fpret_reg, stack_offset);
  stack_offset = generic_pop_caller_saved_regs(jit, op, al->gp_reg_cnt, al->gp_regs,
                                               0, al->ret_reg, stack_offset);
  if (stack_offset) {
    while (1) {
      if (stack_offset >= -128) {
        if (stack_offset <= 127) {
          while (1) {
            _amd64_rex_bits = (unsigned char)8;
            if ((int )_amd64_rex_bits != 0) {
              tmp = jit->ip;
              (jit->ip) ++;
              *tmp = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___0 = jit->ip;
          (jit->ip) ++;
          *tmp___0 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___1 = jit->ip;
              (jit->ip) ++;
              *tmp___1 = (unsigned char )((3 << 6) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(stack_offset & 255);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)8;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___8 = jit->ip;
            (jit->ip) ++;
            *tmp___8 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___9 = jit->ip;
        (jit->ip) ++;
        *tmp___9 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___10 = jit->ip;
            (jit->ip) ++;
            *tmp___10 = (unsigned char )((3 << 6) | 4);
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = stack_offset;
          tmp___11 = jit->ip;
          (jit->ip) ++;
          *tmp___11 = imb___0.b[0];
          tmp___12 = jit->ip;
          (jit->ip) ++;
          *tmp___12 = imb___0.b[1];
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = imb___0.b[2];
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = imb___0.b[3];
          break;
        }
      }
      break;
    }
  }
  count = (int )((unsigned long )stack_offset / sizeof(void *));
  return (count);
}
}
/* END FUNCTION-DEF emit_pop_caller_saved_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF ob_free LOC=UNKNOWN */
static void ob_free(struct output_buf *ob ) 
{ 


  {
  free((void *)ob->buf);
  free((void *)ob);
  return;
}
}
/* END FUNCTION-DEF ob_free LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF check_code_references LOC=UNKNOWN */
static int check_code_references(jit_op *op , char *msg_buf ) 
{ 
  int tmp ;

  {
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 856U) {
    goto _L;
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 200U) {
    _L: /* CIL Label */ 
    tmp = jit_op_is_data_op(op->jmp_addr);
    if (tmp) {
      append_msg(msg_buf, (char *)"invalid code reference");
      return (32);
    }
  }
  return (0);
}
}
/* END FUNCTION-DEF check_code_references LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF is_transfer_op LOC=UNKNOWN */
static int is_transfer_op(jit_op *op ) 
{ 
  jit_opcode code ;
  int tmp ;

  {
  code = (jit_opcode )((int )op->code & 65528);
  if ((unsigned int )code == 272U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 152U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 600U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 224U) {
    tmp = 1;
  } else
  if ((unsigned int )code == 448U) {
    tmp = 1;
  } else {
    tmp = 0;
  }
  return (tmp);
}
}
/* END FUNCTION-DEF is_transfer_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_op LOC=UNKNOWN */
int print_op(FILE *f , struct jit_disasm *disasm , struct jit_op *op , jit_tree *labels ,
             int verbosity ) 
{ 
  struct output_buf *linebuf ;
  struct output_buf *tmp ;
  jit_tree *lab ;
  jit_tree *tmp___0 ;
  long tmp___1 ;
  char *op_name ;
  char *tmp___2 ;
  int tmp___3 ;
  int i ;
  long tmp___4 ;
  int len ;
  size_t tmp___5 ;

  {
  tmp = ob_new();
  linebuf = tmp;
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 496U) {
    goto _L;
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 344U) {
    _L: /* CIL Label */ 
    tmp___0 = jit_tree_search(labels, op->arg[0]);
    lab = tmp___0;
    if (lab) {
      if ((long )lab->value < 0L) {
        tmp___1 = - ((long )lab->value);
      } else {
        tmp___1 = (long )lab->value;
      }
      ob_printf(linebuf, (char const   *)disasm->label_template, tmp___1);
      ob_printf(linebuf, ":");
    }
    goto print;
  }
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 640U) {
    print_comment(linebuf, op);
    goto print;
  }
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 56U) {
    ob_append(linebuf, disasm->indent_template);
    ob_append(linebuf, (char *)".trace");
    goto print;
  }
  tmp___2 = jit_get_op_name(op);
  op_name = tmp___2;
  if ((int )*(op_name + 0) == 46) {
    if (verbosity & 256) {
      tmp___3 = print_load_op(disasm, linebuf, op);
      if (tmp___3) {
        goto print;
      }
    }
  }
  ob_append(linebuf, disasm->indent_template);
  if ((int )*(op_name + 0) == 46) {
    switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
    case 168U: 
    case 488U: 
    ob_printf(linebuf, "%s ", op_name);
    ob_pad(linebuf, 13);
    ob_printf(linebuf, (char const   *)disasm->generic_value_template, op->arg[0]);
    goto print;
    case 880U: 
    ob_printf(linebuf, "%s ", op_name);
    ob_pad(linebuf, 13);
    i = 0;
    while ((jit_value )i < op->arg[0]) {
      ob_printf(linebuf, (char const   *)disasm->generic_value_template, (int )*((unsigned char *)op->addendum + i));
      ob_printf(linebuf, " ");
      i ++;
    }
    goto print;
    case 104U: 
    case 200U: 
    ob_printf(linebuf, "%s ", op_name);
    ob_pad(linebuf, 13);
    print_addr(disasm, linebuf, labels, op, 0);
    goto print;
    default: 
    goto print;
    }
  }
  print_full_op_name(linebuf, op);
  ob_pad(linebuf, 12);
  if ((int )op->arg_size == 1) {
    ob_append(linebuf, (char *)" (byte)");
  }
  if ((int )op->arg_size == 2) {
    ob_append(linebuf, (char *)" (word)");
  }
  if ((int )op->arg_size == 4) {
    ob_append(linebuf, (char *)" (dword)");
  }
  if ((int )op->arg_size == 8) {
    ob_append(linebuf, (char *)" (qword)");
  }
  switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
  case 840U: 
  break;
  case 416U: 
  print_str(linebuf, (char *)op->arg[0]);
  if (! ((int )op->code & 2)) {
    ob_append(linebuf, (char *)", ");
    print_arg(disasm, linebuf, op, 2);
  }
  break;
  case 512U: 
  case 856U: 
  ob_append(linebuf, (char *)" ");
  print_arg(disasm, linebuf, op, 1);
  ob_append(linebuf, (char *)", ");
  print_addr(disasm, linebuf, labels, op, 1);
  break;
  case 808U: 
  switch (op->arg[0]) {
  case 0L: 
  ob_append(linebuf, (char *)" integer");
  break;
  case 1L: 
  ob_append(linebuf, (char *)" uns. integer");
  break;
  case 2L: 
  ob_append(linebuf, (char *)" float");
  break;
  case 3L: 
  ob_append(linebuf, (char *)" ptr");
  break;
  default: 
  tmp___4 = __builtin_expect(1L, 0L);
  if (tmp___4) {
    __assert_rtn("print_op", "./jitter-amd64.c", 4022, "0");
  }
  }
  ob_append(linebuf, (char *)", ");
  print_arg(disasm, linebuf, op, 2);
  break;
  default: 
  print_args(disasm, linebuf, op, labels);
  }
  print: 
  fprintf((FILE */* __restrict  */)f, (char const   */* __restrict  */)"%s", linebuf->buf);
  tmp___5 = strlen((char const   *)linebuf->buf);
  len = (int )tmp___5;
  ob_free(linebuf);
  return (len);
}
}
/* END FUNCTION-DEF print_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_save_all_regs LOC=UNKNOWN */
static void emit_save_all_regs(struct jit *jit , jit_op *op ) 
{ 
  struct jit_reg_allocator *al ;
  unsigned char _amd64_rex_bits ;
  unsigned char *tmp ;
  unsigned char *tmp___0 ;
  int i ;
  jit_hw_reg *reg ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  int tmp___4 ;
  int i___0 ;
  jit_hw_reg *reg___0 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  x86_imm_buf imb ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char _amd64_rex_bits___4 ;
  int tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  int tmp___48 ;
  int alignment ;
  int tmp___49 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char _amd64_rex_bits___6 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  unsigned char *tmp___58 ;
  unsigned char _amd64_rex_bits___7 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  unsigned char *tmp___65 ;

  {
  al = jit->reg_al;
  while (1) {
    while (1) {
      _amd64_rex_bits = (unsigned char)8;
      if ((int )_amd64_rex_bits != 0) {
        tmp = jit->ip;
        (jit->ip) ++;
        *tmp = (unsigned char )(64 | (int )_amd64_rex_bits);
      }
      break;
    }
    while (1) {
      tmp___0 = jit->ip;
      (jit->ip) ++;
      *tmp___0 = (unsigned char)156;
      break;
    }
    break;
  }
  i = 0;
  while (i < al->gp_reg_cnt) {
    reg = al->gp_regs + i;
    if (! reg->callee_saved) {
      tmp___4 = is_active_register(al, reg, op);
      if (tmp___4) {
        while (1) {
          while (1) {
            if (reg->id > 7) {
              tmp___1 = 1;
            } else {
              tmp___1 = 0;
            }
            _amd64_rex_bits___0 = (unsigned char )tmp___1;
            if ((int )_amd64_rex_bits___0 != 0) {
              tmp___2 = jit->ip;
              (jit->ip) ++;
              *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
            }
            break;
          }
          tmp___3 = jit->ip;
          (jit->ip) ++;
          *tmp___3 = (unsigned char )(80 + (reg->id & 7));
          break;
        }
      }
    }
    i ++;
  }
  i___0 = 0;
  while (i___0 < al->fp_reg_cnt) {
    reg___0 = al->fp_regs + i___0;
    if (! reg___0->callee_saved) {
      tmp___48 = is_active_register(al, reg___0, op);
      if (tmp___48) {
        while (1) {
          while (1) {
            _amd64_rex_bits___1 = (unsigned char)8;
            if ((int )_amd64_rex_bits___1 != 0) {
              tmp___5 = jit->ip;
              (jit->ip) ++;
              *tmp___5 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
            }
            break;
          }
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___7 = jit->ip;
              (jit->ip) ++;
              *tmp___7 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char)8;
            (jit->ip) ++;
            break;
          }
          break;
        }
        while (1) {
          tmp___21 = jit->ip;
          (jit->ip) ++;
          *tmp___21 = (unsigned char)102;
          while (1) {
            if (reg___0->id > 7) {
              tmp___22 = 4;
            } else {
              tmp___22 = 0;
            }
            _amd64_rex_bits___4 = (unsigned char )tmp___22;
            if ((int )_amd64_rex_bits___4 != 0) {
              tmp___23 = jit->ip;
              (jit->ip) ++;
              *tmp___23 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
            }
            break;
          }
          tmp___24 = jit->ip;
          (jit->ip) ++;
          *tmp___24 = (unsigned char)15;
          tmp___25 = jit->ip;
          (jit->ip) ++;
          *tmp___25 = (unsigned char)19;
          while (1) {
            while (1) {
              while (1) {
                tmp___31 = jit->ip;
                (jit->ip) ++;
                *tmp___31 = (unsigned char )((((reg___0->id & 7) & 7) << 3) | 4);
                break;
              }
              while (1) {
                tmp___32 = jit->ip;
                (jit->ip) ++;
                *tmp___32 = (unsigned char )((4 << 3) | 4);
                break;
              }
              break;
              while (1) {
                tmp___41 = jit->ip;
                (jit->ip) ++;
                *tmp___41 = (unsigned char )((((reg___0->id & 7) & 7) << 3) | 4);
                break;
              }
              break;
              while (1) {
                tmp___42 = jit->ip;
                (jit->ip) ++;
                *tmp___42 = (unsigned char )(((1 << 6) | (((reg___0->id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char)0;
                (jit->ip) ++;
                break;
              }
              break;
            }
            break;
          }
          break;
        }
      }
    }
    while (1) {
      break;
    }
    i___0 ++;
  }
  tmp___49 = required_stack_space_for_regs(jit, op);
  alignment = tmp___49 % 16;
  if (alignment != 0) {
    while (1) {
      if (16 - alignment >= -128) {
        if (16 - alignment <= 127) {
          while (1) {
            _amd64_rex_bits___5 = (unsigned char)8;
            if ((int )_amd64_rex_bits___5 != 0) {
              tmp___50 = jit->ip;
              (jit->ip) ++;
              *tmp___50 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
            }
            break;
          }
          tmp___51 = jit->ip;
          (jit->ip) ++;
          *tmp___51 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___52 = jit->ip;
              (jit->ip) ++;
              *tmp___52 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )((16 - alignment) & 255);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else {
        _L: /* CIL Label */ 
        while (1) {
          _amd64_rex_bits___7 = (unsigned char)8;
          if ((int )_amd64_rex_bits___7 != 0) {
            tmp___59 = jit->ip;
            (jit->ip) ++;
            *tmp___59 = (unsigned char )(64 | (int )_amd64_rex_bits___7);
          }
          break;
        }
        tmp___60 = jit->ip;
        (jit->ip) ++;
        *tmp___60 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___61 = jit->ip;
            (jit->ip) ++;
            *tmp___61 = (unsigned char )(((3 << 6) | (5 << 3)) | 4);
            break;
          }
          break;
        }
        while (1) {
          imb___5.val = 16 - alignment;
          tmp___62 = jit->ip;
          (jit->ip) ++;
          *tmp___62 = imb___5.b[0];
          tmp___63 = jit->ip;
          (jit->ip) ++;
          *tmp___63 = imb___5.b[1];
          tmp___64 = jit->ip;
          (jit->ip) ++;
          *tmp___64 = imb___5.b[2];
          tmp___65 = jit->ip;
          (jit->ip) ++;
          *tmp___65 = imb___5.b[3];
          break;
        }
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_save_all_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF rmap_clone LOC=UNKNOWN */
static jit_rmap *rmap_clone(jit_rmap *rmap ) 
{ 
  jit_rmap *res ;
  void *tmp ;

  {
  tmp = malloc(sizeof(jit_rmap ));
  res = (jit_rmap *)tmp;
  res->map = jit_tree_clone(rmap->map);
  return (res);
}
}
/* END FUNCTION-DEF rmap_clone LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_flw_analysis LOC=UNKNOWN */
__inline static void jit_flw_analysis(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  jit_op *first ;
  jit_op *second ;

  {
  jit_flw_initialize(jit);
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while (op) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 384U) {
      first = op;
      while (1) {
        if ((unsigned long )op->next == (unsigned long )((void *)0)) {
          second = op;
          analyze_function(jit, first, second);
          break;
        } else
        if ((unsigned int )((jit_opcode )((int )(op->next)->code & 65528)) == 384U) {
          second = op;
          analyze_function(jit, first, second);
          break;
        }
        op = op->next;
      }
    }
    op = op->next;
  }
  return;
}
}
/* END FUNCTION-DEF jit_flw_analysis LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_current_func_info LOC=UNKNOWN */
__inline static struct jit_func_info *jit_current_func_info(struct jit *jit ) 
{ 


  {
  return ((struct jit_func_info *)(jit->current_func)->arg[1]);
}
}
/* END FUNCTION-DEF jit_current_func_info LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF is_spilled LOC=UNKNOWN */
static int is_spilled(jit_value arg_id , jit_op *prepare_op , int *reg ) 
{ 
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp ;

  {
  tmp = rmap_get(prepare_op->regmap, arg_id);
  hreg = tmp;
  if (hreg) {
    *reg = hreg->id;
    return (0);
  } else {
    return (1);
  }
}
}
/* END FUNCTION-DEF is_spilled LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_regs LOC=UNKNOWN */
static void print_regs(jit_tree_key reg , jit_tree_value v , void *thunk ) 
{ 
  char buf[32] ;
  unsigned long tmp ;
  unsigned long tmp___0 ;

  {
  if (reg == (jit_tree_key )(2 << 1)) {
    return;
  }
  jit_get_reg_name(& jit_debugging_disasm, buf, (int )reg);
  tmp = __builtin_object_size(thunk, 1);
  __builtin___strcat_chk((char *)thunk, " ", tmp);
  tmp___0 = __builtin_object_size(thunk, 1);
  __builtin___strcat_chk((char *)thunk, (char const   *)(buf), tmp___0);
  return;
}
}
/* END FUNCTION-DEF print_regs LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF check_op_without_effect LOC=UNKNOWN */
static int check_op_without_effect(jit_op *op , char *msg_buf ) 
{ 
  jit_opcode code ;
  int i ;
  int tmp ;

  {
  code = (jit_opcode )((int )op->code & 65528);
  if ((unsigned int )code == 464U) {
    return (0);
  } else
  if ((unsigned int )code == 888U) {
    return (0);
  } else
  if ((unsigned int )code == 328U) {
    return (0);
  } else
  if ((unsigned int )code == 192U) {
    return (0);
  } else
  if ((unsigned int )code == 208U) {
    return (0);
  } else
  if ((unsigned int )code == 872U) {
    return (0);
  } else
  if ((unsigned int )code == 736U) {
    return (0);
  } else
  if ((unsigned int )code == 128U) {
    return (0);
  }
  i = 0;
  while (i < 3) {
    if ((((int )op->spec >> ((i + 1) - 1) * 2) & 3) == 3) {
      tmp = jit_set_get(op->live_out, (int )op->arg[i]);
      if (! tmp) {
        append_msg(msg_buf, (char *)"operation without effect");
        return (2);
      }
    }
    i ++;
  }
  return (0);
}
}
/* END FUNCTION-DEF check_op_without_effect LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_pop_reg LOC=UNKNOWN */
static int emit_pop_reg(struct jit *jit , jit_hw_reg *r , int stack_offset ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  long tmp___5 ;
  unsigned char *tmp___6 ;
  x86_imm_buf imb ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  unsigned char *tmp___50 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;

  {
  if (! r->fp) {
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp = jit->ip;
        (jit->ip) ++;
        *tmp = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___0 = 8;
        } else {
          tmp___0 = 0;
        }
        if (r->id > 7) {
          tmp___1 = 4;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)138;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)139;
      break;
      default: 
      tmp___5 = __builtin_expect(1L, 0L);
      if (tmp___5) {
        __assert_rtn("emit_pop_reg", "./jitter-amd64.c", 2421, "0");
      }
      }
      while (1) {
        while (1) {
          if (stack_offset == 0) {
            while (1) {
              tmp___11 = jit->ip;
              (jit->ip) ++;
              *tmp___11 = (unsigned char )((((r->id & 7) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___12 = jit->ip;
              (jit->ip) ++;
              *tmp___12 = (unsigned char )((4 << 3) | 4);
              break;
            }
          } else
          if (stack_offset >= -128) {
            if (stack_offset <= 127) {
              while (1) {
                tmp___13 = jit->ip;
                (jit->ip) ++;
                *tmp___13 = (unsigned char )(((1 << 6) | (((r->id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___14 = jit->ip;
                (jit->ip) ++;
                *tmp___14 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(stack_offset & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L;
            }
          } else {
            _L: /* CIL Label */ 
            while (1) {
              tmp___15 = jit->ip;
              (jit->ip) ++;
              *tmp___15 = (unsigned char )(((2 << 6) | (((r->id & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___16 = jit->ip;
              (jit->ip) ++;
              *tmp___16 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              imb___0.val = stack_offset;
              tmp___17 = jit->ip;
              (jit->ip) ++;
              *tmp___17 = imb___0.b[0];
              tmp___18 = jit->ip;
              (jit->ip) ++;
              *tmp___18 = imb___0.b[1];
              tmp___19 = jit->ip;
              (jit->ip) ++;
              *tmp___19 = imb___0.b[2];
              tmp___20 = jit->ip;
              (jit->ip) ++;
              *tmp___20 = imb___0.b[3];
              break;
            }
          }
          break;
          if (stack_offset == 0) {
            while (1) {
              tmp___21 = jit->ip;
              (jit->ip) ++;
              *tmp___21 = (unsigned char )((((r->id & 7) & 7) << 3) | 4);
              break;
            }
            break;
          }
          if (stack_offset >= -128) {
            if (stack_offset <= 127) {
              while (1) {
                tmp___22 = jit->ip;
                (jit->ip) ++;
                *tmp___22 = (unsigned char )(((1 << 6) | (((r->id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(stack_offset & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___0;
            }
          } else {
            _L___0: /* CIL Label */ 
            while (1) {
              tmp___23 = jit->ip;
              (jit->ip) ++;
              *tmp___23 = (unsigned char )(((2 << 6) | (((r->id & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              imb___1.val = stack_offset;
              tmp___24 = jit->ip;
              (jit->ip) ++;
              *tmp___24 = imb___1.b[0];
              tmp___25 = jit->ip;
              (jit->ip) ++;
              *tmp___25 = imb___1.b[1];
              tmp___26 = jit->ip;
              (jit->ip) ++;
              *tmp___26 = imb___1.b[2];
              tmp___27 = jit->ip;
              (jit->ip) ++;
              *tmp___27 = imb___1.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
    stack_offset = (int )((unsigned long )stack_offset + sizeof(void *));
  } else {
    while (1) {
      tmp___28 = jit->ip;
      (jit->ip) ++;
      *tmp___28 = (unsigned char)102;
      while (1) {
        if (r->id > 7) {
          tmp___29 = 4;
        } else {
          tmp___29 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )tmp___29;
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___30 = jit->ip;
          (jit->ip) ++;
          *tmp___30 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      tmp___31 = jit->ip;
      (jit->ip) ++;
      *tmp___31 = (unsigned char)15;
      tmp___32 = jit->ip;
      (jit->ip) ++;
      *tmp___32 = (unsigned char)18;
      while (1) {
        while (1) {
          if (stack_offset == 0) {
            while (1) {
              tmp___38 = jit->ip;
              (jit->ip) ++;
              *tmp___38 = (unsigned char )((((r->id & 7) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___39 = jit->ip;
              (jit->ip) ++;
              *tmp___39 = (unsigned char )((4 << 3) | 4);
              break;
            }
          } else
          if (stack_offset >= -128) {
            if (stack_offset <= 127) {
              while (1) {
                tmp___40 = jit->ip;
                (jit->ip) ++;
                *tmp___40 = (unsigned char )(((1 << 6) | (((r->id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___41 = jit->ip;
                (jit->ip) ++;
                *tmp___41 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(stack_offset & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___1;
            }
          } else {
            _L___1: /* CIL Label */ 
            while (1) {
              tmp___42 = jit->ip;
              (jit->ip) ++;
              *tmp___42 = (unsigned char )(((2 << 6) | (((r->id & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___43 = jit->ip;
              (jit->ip) ++;
              *tmp___43 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              imb___3.val = stack_offset;
              tmp___44 = jit->ip;
              (jit->ip) ++;
              *tmp___44 = imb___3.b[0];
              tmp___45 = jit->ip;
              (jit->ip) ++;
              *tmp___45 = imb___3.b[1];
              tmp___46 = jit->ip;
              (jit->ip) ++;
              *tmp___46 = imb___3.b[2];
              tmp___47 = jit->ip;
              (jit->ip) ++;
              *tmp___47 = imb___3.b[3];
              break;
            }
          }
          break;
          if (stack_offset == 0) {
            while (1) {
              tmp___48 = jit->ip;
              (jit->ip) ++;
              *tmp___48 = (unsigned char )((((r->id & 7) & 7) << 3) | 4);
              break;
            }
            break;
          }
          if (stack_offset >= -128) {
            if (stack_offset <= 127) {
              while (1) {
                tmp___49 = jit->ip;
                (jit->ip) ++;
                *tmp___49 = (unsigned char )(((1 << 6) | (((r->id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(stack_offset & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___2;
            }
          } else {
            _L___2: /* CIL Label */ 
            while (1) {
              tmp___50 = jit->ip;
              (jit->ip) ++;
              *tmp___50 = (unsigned char )(((2 << 6) | (((r->id & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              imb___4.val = stack_offset;
              tmp___51 = jit->ip;
              (jit->ip) ++;
              *tmp___51 = imb___4.b[0];
              tmp___52 = jit->ip;
              (jit->ip) ++;
              *tmp___52 = imb___4.b[1];
              tmp___53 = jit->ip;
              (jit->ip) ++;
              *tmp___53 = imb___4.b[2];
              tmp___54 = jit->ip;
              (jit->ip) ++;
              *tmp___54 = imb___4.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
    stack_offset += 8;
  }
  return (stack_offset);
}
}
/* END FUNCTION-DEF emit_pop_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_check_code LOC=UNKNOWN */
void jit_check_code(struct jit *jit , int warnings ) 
{ 
  char buf[8192] ;
  jit_op *op ;
  jit_op *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;
  int tmp___6 ;
  int tmp___7 ;
  int tmp___8 ;

  {
  jit_expand_patches_and_labels(jit);
  jit_dead_code_analysis(jit, 0);
  jit_prepare_reg_counts(jit);
  jit_prepare_arguments(jit);
  jit_flw_analysis(jit);
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while (op) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 384U) {
      jit->current_func = op;
    }
    if (! op->debug_info) {
      goto __Cont;
    }
    buf[0] = (char )'\000';
    if (warnings & 1) {
      tmp___0 = check_dead_code(op, buf);
      (op->debug_info)->warnings |= tmp___0;
    }
    if (warnings & 128) {
      tmp___1 = check_missing_patches(op, buf);
      (op->debug_info)->warnings |= tmp___1;
    }
    if (warnings & 2) {
      tmp___2 = check_op_without_effect(op, buf);
      (op->debug_info)->warnings |= tmp___2;
    }
    if (warnings & 8) {
      tmp___3 = check_uninitialized_registers(op, buf);
      (op->debug_info)->warnings |= tmp___3;
    }
    if (warnings & 4) {
      tmp___4 = check_argument_sizes(op, buf);
      (op->debug_info)->warnings |= tmp___4;
    }
    if (warnings & 256) {
      tmp___5 = check_register_types(jit, op, buf);
      (op->debug_info)->warnings |= tmp___5;
    }
    if (warnings & 16) {
      tmp___6 = check_data_alignment(op, buf);
      (op->debug_info)->warnings |= tmp___6;
    }
    if (warnings & 64) {
      tmp___7 = check_data_references(op, buf);
      (op->debug_info)->warnings |= tmp___7;
    }
    if (warnings & 32) {
      tmp___8 = check_code_references(op, buf);
      (op->debug_info)->warnings |= tmp___8;
    }
    if ((op->debug_info)->warnings) {
      report_warning(jit, op, buf);
    }
    __Cont: /* CIL Label */ 
    op = op->next;
  }
  cleanup(jit);
  return;
}
}
/* END FUNCTION-DEF jit_check_code LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_optimize_join_addmul LOC=UNKNOWN */
int jit_optimize_join_addmul(struct jit *jit ) 
{ 
  int change ;
  jit_op *op ;
  jit_op *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;
  int tmp___3 ;
  int tmp___4 ;
  int tmp___5 ;

  {
  change = 0;
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    tmp___0 = join_2ops(op, 98, 826, & join_muli_addi);
    change |= tmp___0;
    tmp___1 = join_2ops(op, 722, 826, & join_muli_addi);
    change |= tmp___1;
    tmp___2 = join_2ops(op, 98, 825, & join_muli_addr);
    change |= tmp___2;
    tmp___3 = join_2ops(op, 722, 825, & join_muli_addr);
    change |= tmp___3;
    tmp___4 = join_2ops(op, 98, 538, & join_muli_ori);
    change |= tmp___4;
    tmp___5 = join_2ops(op, 722, 538, & join_muli_ori);
    change |= tmp___5;
    op = op->next;
  }
  return (change);
}
}
/* END FUNCTION-DEF jit_optimize_join_addmul LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_expand_patches_and_labels LOC=UNKNOWN */
__inline static void jit_expand_patches_and_labels(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 344U) {
      ((jit_op *)op->arg[0])->jmp_addr = op;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 496U) {
      ((jit_label *)op->arg[0])->op = op;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) != 496U) {
      tmp___0 = jit_is_label(jit, (void *)op->arg[0]);
      if (tmp___0) {
        op->jmp_addr = ((jit_label *)op->arg[0])->op;
      }
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) != 496U) {
      tmp___1 = jit_is_label(jit, (void *)op->arg[1]);
      if (tmp___1) {
        op->jmp_addr = ((jit_label *)op->arg[1])->op;
      }
    }
    op = op->next;
  }
  return;
}
}
/* END FUNCTION-DEF jit_expand_patches_and_labels LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_op_is_cflow LOC=UNKNOWN */
__inline static int jit_op_is_cflow(jit_op *op ) 
{ 
  int tmp ;

  {
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 648U) {
    goto _L;
  } else
  if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 336U) {
    _L: /* CIL Label */ 
    if ((int )op->code & 2) {
      return (1);
    }
  }
  tmp = is_cond_branch_op(op);
  if (tmp) {
    return (1);
  }
  return (0);
}
}
/* END FUNCTION-DEF jit_op_is_cflow LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_tree_subset LOC=UNKNOWN */
static int jit_tree_subset(jit_tree *root , jit_tree *n ) 
{ 
  jit_tree *tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  if ((unsigned long )n == (unsigned long )((void *)0)) {
    return (1);
  }
  tmp = jit_tree_search(root, n->key);
  if (tmp) {
    tmp___0 = jit_tree_subset(root, n->left);
    if (tmp___0) {
      tmp___1 = jit_tree_subset(root, n->right);
      if (tmp___1) {
        tmp___2 = 1;
      } else {
        tmp___2 = 0;
      }
    } else {
      tmp___2 = 0;
    }
  } else {
    tmp___2 = 0;
  }
  return (tmp___2);
}
}
/* END FUNCTION-DEF jit_tree_subset LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_arg_layout_create LOC=UNKNOWN */
static struct jit_arg_layout *jit_arg_layout_create(struct jit *jit , int arg_cnt ) 
{ 
  struct jit_arg_layout *layout ;
  void *tmp ;

  {
  tmp = malloc(sizeof(struct jit_arg_layout ) + sizeof(struct jit_arg_layout_location ) * (unsigned long )arg_cnt);
  layout = (struct jit_arg_layout *)tmp;
  layout->jit = jit;
  layout->arg_index = 0;
  layout->gp_index = 0;
  layout->fp_index = 0;
  layout->stack_index = 0;
  return (layout);
}
}
/* END FUNCTION-DEF jit_arg_layout_create LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isalnum LOC=UNKNOWN */
__inline extern int isalnum(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 1280UL);
  return (tmp);
}
}
/* END FUNCTION-DEF isalnum LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isnumber LOC=UNKNOWN */
__inline extern int isnumber(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 1024UL);
  return (tmp);
}
}
/* END FUNCTION-DEF isnumber LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_allocai LOC=UNKNOWN */
int jit_allocai(struct jit *jit , int size ) 
{ 
  jit_value real_size ;
  jit_value tmp ;
  struct jit_func_info *tmp___0 ;
  struct jit_func_info *tmp___1 ;

  {
  tmp = jit_value_align((jit_value )size, (jit_value )16);
  real_size = tmp;
  jit_add_op(jit, (unsigned short)522, (unsigned char)2, real_size, (jit_value )0,
             (jit_value )0, (unsigned char)0, (struct jit_debug_info *)((void *)0));
  tmp___0 = jit_current_func_info(jit);
  tmp___0->allocai_mem += real_size;
  tmp___1 = jit_current_func_info(jit);
  return ((int )(- tmp___1->allocai_mem));
}
}
/* END FUNCTION-DEF jit_allocai LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_str LOC=UNKNOWN */
__inline static void print_str(struct output_buf *buf , char *str ) 
{ 
  int i ;
  char xbuf[16] ;
  unsigned long tmp ;
  unsigned long tmp___0 ;
  unsigned long tmp___1 ;
  unsigned long tmp___2 ;
  size_t tmp___3 ;

  {
  ob_append(buf, (char *)" \"");
  i = 0;
  while (1) {
    tmp___3 = strlen((char const   *)str);
    if (! ((size_t )i < tmp___3)) {
      break;
    }
    if ((int )*(str + i) >= 32) {
      ob_printf(buf, "%c", (int )*(str + i));
    } else {
      switch ((int )*(str + i)) {
      case 9: 
      tmp = __builtin_object_size((void *)(xbuf), 1);
      __builtin___strcpy_chk(xbuf, "\\t", tmp);
      break;
      case 10: 
      tmp___0 = __builtin_object_size((void *)(xbuf), 1);
      __builtin___strcpy_chk(xbuf, "\\n", tmp___0);
      break;
      case 13: 
      tmp___1 = __builtin_object_size((void *)(xbuf), 1);
      __builtin___strcpy_chk(xbuf, "\\r", tmp___1);
      break;
      default: 
      tmp___2 = __builtin_object_size((void *)(xbuf), 1);
      __builtin___sprintf_chk(xbuf, 0, tmp___2, "\\x%02x", (int )*(str + i));
      }
      ob_append(buf, xbuf);
    }
    i ++;
  }
  ob_append(buf, (char *)"\"");
  return;
}
}
/* END FUNCTION-DEF print_str LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_push_reg LOC=UNKNOWN */
static int emit_push_reg(struct jit *jit , jit_hw_reg *r , int stack_offset ) 
{ 
  unsigned char *tmp ;
  unsigned char _amd64_rex_bits ;
  int tmp___0 ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  long tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  x86_imm_buf imb ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char *tmp___17 ;
  unsigned char *tmp___18 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char _amd64_rex_bits___0 ;
  int tmp___24 ;
  unsigned char *tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char *tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___39 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  x86_imm_buf imb___3 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;

  {
  if (! r->fp) {
    stack_offset = (int )((unsigned long )stack_offset + sizeof(void *));
    while (1) {
      if (sizeof(void *) == 2UL) {
        tmp = jit->ip;
        (jit->ip) ++;
        *tmp = (unsigned char)102;
      }
      while (1) {
        if (sizeof(void *) > 4UL) {
          tmp___0 = 8;
        } else {
          tmp___0 = 0;
        }
        if (r->id > 7) {
          tmp___1 = 4;
        } else {
          tmp___1 = 0;
        }
        _amd64_rex_bits = (unsigned char )(tmp___0 | tmp___1);
        if ((int )_amd64_rex_bits != 0) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        } else
        if (sizeof(void *) == 1UL) {
          tmp___2 = jit->ip;
          (jit->ip) ++;
          *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
        }
        break;
      }
      switch (sizeof(void *)) {
      case 1UL: 
      tmp___3 = jit->ip;
      (jit->ip) ++;
      *tmp___3 = (unsigned char)136;
      break;
      case 8UL: 
      case 4UL: 
      case 2UL: 
      tmp___4 = jit->ip;
      (jit->ip) ++;
      *tmp___4 = (unsigned char)137;
      break;
      default: 
      tmp___5 = __builtin_expect(1L, 0L);
      if (tmp___5) {
        __assert_rtn("emit_push_reg", "./jitter-amd64.c", 2407, "0");
      }
      }
      while (1) {
        if (- stack_offset == 0) {
          while (1) {
            tmp___6 = jit->ip;
            (jit->ip) ++;
            *tmp___6 = (unsigned char )((((r->id & 7) & 7) << 3) | 4);
            break;
          }
          while (1) {
            tmp___7 = jit->ip;
            (jit->ip) ++;
            *tmp___7 = (unsigned char )((4 << 3) | 4);
            break;
          }
        } else
        if (- stack_offset >= -128) {
          if (- stack_offset <= 127) {
            while (1) {
              tmp___8 = jit->ip;
              (jit->ip) ++;
              *tmp___8 = (unsigned char )(((1 << 6) | (((r->id & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___9 = jit->ip;
              (jit->ip) ++;
              *tmp___9 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- stack_offset & 255);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L;
          }
        } else {
          _L: /* CIL Label */ 
          while (1) {
            tmp___10 = jit->ip;
            (jit->ip) ++;
            *tmp___10 = (unsigned char )(((2 << 6) | (((r->id & 7) & 7) << 3)) | 4);
            break;
          }
          while (1) {
            tmp___11 = jit->ip;
            (jit->ip) ++;
            *tmp___11 = (unsigned char )((4 << 3) | 4);
            break;
          }
          while (1) {
            imb.val = - stack_offset;
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = imb.b[0];
            tmp___13 = jit->ip;
            (jit->ip) ++;
            *tmp___13 = imb.b[1];
            tmp___14 = jit->ip;
            (jit->ip) ++;
            *tmp___14 = imb.b[2];
            tmp___15 = jit->ip;
            (jit->ip) ++;
            *tmp___15 = imb.b[3];
            break;
          }
        }
        break;
        if (- stack_offset == 0) {
          while (1) {
            tmp___16 = jit->ip;
            (jit->ip) ++;
            *tmp___16 = (unsigned char )((((r->id & 7) & 7) << 3) | 4);
            break;
          }
          break;
        }
        if (- stack_offset >= -128) {
          if (- stack_offset <= 127) {
            while (1) {
              tmp___17 = jit->ip;
              (jit->ip) ++;
              *tmp___17 = (unsigned char )(((1 << 6) | (((r->id & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              *(jit->ip) = (unsigned char )(- stack_offset & 255);
              (jit->ip) ++;
              break;
            }
          } else {
            goto _L___0;
          }
        } else {
          _L___0: /* CIL Label */ 
          while (1) {
            tmp___18 = jit->ip;
            (jit->ip) ++;
            *tmp___18 = (unsigned char )(((2 << 6) | (((r->id & 7) & 7) << 3)) | 4);
            break;
          }
          while (1) {
            imb___0.val = - stack_offset;
            tmp___19 = jit->ip;
            (jit->ip) ++;
            *tmp___19 = imb___0.b[0];
            tmp___20 = jit->ip;
            (jit->ip) ++;
            *tmp___20 = imb___0.b[1];
            tmp___21 = jit->ip;
            (jit->ip) ++;
            *tmp___21 = imb___0.b[2];
            tmp___22 = jit->ip;
            (jit->ip) ++;
            *tmp___22 = imb___0.b[3];
            break;
          }
        }
        break;
      }
      break;
    }
  } else {
    stack_offset += 8;
    while (1) {
      tmp___23 = jit->ip;
      (jit->ip) ++;
      *tmp___23 = (unsigned char)102;
      while (1) {
        if (r->id > 7) {
          tmp___24 = 4;
        } else {
          tmp___24 = 0;
        }
        _amd64_rex_bits___0 = (unsigned char )tmp___24;
        if ((int )_amd64_rex_bits___0 != 0) {
          tmp___25 = jit->ip;
          (jit->ip) ++;
          *tmp___25 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
        }
        break;
      }
      tmp___26 = jit->ip;
      (jit->ip) ++;
      *tmp___26 = (unsigned char)15;
      tmp___27 = jit->ip;
      (jit->ip) ++;
      *tmp___27 = (unsigned char)19;
      while (1) {
        while (1) {
          if (- stack_offset == 0) {
            while (1) {
              tmp___33 = jit->ip;
              (jit->ip) ++;
              *tmp___33 = (unsigned char )((((r->id & 7) & 7) << 3) | 4);
              break;
            }
            while (1) {
              tmp___34 = jit->ip;
              (jit->ip) ++;
              *tmp___34 = (unsigned char )((4 << 3) | 4);
              break;
            }
          } else
          if (- stack_offset >= -128) {
            if (- stack_offset <= 127) {
              while (1) {
                tmp___35 = jit->ip;
                (jit->ip) ++;
                *tmp___35 = (unsigned char )(((1 << 6) | (((r->id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                tmp___36 = jit->ip;
                (jit->ip) ++;
                *tmp___36 = (unsigned char )((4 << 3) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- stack_offset & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___1;
            }
          } else {
            _L___1: /* CIL Label */ 
            while (1) {
              tmp___37 = jit->ip;
              (jit->ip) ++;
              *tmp___37 = (unsigned char )(((2 << 6) | (((r->id & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              tmp___38 = jit->ip;
              (jit->ip) ++;
              *tmp___38 = (unsigned char )((4 << 3) | 4);
              break;
            }
            while (1) {
              imb___2.val = - stack_offset;
              tmp___39 = jit->ip;
              (jit->ip) ++;
              *tmp___39 = imb___2.b[0];
              tmp___40 = jit->ip;
              (jit->ip) ++;
              *tmp___40 = imb___2.b[1];
              tmp___41 = jit->ip;
              (jit->ip) ++;
              *tmp___41 = imb___2.b[2];
              tmp___42 = jit->ip;
              (jit->ip) ++;
              *tmp___42 = imb___2.b[3];
              break;
            }
          }
          break;
          if (- stack_offset == 0) {
            while (1) {
              tmp___43 = jit->ip;
              (jit->ip) ++;
              *tmp___43 = (unsigned char )((((r->id & 7) & 7) << 3) | 4);
              break;
            }
            break;
          }
          if (- stack_offset >= -128) {
            if (- stack_offset <= 127) {
              while (1) {
                tmp___44 = jit->ip;
                (jit->ip) ++;
                *tmp___44 = (unsigned char )(((1 << 6) | (((r->id & 7) & 7) << 3)) | 4);
                break;
              }
              while (1) {
                *(jit->ip) = (unsigned char )(- stack_offset & 255);
                (jit->ip) ++;
                break;
              }
            } else {
              goto _L___2;
            }
          } else {
            _L___2: /* CIL Label */ 
            while (1) {
              tmp___45 = jit->ip;
              (jit->ip) ++;
              *tmp___45 = (unsigned char )(((2 << 6) | (((r->id & 7) & 7) << 3)) | 4);
              break;
            }
            while (1) {
              imb___3.val = - stack_offset;
              tmp___46 = jit->ip;
              (jit->ip) ++;
              *tmp___46 = imb___3.b[0];
              tmp___47 = jit->ip;
              (jit->ip) ++;
              *tmp___47 = imb___3.b[1];
              tmp___48 = jit->ip;
              (jit->ip) ++;
              *tmp___48 = imb___3.b[2];
              tmp___49 = jit->ip;
              (jit->ip) ++;
              *tmp___49 = imb___3.b[3];
              break;
            }
          }
          break;
        }
        break;
      }
      break;
    }
  }
  return (stack_offset);
}
}
/* END FUNCTION-DEF emit_push_reg LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_branch_overflow_op LOC=UNKNOWN */
static void emit_branch_overflow_op(struct jit *jit , struct jit_op *op , int alu_op ,
                                    int imm , int negation ) 
{ 
  unsigned char _amd64_rex_bits ;
  int tmp ;
  unsigned char *tmp___0 ;
  unsigned char *tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  x86_imm_buf imb ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  unsigned char *tmp___8 ;
  unsigned char _amd64_rex_bits___1 ;
  int tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  x86_imm_buf imb___0 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  unsigned char _amd64_rex_bits___2 ;
  int tmp___17 ;
  int tmp___18 ;
  unsigned char *tmp___19 ;
  unsigned char *tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___22 ;
  int offset ;
  int tmp___23 ;
  jit_value tmp___24 ;
  int tmp___25 ;
  unsigned char *tmp___26 ;
  unsigned char *tmp___27 ;
  unsigned char *tmp___28 ;
  x86_imm_buf imb___1 ;
  unsigned char *tmp___29 ;
  unsigned char *tmp___30 ;
  unsigned char *tmp___31 ;
  unsigned char *tmp___32 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___33 ;
  int offset___0 ;
  int tmp___34 ;
  jit_value tmp___35 ;
  int tmp___36 ;
  unsigned char *tmp___37 ;
  unsigned char *tmp___38 ;
  unsigned char *tmp___39 ;
  x86_imm_buf imb___2 ;
  unsigned char *tmp___40 ;
  unsigned char *tmp___41 ;
  unsigned char *tmp___42 ;
  unsigned char *tmp___43 ;

  {
  if (imm) {
    while (1) {
      if ((int )op->r_arg[2] >= -128) {
        if ((int )op->r_arg[2] <= 127) {
          while (1) {
            if (op->r_arg[1] > 7L) {
              tmp = 1;
            } else {
              tmp = 0;
            }
            _amd64_rex_bits = (unsigned char )(8 | tmp);
            if ((int )_amd64_rex_bits != 0) {
              tmp___0 = jit->ip;
              (jit->ip) ++;
              *tmp___0 = (unsigned char )(64 | (int )_amd64_rex_bits);
            }
            break;
          }
          tmp___1 = jit->ip;
          (jit->ip) ++;
          *tmp___1 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___2 = jit->ip;
              (jit->ip) ++;
              *tmp___2 = (unsigned char )((long )((3 << 6) | ((alu_op & 7) << 3)) | (op->r_arg[1] & 7L));
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(op->r_arg[2] & 255L);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L;
        }
      } else
      _L: /* CIL Label */ 
      if (op->r_arg[1] == 0L) {
        while (1) {
          _amd64_rex_bits___0 = (unsigned char)8;
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___3 = jit->ip;
            (jit->ip) ++;
            *tmp___3 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___4 = jit->ip;
        (jit->ip) ++;
        *tmp___4 = (unsigned char )(((int )((unsigned char )alu_op) << 3) + 5);
        while (1) {
          imb.val = (int )op->r_arg[2];
          tmp___5 = jit->ip;
          (jit->ip) ++;
          *tmp___5 = imb.b[0];
          tmp___6 = jit->ip;
          (jit->ip) ++;
          *tmp___6 = imb.b[1];
          tmp___7 = jit->ip;
          (jit->ip) ++;
          *tmp___7 = imb.b[2];
          tmp___8 = jit->ip;
          (jit->ip) ++;
          *tmp___8 = imb.b[3];
          break;
        }
      } else {
        while (1) {
          if (op->r_arg[1] > 7L) {
            tmp___9 = 1;
          } else {
            tmp___9 = 0;
          }
          _amd64_rex_bits___1 = (unsigned char )(8 | tmp___9);
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___10 = jit->ip;
            (jit->ip) ++;
            *tmp___10 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___11 = jit->ip;
        (jit->ip) ++;
        *tmp___11 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___12 = jit->ip;
            (jit->ip) ++;
            *tmp___12 = (unsigned char )((long )((3 << 6) | ((alu_op & 7) << 3)) | (op->r_arg[1] & 7L));
            break;
          }
          break;
        }
        while (1) {
          imb___0.val = (int )op->r_arg[2];
          tmp___13 = jit->ip;
          (jit->ip) ++;
          *tmp___13 = imb___0.b[0];
          tmp___14 = jit->ip;
          (jit->ip) ++;
          *tmp___14 = imb___0.b[1];
          tmp___15 = jit->ip;
          (jit->ip) ++;
          *tmp___15 = imb___0.b[2];
          tmp___16 = jit->ip;
          (jit->ip) ++;
          *tmp___16 = imb___0.b[3];
          break;
        }
      }
      break;
    }
  } else {
    while (1) {
      while (1) {
        if (op->r_arg[1] > 7L) {
          tmp___17 = 4;
        } else {
          tmp___17 = 0;
        }
        if (op->r_arg[2] > 7L) {
          tmp___18 = 1;
        } else {
          tmp___18 = 0;
        }
        _amd64_rex_bits___2 = (unsigned char )((8 | tmp___17) | tmp___18);
        if ((int )_amd64_rex_bits___2 != 0) {
          tmp___19 = jit->ip;
          (jit->ip) ++;
          *tmp___19 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
        }
        break;
      }
      tmp___20 = jit->ip;
      (jit->ip) ++;
      *tmp___20 = (unsigned char )(((int )((unsigned char )alu_op) << 3) + 3);
      while (1) {
        while (1) {
          tmp___21 = jit->ip;
          (jit->ip) ++;
          *tmp___21 = (unsigned char )(((long )(3 << 6) | ((op->r_arg[1] & 7L) << 3)) | (op->r_arg[2] & 7L));
          break;
        }
        break;
      }
      break;
    }
  }
  op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
  if (! negation) {
    while (1) {
      while (1) {
        _amd64_rex_bits___3 = (unsigned char)8;
        if ((int )_amd64_rex_bits___3 != 0) {
          tmp___22 = jit->ip;
          (jit->ip) ++;
          *tmp___22 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
        }
        break;
      }
      while (1) {
        tmp___25 = jit_is_label(jit, (void *)op->r_arg[0]);
        if (tmp___25) {
          tmp___24 = ((jit_value )jit->buf + ((jit_label *)op->r_arg[0])->pos) - (jit_value )jit->ip;
        } else {
          tmp___24 = op->r_arg[0];
        }
        offset = (int )(tmp___24 - 6L);
        while (1) {
          tmp___26 = jit->ip;
          (jit->ip) ++;
          *tmp___26 = (unsigned char)15;
          tmp___28 = jit->ip;
          (jit->ip) ++;
          *tmp___28 = (unsigned char )((int const   )x86_cc_unsigned_map[10] + 16);
          while (1) {
            imb___1.val = offset;
            tmp___29 = jit->ip;
            (jit->ip) ++;
            *tmp___29 = imb___1.b[0];
            tmp___30 = jit->ip;
            (jit->ip) ++;
            *tmp___30 = imb___1.b[1];
            tmp___31 = jit->ip;
            (jit->ip) ++;
            *tmp___31 = imb___1.b[2];
            tmp___32 = jit->ip;
            (jit->ip) ++;
            *tmp___32 = imb___1.b[3];
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  } else {
    while (1) {
      while (1) {
        _amd64_rex_bits___4 = (unsigned char)8;
        if ((int )_amd64_rex_bits___4 != 0) {
          tmp___33 = jit->ip;
          (jit->ip) ++;
          *tmp___33 = (unsigned char )(64 | (int )_amd64_rex_bits___4);
        }
        break;
      }
      while (1) {
        tmp___36 = jit_is_label(jit, (void *)op->r_arg[0]);
        if (tmp___36) {
          tmp___35 = ((jit_value )jit->buf + ((jit_label *)op->r_arg[0])->pos) - (jit_value )jit->ip;
        } else {
          tmp___35 = op->r_arg[0];
        }
        offset___0 = (int )(tmp___35 - 6L);
        while (1) {
          tmp___37 = jit->ip;
          (jit->ip) ++;
          *tmp___37 = (unsigned char)15;
          tmp___39 = jit->ip;
          (jit->ip) ++;
          *tmp___39 = (unsigned char )((int const   )x86_cc_unsigned_map[11] + 16);
          while (1) {
            imb___2.val = offset___0;
            tmp___40 = jit->ip;
            (jit->ip) ++;
            *tmp___40 = imb___2.b[0];
            tmp___41 = jit->ip;
            (jit->ip) ++;
            *tmp___41 = imb___2.b[1];
            tmp___42 = jit->ip;
            (jit->ip) ++;
            *tmp___42 = imb___2.b[2];
            tmp___43 = jit->ip;
            (jit->ip) ++;
            *tmp___43 = imb___2.b[3];
            break;
          }
          break;
        }
        break;
      }
      break;
    }
  }
  return;
}
}
/* END FUNCTION-DEF emit_branch_overflow_op LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF make_nop LOC=UNKNOWN */
__inline static void make_nop(jit_op *op ) 
{ 


  {
  op->code = (unsigned short)392;
  op->spec = (unsigned char)0;
  return;
}
}
/* END FUNCTION-DEF make_nop LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF print_rmap_callback LOC=UNKNOWN */
static void print_rmap_callback(jit_tree_key key , jit_tree_value value , void *disasm ) 
{ 
  char buf[256] ;

  {
  jit_get_reg_name((struct jit_disasm *)disasm, buf, (int )key);
  printf((char const   */* __restrict  */)"%s=%s ", buf, ((jit_hw_reg *)value)->name);
  return;
}
}
/* END FUNCTION-DEF print_rmap_callback LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF ob_append LOC=UNKNOWN */
static void ob_append(struct output_buf *ob , char *str ) 
{ 
  int len ;
  size_t tmp ;
  unsigned long tmp___0 ;

  {
  tmp = strlen((char const   *)str);
  len = (int )tmp;
  ob_assert_space(ob, len);
  tmp___0 = __builtin_object_size((void *)ob->buf, 1);
  __builtin___strcat_chk(ob->buf, (char const   *)str, tmp___0);
  ob->size += (size_t )len;
  return;
}
}
/* END FUNCTION-DEF ob_append LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_arg_layout_add LOC=UNKNOWN */
static void jit_arg_layout_add(struct jit_arg_layout *layout , int isfp , struct jit_out_arg *arg ) 
{ 
  int i ;
  int tmp ;
  struct jit_arg_layout_location *location ;
  struct jit_reg_allocator *reg_al ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = layout->arg_index;
  (layout->arg_index) ++;
  i = tmp;
  location = & layout->arguments[i];
  reg_al = (layout->jit)->reg_al;
  location->oarg = arg;
  location->isfp = (char )isfp;
  if (! isfp) {
    if (layout->gp_index < reg_al->gp_arg_reg_cnt) {
      location->passed_in_reg = (char)1;
      tmp___0 = layout->gp_index;
      (layout->gp_index) ++;
      location->index = tmp___0;
    } else {
      goto _L;
    }
  } else
  _L: /* CIL Label */ 
  if (isfp) {
    if (layout->fp_index < reg_al->fp_arg_reg_cnt) {
      location->passed_in_reg = (char)1;
      tmp___1 = layout->fp_index;
      (layout->fp_index) ++;
      location->index = tmp___1;
    } else {
      location->passed_in_reg = (char)0;
      location->index = layout->stack_index;
      (layout->stack_index) ++;
    }
  } else {
    location->passed_in_reg = (char)0;
    location->index = layout->stack_index;
    (layout->stack_index) ++;
  }
  return;
}
}
/* END FUNCTION-DEF jit_arg_layout_add LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_buf_expand LOC=UNKNOWN */
__inline static void jit_buf_expand(struct jit *jit ) 
{ 
  long pos ;
  void *tmp ;

  {
  pos = jit->ip - jit->buf;
  jit->buf_capacity *= 2U;
  tmp = realloc((void *)jit->buf, (size_t )jit->buf_capacity);
  jit->buf = (unsigned char *)tmp;
  jit->ip = jit->buf + pos;
  return;
}
}
/* END FUNCTION-DEF jit_buf_expand LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_correct_float_imms LOC=UNKNOWN */
__inline static void jit_correct_float_imms(struct jit *jit ) 
{ 
  jit_op *op ;
  jit_op *tmp ;
  int imm_arg ;
  int i ;
  jit_op *newop ;
  struct jit_op *tmp___0 ;

  {
  tmp = jit_op_first(jit->ops);
  op = tmp;
  while ((unsigned long )op != (unsigned long )((void *)0)) {
    if (! ((int )op->code & 2)) {
      goto __Cont;
    }
    if (! op->fp) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 256U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 904U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 48U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 672U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 16U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 120U) {
      goto __Cont;
    }
    if ((unsigned int )((jit_opcode )((int )op->code & 65528)) == 384U) {
      goto __Cont;
    }
    i = 1;
    while (i < 4) {
      if ((((int )op->spec >> (i - 1) * 2) & 3) == 2) {
        imm_arg = i - 1;
      }
      i ++;
    }
    tmp___0 = jit_op_new((unsigned short)258, (unsigned char )((2 << 2) | 3), (jit_value )(1 | (1 << 1)),
                         0L, 0L, (unsigned char)0);
    newop = tmp___0;
    newop->fp = (unsigned char)1;
    newop->flt_imm = op->flt_imm;
    jit_op_prepend(op, newop);
    op->code = (unsigned short )((int )op->code & -4);
    op->code = (unsigned short )((int )op->code | 1);
    op->spec = (unsigned char )((int )op->spec & ~ (3 << 2 * imm_arg));
    op->spec = (unsigned char )((int )op->spec | (1 << 2 * imm_arg));
    op->arg[imm_arg] = (jit_value )(1 | (1 << 1));
    __Cont: /* CIL Label */ 
    op = op->next;
  }
  return;
}
}
/* END FUNCTION-DEF jit_correct_float_imms LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_tree_equal LOC=UNKNOWN */
static int jit_tree_equal(jit_tree *r1 , jit_tree *r2 ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;

  {
  tmp = jit_tree_subset(r1, r2);
  if (tmp) {
    tmp___0 = jit_tree_subset(r2, r1);
    if (tmp___0) {
      tmp___1 = 1;
    } else {
      tmp___1 = 0;
    }
  } else {
    tmp___1 = 0;
  }
  return (tmp___1);
}
}
/* END FUNCTION-DEF jit_tree_equal LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF is_red LOC=UNKNOWN */
__inline static int is_red(jit_tree *n ) 
{ 


  {
  if ((unsigned long )n == (unsigned long )((void *)0)) {
    return (0);
  }
  return (n->color == 1);
}
}
/* END FUNCTION-DEF is_red LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF isrune LOC=UNKNOWN */
__inline extern int isrune(int _c ) 
{ 
  int tmp ;

  {
  tmp = __istype(_c, 4294967280UL);
  return (tmp);
}
}
/* END FUNCTION-DEF isrune LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF ob_assert_space LOC=UNKNOWN */
static void ob_assert_space(struct output_buf *ob , int len ) 
{ 
  void *tmp ;

  {
  if ((ob->size + (size_t )len) + 2UL > ob->capacity) {
    ob->capacity += (size_t )(len + 8192);
    tmp = realloc((void *)ob->buf, ob->capacity);
    ob->buf = (char *)tmp;
  }
  return;
}
}
/* END FUNCTION-DEF ob_assert_space LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_op_last LOC=UNKNOWN */
__inline static jit_op *jit_op_last(jit_op *op ) 
{ 


  {
  while ((unsigned long )op->next != (unsigned long )((void *)0)) {
    op = op->next;
  }
  return (op);
}
}
/* END FUNCTION-DEF jit_op_last LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF emit_funcall LOC=UNKNOWN */
static void emit_funcall(struct jit *jit , struct jit_op *op , int imm ) 
{ 
  int stack_correction ;
  int tmp ;
  jit_hw_reg *hreg ;
  jit_hw_reg *tmp___0 ;
  unsigned char _amd64_rex_bits ;
  int tmp___1 ;
  unsigned char *tmp___2 ;
  unsigned char *tmp___3 ;
  unsigned char *tmp___4 ;
  unsigned char _amd64_rex_bits___0 ;
  unsigned char *tmp___5 ;
  unsigned char *tmp___6 ;
  unsigned char *tmp___7 ;
  x86_imm_buf imb ;
  int tmp___8 ;
  unsigned char *tmp___9 ;
  unsigned char *tmp___10 ;
  unsigned char *tmp___11 ;
  unsigned char *tmp___12 ;
  unsigned char *tmp___13 ;
  unsigned char *tmp___14 ;
  unsigned char *tmp___15 ;
  unsigned char *tmp___16 ;
  int tmp___17 ;
  unsigned char *tmp___18 ;
  unsigned char *tmp___19 ;
  x86_imm_buf imb___0 ;
  int tmp___20 ;
  unsigned char *tmp___21 ;
  unsigned char *tmp___22 ;
  unsigned char *tmp___23 ;
  unsigned char *tmp___24 ;
  int tmp___25 ;
  int tmp___26 ;
  int tmp___27 ;
  unsigned char *tmp___28 ;
  int tmp___29 ;
  unsigned char *tmp___30 ;
  int tmp___31 ;
  unsigned char *tmp___32 ;
  x86_imm_buf imb___1 ;
  int tmp___33 ;
  unsigned char *tmp___34 ;
  unsigned char *tmp___35 ;
  unsigned char *tmp___36 ;
  unsigned char *tmp___37 ;
  int tmp___38 ;
  int tmp___39 ;
  unsigned char *tmp___40 ;
  x86_imm_buf imb___2 ;
  int tmp___41 ;
  jit_value tmp___42 ;
  int tmp___43 ;
  unsigned char *tmp___44 ;
  unsigned char *tmp___45 ;
  unsigned char *tmp___46 ;
  unsigned char *tmp___47 ;
  unsigned char _amd64_rex_bits___1 ;
  unsigned char *tmp___48 ;
  unsigned char *tmp___49 ;
  amd64_imm_buf imb___3 ;
  unsigned char *tmp___50 ;
  unsigned char *tmp___51 ;
  unsigned char *tmp___52 ;
  unsigned char *tmp___53 ;
  unsigned char *tmp___54 ;
  unsigned char *tmp___55 ;
  unsigned char *tmp___56 ;
  unsigned char *tmp___57 ;
  x86_imm_buf imb___4 ;
  unsigned char *tmp___58 ;
  unsigned char *tmp___59 ;
  unsigned char *tmp___60 ;
  unsigned char *tmp___61 ;
  unsigned char _amd64_rex_bits___2 ;
  unsigned char *tmp___62 ;
  unsigned char *tmp___63 ;
  unsigned char *tmp___64 ;
  int tmp___65 ;
  unsigned char _amd64_rex_bits___3 ;
  unsigned char *tmp___66 ;
  unsigned char *tmp___67 ;
  unsigned char *tmp___68 ;
  unsigned char _amd64_rex_bits___4 ;
  unsigned char *tmp___69 ;
  unsigned char *tmp___70 ;
  x86_imm_buf imb___5 ;
  unsigned char *tmp___71 ;
  unsigned char *tmp___72 ;
  unsigned char *tmp___73 ;
  unsigned char *tmp___74 ;
  unsigned char _amd64_rex_bits___5 ;
  unsigned char *tmp___75 ;
  unsigned char *tmp___76 ;
  unsigned char *tmp___77 ;
  x86_imm_buf imb___6 ;
  unsigned char *tmp___78 ;
  unsigned char *tmp___79 ;
  unsigned char *tmp___80 ;
  unsigned char *tmp___81 ;
  int tmp___82 ;

  {
  tmp = emit_arguments(jit);
  stack_correction = tmp;
  if (! imm) {
    tmp___0 = rmap_get(op->regmap, op->arg[0]);
    hreg = tmp___0;
    if (hreg) {
      while (1) {
        while (1) {
          if (hreg->id > 7) {
            tmp___1 = 1;
          } else {
            tmp___1 = 0;
          }
          _amd64_rex_bits = (unsigned char )tmp___1;
          if ((int )_amd64_rex_bits != 0) {
            tmp___2 = jit->ip;
            (jit->ip) ++;
            *tmp___2 = (unsigned char )(64 | (int )_amd64_rex_bits);
          }
          break;
        }
        tmp___3 = jit->ip;
        (jit->ip) ++;
        *tmp___3 = (unsigned char)255;
        while (1) {
          while (1) {
            tmp___4 = jit->ip;
            (jit->ip) ++;
            *tmp___4 = (unsigned char )(((3 << 6) | (2 << 3)) | ((hreg->id & 7) & 7));
            break;
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          _amd64_rex_bits___0 = (unsigned char)0;
          if ((int )_amd64_rex_bits___0 != 0) {
            tmp___5 = jit->ip;
            (jit->ip) ++;
            *tmp___5 = (unsigned char )(64 | (int )_amd64_rex_bits___0);
          }
          break;
        }
        tmp___6 = jit->ip;
        (jit->ip) ++;
        *tmp___6 = (unsigned char)255;
        while (1) {
          while (1) {
            if (0) {
              tmp___27 = stack_reg_pos(jit, (int )op->arg[0]);
              if (tmp___27 == 0) {
                while (1) {
                  tmp___13 = jit->ip;
                  (jit->ip) ++;
                  *tmp___13 = (unsigned char )((2 << 3) | 4);
                  break;
                }
                while (1) {
                  tmp___14 = jit->ip;
                  (jit->ip) ++;
                  *tmp___14 = (unsigned char )((4 << 3) | 4);
                  break;
                }
              } else {
                tmp___25 = stack_reg_pos(jit, (int )op->arg[0]);
                if (tmp___25 >= -128) {
                  tmp___26 = stack_reg_pos(jit, (int )op->arg[0]);
                  if (tmp___26 <= 127) {
                    while (1) {
                      tmp___15 = jit->ip;
                      (jit->ip) ++;
                      *tmp___15 = (unsigned char )(((1 << 6) | (2 << 3)) | 4);
                      break;
                    }
                    while (1) {
                      tmp___16 = jit->ip;
                      (jit->ip) ++;
                      *tmp___16 = (unsigned char )((4 << 3) | 4);
                      break;
                    }
                    while (1) {
                      tmp___17 = stack_reg_pos(jit, (int )op->arg[0]);
                      *(jit->ip) = (unsigned char )(tmp___17 & 255);
                      (jit->ip) ++;
                      break;
                    }
                  } else {
                    goto _L;
                  }
                } else {
                  _L: /* CIL Label */ 
                  while (1) {
                    tmp___18 = jit->ip;
                    (jit->ip) ++;
                    *tmp___18 = (unsigned char )(((2 << 6) | (2 << 3)) | 4);
                    break;
                  }
                  while (1) {
                    tmp___19 = jit->ip;
                    (jit->ip) ++;
                    *tmp___19 = (unsigned char )((4 << 3) | 4);
                    break;
                  }
                  while (1) {
                    tmp___20 = stack_reg_pos(jit, (int )op->arg[0]);
                    imb___0.val = tmp___20;
                    tmp___21 = jit->ip;
                    (jit->ip) ++;
                    *tmp___21 = imb___0.b[0];
                    tmp___22 = jit->ip;
                    (jit->ip) ++;
                    *tmp___22 = imb___0.b[1];
                    tmp___23 = jit->ip;
                    (jit->ip) ++;
                    *tmp___23 = imb___0.b[2];
                    tmp___24 = jit->ip;
                    (jit->ip) ++;
                    *tmp___24 = imb___0.b[3];
                    break;
                  }
                }
              }
              break;
            }
            tmp___29 = stack_reg_pos(jit, (int )op->arg[0]);
            if (tmp___29 == 0) {

            }
            tmp___38 = stack_reg_pos(jit, (int )op->arg[0]);
            if (tmp___38 >= -128) {
              tmp___39 = stack_reg_pos(jit, (int )op->arg[0]);
              if (tmp___39 <= 127) {
                while (1) {
                  tmp___30 = jit->ip;
                  (jit->ip) ++;
                  *tmp___30 = (unsigned char )(((1 << 6) | (2 << 3)) | 5);
                  break;
                }
                while (1) {
                  tmp___31 = stack_reg_pos(jit, (int )op->arg[0]);
                  *(jit->ip) = (unsigned char )(tmp___31 & 255);
                  (jit->ip) ++;
                  break;
                }
              } else {
                goto _L___0;
              }
            } else {
              _L___0: /* CIL Label */ 
              while (1) {
                tmp___32 = jit->ip;
                (jit->ip) ++;
                *tmp___32 = (unsigned char )(((2 << 6) | (2 << 3)) | 5);
                break;
              }
              while (1) {
                tmp___33 = stack_reg_pos(jit, (int )op->arg[0]);
                imb___1.val = tmp___33;
                tmp___34 = jit->ip;
                (jit->ip) ++;
                *tmp___34 = imb___1.b[0];
                tmp___35 = jit->ip;
                (jit->ip) ++;
                *tmp___35 = imb___1.b[1];
                tmp___36 = jit->ip;
                (jit->ip) ++;
                *tmp___36 = imb___1.b[2];
                tmp___37 = jit->ip;
                (jit->ip) ++;
                *tmp___37 = imb___1.b[3];
                break;
              }
            }
            break;
          }
          break;
        }
        break;
      }
    }
  } else {
    tmp___65 = jit_is_label(jit, (void *)op->arg[0]);
    if (tmp___65) {
      op->patch_addr = (jit_value )jit->ip - (jit_value )jit->buf;
      while (1) {
        while (1) {
          tmp___40 = jit->ip;
          (jit->ip) ++;
          *tmp___40 = (unsigned char)232;
          while (1) {
            tmp___43 = jit_is_label(jit, (void *)op->arg[0]);
            if (tmp___43) {
              tmp___42 = ((jit_value )jit->buf + ((jit_label *)op->arg[0])->pos) - (jit_value )jit->ip;
            } else {
              tmp___42 = op->arg[0];
            }
            imb___2.val = (int )(tmp___42 - 4L);
            tmp___44 = jit->ip;
            (jit->ip) ++;
            *tmp___44 = imb___2.b[0];
            tmp___45 = jit->ip;
            (jit->ip) ++;
            *tmp___45 = imb___2.b[1];
            tmp___46 = jit->ip;
            (jit->ip) ++;
            *tmp___46 = imb___2.b[2];
            tmp___47 = jit->ip;
            (jit->ip) ++;
            *tmp___47 = imb___2.b[3];
            break;
          }
          break;
        }
        break;
      }
    } else {
      while (1) {
        while (1) {
          _amd64_rex_bits___1 = (unsigned char)9;
          if ((int )_amd64_rex_bits___1 != 0) {
            tmp___48 = jit->ip;
            (jit->ip) ++;
            *tmp___48 = (unsigned char )(64 | (int )_amd64_rex_bits___1);
          }
          break;
        }
        tmp___49 = jit->ip;
        (jit->ip) ++;
        *tmp___49 = (unsigned char)187;
        while (1) {
          imb___3.val = (size_t )op->arg[0];
          tmp___50 = jit->ip;
          (jit->ip) ++;
          *tmp___50 = imb___3.b[0];
          tmp___51 = jit->ip;
          (jit->ip) ++;
          *tmp___51 = imb___3.b[1];
          tmp___52 = jit->ip;
          (jit->ip) ++;
          *tmp___52 = imb___3.b[2];
          tmp___53 = jit->ip;
          (jit->ip) ++;
          *tmp___53 = imb___3.b[3];
          tmp___54 = jit->ip;
          (jit->ip) ++;
          *tmp___54 = imb___3.b[4];
          tmp___55 = jit->ip;
          (jit->ip) ++;
          *tmp___55 = imb___3.b[5];
          tmp___56 = jit->ip;
          (jit->ip) ++;
          *tmp___56 = imb___3.b[6];
          tmp___57 = jit->ip;
          (jit->ip) ++;
          *tmp___57 = imb___3.b[7];
          break;
        }
        break;
      }
      while (1) {
        while (1) {
          _amd64_rex_bits___2 = (unsigned char)1;
          if ((int )_amd64_rex_bits___2 != 0) {
            tmp___62 = jit->ip;
            (jit->ip) ++;
            *tmp___62 = (unsigned char )(64 | (int )_amd64_rex_bits___2);
          }
          break;
        }
        tmp___63 = jit->ip;
        (jit->ip) ++;
        *tmp___63 = (unsigned char)255;
        while (1) {
          while (1) {
            tmp___64 = jit->ip;
            (jit->ip) ++;
            *tmp___64 = (unsigned char )(((3 << 6) | (2 << 3)) | 3);
            break;
          }
          break;
        }
        break;
      }
    }
  }
  stack_correction += jit->prepared_args.stack_size;
  if (stack_correction) {
    while (1) {
      if (stack_correction >= -128) {
        if (stack_correction <= 127) {
          while (1) {
            _amd64_rex_bits___3 = (unsigned char)8;
            if ((int )_amd64_rex_bits___3 != 0) {
              tmp___66 = jit->ip;
              (jit->ip) ++;
              *tmp___66 = (unsigned char )(64 | (int )_amd64_rex_bits___3);
            }
            break;
          }
          tmp___67 = jit->ip;
          (jit->ip) ++;
          *tmp___67 = (unsigned char)131;
          while (1) {
            while (1) {
              tmp___68 = jit->ip;
              (jit->ip) ++;
              *tmp___68 = (unsigned char )((3 << 6) | 4);
              break;
            }
            break;
          }
          while (1) {
            *(jit->ip) = (unsigned char )(stack_correction & 255);
            (jit->ip) ++;
            break;
          }
        } else {
          goto _L___1;
        }
      } else {
        _L___1: /* CIL Label */ 
        while (1) {
          _amd64_rex_bits___5 = (unsigned char)8;
          if ((int )_amd64_rex_bits___5 != 0) {
            tmp___75 = jit->ip;
            (jit->ip) ++;
            *tmp___75 = (unsigned char )(64 | (int )_amd64_rex_bits___5);
          }
          break;
        }
        tmp___76 = jit->ip;
        (jit->ip) ++;
        *tmp___76 = (unsigned char)129;
        while (1) {
          while (1) {
            tmp___77 = jit->ip;
            (jit->ip) ++;
            *tmp___77 = (unsigned char )((3 << 6) | 4);
            break;
          }
          break;
        }
        while (1) {
          imb___6.val = stack_correction;
          tmp___78 = jit->ip;
          (jit->ip) ++;
          *tmp___78 = imb___6.b[0];
          tmp___79 = jit->ip;
          (jit->ip) ++;
          *tmp___79 = imb___6.b[1];
          tmp___80 = jit->ip;
          (jit->ip) ++;
          *tmp___80 = imb___6.b[2];
          tmp___81 = jit->ip;
          (jit->ip) ++;
          *tmp___81 = imb___6.b[3];
          break;
        }
      }
      break;
    }
  }
  free((void *)jit->prepared_args.args);
  tmp___82 = emit_pop_caller_saved_regs(jit, op);
  jit->push_count -= tmp___82;
  return;
}
}
/* END FUNCTION-DEF emit_funcall LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF check_argument_sizes LOC=UNKNOWN */
static int check_argument_sizes(jit_op *op , char *msg_buf ) 
{ 
  int tmp ;
  int tmp___0 ;
  int tmp___1 ;
  int tmp___2 ;

  {
  switch ((unsigned int )((jit_opcode )((int )op->code & 65528))) {
  case 752U: 
  case 480U: 
  case 112U: 
  case 24U: 
  tmp = valid_size((int )op->arg_size);
  if (tmp) {
    return (0);
  }
  break;
  case 360U: 
  case 304U: 
  case 904U: 
  case 120U: 
  case 16U: 
  case 672U: 
  case 48U: 
  tmp___0 = valid_fsize((int )op->arg_size);
  if (tmp___0) {
    return (0);
  }
  break;
  case 808U: 
  if (op->arg[0] == 0L) {
    goto _L;
  } else
  if (op->arg[0] == 1L) {
    _L: /* CIL Label */ 
    tmp___1 = valid_size((int )op->arg[1]);
    if (tmp___1) {
      return (0);
    }
  }
  if (op->arg[0] == 2L) {
    tmp___2 = valid_fsize((int )op->arg[1]);
    if (tmp___2) {
      return (0);
    }
  }
  if (op->arg[0] == 3L) {
    if ((unsigned long )op->arg[1] == sizeof(void *)) {
      return (0);
    }
  }
  break;
  default: 
  return (0);
  }
  append_msg(msg_buf, (char *)"invalid data size");
  return (4);
}
}
/* END FUNCTION-DEF check_argument_sizes LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF analyze_function LOC=UNKNOWN */
__inline static void analyze_function(struct jit *jit , jit_op *first_op , jit_op *last_op ) 
{ 
  int changed ;
  struct code_refs_cache code_refs ;
  struct jit_func_info *func_info ;
  jit_op *op ;
  int tmp ;

  {
  code_refs.size = -1;
  code_refs.ops = (jit_op **)((void *)0);
  func_info = (struct jit_func_info *)first_op->arg[1];
  while (1) {
    changed = 0;
    op = last_op;
    while (1) {
      tmp = flw_analyze_op(jit, op, func_info, changed, & code_refs);
      changed |= tmp;
      if ((unsigned long )op == (unsigned long )first_op) {
        break;
      }
      op = op->prev;
    }
    if (! changed) {
      break;
    }
  }
  if (code_refs.ops) {
    free((void *)code_refs.ops);
  }
  return;
}
}
/* END FUNCTION-DEF analyze_function LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF associate_register_alias LOC=UNKNOWN */
static void associate_register_alias(struct jit_reg_allocator *al , jit_op *op , int i ) 
{ 
  long tmp ;

  {
  if ((int )op->arg[i] == ((2 << 1) | (1 << 4))) {
    op->r_arg[i] = (jit_value )(al->ret_reg)->id;
  } else
  if ((int )op->arg[i] == 2 << 1) {
    op->r_arg[i] = (jit_value )al->fp_reg;
  } else {
    tmp = __builtin_expect(1L, 0L);
    if (tmp) {
      __assert_rtn("associate_register_alias", "./jitter-amd64.c", 5303, "0");
    }
  }
  return;
}
}
/* END FUNCTION-DEF associate_register_alias LOC=UNKNOWN */

/* BEGIN FUNCTION-DEF jit_set_remove LOC=UNKNOWN */
__inline static void jit_set_remove(jit_set *s , int value ) 
{ 


  {
  s->root = jit_tree_delete(s->root, (jit_tree_key )value, (int *)((void *)0));
  return;
}
}
/* END FUNCTION-DEF jit_set_remove LOC=UNKNOWN */
